// Generated at Tue Dec 20 23:00:49 2016. Do not modify it

/*
GCC-XML version 0.9.0
Configuration settings:
  GCCXML_CONFIG="/afs/cern.ch/cms/slc6_amd64_gcc481/external/gccxml/0.9.0-20140124-0/share/gccxml-0.9/gccxml_config"
  GCCXML_COMPILER="/afs/cern.ch/cms/slc6_amd64_gcc481/external/gcc/4.8.1/bin/c++"
  GCCXML_CXXFLAGS=""
  GCCXML_EXECUTABLE="/afs/cern.ch/cms/slc6_amd64_gcc481/external/gccxml/0.9.0-20140124-0/bin/gccxml_cc1plus"
  GCCXML_CPP="/afs/cern.ch/cms/slc6_amd64_gcc481/external/gccxml/0.9.0-20140124-0/bin/gccxml_cc1plus"
  GCCXML_FLAGS="-D__DBL_MIN_EXP__='(-1021)' -D__UINT_LEAST16_MAX__='65535' -D__ATOMIC_ACQUIRE='2' -D__FLT_MIN__='1.17549435082228750797e-38F' -D__UINT_LEAST8_TYPE__='unsigned char' -D__INTMAX_C(c)='c ## L' -D__CHAR_BIT__='8' -D__UINT8_MAX__='255' -D__WINT_MAX__='4294967295U' -D__ORDER_LITTLE_ENDIAN__='1234' -D__SIZE_MAX__='18446744073709551615UL' -D__WCHAR_MAX__='2147483647' -D__GCC_HAVE_SYNC_COMPARE_AND_SWAP_1='1' -D__GCC_HAVE_SYNC_COMPARE_AND_SWAP_2='1' -D__GCC_HAVE_SYNC_COMPARE_AND_SWAP_4='1' -D__DBL_DENORM_MIN__='double(4.94065645841246544177e-324L)' -D__GCC_HAVE_SYNC_COMPARE_AND_SWAP_8='1' -D__GCC_ATOMIC_CHAR_LOCK_FREE='2' -D__FLT_EVAL_METHOD__='0' -D__unix__='1' -D__GCC_ATOMIC_CHAR32_T_LOCK_FREE='2' -D__x86_64='1' -D__UINT_FAST64_MAX__='18446744073709551615UL' -D__SIG_ATOMIC_TYPE__='int' -D__DBL_MIN_10_EXP__='(-307)' -D__FINITE_MATH_ONLY__='0' -D__GNUC_PATCHLEVEL__='1' -D__UINT_FAST8_MAX__='255' -D__DEC64_MAX_EXP__='385' -D__INT8_C(c)='c' -D__UINT_LEAST64_MAX__='18446744073709551615UL' -D__SHRT_MAX__='32767' -D__LDBL_MAX__='1.18973149535723176502e+4932L' -D__UINT_LEAST8_MAX__='255' -D__GCC_ATOMIC_BOOL_LOCK_FREE='2' -D__UINTMAX_TYPE__='long unsigned int' -D__linux='1' -D__DEC32_EPSILON__='1E-6DF' -D__unix='1' -D__UINT32_MAX__='4294967295U' -D__LDBL_MAX_EXP__='16384' -D__WINT_MIN__='0U' -D__linux__='1' -D__SCHAR_MAX__='127' -D__WCHAR_MIN__='(-__WCHAR_MAX__ - 1)' -D__INT64_C(c)='c ## L' -D__DBL_DIG__='15' -D__GCC_ATOMIC_POINTER_LOCK_FREE='2' -D__SIZEOF_INT__='4' -D__SIZEOF_POINTER__='8' -D__GCC_ATOMIC_CHAR16_T_LOCK_FREE='2' -D__USER_LABEL_PREFIX__='' -D__STDC_HOSTED__='1' -D__LDBL_HAS_INFINITY__='1' -D__FLT_EPSILON__='1.19209289550781250000e-7F' -D__GXX_WEAK__='1' -D__LDBL_MIN__='3.36210314311209350626e-4932L' -D__DEC32_MAX__='9.999999E96DF' -D__INT32_MAX__='2147483647' -D__SIZEOF_LONG__='8' -D__UINT16_C(c)='c' -D__DECIMAL_DIG__='21' -D__gnu_linux__='1' -D__LDBL_HAS_QUIET_NAN__='1' -D__GNUC__='4' -D__GXX_RTTI='1' -D__MMX__='1' -D__FLT_HAS_DENORM__='1' -D__SIZEOF_LONG_DOUBLE__='16' -D__BIGGEST_ALIGNMENT__='16' -D__DBL_MAX__='double(1.79769313486231570815e+308L)' -D__INT_FAST32_MAX__='9223372036854775807L' -D__DBL_HAS_INFINITY__='1' -D__INT64_MAX__='9223372036854775807L' -D__DEC32_MIN_EXP__='(-94)' -D__INT_FAST16_TYPE__='long int' -D__LDBL_HAS_DENORM__='1' -D__cplusplus='199711L' -D__DEC128_MAX__='9.999999999999999999999999999999999E6144DL' -D__INT_LEAST32_MAX__='2147483647' -D__DEC32_MIN__='1E-95DF' -D__DEPRECATED='1' -D__DBL_MAX_EXP__='1024' -D__DEC128_EPSILON__='1E-33DL' -D__SSE2_MATH__='1' -D__ATOMIC_HLE_RELEASE='131072' -D__PTRDIFF_MAX__='9223372036854775807L' -D__amd64='1' -D__ATOMIC_HLE_ACQUIRE='65536' -D__GNUG__='4' -D__LONG_LONG_MAX__='9223372036854775807LL' -D__SIZEOF_SIZE_T__='8' -D__SIZEOF_WINT_T__='4' -D__GCC_HAVE_DWARF2_CFI_ASM='1' -D__GXX_ABI_VERSION='999999' -D__FLT_MIN_EXP__='(-125)' -D__INT_FAST64_TYPE__='long int' -D__DBL_MIN__='double(2.22507385850720138309e-308L)' -D__LP64__='1' -D__DECIMAL_BID_FORMAT__='1' -D__DEC128_MIN__='1E-6143DL' -D__REGISTER_PREFIX__='' -D__UINT16_MAX__='65535' -D__DBL_HAS_DENORM__='1' -D__UINT8_TYPE__='unsigned char' -D__NO_INLINE__='1' -D__FLT_MANT_DIG__='24' -D__VERSION__='"4.8.1"' -D__UINT64_C(c)='c ## UL' -D__GCC_ATOMIC_INT_LOCK_FREE='2' -D__FLOAT_WORD_ORDER__='__ORDER_LITTLE_ENDIAN__' -D__INT32_C(c)='c' -D__DEC64_EPSILON__='1E-15DD' -D__ORDER_PDP_ENDIAN__='3412' -D__DEC128_MIN_EXP__='(-6142)' -D__INT_FAST32_TYPE__='long int' -D__UINT_LEAST16_TYPE__='short unsigned int' -Dunix='1' -D__INT16_MAX__='32767' -D__SIZE_TYPE__='long unsigned int' -D__UINT64_MAX__='18446744073709551615UL' -D__INT8_TYPE__='signed char' -D__ELF__='1' -D__FLT_RADIX__='2' -D__INT_LEAST16_TYPE__='short int' -D__LDBL_EPSILON__='1.08420217248550443401e-19L' -D__UINTMAX_C(c)='c ## UL' -D__k8='1' -D__SIG_ATOMIC_MAX__='2147483647' -D__GCC_ATOMIC_WCHAR_T_LOCK_FREE='2' -D__SIZEOF_PTRDIFF_T__='8' -D__x86_64__='1' -D__DEC32_SUBNORMAL_MIN__='0.000001E-95DF' -D__INT_FAST16_MAX__='9223372036854775807L' -D__UINT_FAST32_MAX__='18446744073709551615UL' -D__UINT_LEAST64_TYPE__='long unsigned int' -D__FLT_HAS_QUIET_NAN__='1' -D__FLT_MAX_10_EXP__='38' -D__LONG_MAX__='9223372036854775807L' -D__DEC128_SUBNORMAL_MIN__='0.000000000000000000000000000000001E-6143DL' -D__FLT_HAS_INFINITY__='1' -D__UINT_FAST16_TYPE__='long unsigned int' -D__DEC64_MAX__='9.999999999999999E384DD' -D__CHAR16_TYPE__='short unsigned int' -D__PRAGMA_REDEFINE_EXTNAME='1' -D__INT_LEAST16_MAX__='32767' -D__DEC64_MANT_DIG__='16' -D__UINT_LEAST32_MAX__='4294967295U' -D__GCC_ATOMIC_LONG_LOCK_FREE='2' -D__INT_LEAST64_TYPE__='long int' -D__INT16_TYPE__='short int' -D__INT_LEAST8_TYPE__='signed char' -D__DEC32_MAX_EXP__='97' -D__INT_FAST8_MAX__='127' -D__INTPTR_MAX__='9223372036854775807L' -Dlinux='1' -D__SSE2__='1' -D__EXCEPTIONS='1' -D__LDBL_MANT_DIG__='64' -D__DBL_HAS_QUIET_NAN__='1' -D__SIG_ATOMIC_MIN__='(-__SIG_ATOMIC_MAX__ - 1)' -D__code_model_small__='1' -D__k8__='1' -D__INTPTR_TYPE__='long int' -D__UINT16_TYPE__='short unsigned int' -D__WCHAR_TYPE__='int' -D__SIZEOF_FLOAT__='4' -D__UINTPTR_MAX__='18446744073709551615UL' -D__DEC64_MIN_EXP__='(-382)' -D__INT_FAST64_MAX__='9223372036854775807L' -D__GCC_ATOMIC_TEST_AND_SET_TRUEVAL='1' -D__FLT_DIG__='6' -D__UINT_FAST64_TYPE__='long unsigned int' -D__INT_MAX__='2147483647' -D__amd64__='1' -D__INT64_TYPE__='long int' -D__FLT_MAX_EXP__='128' -D__ORDER_BIG_ENDIAN__='4321' -D__DBL_MANT_DIG__='53' -D__INT_LEAST64_MAX__='9223372036854775807L' -D__DEC64_MIN__='1E-383DD' -D__WINT_TYPE__='unsigned int' -D__UINT_LEAST32_TYPE__='unsigned int' -D__SIZEOF_SHORT__='2' -D__SSE__='1' -D__LDBL_MIN_EXP__='(-16381)' -D__INT_LEAST8_MAX__='127' -D__SIZEOF_INT128__='16' -D__LDBL_MAX_10_EXP__='4932' -D__ATOMIC_RELAXED='0' -D__DBL_EPSILON__='double(2.22044604925031308085e-16L)' -D_LP64='1' -D__UINT8_C(c)='c' -D__INT_LEAST32_TYPE__='int' -D__SIZEOF_WCHAR_T__='4' -D__UINT64_TYPE__='long unsigned int' -D__INT_FAST8_TYPE__='signed char' -D__DBL_DECIMAL_DIG__='17' -D__FXSR__='1' -D__DEC_EVAL_METHOD__='2' -D__UINT32_C(c)='c ## U' -D__INTMAX_MAX__='9223372036854775807L' -D__BYTE_ORDER__='__ORDER_LITTLE_ENDIAN__' -D__FLT_DENORM_MIN__='1.40129846432481707092e-45F' -D__INT8_MAX__='127' -D__UINT_FAST32_TYPE__='long unsigned int' -D__CHAR32_TYPE__='unsigned int' -D__FLT_MAX__='3.40282346638528859812e+38F' -D__INT32_TYPE__='int' -D__SIZEOF_DOUBLE__='8' -D__INTMAX_TYPE__='long int' -D__DEC128_MAX_EXP__='6145' -D__ATOMIC_CONSUME='1' -D__GNUC_MINOR__='8' -D__UINTMAX_MAX__='18446744073709551615UL' -D__DEC32_MANT_DIG__='7' -D__DBL_MAX_10_EXP__='308' -D__LDBL_DENORM_MIN__='3.64519953188247460253e-4951L' -D__INT16_C(c)='c' -D__STDC__='1' -D__PTRDIFF_TYPE__='long int' -D__ATOMIC_SEQ_CST='5' -D__UINT32_TYPE__='unsigned int' -D__UINTPTR_TYPE__='long unsigned int' -D__DEC64_SUBNORMAL_MIN__='0.000000000000001E-383DD' -D__DEC128_MANT_DIG__='34' -D__LDBL_MIN_10_EXP__='(-4931)' -D__SSE_MATH__='1' -D__SIZEOF_LONG_LONG__='8' -D__GCC_ATOMIC_LLONG_LOCK_FREE='2' -D__LDBL_DIG__='18' -D__FLT_DECIMAL_DIG__='9' -D__UINT_FAST16_MAX__='18446744073709551615UL' -D__GNUC_GNU_INLINE__='1' -D__FLT_MIN_10_EXP__='(-37)' -D__GCC_ATOMIC_SHORT_LOCK_FREE='2' -D__UINT_FAST8_TYPE__='unsigned char' -D_GNU_SOURCE='1' -D__ATOMIC_ACQ_REL='4' -D__ATOMIC_RELEASE='3' -iwrapper"/afs/cern.ch/cms/slc6_amd64_gcc481/external/gccxml/0.9.0-20140124-0/share/gccxml-0.9/GCC/4.8" -isystem"/afs/cern.ch/cms/slc6_amd64_gcc481/external/gcc/4.8.1/bin/../lib/gcc/x86_64-redhat-linux-gnu/4.8.1/../../../../include/c++/4.8.1" -isystem"/afs/cern.ch/cms/slc6_amd64_gcc481/external/gcc/4.8.1/bin/../lib/gcc/x86_64-redhat-linux-gnu/4.8.1/../../../../include/c++/4.8.1/x86_64-redhat-linux-gnu" -isystem"/afs/cern.ch/cms/slc6_amd64_gcc481/external/gcc/4.8.1/bin/../lib/gcc/x86_64-redhat-linux-gnu/4.8.1/../../../../include/c++/4.8.1/backward" -isystem"/afs/cern.ch/cms/slc6_amd64_gcc481/external/gcc/4.8.1/bin/../lib/gcc/x86_64-redhat-linux-gnu/4.8.1/include" -isystem"/afs/cern.ch/cms/slc6_amd64_gcc481/external/gcc/4.8.1/bin/../lib/gcc/x86_64-redhat-linux-gnu/4.8.1/include-fixed" -isystem"/usr/local/include" -isystem"/afs/cern.ch/cms/slc6_amd64_gcc481/external/gcc/4.8.1/bin/../lib/gcc/../../include" -isystem"/usr/include" -include "gccxml_builtins.h""
  GCCXML_USER_FLAGS=""
  GCCXML_ROOT="/afs/cern.ch/cms/slc6_amd64_gcc481/external/gccxml/0.9.0-20140124-0/share/gccxml-0.9"

Compiler info:
c++ (GCC) 4.8.1
Copyright (C) 2013 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

*/

#ifdef _WIN32
#pragma warning ( disable : 4786 )
#pragma warning ( disable : 4345 )
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3)) && !defined(__INTEL_COMPILER) 
# pragma GCC diagnostic ignored "-Warray-bounds"
#endif
#include "src/DataFormats/JetReco/src/classes_1.h"
#ifdef CONST
# undef CONST
#endif
#include "Reflex/Builder/ReflexBuilder.h"
#include <typeinfo>

namespace {
  ::Reflex::NamespaceBuilder nsb0( Reflex::Literal("std") );
  ::Reflex::NamespaceBuilder nsb1( Reflex::Literal("edm") );
  ::Reflex::NamespaceBuilder nsb2( Reflex::Literal("reco") );
  ::Reflex::NamespaceBuilder nsb3( Reflex::Literal("edm::reftobase") );
  ::Reflex::NamespaceBuilder nsb4( Reflex::Literal("edm::helpers") );
  ::Reflex::Type type_64 = ::Reflex::TypeBuilder(Reflex::Literal("int"));
  ::Reflex::Type type_680 = ::Reflex::TypeBuilder(Reflex::Literal("void"));
  ::Reflex::Type type_351 = ::Reflex::TypeBuilder(Reflex::Literal("long"));
  ::Reflex::Type type_void = ::Reflex::TypeBuilder(Reflex::Literal("void"));
  ::Reflex::Type type_878 = ::Reflex::TypeBuilder(Reflex::Literal("float"));
  ::Reflex::Type type_1574 = ::Reflex::TypeBuilder(Reflex::Literal("bool"));
  ::Reflex::Type type_231 = ::Reflex::TypeBuilder(Reflex::Literal("short"));
  ::Reflex::Type type_97 = ::Reflex::TypeBuilder(Reflex::Literal("double"));
  ::Reflex::Type type_7485 = ::Reflex::TypeBuilder(Reflex::Literal("reco::Jet"));
  ::Reflex::Type type_7463 = ::Reflex::TypeBuilder(Reflex::Literal("reco::PFJet"));
  ::Reflex::Type type_356 = ::Reflex::TypeBuilder(Reflex::Literal("unsigned int"));
  ::Reflex::Type type_7528 = ::Reflex::TypeBuilder(Reflex::Literal("reco::JPTJet"));
  ::Reflex::Type type_347 = ::Reflex::TypeBuilder(Reflex::Literal("unsigned long"));
  ::Reflex::Type type_4691 = ::Reflex::TypeBuilder(Reflex::Literal("edm::RefCore"));
  ::Reflex::Type type_7512 = ::Reflex::TypeBuilder(Reflex::Literal("reco::GenJet"));
  ::Reflex::Type type_7473 = ::Reflex::TypeBuilder(Reflex::Literal("reco::CaloJet"));
  ::Reflex::Type type_482 = ::Reflex::TypeBuilder(Reflex::Literal("std::type_info"));
  ::Reflex::Type type_4689 = ::Reflex::TypeBuilder(Reflex::Literal("edm::ProductID"));
  ::Reflex::Type type_7564 = ::Reflex::TypeBuilder(Reflex::Literal("reco::BasicJet"));
  ::Reflex::Type type_5843 = ::Reflex::TypeBuilder(Reflex::Literal("reco::Candidate"));
  ::Reflex::Type type_7466 = ::Reflex::TypeBuilder(Reflex::Literal("reco::GenParticle"));
  ::Reflex::Type type_579 = ::Reflex::TypeBuilder(Reflex::Literal("edm::Ptr<CaloTower>"));
  ::Reflex::Type type_4737 = ::Reflex::TypeBuilder(Reflex::Literal("edm::EDProductGetter"));
  ::Reflex::Type type_4462 = ::Reflex::TypeBuilder(Reflex::Literal("edm::RefCoreWithIndex"));
  ::Reflex::Type type_184 = ::Reflex::TypeBuilder(Reflex::Literal("edm::FwdPtr<CaloTower>"));
  ::Reflex::Type type_4720 = ::Reflex::TypeBuilder(Reflex::Literal("edm::Ptr<reco::PFJet>"));
  ::Reflex::Type type_24150 = ::Reflex::TypeBuilder(Reflex::Literal("reco::PFJet::Specific"));
  ::Reflex::Type type_4722 = ::Reflex::TypeBuilder(Reflex::Literal("edm::Ptr<reco::GenJet>"));
  ::Reflex::Type type_24786 = ::Reflex::TypeBuilder(Reflex::Literal("reco::JPTJet::Specific"));
  ::Reflex::Type type_2503 = ::Reflex::TypeBuilder(Reflex::Literal("std::basic_string<char>"));
  ::Reflex::Type type_24675 = ::Reflex::TypeBuilder(Reflex::Literal("reco::GenJet::Specific"));
  ::Reflex::Type type_4723 = ::Reflex::TypeBuilder(Reflex::Literal("edm::Ptr<reco::CaloJet>"));
  ::Reflex::Type type_2971 = ::Reflex::TypeBuilder(Reflex::Literal("std::vector<reco::PFJet>"));
  ::Reflex::Type type_24250 = ::Reflex::TypeBuilder(Reflex::Literal("reco::CaloJet::Specific"));
  ::Reflex::Type type_4484 = ::Reflex::TypeBuilder(Reflex::Literal("edm::FwdPtr<reco::PFJet>"));
  ::Reflex::Type type_4721 = ::Reflex::TypeBuilder(Reflex::Literal("edm::Ptr<reco::BasicJet>"));
  ::Reflex::Type type_2966 = ::Reflex::TypeBuilder(Reflex::Literal("std::vector<const void*>"));
  ::Reflex::Type type_4714 = ::Reflex::TypeBuilder(Reflex::Literal("edm::RefToBase<reco::Jet>"));
  ::Reflex::Type type_2968 = ::Reflex::TypeBuilder(Reflex::Literal("std::vector<reco::JPTJet>"));
  ::Reflex::Type type_2988 = ::Reflex::TypeBuilder(Reflex::Literal("std::vector<reco::GenJet>"));
  ::Reflex::Type type_4486 = ::Reflex::TypeBuilder(Reflex::Literal("edm::FwdPtr<reco::GenJet>"));
  ::Reflex::Type type_2962 = ::Reflex::TypeBuilder(Reflex::Literal("std::vector<unsigned int>"));
  ::Reflex::Type type_4725 = ::Reflex::TypeBuilder(Reflex::Literal("edm::Ptr<reco::Candidate>"));
  ::Reflex::Type type_24317 = ::Reflex::TypeBuilder(Reflex::Literal("reco::Jet::EtaPhiMoments"));
  ::Reflex::Type type_2991 = ::Reflex::TypeBuilder(Reflex::Literal("std::vector<reco::CaloJet>"));
  ::Reflex::Type type_4487 = ::Reflex::TypeBuilder(Reflex::Literal("edm::FwdPtr<reco::CaloJet>"));
  ::Reflex::Type type_2967 = ::Reflex::TypeBuilder(Reflex::Literal("std::vector<unsigned long>"));
  ::Reflex::Type type_4724 = ::Reflex::TypeBuilder(Reflex::Literal("edm::Ptr<reco::PFCandidate>"));
  ::Reflex::Type type_3226 = ::Reflex::TypeBuilder(Reflex::Literal("std::allocator<reco::PFJet>"));
  ::Reflex::Type type_2983 = ::Reflex::TypeBuilder(Reflex::Literal("std::vector<reco::BasicJet>"));
  ::Reflex::Type type_3008 = ::Reflex::TypeBuilder(Reflex::Literal("std::vector<CaloTowerDetId>"));
  ::Reflex::Type type_4485 = ::Reflex::TypeBuilder(Reflex::Literal("edm::FwdPtr<reco::BasicJet>"));
  ::Reflex::Type type_7476 = ::Reflex::TypeBuilder(Reflex::Literal("reco::CompositePtrCandidate"));
  ::Reflex::Type type_3223 = ::Reflex::TypeBuilder(Reflex::Literal("std::allocator<reco::JPTJet>"));
  ::Reflex::Type type_3255 = ::Reflex::TypeBuilder(Reflex::Literal("std::allocator<reco::GenJet>"));
  ::Reflex::Type type_3258 = ::Reflex::TypeBuilder(Reflex::Literal("std::allocator<reco::CaloJet>"));
  ::Reflex::Type type_4488 = ::Reflex::TypeBuilder(Reflex::Literal("edm::FwdPtr<reco::PFCandidate>"));
  ::Reflex::Type type_3247 = ::Reflex::TypeBuilder(Reflex::Literal("std::allocator<reco::BasicJet>"));
  ::Reflex::Type type_11851 = ::Reflex::TypeBuilder(Reflex::Literal("edm::reftobase::RefHolderBase"));
  ::Reflex::Type type_3901 = ::Reflex::TypeBuilder(Reflex::Literal("edm::RefVectorBase<unsigned int>"));
  ::Reflex::Type type_2965 = ::Reflex::TypeBuilder(Reflex::Literal("std::vector<const reco::JPTJet*>"));
  ::Reflex::Type type_3009 = ::Reflex::TypeBuilder(Reflex::Literal("std::vector<edm::Ptr<CaloTower> >"));
  ::Reflex::Type type_2992 = ::Reflex::TypeBuilder(Reflex::Literal("std::vector<const reco::CaloJet*>"));
  ::Reflex::Type type_4692 = ::Reflex::TypeBuilder(Reflex::Literal("edm::reftobase::RefVectorHolderBase"));
  ::Reflex::Type type_3012 = ::Reflex::TypeBuilder(Reflex::Literal("std::vector<const reco::Candidate*>"));
  ::Reflex::Type type_3002 = ::Reflex::TypeBuilder(Reflex::Literal("std::vector<const reco::GenParticle*>"));
  ::Reflex::Type type_2973 = ::Reflex::TypeBuilder(Reflex::Literal("std::vector<edm::FwdPtr<reco::PFJet> >"));
  ::Reflex::Type type_4759 = ::Reflex::TypeBuilder(Reflex::Literal("edm::Handle<std::vector<reco::PFJet> >"));
  ::Reflex::Type type_21535 = ::Reflex::TypeBuilder(Reflex::Literal("edm::reftobase::BaseHolder<reco::Jet>"));
  ::Reflex::Type type_2986 = ::Reflex::TypeBuilder(Reflex::Literal("std::vector<edm::FwdPtr<reco::GenJet> >"));
  ::Reflex::Type type_3013 = ::Reflex::TypeBuilder(Reflex::Literal("std::vector<edm::Ptr<reco::Candidate> >"));
  ::Reflex::Type type_4705 = ::Reflex::TypeBuilder(Reflex::Literal("edm::RefProd<std::vector<reco::PFJet> >"));
  ::Reflex::Type type_4758 = ::Reflex::TypeBuilder(Reflex::Literal("edm::Handle<std::vector<reco::JPTJet> >"));
  ::Reflex::Type type_4762 = ::Reflex::TypeBuilder(Reflex::Literal("edm::Handle<std::vector<reco::GenJet> >"));
  ::Reflex::Type type_4703 = ::Reflex::TypeBuilder(Reflex::Literal("edm::RefProd<std::vector<reco::Track> >"));
  ::Reflex::Type type_4542 = ::Reflex::TypeBuilder(Reflex::Literal("edm::Wrapper<std::vector<reco::PFJet> >"));
  ::Reflex::Type type_2993 = ::Reflex::TypeBuilder(Reflex::Literal("std::vector<edm::FwdPtr<reco::CaloJet> >"));
  ::Reflex::Type type_4764 = ::Reflex::TypeBuilder(Reflex::Literal("edm::Handle<std::vector<reco::CaloJet> >"));
  ::Reflex::Type type_2730 = ::Reflex::TypeBuilder(Reflex::Literal("std::auto_ptr<std::vector<reco::PFJet> >"));
  ::Reflex::Type type_4704 = ::Reflex::TypeBuilder(Reflex::Literal("edm::RefProd<std::vector<reco::JPTJet> >"));
  ::Reflex::Type type_4708 = ::Reflex::TypeBuilder(Reflex::Literal("edm::RefProd<std::vector<reco::GenJet> >"));
  ::Reflex::Type type_4537 = ::Reflex::TypeBuilder(Reflex::Literal("edm::Wrapper<std::vector<reco::JPTJet> >"));
  ::Reflex::Type type_4553 = ::Reflex::TypeBuilder(Reflex::Literal("edm::Wrapper<std::vector<reco::GenJet> >"));
  ::Reflex::Type type_2981 = ::Reflex::TypeBuilder(Reflex::Literal("std::vector<edm::FwdPtr<reco::BasicJet> >"));
  ::Reflex::Type type_2998 = ::Reflex::TypeBuilder(Reflex::Literal("std::vector<edm::Ptr<reco::PFCandidate> >"));
  ::Reflex::Type type_4709 = ::Reflex::TypeBuilder(Reflex::Literal("edm::RefProd<std::vector<reco::CaloJet> >"));
  ::Reflex::Type type_2725 = ::Reflex::TypeBuilder(Reflex::Literal("std::auto_ptr<std::vector<reco::JPTJet> >"));
  ::Reflex::Type type_2741 = ::Reflex::TypeBuilder(Reflex::Literal("std::auto_ptr<std::vector<reco::GenJet> >"));
  ::Reflex::Type type_4761 = ::Reflex::TypeBuilder(Reflex::Literal("edm::Handle<std::vector<reco::BasicJet> >"));
  ::Reflex::Type type_3231 = ::Reflex::TypeBuilder(Reflex::Literal("std::allocator<edm::FwdPtr<reco::PFJet> >"));
  ::Reflex::Type type_4558 = ::Reflex::TypeBuilder(Reflex::Literal("edm::Wrapper<std::vector<reco::CaloJet> >"));
  ::Reflex::Type type_4616 = ::Reflex::TypeBuilder(Reflex::Literal("edm::TestHandle<std::vector<reco::PFJet> >"));
  ::Reflex::Type type_2746 = ::Reflex::TypeBuilder(Reflex::Literal("std::auto_ptr<std::vector<reco::CaloJet> >"));
  ::Reflex::Type type_4707 = ::Reflex::TypeBuilder(Reflex::Literal("edm::RefProd<std::vector<reco::BasicJet> >"));
  ::Reflex::Type type_3253 = ::Reflex::TypeBuilder(Reflex::Literal("std::allocator<edm::FwdPtr<reco::GenJet> >"));
  ::Reflex::Type type_4549 = ::Reflex::TypeBuilder(Reflex::Literal("edm::Wrapper<std::vector<reco::BasicJet> >"));
  ::Reflex::Type type_2737 = ::Reflex::TypeBuilder(Reflex::Literal("std::auto_ptr<std::vector<reco::BasicJet> >"));
  ::Reflex::Type type_4615 = ::Reflex::TypeBuilder(Reflex::Literal("edm::TestHandle<std::vector<reco::JPTJet> >"));
  ::Reflex::Type type_4619 = ::Reflex::TypeBuilder(Reflex::Literal("edm::TestHandle<std::vector<reco::GenJet> >"));
  ::Reflex::Type type_3264 = ::Reflex::TypeBuilder(Reflex::Literal("std::allocator<edm::FwdPtr<reco::CaloJet> >"));
  ::Reflex::Type type_4670 = ::Reflex::TypeBuilder(Reflex::Literal("edm::OrphanHandle<std::vector<reco::PFJet> >"));
  ::Reflex::Type type_4621 = ::Reflex::TypeBuilder(Reflex::Literal("edm::TestHandle<std::vector<reco::CaloJet> >"));
  ::Reflex::Type type_21536 = ::Reflex::TypeBuilder(Reflex::Literal("edm::reftobase::BaseHolder<reco::Candidate>"));
  ::Reflex::Type type_2722 = ::Reflex::TypeBuilder(Reflex::Literal("std::auto_ptr<edm::reftobase::RefHolderBase>"));
  ::Reflex::Type type_3245 = ::Reflex::TypeBuilder(Reflex::Literal("std::allocator<edm::FwdPtr<reco::BasicJet> >"));
  ::Reflex::Type type_4669 = ::Reflex::TypeBuilder(Reflex::Literal("edm::OrphanHandle<std::vector<reco::JPTJet> >"));
  ::Reflex::Type type_4618 = ::Reflex::TypeBuilder(Reflex::Literal("edm::TestHandle<std::vector<reco::BasicJet> >"));
  ::Reflex::Type type_4673 = ::Reflex::TypeBuilder(Reflex::Literal("edm::OrphanHandle<std::vector<reco::GenJet> >"));
  ::Reflex::Type type_2963 = ::Reflex::TypeBuilder(Reflex::Literal("std::vector<std::vector<const reco::Track*> >"));
  ::Reflex::Type type_4675 = ::Reflex::TypeBuilder(Reflex::Literal("edm::OrphanHandle<std::vector<reco::CaloJet> >"));
  ::Reflex::Type type_7499 = ::Reflex::TypeBuilder(Reflex::Literal("reco::JetTrackMatch<std::vector<reco::PFJet> >"));
  ::Reflex::Type type_4672 = ::Reflex::TypeBuilder(Reflex::Literal("edm::OrphanHandle<std::vector<reco::BasicJet> >"));
  ::Reflex::Type type_7498 = ::Reflex::TypeBuilder(Reflex::Literal("reco::JetTrackMatch<std::vector<reco::JPTJet> >"));
  ::Reflex::Type type_7502 = ::Reflex::TypeBuilder(Reflex::Literal("reco::JetTrackMatch<std::vector<reco::GenJet> >"));
  ::Reflex::Type type_4631 = ::Reflex::TypeBuilder(Reflex::Literal("edm::WrapperInterface<std::vector<reco::PFJet> >"));
  ::Reflex::Type type_7503 = ::Reflex::TypeBuilder(Reflex::Literal("reco::JetTrackMatch<std::vector<reco::CaloJet> >"));
  ::Reflex::Type type_4626 = ::Reflex::TypeBuilder(Reflex::Literal("edm::WrapperInterface<std::vector<reco::JPTJet> >"));
  ::Reflex::Type type_4642 = ::Reflex::TypeBuilder(Reflex::Literal("edm::WrapperInterface<std::vector<reco::GenJet> >"));
  ::Reflex::Type type_7501 = ::Reflex::TypeBuilder(Reflex::Literal("reco::JetTrackMatch<std::vector<reco::BasicJet> >"));
  ::Reflex::Type type_3121 = ::Reflex::TypeBuilder(Reflex::Literal("std::map<unsigned int,std::vector<unsigned int> >"));
  ::Reflex::Type type_4647 = ::Reflex::TypeBuilder(Reflex::Literal("edm::WrapperInterface<std::vector<reco::CaloJet> >"));
  ::Reflex::Type type_2720 = ::Reflex::TypeBuilder(Reflex::Literal("std::auto_ptr<edm::reftobase::RefVectorHolderBase>"));
  ::Reflex::Type type_4638 = ::Reflex::TypeBuilder(Reflex::Literal("edm::WrapperInterface<std::vector<reco::BasicJet> >"));
  ::Reflex::Type type_21795 = ::Reflex::TypeBuilder(Reflex::Literal("edm::reftobase::RefVectorHolderBase::const_iterator"));
  ::Reflex::Type type_4539 = ::Reflex::TypeBuilder(Reflex::Literal("edm::Wrapper<std::vector<edm::FwdPtr<reco::PFJet> > >"));
  ::Reflex::Type type_4280 = ::Reflex::TypeBuilder(Reflex::Literal("boost::shared_ptr<edm::reftobase::RefVectorHolderBase>"));
  ::Reflex::Type type_2727 = ::Reflex::TypeBuilder(Reflex::Literal("std::auto_ptr<std::vector<edm::FwdPtr<reco::PFJet> > >"));
  ::Reflex::Type type_4550 = ::Reflex::TypeBuilder(Reflex::Literal("edm::Wrapper<std::vector<edm::FwdPtr<reco::GenJet> > >"));
  ::Reflex::Type type_7977 = ::Reflex::TypeBuilder(Reflex::Literal("__gnu_cxx::__alloc_traits<std::allocator<reco::PFJet> >"));
  ::Reflex::Type type_2738 = ::Reflex::TypeBuilder(Reflex::Literal("std::auto_ptr<std::vector<edm::FwdPtr<reco::GenJet> > >"));
  ::Reflex::Type type_4555 = ::Reflex::TypeBuilder(Reflex::Literal("edm::Wrapper<std::vector<edm::FwdPtr<reco::CaloJet> > >"));
  ::Reflex::Type type_7980 = ::Reflex::TypeBuilder(Reflex::Literal("__gnu_cxx::__alloc_traits<std::allocator<reco::JPTJet> >"));
  ::Reflex::Type type_7979 = ::Reflex::TypeBuilder(Reflex::Literal("__gnu_cxx::__alloc_traits<std::allocator<reco::GenJet> >"));
  ::Reflex::Type type_2743 = ::Reflex::TypeBuilder(Reflex::Literal("std::auto_ptr<std::vector<edm::FwdPtr<reco::CaloJet> > >"));
  ::Reflex::Type type_21794 = ::Reflex::TypeBuilder(Reflex::Literal("edm::reftobase::RefVectorHolderBase::const_iterator_imp"));
  ::Reflex::Type type_4546 = ::Reflex::TypeBuilder(Reflex::Literal("edm::Wrapper<std::vector<edm::FwdPtr<reco::BasicJet> > >"));
  ::Reflex::Type type_6456 = ::Reflex::TypeBuilder(Reflex::Literal("ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >"));
  ::Reflex::Type type_7986 = ::Reflex::TypeBuilder(Reflex::Literal("__gnu_cxx::__alloc_traits<std::allocator<reco::CaloJet> >"));
  ::Reflex::Type type_2734 = ::Reflex::TypeBuilder(Reflex::Literal("std::auto_ptr<std::vector<edm::FwdPtr<reco::BasicJet> > >"));
  ::Reflex::Type type_7989 = ::Reflex::TypeBuilder(Reflex::Literal("__gnu_cxx::__alloc_traits<std::allocator<reco::BasicJet> >"));
  ::Reflex::Type type_2464 = ::Reflex::TypeBuilder(Reflex::Literal("std::_Vector_base<reco::PFJet,std::allocator<reco::PFJet> >"));
  ::Reflex::Type type_2721 = ::Reflex::TypeBuilder(Reflex::Literal("std::auto_ptr<edm::reftobase::BaseVectorHolder<reco::Jet> >"));
  ::Reflex::Type type_2467 = ::Reflex::TypeBuilder(Reflex::Literal("std::_Vector_base<reco::JPTJet,std::allocator<reco::JPTJet> >"));
  ::Reflex::Type type_2466 = ::Reflex::TypeBuilder(Reflex::Literal("std::_Vector_base<reco::GenJet,std::allocator<reco::GenJet> >"));
  ::Reflex::Type type_4628 = ::Reflex::TypeBuilder(Reflex::Literal("edm::WrapperInterface<std::vector<edm::FwdPtr<reco::PFJet> > >"));
  ::Reflex::Type type_3122 = ::Reflex::TypeBuilder(Reflex::Literal("std::map<const reco::JPTJet*,std::vector<const reco::Track*> >"));
  ::Reflex::Type type_21742 = ::Reflex::TypeBuilder(Reflex::Literal("edm::helpers::Key<edm::RefProd<std::vector<reco::CaloJet> > >"));
  ::Reflex::Type type_2473 = ::Reflex::TypeBuilder(Reflex::Literal("std::_Vector_base<reco::CaloJet,std::allocator<reco::CaloJet> >"));
  ::Reflex::Type type_4639 = ::Reflex::TypeBuilder(Reflex::Literal("edm::WrapperInterface<std::vector<edm::FwdPtr<reco::GenJet> > >"));
  ::Reflex::Type type_3132 = ::Reflex::TypeBuilder(Reflex::Literal("std::map<const reco::CaloJet*,std::vector<const reco::Track*> >"));
  ::Reflex::Type type_4644 = ::Reflex::TypeBuilder(Reflex::Literal("edm::WrapperInterface<std::vector<edm::FwdPtr<reco::CaloJet> > >"));
  ::Reflex::Type type_2476 = ::Reflex::TypeBuilder(Reflex::Literal("std::_Vector_base<reco::BasicJet,std::allocator<reco::BasicJet> >"));
  ::Reflex::Type type_2723 = ::Reflex::TypeBuilder(Reflex::Literal("std::auto_ptr<edm::reftobase::BaseVectorHolder<reco::Candidate> >"));
  ::Reflex::Type type_4635 = ::Reflex::TypeBuilder(Reflex::Literal("edm::WrapperInterface<std::vector<edm::FwdPtr<reco::BasicJet> > >"));
  ::Reflex::Type type_7869 = ::Reflex::TypeBuilder(Reflex::Literal("__gnu_cxx::__normal_iterator<reco::PFJet*,std::vector<reco::PFJet> >"));
  ::Reflex::Type type_7962 = ::Reflex::TypeBuilder(Reflex::Literal("__gnu_cxx::__alloc_traits<std::allocator<edm::FwdPtr<reco::PFJet> > >"));
  ::Reflex::Type type_7873 = ::Reflex::TypeBuilder(Reflex::Literal("__gnu_cxx::__normal_iterator<reco::JPTJet*,std::vector<reco::JPTJet> >"));
  ::Reflex::Type type_7871 = ::Reflex::TypeBuilder(Reflex::Literal("__gnu_cxx::__normal_iterator<reco::GenJet*,std::vector<reco::GenJet> >"));
  ::Reflex::Type type_7967 = ::Reflex::TypeBuilder(Reflex::Literal("__gnu_cxx::__alloc_traits<std::allocator<edm::FwdPtr<reco::GenJet> > >"));
  ::Reflex::Type type_18703 = ::Reflex::TypeBuilder(Reflex::Literal("edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet>"));
  ::Reflex::Type type_7971 = ::Reflex::TypeBuilder(Reflex::Literal("__gnu_cxx::__alloc_traits<std::allocator<edm::FwdPtr<reco::CaloJet> > >"));
  ::Reflex::Type type_7884 = ::Reflex::TypeBuilder(Reflex::Literal("__gnu_cxx::__normal_iterator<reco::CaloJet*,std::vector<reco::CaloJet> >"));
  ::Reflex::Type type_7965 = ::Reflex::TypeBuilder(Reflex::Literal("__gnu_cxx::__alloc_traits<std::allocator<edm::FwdPtr<reco::BasicJet> > >"));
  ::Reflex::Type type_18691 = ::Reflex::TypeBuilder(Reflex::Literal("edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet>"));
  ::Reflex::Type type_18739 = ::Reflex::TypeBuilder(Reflex::Literal("edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet>"));
  ::Reflex::Type type_7870 = ::Reflex::TypeBuilder(Reflex::Literal("__gnu_cxx::__normal_iterator<const reco::PFJet*,std::vector<reco::PFJet> >"));
  ::Reflex::Type type_7888 = ::Reflex::TypeBuilder(Reflex::Literal("__gnu_cxx::__normal_iterator<reco::BasicJet*,std::vector<reco::BasicJet> >"));
  ::Reflex::Type type_18751 = ::Reflex::TypeBuilder(Reflex::Literal("edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet>"));
  ::Reflex::Type type_7874 = ::Reflex::TypeBuilder(Reflex::Literal("__gnu_cxx::__normal_iterator<const reco::JPTJet*,std::vector<reco::JPTJet> >"));
  ::Reflex::Type type_7872 = ::Reflex::TypeBuilder(Reflex::Literal("__gnu_cxx::__normal_iterator<const reco::GenJet*,std::vector<reco::GenJet> >"));
  ::Reflex::Type type_18727 = ::Reflex::TypeBuilder(Reflex::Literal("edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet>"));
  ::Reflex::Type type_20165 = ::Reflex::TypeBuilder(Reflex::Literal("edm::refhelper::FindRefVectorUsingAdvance<edm::RefToBaseVector<reco::PFJet> >"));
  ::Reflex::Type type_7885 = ::Reflex::TypeBuilder(Reflex::Literal("__gnu_cxx::__normal_iterator<const reco::CaloJet*,std::vector<reco::CaloJet> >"));
  ::Reflex::Type type_20163 = ::Reflex::TypeBuilder(Reflex::Literal("edm::refhelper::FindRefVectorUsingAdvance<edm::RefToBaseVector<reco::JPTJet> >"));
  ::Reflex::Type type_20171 = ::Reflex::TypeBuilder(Reflex::Literal("edm::refhelper::FindRefVectorUsingAdvance<edm::RefToBaseVector<reco::GenJet> >"));
  ::Reflex::Type type_7889 = ::Reflex::TypeBuilder(Reflex::Literal("__gnu_cxx::__normal_iterator<const reco::BasicJet*,std::vector<reco::BasicJet> >"));
  ::Reflex::Type type_20173 = ::Reflex::TypeBuilder(Reflex::Literal("edm::refhelper::FindRefVectorUsingAdvance<edm::RefToBaseVector<reco::CaloJet> >"));
  ::Reflex::Type type_20169 = ::Reflex::TypeBuilder(Reflex::Literal("edm::refhelper::FindRefVectorUsingAdvance<edm::RefToBaseVector<reco::BasicJet> >"));
  ::Reflex::Type type_2449 = ::Reflex::TypeBuilder(Reflex::Literal("std::_Vector_base<edm::FwdPtr<reco::PFJet>,std::allocator<edm::FwdPtr<reco::PFJet> > >"));
  ::Reflex::Type type_2454 = ::Reflex::TypeBuilder(Reflex::Literal("std::_Vector_base<edm::FwdPtr<reco::GenJet>,std::allocator<edm::FwdPtr<reco::GenJet> > >"));
  ::Reflex::Type type_2458 = ::Reflex::TypeBuilder(Reflex::Literal("std::_Vector_base<edm::FwdPtr<reco::CaloJet>,std::allocator<edm::FwdPtr<reco::CaloJet> > >"));
  ::Reflex::Type type_3456 = ::Reflex::TypeBuilder(Reflex::Literal("std::reverse_iterator<__gnu_cxx::__normal_iterator<reco::PFJet*,std::vector<reco::PFJet> > >"));
  ::Reflex::Type type_2452 = ::Reflex::TypeBuilder(Reflex::Literal("std::_Vector_base<edm::FwdPtr<reco::BasicJet>,std::allocator<edm::FwdPtr<reco::BasicJet> > >"));
  ::Reflex::Type type_3462 = ::Reflex::TypeBuilder(Reflex::Literal("std::reverse_iterator<__gnu_cxx::__normal_iterator<reco::JPTJet*,std::vector<reco::JPTJet> > >"));
  ::Reflex::Type type_3460 = ::Reflex::TypeBuilder(Reflex::Literal("std::reverse_iterator<__gnu_cxx::__normal_iterator<reco::GenJet*,std::vector<reco::GenJet> > >"));
  ::Reflex::Type type_7839 = ::Reflex::TypeBuilder(Reflex::Literal("__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::PFJet>*,std::vector<edm::FwdPtr<reco::PFJet> > >"));
  ::Reflex::Type type_3474 = ::Reflex::TypeBuilder(Reflex::Literal("std::reverse_iterator<__gnu_cxx::__normal_iterator<reco::CaloJet*,std::vector<reco::CaloJet> > >"));
  ::Reflex::Type type_7849 = ::Reflex::TypeBuilder(Reflex::Literal("__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::GenJet>*,std::vector<edm::FwdPtr<reco::GenJet> > >"));
  ::Reflex::Type type_3455 = ::Reflex::TypeBuilder(Reflex::Literal("std::reverse_iterator<__gnu_cxx::__normal_iterator<const reco::PFJet*,std::vector<reco::PFJet> > >"));
  ::Reflex::Type type_3480 = ::Reflex::TypeBuilder(Reflex::Literal("std::reverse_iterator<__gnu_cxx::__normal_iterator<reco::BasicJet*,std::vector<reco::BasicJet> > >"));
  ::Reflex::Type type_7857 = ::Reflex::TypeBuilder(Reflex::Literal("__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::CaloJet>*,std::vector<edm::FwdPtr<reco::CaloJet> > >"));
  ::Reflex::Type type_6466 = ::Reflex::TypeBuilder(Reflex::Literal("ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>"));
  ::Reflex::Type type_3461 = ::Reflex::TypeBuilder(Reflex::Literal("std::reverse_iterator<__gnu_cxx::__normal_iterator<const reco::JPTJet*,std::vector<reco::JPTJet> > >"));
  ::Reflex::Type type_3459 = ::Reflex::TypeBuilder(Reflex::Literal("std::reverse_iterator<__gnu_cxx::__normal_iterator<const reco::GenJet*,std::vector<reco::GenJet> > >"));
  ::Reflex::Type type_4564 = ::Reflex::TypeBuilder(Reflex::Literal("edm::AssociationMap<edm::OneToMany<std::vector<reco::PFJet>,std::vector<reco::Track>,unsigned int> >"));
  ::Reflex::Type type_4563 = ::Reflex::TypeBuilder(Reflex::Literal("edm::AssociationMap<edm::OneToMany<std::vector<reco::JPTJet>,std::vector<reco::Track>,unsigned int> >"));
  ::Reflex::Type type_4567 = ::Reflex::TypeBuilder(Reflex::Literal("edm::AssociationMap<edm::OneToMany<std::vector<reco::GenJet>,std::vector<reco::Track>,unsigned int> >"));
  ::Reflex::Type type_7845 = ::Reflex::TypeBuilder(Reflex::Literal("__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::BasicJet>*,std::vector<edm::FwdPtr<reco::BasicJet> > >"));
  ::Reflex::Type type_7840 = ::Reflex::TypeBuilder(Reflex::Literal("__gnu_cxx::__normal_iterator<const edm::FwdPtr<reco::PFJet>*,std::vector<edm::FwdPtr<reco::PFJet> > >"));
  ::Reflex::Type type_3473 = ::Reflex::TypeBuilder(Reflex::Literal("std::reverse_iterator<__gnu_cxx::__normal_iterator<const reco::CaloJet*,std::vector<reco::CaloJet> > >"));
  ::Reflex::Type type_4568 = ::Reflex::TypeBuilder(Reflex::Literal("edm::AssociationMap<edm::OneToMany<std::vector<reco::CaloJet>,std::vector<reco::Track>,unsigned int> >"));
  ::Reflex::Type type_4566 = ::Reflex::TypeBuilder(Reflex::Literal("edm::AssociationMap<edm::OneToMany<std::vector<reco::BasicJet>,std::vector<reco::Track>,unsigned int> >"));
  ::Reflex::Type type_7850 = ::Reflex::TypeBuilder(Reflex::Literal("__gnu_cxx::__normal_iterator<const edm::FwdPtr<reco::GenJet>*,std::vector<edm::FwdPtr<reco::GenJet> > >"));
  ::Reflex::Type type_3479 = ::Reflex::TypeBuilder(Reflex::Literal("std::reverse_iterator<__gnu_cxx::__normal_iterator<const reco::BasicJet*,std::vector<reco::BasicJet> > >"));
  ::Reflex::Type type_19975 = ::Reflex::TypeBuilder(Reflex::Literal("edm::helpers::KeyVal<edm::RefProd<std::vector<reco::JPTJet> >,edm::RefProd<std::vector<reco::Track> > >"));
  ::Reflex::Type type_7858 = ::Reflex::TypeBuilder(Reflex::Literal("__gnu_cxx::__normal_iterator<const edm::FwdPtr<reco::CaloJet>*,std::vector<edm::FwdPtr<reco::CaloJet> > >"));
  ::Reflex::Type type_20100 = ::Reflex::TypeBuilder(Reflex::Literal("edm::helpers::KeyVal<edm::RefProd<std::vector<reco::CaloJet> >,edm::RefProd<std::vector<reco::Track> > >"));
  ::Reflex::Type type_7846 = ::Reflex::TypeBuilder(Reflex::Literal("__gnu_cxx::__normal_iterator<const edm::FwdPtr<reco::BasicJet>*,std::vector<edm::FwdPtr<reco::BasicJet> > >"));
  ::Reflex::Type type_4740 = ::Reflex::TypeBuilder(Reflex::Literal("edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >"));
  ::Reflex::Type type_4739 = ::Reflex::TypeBuilder(Reflex::Literal("edm::Ref<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> >"));
  ::Reflex::Type type_21160 = ::Reflex::TypeBuilder(Reflex::Literal("edm::AssociationMap<edm::OneToMany<std::vector<reco::JPTJet>,std::vector<reco::Track>,unsigned int> >::const_iterator"));
  ::Reflex::Type type_3416 = ::Reflex::TypeBuilder(Reflex::Literal("std::reverse_iterator<__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::PFJet>*,std::vector<edm::FwdPtr<reco::PFJet> > > >"));
  ::Reflex::Type type_21355 = ::Reflex::TypeBuilder(Reflex::Literal("edm::AssociationMap<edm::OneToMany<std::vector<reco::CaloJet>,std::vector<reco::Track>,unsigned int> >::const_iterator"));
  ::Reflex::Type type_4571 = ::Reflex::TypeBuilder(Reflex::Literal("edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >"));
  ::Reflex::Type type_3432 = ::Reflex::TypeBuilder(Reflex::Literal("std::reverse_iterator<__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::GenJet>*,std::vector<edm::FwdPtr<reco::GenJet> > > >"));
  ::Reflex::Type type_4738 = ::Reflex::TypeBuilder(Reflex::Literal("edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >"));
  ::Reflex::Type type_4743 = ::Reflex::TypeBuilder(Reflex::Literal("edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >"));
  ::Reflex::Type type_3444 = ::Reflex::TypeBuilder(Reflex::Literal("std::reverse_iterator<__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::CaloJet>*,std::vector<edm::FwdPtr<reco::CaloJet> > > >"));
  ::Reflex::Type type_4490 = ::Reflex::TypeBuilder(Reflex::Literal("edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> >"));
  ::Reflex::Type type_4496 = ::Reflex::TypeBuilder(Reflex::Literal("edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >"));
  ::Reflex::Type type_4574 = ::Reflex::TypeBuilder(Reflex::Literal("edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >"));
  ::Reflex::Type type_3426 = ::Reflex::TypeBuilder(Reflex::Literal("std::reverse_iterator<__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::BasicJet>*,std::vector<edm::FwdPtr<reco::BasicJet> > > >"));
  ::Reflex::Type type_3415 = ::Reflex::TypeBuilder(Reflex::Literal("std::reverse_iterator<__gnu_cxx::__normal_iterator<const edm::FwdPtr<reco::PFJet>*,std::vector<edm::FwdPtr<reco::PFJet> > > >"));
  ::Reflex::Type type_4744 = ::Reflex::TypeBuilder(Reflex::Literal("edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >"));
  ::Reflex::Type type_3431 = ::Reflex::TypeBuilder(Reflex::Literal("std::reverse_iterator<__gnu_cxx::__normal_iterator<const edm::FwdPtr<reco::GenJet>*,std::vector<edm::FwdPtr<reco::GenJet> > > >"));
  ::Reflex::Type type_4491 = ::Reflex::TypeBuilder(Reflex::Literal("edm::RefVector<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >"));
  ::Reflex::Type type_4511 = ::Reflex::TypeBuilder(Reflex::Literal("edm::RefVector<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >"));
  ::Reflex::Type type_4575 = ::Reflex::TypeBuilder(Reflex::Literal("edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >"));
  ::Reflex::Type type_3443 = ::Reflex::TypeBuilder(Reflex::Literal("std::reverse_iterator<__gnu_cxx::__normal_iterator<const edm::FwdPtr<reco::CaloJet>*,std::vector<edm::FwdPtr<reco::CaloJet> > > >"));
  ::Reflex::Type type_4742 = ::Reflex::TypeBuilder(Reflex::Literal("edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >"));
  ::Reflex::Type type_3425 = ::Reflex::TypeBuilder(Reflex::Literal("std::reverse_iterator<__gnu_cxx::__normal_iterator<const edm::FwdPtr<reco::BasicJet>*,std::vector<edm::FwdPtr<reco::BasicJet> > > >"));
  ::Reflex::Type type_2970 = ::Reflex::TypeBuilder(Reflex::Literal("std::vector<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >"));
  ::Reflex::Type type_4516 = ::Reflex::TypeBuilder(Reflex::Literal("edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >"));
  ::Reflex::Type type_4454 = ::Reflex::TypeBuilder(Reflex::Literal("edm::RefVectorIterator<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >"));
  ::Reflex::Type type_2959 = ::Reflex::TypeBuilder(Reflex::Literal("std::vector<edm::Ref<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >"));
  ::Reflex::Type type_4573 = ::Reflex::TypeBuilder(Reflex::Literal("edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >"));
  ::Reflex::Type type_2974 = ::Reflex::TypeBuilder(Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >"));
  ::Reflex::Type type_3225 = ::Reflex::TypeBuilder(Reflex::Literal("std::allocator<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >"));
  ::Reflex::Type type_4453 = ::Reflex::TypeBuilder(Reflex::Literal("edm::RefVectorIterator<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >"));
  ::Reflex::Type type_4506 = ::Reflex::TypeBuilder(Reflex::Literal("edm::RefVector<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >"));
  ::Reflex::Type type_4457 = ::Reflex::TypeBuilder(Reflex::Literal("edm::RefVectorIterator<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >"));
  ::Reflex::Type type_2961 = ::Reflex::TypeBuilder(Reflex::Literal("std::vector<edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >"));
  ::Reflex::Type type_2984 = ::Reflex::TypeBuilder(Reflex::Literal("std::vector<edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >"));
  ::Reflex::Type type_3232 = ::Reflex::TypeBuilder(Reflex::Literal("std::allocator<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >"));
  ::Reflex::Type type_2969 = ::Reflex::TypeBuilder(Reflex::Literal("std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >"));
  ::Reflex::Type type_2987 = ::Reflex::TypeBuilder(Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >"));
  ::Reflex::Type type_4541 = ::Reflex::TypeBuilder(Reflex::Literal("edm::Wrapper<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >"));
  ::Reflex::Type type_2990 = ::Reflex::TypeBuilder(Reflex::Literal("std::vector<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >"));
  ::Reflex::Type type_4458 = ::Reflex::TypeBuilder(Reflex::Literal("edm::RefVectorIterator<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >"));
  ::Reflex::Type type_2729 = ::Reflex::TypeBuilder(Reflex::Literal("std::auto_ptr<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >"));
  ::Reflex::Type type_3224 = ::Reflex::TypeBuilder(Reflex::Literal("std::allocator<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >"));
  ::Reflex::Type type_3254 = ::Reflex::TypeBuilder(Reflex::Literal("std::allocator<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >"));
  ::Reflex::Type type_2994 = ::Reflex::TypeBuilder(Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >"));
  ::Reflex::Type type_3257 = ::Reflex::TypeBuilder(Reflex::Literal("std::allocator<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >"));
  ::Reflex::Type type_4536 = ::Reflex::TypeBuilder(Reflex::Literal("edm::Wrapper<edm::RefVector<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >"));
  ::Reflex::Type type_4552 = ::Reflex::TypeBuilder(Reflex::Literal("edm::Wrapper<edm::RefVector<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >"));
  ::Reflex::Type type_4456 = ::Reflex::TypeBuilder(Reflex::Literal("edm::RefVectorIterator<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >"));
  ::Reflex::Type type_2979 = ::Reflex::TypeBuilder(Reflex::Literal("std::vector<edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >"));
  ::Reflex::Type type_2724 = ::Reflex::TypeBuilder(Reflex::Literal("std::auto_ptr<edm::RefVector<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >"));
  ::Reflex::Type type_2740 = ::Reflex::TypeBuilder(Reflex::Literal("std::auto_ptr<edm::RefVector<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >"));
  ::Reflex::Type type_3265 = ::Reflex::TypeBuilder(Reflex::Literal("std::allocator<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >"));
  ::Reflex::Type type_2989 = ::Reflex::TypeBuilder(Reflex::Literal("std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >"));
  ::Reflex::Type type_2982 = ::Reflex::TypeBuilder(Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >"));
  ::Reflex::Type type_4557 = ::Reflex::TypeBuilder(Reflex::Literal("edm::Wrapper<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >"));
  ::Reflex::Type type_4630 = ::Reflex::TypeBuilder(Reflex::Literal("edm::WrapperInterface<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >"));
  ::Reflex::Type type_2745 = ::Reflex::TypeBuilder(Reflex::Literal("std::auto_ptr<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >"));
  ::Reflex::Type type_3256 = ::Reflex::TypeBuilder(Reflex::Literal("std::allocator<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >"));
  ::Reflex::Type type_3246 = ::Reflex::TypeBuilder(Reflex::Literal("std::allocator<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >"));
  ::Reflex::Type type_4540 = ::Reflex::TypeBuilder(Reflex::Literal("edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >"));
  ::Reflex::Type type_2728 = ::Reflex::TypeBuilder(Reflex::Literal("std::auto_ptr<std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >"));
  ::Reflex::Type type_4548 = ::Reflex::TypeBuilder(Reflex::Literal("edm::Wrapper<edm::RefVector<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >"));
  ::Reflex::Type type_4625 = ::Reflex::TypeBuilder(Reflex::Literal("edm::WrapperInterface<edm::RefVector<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >"));
  ::Reflex::Type type_2736 = ::Reflex::TypeBuilder(Reflex::Literal("std::auto_ptr<edm::RefVector<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >"));
  ::Reflex::Type type_4641 = ::Reflex::TypeBuilder(Reflex::Literal("edm::WrapperInterface<edm::RefVector<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >"));
  ::Reflex::Type type_4538 = ::Reflex::TypeBuilder(Reflex::Literal("edm::Wrapper<std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >"));
  ::Reflex::Type type_2726 = ::Reflex::TypeBuilder(Reflex::Literal("std::auto_ptr<std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >"));
  ::Reflex::Type type_4551 = ::Reflex::TypeBuilder(Reflex::Literal("edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > > >"));
  ::Reflex::Type type_2739 = ::Reflex::TypeBuilder(Reflex::Literal("std::auto_ptr<std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > > >"));
  ::Reflex::Type type_4646 = ::Reflex::TypeBuilder(Reflex::Literal("edm::WrapperInterface<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >"));
  ::Reflex::Type type_4556 = ::Reflex::TypeBuilder(Reflex::Literal("edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >"));
  ::Reflex::Type type_4629 = ::Reflex::TypeBuilder(Reflex::Literal("edm::WrapperInterface<std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >"));
  ::Reflex::Type type_2744 = ::Reflex::TypeBuilder(Reflex::Literal("std::auto_ptr<std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >"));
  ::Reflex::Type type_21538 = ::Reflex::TypeBuilder(Reflex::Literal("edm::reftobase::RefVectorHolder<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >"));
  ::Reflex::Type type_21539 = ::Reflex::TypeBuilder(Reflex::Literal("edm::reftobase::RefHolder<edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >"));
  ::Reflex::Type type_21547 = ::Reflex::TypeBuilder(Reflex::Literal("edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >"));
  ::Reflex::Type type_4637 = ::Reflex::TypeBuilder(Reflex::Literal("edm::WrapperInterface<edm::RefVector<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >"));
  ::Reflex::Type type_4554 = ::Reflex::TypeBuilder(Reflex::Literal("edm::Wrapper<std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >"));
  ::Reflex::Type type_4627 = ::Reflex::TypeBuilder(Reflex::Literal("edm::WrapperInterface<std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >"));
  ::Reflex::Type type_2742 = ::Reflex::TypeBuilder(Reflex::Literal("std::auto_ptr<std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >"));
  ::Reflex::Type type_4547 = ::Reflex::TypeBuilder(Reflex::Literal("edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > > >"));
  ::Reflex::Type type_7961 = ::Reflex::TypeBuilder(Reflex::Literal("__gnu_cxx::__alloc_traits<std::allocator<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >"));
  ::Reflex::Type type_2735 = ::Reflex::TypeBuilder(Reflex::Literal("std::auto_ptr<std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > > >"));
  ::Reflex::Type type_4640 = ::Reflex::TypeBuilder(Reflex::Literal("edm::WrapperInterface<std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > > >"));
  ::Reflex::Type type_21546 = ::Reflex::TypeBuilder(Reflex::Literal("edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >"));
  ::Reflex::Type type_21550 = ::Reflex::TypeBuilder(Reflex::Literal("edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >"));
  ::Reflex::Type type_7963 = ::Reflex::TypeBuilder(Reflex::Literal("__gnu_cxx::__alloc_traits<std::allocator<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >"));
  ::Reflex::Type type_21545 = ::Reflex::TypeBuilder(Reflex::Literal("edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >"));
  ::Reflex::Type type_4645 = ::Reflex::TypeBuilder(Reflex::Literal("edm::WrapperInterface<std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >"));
  ::Reflex::Type type_21551 = ::Reflex::TypeBuilder(Reflex::Literal("edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >"));
  ::Reflex::Type type_20166 = ::Reflex::TypeBuilder(Reflex::Literal("edm::refhelper::FindRefVectorUsingAdvance<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >"));
  ::Reflex::Type type_7960 = ::Reflex::TypeBuilder(Reflex::Literal("__gnu_cxx::__alloc_traits<std::allocator<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >"));
  ::Reflex::Type type_7968 = ::Reflex::TypeBuilder(Reflex::Literal("__gnu_cxx::__alloc_traits<std::allocator<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > > >"));
  ::Reflex::Type type_4643 = ::Reflex::TypeBuilder(Reflex::Literal("edm::WrapperInterface<std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >"));
  ::Reflex::Type type_7970 = ::Reflex::TypeBuilder(Reflex::Literal("__gnu_cxx::__alloc_traits<std::allocator<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >"));
  ::Reflex::Type type_4636 = ::Reflex::TypeBuilder(Reflex::Literal("edm::WrapperInterface<std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > > >"));
  ::Reflex::Type type_21549 = ::Reflex::TypeBuilder(Reflex::Literal("edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >"));
  ::Reflex::Type type_20164 = ::Reflex::TypeBuilder(Reflex::Literal("edm::refhelper::FindRefVectorUsingAdvance<edm::RefVector<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >"));
  ::Reflex::Type type_20172 = ::Reflex::TypeBuilder(Reflex::Literal("edm::refhelper::FindRefVectorUsingAdvance<edm::RefVector<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >"));
  ::Reflex::Type type_7972 = ::Reflex::TypeBuilder(Reflex::Literal("__gnu_cxx::__alloc_traits<std::allocator<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >"));
  ::Reflex::Type type_20174 = ::Reflex::TypeBuilder(Reflex::Literal("edm::refhelper::FindRefVectorUsingAdvance<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >"));
  ::Reflex::Type type_7969 = ::Reflex::TypeBuilder(Reflex::Literal("__gnu_cxx::__alloc_traits<std::allocator<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >"));
  ::Reflex::Type type_7966 = ::Reflex::TypeBuilder(Reflex::Literal("__gnu_cxx::__alloc_traits<std::allocator<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > > >"));
  ::Reflex::Type type_20170 = ::Reflex::TypeBuilder(Reflex::Literal("edm::refhelper::FindRefVectorUsingAdvance<edm::RefVector<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >"));
  ::Reflex::Type type_15864 = ::Reflex::TypeBuilder(Reflex::Literal("edm::helpers::KeyVal<edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >"));
  ::Reflex::Type type_2448 = ::Reflex::TypeBuilder(Reflex::Literal("std::_Vector_base<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,std::allocator<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >"));
  ::Reflex::Type type_16217 = ::Reflex::TypeBuilder(Reflex::Literal("edm::helpers::KeyVal<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >"));
  ::Reflex::Type type_2450 = ::Reflex::TypeBuilder(Reflex::Literal("std::_Vector_base<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,std::allocator<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >"));
  ::Reflex::Type type_7837 = ::Reflex::TypeBuilder(Reflex::Literal("__gnu_cxx::__normal_iterator<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*,std::vector<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >"));
  ::Reflex::Type type_2447 = ::Reflex::TypeBuilder(Reflex::Literal("std::_Vector_base<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,std::allocator<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >"));
  ::Reflex::Type type_2455 = ::Reflex::TypeBuilder(Reflex::Literal("std::_Vector_base<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >,std::allocator<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > > >"));
  ::Reflex::Type type_7838 = ::Reflex::TypeBuilder(Reflex::Literal("__gnu_cxx::__normal_iterator<const edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*,std::vector<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >"));
  ::Reflex::Type type_7841 = ::Reflex::TypeBuilder(Reflex::Literal("__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*,std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >"));
  ::Reflex::Type type_2457 = ::Reflex::TypeBuilder(Reflex::Literal("std::_Vector_base<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >,std::allocator<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >"));
  ::Reflex::Type type_3120 = ::Reflex::TypeBuilder(Reflex::Literal("std::map<unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > >"));
  ::Reflex::Type type_7842 = ::Reflex::TypeBuilder(Reflex::Literal("__gnu_cxx::__normal_iterator<const edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*,std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >"));
  ::Reflex::Type type_7835 = ::Reflex::TypeBuilder(Reflex::Literal("__gnu_cxx::__normal_iterator<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*,std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >"));
  ::Reflex::Type type_2459 = ::Reflex::TypeBuilder(Reflex::Literal("std::_Vector_base<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >,std::allocator<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >"));
  ::Reflex::Type type_7851 = ::Reflex::TypeBuilder(Reflex::Literal("__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*,std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > > >"));
  ::Reflex::Type type_3131 = ::Reflex::TypeBuilder(Reflex::Literal("std::map<unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > >"));
  ::Reflex::Type type_7855 = ::Reflex::TypeBuilder(Reflex::Literal("__gnu_cxx::__normal_iterator<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*,std::vector<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >"));
  ::Reflex::Type type_7836 = ::Reflex::TypeBuilder(Reflex::Literal("__gnu_cxx::__normal_iterator<const edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*,std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >"));
  ::Reflex::Type type_2456 = ::Reflex::TypeBuilder(Reflex::Literal("std::_Vector_base<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >,std::allocator<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >"));
  ::Reflex::Type type_7852 = ::Reflex::TypeBuilder(Reflex::Literal("__gnu_cxx::__normal_iterator<const edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*,std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > > >"));
  ::Reflex::Type type_2453 = ::Reflex::TypeBuilder(Reflex::Literal("std::_Vector_base<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >,std::allocator<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > > >"));
  ::Reflex::Type type_7856 = ::Reflex::TypeBuilder(Reflex::Literal("__gnu_cxx::__normal_iterator<const edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*,std::vector<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >"));
  ::Reflex::Type type_7859 = ::Reflex::TypeBuilder(Reflex::Literal("__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*,std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >"));
  ::Reflex::Type type_3412 = ::Reflex::TypeBuilder(Reflex::Literal("std::reverse_iterator<__gnu_cxx::__normal_iterator<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*,std::vector<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > > >"));
  ::Reflex::Type type_7860 = ::Reflex::TypeBuilder(Reflex::Literal("__gnu_cxx::__normal_iterator<const edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*,std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >"));
  ::Reflex::Type type_7853 = ::Reflex::TypeBuilder(Reflex::Literal("__gnu_cxx::__normal_iterator<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*,std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >"));
  ::Reflex::Type type_3411 = ::Reflex::TypeBuilder(Reflex::Literal("std::reverse_iterator<__gnu_cxx::__normal_iterator<const edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*,std::vector<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > > >"));
  ::Reflex::Type type_7847 = ::Reflex::TypeBuilder(Reflex::Literal("__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*,std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > > >"));
  ::Reflex::Type type_3418 = ::Reflex::TypeBuilder(Reflex::Literal("std::reverse_iterator<__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*,std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > > >"));
  ::Reflex::Type type_7854 = ::Reflex::TypeBuilder(Reflex::Literal("__gnu_cxx::__normal_iterator<const edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*,std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >"));
  ::Reflex::Type type_7848 = ::Reflex::TypeBuilder(Reflex::Literal("__gnu_cxx::__normal_iterator<const edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*,std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > > >"));
  ::Reflex::Type type_3417 = ::Reflex::TypeBuilder(Reflex::Literal("std::reverse_iterator<__gnu_cxx::__normal_iterator<const edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*,std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > > >"));
  ::Reflex::Type type_3410 = ::Reflex::TypeBuilder(Reflex::Literal("std::reverse_iterator<__gnu_cxx::__normal_iterator<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*,std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > > >"));
  ::Reflex::Type type_3434 = ::Reflex::TypeBuilder(Reflex::Literal("std::reverse_iterator<__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*,std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > > > >"));
  ::Reflex::Type type_3438 = ::Reflex::TypeBuilder(Reflex::Literal("std::reverse_iterator<__gnu_cxx::__normal_iterator<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*,std::vector<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > > >"));
  ::Reflex::Type type_3409 = ::Reflex::TypeBuilder(Reflex::Literal("std::reverse_iterator<__gnu_cxx::__normal_iterator<const edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*,std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > > >"));
  ::Reflex::Type type_3433 = ::Reflex::TypeBuilder(Reflex::Literal("std::reverse_iterator<__gnu_cxx::__normal_iterator<const edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*,std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > > > >"));
  ::Reflex::Type type_3437 = ::Reflex::TypeBuilder(Reflex::Literal("std::reverse_iterator<__gnu_cxx::__normal_iterator<const edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*,std::vector<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > > >"));
  ::Reflex::Type type_3446 = ::Reflex::TypeBuilder(Reflex::Literal("std::reverse_iterator<__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*,std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > > >"));
  ::Reflex::Type type_3445 = ::Reflex::TypeBuilder(Reflex::Literal("std::reverse_iterator<__gnu_cxx::__normal_iterator<const edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*,std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > > >"));
  ::Reflex::Type type_3436 = ::Reflex::TypeBuilder(Reflex::Literal("std::reverse_iterator<__gnu_cxx::__normal_iterator<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*,std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > > >"));
  ::Reflex::Type type_3428 = ::Reflex::TypeBuilder(Reflex::Literal("std::reverse_iterator<__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*,std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > > > >"));
  ::Reflex::Type type_3435 = ::Reflex::TypeBuilder(Reflex::Literal("std::reverse_iterator<__gnu_cxx::__normal_iterator<const edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*,std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > > >"));
  ::Reflex::Type type_3427 = ::Reflex::TypeBuilder(Reflex::Literal("std::reverse_iterator<__gnu_cxx::__normal_iterator<const edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*,std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > > > >"));
  ::Reflex::Type type_7462 = ::Reflex::TypedefTypeBuilder(Reflex::Literal("reco::BasicJetFwdPtrVector"), type_2981);
  ::Reflex::Type type_7465 = ::Reflex::TypedefTypeBuilder(Reflex::Literal("reco::BasicJetFwdRefVector"), type_2982);
  ::Reflex::Type type_7514 = ::Reflex::TypedefTypeBuilder(Reflex::Literal("reco::GenJetFwdPtrVector"), type_2986);
  ::Reflex::Type type_7518 = ::Reflex::TypedefTypeBuilder(Reflex::Literal("reco::GenJetFwdRefVector"), type_2987);
  ::Reflex::Type type_7537 = ::Reflex::TypedefTypeBuilder(Reflex::Literal("reco::PFJetFwdPtrVector"), type_2973);
  ::Reflex::Type type_7539 = ::Reflex::TypedefTypeBuilder(Reflex::Literal("reco::CaloJetFwdPtrVector"), type_2993);
  ::Reflex::Type type_7547 = ::Reflex::TypedefTypeBuilder(Reflex::Literal("reco::PFJetFwdRefVector"), type_2974);
  ::Reflex::Type type_7548 = ::Reflex::TypedefTypeBuilder(Reflex::Literal("reco::CaloJetFwdRefVector"), type_2994);
  ::Reflex::Type type_12760 = ::Reflex::ReferenceBuilder(type_7528);
  ::Reflex::Type type_7528c = ::Reflex::ConstBuilder(type_7528);
  ::Reflex::Type type_12762 = ::Reflex::ReferenceBuilder(type_7528c);
  ::Reflex::Type type_6457 = ::Reflex::TypedefTypeBuilder(Reflex::Literal("math::XYZTLorentzVectorD"), type_6456);
  ::Reflex::Type type_6506 = ::Reflex::TypedefTypeBuilder(Reflex::Literal("math::XYZTLorentzVector"), type_6457);
  ::Reflex::Type type_6506c = ::Reflex::ConstBuilder(type_6506);
  ::Reflex::Type type_23124 = ::Reflex::ReferenceBuilder(type_6506c);
  ::Reflex::Type type_6467 = ::Reflex::TypedefTypeBuilder(Reflex::Literal("math::XYZPointD"), type_6466);
  ::Reflex::Type type_6476 = ::Reflex::TypedefTypeBuilder(Reflex::Literal("math::XYZPoint"), type_6467);
  ::Reflex::Type type_6476c = ::Reflex::ConstBuilder(type_6476);
  ::Reflex::Type type_23126 = ::Reflex::ReferenceBuilder(type_6476c);
  ::Reflex::Type type_24786c = ::Reflex::ConstBuilder(type_24786);
  ::Reflex::Type type_34837 = ::Reflex::ReferenceBuilder(type_24786c);
  ::Reflex::Type type_3013c = ::Reflex::ConstBuilder(type_3013);
  ::Reflex::Type type_30674 = ::Reflex::ReferenceBuilder(type_3013c);
  ::Reflex::Type type_7530 = ::Reflex::TypedefTypeBuilder(Reflex::Literal("reco::TrackRefVector"), type_4490);
  ::Reflex::Type type_7530c = ::Reflex::ConstBuilder(type_7530);
  ::Reflex::Type type_34838 = ::Reflex::ReferenceBuilder(type_7530c);
  ::Reflex::Type type_878c = ::Reflex::ConstBuilder(type_878);
  ::Reflex::Type type_18620 = ::Reflex::ReferenceBuilder(type_878c);
  ::Reflex::Type type_4714c = ::Reflex::ConstBuilder(type_4714);
  ::Reflex::Type type_33983 = ::Reflex::ReferenceBuilder(type_4714c);
  ::Reflex::Type type_9177 = ::Reflex::PointerBuilder(type_7528);
  ::Reflex::Type type_2504 = ::Reflex::TypedefTypeBuilder(Reflex::Literal("std::string"), type_2503);
  ::Reflex::Type type_12758 = ::Reflex::PointerBuilder(type_7528c);
  ::Reflex::Type type_3189 = ::Reflex::TypedefTypeBuilder(Reflex::Literal("std::size_t"), type_347);
  ::Reflex::Type type_3096 = ::Reflex::TypedefTypeBuilder(Reflex::Literal("std::ptrdiff_t"), type_351);
  ::Reflex::Type type_3223c = ::Reflex::ConstBuilder(type_3223);
  ::Reflex::Type type_29730 = ::Reflex::ReferenceBuilder(type_3223c);
  ::Reflex::Type type_2968c = ::Reflex::ConstBuilder(type_2968);
  ::Reflex::Type type_18696 = ::Reflex::ReferenceBuilder(type_2968c);
  ::Reflex::Type type_30607 = ::Reflex::ReferenceBuilder(type_2968);
  ::Reflex::Type type_7468 = ::Reflex::TypedefTypeBuilder(Reflex::Literal("reco::PFCandidatePtr"), type_4724);
  ::Reflex::Type type_7529 = ::Reflex::TypedefTypeBuilder(Reflex::Literal("reco::PFCandidateFwdPtr"), type_4488);
  ::Reflex::Type type_12955 = ::Reflex::ReferenceBuilder(type_7463);
  ::Reflex::Type type_7463c = ::Reflex::ConstBuilder(type_7463);
  ::Reflex::Type type_12957 = ::Reflex::ReferenceBuilder(type_7463c);
  ::Reflex::Type type_24150c = ::Reflex::ConstBuilder(type_24150);
  ::Reflex::Type type_34640 = ::Reflex::ReferenceBuilder(type_24150c);
  ::Reflex::Type type_9120 = ::Reflex::PointerBuilder(type_7463);
  ::Reflex::Type type_12890 = ::Reflex::ReferenceBuilder(type_4740);
  ::Reflex::Type type_4740c = ::Reflex::ConstBuilder(type_4740);
  ::Reflex::Type type_12892 = ::Reflex::ReferenceBuilder(type_4740c);
  ::Reflex::Type type_4759c = ::Reflex::ConstBuilder(type_4759);
  ::Reflex::Type type_33955 = ::Reflex::ReferenceBuilder(type_4759c);
  ::Reflex::Type type_4670c = ::Reflex::ConstBuilder(type_4670);
  ::Reflex::Type type_33956 = ::Reflex::ReferenceBuilder(type_4670c);
  ::Reflex::Type type_4496c = ::Reflex::ConstBuilder(type_4496);
  ::Reflex::Type type_12827 = ::Reflex::ReferenceBuilder(type_4496c);
  ::Reflex::Type type_2971c = ::Reflex::ConstBuilder(type_2971);
  ::Reflex::Type type_33477 = ::Reflex::PointerBuilder(type_2971c);
  ::Reflex::Type type_4616c = ::Reflex::ConstBuilder(type_4616);
  ::Reflex::Type type_33957 = ::Reflex::ReferenceBuilder(type_4616c);
  ::Reflex::Type type_4689c = ::Reflex::ConstBuilder(type_4689);
  ::Reflex::Type type_18495 = ::Reflex::ReferenceBuilder(type_4689c);
  ::Reflex::Type type_4737c = ::Reflex::ConstBuilder(type_4737);
  ::Reflex::Type type_18571 = ::Reflex::PointerBuilder(type_4737c);
  ::Reflex::Type type_12953 = ::Reflex::PointerBuilder(type_7463c);
  ::Reflex::Type type_4705c = ::Reflex::ConstBuilder(type_4705);
  ::Reflex::Type type_33954 = ::Reflex::ReferenceBuilder(type_4705c);
  ::Reflex::Type type_4691c = ::Reflex::ConstBuilder(type_4691);
  ::Reflex::Type type_21597 = ::Reflex::ReferenceBuilder(type_4691c);
  ::Reflex::Type type_356c = ::Reflex::ConstBuilder(type_356);
  ::Reflex::Type type_9929 = ::Reflex::ReferenceBuilder(type_356c);
  ::Reflex::Type type_8816 = ::Reflex::PointerBuilder(type_4740);
  ::Reflex::Type type_12888 = ::Reflex::PointerBuilder(type_4740c);
  ::Reflex::Type type_3225c = ::Reflex::ConstBuilder(type_3225);
  ::Reflex::Type type_29483 = ::Reflex::ReferenceBuilder(type_3225c);
  ::Reflex::Type type_2970c = ::Reflex::ConstBuilder(type_2970);
  ::Reflex::Type type_30612 = ::Reflex::ReferenceBuilder(type_2970c);
  ::Reflex::Type type_30613 = ::Reflex::ReferenceBuilder(type_2970);
  ::Reflex::Type type_3226c = ::Reflex::ConstBuilder(type_3226);
  ::Reflex::Type type_29691 = ::Reflex::ReferenceBuilder(type_3226c);
  ::Reflex::Type type_18708 = ::Reflex::ReferenceBuilder(type_2971c);
  ::Reflex::Type type_30615 = ::Reflex::ReferenceBuilder(type_2971);
  ::Reflex::Type type_13410 = ::Reflex::ReferenceBuilder(type_7564);
  ::Reflex::Type type_7564c = ::Reflex::ConstBuilder(type_7564);
  ::Reflex::Type type_13412 = ::Reflex::ReferenceBuilder(type_7564c);
  ::Reflex::Type type_9346 = ::Reflex::PointerBuilder(type_7564);
  ::Reflex::Type type_13408 = ::Reflex::PointerBuilder(type_7564c);
  ::Reflex::Type type_3247c = ::Reflex::ConstBuilder(type_3247);
  ::Reflex::Type type_29847 = ::Reflex::ReferenceBuilder(type_3247c);
  ::Reflex::Type type_2983c = ::Reflex::ConstBuilder(type_2983);
  ::Reflex::Type type_18732 = ::Reflex::ReferenceBuilder(type_2983c);
  ::Reflex::Type type_30634 = ::Reflex::ReferenceBuilder(type_2983);
  ::Reflex::Type type_13605 = ::Reflex::ReferenceBuilder(type_7512);
  ::Reflex::Type type_7512c = ::Reflex::ConstBuilder(type_7512);
  ::Reflex::Type type_13607 = ::Reflex::ReferenceBuilder(type_7512c);
  ::Reflex::Type type_24675c = ::Reflex::ConstBuilder(type_24675);
  ::Reflex::Type type_34798 = ::Reflex::ReferenceBuilder(type_24675c);
  ::Reflex::Type type_7466c = ::Reflex::ConstBuilder(type_7466);
  ::Reflex::Type type_34799 = ::Reflex::PointerBuilder(type_7466c);
  ::Reflex::Type type_5843c = ::Reflex::ConstBuilder(type_5843);
  ::Reflex::Type type_33981 = ::Reflex::PointerBuilder(type_5843c);
  ::Reflex::Type type_9158 = ::Reflex::PointerBuilder(type_7512);
  ::Reflex::Type type_13603 = ::Reflex::PointerBuilder(type_7512c);
  ::Reflex::Type type_3255c = ::Reflex::ConstBuilder(type_3255);
  ::Reflex::Type type_29717 = ::Reflex::ReferenceBuilder(type_3255c);
  ::Reflex::Type type_2988c = ::Reflex::ConstBuilder(type_2988);
  ::Reflex::Type type_18744 = ::Reflex::ReferenceBuilder(type_2988c);
  ::Reflex::Type type_30642 = ::Reflex::ReferenceBuilder(type_2988);
  ::Reflex::Type type_580 = ::Reflex::TypedefTypeBuilder(Reflex::Literal("CaloTowerPtr"), type_579);
  ::Reflex::Type type_185 = ::Reflex::TypedefTypeBuilder(Reflex::Literal("CaloTowerFwdPtr"), type_184);
  ::Reflex::Type type_13800 = ::Reflex::ReferenceBuilder(type_7473);
  ::Reflex::Type type_7473c = ::Reflex::ConstBuilder(type_7473);
  ::Reflex::Type type_13802 = ::Reflex::ReferenceBuilder(type_7473c);
  ::Reflex::Type type_24250c = ::Reflex::ConstBuilder(type_24250);
  ::Reflex::Type type_34659 = ::Reflex::ReferenceBuilder(type_24250c);
  ::Reflex::Type type_9289 = ::Reflex::PointerBuilder(type_7473);
  ::Reflex::Type type_13735 = ::Reflex::ReferenceBuilder(type_4744);
  ::Reflex::Type type_4744c = ::Reflex::ConstBuilder(type_4744);
  ::Reflex::Type type_13737 = ::Reflex::ReferenceBuilder(type_4744c);
  ::Reflex::Type type_4764c = ::Reflex::ConstBuilder(type_4764);
  ::Reflex::Type type_33975 = ::Reflex::ReferenceBuilder(type_4764c);
  ::Reflex::Type type_4675c = ::Reflex::ConstBuilder(type_4675);
  ::Reflex::Type type_33976 = ::Reflex::ReferenceBuilder(type_4675c);
  ::Reflex::Type type_4516c = ::Reflex::ConstBuilder(type_4516);
  ::Reflex::Type type_13672 = ::Reflex::ReferenceBuilder(type_4516c);
  ::Reflex::Type type_2991c = ::Reflex::ConstBuilder(type_2991);
  ::Reflex::Type type_33494 = ::Reflex::PointerBuilder(type_2991c);
  ::Reflex::Type type_4621c = ::Reflex::ConstBuilder(type_4621);
  ::Reflex::Type type_33977 = ::Reflex::ReferenceBuilder(type_4621c);
  ::Reflex::Type type_13798 = ::Reflex::PointerBuilder(type_7473c);
  ::Reflex::Type type_4709c = ::Reflex::ConstBuilder(type_4709);
  ::Reflex::Type type_33974 = ::Reflex::ReferenceBuilder(type_4709c);
  ::Reflex::Type type_8987 = ::Reflex::PointerBuilder(type_4744);
  ::Reflex::Type type_13733 = ::Reflex::PointerBuilder(type_4744c);
  ::Reflex::Type type_3257c = ::Reflex::ConstBuilder(type_3257);
  ::Reflex::Type type_29600 = ::Reflex::ReferenceBuilder(type_3257c);
  ::Reflex::Type type_2990c = ::Reflex::ConstBuilder(type_2990);
  ::Reflex::Type type_30647 = ::Reflex::ReferenceBuilder(type_2990c);
  ::Reflex::Type type_30648 = ::Reflex::ReferenceBuilder(type_2990);
  ::Reflex::Type type_3258c = ::Reflex::ConstBuilder(type_3258);
  ::Reflex::Type type_29808 = ::Reflex::ReferenceBuilder(type_3258c);
  ::Reflex::Type type_18756 = ::Reflex::ReferenceBuilder(type_2991c);
  ::Reflex::Type type_30650 = ::Reflex::ReferenceBuilder(type_2991);
  ::Reflex::Type type_13020 = ::Reflex::ReferenceBuilder(type_4484);
  ::Reflex::Type type_4484c = ::Reflex::ConstBuilder(type_4484);
  ::Reflex::Type type_13022 = ::Reflex::ReferenceBuilder(type_4484c);
  ::Reflex::Type type_680c = ::Reflex::ConstBuilder(type_680);
  ::Reflex::Type type_3933 = ::Reflex::PointerBuilder(type_680c);
  ::Reflex::Type type_4720c = ::Reflex::ConstBuilder(type_4720);
  ::Reflex::Type type_33465 = ::Reflex::ReferenceBuilder(type_4720c);
  ::Reflex::Type type_13280 = ::Reflex::ReferenceBuilder(type_4485);
  ::Reflex::Type type_4485c = ::Reflex::ConstBuilder(type_4485);
  ::Reflex::Type type_13282 = ::Reflex::ReferenceBuilder(type_4485c);
  ::Reflex::Type type_4721c = ::Reflex::ConstBuilder(type_4721);
  ::Reflex::Type type_33466 = ::Reflex::ReferenceBuilder(type_4721c);
  ::Reflex::Type type_13475 = ::Reflex::ReferenceBuilder(type_4486);
  ::Reflex::Type type_4486c = ::Reflex::ConstBuilder(type_4486);
  ::Reflex::Type type_13477 = ::Reflex::ReferenceBuilder(type_4486c);
  ::Reflex::Type type_4722c = ::Reflex::ConstBuilder(type_4722);
  ::Reflex::Type type_33467 = ::Reflex::ReferenceBuilder(type_4722c);
  ::Reflex::Type type_13865 = ::Reflex::ReferenceBuilder(type_4487);
  ::Reflex::Type type_4487c = ::Reflex::ConstBuilder(type_4487);
  ::Reflex::Type type_13867 = ::Reflex::ReferenceBuilder(type_4487c);
  ::Reflex::Type type_4723c = ::Reflex::ConstBuilder(type_4723);
  ::Reflex::Type type_33468 = ::Reflex::ReferenceBuilder(type_4723c);
  ::Reflex::Type type_4738c = ::Reflex::ConstBuilder(type_4738);
  ::Reflex::Type type_4491c = ::Reflex::ConstBuilder(type_4491);
  ::Reflex::Type type_33473 = ::Reflex::ReferenceBuilder(type_4491c);
  ::Reflex::Type type_33204 = ::Reflex::ReferenceBuilder(type_4738c);
  ::Reflex::Type type_3901c = ::Reflex::ConstBuilder(type_3901);
  ::Reflex::Type type_18570 = ::Reflex::ReferenceBuilder(type_3901c);
  ::Reflex::Type type_33474 = ::Reflex::PointerBuilder(type_2968c);
  ::Reflex::Type type_4453c = ::Reflex::ConstBuilder(type_4453);
  ::Reflex::Type type_33475 = ::Reflex::ReferenceBuilder(type_4453c);
  ::Reflex::Type type_33476 = ::Reflex::ReferenceBuilder(type_4491);
  ::Reflex::Type type_18575 = ::Reflex::ReferenceBuilder(type_2966);
  ::Reflex::Type type_4693 = ::Reflex::TypedefTypeBuilder(Reflex::Literal("edm::helper_vector"), type_4692);
  ::Reflex::Type type_18576 = ::Reflex::ReferenceBuilder(type_4693);
  ::Reflex::Type type_4454c = ::Reflex::ConstBuilder(type_4454);
  ::Reflex::Type type_33478 = ::Reflex::ReferenceBuilder(type_4454c);
  ::Reflex::Type type_12825 = ::Reflex::ReferenceBuilder(type_4496);
  ::Reflex::Type type_4742c = ::Reflex::ConstBuilder(type_4742);
  ::Reflex::Type type_4506c = ::Reflex::ConstBuilder(type_4506);
  ::Reflex::Type type_33485 = ::Reflex::ReferenceBuilder(type_4506c);
  ::Reflex::Type type_33246 = ::Reflex::ReferenceBuilder(type_4742c);
  ::Reflex::Type type_33486 = ::Reflex::PointerBuilder(type_2983c);
  ::Reflex::Type type_4456c = ::Reflex::ConstBuilder(type_4456);
  ::Reflex::Type type_33487 = ::Reflex::ReferenceBuilder(type_4456c);
  ::Reflex::Type type_33488 = ::Reflex::ReferenceBuilder(type_4506);
  ::Reflex::Type type_4743c = ::Reflex::ConstBuilder(type_4743);
  ::Reflex::Type type_4511c = ::Reflex::ConstBuilder(type_4511);
  ::Reflex::Type type_33490 = ::Reflex::ReferenceBuilder(type_4511c);
  ::Reflex::Type type_33260 = ::Reflex::ReferenceBuilder(type_4743c);
  ::Reflex::Type type_33491 = ::Reflex::PointerBuilder(type_2988c);
  ::Reflex::Type type_4457c = ::Reflex::ConstBuilder(type_4457);
  ::Reflex::Type type_33492 = ::Reflex::ReferenceBuilder(type_4457c);
  ::Reflex::Type type_33493 = ::Reflex::ReferenceBuilder(type_4511);
  ::Reflex::Type type_4458c = ::Reflex::ConstBuilder(type_4458);
  ::Reflex::Type type_33495 = ::Reflex::ReferenceBuilder(type_4458c);
  ::Reflex::Type type_13670 = ::Reflex::ReferenceBuilder(type_4516);
  ::Reflex::Type type_482c = ::Reflex::ConstBuilder(type_482);
  ::Reflex::Type type_18629 = ::Reflex::ReferenceBuilder(type_482c);
  ::Reflex::Type type_33507 = ::Reflex::PointerBuilder(type_2968);
  ::Reflex::Type type_4626c = ::Reflex::ConstBuilder(type_4626);
  ::Reflex::Type type_33508 = ::Reflex::PointerBuilder(type_4626c);
  ::Reflex::Type type_33095 = ::Reflex::ReferenceBuilder(type_4280);
  ::Reflex::Type type_9980 = ::Reflex::ReferenceBuilder(type_3933);
  ::Reflex::Type type_2967c = ::Reflex::ConstBuilder(type_2967);
  ::Reflex::Type type_22942 = ::Reflex::ReferenceBuilder(type_2967c);
  ::Reflex::Type type_33529 = ::Reflex::PointerBuilder(type_2971);
  ::Reflex::Type type_4631c = ::Reflex::ConstBuilder(type_4631);
  ::Reflex::Type type_33530 = ::Reflex::PointerBuilder(type_4631c);
  ::Reflex::Type type_33562 = ::Reflex::PointerBuilder(type_2983);
  ::Reflex::Type type_4638c = ::Reflex::ConstBuilder(type_4638);
  ::Reflex::Type type_33563 = ::Reflex::PointerBuilder(type_4638c);
  ::Reflex::Type type_33581 = ::Reflex::PointerBuilder(type_2988);
  ::Reflex::Type type_4642c = ::Reflex::ConstBuilder(type_4642);
  ::Reflex::Type type_33582 = ::Reflex::PointerBuilder(type_4642c);
  ::Reflex::Type type_33603 = ::Reflex::PointerBuilder(type_2991);
  ::Reflex::Type type_4647c = ::Reflex::ConstBuilder(type_4647);
  ::Reflex::Type type_33604 = ::Reflex::PointerBuilder(type_4647c);
  ::Reflex::Type type_13085 = ::Reflex::ReferenceBuilder(type_4571);
  ::Reflex::Type type_4571c = ::Reflex::ConstBuilder(type_4571);
  ::Reflex::Type type_13087 = ::Reflex::ReferenceBuilder(type_4571c);
  ::Reflex::Type type_13345 = ::Reflex::ReferenceBuilder(type_4573);
  ::Reflex::Type type_4573c = ::Reflex::ConstBuilder(type_4573);
  ::Reflex::Type type_13347 = ::Reflex::ReferenceBuilder(type_4573c);
  ::Reflex::Type type_13540 = ::Reflex::ReferenceBuilder(type_4574);
  ::Reflex::Type type_4574c = ::Reflex::ConstBuilder(type_4574);
  ::Reflex::Type type_13542 = ::Reflex::ReferenceBuilder(type_4574c);
  ::Reflex::Type type_13930 = ::Reflex::ReferenceBuilder(type_4575);
  ::Reflex::Type type_4575c = ::Reflex::ConstBuilder(type_4575);
  ::Reflex::Type type_13932 = ::Reflex::ReferenceBuilder(type_4575c);
  ::Reflex::Type type_33948 = ::Reflex::ReferenceBuilder(type_4704);
  ::Reflex::Type type_4704c = ::Reflex::ConstBuilder(type_4704);
  ::Reflex::Type type_33949 = ::Reflex::ReferenceBuilder(type_4704c);
  ::Reflex::Type type_4758c = ::Reflex::ConstBuilder(type_4758);
  ::Reflex::Type type_33950 = ::Reflex::ReferenceBuilder(type_4758c);
  ::Reflex::Type type_4669c = ::Reflex::ConstBuilder(type_4669);
  ::Reflex::Type type_33951 = ::Reflex::ReferenceBuilder(type_4669c);
  ::Reflex::Type type_4615c = ::Reflex::ConstBuilder(type_4615);
  ::Reflex::Type type_33952 = ::Reflex::ReferenceBuilder(type_4615c);
  ::Reflex::Type type_33953 = ::Reflex::ReferenceBuilder(type_4705);
  ::Reflex::Type type_33963 = ::Reflex::ReferenceBuilder(type_4707);
  ::Reflex::Type type_4707c = ::Reflex::ConstBuilder(type_4707);
  ::Reflex::Type type_33964 = ::Reflex::ReferenceBuilder(type_4707c);
  ::Reflex::Type type_4761c = ::Reflex::ConstBuilder(type_4761);
  ::Reflex::Type type_33965 = ::Reflex::ReferenceBuilder(type_4761c);
  ::Reflex::Type type_4672c = ::Reflex::ConstBuilder(type_4672);
  ::Reflex::Type type_33966 = ::Reflex::ReferenceBuilder(type_4672c);
  ::Reflex::Type type_4618c = ::Reflex::ConstBuilder(type_4618);
  ::Reflex::Type type_33967 = ::Reflex::ReferenceBuilder(type_4618c);
  ::Reflex::Type type_33968 = ::Reflex::ReferenceBuilder(type_4708);
  ::Reflex::Type type_4708c = ::Reflex::ConstBuilder(type_4708);
  ::Reflex::Type type_33969 = ::Reflex::ReferenceBuilder(type_4708c);
  ::Reflex::Type type_4762c = ::Reflex::ConstBuilder(type_4762);
  ::Reflex::Type type_33970 = ::Reflex::ReferenceBuilder(type_4762c);
  ::Reflex::Type type_4673c = ::Reflex::ConstBuilder(type_4673);
  ::Reflex::Type type_33971 = ::Reflex::ReferenceBuilder(type_4673c);
  ::Reflex::Type type_4619c = ::Reflex::ConstBuilder(type_4619);
  ::Reflex::Type type_33972 = ::Reflex::ReferenceBuilder(type_4619c);
  ::Reflex::Type type_33973 = ::Reflex::ReferenceBuilder(type_4709);
  ::Reflex::Type type_34012 = ::Reflex::ReferenceBuilder(type_4738);
  ::Reflex::Type type_34014 = ::Reflex::ReferenceBuilder(type_4742);
  ::Reflex::Type type_34015 = ::Reflex::ReferenceBuilder(type_4743);
  ::Reflex::Type type_34672 = ::Reflex::ReferenceBuilder(type_7485);
  ::Reflex::Type type_7485c = ::Reflex::ConstBuilder(type_7485);
  ::Reflex::Type type_33987 = ::Reflex::ReferenceBuilder(type_7485c);
  ::Reflex::Type type_22651 = ::Reflex::ReferenceBuilder(type_5843c);
  ::Reflex::Type type_34774 = ::Reflex::ReferenceBuilder(type_7498);
  ::Reflex::Type type_7498c = ::Reflex::ConstBuilder(type_7498);
  ::Reflex::Type type_34775 = ::Reflex::ReferenceBuilder(type_7498c);
  ::Reflex::Type type_4739c = ::Reflex::ConstBuilder(type_4739);
  ::Reflex::Type type_12444 = ::Reflex::ReferenceBuilder(type_4739c);
  ::Reflex::Type type_34776 = ::Reflex::ReferenceBuilder(type_7499);
  ::Reflex::Type type_7499c = ::Reflex::ConstBuilder(type_7499);
  ::Reflex::Type type_34777 = ::Reflex::ReferenceBuilder(type_7499c);
  ::Reflex::Type type_34780 = ::Reflex::ReferenceBuilder(type_7501);
  ::Reflex::Type type_7501c = ::Reflex::ConstBuilder(type_7501);
  ::Reflex::Type type_34781 = ::Reflex::ReferenceBuilder(type_7501c);
  ::Reflex::Type type_34782 = ::Reflex::ReferenceBuilder(type_7502);
  ::Reflex::Type type_7502c = ::Reflex::ConstBuilder(type_7502);
  ::Reflex::Type type_34783 = ::Reflex::ReferenceBuilder(type_7502c);
  ::Reflex::Type type_34784 = ::Reflex::ReferenceBuilder(type_7503);
  ::Reflex::Type type_7503c = ::Reflex::ConstBuilder(type_7503);
  ::Reflex::Type type_34785 = ::Reflex::ReferenceBuilder(type_7503c);
  ::Reflex::Type type_21546c = ::Reflex::ConstBuilder(type_21546);
  ::Reflex::Type type_38055 = ::Reflex::ReferenceBuilder(type_21546c);
  ::Reflex::Type type_38056 = ::Reflex::ReferenceBuilder(type_21546);
  ::Reflex::Type type_33978 = ::Reflex::PointerBuilder(type_21536);
  ::Reflex::Type type_2096 = ::Reflex::TypedefTypeBuilder(Reflex::Literal("size_t"), type_347);
  ::Reflex::Type type_21536c = ::Reflex::ConstBuilder(type_21536);
  ::Reflex::Type type_38043 = ::Reflex::ReferenceBuilder(type_21536c);
  ::Reflex::Type type_19718 = ::Reflex::ReferenceBuilder(type_11851);
  ::Reflex::Type type_10023 = ::Reflex::ReferenceBuilder(type_2503);
  ::Reflex::Type type_21547c = ::Reflex::ConstBuilder(type_21547);
  ::Reflex::Type type_38057 = ::Reflex::ReferenceBuilder(type_21547c);
  ::Reflex::Type type_38058 = ::Reflex::ReferenceBuilder(type_21547);
  ::Reflex::Type type_21549c = ::Reflex::ConstBuilder(type_21549);
  ::Reflex::Type type_38061 = ::Reflex::ReferenceBuilder(type_21549c);
  ::Reflex::Type type_38062 = ::Reflex::ReferenceBuilder(type_21549);
  ::Reflex::Type type_21550c = ::Reflex::ConstBuilder(type_21550);
  ::Reflex::Type type_38063 = ::Reflex::ReferenceBuilder(type_21550c);
  ::Reflex::Type type_38064 = ::Reflex::ReferenceBuilder(type_21550);
  ::Reflex::Type type_21551c = ::Reflex::ConstBuilder(type_21551);
  ::Reflex::Type type_38065 = ::Reflex::ReferenceBuilder(type_21551c);
  ::Reflex::Type type_38066 = ::Reflex::ReferenceBuilder(type_21551);
  ::Reflex::Type type_38263 = ::Reflex::ReferenceBuilder(type_24150);
  ::Reflex::Type type_38267 = ::Reflex::ReferenceBuilder(type_24250);
  ::Reflex::Type type_38270 = ::Reflex::ReferenceBuilder(type_24317);
  ::Reflex::Type type_24317c = ::Reflex::ConstBuilder(type_24317);
  ::Reflex::Type type_38271 = ::Reflex::ReferenceBuilder(type_24317c);
  ::Reflex::Type type_38300 = ::Reflex::ReferenceBuilder(type_24675);
  ::Reflex::Type type_38305 = ::Reflex::ReferenceBuilder(type_24786);
  ::Reflex::Type type_8892 = ::Reflex::PointerBuilder(type_4485);
  ::Reflex::Type type_13278 = ::Reflex::PointerBuilder(type_4485c);
  ::Reflex::Type type_3245c = ::Reflex::ConstBuilder(type_3245);
  ::Reflex::Type type_29535 = ::Reflex::ReferenceBuilder(type_3245c);
  ::Reflex::Type type_2981c = ::Reflex::ConstBuilder(type_2981);
  ::Reflex::Type type_30628 = ::Reflex::ReferenceBuilder(type_2981c);
  ::Reflex::Type type_30629 = ::Reflex::ReferenceBuilder(type_2981);
  ::Reflex::Type type_8911 = ::Reflex::PointerBuilder(type_4573);
  ::Reflex::Type type_13343 = ::Reflex::PointerBuilder(type_4573c);
  ::Reflex::Type type_3246c = ::Reflex::ConstBuilder(type_3246);
  ::Reflex::Type type_29548 = ::Reflex::ReferenceBuilder(type_3246c);
  ::Reflex::Type type_2982c = ::Reflex::ConstBuilder(type_2982);
  ::Reflex::Type type_30631 = ::Reflex::ReferenceBuilder(type_2982c);
  ::Reflex::Type type_30632 = ::Reflex::ReferenceBuilder(type_2982);
  ::Reflex::Type type_8930 = ::Reflex::PointerBuilder(type_4486);
  ::Reflex::Type type_13473 = ::Reflex::PointerBuilder(type_4486c);
  ::Reflex::Type type_3253c = ::Reflex::ConstBuilder(type_3253);
  ::Reflex::Type type_29561 = ::Reflex::ReferenceBuilder(type_3253c);
  ::Reflex::Type type_2986c = ::Reflex::ConstBuilder(type_2986);
  ::Reflex::Type type_30636 = ::Reflex::ReferenceBuilder(type_2986c);
  ::Reflex::Type type_30637 = ::Reflex::ReferenceBuilder(type_2986);
  ::Reflex::Type type_8949 = ::Reflex::PointerBuilder(type_4574);
  ::Reflex::Type type_13538 = ::Reflex::PointerBuilder(type_4574c);
  ::Reflex::Type type_3254c = ::Reflex::ConstBuilder(type_3254);
  ::Reflex::Type type_29574 = ::Reflex::ReferenceBuilder(type_3254c);
  ::Reflex::Type type_2987c = ::Reflex::ConstBuilder(type_2987);
  ::Reflex::Type type_30639 = ::Reflex::ReferenceBuilder(type_2987c);
  ::Reflex::Type type_30640 = ::Reflex::ReferenceBuilder(type_2987);
  ::Reflex::Type type_8835 = ::Reflex::PointerBuilder(type_4484);
  ::Reflex::Type type_13018 = ::Reflex::PointerBuilder(type_4484c);
  ::Reflex::Type type_3231c = ::Reflex::ConstBuilder(type_3231);
  ::Reflex::Type type_29496 = ::Reflex::ReferenceBuilder(type_3231c);
  ::Reflex::Type type_2973c = ::Reflex::ConstBuilder(type_2973);
  ::Reflex::Type type_30617 = ::Reflex::ReferenceBuilder(type_2973c);
  ::Reflex::Type type_30618 = ::Reflex::ReferenceBuilder(type_2973);
  ::Reflex::Type type_9006 = ::Reflex::PointerBuilder(type_4487);
  ::Reflex::Type type_13863 = ::Reflex::PointerBuilder(type_4487c);
  ::Reflex::Type type_3264c = ::Reflex::ConstBuilder(type_3264);
  ::Reflex::Type type_29613 = ::Reflex::ReferenceBuilder(type_3264c);
  ::Reflex::Type type_2993c = ::Reflex::ConstBuilder(type_2993);
  ::Reflex::Type type_30652 = ::Reflex::ReferenceBuilder(type_2993c);
  ::Reflex::Type type_30653 = ::Reflex::ReferenceBuilder(type_2993);
  ::Reflex::Type type_8854 = ::Reflex::PointerBuilder(type_4571);
  ::Reflex::Type type_13083 = ::Reflex::PointerBuilder(type_4571c);
  ::Reflex::Type type_3232c = ::Reflex::ConstBuilder(type_3232);
  ::Reflex::Type type_29509 = ::Reflex::ReferenceBuilder(type_3232c);
  ::Reflex::Type type_2974c = ::Reflex::ConstBuilder(type_2974);
  ::Reflex::Type type_30620 = ::Reflex::ReferenceBuilder(type_2974c);
  ::Reflex::Type type_30621 = ::Reflex::ReferenceBuilder(type_2974);
  ::Reflex::Type type_9025 = ::Reflex::PointerBuilder(type_4575);
  ::Reflex::Type type_13928 = ::Reflex::PointerBuilder(type_4575c);
  ::Reflex::Type type_3265c = ::Reflex::ConstBuilder(type_3265);
  ::Reflex::Type type_29626 = ::Reflex::ReferenceBuilder(type_3265c);
  ::Reflex::Type type_2994c = ::Reflex::ConstBuilder(type_2994);
  ::Reflex::Type type_30655 = ::Reflex::ReferenceBuilder(type_2994c);
  ::Reflex::Type type_30656 = ::Reflex::ReferenceBuilder(type_2994);
  ::Reflex::Type type_8797 = ::Reflex::PointerBuilder(type_4496);
  ::Reflex::Type type_12823 = ::Reflex::PointerBuilder(type_4496c);
  ::Reflex::Type type_3224c = ::Reflex::ConstBuilder(type_3224);
  ::Reflex::Type type_29470 = ::Reflex::ReferenceBuilder(type_3224c);
  ::Reflex::Type type_2969c = ::Reflex::ConstBuilder(type_2969);
  ::Reflex::Type type_30609 = ::Reflex::ReferenceBuilder(type_2969c);
  ::Reflex::Type type_30610 = ::Reflex::ReferenceBuilder(type_2969);
  ::Reflex::Type type_8968 = ::Reflex::PointerBuilder(type_4516);
  ::Reflex::Type type_13668 = ::Reflex::PointerBuilder(type_4516c);
  ::Reflex::Type type_3256c = ::Reflex::ConstBuilder(type_3256);
  ::Reflex::Type type_29587 = ::Reflex::ReferenceBuilder(type_3256c);
  ::Reflex::Type type_2989c = ::Reflex::ConstBuilder(type_2989);
  ::Reflex::Type type_30644 = ::Reflex::ReferenceBuilder(type_2989c);
  ::Reflex::Type type_30645 = ::Reflex::ReferenceBuilder(type_2989);
  ::Reflex::Type type_33502 = ::Reflex::PointerBuilder(type_4491c);
  ::Reflex::Type type_33503 = ::Reflex::PointerBuilder(type_4491);
  ::Reflex::Type type_4625c = ::Reflex::ConstBuilder(type_4625);
  ::Reflex::Type type_33504 = ::Reflex::PointerBuilder(type_4625c);
  ::Reflex::Type type_33511 = ::Reflex::PointerBuilder(type_2969c);
  ::Reflex::Type type_33512 = ::Reflex::PointerBuilder(type_2969);
  ::Reflex::Type type_4627c = ::Reflex::ConstBuilder(type_4627);
  ::Reflex::Type type_33513 = ::Reflex::PointerBuilder(type_4627c);
  ::Reflex::Type type_33516 = ::Reflex::PointerBuilder(type_2973c);
  ::Reflex::Type type_33517 = ::Reflex::PointerBuilder(type_2973);
  ::Reflex::Type type_4628c = ::Reflex::ConstBuilder(type_4628);
  ::Reflex::Type type_33518 = ::Reflex::PointerBuilder(type_4628c);
  ::Reflex::Type type_33521 = ::Reflex::PointerBuilder(type_2974c);
  ::Reflex::Type type_33522 = ::Reflex::PointerBuilder(type_2974);
  ::Reflex::Type type_4629c = ::Reflex::ConstBuilder(type_4629);
  ::Reflex::Type type_33523 = ::Reflex::PointerBuilder(type_4629c);
  ::Reflex::Type type_4630c = ::Reflex::ConstBuilder(type_4630);
  ::Reflex::Type type_33526 = ::Reflex::PointerBuilder(type_4630c);
  ::Reflex::Type type_33547 = ::Reflex::PointerBuilder(type_2981c);
  ::Reflex::Type type_33548 = ::Reflex::PointerBuilder(type_2981);
  ::Reflex::Type type_4635c = ::Reflex::ConstBuilder(type_4635);
  ::Reflex::Type type_33549 = ::Reflex::PointerBuilder(type_4635c);
  ::Reflex::Type type_33552 = ::Reflex::PointerBuilder(type_2982c);
  ::Reflex::Type type_33553 = ::Reflex::PointerBuilder(type_2982);
  ::Reflex::Type type_4636c = ::Reflex::ConstBuilder(type_4636);
  ::Reflex::Type type_33554 = ::Reflex::PointerBuilder(type_4636c);
  ::Reflex::Type type_33557 = ::Reflex::PointerBuilder(type_4506c);
  ::Reflex::Type type_33558 = ::Reflex::PointerBuilder(type_4506);
  ::Reflex::Type type_4637c = ::Reflex::ConstBuilder(type_4637);
  ::Reflex::Type type_33559 = ::Reflex::PointerBuilder(type_4637c);
  ::Reflex::Type type_33566 = ::Reflex::PointerBuilder(type_2986c);
  ::Reflex::Type type_33567 = ::Reflex::PointerBuilder(type_2986);
  ::Reflex::Type type_4639c = ::Reflex::ConstBuilder(type_4639);
  ::Reflex::Type type_33568 = ::Reflex::PointerBuilder(type_4639c);
  ::Reflex::Type type_33571 = ::Reflex::PointerBuilder(type_2987c);
  ::Reflex::Type type_33572 = ::Reflex::PointerBuilder(type_2987);
  ::Reflex::Type type_4640c = ::Reflex::ConstBuilder(type_4640);
  ::Reflex::Type type_33573 = ::Reflex::PointerBuilder(type_4640c);
  ::Reflex::Type type_33576 = ::Reflex::PointerBuilder(type_4511c);
  ::Reflex::Type type_33577 = ::Reflex::PointerBuilder(type_4511);
  ::Reflex::Type type_4641c = ::Reflex::ConstBuilder(type_4641);
  ::Reflex::Type type_33578 = ::Reflex::PointerBuilder(type_4641c);
  ::Reflex::Type type_33585 = ::Reflex::PointerBuilder(type_2989c);
  ::Reflex::Type type_33586 = ::Reflex::PointerBuilder(type_2989);
  ::Reflex::Type type_4643c = ::Reflex::ConstBuilder(type_4643);
  ::Reflex::Type type_33587 = ::Reflex::PointerBuilder(type_4643c);
  ::Reflex::Type type_33590 = ::Reflex::PointerBuilder(type_2993c);
  ::Reflex::Type type_33591 = ::Reflex::PointerBuilder(type_2993);
  ::Reflex::Type type_4644c = ::Reflex::ConstBuilder(type_4644);
  ::Reflex::Type type_33592 = ::Reflex::PointerBuilder(type_4644c);
  ::Reflex::Type type_33595 = ::Reflex::PointerBuilder(type_2994c);
  ::Reflex::Type type_33596 = ::Reflex::PointerBuilder(type_2994);
  ::Reflex::Type type_4645c = ::Reflex::ConstBuilder(type_4645);
  ::Reflex::Type type_33597 = ::Reflex::PointerBuilder(type_4645c);
  ::Reflex::Type type_4646c = ::Reflex::ConstBuilder(type_4646);
  ::Reflex::Type type_33600 = ::Reflex::PointerBuilder(type_4646c);
  ::Reflex::Type type_33607 = ::Reflex::ReferenceBuilder(type_4563);
  ::Reflex::Type type_4563c = ::Reflex::ConstBuilder(type_4563);
  ::Reflex::Type type_33608 = ::Reflex::ReferenceBuilder(type_4563c);
  ::Reflex::Type type_19975c = ::Reflex::ConstBuilder(type_19975);
  ::Reflex::Type type_33206 = ::Reflex::ReferenceBuilder(type_19975c);
  ::Reflex::Type type_15864c = ::Reflex::ConstBuilder(type_15864);
  ::Reflex::Type type_30798 = ::Reflex::ReferenceBuilder(type_15864c);
  ::Reflex::Type type_4490c = ::Reflex::ConstBuilder(type_4490);
  ::Reflex::Type type_33205 = ::Reflex::ReferenceBuilder(type_4490c);
  ::Reflex::Type type_33617 = ::Reflex::ReferenceBuilder(type_4568);
  ::Reflex::Type type_4568c = ::Reflex::ConstBuilder(type_4568);
  ::Reflex::Type type_33618 = ::Reflex::ReferenceBuilder(type_4568c);
  ::Reflex::Type type_20100c = ::Reflex::ConstBuilder(type_20100);
  ::Reflex::Type type_33274 = ::Reflex::ReferenceBuilder(type_20100c);
  ::Reflex::Type type_16217c = ::Reflex::ConstBuilder(type_16217);
  ::Reflex::Type type_30865 = ::Reflex::ReferenceBuilder(type_16217c);
  ::Reflex::Type type_33203 = ::Reflex::ReferenceBuilder(type_19975);
  ::Reflex::Type type_4703c = ::Reflex::ConstBuilder(type_4703);
  ::Reflex::Type type_33944 = ::Reflex::ReferenceBuilder(type_4703c);
  ::Reflex::Type type_33273 = ::Reflex::ReferenceBuilder(type_20100);
  ::Reflex::Type type_21538c = ::Reflex::ConstBuilder(type_21538);
  ::Reflex::Type type_38044 = ::Reflex::ReferenceBuilder(type_21538c);
  ::Reflex::Type type_38045 = ::Reflex::ReferenceBuilder(type_21538);
  ::Reflex::Type type_11851c = ::Reflex::ConstBuilder(type_11851);
  ::Reflex::Type type_33942 = ::Reflex::PointerBuilder(type_11851c);
  ::Reflex::Type type_38046 = ::Reflex::PointerBuilder(type_21538);
  ::Reflex::Type type_38047 = ::Reflex::ReferenceBuilder(type_21539);
  ::Reflex::Type type_21539c = ::Reflex::ConstBuilder(type_21539);
  ::Reflex::Type type_38048 = ::Reflex::ReferenceBuilder(type_21539c);
  ::Reflex::Type type_19716 = ::Reflex::PointerBuilder(type_11851);
  ::Reflex::Type type_35796 = ::Reflex::ReferenceBuilder(type_11851c);
  ::Reflex::Type type_21545c = ::Reflex::ConstBuilder(type_21545);
  ::Reflex::Type type_38053 = ::Reflex::ReferenceBuilder(type_21545c);
  ::Reflex::Type type_38054 = ::Reflex::ReferenceBuilder(type_21545);
  ::Reflex::Type type_33982 = ::Reflex::PointerBuilder(type_21535);
  ::Reflex::Type type_33988 = ::Reflex::PointerBuilder(type_7485c);
  ::Reflex::Type type_21535c = ::Reflex::ConstBuilder(type_21535);
  ::Reflex::Type type_38041 = ::Reflex::ReferenceBuilder(type_21535c);
  ::Reflex::Type type_38073 = ::Reflex::ReferenceBuilder(type_21742);
  ::Reflex::Type type_21742c = ::Reflex::ConstBuilder(type_21742);
  ::Reflex::Type type_38074 = ::Reflex::ReferenceBuilder(type_21742c);
  ::Reflex::Type type_2969f = ::Reflex::TypedefTypeBuilder(Reflex::Literal("std::vector<reco::PFJetRefVector>"), type_2969);
  ::Reflex::Type type_2989f = ::Reflex::TypedefTypeBuilder(Reflex::Literal("std::vector<reco::CaloJetRefVector>"), type_2989);
  ::Reflex::Type type_4536f = ::Reflex::TypedefTypeBuilder(Reflex::Literal("edm::Wrapper<reco::JPTJetRefVector>"), type_4536);
  ::Reflex::Type type_4538f = ::Reflex::TypedefTypeBuilder(Reflex::Literal("edm::Wrapper<std::vector<reco::PFJetRefVector> >"), type_4538);
  ::Reflex::Type type_4539f = ::Reflex::TypedefTypeBuilder(Reflex::Literal("edm::Wrapper<reco::PFJetFwdPtrVector>"), type_4539);
  ::Reflex::Type type_4540f = ::Reflex::TypedefTypeBuilder(Reflex::Literal("edm::Wrapper<reco::PFJetFwdRefVector>"), type_4540);
  ::Reflex::Type type_4541f = ::Reflex::TypedefTypeBuilder(Reflex::Literal("edm::Wrapper<reco::PFJetRefVector>"), type_4541);
  ::Reflex::Type type_4546f = ::Reflex::TypedefTypeBuilder(Reflex::Literal("edm::Wrapper<reco::BasicJetFwdPtrVector>"), type_4546);
  ::Reflex::Type type_4547f = ::Reflex::TypedefTypeBuilder(Reflex::Literal("edm::Wrapper<reco::BasicJetFwdRefVector>"), type_4547);
  ::Reflex::Type type_4548f = ::Reflex::TypedefTypeBuilder(Reflex::Literal("edm::Wrapper<reco::BasicJetRefVector>"), type_4548);
  ::Reflex::Type type_4550f = ::Reflex::TypedefTypeBuilder(Reflex::Literal("edm::Wrapper<reco::GenJetFwdPtrVector>"), type_4550);
  ::Reflex::Type type_4551f = ::Reflex::TypedefTypeBuilder(Reflex::Literal("edm::Wrapper<reco::GenJetFwdRefVector>"), type_4551);
  ::Reflex::Type type_4552f = ::Reflex::TypedefTypeBuilder(Reflex::Literal("edm::Wrapper<reco::GenJetRefVector>"), type_4552);
  ::Reflex::Type type_4554f = ::Reflex::TypedefTypeBuilder(Reflex::Literal("edm::Wrapper<std::vector<reco::CaloJetRefVector> >"), type_4554);
  ::Reflex::Type type_4555f = ::Reflex::TypedefTypeBuilder(Reflex::Literal("edm::Wrapper<reco::CaloJetFwdPtrVector>"), type_4555);
  ::Reflex::Type type_4556f = ::Reflex::TypedefTypeBuilder(Reflex::Literal("edm::Wrapper<reco::CaloJetFwdRefVector>"), type_4556);
  ::Reflex::Type type_4557f = ::Reflex::TypedefTypeBuilder(Reflex::Literal("edm::Wrapper<reco::CaloJetRefVector>"), type_4557);
  ::Reflex::Type type_4563f = ::Reflex::TypedefTypeBuilder(Reflex::Literal("edm::AssociationMap<edm::OneToMany<reco::JPTJetCollection, std::vector<reco::Track>, unsigned int> >"), type_4563);
  ::Reflex::Type type_4568f = ::Reflex::TypedefTypeBuilder(Reflex::Literal("edm::AssociationMap<edm::OneToMany<reco::CaloJetCollection, std::vector<reco::Track>, unsigned int> >"), type_4568);
  ::Reflex::Type type_19975f = ::Reflex::TypedefTypeBuilder(Reflex::Literal("edm::helpers::KeyVal<edm::RefProd<reco::JPTJetCollection>,edm::RefProd<std::vector<reco::Track> > >"), type_19975);
  ::Reflex::Type type_20100f = ::Reflex::TypedefTypeBuilder(Reflex::Literal("edm::helpers::KeyVal<edm::RefProd<reco::CaloJetCollection>,edm::RefProd<std::vector<reco::Track> > >"), type_20100);
  ::Reflex::Type type_21538f = ::Reflex::TypedefTypeBuilder(Reflex::Literal("edm::reftobase::RefVectorHolder<reco::PFJetRefVector>"), type_21538);
  ::Reflex::Type type_21539f = ::Reflex::TypedefTypeBuilder(Reflex::Literal("edm::reftobase::RefHolder<reco::BasicJetRef>"), type_21539);
  ::Reflex::Type type_21545f = ::Reflex::TypedefTypeBuilder(Reflex::Literal("edm::reftobase::Holder<reco::Jet, reco::BasicJetRef>"), type_21545);
  ::Reflex::Type type_21742f = ::Reflex::TypedefTypeBuilder(Reflex::Literal("edm::helpers::Key<edm::RefProd<reco::CaloJetCollection > >"), type_21742);
} // unnamed namespace

#ifndef __CINT__

// Shadow classes to obtain the data member offsets 
namespace __shadow__ {
#ifdef __reco__JPTJet
#undef __reco__JPTJet
#endif
class __reco__JPTJet : public ::reco::Jet {
  public:
  __reco__JPTJet();
  virtual ~__reco__JPTJet() throw();
  virtual ::std::string print() const throw();
  virtual ::reco::JPTJet* clone() const throw();
  virtual void printJet() const throw();
  virtual bool overlap(reco::Candidate const&) const throw();
  ::reco::JPTJet::Specific mspecific;
};
#ifdef __std__vector_reco__JPTJet_
#undef __std__vector_reco__JPTJet_
#endif
class __std__vector_reco__JPTJet_ : protected ::std::_Vector_base<reco::JPTJet,std::allocator<reco::JPTJet> > {
  public:
  __std__vector_reco__JPTJet_();
};
#ifdef __reco__PFJet
#undef __reco__PFJet
#endif
class __reco__PFJet : public ::reco::Jet {
  public:
  __reco__PFJet();
  virtual ~__reco__PFJet() throw();
  virtual ::std::string print() const throw();
  virtual ::reco::PFJet* clone() const throw();
  virtual ::std::vector<edm::Ptr<reco::PFCandidate> > getPFConstituents() const throw();
  virtual ::reco::PFCandidatePtr getPFConstituent(unsigned int) const throw();
  virtual bool overlap(reco::Candidate const&) const throw();
  ::reco::PFJet::Specific m_specific;
};
#ifdef __edm__Ref_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_
#undef __edm__Ref_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_
#endif
class __edm__Ref_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_ {
  public:
  __edm__Ref_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_();
  ::edm::RefCoreWithIndex product_;
};
#ifdef __std__vector_edm__Ref_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s_
#undef __std__vector_edm__Ref_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s_
#endif
class __std__vector_edm__Ref_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s_ : protected ::std::_Vector_base<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,std::allocator<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > > {
  public:
  __std__vector_edm__Ref_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s_();
};
#ifdef __std__vector_reco__PFJet_
#undef __std__vector_reco__PFJet_
#endif
class __std__vector_reco__PFJet_ : protected ::std::_Vector_base<reco::PFJet,std::allocator<reco::PFJet> > {
  public:
  __std__vector_reco__PFJet_();
};
#ifdef __reco__BasicJet
#undef __reco__BasicJet
#endif
class __reco__BasicJet : public ::reco::Jet {
  public:
  __reco__BasicJet();
  virtual ~__reco__BasicJet() throw();
  virtual ::std::string print() const throw();
  virtual ::reco::BasicJet* clone() const throw();
  virtual bool overlap(reco::Candidate const&) const throw();
};
#ifdef __std__vector_reco__BasicJet_
#undef __std__vector_reco__BasicJet_
#endif
class __std__vector_reco__BasicJet_ : protected ::std::_Vector_base<reco::BasicJet,std::allocator<reco::BasicJet> > {
  public:
  __std__vector_reco__BasicJet_();
};
#ifdef __reco__GenJet
#undef __reco__GenJet
#endif
class __reco__GenJet : public ::reco::Jet {
  public:
  __reco__GenJet();
  virtual ~__reco__GenJet() throw();
  virtual ::std::string print() const throw();
  virtual ::reco::GenJet* clone() const throw();
  virtual bool overlap(reco::Candidate const&) const throw();
  virtual ::std::vector<const reco::GenParticle*> getGenConstituents() const throw();
  virtual const ::reco::GenParticle* getGenConstituent(unsigned int) const throw();
  ::reco::GenJet::Specific m_specific;
};
#ifdef __std__vector_reco__GenJet_
#undef __std__vector_reco__GenJet_
#endif
class __std__vector_reco__GenJet_ : protected ::std::_Vector_base<reco::GenJet,std::allocator<reco::GenJet> > {
  public:
  __std__vector_reco__GenJet_();
};
#ifdef __reco__CaloJet
#undef __reco__CaloJet
#endif
class __reco__CaloJet : public ::reco::Jet {
  public:
  __reco__CaloJet();
  virtual ~__reco__CaloJet() throw();
  virtual ::std::string print() const throw();
  virtual ::std::vector<edm::Ptr<CaloTower> > getCaloConstituents() const throw();
  virtual ::reco::CaloJet* clone() const throw();
  virtual ::CaloTowerPtr getCaloConstituent(unsigned int) const throw();
  virtual bool overlap(reco::Candidate const&) const throw();
  ::reco::CaloJet::Specific m_specific;
};
#ifdef __edm__Ref_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_
#undef __edm__Ref_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_
#endif
class __edm__Ref_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_ {
  public:
  __edm__Ref_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_();
  ::edm::RefCoreWithIndex product_;
};
#ifdef __std__vector_edm__Ref_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s_
#undef __std__vector_edm__Ref_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s_
#endif
class __std__vector_edm__Ref_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s_ : protected ::std::_Vector_base<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >,std::allocator<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > > {
  public:
  __std__vector_edm__Ref_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s_();
};
#ifdef __std__vector_reco__CaloJet_
#undef __std__vector_reco__CaloJet_
#endif
class __std__vector_reco__CaloJet_ : protected ::std::_Vector_base<reco::CaloJet,std::allocator<reco::CaloJet> > {
  public:
  __std__vector_reco__CaloJet_();
};
#ifdef __edm__FwdPtr_reco__PFJet_
#undef __edm__FwdPtr_reco__PFJet_
#endif
class __edm__FwdPtr_reco__PFJet_ {
  public:
  __edm__FwdPtr_reco__PFJet_();
  ::edm::Ptr<reco::PFJet> ptr_;
  ::edm::Ptr<reco::PFJet> backPtr_;
};
#ifdef __edm__FwdPtr_reco__BasicJet_
#undef __edm__FwdPtr_reco__BasicJet_
#endif
class __edm__FwdPtr_reco__BasicJet_ {
  public:
  __edm__FwdPtr_reco__BasicJet_();
  ::edm::Ptr<reco::BasicJet> ptr_;
  ::edm::Ptr<reco::BasicJet> backPtr_;
};
#ifdef __edm__FwdPtr_reco__GenJet_
#undef __edm__FwdPtr_reco__GenJet_
#endif
class __edm__FwdPtr_reco__GenJet_ {
  public:
  __edm__FwdPtr_reco__GenJet_();
  ::edm::Ptr<reco::GenJet> ptr_;
  ::edm::Ptr<reco::GenJet> backPtr_;
};
#ifdef __edm__FwdPtr_reco__CaloJet_
#undef __edm__FwdPtr_reco__CaloJet_
#endif
class __edm__FwdPtr_reco__CaloJet_ {
  public:
  __edm__FwdPtr_reco__CaloJet_();
  ::edm::Ptr<reco::CaloJet> ptr_;
  ::edm::Ptr<reco::CaloJet> backPtr_;
};
#ifdef __edm__RefVector_std__vector_reco__JPTJet__reco__JPTJet_edm__refhelper__FindUsingAdvance_std__vector_reco__JPTJet__reco__JPTJet_s_
#undef __edm__RefVector_std__vector_reco__JPTJet__reco__JPTJet_edm__refhelper__FindUsingAdvance_std__vector_reco__JPTJet__reco__JPTJet_s_
#endif
class __edm__RefVector_std__vector_reco__JPTJet__reco__JPTJet_edm__refhelper__FindUsingAdvance_std__vector_reco__JPTJet__reco__JPTJet_s_ {
  public:
  __edm__RefVector_std__vector_reco__JPTJet__reco__JPTJet_edm__refhelper__FindUsingAdvance_std__vector_reco__JPTJet__reco__JPTJet_s_();
  ::edm::RefVectorBase<unsigned int> refVector_;
};
#ifdef __edm__RefVector_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_
#undef __edm__RefVector_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_
#endif
class __edm__RefVector_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_ {
  public:
  __edm__RefVector_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_();
  ::edm::RefVectorBase<unsigned int> refVector_;
};
#ifdef __edm__RefVector_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s_
#undef __edm__RefVector_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s_
#endif
class __edm__RefVector_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s_ {
  public:
  __edm__RefVector_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s_();
  ::edm::RefVectorBase<unsigned int> refVector_;
};
#ifdef __edm__RefVector_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s_
#undef __edm__RefVector_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s_
#endif
class __edm__RefVector_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s_ {
  public:
  __edm__RefVector_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s_();
  ::edm::RefVectorBase<unsigned int> refVector_;
};
#ifdef __edm__RefVector_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_
#undef __edm__RefVector_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_
#endif
class __edm__RefVector_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_ {
  public:
  __edm__RefVector_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_();
  ::edm::RefVectorBase<unsigned int> refVector_;
};
#ifdef __edm__Wrapper_std__vector_reco__JPTJet_s_
#undef __edm__Wrapper_std__vector_reco__JPTJet_s_
#endif
class __edm__Wrapper_std__vector_reco__JPTJet_s_ {
  public:
  __edm__Wrapper_std__vector_reco__JPTJet_s_();
  bool present;
  ::std::vector<reco::JPTJet> obj;
};
#ifdef __edm__Wrapper_std__vector_reco__PFJet_s_
#undef __edm__Wrapper_std__vector_reco__PFJet_s_
#endif
class __edm__Wrapper_std__vector_reco__PFJet_s_ {
  public:
  __edm__Wrapper_std__vector_reco__PFJet_s_();
  bool present;
  ::std::vector<reco::PFJet> obj;
};
#ifdef __edm__Wrapper_std__vector_reco__BasicJet_s_
#undef __edm__Wrapper_std__vector_reco__BasicJet_s_
#endif
class __edm__Wrapper_std__vector_reco__BasicJet_s_ {
  public:
  __edm__Wrapper_std__vector_reco__BasicJet_s_();
  bool present;
  ::std::vector<reco::BasicJet> obj;
};
#ifdef __edm__Wrapper_std__vector_reco__GenJet_s_
#undef __edm__Wrapper_std__vector_reco__GenJet_s_
#endif
class __edm__Wrapper_std__vector_reco__GenJet_s_ {
  public:
  __edm__Wrapper_std__vector_reco__GenJet_s_();
  bool present;
  ::std::vector<reco::GenJet> obj;
};
#ifdef __edm__Wrapper_std__vector_reco__CaloJet_s_
#undef __edm__Wrapper_std__vector_reco__CaloJet_s_
#endif
class __edm__Wrapper_std__vector_reco__CaloJet_s_ {
  public:
  __edm__Wrapper_std__vector_reco__CaloJet_s_();
  bool present;
  ::std::vector<reco::CaloJet> obj;
};
#ifdef __edm__FwdRef_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_
#undef __edm__FwdRef_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_
#endif
class __edm__FwdRef_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_ {
  public:
  __edm__FwdRef_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_();
  ::edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > ref_;
  ::edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > backRef_;
};
#ifdef __edm__FwdRef_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s_
#undef __edm__FwdRef_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s_
#endif
class __edm__FwdRef_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s_ {
  public:
  __edm__FwdRef_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s_();
  ::edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > ref_;
  ::edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > backRef_;
};
#ifdef __edm__FwdRef_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s_
#undef __edm__FwdRef_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s_
#endif
class __edm__FwdRef_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s_ {
  public:
  __edm__FwdRef_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s_();
  ::edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > ref_;
  ::edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > backRef_;
};
#ifdef __edm__FwdRef_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_
#undef __edm__FwdRef_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_
#endif
class __edm__FwdRef_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_ {
  public:
  __edm__FwdRef_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_();
  ::edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > ref_;
  ::edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > backRef_;
};
#ifdef __edm__RefProd_std__vector_reco__JPTJet_s_
#undef __edm__RefProd_std__vector_reco__JPTJet_s_
#endif
class __edm__RefProd_std__vector_reco__JPTJet_s_ {
  public:
  __edm__RefProd_std__vector_reco__JPTJet_s_();
  ::edm::RefCore product_;
};
#ifdef __edm__RefProd_std__vector_reco__PFJet_s_
#undef __edm__RefProd_std__vector_reco__PFJet_s_
#endif
class __edm__RefProd_std__vector_reco__PFJet_s_ {
  public:
  __edm__RefProd_std__vector_reco__PFJet_s_();
  ::edm::RefCore product_;
};
#ifdef __edm__RefProd_std__vector_reco__BasicJet_s_
#undef __edm__RefProd_std__vector_reco__BasicJet_s_
#endif
class __edm__RefProd_std__vector_reco__BasicJet_s_ {
  public:
  __edm__RefProd_std__vector_reco__BasicJet_s_();
  ::edm::RefCore product_;
};
#ifdef __edm__RefProd_std__vector_reco__GenJet_s_
#undef __edm__RefProd_std__vector_reco__GenJet_s_
#endif
class __edm__RefProd_std__vector_reco__GenJet_s_ {
  public:
  __edm__RefProd_std__vector_reco__GenJet_s_();
  ::edm::RefCore product_;
};
#ifdef __edm__RefProd_std__vector_reco__CaloJet_s_
#undef __edm__RefProd_std__vector_reco__CaloJet_s_
#endif
class __edm__RefProd_std__vector_reco__CaloJet_s_ {
  public:
  __edm__RefProd_std__vector_reco__CaloJet_s_();
  ::edm::RefCore product_;
};
#ifdef __edm__Ref_std__vector_reco__JPTJet__reco__JPTJet_edm__refhelper__FindUsingAdvance_std__vector_reco__JPTJet__reco__JPTJet_s_
#undef __edm__Ref_std__vector_reco__JPTJet__reco__JPTJet_edm__refhelper__FindUsingAdvance_std__vector_reco__JPTJet__reco__JPTJet_s_
#endif
class __edm__Ref_std__vector_reco__JPTJet__reco__JPTJet_edm__refhelper__FindUsingAdvance_std__vector_reco__JPTJet__reco__JPTJet_s_ {
  public:
  __edm__Ref_std__vector_reco__JPTJet__reco__JPTJet_edm__refhelper__FindUsingAdvance_std__vector_reco__JPTJet__reco__JPTJet_s_();
  ::edm::RefCoreWithIndex product_;
};
#ifdef __edm__Ref_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s_
#undef __edm__Ref_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s_
#endif
class __edm__Ref_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s_ {
  public:
  __edm__Ref_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s_();
  ::edm::RefCoreWithIndex product_;
};
#ifdef __edm__Ref_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s_
#undef __edm__Ref_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s_
#endif
class __edm__Ref_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s_ {
  public:
  __edm__Ref_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s_();
  ::edm::RefCoreWithIndex product_;
};
#ifdef __reco__Jet
#undef __reco__Jet
#endif
class __reco__Jet : public ::reco::CompositePtrCandidate {
  public:
  __reco__Jet();
  virtual ~__reco__Jet() throw();
  virtual bool isJet() const throw();
  virtual float pileup() const throw();
  virtual float jetArea() const throw();
  virtual void setNPasses(int) throw();
  virtual void setJetArea(float) throw();
  virtual int nConstituents() const throw();
  virtual ::std::string print() const throw();
  virtual void scaleEnergy(double) throw();
  virtual void setPileup(float) throw();
  virtual int nPasses() const throw();
  virtual ::std::vector<edm::Ptr<reco::Candidate> > getJetConstituents() const throw();
  virtual ::std::vector<const reco::Candidate*> getJetConstituentsQuick() const throw();
  float mJetArea;
  float mPileupEnergy;
  int mPassNumber;
};
#ifdef __reco__JetTrackMatch_std__vector_reco__JPTJet_s_
#undef __reco__JetTrackMatch_std__vector_reco__JPTJet_s_
#endif
class __reco__JetTrackMatch_std__vector_reco__JPTJet_s_ {
  public:
  __reco__JetTrackMatch_std__vector_reco__JPTJet_s_();
  ::edm::AssociationMap<edm::OneToMany<std::vector<reco::JPTJet>,std::vector<reco::Track>,unsigned int> > mMap;
};
#ifdef __reco__JetTrackMatch_std__vector_reco__PFJet_s_
#undef __reco__JetTrackMatch_std__vector_reco__PFJet_s_
#endif
class __reco__JetTrackMatch_std__vector_reco__PFJet_s_ {
  public:
  __reco__JetTrackMatch_std__vector_reco__PFJet_s_();
  ::edm::AssociationMap<edm::OneToMany<std::vector<reco::PFJet>,std::vector<reco::Track>,unsigned int> > mMap;
};
#ifdef __reco__JetTrackMatch_std__vector_reco__BasicJet_s_
#undef __reco__JetTrackMatch_std__vector_reco__BasicJet_s_
#endif
class __reco__JetTrackMatch_std__vector_reco__BasicJet_s_ {
  public:
  __reco__JetTrackMatch_std__vector_reco__BasicJet_s_();
  ::edm::AssociationMap<edm::OneToMany<std::vector<reco::BasicJet>,std::vector<reco::Track>,unsigned int> > mMap;
};
#ifdef __reco__JetTrackMatch_std__vector_reco__GenJet_s_
#undef __reco__JetTrackMatch_std__vector_reco__GenJet_s_
#endif
class __reco__JetTrackMatch_std__vector_reco__GenJet_s_ {
  public:
  __reco__JetTrackMatch_std__vector_reco__GenJet_s_();
  ::edm::AssociationMap<edm::OneToMany<std::vector<reco::GenJet>,std::vector<reco::Track>,unsigned int> > mMap;
};
#ifdef __reco__JetTrackMatch_std__vector_reco__CaloJet_s_
#undef __reco__JetTrackMatch_std__vector_reco__CaloJet_s_
#endif
class __reco__JetTrackMatch_std__vector_reco__CaloJet_s_ {
  public:
  __reco__JetTrackMatch_std__vector_reco__CaloJet_s_();
  ::edm::AssociationMap<edm::OneToMany<std::vector<reco::CaloJet>,std::vector<reco::Track>,unsigned int> > mMap;
};
#ifdef __edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__JPTJet__reco__JPTJet_edm__refhelper__FindUsingAdvance_std__vector_reco__JPTJet__reco__JPTJet_s_s_
#undef __edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__JPTJet__reco__JPTJet_edm__refhelper__FindUsingAdvance_std__vector_reco__JPTJet__reco__JPTJet_s_s_
#endif
class __edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__JPTJet__reco__JPTJet_edm__refhelper__FindUsingAdvance_std__vector_reco__JPTJet__reco__JPTJet_s_s_ : public ::edm::reftobase::BaseHolder<reco::Candidate> {
  public:
  __edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__JPTJet__reco__JPTJet_edm__refhelper__FindUsingAdvance_std__vector_reco__JPTJet__reco__JPTJet_s_s_();
  virtual ~__edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__JPTJet__reco__JPTJet_edm__refhelper__FindUsingAdvance_std__vector_reco__JPTJet__reco__JPTJet_s_s_() throw();
  ::edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > ref_;
};
#ifdef __edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s_
#undef __edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s_
#endif
class __edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s_ : public ::edm::reftobase::BaseHolder<reco::Candidate> {
  public:
  __edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s_();
  virtual ~__edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s_() throw();
  ::edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > ref_;
};
#ifdef __edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s_s_
#undef __edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s_s_
#endif
class __edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s_s_ : public ::edm::reftobase::BaseHolder<reco::Candidate> {
  public:
  __edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s_s_();
  virtual ~__edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s_s_() throw();
  ::edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > ref_;
};
#ifdef __edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s_s_
#undef __edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s_s_
#endif
class __edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s_s_ : public ::edm::reftobase::BaseHolder<reco::Candidate> {
  public:
  __edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s_s_();
  virtual ~__edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s_s_() throw();
  ::edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > ref_;
};
#ifdef __edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s_
#undef __edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s_
#endif
class __edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s_ : public ::edm::reftobase::BaseHolder<reco::Candidate> {
  public:
  __edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s_();
  virtual ~__edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s_() throw();
  ::edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > ref_;
};
#ifdef __reco__PFJet__Specific
#undef __reco__PFJet__Specific
#endif
struct __reco__PFJet__Specific {
  public:
  __reco__PFJet__Specific();
  float mChargedHadronEnergy;
  float mNeutralHadronEnergy;
  float mPhotonEnergy;
  float mElectronEnergy;
  float mMuonEnergy;
  float mHFHadronEnergy;
  float mHFEMEnergy;
  int mChargedHadronMultiplicity;
  int mNeutralHadronMultiplicity;
  int mPhotonMultiplicity;
  int mElectronMultiplicity;
  int mMuonMultiplicity;
  int mHFHadronMultiplicity;
  int mHFEMMultiplicity;
  float mChargedEmEnergy;
  float mChargedMuEnergy;
  float mNeutralEmEnergy;
  int mChargedMultiplicity;
  int mNeutralMultiplicity;
};
#ifdef __reco__CaloJet__Specific
#undef __reco__CaloJet__Specific
#endif
struct __reco__CaloJet__Specific {
  public:
  __reco__CaloJet__Specific();
  float mMaxEInEmTowers;
  float mMaxEInHadTowers;
  float mHadEnergyInHO;
  float mHadEnergyInHB;
  float mHadEnergyInHF;
  float mHadEnergyInHE;
  float mEmEnergyInEB;
  float mEmEnergyInEE;
  float mEmEnergyInHF;
  float mEnergyFractionHadronic;
  float mEnergyFractionEm;
  float mTowersArea;
};
#ifdef __reco__Jet__EtaPhiMoments
#undef __reco__Jet__EtaPhiMoments
#endif
class __reco__Jet__EtaPhiMoments {
  public:
  __reco__Jet__EtaPhiMoments();
  float etaMean;
  float phiMean;
  float etaEtaMoment;
  float phiPhiMoment;
  float etaPhiMoment;
};
#ifdef __reco__GenJet__Specific
#undef __reco__GenJet__Specific
#endif
struct __reco__GenJet__Specific {
  public:
  __reco__GenJet__Specific();
  float m_NeEmEnergy;
  float m_EmEnergy;
  float m_ChHadEnergy;
  float m_HadEnergy;
  float m_MuEnergy;
  float m_InvisibleEnergy;
  float m_AuxiliaryEnergy;
};
#ifdef __reco__JPTJet__Specific
#undef __reco__JPTJet__Specific
#endif
struct __reco__JPTJet__Specific {
  public:
  __reco__JPTJet__Specific();
  float mZSPCor;
  ::edm::RefToBase<reco::Jet> theCaloJetRef;
  ::reco::TrackRefVector pionsInVertexInCalo;
  ::reco::TrackRefVector pionsInVertexOutCalo;
  ::reco::TrackRefVector pionsOutVertexInCalo;
  ::reco::TrackRefVector muonsInVertexInCalo;
  ::reco::TrackRefVector muonsInVertexOutCalo;
  ::reco::TrackRefVector muonsOutVertexInCalo;
  ::reco::TrackRefVector elecsInVertexInCalo;
  ::reco::TrackRefVector elecsInVertexOutCalo;
  ::reco::TrackRefVector elecsOutVertexInCalo;
  float mChargedHadronEnergy;
  float mNeutralHadronEnergy;
  float mChargedEmEnergy;
  float mNeutralEmEnergy;
  float mResponseOfChargedWithEff;
  float mResponseOfChargedWithoutEff;
  float mSumPtOfChargedWithEff;
  float mSumPtOfChargedWithoutEff;
  float mSumEnergyOfChargedWithEff;
  float mSumEnergyOfChargedWithoutEff;
  float R2momtr;
  float Eta2momtr;
  float Phi2momtr;
  float Pout;
  float Zch;
};
#ifdef __std__vector_edm__FwdPtr_reco__BasicJet_s_
#undef __std__vector_edm__FwdPtr_reco__BasicJet_s_
#endif
class __std__vector_edm__FwdPtr_reco__BasicJet_s_ : protected ::std::_Vector_base<edm::FwdPtr<reco::BasicJet>,std::allocator<edm::FwdPtr<reco::BasicJet> > > {
  public:
  __std__vector_edm__FwdPtr_reco__BasicJet_s_();
};
#ifdef __std__vector_edm__FwdRef_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s_s_
#undef __std__vector_edm__FwdRef_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s_s_
#endif
class __std__vector_edm__FwdRef_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s_s_ : protected ::std::_Vector_base<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >,std::allocator<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > > > {
  public:
  __std__vector_edm__FwdRef_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s_s_();
};
#ifdef __std__vector_edm__FwdPtr_reco__GenJet_s_
#undef __std__vector_edm__FwdPtr_reco__GenJet_s_
#endif
class __std__vector_edm__FwdPtr_reco__GenJet_s_ : protected ::std::_Vector_base<edm::FwdPtr<reco::GenJet>,std::allocator<edm::FwdPtr<reco::GenJet> > > {
  public:
  __std__vector_edm__FwdPtr_reco__GenJet_s_();
};
#ifdef __std__vector_edm__FwdRef_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s_s_
#undef __std__vector_edm__FwdRef_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s_s_
#endif
class __std__vector_edm__FwdRef_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s_s_ : protected ::std::_Vector_base<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >,std::allocator<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > > > {
  public:
  __std__vector_edm__FwdRef_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s_s_();
};
#ifdef __std__vector_edm__FwdPtr_reco__PFJet_s_
#undef __std__vector_edm__FwdPtr_reco__PFJet_s_
#endif
class __std__vector_edm__FwdPtr_reco__PFJet_s_ : protected ::std::_Vector_base<edm::FwdPtr<reco::PFJet>,std::allocator<edm::FwdPtr<reco::PFJet> > > {
  public:
  __std__vector_edm__FwdPtr_reco__PFJet_s_();
};
#ifdef __std__vector_edm__FwdPtr_reco__CaloJet_s_
#undef __std__vector_edm__FwdPtr_reco__CaloJet_s_
#endif
class __std__vector_edm__FwdPtr_reco__CaloJet_s_ : protected ::std::_Vector_base<edm::FwdPtr<reco::CaloJet>,std::allocator<edm::FwdPtr<reco::CaloJet> > > {
  public:
  __std__vector_edm__FwdPtr_reco__CaloJet_s_();
};
#ifdef __std__vector_edm__FwdRef_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s_
#undef __std__vector_edm__FwdRef_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s_
#endif
class __std__vector_edm__FwdRef_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s_ : protected ::std::_Vector_base<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,std::allocator<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > > {
  public:
  __std__vector_edm__FwdRef_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s_();
};
#ifdef __std__vector_edm__FwdRef_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s_
#undef __std__vector_edm__FwdRef_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s_
#endif
class __std__vector_edm__FwdRef_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s_ : protected ::std::_Vector_base<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >,std::allocator<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > > {
  public:
  __std__vector_edm__FwdRef_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s_();
};
#ifdef __std__vector_edm__RefVector_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s_
#undef __std__vector_edm__RefVector_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s_
#endif
class __std__vector_edm__RefVector_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s_ : protected ::std::_Vector_base<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,std::allocator<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > > {
  public:
  __std__vector_edm__RefVector_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s_();
};
#ifdef __std__vector_edm__RefVector_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s_
#undef __std__vector_edm__RefVector_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s_
#endif
class __std__vector_edm__RefVector_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s_ : protected ::std::_Vector_base<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >,std::allocator<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > > {
  public:
  __std__vector_edm__RefVector_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s_();
};
#ifdef __edm__Wrapper_edm__RefVector_std__vector_reco__JPTJet__reco__JPTJet_edm__refhelper__FindUsingAdvance_std__vector_reco__JPTJet__reco__JPTJet_s_s_
#undef __edm__Wrapper_edm__RefVector_std__vector_reco__JPTJet__reco__JPTJet_edm__refhelper__FindUsingAdvance_std__vector_reco__JPTJet__reco__JPTJet_s_s_
#endif
class __edm__Wrapper_edm__RefVector_std__vector_reco__JPTJet__reco__JPTJet_edm__refhelper__FindUsingAdvance_std__vector_reco__JPTJet__reco__JPTJet_s_s_ {
  public:
  __edm__Wrapper_edm__RefVector_std__vector_reco__JPTJet__reco__JPTJet_edm__refhelper__FindUsingAdvance_std__vector_reco__JPTJet__reco__JPTJet_s_s_();
  bool present;
  ::edm::RefVector<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > obj;
};
#ifdef __edm__Wrapper_std__vector_edm__RefVector_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s_s_
#undef __edm__Wrapper_std__vector_edm__RefVector_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s_s_
#endif
class __edm__Wrapper_std__vector_edm__RefVector_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s_s_ {
  public:
  __edm__Wrapper_std__vector_edm__RefVector_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s_s_();
  bool present;
  ::std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > obj;
};
#ifdef __edm__Wrapper_std__vector_edm__FwdPtr_reco__PFJet_s_s_
#undef __edm__Wrapper_std__vector_edm__FwdPtr_reco__PFJet_s_s_
#endif
class __edm__Wrapper_std__vector_edm__FwdPtr_reco__PFJet_s_s_ {
  public:
  __edm__Wrapper_std__vector_edm__FwdPtr_reco__PFJet_s_s_();
  bool present;
  ::std::vector<edm::FwdPtr<reco::PFJet> > obj;
};
#ifdef __edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s_s_
#undef __edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s_s_
#endif
class __edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s_s_ {
  public:
  __edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s_s_();
  bool present;
  ::std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > obj;
};
#ifdef __edm__Wrapper_edm__RefVector_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s_
#undef __edm__Wrapper_edm__RefVector_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s_
#endif
class __edm__Wrapper_edm__RefVector_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s_ {
  public:
  __edm__Wrapper_edm__RefVector_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s_();
  bool present;
  ::edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > obj;
};
#ifdef __edm__Wrapper_std__vector_edm__FwdPtr_reco__BasicJet_s_s_
#undef __edm__Wrapper_std__vector_edm__FwdPtr_reco__BasicJet_s_s_
#endif
class __edm__Wrapper_std__vector_edm__FwdPtr_reco__BasicJet_s_s_ {
  public:
  __edm__Wrapper_std__vector_edm__FwdPtr_reco__BasicJet_s_s_();
  bool present;
  ::std::vector<edm::FwdPtr<reco::BasicJet> > obj;
};
#ifdef __edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s_s_s_
#undef __edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s_s_s_
#endif
class __edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s_s_s_ {
  public:
  __edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s_s_s_();
  bool present;
  ::std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > > obj;
};
#ifdef __edm__Wrapper_edm__RefVector_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s_s_
#undef __edm__Wrapper_edm__RefVector_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s_s_
#endif
class __edm__Wrapper_edm__RefVector_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s_s_ {
  public:
  __edm__Wrapper_edm__RefVector_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s_s_();
  bool present;
  ::edm::RefVector<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > obj;
};
#ifdef __edm__Wrapper_std__vector_edm__FwdPtr_reco__GenJet_s_s_
#undef __edm__Wrapper_std__vector_edm__FwdPtr_reco__GenJet_s_s_
#endif
class __edm__Wrapper_std__vector_edm__FwdPtr_reco__GenJet_s_s_ {
  public:
  __edm__Wrapper_std__vector_edm__FwdPtr_reco__GenJet_s_s_();
  bool present;
  ::std::vector<edm::FwdPtr<reco::GenJet> > obj;
};
#ifdef __edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s_s_s_
#undef __edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s_s_s_
#endif
class __edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s_s_s_ {
  public:
  __edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s_s_s_();
  bool present;
  ::std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > > obj;
};
#ifdef __edm__Wrapper_edm__RefVector_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s_s_
#undef __edm__Wrapper_edm__RefVector_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s_s_
#endif
class __edm__Wrapper_edm__RefVector_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s_s_ {
  public:
  __edm__Wrapper_edm__RefVector_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s_s_();
  bool present;
  ::edm::RefVector<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > obj;
};
#ifdef __edm__Wrapper_std__vector_edm__RefVector_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s_s_
#undef __edm__Wrapper_std__vector_edm__RefVector_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s_s_
#endif
class __edm__Wrapper_std__vector_edm__RefVector_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s_s_ {
  public:
  __edm__Wrapper_std__vector_edm__RefVector_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s_s_();
  bool present;
  ::std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > obj;
};
#ifdef __edm__Wrapper_std__vector_edm__FwdPtr_reco__CaloJet_s_s_
#undef __edm__Wrapper_std__vector_edm__FwdPtr_reco__CaloJet_s_s_
#endif
class __edm__Wrapper_std__vector_edm__FwdPtr_reco__CaloJet_s_s_ {
  public:
  __edm__Wrapper_std__vector_edm__FwdPtr_reco__CaloJet_s_s_();
  bool present;
  ::std::vector<edm::FwdPtr<reco::CaloJet> > obj;
};
#ifdef __edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s_s_
#undef __edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s_s_
#endif
class __edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s_s_ {
  public:
  __edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s_s_();
  bool present;
  ::std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > obj;
};
#ifdef __edm__Wrapper_edm__RefVector_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s_
#undef __edm__Wrapper_edm__RefVector_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s_
#endif
class __edm__Wrapper_edm__RefVector_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s_ {
  public:
  __edm__Wrapper_edm__RefVector_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s_();
  bool present;
  ::edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > obj;
};
#ifdef __edm__AssociationMap_edm__OneToMany_std__vector_reco__JPTJet__std__vector_reco__Track__unsignedsint_s_
#undef __edm__AssociationMap_edm__OneToMany_std__vector_reco__JPTJet__std__vector_reco__Track__unsignedsint_s_
#endif
class __edm__AssociationMap_edm__OneToMany_std__vector_reco__JPTJet__std__vector_reco__Track__unsignedsint_s_ {
  public:
  __edm__AssociationMap_edm__OneToMany_std__vector_reco__JPTJet__std__vector_reco__Track__unsignedsint_s_();
  ::edm::helpers::KeyVal<edm::RefProd<std::vector<reco::JPTJet> >,edm::RefProd<std::vector<reco::Track> > > ref_;
  ::std::map<unsigned int,std::vector<unsigned int> > map_;
  ::std::map<unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > transientMap_;
};
#ifdef __edm__AssociationMap_edm__OneToMany_std__vector_reco__CaloJet__std__vector_reco__Track__unsignedsint_s_
#undef __edm__AssociationMap_edm__OneToMany_std__vector_reco__CaloJet__std__vector_reco__Track__unsignedsint_s_
#endif
class __edm__AssociationMap_edm__OneToMany_std__vector_reco__CaloJet__std__vector_reco__Track__unsignedsint_s_ {
  public:
  __edm__AssociationMap_edm__OneToMany_std__vector_reco__CaloJet__std__vector_reco__Track__unsignedsint_s_();
  ::edm::helpers::KeyVal<edm::RefProd<std::vector<reco::CaloJet> >,edm::RefProd<std::vector<reco::Track> > > ref_;
  ::std::map<unsigned int,std::vector<unsigned int> > map_;
  ::std::map<unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > transientMap_;
};
#ifdef __edm__helpers__KeyVal_edm__RefProd_std__vector_reco__JPTJet_s__edm__RefProd_std__vector_reco__Track_s_s_
#undef __edm__helpers__KeyVal_edm__RefProd_std__vector_reco__JPTJet_s__edm__RefProd_std__vector_reco__Track_s_s_
#endif
struct __edm__helpers__KeyVal_edm__RefProd_std__vector_reco__JPTJet_s__edm__RefProd_std__vector_reco__Track_s_s_ {
  public:
  __edm__helpers__KeyVal_edm__RefProd_std__vector_reco__JPTJet_s__edm__RefProd_std__vector_reco__Track_s_s_();
  ::edm::RefProd<std::vector<reco::JPTJet> > key;
  ::edm::RefProd<std::vector<reco::Track> > val;
};
#ifdef __edm__helpers__KeyVal_edm__RefProd_std__vector_reco__CaloJet_s__edm__RefProd_std__vector_reco__Track_s_s_
#undef __edm__helpers__KeyVal_edm__RefProd_std__vector_reco__CaloJet_s__edm__RefProd_std__vector_reco__Track_s_s_
#endif
struct __edm__helpers__KeyVal_edm__RefProd_std__vector_reco__CaloJet_s__edm__RefProd_std__vector_reco__Track_s_s_ {
  public:
  __edm__helpers__KeyVal_edm__RefProd_std__vector_reco__CaloJet_s__edm__RefProd_std__vector_reco__Track_s_s_();
  ::edm::RefProd<std::vector<reco::CaloJet> > key;
  ::edm::RefProd<std::vector<reco::Track> > val;
};
#ifdef __edm__reftobase__RefVectorHolder_edm__RefVector_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s_
#undef __edm__reftobase__RefVectorHolder_edm__RefVector_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s_
#endif
class __edm__reftobase__RefVectorHolder_edm__RefVector_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s_ : public ::edm::reftobase::RefVectorHolderBase {
  public:
  __edm__reftobase__RefVectorHolder_edm__RefVector_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s_();
  virtual ~__edm__reftobase__RefVectorHolder_edm__RefVector_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s_() throw();
  ::edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > refs_;
};
#ifdef __edm__reftobase__RefHolder_edm__Ref_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s_s_
#undef __edm__reftobase__RefHolder_edm__Ref_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s_s_
#endif
class __edm__reftobase__RefHolder_edm__Ref_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s_s_ : public ::edm::reftobase::RefHolderBase {
  public:
  __edm__reftobase__RefHolder_edm__Ref_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s_s_();
  virtual ~__edm__reftobase__RefHolder_edm__Ref_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s_s_() throw();
  ::edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > ref_;
};
#ifdef __edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s_s_
#undef __edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s_s_
#endif
class __edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s_s_ : public ::edm::reftobase::BaseHolder<reco::Jet> {
  public:
  __edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s_s_();
  virtual ~__edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s_s_() throw();
  ::edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > ref_;
};
#ifdef __edm__helpers__Key_edm__RefProd_std__vector_reco__CaloJet_s_s_
#undef __edm__helpers__Key_edm__RefProd_std__vector_reco__CaloJet_s_s_
#endif
struct __edm__helpers__Key_edm__RefProd_std__vector_reco__CaloJet_s_s_ {
  public:
  __edm__helpers__Key_edm__RefProd_std__vector_reco__CaloJet_s_s_();
  ::edm::RefProd<std::vector<reco::CaloJet> > key;
};
}


#endif // __CINT__
namespace {
//------Stub functions for class JPTJet -------------------------------
static  void operator_24787( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::reco::JPTJet*)o)->operator=)(*(const ::reco::JPTJet*)arg[0]);
  else   (((::reco::JPTJet*)o)->operator=)(*(const ::reco::JPTJet*)arg[0]);
}

static void constructor_24788( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::reco::JPTJet(*(const ::reco::JPTJet*)arg[0]);
  else ::new(mem) ::reco::JPTJet(*(const ::reco::JPTJet*)arg[0]);
}

static void constructor_24789( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::reco::JPTJet();
  else ::new(mem) ::reco::JPTJet();
}

static void constructor_24790( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::reco::JPTJet(*(const ::math::XYZTLorentzVector*)arg[0],
      *(const ::math::XYZPoint*)arg[1],
      *(const ::reco::JPTJet::Specific*)arg[2],
      *(const ::std::vector<edm::Ptr<reco::Candidate> >*)arg[3]);
  else ::new(mem) ::reco::JPTJet(*(const ::math::XYZTLorentzVector*)arg[0],
      *(const ::math::XYZPoint*)arg[1],
      *(const ::reco::JPTJet::Specific*)arg[2],
      *(const ::std::vector<edm::Ptr<reco::Candidate> >*)arg[3]);
}

static void constructor_24791( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::reco::JPTJet(*(const ::math::XYZTLorentzVector*)arg[0],
      *(const ::reco::JPTJet::Specific*)arg[1],
      *(const ::std::vector<edm::Ptr<reco::Candidate> >*)arg[2]);
  else ::new(mem) ::reco::JPTJet(*(const ::math::XYZTLorentzVector*)arg[0],
      *(const ::reco::JPTJet::Specific*)arg[1],
      *(const ::std::vector<edm::Ptr<reco::Candidate> >*)arg[2]);
}

static void destructor_24792(void*, void * o, const std::vector<void*>&, void *) {
(((::reco::JPTJet*)o)->::reco::JPTJet::~JPTJet)();
}
static  void method_24793( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (float)((((const ::reco::JPTJet*)o)->chargedHadronEnergy)());
  else   (((const ::reco::JPTJet*)o)->chargedHadronEnergy)();
}

static  void method_24794( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (float)((((const ::reco::JPTJet*)o)->chargedHadronEnergyFraction)());
  else   (((const ::reco::JPTJet*)o)->chargedHadronEnergyFraction)();
}

static  void method_24795( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (float)((((const ::reco::JPTJet*)o)->neutralHadronEnergy)());
  else   (((const ::reco::JPTJet*)o)->neutralHadronEnergy)();
}

static  void method_24796( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (float)((((const ::reco::JPTJet*)o)->neutralHadronEnergyFraction)());
  else   (((const ::reco::JPTJet*)o)->neutralHadronEnergyFraction)();
}

static  void method_24797( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (float)((((const ::reco::JPTJet*)o)->chargedEmEnergy)());
  else   (((const ::reco::JPTJet*)o)->chargedEmEnergy)();
}

static  void method_24798( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (float)((((const ::reco::JPTJet*)o)->chargedEmEnergyFraction)());
  else   (((const ::reco::JPTJet*)o)->chargedEmEnergyFraction)();
}

static  void method_24799( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (float)((((const ::reco::JPTJet*)o)->neutralEmEnergy)());
  else   (((const ::reco::JPTJet*)o)->neutralEmEnergy)();
}

static  void method_24800( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (float)((((const ::reco::JPTJet*)o)->neutralEmEnergyFraction)());
  else   (((const ::reco::JPTJet*)o)->neutralEmEnergyFraction)();
}

static  void method_24801( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (int)((((const ::reco::JPTJet*)o)->chargedMultiplicity)());
  else   (((const ::reco::JPTJet*)o)->chargedMultiplicity)();
}

static  void method_24802( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (int)((((const ::reco::JPTJet*)o)->muonMultiplicity)());
  else   (((const ::reco::JPTJet*)o)->muonMultiplicity)();
}

static  void method_24803( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (int)((((const ::reco::JPTJet*)o)->elecMultiplicity)());
  else   (((const ::reco::JPTJet*)o)->elecMultiplicity)();
}

static  void method_24804( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::reco::JPTJet*)o)->getPionsInVertexInCalo)();
  else   (((const ::reco::JPTJet*)o)->getPionsInVertexInCalo)();
}

static  void method_24805( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::reco::JPTJet*)o)->getPionsInVertexOutCalo)();
  else   (((const ::reco::JPTJet*)o)->getPionsInVertexOutCalo)();
}

static  void method_24806( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::reco::JPTJet*)o)->getPionsOutVertexInCalo)();
  else   (((const ::reco::JPTJet*)o)->getPionsOutVertexInCalo)();
}

static  void method_24807( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::reco::JPTJet*)o)->getMuonsInVertexInCalo)();
  else   (((const ::reco::JPTJet*)o)->getMuonsInVertexInCalo)();
}

static  void method_24808( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::reco::JPTJet*)o)->getMuonsInVertexOutCalo)();
  else   (((const ::reco::JPTJet*)o)->getMuonsInVertexOutCalo)();
}

static  void method_24809( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::reco::JPTJet*)o)->getMuonsOutVertexInCalo)();
  else   (((const ::reco::JPTJet*)o)->getMuonsOutVertexInCalo)();
}

static  void method_24810( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::reco::JPTJet*)o)->getElecsInVertexInCalo)();
  else   (((const ::reco::JPTJet*)o)->getElecsInVertexInCalo)();
}

static  void method_24811( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::reco::JPTJet*)o)->getElecsInVertexOutCalo)();
  else   (((const ::reco::JPTJet*)o)->getElecsInVertexOutCalo)();
}

static  void method_24812( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::reco::JPTJet*)o)->getElecsOutVertexInCalo)();
  else   (((const ::reco::JPTJet*)o)->getElecsOutVertexInCalo)();
}

static  void method_24813( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::reco::JPTJet*)o)->getZSPCor)();
  else   (((const ::reco::JPTJet*)o)->getZSPCor)();
}

static  void method_24814( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::reco::JPTJet*)o)->getCaloJetRef)();
  else   (((const ::reco::JPTJet*)o)->getCaloJetRef)();
}

static  void method_24815( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::reco::JPTJet*)o)->getSpecific)();
  else   (((const ::reco::JPTJet*)o)->getSpecific)();
}

static  void method_24816( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::reco::JPTJet*)o)->clone)());
  else   (((const ::reco::JPTJet*)o)->clone)();
}

static  void method_24817( void*, void* o, const std::vector<void*>&, void*)
{
  (((const ::reco::JPTJet*)o)->printJet)();
}

static  void method_24818( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::string)((((const ::reco::JPTJet*)o)->print)());
  else   (((const ::reco::JPTJet*)o)->print)();
}

static void method_newdel_7528( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::reco::JPTJet >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::reco::JPTJet >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::reco::JPTJet >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::reco::JPTJet >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::reco::JPTJet >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

static void method_x1( void* retaddr, void*, const std::vector<void*>&, void*)
{
  typedef std::vector<std::pair< ::Reflex::Base, int> > Bases_t;
  static Bases_t s_bases;
  if ( !s_bases.size() ) {
    s_bases.push_back(std::make_pair(::Reflex::Base( ::Reflex::TypeBuilder(Reflex::Literal("reco::Jet")), ::Reflex::BaseOffset< ::reco::JPTJet,::reco::Jet >::Get(),::Reflex::PUBLIC), 0));
    s_bases.push_back(std::make_pair(::Reflex::Base( ::Reflex::TypeBuilder(Reflex::Literal("reco::CompositePtrCandidate")), ::Reflex::BaseOffset< ::reco::JPTJet,::reco::CompositePtrCandidate >::Get(),::Reflex::PUBLIC), 1));
    s_bases.push_back(std::make_pair(::Reflex::Base( ::Reflex::TypeBuilder(Reflex::Literal("reco::LeafCandidate")), ::Reflex::BaseOffset< ::reco::JPTJet,::reco::LeafCandidate >::Get(),::Reflex::PUBLIC), 2));
    s_bases.push_back(std::make_pair(::Reflex::Base( ::Reflex::TypeBuilder(Reflex::Literal("reco::Candidate")), ::Reflex::BaseOffset< ::reco::JPTJet,::reco::Candidate >::Get(),::Reflex::PUBLIC), 3));
  }
  if (retaddr) *(Bases_t**)retaddr = &s_bases;
}

//------Dictionary for class JPTJet -------------------------------
void __reco__JPTJet_db_datamem(Reflex::Class*);
void __reco__JPTJet_db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __reco__JPTJet_datamem_bld(&__reco__JPTJet_db_datamem);
Reflex::GenreflexMemberBuilder __reco__JPTJet_funcmem_bld(&__reco__JPTJet_db_funcmem);
void __reco__JPTJet_dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("reco::JPTJet"), typeid(::reco::JPTJet), sizeof(::reco::JPTJet), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::VIRTUAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("ClassVersion"), "10")
  .AddBase(type_7485, ::Reflex::BaseOffset< ::reco::JPTJet, ::reco::Jet >::Get(), ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_12760, type_12762), Reflex::Literal("operator="), operator_24787, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_12762), Reflex::Literal("JPTJet"), constructor_24788, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("JPTJet"), constructor_24789, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_23124, type_23126, type_34837, type_30674), Reflex::Literal("JPTJet"), constructor_24790, 0, "fP4;fVertex;fSpecific;fConstituents", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_23124, type_34837, type_30674), Reflex::Literal("JPTJet"), constructor_24791, 0, "fP4;fSpecific;fConstituents", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~JPTJet"), destructor_24792, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::DESTRUCTOR )
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_7528, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getBasesTable"), method_x1, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__reco__JPTJet_datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__reco__JPTJet_funcmem_bld);
}

//------Delayed data member builder for class JPTJet -------------------
void __reco__JPTJet_db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_24786, Reflex::Literal("mspecific"), OffsetOf(__shadow__::__reco__JPTJet, mspecific), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class JPTJet -------------------
void __reco__JPTJet_db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_878), Reflex::Literal("chargedHadronEnergy"), method_24793, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_878), Reflex::Literal("chargedHadronEnergyFraction"), method_24794, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_878), Reflex::Literal("neutralHadronEnergy"), method_24795, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_878), Reflex::Literal("neutralHadronEnergyFraction"), method_24796, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_878), Reflex::Literal("chargedEmEnergy"), method_24797, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_878), Reflex::Literal("chargedEmEnergyFraction"), method_24798, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_878), Reflex::Literal("neutralEmEnergy"), method_24799, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_878), Reflex::Literal("neutralEmEnergyFraction"), method_24800, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_64), Reflex::Literal("chargedMultiplicity"), method_24801, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_64), Reflex::Literal("muonMultiplicity"), method_24802, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_64), Reflex::Literal("elecMultiplicity"), method_24803, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_34838), Reflex::Literal("getPionsInVertexInCalo"), method_24804, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_34838), Reflex::Literal("getPionsInVertexOutCalo"), method_24805, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_34838), Reflex::Literal("getPionsOutVertexInCalo"), method_24806, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_34838), Reflex::Literal("getMuonsInVertexInCalo"), method_24807, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_34838), Reflex::Literal("getMuonsInVertexOutCalo"), method_24808, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_34838), Reflex::Literal("getMuonsOutVertexInCalo"), method_24809, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_34838), Reflex::Literal("getElecsInVertexInCalo"), method_24810, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_34838), Reflex::Literal("getElecsInVertexOutCalo"), method_24811, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_34838), Reflex::Literal("getElecsOutVertexInCalo"), method_24812, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_18620), Reflex::Literal("getZSPCor"), method_24813, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_33983), Reflex::Literal("getCaloJetRef"), method_24814, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_34837), Reflex::Literal("getSpecific"), method_24815, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_9177), Reflex::Literal("clone"), method_24816, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680), Reflex::Literal("printJet"), method_24817, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2504), Reflex::Literal("print"), method_24818, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST);
}
//------Stub functions for class vector<reco::JPTJet,std::allocator<reco::JPTJet> > -------------------------------
static void constructor_12771( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<reco::JPTJet>();
  else ::new(mem) ::std::vector<reco::JPTJet>();
}

static void constructor_12772( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<reco::JPTJet>(*(const ::std::allocator<reco::JPTJet>*)arg[0]);
  else ::new(mem) ::std::vector<reco::JPTJet>(*(const ::std::allocator<reco::JPTJet>*)arg[0]);
}

static void constructor_12773( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if ( arg.size() == 1 ) {
    if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<reco::JPTJet>(*(::std::size_t*)arg[0]);
  else ::new(mem) ::std::vector<reco::JPTJet>(*(::std::size_t*)arg[0]);
  }
  else if ( arg.size() == 2 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<reco::JPTJet>(*(::std::size_t*)arg[0],
      *(const ::reco::JPTJet*)arg[1]);
  else ::new(mem) ::std::vector<reco::JPTJet>(*(::std::size_t*)arg[0],
      *(const ::reco::JPTJet*)arg[1]);
  }
  else if ( arg.size() == 3 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<reco::JPTJet>(*(::std::size_t*)arg[0],
      *(const ::reco::JPTJet*)arg[1],
      *(const ::std::allocator<reco::JPTJet>*)arg[2]);
  else ::new(mem) ::std::vector<reco::JPTJet>(*(::std::size_t*)arg[0],
      *(const ::reco::JPTJet*)arg[1],
      *(const ::std::allocator<reco::JPTJet>*)arg[2]);
  }
}

static void constructor_12774( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<reco::JPTJet>(*(const ::std::vector<reco::JPTJet>*)arg[0]);
  else ::new(mem) ::std::vector<reco::JPTJet>(*(const ::std::vector<reco::JPTJet>*)arg[0]);
}

static void destructor_12775(void*, void * o, const std::vector<void*>&, void *) {
(((::std::vector<reco::JPTJet>*)o)->::std::vector<reco::JPTJet>::~vector)();
}
static  void operator_12776( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<reco::JPTJet>*)o)->operator=)(*(const ::std::vector<reco::JPTJet>*)arg[0]);
  else   (((::std::vector<reco::JPTJet>*)o)->operator=)(*(const ::std::vector<reco::JPTJet>*)arg[0]);
}

static  void method_12777( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<reco::JPTJet>*)o)->assign)(*(::std::size_t*)arg[0],
    *(const ::reco::JPTJet*)arg[1]);
}

static  void method_12778( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<reco::JPTJet*,std::vector<reco::JPTJet> >)((((::std::vector<reco::JPTJet>*)o)->begin)());
  else   (((::std::vector<reco::JPTJet>*)o)->begin)();
}

static  void method_12779( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<const reco::JPTJet*,std::vector<reco::JPTJet> >)((((const ::std::vector<reco::JPTJet>*)o)->begin)());
  else   (((const ::std::vector<reco::JPTJet>*)o)->begin)();
}

static  void method_12780( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<reco::JPTJet*,std::vector<reco::JPTJet> >)((((::std::vector<reco::JPTJet>*)o)->end)());
  else   (((::std::vector<reco::JPTJet>*)o)->end)();
}

static  void method_12781( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<const reco::JPTJet*,std::vector<reco::JPTJet> >)((((const ::std::vector<reco::JPTJet>*)o)->end)());
  else   (((const ::std::vector<reco::JPTJet>*)o)->end)();
}

static  void method_12786( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::std::vector<reco::JPTJet>*)o)->size)());
  else   (((const ::std::vector<reco::JPTJet>*)o)->size)();
}

static  void method_12787( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::std::vector<reco::JPTJet>*)o)->max_size)());
  else   (((const ::std::vector<reco::JPTJet>*)o)->max_size)();
}

static  void method_12788( void*, void* o, const std::vector<void*>& arg, void*)
{
  if ( arg.size() == 1 ) {
    (((::std::vector<reco::JPTJet>*)o)->resize)(*(::std::size_t*)arg[0]);
  }
  else if ( arg.size() == 2 ) { 
    (((::std::vector<reco::JPTJet>*)o)->resize)(*(::std::size_t*)arg[0],
      *(::reco::JPTJet*)arg[1]);
  }
}

static  void method_12789( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::std::vector<reco::JPTJet>*)o)->capacity)());
  else   (((const ::std::vector<reco::JPTJet>*)o)->capacity)();
}

static  void method_12790( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::std::vector<reco::JPTJet>*)o)->empty)());
  else   (((const ::std::vector<reco::JPTJet>*)o)->empty)();
}

static  void method_12791( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<reco::JPTJet>*)o)->reserve)(*(::std::size_t*)arg[0]);
}

static  void operator_12792( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<reco::JPTJet>*)o)->operator[])(*(::std::size_t*)arg[0]);
  else   (((::std::vector<reco::JPTJet>*)o)->operator[])(*(::std::size_t*)arg[0]);
}

static  void operator_12793( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<reco::JPTJet>*)o)->operator[])(*(::std::size_t*)arg[0]);
  else   (((const ::std::vector<reco::JPTJet>*)o)->operator[])(*(::std::size_t*)arg[0]);
}

static  void method_12795( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<reco::JPTJet>*)o)->at)(*(::std::size_t*)arg[0]);
  else   (((::std::vector<reco::JPTJet>*)o)->at)(*(::std::size_t*)arg[0]);
}

static  void method_12796( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<reco::JPTJet>*)o)->at)(*(::std::size_t*)arg[0]);
  else   (((const ::std::vector<reco::JPTJet>*)o)->at)(*(::std::size_t*)arg[0]);
}

static  void method_12797( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<reco::JPTJet>*)o)->front)();
  else   (((::std::vector<reco::JPTJet>*)o)->front)();
}

static  void method_12798( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<reco::JPTJet>*)o)->front)();
  else   (((const ::std::vector<reco::JPTJet>*)o)->front)();
}

static  void method_12799( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<reco::JPTJet>*)o)->back)();
  else   (((::std::vector<reco::JPTJet>*)o)->back)();
}

static  void method_12800( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<reco::JPTJet>*)o)->back)();
  else   (((const ::std::vector<reco::JPTJet>*)o)->back)();
}

static  void method_12801( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((::std::vector<reco::JPTJet>*)o)->data)());
  else   (((::std::vector<reco::JPTJet>*)o)->data)();
}

static  void method_12802( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::std::vector<reco::JPTJet>*)o)->data)());
  else   (((const ::std::vector<reco::JPTJet>*)o)->data)();
}

static  void method_12803( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<reco::JPTJet>*)o)->push_back)(*(const ::reco::JPTJet*)arg[0]);
}

static  void method_12804( void*, void* o, const std::vector<void*>&, void*)
{
  (((::std::vector<reco::JPTJet>*)o)->pop_back)();
}

static  void method_12805( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<reco::JPTJet*,std::vector<reco::JPTJet> >)((((::std::vector<reco::JPTJet>*)o)->insert)(*(::__gnu_cxx::__normal_iterator<reco::JPTJet*,std::vector<reco::JPTJet> >*)arg[0],
    *(const ::reco::JPTJet*)arg[1]));
  else   (((::std::vector<reco::JPTJet>*)o)->insert)(*(::__gnu_cxx::__normal_iterator<reco::JPTJet*,std::vector<reco::JPTJet> >*)arg[0],
    *(const ::reco::JPTJet*)arg[1]);
}

static  void method_12806( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<reco::JPTJet>*)o)->insert)(*(::__gnu_cxx::__normal_iterator<reco::JPTJet*,std::vector<reco::JPTJet> >*)arg[0],
    *(::std::size_t*)arg[1],
    *(const ::reco::JPTJet*)arg[2]);
}

static  void method_12807( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<reco::JPTJet*,std::vector<reco::JPTJet> >)((((::std::vector<reco::JPTJet>*)o)->erase)(*(::__gnu_cxx::__normal_iterator<reco::JPTJet*,std::vector<reco::JPTJet> >*)arg[0]));
  else   (((::std::vector<reco::JPTJet>*)o)->erase)(*(::__gnu_cxx::__normal_iterator<reco::JPTJet*,std::vector<reco::JPTJet> >*)arg[0]);
}

static  void method_12808( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<reco::JPTJet*,std::vector<reco::JPTJet> >)((((::std::vector<reco::JPTJet>*)o)->erase)(*(::__gnu_cxx::__normal_iterator<reco::JPTJet*,std::vector<reco::JPTJet> >*)arg[0],
    *(::__gnu_cxx::__normal_iterator<reco::JPTJet*,std::vector<reco::JPTJet> >*)arg[1]));
  else   (((::std::vector<reco::JPTJet>*)o)->erase)(*(::__gnu_cxx::__normal_iterator<reco::JPTJet*,std::vector<reco::JPTJet> >*)arg[0],
    *(::__gnu_cxx::__normal_iterator<reco::JPTJet*,std::vector<reco::JPTJet> >*)arg[1]);
}

static  void method_12809( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<reco::JPTJet>*)o)->swap)(*(::std::vector<reco::JPTJet>*)arg[0]);
}

static  void method_12810( void*, void* o, const std::vector<void*>&, void*)
{
  (((::std::vector<reco::JPTJet>*)o)->clear)();
}

static void method_newdel_2968( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::std::vector<reco::JPTJet> >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::std::vector<reco::JPTJet> >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::std::vector<reco::JPTJet> >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::std::vector<reco::JPTJet> >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::std::vector<reco::JPTJet> >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

static void method_x3( void* retaddr, void*, const std::vector<void*>&, void*)
{
  typedef std::vector<std::pair< ::Reflex::Base, int> > Bases_t;
  static Bases_t s_bases;
  if ( !s_bases.size() ) {
    s_bases.push_back(std::make_pair(::Reflex::Base( ::Reflex::TypeBuilder(Reflex::Literal("std::_Vector_base<reco::JPTJet,std::allocator<reco::JPTJet> >")), ::Reflex::BaseOffset< ::std::vector<reco::JPTJet>,::std::_Vector_base<reco::JPTJet,std::allocator<reco::JPTJet> > >::Get(),::Reflex::PROTECTED), 0));
  }
  if (retaddr) *(Bases_t**)retaddr = &s_bases;
}

static void method_x4( void* retaddr, void*, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**) retaddr = ::Reflex::Proxy< ::std::vector<reco::JPTJet> >::Generate();
  else ::Reflex::Proxy< ::std::vector<reco::JPTJet> >::Generate();
}

//------Dictionary for class vector<reco::JPTJet,std::allocator<reco::JPTJet> > -------------------------------
void __std__vector_reco__JPTJet__db_datamem(Reflex::Class*);
void __std__vector_reco__JPTJet__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __std__vector_reco__JPTJet__datamem_bld(&__std__vector_reco__JPTJet__db_datamem);
Reflex::GenreflexMemberBuilder __std__vector_reco__JPTJet__funcmem_bld(&__std__vector_reco__JPTJet__db_funcmem);
void __std__vector_reco__JPTJet__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("std::vector<reco::JPTJet>"), typeid(::std::vector<reco::JPTJet>), sizeof(::std::vector<reco::JPTJet>), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddBase(type_2467, ::Reflex::BaseOffset< ::std::vector<reco::JPTJet>, ::std::_Vector_base<reco::JPTJet,std::allocator<reco::JPTJet> > >::Get(), ::Reflex::PROTECTED)
  .AddTypedef(type_7528, Reflex::Literal("std::vector<reco::JPTJet>::_Alloc_value_type"))
  .AddTypedef(type_2467, Reflex::Literal("std::vector<reco::JPTJet>::_Base"))
  .AddTypedef(type_3223, Reflex::Literal("std::vector<reco::JPTJet>::_Tp_alloc_type"))
  .AddTypedef(type_7980, Reflex::Literal("std::vector<reco::JPTJet>::_Alloc_traits"))
  .AddTypedef(type_7528, Reflex::Literal("std::vector<reco::JPTJet>::value_type"))
  .AddTypedef(type_9177, Reflex::Literal("std::vector<reco::JPTJet>::pointer"))
  .AddTypedef(type_12758, Reflex::Literal("std::vector<reco::JPTJet>::const_pointer"))
  .AddTypedef(type_12760, Reflex::Literal("std::vector<reco::JPTJet>::reference"))
  .AddTypedef(type_12762, Reflex::Literal("std::vector<reco::JPTJet>::const_reference"))
  .AddTypedef(type_7873, Reflex::Literal("std::vector<reco::JPTJet>::iterator"))
  .AddTypedef(type_7874, Reflex::Literal("std::vector<reco::JPTJet>::const_iterator"))
  .AddTypedef(type_3461, Reflex::Literal("std::vector<reco::JPTJet>::const_reverse_iterator"))
  .AddTypedef(type_3462, Reflex::Literal("std::vector<reco::JPTJet>::reverse_iterator"))
  .AddTypedef(type_3189, Reflex::Literal("std::vector<reco::JPTJet>::size_type"))
  .AddTypedef(type_3096, Reflex::Literal("std::vector<reco::JPTJet>::difference_type"))
  .AddTypedef(type_3223, Reflex::Literal("std::vector<reco::JPTJet>::allocator_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("vector"), constructor_12771, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_29730), Reflex::Literal("vector"), constructor_12772, 0, "__a", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_3189, type_12762, type_29730), Reflex::Literal("vector"), constructor_12773, 0, "__n;__value=_Tp();__a=_Alloc()", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_18696), Reflex::Literal("vector"), constructor_12774, 0, "__x", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~vector"), destructor_12775, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_2968, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getBasesTable"), method_x3, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddFunctionMember<void*(void)>(Reflex::Literal("createCollFuncTable"), method_x4, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandFunctionMemberBuilder(&__std__vector_reco__JPTJet__funcmem_bld);
}

//------Delayed data member builder for class vector<reco::JPTJet,std::allocator<reco::JPTJet> > -------------------
void __std__vector_reco__JPTJet__db_datamem(Reflex::Class*) {

}
//------Delayed function member builder for class vector<reco::JPTJet,std::allocator<reco::JPTJet> > -------------------
void __std__vector_reco__JPTJet__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_30607, type_18696), Reflex::Literal("operator="), operator_12776, 0, "__x", ::Reflex::PUBLIC | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_3189, type_12762), Reflex::Literal("assign"), method_12777, 0, "__n;__val", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_7873), Reflex::Literal("begin"), method_12778, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_7874), Reflex::Literal("begin"), method_12779, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_7873), Reflex::Literal("end"), method_12780, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_7874), Reflex::Literal("end"), method_12781, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3189), Reflex::Literal("size"), method_12786, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3189), Reflex::Literal("max_size"), method_12787, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_3189, type_7528), Reflex::Literal("resize"), method_12788, 0, "__new_size;__x=_Tp()", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3189), Reflex::Literal("capacity"), method_12789, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("empty"), method_12790, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_3189), Reflex::Literal("reserve"), method_12791, 0, "__n", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_12760, type_3189), Reflex::Literal("operator[]"), operator_12792, 0, "__n", ::Reflex::PUBLIC | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_12762, type_3189), Reflex::Literal("operator[]"), operator_12793, 0, "__n", ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_12760, type_3189), Reflex::Literal("at"), method_12795, 0, "__n", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_12762, type_3189), Reflex::Literal("at"), method_12796, 0, "__n", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_12760), Reflex::Literal("front"), method_12797, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_12762), Reflex::Literal("front"), method_12798, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_12760), Reflex::Literal("back"), method_12799, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_12762), Reflex::Literal("back"), method_12800, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_9177), Reflex::Literal("data"), method_12801, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_12758), Reflex::Literal("data"), method_12802, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_12762), Reflex::Literal("push_back"), method_12803, 0, "__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680), Reflex::Literal("pop_back"), method_12804, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_7873, type_7873, type_12762), Reflex::Literal("insert"), method_12805, 0, "__position;__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_7873, type_3189, type_12762), Reflex::Literal("insert"), method_12806, 0, "__position;__n;__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_7873, type_7873), Reflex::Literal("erase"), method_12807, 0, "__position", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_7873, type_7873, type_7873), Reflex::Literal("erase"), method_12808, 0, "__first;__last", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_30607), Reflex::Literal("swap"), method_12809, 0, "__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680), Reflex::Literal("clear"), method_12810, 0, 0, ::Reflex::PUBLIC);
}
//------Stub functions for class PFJet -------------------------------
static  void operator_24151( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::reco::PFJet*)o)->operator=)(*(const ::reco::PFJet*)arg[0]);
  else   (((::reco::PFJet*)o)->operator=)(*(const ::reco::PFJet*)arg[0]);
}

static void constructor_24152( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::reco::PFJet(*(const ::reco::PFJet*)arg[0]);
  else ::new(mem) ::reco::PFJet(*(const ::reco::PFJet*)arg[0]);
}

static void constructor_24153( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::reco::PFJet();
  else ::new(mem) ::reco::PFJet();
}

static void constructor_24154( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::reco::PFJet(*(const ::math::XYZTLorentzVector*)arg[0],
      *(const ::math::XYZPoint*)arg[1],
      *(const ::reco::PFJet::Specific*)arg[2],
      *(const ::std::vector<edm::Ptr<reco::Candidate> >*)arg[3]);
  else ::new(mem) ::reco::PFJet(*(const ::math::XYZTLorentzVector*)arg[0],
      *(const ::math::XYZPoint*)arg[1],
      *(const ::reco::PFJet::Specific*)arg[2],
      *(const ::std::vector<edm::Ptr<reco::Candidate> >*)arg[3]);
}

static void constructor_24155( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::reco::PFJet(*(const ::math::XYZTLorentzVector*)arg[0],
      *(const ::math::XYZPoint*)arg[1],
      *(const ::reco::PFJet::Specific*)arg[2]);
  else ::new(mem) ::reco::PFJet(*(const ::math::XYZTLorentzVector*)arg[0],
      *(const ::math::XYZPoint*)arg[1],
      *(const ::reco::PFJet::Specific*)arg[2]);
}

static void constructor_24156( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::reco::PFJet(*(const ::math::XYZTLorentzVector*)arg[0],
      *(const ::reco::PFJet::Specific*)arg[1],
      *(const ::std::vector<edm::Ptr<reco::Candidate> >*)arg[2]);
  else ::new(mem) ::reco::PFJet(*(const ::math::XYZTLorentzVector*)arg[0],
      *(const ::reco::PFJet::Specific*)arg[1],
      *(const ::std::vector<edm::Ptr<reco::Candidate> >*)arg[2]);
}

static void destructor_24157(void*, void * o, const std::vector<void*>&, void *) {
(((::reco::PFJet*)o)->::reco::PFJet::~PFJet)();
}
static  void method_24158( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (float)((((const ::reco::PFJet*)o)->chargedHadronEnergy)());
  else   (((const ::reco::PFJet*)o)->chargedHadronEnergy)();
}

static  void method_24159( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (float)((((const ::reco::PFJet*)o)->chargedHadronEnergyFraction)());
  else   (((const ::reco::PFJet*)o)->chargedHadronEnergyFraction)();
}

static  void method_24160( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (float)((((const ::reco::PFJet*)o)->neutralHadronEnergy)());
  else   (((const ::reco::PFJet*)o)->neutralHadronEnergy)();
}

static  void method_24161( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (float)((((const ::reco::PFJet*)o)->neutralHadronEnergyFraction)());
  else   (((const ::reco::PFJet*)o)->neutralHadronEnergyFraction)();
}

static  void method_24162( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (float)((((const ::reco::PFJet*)o)->photonEnergy)());
  else   (((const ::reco::PFJet*)o)->photonEnergy)();
}

static  void method_24163( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (float)((((const ::reco::PFJet*)o)->photonEnergyFraction)());
  else   (((const ::reco::PFJet*)o)->photonEnergyFraction)();
}

static  void method_24164( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (float)((((const ::reco::PFJet*)o)->electronEnergy)());
  else   (((const ::reco::PFJet*)o)->electronEnergy)();
}

static  void method_24165( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (float)((((const ::reco::PFJet*)o)->electronEnergyFraction)());
  else   (((const ::reco::PFJet*)o)->electronEnergyFraction)();
}

static  void method_24166( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (float)((((const ::reco::PFJet*)o)->muonEnergy)());
  else   (((const ::reco::PFJet*)o)->muonEnergy)();
}

static  void method_24167( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (float)((((const ::reco::PFJet*)o)->muonEnergyFraction)());
  else   (((const ::reco::PFJet*)o)->muonEnergyFraction)();
}

static  void method_24168( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (float)((((const ::reco::PFJet*)o)->HFHadronEnergy)());
  else   (((const ::reco::PFJet*)o)->HFHadronEnergy)();
}

static  void method_24169( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (float)((((const ::reco::PFJet*)o)->HFHadronEnergyFraction)());
  else   (((const ::reco::PFJet*)o)->HFHadronEnergyFraction)();
}

static  void method_24170( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (float)((((const ::reco::PFJet*)o)->HFEMEnergy)());
  else   (((const ::reco::PFJet*)o)->HFEMEnergy)();
}

static  void method_24171( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (float)((((const ::reco::PFJet*)o)->HFEMEnergyFraction)());
  else   (((const ::reco::PFJet*)o)->HFEMEnergyFraction)();
}

static  void method_24172( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (int)((((const ::reco::PFJet*)o)->chargedHadronMultiplicity)());
  else   (((const ::reco::PFJet*)o)->chargedHadronMultiplicity)();
}

static  void method_24173( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (int)((((const ::reco::PFJet*)o)->neutralHadronMultiplicity)());
  else   (((const ::reco::PFJet*)o)->neutralHadronMultiplicity)();
}

static  void method_24174( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (int)((((const ::reco::PFJet*)o)->photonMultiplicity)());
  else   (((const ::reco::PFJet*)o)->photonMultiplicity)();
}

static  void method_24175( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (int)((((const ::reco::PFJet*)o)->electronMultiplicity)());
  else   (((const ::reco::PFJet*)o)->electronMultiplicity)();
}

static  void method_24176( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (int)((((const ::reco::PFJet*)o)->muonMultiplicity)());
  else   (((const ::reco::PFJet*)o)->muonMultiplicity)();
}

static  void method_24177( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (int)((((const ::reco::PFJet*)o)->HFHadronMultiplicity)());
  else   (((const ::reco::PFJet*)o)->HFHadronMultiplicity)();
}

static  void method_24178( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (int)((((const ::reco::PFJet*)o)->HFEMMultiplicity)());
  else   (((const ::reco::PFJet*)o)->HFEMMultiplicity)();
}

static  void method_24179( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (float)((((const ::reco::PFJet*)o)->chargedEmEnergy)());
  else   (((const ::reco::PFJet*)o)->chargedEmEnergy)();
}

static  void method_24180( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (float)((((const ::reco::PFJet*)o)->chargedEmEnergyFraction)());
  else   (((const ::reco::PFJet*)o)->chargedEmEnergyFraction)();
}

static  void method_24181( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (float)((((const ::reco::PFJet*)o)->chargedMuEnergy)());
  else   (((const ::reco::PFJet*)o)->chargedMuEnergy)();
}

static  void method_24182( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (float)((((const ::reco::PFJet*)o)->chargedMuEnergyFraction)());
  else   (((const ::reco::PFJet*)o)->chargedMuEnergyFraction)();
}

static  void method_24183( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (float)((((const ::reco::PFJet*)o)->neutralEmEnergy)());
  else   (((const ::reco::PFJet*)o)->neutralEmEnergy)();
}

static  void method_24184( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (float)((((const ::reco::PFJet*)o)->neutralEmEnergyFraction)());
  else   (((const ::reco::PFJet*)o)->neutralEmEnergyFraction)();
}

static  void method_24185( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (int)((((const ::reco::PFJet*)o)->chargedMultiplicity)());
  else   (((const ::reco::PFJet*)o)->chargedMultiplicity)();
}

static  void method_24186( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (int)((((const ::reco::PFJet*)o)->neutralMultiplicity)());
  else   (((const ::reco::PFJet*)o)->neutralMultiplicity)();
}

static  void method_24187( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (reco::PFCandidatePtr)((((const ::reco::PFJet*)o)->getPFConstituent)(*(unsigned int*)arg[0]));
  else   (((const ::reco::PFJet*)o)->getPFConstituent)(*(unsigned int*)arg[0]);
}

static  void method_24188( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::vector<edm::Ptr<reco::PFCandidate> >)((((const ::reco::PFJet*)o)->getPFConstituents)());
  else   (((const ::reco::PFJet*)o)->getPFConstituents)();
}

static  void method_24189( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (reco::TrackRefVector)((((const ::reco::PFJet*)o)->getTrackRefs)());
  else   (((const ::reco::PFJet*)o)->getTrackRefs)();
}

static  void method_24190( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::reco::PFJet*)o)->getSpecific)();
  else   (((const ::reco::PFJet*)o)->getSpecific)();
}

static  void method_24191( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::reco::PFJet*)o)->clone)());
  else   (((const ::reco::PFJet*)o)->clone)();
}

static  void method_24192( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::string)((((const ::reco::PFJet*)o)->print)());
  else   (((const ::reco::PFJet*)o)->print)();
}

static void method_newdel_7463( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::reco::PFJet >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::reco::PFJet >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::reco::PFJet >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::reco::PFJet >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::reco::PFJet >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

static void method_x6( void* retaddr, void*, const std::vector<void*>&, void*)
{
  typedef std::vector<std::pair< ::Reflex::Base, int> > Bases_t;
  static Bases_t s_bases;
  if ( !s_bases.size() ) {
    s_bases.push_back(std::make_pair(::Reflex::Base( ::Reflex::TypeBuilder(Reflex::Literal("reco::Jet")), ::Reflex::BaseOffset< ::reco::PFJet,::reco::Jet >::Get(),::Reflex::PUBLIC), 0));
    s_bases.push_back(std::make_pair(::Reflex::Base( ::Reflex::TypeBuilder(Reflex::Literal("reco::CompositePtrCandidate")), ::Reflex::BaseOffset< ::reco::PFJet,::reco::CompositePtrCandidate >::Get(),::Reflex::PUBLIC), 1));
    s_bases.push_back(std::make_pair(::Reflex::Base( ::Reflex::TypeBuilder(Reflex::Literal("reco::LeafCandidate")), ::Reflex::BaseOffset< ::reco::PFJet,::reco::LeafCandidate >::Get(),::Reflex::PUBLIC), 2));
    s_bases.push_back(std::make_pair(::Reflex::Base( ::Reflex::TypeBuilder(Reflex::Literal("reco::Candidate")), ::Reflex::BaseOffset< ::reco::PFJet,::reco::Candidate >::Get(),::Reflex::PUBLIC), 3));
  }
  if (retaddr) *(Bases_t**)retaddr = &s_bases;
}

//------Dictionary for class PFJet -------------------------------
void __reco__PFJet_db_datamem(Reflex::Class*);
void __reco__PFJet_db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __reco__PFJet_datamem_bld(&__reco__PFJet_db_datamem);
Reflex::GenreflexMemberBuilder __reco__PFJet_funcmem_bld(&__reco__PFJet_db_funcmem);
void __reco__PFJet_dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("reco::PFJet"), typeid(::reco::PFJet), sizeof(::reco::PFJet), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::VIRTUAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("ClassVersion"), "10")
  .AddBase(type_7485, ::Reflex::BaseOffset< ::reco::PFJet, ::reco::Jet >::Get(), ::Reflex::PUBLIC)
  .AddTypedef(type_7468, Reflex::Literal("reco::PFJet::ConstituentTypePtr"))
  .AddTypedef(type_7529, Reflex::Literal("reco::PFJet::ConstituentTypeFwdPtr"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_12955, type_12957), Reflex::Literal("operator="), operator_24151, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_12957), Reflex::Literal("PFJet"), constructor_24152, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("PFJet"), constructor_24153, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_23124, type_23126, type_34640, type_30674), Reflex::Literal("PFJet"), constructor_24154, 0, "fP4;fVertex;fSpecific;fConstituents", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_23124, type_23126, type_34640), Reflex::Literal("PFJet"), constructor_24155, 0, "fP4;fVertex;fSpecific", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_23124, type_34640, type_30674), Reflex::Literal("PFJet"), constructor_24156, 0, "fP4;fSpecific;fConstituents", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~PFJet"), destructor_24157, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::DESTRUCTOR )
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_7463, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getBasesTable"), method_x6, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__reco__PFJet_datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__reco__PFJet_funcmem_bld);
}

//------Delayed data member builder for class PFJet -------------------
void __reco__PFJet_db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_24150, Reflex::Literal("m_specific"), OffsetOf(__shadow__::__reco__PFJet, m_specific), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class PFJet -------------------
void __reco__PFJet_db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_878), Reflex::Literal("chargedHadronEnergy"), method_24158, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_878), Reflex::Literal("chargedHadronEnergyFraction"), method_24159, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_878), Reflex::Literal("neutralHadronEnergy"), method_24160, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_878), Reflex::Literal("neutralHadronEnergyFraction"), method_24161, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_878), Reflex::Literal("photonEnergy"), method_24162, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_878), Reflex::Literal("photonEnergyFraction"), method_24163, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_878), Reflex::Literal("electronEnergy"), method_24164, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_878), Reflex::Literal("electronEnergyFraction"), method_24165, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_878), Reflex::Literal("muonEnergy"), method_24166, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_878), Reflex::Literal("muonEnergyFraction"), method_24167, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_878), Reflex::Literal("HFHadronEnergy"), method_24168, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_878), Reflex::Literal("HFHadronEnergyFraction"), method_24169, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_878), Reflex::Literal("HFEMEnergy"), method_24170, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_878), Reflex::Literal("HFEMEnergyFraction"), method_24171, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_64), Reflex::Literal("chargedHadronMultiplicity"), method_24172, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_64), Reflex::Literal("neutralHadronMultiplicity"), method_24173, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_64), Reflex::Literal("photonMultiplicity"), method_24174, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_64), Reflex::Literal("electronMultiplicity"), method_24175, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_64), Reflex::Literal("muonMultiplicity"), method_24176, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_64), Reflex::Literal("HFHadronMultiplicity"), method_24177, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_64), Reflex::Literal("HFEMMultiplicity"), method_24178, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_878), Reflex::Literal("chargedEmEnergy"), method_24179, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_878), Reflex::Literal("chargedEmEnergyFraction"), method_24180, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_878), Reflex::Literal("chargedMuEnergy"), method_24181, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_878), Reflex::Literal("chargedMuEnergyFraction"), method_24182, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_878), Reflex::Literal("neutralEmEnergy"), method_24183, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_878), Reflex::Literal("neutralEmEnergyFraction"), method_24184, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_64), Reflex::Literal("chargedMultiplicity"), method_24185, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_64), Reflex::Literal("neutralMultiplicity"), method_24186, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_7468, type_356), Reflex::Literal("getPFConstituent"), method_24187, 0, "fIndex", ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2998), Reflex::Literal("getPFConstituents"), method_24188, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_7530), Reflex::Literal("getTrackRefs"), method_24189, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_34640), Reflex::Literal("getSpecific"), method_24190, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_9120), Reflex::Literal("clone"), method_24191, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2504), Reflex::Literal("print"), method_24192, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST);
}
//------Stub functions for class Ref<std::vector<reco::PFJet, std::allocator<reco::PFJet> >,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet> > -------------------------------
static  void operator_22395( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)o)->operator=)(*(const ::edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)arg[0]);
  else   (((::edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)o)->operator=)(*(const ::edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)arg[0]);
}

static void constructor_22396( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >(*(const ::edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)arg[0]);
  else ::new(mem) ::edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >(*(const ::edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)arg[0]);
}

static void constructor_22397( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >();
  else ::new(mem) ::edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >();
}

static void constructor_22398( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if ( arg.size() == 2 ) {
    if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >(*(const ::edm::Handle<std::vector<reco::PFJet> >*)arg[0],
      *(unsigned int*)arg[1]);
  else ::new(mem) ::edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >(*(const ::edm::Handle<std::vector<reco::PFJet> >*)arg[0],
      *(unsigned int*)arg[1]);
  }
  else if ( arg.size() == 3 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >(*(const ::edm::Handle<std::vector<reco::PFJet> >*)arg[0],
      *(unsigned int*)arg[1],
      *(bool*)arg[2]);
  else ::new(mem) ::edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >(*(const ::edm::Handle<std::vector<reco::PFJet> >*)arg[0],
      *(unsigned int*)arg[1],
      *(bool*)arg[2]);
  }
}

static void constructor_22399( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if ( arg.size() == 2 ) {
    if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >(*(const ::edm::OrphanHandle<std::vector<reco::PFJet> >*)arg[0],
      *(unsigned int*)arg[1]);
  else ::new(mem) ::edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >(*(const ::edm::OrphanHandle<std::vector<reco::PFJet> >*)arg[0],
      *(unsigned int*)arg[1]);
  }
  else if ( arg.size() == 3 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >(*(const ::edm::OrphanHandle<std::vector<reco::PFJet> >*)arg[0],
      *(unsigned int*)arg[1],
      *(bool*)arg[2]);
  else ::new(mem) ::edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >(*(const ::edm::OrphanHandle<std::vector<reco::PFJet> >*)arg[0],
      *(unsigned int*)arg[1],
      *(bool*)arg[2]);
  }
}

static void constructor_22400( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if ( arg.size() == 2 ) {
    if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >(*(const ::edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)arg[0],
      *(unsigned int*)arg[1]);
  else ::new(mem) ::edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >(*(const ::edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)arg[0],
      *(unsigned int*)arg[1]);
  }
  else if ( arg.size() == 3 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >(*(const ::edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)arg[0],
      *(unsigned int*)arg[1],
      *(bool*)arg[2]);
  else ::new(mem) ::edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >(*(const ::edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)arg[0],
      *(unsigned int*)arg[1],
      *(bool*)arg[2]);
  }
}

static void constructor_22401( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if ( arg.size() == 2 ) {
    if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >((const ::std::vector<reco::PFJet>*)arg[0],
      *(unsigned int*)arg[1]);
  else ::new(mem) ::edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >((const ::std::vector<reco::PFJet>*)arg[0],
      *(unsigned int*)arg[1]);
  }
  else if ( arg.size() == 3 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >((const ::std::vector<reco::PFJet>*)arg[0],
      *(unsigned int*)arg[1],
      *(bool*)arg[2]);
  else ::new(mem) ::edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >((const ::std::vector<reco::PFJet>*)arg[0],
      *(unsigned int*)arg[1],
      *(bool*)arg[2]);
  }
}

static void constructor_22402( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if ( arg.size() == 2 ) {
    if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >(*(const ::edm::TestHandle<std::vector<reco::PFJet> >*)arg[0],
      *(unsigned int*)arg[1]);
  else ::new(mem) ::edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >(*(const ::edm::TestHandle<std::vector<reco::PFJet> >*)arg[0],
      *(unsigned int*)arg[1]);
  }
  else if ( arg.size() == 3 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >(*(const ::edm::TestHandle<std::vector<reco::PFJet> >*)arg[0],
      *(unsigned int*)arg[1],
      *(bool*)arg[2]);
  else ::new(mem) ::edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >(*(const ::edm::TestHandle<std::vector<reco::PFJet> >*)arg[0],
      *(unsigned int*)arg[1],
      *(bool*)arg[2]);
  }
}

static void constructor_22403( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >(*(const ::edm::ProductID*)arg[0],
      *(unsigned int*)arg[1],
      (const ::edm::EDProductGetter*)arg[2]);
  else ::new(mem) ::edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >(*(const ::edm::ProductID*)arg[0],
      *(unsigned int*)arg[1],
      (const ::edm::EDProductGetter*)arg[2]);
}

static void constructor_22404( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >(*(const ::edm::ProductID*)arg[0],
      (const ::reco::PFJet*)arg[1],
      *(unsigned int*)arg[2],
      (const ::std::vector<reco::PFJet>*)arg[3]);
  else ::new(mem) ::edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >(*(const ::edm::ProductID*)arg[0],
      (const ::reco::PFJet*)arg[1],
      *(unsigned int*)arg[2],
      (const ::std::vector<reco::PFJet>*)arg[3]);
}

static void constructor_22405( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >(*(const ::edm::ProductID*)arg[0]);
  else ::new(mem) ::edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >(*(const ::edm::ProductID*)arg[0]);
}

static void constructor_22406( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >(*(const ::edm::RefProd<std::vector<reco::PFJet> >*)arg[0],
      *(unsigned int*)arg[1]);
  else ::new(mem) ::edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >(*(const ::edm::RefProd<std::vector<reco::PFJet> >*)arg[0],
      *(unsigned int*)arg[1]);
}

static void destructor_22407(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)o)->::edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >::~Ref)();
}
static  void operator_22408( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)o)->operator*)();
  else   (((const ::edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)o)->operator*)();
}

static  void operator_22409( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)o)->operator->)());
  else   (((const ::edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)o)->operator->)();
}

static  void method_22410( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)o)->get)());
  else   (((const ::edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)o)->get)();
}

static  void method_22411( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)o)->isNull)());
  else   (((const ::edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)o)->isNull)();
}

static  void method_22412( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)o)->isNonnull)());
  else   (((const ::edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)o)->isNonnull)();
}

static  void operator_22413( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)o)->operator!)());
  else   (((const ::edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)o)->operator!)();
}

static  void method_22414( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::ProductID)((((const ::edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)o)->id)());
  else   (((const ::edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)o)->id)();
}

static  void method_22415( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)o)->productGetter)());
  else   (((const ::edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)o)->productGetter)();
}

static  void method_22416( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)o)->product)());
  else   (((const ::edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)o)->product)();
}

static  void method_22417( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (unsigned int)((((const ::edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)o)->key)());
  else   (((const ::edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)o)->key)();
}

static  void method_22418( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (unsigned int)((((const ::edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)o)->index)());
  else   (((const ::edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)o)->index)();
}

static  void method_22419( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)o)->hasProductCache)());
  else   (((const ::edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)o)->hasProductCache)();
}

static  void method_22420( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)o)->isAvailable)());
  else   (((const ::edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)o)->isAvailable)();
}

static  void method_22421( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)o)->isTransient)());
  else   (((const ::edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)o)->isTransient)();
}

static  void method_22422( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)o)->refCore)();
  else   (((const ::edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)o)->refCore)();
}

static  void method_22423( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (short)((((::edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)o)->Class_Version)());
  else   (((::edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)o)->Class_Version)();
}

static void constructor_22424( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >(*(const ::edm::RefCore*)arg[0],
      *(const unsigned int*)arg[1]);
  else ::new(mem) ::edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >(*(const ::edm::RefCore*)arg[0],
      *(const unsigned int*)arg[1]);
}

static void method_newdel_4740( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class Ref<std::vector<reco::PFJet, std::allocator<reco::PFJet> >,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet> > -------------------------------
void __edm__Ref_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s__db_datamem(Reflex::Class*);
void __edm__Ref_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__Ref_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s__datamem_bld(&__edm__Ref_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__Ref_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s__funcmem_bld(&__edm__Ref_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s__db_funcmem);
void __edm__Ref_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >"), typeid(::edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >), sizeof(::edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("ClassVersion"), ::edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >::Class_Version())
  .AddTypedef(type_7463, Reflex::Literal("edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >::T"))
  .AddTypedef(type_18703, Reflex::Literal("edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >::F"))
  .AddTypedef(type_20166, Reflex::Literal("edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >::VF"))
  .AddTypedef(type_20165, Reflex::Literal("edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >::VBF"))
  .AddTypedef(type_2971, Reflex::Literal("edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >::product_type"))
  .AddTypedef(type_7463, Reflex::Literal("edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >::value_type"))
  .AddTypedef(type_7463c, Reflex::Literal("edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >::element_type"))
  .AddTypedef(type_18703, Reflex::Literal("edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >::finder_type"))
  .AddTypedef(type_356, Reflex::Literal("edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >::argument_type"))
  .AddTypedef(type_356, Reflex::Literal("edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >::key_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_12890, type_12892), Reflex::Literal("operator="), operator_22395, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_12892), Reflex::Literal("Ref"), constructor_22396, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("Ref"), constructor_22397, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_33955, type_356, type_1574), Reflex::Literal("Ref"), constructor_22398, 0, "handle;itemKey;setNow=true", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_33956, type_356, type_1574), Reflex::Literal("Ref"), constructor_22399, 0, "handle;itemKey;setNow=true", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_12827, type_356, type_1574), Reflex::Literal("Ref"), constructor_22400, 0, "refvector;itemKey;setNow=true", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_33477, type_356, type_1574), Reflex::Literal("Ref"), constructor_22401, 0, "iProduct;iItemKey;iSetNow=true", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_33957, type_356, type_1574), Reflex::Literal("Ref"), constructor_22402, 0, "handle;itemKey;setNow=true", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_18495, type_356, type_18571), Reflex::Literal("Ref"), constructor_22403, 0, "productID;itemKey;prodGetter", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_18495, type_12953, type_356, type_33477), Reflex::Literal("Ref"), constructor_22404, 0, "iProductID;;iItemKey;iProduct", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_18495), Reflex::Literal("Ref"), constructor_22405, 0, "iId", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_33954, type_356), Reflex::Literal("Ref"), constructor_22406, 0, "refProd;itemKey", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~Ref"), destructor_22407, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_21597, type_9929), Reflex::Literal("Ref"), constructor_22424, 0, "iRefCore;iKey", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_4740, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__Ref_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__Ref_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s__funcmem_bld);
}

//------Delayed data member builder for class Ref<std::vector<reco::PFJet, std::allocator<reco::PFJet> >,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet> > -------------------
void __edm__Ref_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_4462, Reflex::Literal("product_"), OffsetOf(__shadow__::__edm__Ref_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_, product_), ::Reflex::PRIVATE | ::Reflex::MUTABLE);
}
//------Delayed function member builder for class Ref<std::vector<reco::PFJet, std::allocator<reco::PFJet> >,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet> > -------------------
void __edm__Ref_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_12957), Reflex::Literal("operator*"), operator_22408, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_12953), Reflex::Literal("operator->"), operator_22409, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_12953), Reflex::Literal("get"), method_22410, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("isNull"), method_22411, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("isNonnull"), method_22412, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("operator!"), operator_22413, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4689), Reflex::Literal("id"), method_22414, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_18571), Reflex::Literal("productGetter"), method_22415, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_33477), Reflex::Literal("product"), method_22416, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_356), Reflex::Literal("key"), method_22417, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_356), Reflex::Literal("index"), method_22418, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("hasProductCache"), method_22419, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("isAvailable"), method_22420, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("isTransient"), method_22421, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_21597), Reflex::Literal("refCore"), method_22422, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_231), Reflex::Literal("Class_Version"), method_22423, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC);
}
//------Stub functions for class vector<edm::Ref<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet, edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet> >,std::allocator<edm::Ref<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet, edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet> > > > -------------------------------
static void constructor_12901( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >();
  else ::new(mem) ::std::vector<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >();
}

static void constructor_12902( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >(*(const ::std::allocator<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)arg[0]);
  else ::new(mem) ::std::vector<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >(*(const ::std::allocator<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)arg[0]);
}

static void constructor_12903( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if ( arg.size() == 1 ) {
    if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >(*(::std::size_t*)arg[0]);
  else ::new(mem) ::std::vector<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >(*(::std::size_t*)arg[0]);
  }
  else if ( arg.size() == 2 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >(*(::std::size_t*)arg[0],
      *(const ::edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)arg[1]);
  else ::new(mem) ::std::vector<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >(*(::std::size_t*)arg[0],
      *(const ::edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)arg[1]);
  }
  else if ( arg.size() == 3 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >(*(::std::size_t*)arg[0],
      *(const ::edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)arg[1],
      *(const ::std::allocator<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)arg[2]);
  else ::new(mem) ::std::vector<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >(*(::std::size_t*)arg[0],
      *(const ::edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)arg[1],
      *(const ::std::allocator<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)arg[2]);
  }
}

static void constructor_12904( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >(*(const ::std::vector<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)arg[0]);
  else ::new(mem) ::std::vector<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >(*(const ::std::vector<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)arg[0]);
}

static void destructor_12905(void*, void * o, const std::vector<void*>&, void *) {
(((::std::vector<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->::std::vector<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >::~vector)();
}
static  void operator_12906( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->operator=)(*(const ::std::vector<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)arg[0]);
  else   (((::std::vector<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->operator=)(*(const ::std::vector<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)arg[0]);
}

static  void method_12907( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->assign)(*(::std::size_t*)arg[0],
    *(const ::edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)arg[1]);
}

static  void method_12908( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*,std::vector<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >)((((::std::vector<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->begin)());
  else   (((::std::vector<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->begin)();
}

static  void method_12909( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<const edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*,std::vector<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >)((((const ::std::vector<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->begin)());
  else   (((const ::std::vector<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->begin)();
}

static  void method_12910( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*,std::vector<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >)((((::std::vector<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->end)());
  else   (((::std::vector<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->end)();
}

static  void method_12911( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<const edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*,std::vector<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >)((((const ::std::vector<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->end)());
  else   (((const ::std::vector<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->end)();
}

static  void method_12916( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::std::vector<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->size)());
  else   (((const ::std::vector<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->size)();
}

static  void method_12917( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::std::vector<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->max_size)());
  else   (((const ::std::vector<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->max_size)();
}

static  void method_12918( void*, void* o, const std::vector<void*>& arg, void*)
{
  if ( arg.size() == 1 ) {
    (((::std::vector<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->resize)(*(::std::size_t*)arg[0]);
  }
  else if ( arg.size() == 2 ) { 
    (((::std::vector<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->resize)(*(::std::size_t*)arg[0],
      *(::edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)arg[1]);
  }
}

static  void method_12919( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::std::vector<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->capacity)());
  else   (((const ::std::vector<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->capacity)();
}

static  void method_12920( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::std::vector<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->empty)());
  else   (((const ::std::vector<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->empty)();
}

static  void method_12921( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->reserve)(*(::std::size_t*)arg[0]);
}

static  void operator_12922( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->operator[])(*(::std::size_t*)arg[0]);
  else   (((::std::vector<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->operator[])(*(::std::size_t*)arg[0]);
}

static  void operator_12923( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->operator[])(*(::std::size_t*)arg[0]);
  else   (((const ::std::vector<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->operator[])(*(::std::size_t*)arg[0]);
}

static  void method_12925( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->at)(*(::std::size_t*)arg[0]);
  else   (((::std::vector<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->at)(*(::std::size_t*)arg[0]);
}

static  void method_12926( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->at)(*(::std::size_t*)arg[0]);
  else   (((const ::std::vector<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->at)(*(::std::size_t*)arg[0]);
}

static  void method_12927( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->front)();
  else   (((::std::vector<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->front)();
}

static  void method_12928( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->front)();
  else   (((const ::std::vector<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->front)();
}

static  void method_12929( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->back)();
  else   (((::std::vector<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->back)();
}

static  void method_12930( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->back)();
  else   (((const ::std::vector<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->back)();
}

static  void method_12931( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((::std::vector<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->data)());
  else   (((::std::vector<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->data)();
}

static  void method_12932( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::std::vector<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->data)());
  else   (((const ::std::vector<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->data)();
}

static  void method_12933( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->push_back)(*(const ::edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)arg[0]);
}

static  void method_12934( void*, void* o, const std::vector<void*>&, void*)
{
  (((::std::vector<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->pop_back)();
}

static  void method_12935( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*,std::vector<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >)((((::std::vector<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->insert)(*(::__gnu_cxx::__normal_iterator<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*,std::vector<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >*)arg[0],
    *(const ::edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)arg[1]));
  else   (((::std::vector<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->insert)(*(::__gnu_cxx::__normal_iterator<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*,std::vector<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >*)arg[0],
    *(const ::edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)arg[1]);
}

static  void method_12936( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->insert)(*(::__gnu_cxx::__normal_iterator<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*,std::vector<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >*)arg[0],
    *(::std::size_t*)arg[1],
    *(const ::edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)arg[2]);
}

static  void method_12937( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*,std::vector<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >)((((::std::vector<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->erase)(*(::__gnu_cxx::__normal_iterator<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*,std::vector<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >*)arg[0]));
  else   (((::std::vector<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->erase)(*(::__gnu_cxx::__normal_iterator<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*,std::vector<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >*)arg[0]);
}

static  void method_12938( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*,std::vector<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >)((((::std::vector<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->erase)(*(::__gnu_cxx::__normal_iterator<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*,std::vector<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >*)arg[0],
    *(::__gnu_cxx::__normal_iterator<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*,std::vector<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >*)arg[1]));
  else   (((::std::vector<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->erase)(*(::__gnu_cxx::__normal_iterator<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*,std::vector<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >*)arg[0],
    *(::__gnu_cxx::__normal_iterator<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*,std::vector<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >*)arg[1]);
}

static  void method_12939( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->swap)(*(::std::vector<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)arg[0]);
}

static  void method_12940( void*, void* o, const std::vector<void*>&, void*)
{
  (((::std::vector<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->clear)();
}

static void method_newdel_2970( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::std::vector<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::std::vector<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::std::vector<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::std::vector<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::std::vector<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

static void method_x9( void* retaddr, void*, const std::vector<void*>&, void*)
{
  typedef std::vector<std::pair< ::Reflex::Base, int> > Bases_t;
  static Bases_t s_bases;
  if ( !s_bases.size() ) {
    s_bases.push_back(std::make_pair(::Reflex::Base( ::Reflex::TypeBuilder(Reflex::Literal("std::_Vector_base<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,std::allocator<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >")), ::Reflex::BaseOffset< ::std::vector<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >,::std::_Vector_base<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,std::allocator<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > > >::Get(),::Reflex::PROTECTED), 0));
  }
  if (retaddr) *(Bases_t**)retaddr = &s_bases;
}

static void method_x10( void* retaddr, void*, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**) retaddr = ::Reflex::Proxy< ::std::vector<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >::Generate();
  else ::Reflex::Proxy< ::std::vector<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >::Generate();
}

//------Dictionary for class vector<edm::Ref<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet, edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet> >,std::allocator<edm::Ref<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet, edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet> > > > -------------------------------
void __std__vector_edm__Ref_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s__db_datamem(Reflex::Class*);
void __std__vector_edm__Ref_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __std__vector_edm__Ref_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s__datamem_bld(&__std__vector_edm__Ref_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s__db_datamem);
Reflex::GenreflexMemberBuilder __std__vector_edm__Ref_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s__funcmem_bld(&__std__vector_edm__Ref_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s__db_funcmem);
void __std__vector_edm__Ref_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("std::vector<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >"), typeid(::std::vector<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >), sizeof(::std::vector<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddBase(type_2448, ::Reflex::BaseOffset< ::std::vector<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >, ::std::_Vector_base<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,std::allocator<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > > >::Get(), ::Reflex::PROTECTED)
  .AddTypedef(type_4740, Reflex::Literal("std::vector<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >::_Alloc_value_type"))
  .AddTypedef(type_2448, Reflex::Literal("std::vector<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >::_Base"))
  .AddTypedef(type_3225, Reflex::Literal("std::vector<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >::_Tp_alloc_type"))
  .AddTypedef(type_7961, Reflex::Literal("std::vector<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >::_Alloc_traits"))
  .AddTypedef(type_4740, Reflex::Literal("std::vector<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >::value_type"))
  .AddTypedef(type_8816, Reflex::Literal("std::vector<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >::pointer"))
  .AddTypedef(type_12888, Reflex::Literal("std::vector<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >::const_pointer"))
  .AddTypedef(type_12890, Reflex::Literal("std::vector<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >::reference"))
  .AddTypedef(type_12892, Reflex::Literal("std::vector<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >::const_reference"))
  .AddTypedef(type_7837, Reflex::Literal("std::vector<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >::iterator"))
  .AddTypedef(type_7838, Reflex::Literal("std::vector<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >::const_iterator"))
  .AddTypedef(type_3411, Reflex::Literal("std::vector<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >::const_reverse_iterator"))
  .AddTypedef(type_3412, Reflex::Literal("std::vector<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >::reverse_iterator"))
  .AddTypedef(type_3189, Reflex::Literal("std::vector<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >::size_type"))
  .AddTypedef(type_3096, Reflex::Literal("std::vector<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >::difference_type"))
  .AddTypedef(type_3225, Reflex::Literal("std::vector<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >::allocator_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("vector"), constructor_12901, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_29483), Reflex::Literal("vector"), constructor_12902, 0, "__a", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_3189, type_12892, type_29483), Reflex::Literal("vector"), constructor_12903, 0, "__n;__value=_Tp();__a=_Alloc()", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_30612), Reflex::Literal("vector"), constructor_12904, 0, "__x", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~vector"), destructor_12905, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_2970, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getBasesTable"), method_x9, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddFunctionMember<void*(void)>(Reflex::Literal("createCollFuncTable"), method_x10, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandFunctionMemberBuilder(&__std__vector_edm__Ref_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s__funcmem_bld);
}

//------Delayed data member builder for class vector<edm::Ref<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet, edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet> >,std::allocator<edm::Ref<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet, edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet> > > > -------------------
void __std__vector_edm__Ref_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s__db_datamem(Reflex::Class*) {

}
//------Delayed function member builder for class vector<edm::Ref<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet, edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet> >,std::allocator<edm::Ref<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet, edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet> > > > -------------------
void __std__vector_edm__Ref_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_30613, type_30612), Reflex::Literal("operator="), operator_12906, 0, "__x", ::Reflex::PUBLIC | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_3189, type_12892), Reflex::Literal("assign"), method_12907, 0, "__n;__val", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_7837), Reflex::Literal("begin"), method_12908, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_7838), Reflex::Literal("begin"), method_12909, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_7837), Reflex::Literal("end"), method_12910, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_7838), Reflex::Literal("end"), method_12911, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3189), Reflex::Literal("size"), method_12916, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3189), Reflex::Literal("max_size"), method_12917, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_3189, type_4740), Reflex::Literal("resize"), method_12918, 0, "__new_size;__x=_Tp()", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3189), Reflex::Literal("capacity"), method_12919, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("empty"), method_12920, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_3189), Reflex::Literal("reserve"), method_12921, 0, "__n", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_12890, type_3189), Reflex::Literal("operator[]"), operator_12922, 0, "__n", ::Reflex::PUBLIC | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_12892, type_3189), Reflex::Literal("operator[]"), operator_12923, 0, "__n", ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_12890, type_3189), Reflex::Literal("at"), method_12925, 0, "__n", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_12892, type_3189), Reflex::Literal("at"), method_12926, 0, "__n", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_12890), Reflex::Literal("front"), method_12927, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_12892), Reflex::Literal("front"), method_12928, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_12890), Reflex::Literal("back"), method_12929, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_12892), Reflex::Literal("back"), method_12930, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_8816), Reflex::Literal("data"), method_12931, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_12888), Reflex::Literal("data"), method_12932, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_12892), Reflex::Literal("push_back"), method_12933, 0, "__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680), Reflex::Literal("pop_back"), method_12934, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_7837, type_7837, type_12892), Reflex::Literal("insert"), method_12935, 0, "__position;__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_7837, type_3189, type_12892), Reflex::Literal("insert"), method_12936, 0, "__position;__n;__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_7837, type_7837), Reflex::Literal("erase"), method_12937, 0, "__position", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_7837, type_7837, type_7837), Reflex::Literal("erase"), method_12938, 0, "__first;__last", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_30613), Reflex::Literal("swap"), method_12939, 0, "__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680), Reflex::Literal("clear"), method_12940, 0, 0, ::Reflex::PUBLIC);
}
//------Stub functions for class vector<reco::PFJet,std::allocator<reco::PFJet> > -------------------------------
static void constructor_12966( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<reco::PFJet>();
  else ::new(mem) ::std::vector<reco::PFJet>();
}

static void constructor_12967( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<reco::PFJet>(*(const ::std::allocator<reco::PFJet>*)arg[0]);
  else ::new(mem) ::std::vector<reco::PFJet>(*(const ::std::allocator<reco::PFJet>*)arg[0]);
}

static void constructor_12968( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if ( arg.size() == 1 ) {
    if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<reco::PFJet>(*(::std::size_t*)arg[0]);
  else ::new(mem) ::std::vector<reco::PFJet>(*(::std::size_t*)arg[0]);
  }
  else if ( arg.size() == 2 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<reco::PFJet>(*(::std::size_t*)arg[0],
      *(const ::reco::PFJet*)arg[1]);
  else ::new(mem) ::std::vector<reco::PFJet>(*(::std::size_t*)arg[0],
      *(const ::reco::PFJet*)arg[1]);
  }
  else if ( arg.size() == 3 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<reco::PFJet>(*(::std::size_t*)arg[0],
      *(const ::reco::PFJet*)arg[1],
      *(const ::std::allocator<reco::PFJet>*)arg[2]);
  else ::new(mem) ::std::vector<reco::PFJet>(*(::std::size_t*)arg[0],
      *(const ::reco::PFJet*)arg[1],
      *(const ::std::allocator<reco::PFJet>*)arg[2]);
  }
}

static void constructor_12969( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<reco::PFJet>(*(const ::std::vector<reco::PFJet>*)arg[0]);
  else ::new(mem) ::std::vector<reco::PFJet>(*(const ::std::vector<reco::PFJet>*)arg[0]);
}

static void destructor_12970(void*, void * o, const std::vector<void*>&, void *) {
(((::std::vector<reco::PFJet>*)o)->::std::vector<reco::PFJet>::~vector)();
}
static  void operator_12971( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<reco::PFJet>*)o)->operator=)(*(const ::std::vector<reco::PFJet>*)arg[0]);
  else   (((::std::vector<reco::PFJet>*)o)->operator=)(*(const ::std::vector<reco::PFJet>*)arg[0]);
}

static  void method_12972( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<reco::PFJet>*)o)->assign)(*(::std::size_t*)arg[0],
    *(const ::reco::PFJet*)arg[1]);
}

static  void method_12973( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<reco::PFJet*,std::vector<reco::PFJet> >)((((::std::vector<reco::PFJet>*)o)->begin)());
  else   (((::std::vector<reco::PFJet>*)o)->begin)();
}

static  void method_12974( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<const reco::PFJet*,std::vector<reco::PFJet> >)((((const ::std::vector<reco::PFJet>*)o)->begin)());
  else   (((const ::std::vector<reco::PFJet>*)o)->begin)();
}

static  void method_12975( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<reco::PFJet*,std::vector<reco::PFJet> >)((((::std::vector<reco::PFJet>*)o)->end)());
  else   (((::std::vector<reco::PFJet>*)o)->end)();
}

static  void method_12976( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<const reco::PFJet*,std::vector<reco::PFJet> >)((((const ::std::vector<reco::PFJet>*)o)->end)());
  else   (((const ::std::vector<reco::PFJet>*)o)->end)();
}

static  void method_12981( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::std::vector<reco::PFJet>*)o)->size)());
  else   (((const ::std::vector<reco::PFJet>*)o)->size)();
}

static  void method_12982( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::std::vector<reco::PFJet>*)o)->max_size)());
  else   (((const ::std::vector<reco::PFJet>*)o)->max_size)();
}

static  void method_12983( void*, void* o, const std::vector<void*>& arg, void*)
{
  if ( arg.size() == 1 ) {
    (((::std::vector<reco::PFJet>*)o)->resize)(*(::std::size_t*)arg[0]);
  }
  else if ( arg.size() == 2 ) { 
    (((::std::vector<reco::PFJet>*)o)->resize)(*(::std::size_t*)arg[0],
      *(::reco::PFJet*)arg[1]);
  }
}

static  void method_12984( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::std::vector<reco::PFJet>*)o)->capacity)());
  else   (((const ::std::vector<reco::PFJet>*)o)->capacity)();
}

static  void method_12985( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::std::vector<reco::PFJet>*)o)->empty)());
  else   (((const ::std::vector<reco::PFJet>*)o)->empty)();
}

static  void method_12986( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<reco::PFJet>*)o)->reserve)(*(::std::size_t*)arg[0]);
}

static  void operator_12987( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<reco::PFJet>*)o)->operator[])(*(::std::size_t*)arg[0]);
  else   (((::std::vector<reco::PFJet>*)o)->operator[])(*(::std::size_t*)arg[0]);
}

static  void operator_12988( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<reco::PFJet>*)o)->operator[])(*(::std::size_t*)arg[0]);
  else   (((const ::std::vector<reco::PFJet>*)o)->operator[])(*(::std::size_t*)arg[0]);
}

static  void method_12990( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<reco::PFJet>*)o)->at)(*(::std::size_t*)arg[0]);
  else   (((::std::vector<reco::PFJet>*)o)->at)(*(::std::size_t*)arg[0]);
}

static  void method_12991( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<reco::PFJet>*)o)->at)(*(::std::size_t*)arg[0]);
  else   (((const ::std::vector<reco::PFJet>*)o)->at)(*(::std::size_t*)arg[0]);
}

static  void method_12992( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<reco::PFJet>*)o)->front)();
  else   (((::std::vector<reco::PFJet>*)o)->front)();
}

static  void method_12993( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<reco::PFJet>*)o)->front)();
  else   (((const ::std::vector<reco::PFJet>*)o)->front)();
}

static  void method_12994( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<reco::PFJet>*)o)->back)();
  else   (((::std::vector<reco::PFJet>*)o)->back)();
}

static  void method_12995( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<reco::PFJet>*)o)->back)();
  else   (((const ::std::vector<reco::PFJet>*)o)->back)();
}

static  void method_12996( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((::std::vector<reco::PFJet>*)o)->data)());
  else   (((::std::vector<reco::PFJet>*)o)->data)();
}

static  void method_12997( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::std::vector<reco::PFJet>*)o)->data)());
  else   (((const ::std::vector<reco::PFJet>*)o)->data)();
}

static  void method_12998( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<reco::PFJet>*)o)->push_back)(*(const ::reco::PFJet*)arg[0]);
}

static  void method_12999( void*, void* o, const std::vector<void*>&, void*)
{
  (((::std::vector<reco::PFJet>*)o)->pop_back)();
}

static  void method_13000( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<reco::PFJet*,std::vector<reco::PFJet> >)((((::std::vector<reco::PFJet>*)o)->insert)(*(::__gnu_cxx::__normal_iterator<reco::PFJet*,std::vector<reco::PFJet> >*)arg[0],
    *(const ::reco::PFJet*)arg[1]));
  else   (((::std::vector<reco::PFJet>*)o)->insert)(*(::__gnu_cxx::__normal_iterator<reco::PFJet*,std::vector<reco::PFJet> >*)arg[0],
    *(const ::reco::PFJet*)arg[1]);
}

static  void method_13001( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<reco::PFJet>*)o)->insert)(*(::__gnu_cxx::__normal_iterator<reco::PFJet*,std::vector<reco::PFJet> >*)arg[0],
    *(::std::size_t*)arg[1],
    *(const ::reco::PFJet*)arg[2]);
}

static  void method_13002( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<reco::PFJet*,std::vector<reco::PFJet> >)((((::std::vector<reco::PFJet>*)o)->erase)(*(::__gnu_cxx::__normal_iterator<reco::PFJet*,std::vector<reco::PFJet> >*)arg[0]));
  else   (((::std::vector<reco::PFJet>*)o)->erase)(*(::__gnu_cxx::__normal_iterator<reco::PFJet*,std::vector<reco::PFJet> >*)arg[0]);
}

static  void method_13003( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<reco::PFJet*,std::vector<reco::PFJet> >)((((::std::vector<reco::PFJet>*)o)->erase)(*(::__gnu_cxx::__normal_iterator<reco::PFJet*,std::vector<reco::PFJet> >*)arg[0],
    *(::__gnu_cxx::__normal_iterator<reco::PFJet*,std::vector<reco::PFJet> >*)arg[1]));
  else   (((::std::vector<reco::PFJet>*)o)->erase)(*(::__gnu_cxx::__normal_iterator<reco::PFJet*,std::vector<reco::PFJet> >*)arg[0],
    *(::__gnu_cxx::__normal_iterator<reco::PFJet*,std::vector<reco::PFJet> >*)arg[1]);
}

static  void method_13004( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<reco::PFJet>*)o)->swap)(*(::std::vector<reco::PFJet>*)arg[0]);
}

static  void method_13005( void*, void* o, const std::vector<void*>&, void*)
{
  (((::std::vector<reco::PFJet>*)o)->clear)();
}

static void method_newdel_2971( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::std::vector<reco::PFJet> >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::std::vector<reco::PFJet> >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::std::vector<reco::PFJet> >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::std::vector<reco::PFJet> >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::std::vector<reco::PFJet> >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

static void method_x12( void* retaddr, void*, const std::vector<void*>&, void*)
{
  typedef std::vector<std::pair< ::Reflex::Base, int> > Bases_t;
  static Bases_t s_bases;
  if ( !s_bases.size() ) {
    s_bases.push_back(std::make_pair(::Reflex::Base( ::Reflex::TypeBuilder(Reflex::Literal("std::_Vector_base<reco::PFJet,std::allocator<reco::PFJet> >")), ::Reflex::BaseOffset< ::std::vector<reco::PFJet>,::std::_Vector_base<reco::PFJet,std::allocator<reco::PFJet> > >::Get(),::Reflex::PROTECTED), 0));
  }
  if (retaddr) *(Bases_t**)retaddr = &s_bases;
}

static void method_x13( void* retaddr, void*, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**) retaddr = ::Reflex::Proxy< ::std::vector<reco::PFJet> >::Generate();
  else ::Reflex::Proxy< ::std::vector<reco::PFJet> >::Generate();
}

//------Dictionary for class vector<reco::PFJet,std::allocator<reco::PFJet> > -------------------------------
void __std__vector_reco__PFJet__db_datamem(Reflex::Class*);
void __std__vector_reco__PFJet__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __std__vector_reco__PFJet__datamem_bld(&__std__vector_reco__PFJet__db_datamem);
Reflex::GenreflexMemberBuilder __std__vector_reco__PFJet__funcmem_bld(&__std__vector_reco__PFJet__db_funcmem);
void __std__vector_reco__PFJet__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("std::vector<reco::PFJet>"), typeid(::std::vector<reco::PFJet>), sizeof(::std::vector<reco::PFJet>), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddBase(type_2464, ::Reflex::BaseOffset< ::std::vector<reco::PFJet>, ::std::_Vector_base<reco::PFJet,std::allocator<reco::PFJet> > >::Get(), ::Reflex::PROTECTED)
  .AddTypedef(type_7463, Reflex::Literal("std::vector<reco::PFJet>::_Alloc_value_type"))
  .AddTypedef(type_2464, Reflex::Literal("std::vector<reco::PFJet>::_Base"))
  .AddTypedef(type_3226, Reflex::Literal("std::vector<reco::PFJet>::_Tp_alloc_type"))
  .AddTypedef(type_7977, Reflex::Literal("std::vector<reco::PFJet>::_Alloc_traits"))
  .AddTypedef(type_7463, Reflex::Literal("std::vector<reco::PFJet>::value_type"))
  .AddTypedef(type_9120, Reflex::Literal("std::vector<reco::PFJet>::pointer"))
  .AddTypedef(type_12953, Reflex::Literal("std::vector<reco::PFJet>::const_pointer"))
  .AddTypedef(type_12955, Reflex::Literal("std::vector<reco::PFJet>::reference"))
  .AddTypedef(type_12957, Reflex::Literal("std::vector<reco::PFJet>::const_reference"))
  .AddTypedef(type_7869, Reflex::Literal("std::vector<reco::PFJet>::iterator"))
  .AddTypedef(type_7870, Reflex::Literal("std::vector<reco::PFJet>::const_iterator"))
  .AddTypedef(type_3455, Reflex::Literal("std::vector<reco::PFJet>::const_reverse_iterator"))
  .AddTypedef(type_3456, Reflex::Literal("std::vector<reco::PFJet>::reverse_iterator"))
  .AddTypedef(type_3189, Reflex::Literal("std::vector<reco::PFJet>::size_type"))
  .AddTypedef(type_3096, Reflex::Literal("std::vector<reco::PFJet>::difference_type"))
  .AddTypedef(type_3226, Reflex::Literal("std::vector<reco::PFJet>::allocator_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("vector"), constructor_12966, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_29691), Reflex::Literal("vector"), constructor_12967, 0, "__a", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_3189, type_12957, type_29691), Reflex::Literal("vector"), constructor_12968, 0, "__n;__value=_Tp();__a=_Alloc()", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_18708), Reflex::Literal("vector"), constructor_12969, 0, "__x", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~vector"), destructor_12970, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_2971, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getBasesTable"), method_x12, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddFunctionMember<void*(void)>(Reflex::Literal("createCollFuncTable"), method_x13, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandFunctionMemberBuilder(&__std__vector_reco__PFJet__funcmem_bld);
}

//------Delayed data member builder for class vector<reco::PFJet,std::allocator<reco::PFJet> > -------------------
void __std__vector_reco__PFJet__db_datamem(Reflex::Class*) {

}
//------Delayed function member builder for class vector<reco::PFJet,std::allocator<reco::PFJet> > -------------------
void __std__vector_reco__PFJet__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_30615, type_18708), Reflex::Literal("operator="), operator_12971, 0, "__x", ::Reflex::PUBLIC | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_3189, type_12957), Reflex::Literal("assign"), method_12972, 0, "__n;__val", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_7869), Reflex::Literal("begin"), method_12973, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_7870), Reflex::Literal("begin"), method_12974, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_7869), Reflex::Literal("end"), method_12975, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_7870), Reflex::Literal("end"), method_12976, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3189), Reflex::Literal("size"), method_12981, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3189), Reflex::Literal("max_size"), method_12982, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_3189, type_7463), Reflex::Literal("resize"), method_12983, 0, "__new_size;__x=_Tp()", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3189), Reflex::Literal("capacity"), method_12984, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("empty"), method_12985, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_3189), Reflex::Literal("reserve"), method_12986, 0, "__n", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_12955, type_3189), Reflex::Literal("operator[]"), operator_12987, 0, "__n", ::Reflex::PUBLIC | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_12957, type_3189), Reflex::Literal("operator[]"), operator_12988, 0, "__n", ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_12955, type_3189), Reflex::Literal("at"), method_12990, 0, "__n", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_12957, type_3189), Reflex::Literal("at"), method_12991, 0, "__n", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_12955), Reflex::Literal("front"), method_12992, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_12957), Reflex::Literal("front"), method_12993, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_12955), Reflex::Literal("back"), method_12994, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_12957), Reflex::Literal("back"), method_12995, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_9120), Reflex::Literal("data"), method_12996, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_12953), Reflex::Literal("data"), method_12997, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_12957), Reflex::Literal("push_back"), method_12998, 0, "__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680), Reflex::Literal("pop_back"), method_12999, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_7869, type_7869, type_12957), Reflex::Literal("insert"), method_13000, 0, "__position;__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_7869, type_3189, type_12957), Reflex::Literal("insert"), method_13001, 0, "__position;__n;__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_7869, type_7869), Reflex::Literal("erase"), method_13002, 0, "__position", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_7869, type_7869, type_7869), Reflex::Literal("erase"), method_13003, 0, "__first;__last", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_30615), Reflex::Literal("swap"), method_13004, 0, "__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680), Reflex::Literal("clear"), method_13005, 0, 0, ::Reflex::PUBLIC);
}
//------Stub functions for class BasicJet -------------------------------
static  void operator_25060( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::reco::BasicJet*)o)->operator=)(*(const ::reco::BasicJet*)arg[0]);
  else   (((::reco::BasicJet*)o)->operator=)(*(const ::reco::BasicJet*)arg[0]);
}

static void constructor_25061( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::reco::BasicJet(*(const ::reco::BasicJet*)arg[0]);
  else ::new(mem) ::reco::BasicJet(*(const ::reco::BasicJet*)arg[0]);
}

static void constructor_25062( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::reco::BasicJet();
  else ::new(mem) ::reco::BasicJet();
}

static void constructor_25063( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::reco::BasicJet(*(const ::math::XYZTLorentzVector*)arg[0],
      *(const ::math::XYZPoint*)arg[1]);
  else ::new(mem) ::reco::BasicJet(*(const ::math::XYZTLorentzVector*)arg[0],
      *(const ::math::XYZPoint*)arg[1]);
}

static void constructor_25064( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::reco::BasicJet(*(const ::math::XYZTLorentzVector*)arg[0],
      *(const ::math::XYZPoint*)arg[1],
      *(const ::std::vector<edm::Ptr<reco::Candidate> >*)arg[2]);
  else ::new(mem) ::reco::BasicJet(*(const ::math::XYZTLorentzVector*)arg[0],
      *(const ::math::XYZPoint*)arg[1],
      *(const ::std::vector<edm::Ptr<reco::Candidate> >*)arg[2]);
}

static void destructor_25065(void*, void * o, const std::vector<void*>&, void *) {
(((::reco::BasicJet*)o)->::reco::BasicJet::~BasicJet)();
}
static  void method_25066( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::reco::BasicJet*)o)->clone)());
  else   (((const ::reco::BasicJet*)o)->clone)();
}

static  void method_25067( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::string)((((const ::reco::BasicJet*)o)->print)());
  else   (((const ::reco::BasicJet*)o)->print)();
}

static void method_newdel_7564( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::reco::BasicJet >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::reco::BasicJet >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::reco::BasicJet >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::reco::BasicJet >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::reco::BasicJet >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

static void method_x15( void* retaddr, void*, const std::vector<void*>&, void*)
{
  typedef std::vector<std::pair< ::Reflex::Base, int> > Bases_t;
  static Bases_t s_bases;
  if ( !s_bases.size() ) {
    s_bases.push_back(std::make_pair(::Reflex::Base( ::Reflex::TypeBuilder(Reflex::Literal("reco::Jet")), ::Reflex::BaseOffset< ::reco::BasicJet,::reco::Jet >::Get(),::Reflex::PUBLIC), 0));
    s_bases.push_back(std::make_pair(::Reflex::Base( ::Reflex::TypeBuilder(Reflex::Literal("reco::CompositePtrCandidate")), ::Reflex::BaseOffset< ::reco::BasicJet,::reco::CompositePtrCandidate >::Get(),::Reflex::PUBLIC), 1));
    s_bases.push_back(std::make_pair(::Reflex::Base( ::Reflex::TypeBuilder(Reflex::Literal("reco::LeafCandidate")), ::Reflex::BaseOffset< ::reco::BasicJet,::reco::LeafCandidate >::Get(),::Reflex::PUBLIC), 2));
    s_bases.push_back(std::make_pair(::Reflex::Base( ::Reflex::TypeBuilder(Reflex::Literal("reco::Candidate")), ::Reflex::BaseOffset< ::reco::BasicJet,::reco::Candidate >::Get(),::Reflex::PUBLIC), 3));
  }
  if (retaddr) *(Bases_t**)retaddr = &s_bases;
}

//------Dictionary for class BasicJet -------------------------------
void __reco__BasicJet_db_datamem(Reflex::Class*);
void __reco__BasicJet_db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __reco__BasicJet_datamem_bld(&__reco__BasicJet_db_datamem);
Reflex::GenreflexMemberBuilder __reco__BasicJet_funcmem_bld(&__reco__BasicJet_db_funcmem);
void __reco__BasicJet_dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("reco::BasicJet"), typeid(::reco::BasicJet), sizeof(::reco::BasicJet), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::VIRTUAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("ClassVersion"), "10")
  .AddBase(type_7485, ::Reflex::BaseOffset< ::reco::BasicJet, ::reco::Jet >::Get(), ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13410, type_13412), Reflex::Literal("operator="), operator_25060, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_13412), Reflex::Literal("BasicJet"), constructor_25061, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("BasicJet"), constructor_25062, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_23124, type_23126), Reflex::Literal("BasicJet"), constructor_25063, 0, "fP4;fVertex", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_23124, type_23126, type_30674), Reflex::Literal("BasicJet"), constructor_25064, 0, "fP4;fVertex;fConstituents", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~BasicJet"), destructor_25065, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::DESTRUCTOR )
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_7564, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getBasesTable"), method_x15, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandFunctionMemberBuilder(&__reco__BasicJet_funcmem_bld);
}

//------Delayed data member builder for class BasicJet -------------------
void __reco__BasicJet_db_datamem(Reflex::Class*) {

}
//------Delayed function member builder for class BasicJet -------------------
void __reco__BasicJet_db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_9346), Reflex::Literal("clone"), method_25066, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2504), Reflex::Literal("print"), method_25067, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST);
}
//------Stub functions for class vector<reco::BasicJet,std::allocator<reco::BasicJet> > -------------------------------
static void constructor_13421( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<reco::BasicJet>();
  else ::new(mem) ::std::vector<reco::BasicJet>();
}

static void constructor_13422( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<reco::BasicJet>(*(const ::std::allocator<reco::BasicJet>*)arg[0]);
  else ::new(mem) ::std::vector<reco::BasicJet>(*(const ::std::allocator<reco::BasicJet>*)arg[0]);
}

static void constructor_13423( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if ( arg.size() == 1 ) {
    if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<reco::BasicJet>(*(::std::size_t*)arg[0]);
  else ::new(mem) ::std::vector<reco::BasicJet>(*(::std::size_t*)arg[0]);
  }
  else if ( arg.size() == 2 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<reco::BasicJet>(*(::std::size_t*)arg[0],
      *(const ::reco::BasicJet*)arg[1]);
  else ::new(mem) ::std::vector<reco::BasicJet>(*(::std::size_t*)arg[0],
      *(const ::reco::BasicJet*)arg[1]);
  }
  else if ( arg.size() == 3 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<reco::BasicJet>(*(::std::size_t*)arg[0],
      *(const ::reco::BasicJet*)arg[1],
      *(const ::std::allocator<reco::BasicJet>*)arg[2]);
  else ::new(mem) ::std::vector<reco::BasicJet>(*(::std::size_t*)arg[0],
      *(const ::reco::BasicJet*)arg[1],
      *(const ::std::allocator<reco::BasicJet>*)arg[2]);
  }
}

static void constructor_13424( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<reco::BasicJet>(*(const ::std::vector<reco::BasicJet>*)arg[0]);
  else ::new(mem) ::std::vector<reco::BasicJet>(*(const ::std::vector<reco::BasicJet>*)arg[0]);
}

static void destructor_13425(void*, void * o, const std::vector<void*>&, void *) {
(((::std::vector<reco::BasicJet>*)o)->::std::vector<reco::BasicJet>::~vector)();
}
static  void operator_13426( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<reco::BasicJet>*)o)->operator=)(*(const ::std::vector<reco::BasicJet>*)arg[0]);
  else   (((::std::vector<reco::BasicJet>*)o)->operator=)(*(const ::std::vector<reco::BasicJet>*)arg[0]);
}

static  void method_13427( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<reco::BasicJet>*)o)->assign)(*(::std::size_t*)arg[0],
    *(const ::reco::BasicJet*)arg[1]);
}

static  void method_13428( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<reco::BasicJet*,std::vector<reco::BasicJet> >)((((::std::vector<reco::BasicJet>*)o)->begin)());
  else   (((::std::vector<reco::BasicJet>*)o)->begin)();
}

static  void method_13429( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<const reco::BasicJet*,std::vector<reco::BasicJet> >)((((const ::std::vector<reco::BasicJet>*)o)->begin)());
  else   (((const ::std::vector<reco::BasicJet>*)o)->begin)();
}

static  void method_13430( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<reco::BasicJet*,std::vector<reco::BasicJet> >)((((::std::vector<reco::BasicJet>*)o)->end)());
  else   (((::std::vector<reco::BasicJet>*)o)->end)();
}

static  void method_13431( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<const reco::BasicJet*,std::vector<reco::BasicJet> >)((((const ::std::vector<reco::BasicJet>*)o)->end)());
  else   (((const ::std::vector<reco::BasicJet>*)o)->end)();
}

static  void method_13436( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::std::vector<reco::BasicJet>*)o)->size)());
  else   (((const ::std::vector<reco::BasicJet>*)o)->size)();
}

static  void method_13437( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::std::vector<reco::BasicJet>*)o)->max_size)());
  else   (((const ::std::vector<reco::BasicJet>*)o)->max_size)();
}

static  void method_13438( void*, void* o, const std::vector<void*>& arg, void*)
{
  if ( arg.size() == 1 ) {
    (((::std::vector<reco::BasicJet>*)o)->resize)(*(::std::size_t*)arg[0]);
  }
  else if ( arg.size() == 2 ) { 
    (((::std::vector<reco::BasicJet>*)o)->resize)(*(::std::size_t*)arg[0],
      *(::reco::BasicJet*)arg[1]);
  }
}

static  void method_13439( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::std::vector<reco::BasicJet>*)o)->capacity)());
  else   (((const ::std::vector<reco::BasicJet>*)o)->capacity)();
}

static  void method_13440( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::std::vector<reco::BasicJet>*)o)->empty)());
  else   (((const ::std::vector<reco::BasicJet>*)o)->empty)();
}

static  void method_13441( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<reco::BasicJet>*)o)->reserve)(*(::std::size_t*)arg[0]);
}

static  void operator_13442( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<reco::BasicJet>*)o)->operator[])(*(::std::size_t*)arg[0]);
  else   (((::std::vector<reco::BasicJet>*)o)->operator[])(*(::std::size_t*)arg[0]);
}

static  void operator_13443( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<reco::BasicJet>*)o)->operator[])(*(::std::size_t*)arg[0]);
  else   (((const ::std::vector<reco::BasicJet>*)o)->operator[])(*(::std::size_t*)arg[0]);
}

static  void method_13445( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<reco::BasicJet>*)o)->at)(*(::std::size_t*)arg[0]);
  else   (((::std::vector<reco::BasicJet>*)o)->at)(*(::std::size_t*)arg[0]);
}

static  void method_13446( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<reco::BasicJet>*)o)->at)(*(::std::size_t*)arg[0]);
  else   (((const ::std::vector<reco::BasicJet>*)o)->at)(*(::std::size_t*)arg[0]);
}

static  void method_13447( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<reco::BasicJet>*)o)->front)();
  else   (((::std::vector<reco::BasicJet>*)o)->front)();
}

static  void method_13448( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<reco::BasicJet>*)o)->front)();
  else   (((const ::std::vector<reco::BasicJet>*)o)->front)();
}

static  void method_13449( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<reco::BasicJet>*)o)->back)();
  else   (((::std::vector<reco::BasicJet>*)o)->back)();
}

static  void method_13450( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<reco::BasicJet>*)o)->back)();
  else   (((const ::std::vector<reco::BasicJet>*)o)->back)();
}

static  void method_13451( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((::std::vector<reco::BasicJet>*)o)->data)());
  else   (((::std::vector<reco::BasicJet>*)o)->data)();
}

static  void method_13452( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::std::vector<reco::BasicJet>*)o)->data)());
  else   (((const ::std::vector<reco::BasicJet>*)o)->data)();
}

static  void method_13453( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<reco::BasicJet>*)o)->push_back)(*(const ::reco::BasicJet*)arg[0]);
}

static  void method_13454( void*, void* o, const std::vector<void*>&, void*)
{
  (((::std::vector<reco::BasicJet>*)o)->pop_back)();
}

static  void method_13455( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<reco::BasicJet*,std::vector<reco::BasicJet> >)((((::std::vector<reco::BasicJet>*)o)->insert)(*(::__gnu_cxx::__normal_iterator<reco::BasicJet*,std::vector<reco::BasicJet> >*)arg[0],
    *(const ::reco::BasicJet*)arg[1]));
  else   (((::std::vector<reco::BasicJet>*)o)->insert)(*(::__gnu_cxx::__normal_iterator<reco::BasicJet*,std::vector<reco::BasicJet> >*)arg[0],
    *(const ::reco::BasicJet*)arg[1]);
}

static  void method_13456( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<reco::BasicJet>*)o)->insert)(*(::__gnu_cxx::__normal_iterator<reco::BasicJet*,std::vector<reco::BasicJet> >*)arg[0],
    *(::std::size_t*)arg[1],
    *(const ::reco::BasicJet*)arg[2]);
}

static  void method_13457( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<reco::BasicJet*,std::vector<reco::BasicJet> >)((((::std::vector<reco::BasicJet>*)o)->erase)(*(::__gnu_cxx::__normal_iterator<reco::BasicJet*,std::vector<reco::BasicJet> >*)arg[0]));
  else   (((::std::vector<reco::BasicJet>*)o)->erase)(*(::__gnu_cxx::__normal_iterator<reco::BasicJet*,std::vector<reco::BasicJet> >*)arg[0]);
}

static  void method_13458( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<reco::BasicJet*,std::vector<reco::BasicJet> >)((((::std::vector<reco::BasicJet>*)o)->erase)(*(::__gnu_cxx::__normal_iterator<reco::BasicJet*,std::vector<reco::BasicJet> >*)arg[0],
    *(::__gnu_cxx::__normal_iterator<reco::BasicJet*,std::vector<reco::BasicJet> >*)arg[1]));
  else   (((::std::vector<reco::BasicJet>*)o)->erase)(*(::__gnu_cxx::__normal_iterator<reco::BasicJet*,std::vector<reco::BasicJet> >*)arg[0],
    *(::__gnu_cxx::__normal_iterator<reco::BasicJet*,std::vector<reco::BasicJet> >*)arg[1]);
}

static  void method_13459( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<reco::BasicJet>*)o)->swap)(*(::std::vector<reco::BasicJet>*)arg[0]);
}

static  void method_13460( void*, void* o, const std::vector<void*>&, void*)
{
  (((::std::vector<reco::BasicJet>*)o)->clear)();
}

static void method_newdel_2983( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::std::vector<reco::BasicJet> >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::std::vector<reco::BasicJet> >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::std::vector<reco::BasicJet> >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::std::vector<reco::BasicJet> >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::std::vector<reco::BasicJet> >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

static void method_x17( void* retaddr, void*, const std::vector<void*>&, void*)
{
  typedef std::vector<std::pair< ::Reflex::Base, int> > Bases_t;
  static Bases_t s_bases;
  if ( !s_bases.size() ) {
    s_bases.push_back(std::make_pair(::Reflex::Base( ::Reflex::TypeBuilder(Reflex::Literal("std::_Vector_base<reco::BasicJet,std::allocator<reco::BasicJet> >")), ::Reflex::BaseOffset< ::std::vector<reco::BasicJet>,::std::_Vector_base<reco::BasicJet,std::allocator<reco::BasicJet> > >::Get(),::Reflex::PROTECTED), 0));
  }
  if (retaddr) *(Bases_t**)retaddr = &s_bases;
}

static void method_x18( void* retaddr, void*, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**) retaddr = ::Reflex::Proxy< ::std::vector<reco::BasicJet> >::Generate();
  else ::Reflex::Proxy< ::std::vector<reco::BasicJet> >::Generate();
}

//------Dictionary for class vector<reco::BasicJet,std::allocator<reco::BasicJet> > -------------------------------
void __std__vector_reco__BasicJet__db_datamem(Reflex::Class*);
void __std__vector_reco__BasicJet__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __std__vector_reco__BasicJet__datamem_bld(&__std__vector_reco__BasicJet__db_datamem);
Reflex::GenreflexMemberBuilder __std__vector_reco__BasicJet__funcmem_bld(&__std__vector_reco__BasicJet__db_funcmem);
void __std__vector_reco__BasicJet__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("std::vector<reco::BasicJet>"), typeid(::std::vector<reco::BasicJet>), sizeof(::std::vector<reco::BasicJet>), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddBase(type_2476, ::Reflex::BaseOffset< ::std::vector<reco::BasicJet>, ::std::_Vector_base<reco::BasicJet,std::allocator<reco::BasicJet> > >::Get(), ::Reflex::PROTECTED)
  .AddTypedef(type_7564, Reflex::Literal("std::vector<reco::BasicJet>::_Alloc_value_type"))
  .AddTypedef(type_2476, Reflex::Literal("std::vector<reco::BasicJet>::_Base"))
  .AddTypedef(type_3247, Reflex::Literal("std::vector<reco::BasicJet>::_Tp_alloc_type"))
  .AddTypedef(type_7989, Reflex::Literal("std::vector<reco::BasicJet>::_Alloc_traits"))
  .AddTypedef(type_7564, Reflex::Literal("std::vector<reco::BasicJet>::value_type"))
  .AddTypedef(type_9346, Reflex::Literal("std::vector<reco::BasicJet>::pointer"))
  .AddTypedef(type_13408, Reflex::Literal("std::vector<reco::BasicJet>::const_pointer"))
  .AddTypedef(type_13410, Reflex::Literal("std::vector<reco::BasicJet>::reference"))
  .AddTypedef(type_13412, Reflex::Literal("std::vector<reco::BasicJet>::const_reference"))
  .AddTypedef(type_7888, Reflex::Literal("std::vector<reco::BasicJet>::iterator"))
  .AddTypedef(type_7889, Reflex::Literal("std::vector<reco::BasicJet>::const_iterator"))
  .AddTypedef(type_3479, Reflex::Literal("std::vector<reco::BasicJet>::const_reverse_iterator"))
  .AddTypedef(type_3480, Reflex::Literal("std::vector<reco::BasicJet>::reverse_iterator"))
  .AddTypedef(type_3189, Reflex::Literal("std::vector<reco::BasicJet>::size_type"))
  .AddTypedef(type_3096, Reflex::Literal("std::vector<reco::BasicJet>::difference_type"))
  .AddTypedef(type_3247, Reflex::Literal("std::vector<reco::BasicJet>::allocator_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("vector"), constructor_13421, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_29847), Reflex::Literal("vector"), constructor_13422, 0, "__a", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_3189, type_13412, type_29847), Reflex::Literal("vector"), constructor_13423, 0, "__n;__value=_Tp();__a=_Alloc()", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_18732), Reflex::Literal("vector"), constructor_13424, 0, "__x", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~vector"), destructor_13425, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_2983, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getBasesTable"), method_x17, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddFunctionMember<void*(void)>(Reflex::Literal("createCollFuncTable"), method_x18, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandFunctionMemberBuilder(&__std__vector_reco__BasicJet__funcmem_bld);
}

//------Delayed data member builder for class vector<reco::BasicJet,std::allocator<reco::BasicJet> > -------------------
void __std__vector_reco__BasicJet__db_datamem(Reflex::Class*) {

}
//------Delayed function member builder for class vector<reco::BasicJet,std::allocator<reco::BasicJet> > -------------------
void __std__vector_reco__BasicJet__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_30634, type_18732), Reflex::Literal("operator="), operator_13426, 0, "__x", ::Reflex::PUBLIC | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_3189, type_13412), Reflex::Literal("assign"), method_13427, 0, "__n;__val", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_7888), Reflex::Literal("begin"), method_13428, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_7889), Reflex::Literal("begin"), method_13429, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_7888), Reflex::Literal("end"), method_13430, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_7889), Reflex::Literal("end"), method_13431, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3189), Reflex::Literal("size"), method_13436, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3189), Reflex::Literal("max_size"), method_13437, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_3189, type_7564), Reflex::Literal("resize"), method_13438, 0, "__new_size;__x=_Tp()", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3189), Reflex::Literal("capacity"), method_13439, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("empty"), method_13440, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_3189), Reflex::Literal("reserve"), method_13441, 0, "__n", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13410, type_3189), Reflex::Literal("operator[]"), operator_13442, 0, "__n", ::Reflex::PUBLIC | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13412, type_3189), Reflex::Literal("operator[]"), operator_13443, 0, "__n", ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13410, type_3189), Reflex::Literal("at"), method_13445, 0, "__n", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13412, type_3189), Reflex::Literal("at"), method_13446, 0, "__n", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13410), Reflex::Literal("front"), method_13447, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13412), Reflex::Literal("front"), method_13448, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13410), Reflex::Literal("back"), method_13449, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13412), Reflex::Literal("back"), method_13450, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_9346), Reflex::Literal("data"), method_13451, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13408), Reflex::Literal("data"), method_13452, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_13412), Reflex::Literal("push_back"), method_13453, 0, "__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680), Reflex::Literal("pop_back"), method_13454, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_7888, type_7888, type_13412), Reflex::Literal("insert"), method_13455, 0, "__position;__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_7888, type_3189, type_13412), Reflex::Literal("insert"), method_13456, 0, "__position;__n;__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_7888, type_7888), Reflex::Literal("erase"), method_13457, 0, "__position", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_7888, type_7888, type_7888), Reflex::Literal("erase"), method_13458, 0, "__first;__last", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_30634), Reflex::Literal("swap"), method_13459, 0, "__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680), Reflex::Literal("clear"), method_13460, 0, 0, ::Reflex::PUBLIC);
}
//------Stub functions for class GenJet -------------------------------
static  void operator_24676( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::reco::GenJet*)o)->operator=)(*(const ::reco::GenJet*)arg[0]);
  else   (((::reco::GenJet*)o)->operator=)(*(const ::reco::GenJet*)arg[0]);
}

static void constructor_24677( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::reco::GenJet(*(const ::reco::GenJet*)arg[0]);
  else ::new(mem) ::reco::GenJet(*(const ::reco::GenJet*)arg[0]);
}

static void constructor_24678( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::reco::GenJet();
  else ::new(mem) ::reco::GenJet();
}

static void constructor_24679( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::reco::GenJet(*(const ::math::XYZTLorentzVector*)arg[0],
      *(const ::math::XYZPoint*)arg[1],
      *(const ::reco::GenJet::Specific*)arg[2],
      *(const ::std::vector<edm::Ptr<reco::Candidate> >*)arg[3]);
  else ::new(mem) ::reco::GenJet(*(const ::math::XYZTLorentzVector*)arg[0],
      *(const ::math::XYZPoint*)arg[1],
      *(const ::reco::GenJet::Specific*)arg[2],
      *(const ::std::vector<edm::Ptr<reco::Candidate> >*)arg[3]);
}

static void constructor_24680( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::reco::GenJet(*(const ::math::XYZTLorentzVector*)arg[0],
      *(const ::math::XYZPoint*)arg[1],
      *(const ::reco::GenJet::Specific*)arg[2]);
  else ::new(mem) ::reco::GenJet(*(const ::math::XYZTLorentzVector*)arg[0],
      *(const ::math::XYZPoint*)arg[1],
      *(const ::reco::GenJet::Specific*)arg[2]);
}

static void constructor_24681( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::reco::GenJet(*(const ::math::XYZTLorentzVector*)arg[0],
      *(const ::reco::GenJet::Specific*)arg[1],
      *(const ::std::vector<edm::Ptr<reco::Candidate> >*)arg[2]);
  else ::new(mem) ::reco::GenJet(*(const ::math::XYZTLorentzVector*)arg[0],
      *(const ::reco::GenJet::Specific*)arg[1],
      *(const ::std::vector<edm::Ptr<reco::Candidate> >*)arg[2]);
}

static void destructor_24682(void*, void * o, const std::vector<void*>&, void *) {
(((::reco::GenJet*)o)->::reco::GenJet::~GenJet)();
}
static  void method_24683( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (float)((((const ::reco::GenJet*)o)->emEnergy)());
  else   (((const ::reco::GenJet*)o)->emEnergy)();
}

static  void method_24684( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (float)((((const ::reco::GenJet*)o)->neEmEnergy)());
  else   (((const ::reco::GenJet*)o)->neEmEnergy)();
}

static  void method_24685( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (float)((((const ::reco::GenJet*)o)->hadEnergy)());
  else   (((const ::reco::GenJet*)o)->hadEnergy)();
}

static  void method_24686( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (float)((((const ::reco::GenJet*)o)->chHadEnergy)());
  else   (((const ::reco::GenJet*)o)->chHadEnergy)();
}

static  void method_24687( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (float)((((const ::reco::GenJet*)o)->muEnergy)());
  else   (((const ::reco::GenJet*)o)->muEnergy)();
}

static  void method_24688( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (float)((((const ::reco::GenJet*)o)->invisibleEnergy)());
  else   (((const ::reco::GenJet*)o)->invisibleEnergy)();
}

static  void method_24689( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (float)((((const ::reco::GenJet*)o)->auxiliaryEnergy)());
  else   (((const ::reco::GenJet*)o)->auxiliaryEnergy)();
}

static  void method_24690( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (float)((((const ::reco::GenJet*)o)->detectorEta)(*(float*)arg[0]));
  else   (((const ::reco::GenJet*)o)->detectorEta)(*(float*)arg[0]);
}

static  void method_24691( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((::reco::GenJet*)o)->genParticle)((const ::reco::Candidate*)arg[0]));
  else   (((::reco::GenJet*)o)->genParticle)((const ::reco::Candidate*)arg[0]);
}

static  void method_24692( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::reco::GenJet*)o)->getGenConstituent)(*(unsigned int*)arg[0]));
  else   (((const ::reco::GenJet*)o)->getGenConstituent)(*(unsigned int*)arg[0]);
}

static  void method_24693( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::vector<const reco::GenParticle*>)((((const ::reco::GenJet*)o)->getGenConstituents)());
  else   (((const ::reco::GenJet*)o)->getGenConstituents)();
}

static  void method_24694( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::reco::GenJet*)o)->getSpecific)();
  else   (((const ::reco::GenJet*)o)->getSpecific)();
}

static  void method_24695( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::reco::GenJet*)o)->setSpecific)(*(const ::reco::GenJet::Specific*)arg[0]);
}

static  void method_24696( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::reco::GenJet*)o)->clone)());
  else   (((const ::reco::GenJet*)o)->clone)();
}

static  void method_24697( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::string)((((const ::reco::GenJet*)o)->print)());
  else   (((const ::reco::GenJet*)o)->print)();
}

static void method_newdel_7512( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::reco::GenJet >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::reco::GenJet >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::reco::GenJet >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::reco::GenJet >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::reco::GenJet >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

static void method_x20( void* retaddr, void*, const std::vector<void*>&, void*)
{
  typedef std::vector<std::pair< ::Reflex::Base, int> > Bases_t;
  static Bases_t s_bases;
  if ( !s_bases.size() ) {
    s_bases.push_back(std::make_pair(::Reflex::Base( ::Reflex::TypeBuilder(Reflex::Literal("reco::Jet")), ::Reflex::BaseOffset< ::reco::GenJet,::reco::Jet >::Get(),::Reflex::PUBLIC), 0));
    s_bases.push_back(std::make_pair(::Reflex::Base( ::Reflex::TypeBuilder(Reflex::Literal("reco::CompositePtrCandidate")), ::Reflex::BaseOffset< ::reco::GenJet,::reco::CompositePtrCandidate >::Get(),::Reflex::PUBLIC), 1));
    s_bases.push_back(std::make_pair(::Reflex::Base( ::Reflex::TypeBuilder(Reflex::Literal("reco::LeafCandidate")), ::Reflex::BaseOffset< ::reco::GenJet,::reco::LeafCandidate >::Get(),::Reflex::PUBLIC), 2));
    s_bases.push_back(std::make_pair(::Reflex::Base( ::Reflex::TypeBuilder(Reflex::Literal("reco::Candidate")), ::Reflex::BaseOffset< ::reco::GenJet,::reco::Candidate >::Get(),::Reflex::PUBLIC), 3));
  }
  if (retaddr) *(Bases_t**)retaddr = &s_bases;
}

//------Dictionary for class GenJet -------------------------------
void __reco__GenJet_db_datamem(Reflex::Class*);
void __reco__GenJet_db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __reco__GenJet_datamem_bld(&__reco__GenJet_db_datamem);
Reflex::GenreflexMemberBuilder __reco__GenJet_funcmem_bld(&__reco__GenJet_db_funcmem);
void __reco__GenJet_dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("reco::GenJet"), typeid(::reco::GenJet), sizeof(::reco::GenJet), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::VIRTUAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("ClassVersion"), "10")
  .AddBase(type_7485, ::Reflex::BaseOffset< ::reco::GenJet, ::reco::Jet >::Get(), ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13605, type_13607), Reflex::Literal("operator="), operator_24676, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_13607), Reflex::Literal("GenJet"), constructor_24677, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("GenJet"), constructor_24678, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_23124, type_23126, type_34798, type_30674), Reflex::Literal("GenJet"), constructor_24679, 0, "fP4;fVertex;fSpecific;fConstituents", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_23124, type_23126, type_34798), Reflex::Literal("GenJet"), constructor_24680, 0, "fP4;fVertex;fSpecific", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_23124, type_34798, type_30674), Reflex::Literal("GenJet"), constructor_24681, 0, "fP4;fSpecific;fConstituents", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~GenJet"), destructor_24682, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::DESTRUCTOR )
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_7512, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getBasesTable"), method_x20, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__reco__GenJet_datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__reco__GenJet_funcmem_bld);
}

//------Delayed data member builder for class GenJet -------------------
void __reco__GenJet_db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_24675, Reflex::Literal("m_specific"), OffsetOf(__shadow__::__reco__GenJet, m_specific), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class GenJet -------------------
void __reco__GenJet_db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_878), Reflex::Literal("emEnergy"), method_24683, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_878), Reflex::Literal("neEmEnergy"), method_24684, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_878), Reflex::Literal("hadEnergy"), method_24685, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_878), Reflex::Literal("chHadEnergy"), method_24686, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_878), Reflex::Literal("muEnergy"), method_24687, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_878), Reflex::Literal("invisibleEnergy"), method_24688, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_878), Reflex::Literal("auxiliaryEnergy"), method_24689, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_878, type_878), Reflex::Literal("detectorEta"), method_24690, 0, "fZVertex", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_34799, type_33981), Reflex::Literal("genParticle"), method_24691, 0, "fConstituent", ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_34799, type_356), Reflex::Literal("getGenConstituent"), method_24692, 0, "fIndex", ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3002), Reflex::Literal("getGenConstituents"), method_24693, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_34798), Reflex::Literal("getSpecific"), method_24694, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_34798), Reflex::Literal("setSpecific"), method_24695, 0, "spec", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_9158), Reflex::Literal("clone"), method_24696, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2504), Reflex::Literal("print"), method_24697, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST);
}
//------Stub functions for class vector<reco::GenJet,std::allocator<reco::GenJet> > -------------------------------
static void constructor_13616( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<reco::GenJet>();
  else ::new(mem) ::std::vector<reco::GenJet>();
}

static void constructor_13617( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<reco::GenJet>(*(const ::std::allocator<reco::GenJet>*)arg[0]);
  else ::new(mem) ::std::vector<reco::GenJet>(*(const ::std::allocator<reco::GenJet>*)arg[0]);
}

static void constructor_13618( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if ( arg.size() == 1 ) {
    if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<reco::GenJet>(*(::std::size_t*)arg[0]);
  else ::new(mem) ::std::vector<reco::GenJet>(*(::std::size_t*)arg[0]);
  }
  else if ( arg.size() == 2 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<reco::GenJet>(*(::std::size_t*)arg[0],
      *(const ::reco::GenJet*)arg[1]);
  else ::new(mem) ::std::vector<reco::GenJet>(*(::std::size_t*)arg[0],
      *(const ::reco::GenJet*)arg[1]);
  }
  else if ( arg.size() == 3 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<reco::GenJet>(*(::std::size_t*)arg[0],
      *(const ::reco::GenJet*)arg[1],
      *(const ::std::allocator<reco::GenJet>*)arg[2]);
  else ::new(mem) ::std::vector<reco::GenJet>(*(::std::size_t*)arg[0],
      *(const ::reco::GenJet*)arg[1],
      *(const ::std::allocator<reco::GenJet>*)arg[2]);
  }
}

static void constructor_13619( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<reco::GenJet>(*(const ::std::vector<reco::GenJet>*)arg[0]);
  else ::new(mem) ::std::vector<reco::GenJet>(*(const ::std::vector<reco::GenJet>*)arg[0]);
}

static void destructor_13620(void*, void * o, const std::vector<void*>&, void *) {
(((::std::vector<reco::GenJet>*)o)->::std::vector<reco::GenJet>::~vector)();
}
static  void operator_13621( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<reco::GenJet>*)o)->operator=)(*(const ::std::vector<reco::GenJet>*)arg[0]);
  else   (((::std::vector<reco::GenJet>*)o)->operator=)(*(const ::std::vector<reco::GenJet>*)arg[0]);
}

static  void method_13622( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<reco::GenJet>*)o)->assign)(*(::std::size_t*)arg[0],
    *(const ::reco::GenJet*)arg[1]);
}

static  void method_13623( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<reco::GenJet*,std::vector<reco::GenJet> >)((((::std::vector<reco::GenJet>*)o)->begin)());
  else   (((::std::vector<reco::GenJet>*)o)->begin)();
}

static  void method_13624( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<const reco::GenJet*,std::vector<reco::GenJet> >)((((const ::std::vector<reco::GenJet>*)o)->begin)());
  else   (((const ::std::vector<reco::GenJet>*)o)->begin)();
}

static  void method_13625( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<reco::GenJet*,std::vector<reco::GenJet> >)((((::std::vector<reco::GenJet>*)o)->end)());
  else   (((::std::vector<reco::GenJet>*)o)->end)();
}

static  void method_13626( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<const reco::GenJet*,std::vector<reco::GenJet> >)((((const ::std::vector<reco::GenJet>*)o)->end)());
  else   (((const ::std::vector<reco::GenJet>*)o)->end)();
}

static  void method_13631( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::std::vector<reco::GenJet>*)o)->size)());
  else   (((const ::std::vector<reco::GenJet>*)o)->size)();
}

static  void method_13632( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::std::vector<reco::GenJet>*)o)->max_size)());
  else   (((const ::std::vector<reco::GenJet>*)o)->max_size)();
}

static  void method_13633( void*, void* o, const std::vector<void*>& arg, void*)
{
  if ( arg.size() == 1 ) {
    (((::std::vector<reco::GenJet>*)o)->resize)(*(::std::size_t*)arg[0]);
  }
  else if ( arg.size() == 2 ) { 
    (((::std::vector<reco::GenJet>*)o)->resize)(*(::std::size_t*)arg[0],
      *(::reco::GenJet*)arg[1]);
  }
}

static  void method_13634( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::std::vector<reco::GenJet>*)o)->capacity)());
  else   (((const ::std::vector<reco::GenJet>*)o)->capacity)();
}

static  void method_13635( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::std::vector<reco::GenJet>*)o)->empty)());
  else   (((const ::std::vector<reco::GenJet>*)o)->empty)();
}

static  void method_13636( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<reco::GenJet>*)o)->reserve)(*(::std::size_t*)arg[0]);
}

static  void operator_13637( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<reco::GenJet>*)o)->operator[])(*(::std::size_t*)arg[0]);
  else   (((::std::vector<reco::GenJet>*)o)->operator[])(*(::std::size_t*)arg[0]);
}

static  void operator_13638( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<reco::GenJet>*)o)->operator[])(*(::std::size_t*)arg[0]);
  else   (((const ::std::vector<reco::GenJet>*)o)->operator[])(*(::std::size_t*)arg[0]);
}

static  void method_13640( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<reco::GenJet>*)o)->at)(*(::std::size_t*)arg[0]);
  else   (((::std::vector<reco::GenJet>*)o)->at)(*(::std::size_t*)arg[0]);
}

static  void method_13641( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<reco::GenJet>*)o)->at)(*(::std::size_t*)arg[0]);
  else   (((const ::std::vector<reco::GenJet>*)o)->at)(*(::std::size_t*)arg[0]);
}

static  void method_13642( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<reco::GenJet>*)o)->front)();
  else   (((::std::vector<reco::GenJet>*)o)->front)();
}

static  void method_13643( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<reco::GenJet>*)o)->front)();
  else   (((const ::std::vector<reco::GenJet>*)o)->front)();
}

static  void method_13644( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<reco::GenJet>*)o)->back)();
  else   (((::std::vector<reco::GenJet>*)o)->back)();
}

static  void method_13645( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<reco::GenJet>*)o)->back)();
  else   (((const ::std::vector<reco::GenJet>*)o)->back)();
}

static  void method_13646( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((::std::vector<reco::GenJet>*)o)->data)());
  else   (((::std::vector<reco::GenJet>*)o)->data)();
}

static  void method_13647( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::std::vector<reco::GenJet>*)o)->data)());
  else   (((const ::std::vector<reco::GenJet>*)o)->data)();
}

static  void method_13648( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<reco::GenJet>*)o)->push_back)(*(const ::reco::GenJet*)arg[0]);
}

static  void method_13649( void*, void* o, const std::vector<void*>&, void*)
{
  (((::std::vector<reco::GenJet>*)o)->pop_back)();
}

static  void method_13650( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<reco::GenJet*,std::vector<reco::GenJet> >)((((::std::vector<reco::GenJet>*)o)->insert)(*(::__gnu_cxx::__normal_iterator<reco::GenJet*,std::vector<reco::GenJet> >*)arg[0],
    *(const ::reco::GenJet*)arg[1]));
  else   (((::std::vector<reco::GenJet>*)o)->insert)(*(::__gnu_cxx::__normal_iterator<reco::GenJet*,std::vector<reco::GenJet> >*)arg[0],
    *(const ::reco::GenJet*)arg[1]);
}

static  void method_13651( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<reco::GenJet>*)o)->insert)(*(::__gnu_cxx::__normal_iterator<reco::GenJet*,std::vector<reco::GenJet> >*)arg[0],
    *(::std::size_t*)arg[1],
    *(const ::reco::GenJet*)arg[2]);
}

static  void method_13652( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<reco::GenJet*,std::vector<reco::GenJet> >)((((::std::vector<reco::GenJet>*)o)->erase)(*(::__gnu_cxx::__normal_iterator<reco::GenJet*,std::vector<reco::GenJet> >*)arg[0]));
  else   (((::std::vector<reco::GenJet>*)o)->erase)(*(::__gnu_cxx::__normal_iterator<reco::GenJet*,std::vector<reco::GenJet> >*)arg[0]);
}

static  void method_13653( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<reco::GenJet*,std::vector<reco::GenJet> >)((((::std::vector<reco::GenJet>*)o)->erase)(*(::__gnu_cxx::__normal_iterator<reco::GenJet*,std::vector<reco::GenJet> >*)arg[0],
    *(::__gnu_cxx::__normal_iterator<reco::GenJet*,std::vector<reco::GenJet> >*)arg[1]));
  else   (((::std::vector<reco::GenJet>*)o)->erase)(*(::__gnu_cxx::__normal_iterator<reco::GenJet*,std::vector<reco::GenJet> >*)arg[0],
    *(::__gnu_cxx::__normal_iterator<reco::GenJet*,std::vector<reco::GenJet> >*)arg[1]);
}

static  void method_13654( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<reco::GenJet>*)o)->swap)(*(::std::vector<reco::GenJet>*)arg[0]);
}

static  void method_13655( void*, void* o, const std::vector<void*>&, void*)
{
  (((::std::vector<reco::GenJet>*)o)->clear)();
}

static void method_newdel_2988( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::std::vector<reco::GenJet> >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::std::vector<reco::GenJet> >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::std::vector<reco::GenJet> >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::std::vector<reco::GenJet> >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::std::vector<reco::GenJet> >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

static void method_x22( void* retaddr, void*, const std::vector<void*>&, void*)
{
  typedef std::vector<std::pair< ::Reflex::Base, int> > Bases_t;
  static Bases_t s_bases;
  if ( !s_bases.size() ) {
    s_bases.push_back(std::make_pair(::Reflex::Base( ::Reflex::TypeBuilder(Reflex::Literal("std::_Vector_base<reco::GenJet,std::allocator<reco::GenJet> >")), ::Reflex::BaseOffset< ::std::vector<reco::GenJet>,::std::_Vector_base<reco::GenJet,std::allocator<reco::GenJet> > >::Get(),::Reflex::PROTECTED), 0));
  }
  if (retaddr) *(Bases_t**)retaddr = &s_bases;
}

static void method_x23( void* retaddr, void*, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**) retaddr = ::Reflex::Proxy< ::std::vector<reco::GenJet> >::Generate();
  else ::Reflex::Proxy< ::std::vector<reco::GenJet> >::Generate();
}

//------Dictionary for class vector<reco::GenJet,std::allocator<reco::GenJet> > -------------------------------
void __std__vector_reco__GenJet__db_datamem(Reflex::Class*);
void __std__vector_reco__GenJet__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __std__vector_reco__GenJet__datamem_bld(&__std__vector_reco__GenJet__db_datamem);
Reflex::GenreflexMemberBuilder __std__vector_reco__GenJet__funcmem_bld(&__std__vector_reco__GenJet__db_funcmem);
void __std__vector_reco__GenJet__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("std::vector<reco::GenJet>"), typeid(::std::vector<reco::GenJet>), sizeof(::std::vector<reco::GenJet>), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddBase(type_2466, ::Reflex::BaseOffset< ::std::vector<reco::GenJet>, ::std::_Vector_base<reco::GenJet,std::allocator<reco::GenJet> > >::Get(), ::Reflex::PROTECTED)
  .AddTypedef(type_7512, Reflex::Literal("std::vector<reco::GenJet>::_Alloc_value_type"))
  .AddTypedef(type_2466, Reflex::Literal("std::vector<reco::GenJet>::_Base"))
  .AddTypedef(type_3255, Reflex::Literal("std::vector<reco::GenJet>::_Tp_alloc_type"))
  .AddTypedef(type_7979, Reflex::Literal("std::vector<reco::GenJet>::_Alloc_traits"))
  .AddTypedef(type_7512, Reflex::Literal("std::vector<reco::GenJet>::value_type"))
  .AddTypedef(type_9158, Reflex::Literal("std::vector<reco::GenJet>::pointer"))
  .AddTypedef(type_13603, Reflex::Literal("std::vector<reco::GenJet>::const_pointer"))
  .AddTypedef(type_13605, Reflex::Literal("std::vector<reco::GenJet>::reference"))
  .AddTypedef(type_13607, Reflex::Literal("std::vector<reco::GenJet>::const_reference"))
  .AddTypedef(type_7871, Reflex::Literal("std::vector<reco::GenJet>::iterator"))
  .AddTypedef(type_7872, Reflex::Literal("std::vector<reco::GenJet>::const_iterator"))
  .AddTypedef(type_3459, Reflex::Literal("std::vector<reco::GenJet>::const_reverse_iterator"))
  .AddTypedef(type_3460, Reflex::Literal("std::vector<reco::GenJet>::reverse_iterator"))
  .AddTypedef(type_3189, Reflex::Literal("std::vector<reco::GenJet>::size_type"))
  .AddTypedef(type_3096, Reflex::Literal("std::vector<reco::GenJet>::difference_type"))
  .AddTypedef(type_3255, Reflex::Literal("std::vector<reco::GenJet>::allocator_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("vector"), constructor_13616, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_29717), Reflex::Literal("vector"), constructor_13617, 0, "__a", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_3189, type_13607, type_29717), Reflex::Literal("vector"), constructor_13618, 0, "__n;__value=_Tp();__a=_Alloc()", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_18744), Reflex::Literal("vector"), constructor_13619, 0, "__x", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~vector"), destructor_13620, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_2988, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getBasesTable"), method_x22, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddFunctionMember<void*(void)>(Reflex::Literal("createCollFuncTable"), method_x23, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandFunctionMemberBuilder(&__std__vector_reco__GenJet__funcmem_bld);
}

//------Delayed data member builder for class vector<reco::GenJet,std::allocator<reco::GenJet> > -------------------
void __std__vector_reco__GenJet__db_datamem(Reflex::Class*) {

}
//------Delayed function member builder for class vector<reco::GenJet,std::allocator<reco::GenJet> > -------------------
void __std__vector_reco__GenJet__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_30642, type_18744), Reflex::Literal("operator="), operator_13621, 0, "__x", ::Reflex::PUBLIC | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_3189, type_13607), Reflex::Literal("assign"), method_13622, 0, "__n;__val", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_7871), Reflex::Literal("begin"), method_13623, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_7872), Reflex::Literal("begin"), method_13624, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_7871), Reflex::Literal("end"), method_13625, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_7872), Reflex::Literal("end"), method_13626, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3189), Reflex::Literal("size"), method_13631, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3189), Reflex::Literal("max_size"), method_13632, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_3189, type_7512), Reflex::Literal("resize"), method_13633, 0, "__new_size;__x=_Tp()", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3189), Reflex::Literal("capacity"), method_13634, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("empty"), method_13635, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_3189), Reflex::Literal("reserve"), method_13636, 0, "__n", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13605, type_3189), Reflex::Literal("operator[]"), operator_13637, 0, "__n", ::Reflex::PUBLIC | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13607, type_3189), Reflex::Literal("operator[]"), operator_13638, 0, "__n", ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13605, type_3189), Reflex::Literal("at"), method_13640, 0, "__n", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13607, type_3189), Reflex::Literal("at"), method_13641, 0, "__n", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13605), Reflex::Literal("front"), method_13642, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13607), Reflex::Literal("front"), method_13643, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13605), Reflex::Literal("back"), method_13644, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13607), Reflex::Literal("back"), method_13645, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_9158), Reflex::Literal("data"), method_13646, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13603), Reflex::Literal("data"), method_13647, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_13607), Reflex::Literal("push_back"), method_13648, 0, "__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680), Reflex::Literal("pop_back"), method_13649, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_7871, type_7871, type_13607), Reflex::Literal("insert"), method_13650, 0, "__position;__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_7871, type_3189, type_13607), Reflex::Literal("insert"), method_13651, 0, "__position;__n;__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_7871, type_7871), Reflex::Literal("erase"), method_13652, 0, "__position", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_7871, type_7871, type_7871), Reflex::Literal("erase"), method_13653, 0, "__first;__last", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_30642), Reflex::Literal("swap"), method_13654, 0, "__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680), Reflex::Literal("clear"), method_13655, 0, 0, ::Reflex::PUBLIC);
}
//------Stub functions for class CaloJet -------------------------------
static  void operator_24251( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::reco::CaloJet*)o)->operator=)(*(const ::reco::CaloJet*)arg[0]);
  else   (((::reco::CaloJet*)o)->operator=)(*(const ::reco::CaloJet*)arg[0]);
}

static void constructor_24252( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::reco::CaloJet(*(const ::reco::CaloJet*)arg[0]);
  else ::new(mem) ::reco::CaloJet(*(const ::reco::CaloJet*)arg[0]);
}

static void constructor_24253( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::reco::CaloJet();
  else ::new(mem) ::reco::CaloJet();
}

static void constructor_24254( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::reco::CaloJet(*(const ::math::XYZTLorentzVector*)arg[0],
      *(const ::math::XYZPoint*)arg[1],
      *(const ::reco::CaloJet::Specific*)arg[2],
      *(const ::std::vector<edm::Ptr<reco::Candidate> >*)arg[3]);
  else ::new(mem) ::reco::CaloJet(*(const ::math::XYZTLorentzVector*)arg[0],
      *(const ::math::XYZPoint*)arg[1],
      *(const ::reco::CaloJet::Specific*)arg[2],
      *(const ::std::vector<edm::Ptr<reco::Candidate> >*)arg[3]);
}

static void constructor_24255( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::reco::CaloJet(*(const ::math::XYZTLorentzVector*)arg[0],
      *(const ::math::XYZPoint*)arg[1],
      *(const ::reco::CaloJet::Specific*)arg[2]);
  else ::new(mem) ::reco::CaloJet(*(const ::math::XYZTLorentzVector*)arg[0],
      *(const ::math::XYZPoint*)arg[1],
      *(const ::reco::CaloJet::Specific*)arg[2]);
}

static void constructor_24256( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::reco::CaloJet(*(const ::math::XYZTLorentzVector*)arg[0],
      *(const ::reco::CaloJet::Specific*)arg[1],
      *(const ::std::vector<edm::Ptr<reco::Candidate> >*)arg[2]);
  else ::new(mem) ::reco::CaloJet(*(const ::math::XYZTLorentzVector*)arg[0],
      *(const ::reco::CaloJet::Specific*)arg[1],
      *(const ::std::vector<edm::Ptr<reco::Candidate> >*)arg[2]);
}

static void destructor_24257(void*, void * o, const std::vector<void*>&, void *) {
(((::reco::CaloJet*)o)->::reco::CaloJet::~CaloJet)();
}
static  void method_24258( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (float)((((const ::reco::CaloJet*)o)->maxEInEmTowers)());
  else   (((const ::reco::CaloJet*)o)->maxEInEmTowers)();
}

static  void method_24259( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (float)((((const ::reco::CaloJet*)o)->maxEInHadTowers)());
  else   (((const ::reco::CaloJet*)o)->maxEInHadTowers)();
}

static  void method_24260( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (float)((((const ::reco::CaloJet*)o)->energyFractionHadronic)());
  else   (((const ::reco::CaloJet*)o)->energyFractionHadronic)();
}

static  void method_24261( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (float)((((const ::reco::CaloJet*)o)->emEnergyFraction)());
  else   (((const ::reco::CaloJet*)o)->emEnergyFraction)();
}

static  void method_24262( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (float)((((const ::reco::CaloJet*)o)->hadEnergyInHB)());
  else   (((const ::reco::CaloJet*)o)->hadEnergyInHB)();
}

static  void method_24263( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (float)((((const ::reco::CaloJet*)o)->hadEnergyInHO)());
  else   (((const ::reco::CaloJet*)o)->hadEnergyInHO)();
}

static  void method_24264( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (float)((((const ::reco::CaloJet*)o)->hadEnergyInHE)());
  else   (((const ::reco::CaloJet*)o)->hadEnergyInHE)();
}

static  void method_24265( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (float)((((const ::reco::CaloJet*)o)->hadEnergyInHF)());
  else   (((const ::reco::CaloJet*)o)->hadEnergyInHF)();
}

static  void method_24266( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (float)((((const ::reco::CaloJet*)o)->emEnergyInEB)());
  else   (((const ::reco::CaloJet*)o)->emEnergyInEB)();
}

static  void method_24267( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (float)((((const ::reco::CaloJet*)o)->emEnergyInEE)());
  else   (((const ::reco::CaloJet*)o)->emEnergyInEE)();
}

static  void method_24268( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (float)((((const ::reco::CaloJet*)o)->emEnergyInHF)());
  else   (((const ::reco::CaloJet*)o)->emEnergyInHF)();
}

static  void method_24269( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (float)((((const ::reco::CaloJet*)o)->towersArea)());
  else   (((const ::reco::CaloJet*)o)->towersArea)();
}

static  void method_24270( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (int)((((const ::reco::CaloJet*)o)->n90)());
  else   (((const ::reco::CaloJet*)o)->n90)();
}

static  void method_24271( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (int)((((const ::reco::CaloJet*)o)->n60)());
  else   (((const ::reco::CaloJet*)o)->n60)();
}

static  void method_24272( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (math::XYZTLorentzVector)((((const ::reco::CaloJet*)o)->physicsP4)(*(const ::math::XYZPoint*)arg[0]));
  else   (((const ::reco::CaloJet*)o)->physicsP4)(*(const ::math::XYZPoint*)arg[0]);
}

static  void method_24273( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (math::XYZTLorentzVector)((((const ::reco::CaloJet*)o)->detectorP4)());
  else   (((const ::reco::CaloJet*)o)->detectorP4)();
}

static  void method_24274( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (CaloTowerPtr)((((const ::reco::CaloJet*)o)->getCaloConstituent)(*(unsigned int*)arg[0]));
  else   (((const ::reco::CaloJet*)o)->getCaloConstituent)(*(unsigned int*)arg[0]);
}

static  void method_24275( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::vector<edm::Ptr<CaloTower> >)((((const ::reco::CaloJet*)o)->getCaloConstituents)());
  else   (((const ::reco::CaloJet*)o)->getCaloConstituents)();
}

static  void method_24276( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::reco::CaloJet*)o)->getSpecific)();
  else   (((const ::reco::CaloJet*)o)->getSpecific)();
}

static  void method_24277( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::reco::CaloJet*)o)->clone)());
  else   (((const ::reco::CaloJet*)o)->clone)();
}

static  void method_24278( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::string)((((const ::reco::CaloJet*)o)->print)());
  else   (((const ::reco::CaloJet*)o)->print)();
}

static  void method_24279( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::vector<CaloTowerDetId>)((((const ::reco::CaloJet*)o)->getTowerIndices)());
  else   (((const ::reco::CaloJet*)o)->getTowerIndices)();
}

static void method_newdel_7473( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::reco::CaloJet >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::reco::CaloJet >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::reco::CaloJet >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::reco::CaloJet >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::reco::CaloJet >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

static void method_x25( void* retaddr, void*, const std::vector<void*>&, void*)
{
  typedef std::vector<std::pair< ::Reflex::Base, int> > Bases_t;
  static Bases_t s_bases;
  if ( !s_bases.size() ) {
    s_bases.push_back(std::make_pair(::Reflex::Base( ::Reflex::TypeBuilder(Reflex::Literal("reco::Jet")), ::Reflex::BaseOffset< ::reco::CaloJet,::reco::Jet >::Get(),::Reflex::PUBLIC), 0));
    s_bases.push_back(std::make_pair(::Reflex::Base( ::Reflex::TypeBuilder(Reflex::Literal("reco::CompositePtrCandidate")), ::Reflex::BaseOffset< ::reco::CaloJet,::reco::CompositePtrCandidate >::Get(),::Reflex::PUBLIC), 1));
    s_bases.push_back(std::make_pair(::Reflex::Base( ::Reflex::TypeBuilder(Reflex::Literal("reco::LeafCandidate")), ::Reflex::BaseOffset< ::reco::CaloJet,::reco::LeafCandidate >::Get(),::Reflex::PUBLIC), 2));
    s_bases.push_back(std::make_pair(::Reflex::Base( ::Reflex::TypeBuilder(Reflex::Literal("reco::Candidate")), ::Reflex::BaseOffset< ::reco::CaloJet,::reco::Candidate >::Get(),::Reflex::PUBLIC), 3));
  }
  if (retaddr) *(Bases_t**)retaddr = &s_bases;
}

//------Dictionary for class CaloJet -------------------------------
void __reco__CaloJet_db_datamem(Reflex::Class*);
void __reco__CaloJet_db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __reco__CaloJet_datamem_bld(&__reco__CaloJet_db_datamem);
Reflex::GenreflexMemberBuilder __reco__CaloJet_funcmem_bld(&__reco__CaloJet_db_funcmem);
void __reco__CaloJet_dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("reco::CaloJet"), typeid(::reco::CaloJet), sizeof(::reco::CaloJet), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::VIRTUAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("ClassVersion"), "10")
  .AddBase(type_7485, ::Reflex::BaseOffset< ::reco::CaloJet, ::reco::Jet >::Get(), ::Reflex::PUBLIC)
  .AddTypedef(type_580, Reflex::Literal("reco::CaloJet::ConstituentTypePtr"))
  .AddTypedef(type_185, Reflex::Literal("reco::CaloJet::ConstituentTypeFwdPtr"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13800, type_13802), Reflex::Literal("operator="), operator_24251, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_13802), Reflex::Literal("CaloJet"), constructor_24252, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("CaloJet"), constructor_24253, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_23124, type_23126, type_34659, type_30674), Reflex::Literal("CaloJet"), constructor_24254, 0, "fP4;fVertex;fSpecific;fConstituents", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_23124, type_23126, type_34659), Reflex::Literal("CaloJet"), constructor_24255, 0, "fP4;fVertex;fSpecific", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_23124, type_34659, type_30674), Reflex::Literal("CaloJet"), constructor_24256, 0, "fP4;fSpecific;fConstituents", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~CaloJet"), destructor_24257, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::DESTRUCTOR )
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_7473, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getBasesTable"), method_x25, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__reco__CaloJet_datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__reco__CaloJet_funcmem_bld);
}

//------Delayed data member builder for class CaloJet -------------------
void __reco__CaloJet_db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_24250, Reflex::Literal("m_specific"), OffsetOf(__shadow__::__reco__CaloJet, m_specific), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class CaloJet -------------------
void __reco__CaloJet_db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_878), Reflex::Literal("maxEInEmTowers"), method_24258, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_878), Reflex::Literal("maxEInHadTowers"), method_24259, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_878), Reflex::Literal("energyFractionHadronic"), method_24260, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_878), Reflex::Literal("emEnergyFraction"), method_24261, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_878), Reflex::Literal("hadEnergyInHB"), method_24262, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_878), Reflex::Literal("hadEnergyInHO"), method_24263, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_878), Reflex::Literal("hadEnergyInHE"), method_24264, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_878), Reflex::Literal("hadEnergyInHF"), method_24265, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_878), Reflex::Literal("emEnergyInEB"), method_24266, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_878), Reflex::Literal("emEnergyInEE"), method_24267, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_878), Reflex::Literal("emEnergyInHF"), method_24268, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_878), Reflex::Literal("towersArea"), method_24269, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_64), Reflex::Literal("n90"), method_24270, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_64), Reflex::Literal("n60"), method_24271, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_6506, type_23126), Reflex::Literal("physicsP4"), method_24272, 0, "vertex", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_6506), Reflex::Literal("detectorP4"), method_24273, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_580, type_356), Reflex::Literal("getCaloConstituent"), method_24274, 0, "fIndex", ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3009), Reflex::Literal("getCaloConstituents"), method_24275, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_34659), Reflex::Literal("getSpecific"), method_24276, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_9289), Reflex::Literal("clone"), method_24277, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2504), Reflex::Literal("print"), method_24278, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3008), Reflex::Literal("getTowerIndices"), method_24279, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST);
}
//------Stub functions for class Ref<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> >,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> >, reco::CaloJet> > -------------------------------
static  void operator_22563( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)o)->operator=)(*(const ::edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)arg[0]);
  else   (((::edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)o)->operator=)(*(const ::edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)arg[0]);
}

static void constructor_22564( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >(*(const ::edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)arg[0]);
  else ::new(mem) ::edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >(*(const ::edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)arg[0]);
}

static void constructor_22565( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >();
  else ::new(mem) ::edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >();
}

static void constructor_22566( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if ( arg.size() == 2 ) {
    if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >(*(const ::edm::Handle<std::vector<reco::CaloJet> >*)arg[0],
      *(unsigned int*)arg[1]);
  else ::new(mem) ::edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >(*(const ::edm::Handle<std::vector<reco::CaloJet> >*)arg[0],
      *(unsigned int*)arg[1]);
  }
  else if ( arg.size() == 3 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >(*(const ::edm::Handle<std::vector<reco::CaloJet> >*)arg[0],
      *(unsigned int*)arg[1],
      *(bool*)arg[2]);
  else ::new(mem) ::edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >(*(const ::edm::Handle<std::vector<reco::CaloJet> >*)arg[0],
      *(unsigned int*)arg[1],
      *(bool*)arg[2]);
  }
}

static void constructor_22567( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if ( arg.size() == 2 ) {
    if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >(*(const ::edm::OrphanHandle<std::vector<reco::CaloJet> >*)arg[0],
      *(unsigned int*)arg[1]);
  else ::new(mem) ::edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >(*(const ::edm::OrphanHandle<std::vector<reco::CaloJet> >*)arg[0],
      *(unsigned int*)arg[1]);
  }
  else if ( arg.size() == 3 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >(*(const ::edm::OrphanHandle<std::vector<reco::CaloJet> >*)arg[0],
      *(unsigned int*)arg[1],
      *(bool*)arg[2]);
  else ::new(mem) ::edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >(*(const ::edm::OrphanHandle<std::vector<reco::CaloJet> >*)arg[0],
      *(unsigned int*)arg[1],
      *(bool*)arg[2]);
  }
}

static void constructor_22568( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if ( arg.size() == 2 ) {
    if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >(*(const ::edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)arg[0],
      *(unsigned int*)arg[1]);
  else ::new(mem) ::edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >(*(const ::edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)arg[0],
      *(unsigned int*)arg[1]);
  }
  else if ( arg.size() == 3 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >(*(const ::edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)arg[0],
      *(unsigned int*)arg[1],
      *(bool*)arg[2]);
  else ::new(mem) ::edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >(*(const ::edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)arg[0],
      *(unsigned int*)arg[1],
      *(bool*)arg[2]);
  }
}

static void constructor_22569( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if ( arg.size() == 2 ) {
    if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >((const ::std::vector<reco::CaloJet>*)arg[0],
      *(unsigned int*)arg[1]);
  else ::new(mem) ::edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >((const ::std::vector<reco::CaloJet>*)arg[0],
      *(unsigned int*)arg[1]);
  }
  else if ( arg.size() == 3 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >((const ::std::vector<reco::CaloJet>*)arg[0],
      *(unsigned int*)arg[1],
      *(bool*)arg[2]);
  else ::new(mem) ::edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >((const ::std::vector<reco::CaloJet>*)arg[0],
      *(unsigned int*)arg[1],
      *(bool*)arg[2]);
  }
}

static void constructor_22570( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if ( arg.size() == 2 ) {
    if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >(*(const ::edm::TestHandle<std::vector<reco::CaloJet> >*)arg[0],
      *(unsigned int*)arg[1]);
  else ::new(mem) ::edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >(*(const ::edm::TestHandle<std::vector<reco::CaloJet> >*)arg[0],
      *(unsigned int*)arg[1]);
  }
  else if ( arg.size() == 3 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >(*(const ::edm::TestHandle<std::vector<reco::CaloJet> >*)arg[0],
      *(unsigned int*)arg[1],
      *(bool*)arg[2]);
  else ::new(mem) ::edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >(*(const ::edm::TestHandle<std::vector<reco::CaloJet> >*)arg[0],
      *(unsigned int*)arg[1],
      *(bool*)arg[2]);
  }
}

static void constructor_22571( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >(*(const ::edm::ProductID*)arg[0],
      *(unsigned int*)arg[1],
      (const ::edm::EDProductGetter*)arg[2]);
  else ::new(mem) ::edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >(*(const ::edm::ProductID*)arg[0],
      *(unsigned int*)arg[1],
      (const ::edm::EDProductGetter*)arg[2]);
}

static void constructor_22572( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >(*(const ::edm::ProductID*)arg[0],
      (const ::reco::CaloJet*)arg[1],
      *(unsigned int*)arg[2],
      (const ::std::vector<reco::CaloJet>*)arg[3]);
  else ::new(mem) ::edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >(*(const ::edm::ProductID*)arg[0],
      (const ::reco::CaloJet*)arg[1],
      *(unsigned int*)arg[2],
      (const ::std::vector<reco::CaloJet>*)arg[3]);
}

static void constructor_22573( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >(*(const ::edm::ProductID*)arg[0]);
  else ::new(mem) ::edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >(*(const ::edm::ProductID*)arg[0]);
}

static void constructor_22574( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >(*(const ::edm::RefProd<std::vector<reco::CaloJet> >*)arg[0],
      *(unsigned int*)arg[1]);
  else ::new(mem) ::edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >(*(const ::edm::RefProd<std::vector<reco::CaloJet> >*)arg[0],
      *(unsigned int*)arg[1]);
}

static void destructor_22575(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)o)->::edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >::~Ref)();
}
static  void operator_22576( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)o)->operator*)();
  else   (((const ::edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)o)->operator*)();
}

static  void operator_22577( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)o)->operator->)());
  else   (((const ::edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)o)->operator->)();
}

static  void method_22578( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)o)->get)());
  else   (((const ::edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)o)->get)();
}

static  void method_22579( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)o)->isNull)());
  else   (((const ::edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)o)->isNull)();
}

static  void method_22580( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)o)->isNonnull)());
  else   (((const ::edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)o)->isNonnull)();
}

static  void operator_22581( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)o)->operator!)());
  else   (((const ::edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)o)->operator!)();
}

static  void method_22582( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::ProductID)((((const ::edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)o)->id)());
  else   (((const ::edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)o)->id)();
}

static  void method_22583( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)o)->productGetter)());
  else   (((const ::edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)o)->productGetter)();
}

static  void method_22584( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)o)->product)());
  else   (((const ::edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)o)->product)();
}

static  void method_22585( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (unsigned int)((((const ::edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)o)->key)());
  else   (((const ::edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)o)->key)();
}

static  void method_22586( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (unsigned int)((((const ::edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)o)->index)());
  else   (((const ::edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)o)->index)();
}

static  void method_22587( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)o)->hasProductCache)());
  else   (((const ::edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)o)->hasProductCache)();
}

static  void method_22588( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)o)->isAvailable)());
  else   (((const ::edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)o)->isAvailable)();
}

static  void method_22589( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)o)->isTransient)());
  else   (((const ::edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)o)->isTransient)();
}

static  void method_22590( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)o)->refCore)();
  else   (((const ::edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)o)->refCore)();
}

static  void method_22591( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (short)((((::edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)o)->Class_Version)());
  else   (((::edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)o)->Class_Version)();
}

static void constructor_22592( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >(*(const ::edm::RefCore*)arg[0],
      *(const unsigned int*)arg[1]);
  else ::new(mem) ::edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >(*(const ::edm::RefCore*)arg[0],
      *(const unsigned int*)arg[1]);
}

static void method_newdel_4744( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class Ref<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> >,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> >, reco::CaloJet> > -------------------------------
void __edm__Ref_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s__db_datamem(Reflex::Class*);
void __edm__Ref_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__Ref_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s__datamem_bld(&__edm__Ref_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__Ref_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s__funcmem_bld(&__edm__Ref_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s__db_funcmem);
void __edm__Ref_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >"), typeid(::edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >), sizeof(::edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("ClassVersion"), ::edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >::Class_Version())
  .AddTypedef(type_7473, Reflex::Literal("edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >::T"))
  .AddTypedef(type_18751, Reflex::Literal("edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >::F"))
  .AddTypedef(type_20174, Reflex::Literal("edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >::VF"))
  .AddTypedef(type_20173, Reflex::Literal("edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >::VBF"))
  .AddTypedef(type_2991, Reflex::Literal("edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >::product_type"))
  .AddTypedef(type_7473, Reflex::Literal("edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >::value_type"))
  .AddTypedef(type_7473c, Reflex::Literal("edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >::element_type"))
  .AddTypedef(type_18751, Reflex::Literal("edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >::finder_type"))
  .AddTypedef(type_356, Reflex::Literal("edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >::argument_type"))
  .AddTypedef(type_356, Reflex::Literal("edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >::key_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13735, type_13737), Reflex::Literal("operator="), operator_22563, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_13737), Reflex::Literal("Ref"), constructor_22564, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("Ref"), constructor_22565, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_33975, type_356, type_1574), Reflex::Literal("Ref"), constructor_22566, 0, "handle;itemKey;setNow=true", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_33976, type_356, type_1574), Reflex::Literal("Ref"), constructor_22567, 0, "handle;itemKey;setNow=true", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_13672, type_356, type_1574), Reflex::Literal("Ref"), constructor_22568, 0, "refvector;itemKey;setNow=true", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_33494, type_356, type_1574), Reflex::Literal("Ref"), constructor_22569, 0, "iProduct;iItemKey;iSetNow=true", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_33977, type_356, type_1574), Reflex::Literal("Ref"), constructor_22570, 0, "handle;itemKey;setNow=true", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_18495, type_356, type_18571), Reflex::Literal("Ref"), constructor_22571, 0, "productID;itemKey;prodGetter", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_18495, type_13798, type_356, type_33494), Reflex::Literal("Ref"), constructor_22572, 0, "iProductID;;iItemKey;iProduct", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_18495), Reflex::Literal("Ref"), constructor_22573, 0, "iId", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_33974, type_356), Reflex::Literal("Ref"), constructor_22574, 0, "refProd;itemKey", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~Ref"), destructor_22575, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_21597, type_9929), Reflex::Literal("Ref"), constructor_22592, 0, "iRefCore;iKey", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_4744, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__Ref_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__Ref_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s__funcmem_bld);
}

//------Delayed data member builder for class Ref<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> >,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> >, reco::CaloJet> > -------------------
void __edm__Ref_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_4462, Reflex::Literal("product_"), OffsetOf(__shadow__::__edm__Ref_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_, product_), ::Reflex::PRIVATE | ::Reflex::MUTABLE);
}
//------Delayed function member builder for class Ref<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> >,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> >, reco::CaloJet> > -------------------
void __edm__Ref_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13802), Reflex::Literal("operator*"), operator_22576, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13798), Reflex::Literal("operator->"), operator_22577, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13798), Reflex::Literal("get"), method_22578, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("isNull"), method_22579, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("isNonnull"), method_22580, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("operator!"), operator_22581, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4689), Reflex::Literal("id"), method_22582, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_18571), Reflex::Literal("productGetter"), method_22583, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_33494), Reflex::Literal("product"), method_22584, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_356), Reflex::Literal("key"), method_22585, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_356), Reflex::Literal("index"), method_22586, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("hasProductCache"), method_22587, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("isAvailable"), method_22588, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("isTransient"), method_22589, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_21597), Reflex::Literal("refCore"), method_22590, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_231), Reflex::Literal("Class_Version"), method_22591, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC);
}
//------Stub functions for class vector<edm::Ref<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> >, reco::CaloJet, edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> >, reco::CaloJet> >,std::allocator<edm::Ref<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> >, reco::CaloJet, edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> >, reco::CaloJet> > > > -------------------------------
static void constructor_13746( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >();
  else ::new(mem) ::std::vector<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >();
}

static void constructor_13747( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >(*(const ::std::allocator<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)arg[0]);
  else ::new(mem) ::std::vector<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >(*(const ::std::allocator<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)arg[0]);
}

static void constructor_13748( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if ( arg.size() == 1 ) {
    if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >(*(::std::size_t*)arg[0]);
  else ::new(mem) ::std::vector<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >(*(::std::size_t*)arg[0]);
  }
  else if ( arg.size() == 2 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >(*(::std::size_t*)arg[0],
      *(const ::edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)arg[1]);
  else ::new(mem) ::std::vector<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >(*(::std::size_t*)arg[0],
      *(const ::edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)arg[1]);
  }
  else if ( arg.size() == 3 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >(*(::std::size_t*)arg[0],
      *(const ::edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)arg[1],
      *(const ::std::allocator<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)arg[2]);
  else ::new(mem) ::std::vector<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >(*(::std::size_t*)arg[0],
      *(const ::edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)arg[1],
      *(const ::std::allocator<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)arg[2]);
  }
}

static void constructor_13749( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >(*(const ::std::vector<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)arg[0]);
  else ::new(mem) ::std::vector<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >(*(const ::std::vector<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)arg[0]);
}

static void destructor_13750(void*, void * o, const std::vector<void*>&, void *) {
(((::std::vector<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->::std::vector<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >::~vector)();
}
static  void operator_13751( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->operator=)(*(const ::std::vector<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)arg[0]);
  else   (((::std::vector<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->operator=)(*(const ::std::vector<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)arg[0]);
}

static  void method_13752( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->assign)(*(::std::size_t*)arg[0],
    *(const ::edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)arg[1]);
}

static  void method_13753( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*,std::vector<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >)((((::std::vector<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->begin)());
  else   (((::std::vector<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->begin)();
}

static  void method_13754( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<const edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*,std::vector<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >)((((const ::std::vector<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->begin)());
  else   (((const ::std::vector<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->begin)();
}

static  void method_13755( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*,std::vector<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >)((((::std::vector<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->end)());
  else   (((::std::vector<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->end)();
}

static  void method_13756( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<const edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*,std::vector<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >)((((const ::std::vector<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->end)());
  else   (((const ::std::vector<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->end)();
}

static  void method_13761( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::std::vector<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->size)());
  else   (((const ::std::vector<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->size)();
}

static  void method_13762( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::std::vector<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->max_size)());
  else   (((const ::std::vector<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->max_size)();
}

static  void method_13763( void*, void* o, const std::vector<void*>& arg, void*)
{
  if ( arg.size() == 1 ) {
    (((::std::vector<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->resize)(*(::std::size_t*)arg[0]);
  }
  else if ( arg.size() == 2 ) { 
    (((::std::vector<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->resize)(*(::std::size_t*)arg[0],
      *(::edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)arg[1]);
  }
}

static  void method_13764( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::std::vector<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->capacity)());
  else   (((const ::std::vector<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->capacity)();
}

static  void method_13765( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::std::vector<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->empty)());
  else   (((const ::std::vector<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->empty)();
}

static  void method_13766( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->reserve)(*(::std::size_t*)arg[0]);
}

static  void operator_13767( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->operator[])(*(::std::size_t*)arg[0]);
  else   (((::std::vector<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->operator[])(*(::std::size_t*)arg[0]);
}

static  void operator_13768( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->operator[])(*(::std::size_t*)arg[0]);
  else   (((const ::std::vector<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->operator[])(*(::std::size_t*)arg[0]);
}

static  void method_13770( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->at)(*(::std::size_t*)arg[0]);
  else   (((::std::vector<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->at)(*(::std::size_t*)arg[0]);
}

static  void method_13771( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->at)(*(::std::size_t*)arg[0]);
  else   (((const ::std::vector<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->at)(*(::std::size_t*)arg[0]);
}

static  void method_13772( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->front)();
  else   (((::std::vector<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->front)();
}

static  void method_13773( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->front)();
  else   (((const ::std::vector<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->front)();
}

static  void method_13774( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->back)();
  else   (((::std::vector<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->back)();
}

static  void method_13775( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->back)();
  else   (((const ::std::vector<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->back)();
}

static  void method_13776( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((::std::vector<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->data)());
  else   (((::std::vector<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->data)();
}

static  void method_13777( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::std::vector<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->data)());
  else   (((const ::std::vector<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->data)();
}

static  void method_13778( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->push_back)(*(const ::edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)arg[0]);
}

static  void method_13779( void*, void* o, const std::vector<void*>&, void*)
{
  (((::std::vector<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->pop_back)();
}

static  void method_13780( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*,std::vector<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >)((((::std::vector<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->insert)(*(::__gnu_cxx::__normal_iterator<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*,std::vector<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >*)arg[0],
    *(const ::edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)arg[1]));
  else   (((::std::vector<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->insert)(*(::__gnu_cxx::__normal_iterator<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*,std::vector<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >*)arg[0],
    *(const ::edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)arg[1]);
}

static  void method_13781( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->insert)(*(::__gnu_cxx::__normal_iterator<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*,std::vector<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >*)arg[0],
    *(::std::size_t*)arg[1],
    *(const ::edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)arg[2]);
}

static  void method_13782( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*,std::vector<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >)((((::std::vector<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->erase)(*(::__gnu_cxx::__normal_iterator<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*,std::vector<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >*)arg[0]));
  else   (((::std::vector<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->erase)(*(::__gnu_cxx::__normal_iterator<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*,std::vector<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >*)arg[0]);
}

static  void method_13783( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*,std::vector<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >)((((::std::vector<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->erase)(*(::__gnu_cxx::__normal_iterator<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*,std::vector<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >*)arg[0],
    *(::__gnu_cxx::__normal_iterator<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*,std::vector<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >*)arg[1]));
  else   (((::std::vector<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->erase)(*(::__gnu_cxx::__normal_iterator<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*,std::vector<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >*)arg[0],
    *(::__gnu_cxx::__normal_iterator<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*,std::vector<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >*)arg[1]);
}

static  void method_13784( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->swap)(*(::std::vector<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)arg[0]);
}

static  void method_13785( void*, void* o, const std::vector<void*>&, void*)
{
  (((::std::vector<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->clear)();
}

static void method_newdel_2990( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::std::vector<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::std::vector<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::std::vector<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::std::vector<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::std::vector<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

static void method_x28( void* retaddr, void*, const std::vector<void*>&, void*)
{
  typedef std::vector<std::pair< ::Reflex::Base, int> > Bases_t;
  static Bases_t s_bases;
  if ( !s_bases.size() ) {
    s_bases.push_back(std::make_pair(::Reflex::Base( ::Reflex::TypeBuilder(Reflex::Literal("std::_Vector_base<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >,std::allocator<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >")), ::Reflex::BaseOffset< ::std::vector<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >,::std::_Vector_base<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >,std::allocator<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > > >::Get(),::Reflex::PROTECTED), 0));
  }
  if (retaddr) *(Bases_t**)retaddr = &s_bases;
}

static void method_x29( void* retaddr, void*, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**) retaddr = ::Reflex::Proxy< ::std::vector<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >::Generate();
  else ::Reflex::Proxy< ::std::vector<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >::Generate();
}

//------Dictionary for class vector<edm::Ref<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> >, reco::CaloJet, edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> >, reco::CaloJet> >,std::allocator<edm::Ref<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> >, reco::CaloJet, edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> >, reco::CaloJet> > > > -------------------------------
void __std__vector_edm__Ref_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s__db_datamem(Reflex::Class*);
void __std__vector_edm__Ref_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __std__vector_edm__Ref_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s__datamem_bld(&__std__vector_edm__Ref_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s__db_datamem);
Reflex::GenreflexMemberBuilder __std__vector_edm__Ref_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s__funcmem_bld(&__std__vector_edm__Ref_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s__db_funcmem);
void __std__vector_edm__Ref_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("std::vector<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >"), typeid(::std::vector<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >), sizeof(::std::vector<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddBase(type_2457, ::Reflex::BaseOffset< ::std::vector<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >, ::std::_Vector_base<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >,std::allocator<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > > >::Get(), ::Reflex::PROTECTED)
  .AddTypedef(type_4744, Reflex::Literal("std::vector<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >::_Alloc_value_type"))
  .AddTypedef(type_2457, Reflex::Literal("std::vector<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >::_Base"))
  .AddTypedef(type_3257, Reflex::Literal("std::vector<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >::_Tp_alloc_type"))
  .AddTypedef(type_7970, Reflex::Literal("std::vector<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >::_Alloc_traits"))
  .AddTypedef(type_4744, Reflex::Literal("std::vector<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >::value_type"))
  .AddTypedef(type_8987, Reflex::Literal("std::vector<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >::pointer"))
  .AddTypedef(type_13733, Reflex::Literal("std::vector<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >::const_pointer"))
  .AddTypedef(type_13735, Reflex::Literal("std::vector<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >::reference"))
  .AddTypedef(type_13737, Reflex::Literal("std::vector<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >::const_reference"))
  .AddTypedef(type_7855, Reflex::Literal("std::vector<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >::iterator"))
  .AddTypedef(type_7856, Reflex::Literal("std::vector<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >::const_iterator"))
  .AddTypedef(type_3437, Reflex::Literal("std::vector<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >::const_reverse_iterator"))
  .AddTypedef(type_3438, Reflex::Literal("std::vector<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >::reverse_iterator"))
  .AddTypedef(type_3189, Reflex::Literal("std::vector<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >::size_type"))
  .AddTypedef(type_3096, Reflex::Literal("std::vector<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >::difference_type"))
  .AddTypedef(type_3257, Reflex::Literal("std::vector<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >::allocator_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("vector"), constructor_13746, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_29600), Reflex::Literal("vector"), constructor_13747, 0, "__a", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_3189, type_13737, type_29600), Reflex::Literal("vector"), constructor_13748, 0, "__n;__value=_Tp();__a=_Alloc()", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_30647), Reflex::Literal("vector"), constructor_13749, 0, "__x", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~vector"), destructor_13750, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_2990, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getBasesTable"), method_x28, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddFunctionMember<void*(void)>(Reflex::Literal("createCollFuncTable"), method_x29, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandFunctionMemberBuilder(&__std__vector_edm__Ref_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s__funcmem_bld);
}

//------Delayed data member builder for class vector<edm::Ref<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> >, reco::CaloJet, edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> >, reco::CaloJet> >,std::allocator<edm::Ref<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> >, reco::CaloJet, edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> >, reco::CaloJet> > > > -------------------
void __std__vector_edm__Ref_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s__db_datamem(Reflex::Class*) {

}
//------Delayed function member builder for class vector<edm::Ref<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> >, reco::CaloJet, edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> >, reco::CaloJet> >,std::allocator<edm::Ref<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> >, reco::CaloJet, edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> >, reco::CaloJet> > > > -------------------
void __std__vector_edm__Ref_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_30648, type_30647), Reflex::Literal("operator="), operator_13751, 0, "__x", ::Reflex::PUBLIC | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_3189, type_13737), Reflex::Literal("assign"), method_13752, 0, "__n;__val", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_7855), Reflex::Literal("begin"), method_13753, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_7856), Reflex::Literal("begin"), method_13754, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_7855), Reflex::Literal("end"), method_13755, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_7856), Reflex::Literal("end"), method_13756, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3189), Reflex::Literal("size"), method_13761, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3189), Reflex::Literal("max_size"), method_13762, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_3189, type_4744), Reflex::Literal("resize"), method_13763, 0, "__new_size;__x=_Tp()", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3189), Reflex::Literal("capacity"), method_13764, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("empty"), method_13765, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_3189), Reflex::Literal("reserve"), method_13766, 0, "__n", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13735, type_3189), Reflex::Literal("operator[]"), operator_13767, 0, "__n", ::Reflex::PUBLIC | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13737, type_3189), Reflex::Literal("operator[]"), operator_13768, 0, "__n", ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13735, type_3189), Reflex::Literal("at"), method_13770, 0, "__n", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13737, type_3189), Reflex::Literal("at"), method_13771, 0, "__n", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13735), Reflex::Literal("front"), method_13772, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13737), Reflex::Literal("front"), method_13773, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13735), Reflex::Literal("back"), method_13774, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13737), Reflex::Literal("back"), method_13775, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_8987), Reflex::Literal("data"), method_13776, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13733), Reflex::Literal("data"), method_13777, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_13737), Reflex::Literal("push_back"), method_13778, 0, "__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680), Reflex::Literal("pop_back"), method_13779, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_7855, type_7855, type_13737), Reflex::Literal("insert"), method_13780, 0, "__position;__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_7855, type_3189, type_13737), Reflex::Literal("insert"), method_13781, 0, "__position;__n;__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_7855, type_7855), Reflex::Literal("erase"), method_13782, 0, "__position", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_7855, type_7855, type_7855), Reflex::Literal("erase"), method_13783, 0, "__first;__last", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_30648), Reflex::Literal("swap"), method_13784, 0, "__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680), Reflex::Literal("clear"), method_13785, 0, 0, ::Reflex::PUBLIC);
}
//------Stub functions for class vector<reco::CaloJet,std::allocator<reco::CaloJet> > -------------------------------
static void constructor_13811( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<reco::CaloJet>();
  else ::new(mem) ::std::vector<reco::CaloJet>();
}

static void constructor_13812( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<reco::CaloJet>(*(const ::std::allocator<reco::CaloJet>*)arg[0]);
  else ::new(mem) ::std::vector<reco::CaloJet>(*(const ::std::allocator<reco::CaloJet>*)arg[0]);
}

static void constructor_13813( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if ( arg.size() == 1 ) {
    if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<reco::CaloJet>(*(::std::size_t*)arg[0]);
  else ::new(mem) ::std::vector<reco::CaloJet>(*(::std::size_t*)arg[0]);
  }
  else if ( arg.size() == 2 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<reco::CaloJet>(*(::std::size_t*)arg[0],
      *(const ::reco::CaloJet*)arg[1]);
  else ::new(mem) ::std::vector<reco::CaloJet>(*(::std::size_t*)arg[0],
      *(const ::reco::CaloJet*)arg[1]);
  }
  else if ( arg.size() == 3 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<reco::CaloJet>(*(::std::size_t*)arg[0],
      *(const ::reco::CaloJet*)arg[1],
      *(const ::std::allocator<reco::CaloJet>*)arg[2]);
  else ::new(mem) ::std::vector<reco::CaloJet>(*(::std::size_t*)arg[0],
      *(const ::reco::CaloJet*)arg[1],
      *(const ::std::allocator<reco::CaloJet>*)arg[2]);
  }
}

static void constructor_13814( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<reco::CaloJet>(*(const ::std::vector<reco::CaloJet>*)arg[0]);
  else ::new(mem) ::std::vector<reco::CaloJet>(*(const ::std::vector<reco::CaloJet>*)arg[0]);
}

static void destructor_13815(void*, void * o, const std::vector<void*>&, void *) {
(((::std::vector<reco::CaloJet>*)o)->::std::vector<reco::CaloJet>::~vector)();
}
static  void operator_13816( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<reco::CaloJet>*)o)->operator=)(*(const ::std::vector<reco::CaloJet>*)arg[0]);
  else   (((::std::vector<reco::CaloJet>*)o)->operator=)(*(const ::std::vector<reco::CaloJet>*)arg[0]);
}

static  void method_13817( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<reco::CaloJet>*)o)->assign)(*(::std::size_t*)arg[0],
    *(const ::reco::CaloJet*)arg[1]);
}

static  void method_13818( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<reco::CaloJet*,std::vector<reco::CaloJet> >)((((::std::vector<reco::CaloJet>*)o)->begin)());
  else   (((::std::vector<reco::CaloJet>*)o)->begin)();
}

static  void method_13819( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<const reco::CaloJet*,std::vector<reco::CaloJet> >)((((const ::std::vector<reco::CaloJet>*)o)->begin)());
  else   (((const ::std::vector<reco::CaloJet>*)o)->begin)();
}

static  void method_13820( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<reco::CaloJet*,std::vector<reco::CaloJet> >)((((::std::vector<reco::CaloJet>*)o)->end)());
  else   (((::std::vector<reco::CaloJet>*)o)->end)();
}

static  void method_13821( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<const reco::CaloJet*,std::vector<reco::CaloJet> >)((((const ::std::vector<reco::CaloJet>*)o)->end)());
  else   (((const ::std::vector<reco::CaloJet>*)o)->end)();
}

static  void method_13826( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::std::vector<reco::CaloJet>*)o)->size)());
  else   (((const ::std::vector<reco::CaloJet>*)o)->size)();
}

static  void method_13827( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::std::vector<reco::CaloJet>*)o)->max_size)());
  else   (((const ::std::vector<reco::CaloJet>*)o)->max_size)();
}

static  void method_13828( void*, void* o, const std::vector<void*>& arg, void*)
{
  if ( arg.size() == 1 ) {
    (((::std::vector<reco::CaloJet>*)o)->resize)(*(::std::size_t*)arg[0]);
  }
  else if ( arg.size() == 2 ) { 
    (((::std::vector<reco::CaloJet>*)o)->resize)(*(::std::size_t*)arg[0],
      *(::reco::CaloJet*)arg[1]);
  }
}

static  void method_13829( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::std::vector<reco::CaloJet>*)o)->capacity)());
  else   (((const ::std::vector<reco::CaloJet>*)o)->capacity)();
}

static  void method_13830( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::std::vector<reco::CaloJet>*)o)->empty)());
  else   (((const ::std::vector<reco::CaloJet>*)o)->empty)();
}

static  void method_13831( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<reco::CaloJet>*)o)->reserve)(*(::std::size_t*)arg[0]);
}

static  void operator_13832( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<reco::CaloJet>*)o)->operator[])(*(::std::size_t*)arg[0]);
  else   (((::std::vector<reco::CaloJet>*)o)->operator[])(*(::std::size_t*)arg[0]);
}

static  void operator_13833( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<reco::CaloJet>*)o)->operator[])(*(::std::size_t*)arg[0]);
  else   (((const ::std::vector<reco::CaloJet>*)o)->operator[])(*(::std::size_t*)arg[0]);
}

static  void method_13835( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<reco::CaloJet>*)o)->at)(*(::std::size_t*)arg[0]);
  else   (((::std::vector<reco::CaloJet>*)o)->at)(*(::std::size_t*)arg[0]);
}

static  void method_13836( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<reco::CaloJet>*)o)->at)(*(::std::size_t*)arg[0]);
  else   (((const ::std::vector<reco::CaloJet>*)o)->at)(*(::std::size_t*)arg[0]);
}

static  void method_13837( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<reco::CaloJet>*)o)->front)();
  else   (((::std::vector<reco::CaloJet>*)o)->front)();
}

static  void method_13838( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<reco::CaloJet>*)o)->front)();
  else   (((const ::std::vector<reco::CaloJet>*)o)->front)();
}

static  void method_13839( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<reco::CaloJet>*)o)->back)();
  else   (((::std::vector<reco::CaloJet>*)o)->back)();
}

static  void method_13840( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<reco::CaloJet>*)o)->back)();
  else   (((const ::std::vector<reco::CaloJet>*)o)->back)();
}

static  void method_13841( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((::std::vector<reco::CaloJet>*)o)->data)());
  else   (((::std::vector<reco::CaloJet>*)o)->data)();
}

static  void method_13842( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::std::vector<reco::CaloJet>*)o)->data)());
  else   (((const ::std::vector<reco::CaloJet>*)o)->data)();
}

static  void method_13843( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<reco::CaloJet>*)o)->push_back)(*(const ::reco::CaloJet*)arg[0]);
}

static  void method_13844( void*, void* o, const std::vector<void*>&, void*)
{
  (((::std::vector<reco::CaloJet>*)o)->pop_back)();
}

static  void method_13845( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<reco::CaloJet*,std::vector<reco::CaloJet> >)((((::std::vector<reco::CaloJet>*)o)->insert)(*(::__gnu_cxx::__normal_iterator<reco::CaloJet*,std::vector<reco::CaloJet> >*)arg[0],
    *(const ::reco::CaloJet*)arg[1]));
  else   (((::std::vector<reco::CaloJet>*)o)->insert)(*(::__gnu_cxx::__normal_iterator<reco::CaloJet*,std::vector<reco::CaloJet> >*)arg[0],
    *(const ::reco::CaloJet*)arg[1]);
}

static  void method_13846( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<reco::CaloJet>*)o)->insert)(*(::__gnu_cxx::__normal_iterator<reco::CaloJet*,std::vector<reco::CaloJet> >*)arg[0],
    *(::std::size_t*)arg[1],
    *(const ::reco::CaloJet*)arg[2]);
}

static  void method_13847( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<reco::CaloJet*,std::vector<reco::CaloJet> >)((((::std::vector<reco::CaloJet>*)o)->erase)(*(::__gnu_cxx::__normal_iterator<reco::CaloJet*,std::vector<reco::CaloJet> >*)arg[0]));
  else   (((::std::vector<reco::CaloJet>*)o)->erase)(*(::__gnu_cxx::__normal_iterator<reco::CaloJet*,std::vector<reco::CaloJet> >*)arg[0]);
}

static  void method_13848( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<reco::CaloJet*,std::vector<reco::CaloJet> >)((((::std::vector<reco::CaloJet>*)o)->erase)(*(::__gnu_cxx::__normal_iterator<reco::CaloJet*,std::vector<reco::CaloJet> >*)arg[0],
    *(::__gnu_cxx::__normal_iterator<reco::CaloJet*,std::vector<reco::CaloJet> >*)arg[1]));
  else   (((::std::vector<reco::CaloJet>*)o)->erase)(*(::__gnu_cxx::__normal_iterator<reco::CaloJet*,std::vector<reco::CaloJet> >*)arg[0],
    *(::__gnu_cxx::__normal_iterator<reco::CaloJet*,std::vector<reco::CaloJet> >*)arg[1]);
}

static  void method_13849( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<reco::CaloJet>*)o)->swap)(*(::std::vector<reco::CaloJet>*)arg[0]);
}

static  void method_13850( void*, void* o, const std::vector<void*>&, void*)
{
  (((::std::vector<reco::CaloJet>*)o)->clear)();
}

static void method_newdel_2991( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::std::vector<reco::CaloJet> >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::std::vector<reco::CaloJet> >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::std::vector<reco::CaloJet> >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::std::vector<reco::CaloJet> >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::std::vector<reco::CaloJet> >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

static void method_x31( void* retaddr, void*, const std::vector<void*>&, void*)
{
  typedef std::vector<std::pair< ::Reflex::Base, int> > Bases_t;
  static Bases_t s_bases;
  if ( !s_bases.size() ) {
    s_bases.push_back(std::make_pair(::Reflex::Base( ::Reflex::TypeBuilder(Reflex::Literal("std::_Vector_base<reco::CaloJet,std::allocator<reco::CaloJet> >")), ::Reflex::BaseOffset< ::std::vector<reco::CaloJet>,::std::_Vector_base<reco::CaloJet,std::allocator<reco::CaloJet> > >::Get(),::Reflex::PROTECTED), 0));
  }
  if (retaddr) *(Bases_t**)retaddr = &s_bases;
}

static void method_x32( void* retaddr, void*, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**) retaddr = ::Reflex::Proxy< ::std::vector<reco::CaloJet> >::Generate();
  else ::Reflex::Proxy< ::std::vector<reco::CaloJet> >::Generate();
}

//------Dictionary for class vector<reco::CaloJet,std::allocator<reco::CaloJet> > -------------------------------
void __std__vector_reco__CaloJet__db_datamem(Reflex::Class*);
void __std__vector_reco__CaloJet__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __std__vector_reco__CaloJet__datamem_bld(&__std__vector_reco__CaloJet__db_datamem);
Reflex::GenreflexMemberBuilder __std__vector_reco__CaloJet__funcmem_bld(&__std__vector_reco__CaloJet__db_funcmem);
void __std__vector_reco__CaloJet__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("std::vector<reco::CaloJet>"), typeid(::std::vector<reco::CaloJet>), sizeof(::std::vector<reco::CaloJet>), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddBase(type_2473, ::Reflex::BaseOffset< ::std::vector<reco::CaloJet>, ::std::_Vector_base<reco::CaloJet,std::allocator<reco::CaloJet> > >::Get(), ::Reflex::PROTECTED)
  .AddTypedef(type_7473, Reflex::Literal("std::vector<reco::CaloJet>::_Alloc_value_type"))
  .AddTypedef(type_2473, Reflex::Literal("std::vector<reco::CaloJet>::_Base"))
  .AddTypedef(type_3258, Reflex::Literal("std::vector<reco::CaloJet>::_Tp_alloc_type"))
  .AddTypedef(type_7986, Reflex::Literal("std::vector<reco::CaloJet>::_Alloc_traits"))
  .AddTypedef(type_7473, Reflex::Literal("std::vector<reco::CaloJet>::value_type"))
  .AddTypedef(type_9289, Reflex::Literal("std::vector<reco::CaloJet>::pointer"))
  .AddTypedef(type_13798, Reflex::Literal("std::vector<reco::CaloJet>::const_pointer"))
  .AddTypedef(type_13800, Reflex::Literal("std::vector<reco::CaloJet>::reference"))
  .AddTypedef(type_13802, Reflex::Literal("std::vector<reco::CaloJet>::const_reference"))
  .AddTypedef(type_7884, Reflex::Literal("std::vector<reco::CaloJet>::iterator"))
  .AddTypedef(type_7885, Reflex::Literal("std::vector<reco::CaloJet>::const_iterator"))
  .AddTypedef(type_3473, Reflex::Literal("std::vector<reco::CaloJet>::const_reverse_iterator"))
  .AddTypedef(type_3474, Reflex::Literal("std::vector<reco::CaloJet>::reverse_iterator"))
  .AddTypedef(type_3189, Reflex::Literal("std::vector<reco::CaloJet>::size_type"))
  .AddTypedef(type_3096, Reflex::Literal("std::vector<reco::CaloJet>::difference_type"))
  .AddTypedef(type_3258, Reflex::Literal("std::vector<reco::CaloJet>::allocator_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("vector"), constructor_13811, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_29808), Reflex::Literal("vector"), constructor_13812, 0, "__a", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_3189, type_13802, type_29808), Reflex::Literal("vector"), constructor_13813, 0, "__n;__value=_Tp();__a=_Alloc()", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_18756), Reflex::Literal("vector"), constructor_13814, 0, "__x", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~vector"), destructor_13815, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_2991, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getBasesTable"), method_x31, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddFunctionMember<void*(void)>(Reflex::Literal("createCollFuncTable"), method_x32, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandFunctionMemberBuilder(&__std__vector_reco__CaloJet__funcmem_bld);
}

//------Delayed data member builder for class vector<reco::CaloJet,std::allocator<reco::CaloJet> > -------------------
void __std__vector_reco__CaloJet__db_datamem(Reflex::Class*) {

}
//------Delayed function member builder for class vector<reco::CaloJet,std::allocator<reco::CaloJet> > -------------------
void __std__vector_reco__CaloJet__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_30650, type_18756), Reflex::Literal("operator="), operator_13816, 0, "__x", ::Reflex::PUBLIC | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_3189, type_13802), Reflex::Literal("assign"), method_13817, 0, "__n;__val", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_7884), Reflex::Literal("begin"), method_13818, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_7885), Reflex::Literal("begin"), method_13819, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_7884), Reflex::Literal("end"), method_13820, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_7885), Reflex::Literal("end"), method_13821, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3189), Reflex::Literal("size"), method_13826, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3189), Reflex::Literal("max_size"), method_13827, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_3189, type_7473), Reflex::Literal("resize"), method_13828, 0, "__new_size;__x=_Tp()", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3189), Reflex::Literal("capacity"), method_13829, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("empty"), method_13830, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_3189), Reflex::Literal("reserve"), method_13831, 0, "__n", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13800, type_3189), Reflex::Literal("operator[]"), operator_13832, 0, "__n", ::Reflex::PUBLIC | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13802, type_3189), Reflex::Literal("operator[]"), operator_13833, 0, "__n", ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13800, type_3189), Reflex::Literal("at"), method_13835, 0, "__n", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13802, type_3189), Reflex::Literal("at"), method_13836, 0, "__n", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13800), Reflex::Literal("front"), method_13837, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13802), Reflex::Literal("front"), method_13838, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13800), Reflex::Literal("back"), method_13839, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13802), Reflex::Literal("back"), method_13840, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_9289), Reflex::Literal("data"), method_13841, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13798), Reflex::Literal("data"), method_13842, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_13802), Reflex::Literal("push_back"), method_13843, 0, "__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680), Reflex::Literal("pop_back"), method_13844, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_7884, type_7884, type_13802), Reflex::Literal("insert"), method_13845, 0, "__position;__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_7884, type_3189, type_13802), Reflex::Literal("insert"), method_13846, 0, "__position;__n;__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_7884, type_7884), Reflex::Literal("erase"), method_13847, 0, "__position", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_7884, type_7884, type_7884), Reflex::Literal("erase"), method_13848, 0, "__first;__last", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_30650), Reflex::Literal("swap"), method_13849, 0, "__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680), Reflex::Literal("clear"), method_13850, 0, 0, ::Reflex::PUBLIC);
}
//------Stub functions for class FwdPtr<reco::PFJet> -------------------------------
static  void operator_20232( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::FwdPtr<reco::PFJet>*)o)->operator=)(*(const ::edm::FwdPtr<reco::PFJet>*)arg[0]);
  else   (((::edm::FwdPtr<reco::PFJet>*)o)->operator=)(*(const ::edm::FwdPtr<reco::PFJet>*)arg[0]);
}

static void constructor_20233( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::FwdPtr<reco::PFJet>(*(const ::edm::FwdPtr<reco::PFJet>*)arg[0]);
  else ::new(mem) ::edm::FwdPtr<reco::PFJet>(*(const ::edm::FwdPtr<reco::PFJet>*)arg[0]);
}

static void constructor_20234( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::FwdPtr<reco::PFJet>();
  else ::new(mem) ::edm::FwdPtr<reco::PFJet>();
}

static void destructor_20235(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::FwdPtr<reco::PFJet>*)o)->::edm::FwdPtr<reco::PFJet>::~FwdPtr)();
}
static  void operator_20236( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::FwdPtr<reco::PFJet>*)o)->operator*)();
  else   (((const ::edm::FwdPtr<reco::PFJet>*)o)->operator*)();
}

static  void operator_20237( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::FwdPtr<reco::PFJet>*)o)->operator->)());
  else   (((const ::edm::FwdPtr<reco::PFJet>*)o)->operator->)();
}

static  void method_20238( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::FwdPtr<reco::PFJet>*)o)->get)());
  else   (((const ::edm::FwdPtr<reco::PFJet>*)o)->get)();
}

static  void method_20239( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::FwdPtr<reco::PFJet>*)o)->isNull)());
  else   (((const ::edm::FwdPtr<reco::PFJet>*)o)->isNull)();
}

static  void method_20240( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::FwdPtr<reco::PFJet>*)o)->isNonnull)());
  else   (((const ::edm::FwdPtr<reco::PFJet>*)o)->isNonnull)();
}

static  void operator_20241( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::FwdPtr<reco::PFJet>*)o)->operator!)());
  else   (((const ::edm::FwdPtr<reco::PFJet>*)o)->operator!)();
}

static  void method_20242( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::FwdPtr<reco::PFJet>*)o)->isAvailable)());
  else   (((const ::edm::FwdPtr<reco::PFJet>*)o)->isAvailable)();
}

static  void method_20243( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::FwdPtr<reco::PFJet>*)o)->isTransient)());
  else   (((const ::edm::FwdPtr<reco::PFJet>*)o)->isTransient)();
}

static  void method_20244( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::ProductID)((((const ::edm::FwdPtr<reco::PFJet>*)o)->id)());
  else   (((const ::edm::FwdPtr<reco::PFJet>*)o)->id)();
}

static  void method_20245( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::FwdPtr<reco::PFJet>*)o)->productGetter)());
  else   (((const ::edm::FwdPtr<reco::PFJet>*)o)->productGetter)();
}

static  void method_20246( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (unsigned long)((((const ::edm::FwdPtr<reco::PFJet>*)o)->key)());
  else   (((const ::edm::FwdPtr<reco::PFJet>*)o)->key)();
}

static  void method_20247( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::FwdPtr<reco::PFJet>*)o)->hasProductCache)());
  else   (((const ::edm::FwdPtr<reco::PFJet>*)o)->hasProductCache)();
}

static  void method_20248( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::FwdPtr<reco::PFJet>*)o)->refCore)();
  else   (((const ::edm::FwdPtr<reco::PFJet>*)o)->refCore)();
}

static  void method_20249( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::FwdPtr<reco::PFJet>*)o)->product)());
  else   (((const ::edm::FwdPtr<reco::PFJet>*)o)->product)();
}

static  void method_20250( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::FwdPtr<reco::PFJet>*)o)->ptr)();
  else   (((const ::edm::FwdPtr<reco::PFJet>*)o)->ptr)();
}

static  void method_20251( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::FwdPtr<reco::PFJet>*)o)->backPtr)();
  else   (((const ::edm::FwdPtr<reco::PFJet>*)o)->backPtr)();
}

static  void method_20252( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (short)((((::edm::FwdPtr<reco::PFJet>*)o)->Class_Version)());
  else   (((::edm::FwdPtr<reco::PFJet>*)o)->Class_Version)();
}

static void method_newdel_4484( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::FwdPtr<reco::PFJet> >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::FwdPtr<reco::PFJet> >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::FwdPtr<reco::PFJet> >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::FwdPtr<reco::PFJet> >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::FwdPtr<reco::PFJet> >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class FwdPtr<reco::PFJet> -------------------------------
void __edm__FwdPtr_reco__PFJet__db_datamem(Reflex::Class*);
void __edm__FwdPtr_reco__PFJet__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__FwdPtr_reco__PFJet__datamem_bld(&__edm__FwdPtr_reco__PFJet__db_datamem);
Reflex::GenreflexMemberBuilder __edm__FwdPtr_reco__PFJet__funcmem_bld(&__edm__FwdPtr_reco__PFJet__db_funcmem);
void __edm__FwdPtr_reco__PFJet__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::FwdPtr<reco::PFJet>"), typeid(::edm::FwdPtr<reco::PFJet>), sizeof(::edm::FwdPtr<reco::PFJet>), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("ClassVersion"), ::edm::FwdPtr<reco::PFJet>::Class_Version())
  .AddTypedef(type_347, Reflex::Literal("edm::FwdPtr<reco::PFJet>::key_type"))
  .AddTypedef(type_7463, Reflex::Literal("edm::FwdPtr<reco::PFJet>::value_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13020, type_13022), Reflex::Literal("operator="), operator_20232, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_13022), Reflex::Literal("FwdPtr"), constructor_20233, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("FwdPtr"), constructor_20234, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~FwdPtr"), destructor_20235, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_4484, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__FwdPtr_reco__PFJet__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__FwdPtr_reco__PFJet__funcmem_bld);
}

//------Delayed data member builder for class FwdPtr<reco::PFJet> -------------------
void __edm__FwdPtr_reco__PFJet__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_4720, Reflex::Literal("ptr_"), OffsetOf(__shadow__::__edm__FwdPtr_reco__PFJet_, ptr_), ::Reflex::PRIVATE)
  .AddDataMember(type_4720, Reflex::Literal("backPtr_"), OffsetOf(__shadow__::__edm__FwdPtr_reco__PFJet_, backPtr_), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class FwdPtr<reco::PFJet> -------------------
void __edm__FwdPtr_reco__PFJet__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_12957), Reflex::Literal("operator*"), operator_20236, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_12953), Reflex::Literal("operator->"), operator_20237, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_12953), Reflex::Literal("get"), method_20238, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("isNull"), method_20239, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("isNonnull"), method_20240, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("operator!"), operator_20241, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("isAvailable"), method_20242, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("isTransient"), method_20243, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4689), Reflex::Literal("id"), method_20244, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_18571), Reflex::Literal("productGetter"), method_20245, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_347), Reflex::Literal("key"), method_20246, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("hasProductCache"), method_20247, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_21597), Reflex::Literal("refCore"), method_20248, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3933), Reflex::Literal("product"), method_20249, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_33465), Reflex::Literal("ptr"), method_20250, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_33465), Reflex::Literal("backPtr"), method_20251, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_231), Reflex::Literal("Class_Version"), method_20252, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC);
}
//------Stub functions for class FwdPtr<reco::BasicJet> -------------------------------
static  void operator_20257( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::FwdPtr<reco::BasicJet>*)o)->operator=)(*(const ::edm::FwdPtr<reco::BasicJet>*)arg[0]);
  else   (((::edm::FwdPtr<reco::BasicJet>*)o)->operator=)(*(const ::edm::FwdPtr<reco::BasicJet>*)arg[0]);
}

static void constructor_20258( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::FwdPtr<reco::BasicJet>(*(const ::edm::FwdPtr<reco::BasicJet>*)arg[0]);
  else ::new(mem) ::edm::FwdPtr<reco::BasicJet>(*(const ::edm::FwdPtr<reco::BasicJet>*)arg[0]);
}

static void constructor_20259( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::FwdPtr<reco::BasicJet>();
  else ::new(mem) ::edm::FwdPtr<reco::BasicJet>();
}

static void destructor_20260(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::FwdPtr<reco::BasicJet>*)o)->::edm::FwdPtr<reco::BasicJet>::~FwdPtr)();
}
static  void operator_20261( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::FwdPtr<reco::BasicJet>*)o)->operator*)();
  else   (((const ::edm::FwdPtr<reco::BasicJet>*)o)->operator*)();
}

static  void operator_20262( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::FwdPtr<reco::BasicJet>*)o)->operator->)());
  else   (((const ::edm::FwdPtr<reco::BasicJet>*)o)->operator->)();
}

static  void method_20263( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::FwdPtr<reco::BasicJet>*)o)->get)());
  else   (((const ::edm::FwdPtr<reco::BasicJet>*)o)->get)();
}

static  void method_20264( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::FwdPtr<reco::BasicJet>*)o)->isNull)());
  else   (((const ::edm::FwdPtr<reco::BasicJet>*)o)->isNull)();
}

static  void method_20265( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::FwdPtr<reco::BasicJet>*)o)->isNonnull)());
  else   (((const ::edm::FwdPtr<reco::BasicJet>*)o)->isNonnull)();
}

static  void operator_20266( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::FwdPtr<reco::BasicJet>*)o)->operator!)());
  else   (((const ::edm::FwdPtr<reco::BasicJet>*)o)->operator!)();
}

static  void method_20267( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::FwdPtr<reco::BasicJet>*)o)->isAvailable)());
  else   (((const ::edm::FwdPtr<reco::BasicJet>*)o)->isAvailable)();
}

static  void method_20268( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::FwdPtr<reco::BasicJet>*)o)->isTransient)());
  else   (((const ::edm::FwdPtr<reco::BasicJet>*)o)->isTransient)();
}

static  void method_20269( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::ProductID)((((const ::edm::FwdPtr<reco::BasicJet>*)o)->id)());
  else   (((const ::edm::FwdPtr<reco::BasicJet>*)o)->id)();
}

static  void method_20270( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::FwdPtr<reco::BasicJet>*)o)->productGetter)());
  else   (((const ::edm::FwdPtr<reco::BasicJet>*)o)->productGetter)();
}

static  void method_20271( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (unsigned long)((((const ::edm::FwdPtr<reco::BasicJet>*)o)->key)());
  else   (((const ::edm::FwdPtr<reco::BasicJet>*)o)->key)();
}

static  void method_20272( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::FwdPtr<reco::BasicJet>*)o)->hasProductCache)());
  else   (((const ::edm::FwdPtr<reco::BasicJet>*)o)->hasProductCache)();
}

static  void method_20273( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::FwdPtr<reco::BasicJet>*)o)->refCore)();
  else   (((const ::edm::FwdPtr<reco::BasicJet>*)o)->refCore)();
}

static  void method_20274( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::FwdPtr<reco::BasicJet>*)o)->product)());
  else   (((const ::edm::FwdPtr<reco::BasicJet>*)o)->product)();
}

static  void method_20275( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::FwdPtr<reco::BasicJet>*)o)->ptr)();
  else   (((const ::edm::FwdPtr<reco::BasicJet>*)o)->ptr)();
}

static  void method_20276( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::FwdPtr<reco::BasicJet>*)o)->backPtr)();
  else   (((const ::edm::FwdPtr<reco::BasicJet>*)o)->backPtr)();
}

static  void method_20277( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (short)((((::edm::FwdPtr<reco::BasicJet>*)o)->Class_Version)());
  else   (((::edm::FwdPtr<reco::BasicJet>*)o)->Class_Version)();
}

static void method_newdel_4485( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::FwdPtr<reco::BasicJet> >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::FwdPtr<reco::BasicJet> >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::FwdPtr<reco::BasicJet> >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::FwdPtr<reco::BasicJet> >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::FwdPtr<reco::BasicJet> >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class FwdPtr<reco::BasicJet> -------------------------------
void __edm__FwdPtr_reco__BasicJet__db_datamem(Reflex::Class*);
void __edm__FwdPtr_reco__BasicJet__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__FwdPtr_reco__BasicJet__datamem_bld(&__edm__FwdPtr_reco__BasicJet__db_datamem);
Reflex::GenreflexMemberBuilder __edm__FwdPtr_reco__BasicJet__funcmem_bld(&__edm__FwdPtr_reco__BasicJet__db_funcmem);
void __edm__FwdPtr_reco__BasicJet__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::FwdPtr<reco::BasicJet>"), typeid(::edm::FwdPtr<reco::BasicJet>), sizeof(::edm::FwdPtr<reco::BasicJet>), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("ClassVersion"), ::edm::FwdPtr<reco::BasicJet>::Class_Version())
  .AddTypedef(type_347, Reflex::Literal("edm::FwdPtr<reco::BasicJet>::key_type"))
  .AddTypedef(type_7564, Reflex::Literal("edm::FwdPtr<reco::BasicJet>::value_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13280, type_13282), Reflex::Literal("operator="), operator_20257, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_13282), Reflex::Literal("FwdPtr"), constructor_20258, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("FwdPtr"), constructor_20259, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~FwdPtr"), destructor_20260, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_4485, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__FwdPtr_reco__BasicJet__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__FwdPtr_reco__BasicJet__funcmem_bld);
}

//------Delayed data member builder for class FwdPtr<reco::BasicJet> -------------------
void __edm__FwdPtr_reco__BasicJet__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_4721, Reflex::Literal("ptr_"), OffsetOf(__shadow__::__edm__FwdPtr_reco__BasicJet_, ptr_), ::Reflex::PRIVATE)
  .AddDataMember(type_4721, Reflex::Literal("backPtr_"), OffsetOf(__shadow__::__edm__FwdPtr_reco__BasicJet_, backPtr_), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class FwdPtr<reco::BasicJet> -------------------
void __edm__FwdPtr_reco__BasicJet__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13412), Reflex::Literal("operator*"), operator_20261, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13408), Reflex::Literal("operator->"), operator_20262, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13408), Reflex::Literal("get"), method_20263, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("isNull"), method_20264, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("isNonnull"), method_20265, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("operator!"), operator_20266, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("isAvailable"), method_20267, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("isTransient"), method_20268, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4689), Reflex::Literal("id"), method_20269, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_18571), Reflex::Literal("productGetter"), method_20270, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_347), Reflex::Literal("key"), method_20271, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("hasProductCache"), method_20272, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_21597), Reflex::Literal("refCore"), method_20273, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3933), Reflex::Literal("product"), method_20274, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_33466), Reflex::Literal("ptr"), method_20275, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_33466), Reflex::Literal("backPtr"), method_20276, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_231), Reflex::Literal("Class_Version"), method_20277, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC);
}
//------Stub functions for class FwdPtr<reco::GenJet> -------------------------------
static  void operator_20282( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::FwdPtr<reco::GenJet>*)o)->operator=)(*(const ::edm::FwdPtr<reco::GenJet>*)arg[0]);
  else   (((::edm::FwdPtr<reco::GenJet>*)o)->operator=)(*(const ::edm::FwdPtr<reco::GenJet>*)arg[0]);
}

static void constructor_20283( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::FwdPtr<reco::GenJet>(*(const ::edm::FwdPtr<reco::GenJet>*)arg[0]);
  else ::new(mem) ::edm::FwdPtr<reco::GenJet>(*(const ::edm::FwdPtr<reco::GenJet>*)arg[0]);
}

static void constructor_20284( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::FwdPtr<reco::GenJet>();
  else ::new(mem) ::edm::FwdPtr<reco::GenJet>();
}

static void destructor_20285(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::FwdPtr<reco::GenJet>*)o)->::edm::FwdPtr<reco::GenJet>::~FwdPtr)();
}
static  void operator_20286( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::FwdPtr<reco::GenJet>*)o)->operator*)();
  else   (((const ::edm::FwdPtr<reco::GenJet>*)o)->operator*)();
}

static  void operator_20287( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::FwdPtr<reco::GenJet>*)o)->operator->)());
  else   (((const ::edm::FwdPtr<reco::GenJet>*)o)->operator->)();
}

static  void method_20288( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::FwdPtr<reco::GenJet>*)o)->get)());
  else   (((const ::edm::FwdPtr<reco::GenJet>*)o)->get)();
}

static  void method_20289( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::FwdPtr<reco::GenJet>*)o)->isNull)());
  else   (((const ::edm::FwdPtr<reco::GenJet>*)o)->isNull)();
}

static  void method_20290( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::FwdPtr<reco::GenJet>*)o)->isNonnull)());
  else   (((const ::edm::FwdPtr<reco::GenJet>*)o)->isNonnull)();
}

static  void operator_20291( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::FwdPtr<reco::GenJet>*)o)->operator!)());
  else   (((const ::edm::FwdPtr<reco::GenJet>*)o)->operator!)();
}

static  void method_20292( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::FwdPtr<reco::GenJet>*)o)->isAvailable)());
  else   (((const ::edm::FwdPtr<reco::GenJet>*)o)->isAvailable)();
}

static  void method_20293( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::FwdPtr<reco::GenJet>*)o)->isTransient)());
  else   (((const ::edm::FwdPtr<reco::GenJet>*)o)->isTransient)();
}

static  void method_20294( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::ProductID)((((const ::edm::FwdPtr<reco::GenJet>*)o)->id)());
  else   (((const ::edm::FwdPtr<reco::GenJet>*)o)->id)();
}

static  void method_20295( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::FwdPtr<reco::GenJet>*)o)->productGetter)());
  else   (((const ::edm::FwdPtr<reco::GenJet>*)o)->productGetter)();
}

static  void method_20296( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (unsigned long)((((const ::edm::FwdPtr<reco::GenJet>*)o)->key)());
  else   (((const ::edm::FwdPtr<reco::GenJet>*)o)->key)();
}

static  void method_20297( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::FwdPtr<reco::GenJet>*)o)->hasProductCache)());
  else   (((const ::edm::FwdPtr<reco::GenJet>*)o)->hasProductCache)();
}

static  void method_20298( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::FwdPtr<reco::GenJet>*)o)->refCore)();
  else   (((const ::edm::FwdPtr<reco::GenJet>*)o)->refCore)();
}

static  void method_20299( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::FwdPtr<reco::GenJet>*)o)->product)());
  else   (((const ::edm::FwdPtr<reco::GenJet>*)o)->product)();
}

static  void method_20300( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::FwdPtr<reco::GenJet>*)o)->ptr)();
  else   (((const ::edm::FwdPtr<reco::GenJet>*)o)->ptr)();
}

static  void method_20301( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::FwdPtr<reco::GenJet>*)o)->backPtr)();
  else   (((const ::edm::FwdPtr<reco::GenJet>*)o)->backPtr)();
}

static  void method_20302( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (short)((((::edm::FwdPtr<reco::GenJet>*)o)->Class_Version)());
  else   (((::edm::FwdPtr<reco::GenJet>*)o)->Class_Version)();
}

static void method_newdel_4486( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::FwdPtr<reco::GenJet> >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::FwdPtr<reco::GenJet> >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::FwdPtr<reco::GenJet> >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::FwdPtr<reco::GenJet> >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::FwdPtr<reco::GenJet> >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class FwdPtr<reco::GenJet> -------------------------------
void __edm__FwdPtr_reco__GenJet__db_datamem(Reflex::Class*);
void __edm__FwdPtr_reco__GenJet__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__FwdPtr_reco__GenJet__datamem_bld(&__edm__FwdPtr_reco__GenJet__db_datamem);
Reflex::GenreflexMemberBuilder __edm__FwdPtr_reco__GenJet__funcmem_bld(&__edm__FwdPtr_reco__GenJet__db_funcmem);
void __edm__FwdPtr_reco__GenJet__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::FwdPtr<reco::GenJet>"), typeid(::edm::FwdPtr<reco::GenJet>), sizeof(::edm::FwdPtr<reco::GenJet>), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("ClassVersion"), ::edm::FwdPtr<reco::GenJet>::Class_Version())
  .AddTypedef(type_347, Reflex::Literal("edm::FwdPtr<reco::GenJet>::key_type"))
  .AddTypedef(type_7512, Reflex::Literal("edm::FwdPtr<reco::GenJet>::value_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13475, type_13477), Reflex::Literal("operator="), operator_20282, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_13477), Reflex::Literal("FwdPtr"), constructor_20283, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("FwdPtr"), constructor_20284, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~FwdPtr"), destructor_20285, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_4486, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__FwdPtr_reco__GenJet__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__FwdPtr_reco__GenJet__funcmem_bld);
}

//------Delayed data member builder for class FwdPtr<reco::GenJet> -------------------
void __edm__FwdPtr_reco__GenJet__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_4722, Reflex::Literal("ptr_"), OffsetOf(__shadow__::__edm__FwdPtr_reco__GenJet_, ptr_), ::Reflex::PRIVATE)
  .AddDataMember(type_4722, Reflex::Literal("backPtr_"), OffsetOf(__shadow__::__edm__FwdPtr_reco__GenJet_, backPtr_), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class FwdPtr<reco::GenJet> -------------------
void __edm__FwdPtr_reco__GenJet__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13607), Reflex::Literal("operator*"), operator_20286, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13603), Reflex::Literal("operator->"), operator_20287, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13603), Reflex::Literal("get"), method_20288, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("isNull"), method_20289, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("isNonnull"), method_20290, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("operator!"), operator_20291, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("isAvailable"), method_20292, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("isTransient"), method_20293, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4689), Reflex::Literal("id"), method_20294, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_18571), Reflex::Literal("productGetter"), method_20295, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_347), Reflex::Literal("key"), method_20296, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("hasProductCache"), method_20297, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_21597), Reflex::Literal("refCore"), method_20298, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3933), Reflex::Literal("product"), method_20299, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_33467), Reflex::Literal("ptr"), method_20300, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_33467), Reflex::Literal("backPtr"), method_20301, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_231), Reflex::Literal("Class_Version"), method_20302, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC);
}
//------Stub functions for class FwdPtr<reco::CaloJet> -------------------------------
static  void operator_20307( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::FwdPtr<reco::CaloJet>*)o)->operator=)(*(const ::edm::FwdPtr<reco::CaloJet>*)arg[0]);
  else   (((::edm::FwdPtr<reco::CaloJet>*)o)->operator=)(*(const ::edm::FwdPtr<reco::CaloJet>*)arg[0]);
}

static void constructor_20308( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::FwdPtr<reco::CaloJet>(*(const ::edm::FwdPtr<reco::CaloJet>*)arg[0]);
  else ::new(mem) ::edm::FwdPtr<reco::CaloJet>(*(const ::edm::FwdPtr<reco::CaloJet>*)arg[0]);
}

static void constructor_20309( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::FwdPtr<reco::CaloJet>();
  else ::new(mem) ::edm::FwdPtr<reco::CaloJet>();
}

static void destructor_20310(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::FwdPtr<reco::CaloJet>*)o)->::edm::FwdPtr<reco::CaloJet>::~FwdPtr)();
}
static  void operator_20311( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::FwdPtr<reco::CaloJet>*)o)->operator*)();
  else   (((const ::edm::FwdPtr<reco::CaloJet>*)o)->operator*)();
}

static  void operator_20312( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::FwdPtr<reco::CaloJet>*)o)->operator->)());
  else   (((const ::edm::FwdPtr<reco::CaloJet>*)o)->operator->)();
}

static  void method_20313( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::FwdPtr<reco::CaloJet>*)o)->get)());
  else   (((const ::edm::FwdPtr<reco::CaloJet>*)o)->get)();
}

static  void method_20314( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::FwdPtr<reco::CaloJet>*)o)->isNull)());
  else   (((const ::edm::FwdPtr<reco::CaloJet>*)o)->isNull)();
}

static  void method_20315( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::FwdPtr<reco::CaloJet>*)o)->isNonnull)());
  else   (((const ::edm::FwdPtr<reco::CaloJet>*)o)->isNonnull)();
}

static  void operator_20316( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::FwdPtr<reco::CaloJet>*)o)->operator!)());
  else   (((const ::edm::FwdPtr<reco::CaloJet>*)o)->operator!)();
}

static  void method_20317( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::FwdPtr<reco::CaloJet>*)o)->isAvailable)());
  else   (((const ::edm::FwdPtr<reco::CaloJet>*)o)->isAvailable)();
}

static  void method_20318( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::FwdPtr<reco::CaloJet>*)o)->isTransient)());
  else   (((const ::edm::FwdPtr<reco::CaloJet>*)o)->isTransient)();
}

static  void method_20319( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::ProductID)((((const ::edm::FwdPtr<reco::CaloJet>*)o)->id)());
  else   (((const ::edm::FwdPtr<reco::CaloJet>*)o)->id)();
}

static  void method_20320( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::FwdPtr<reco::CaloJet>*)o)->productGetter)());
  else   (((const ::edm::FwdPtr<reco::CaloJet>*)o)->productGetter)();
}

static  void method_20321( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (unsigned long)((((const ::edm::FwdPtr<reco::CaloJet>*)o)->key)());
  else   (((const ::edm::FwdPtr<reco::CaloJet>*)o)->key)();
}

static  void method_20322( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::FwdPtr<reco::CaloJet>*)o)->hasProductCache)());
  else   (((const ::edm::FwdPtr<reco::CaloJet>*)o)->hasProductCache)();
}

static  void method_20323( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::FwdPtr<reco::CaloJet>*)o)->refCore)();
  else   (((const ::edm::FwdPtr<reco::CaloJet>*)o)->refCore)();
}

static  void method_20324( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::FwdPtr<reco::CaloJet>*)o)->product)());
  else   (((const ::edm::FwdPtr<reco::CaloJet>*)o)->product)();
}

static  void method_20325( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::FwdPtr<reco::CaloJet>*)o)->ptr)();
  else   (((const ::edm::FwdPtr<reco::CaloJet>*)o)->ptr)();
}

static  void method_20326( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::FwdPtr<reco::CaloJet>*)o)->backPtr)();
  else   (((const ::edm::FwdPtr<reco::CaloJet>*)o)->backPtr)();
}

static  void method_20327( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (short)((((::edm::FwdPtr<reco::CaloJet>*)o)->Class_Version)());
  else   (((::edm::FwdPtr<reco::CaloJet>*)o)->Class_Version)();
}

static void method_newdel_4487( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::FwdPtr<reco::CaloJet> >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::FwdPtr<reco::CaloJet> >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::FwdPtr<reco::CaloJet> >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::FwdPtr<reco::CaloJet> >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::FwdPtr<reco::CaloJet> >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class FwdPtr<reco::CaloJet> -------------------------------
void __edm__FwdPtr_reco__CaloJet__db_datamem(Reflex::Class*);
void __edm__FwdPtr_reco__CaloJet__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__FwdPtr_reco__CaloJet__datamem_bld(&__edm__FwdPtr_reco__CaloJet__db_datamem);
Reflex::GenreflexMemberBuilder __edm__FwdPtr_reco__CaloJet__funcmem_bld(&__edm__FwdPtr_reco__CaloJet__db_funcmem);
void __edm__FwdPtr_reco__CaloJet__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::FwdPtr<reco::CaloJet>"), typeid(::edm::FwdPtr<reco::CaloJet>), sizeof(::edm::FwdPtr<reco::CaloJet>), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("ClassVersion"), ::edm::FwdPtr<reco::CaloJet>::Class_Version())
  .AddTypedef(type_347, Reflex::Literal("edm::FwdPtr<reco::CaloJet>::key_type"))
  .AddTypedef(type_7473, Reflex::Literal("edm::FwdPtr<reco::CaloJet>::value_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13865, type_13867), Reflex::Literal("operator="), operator_20307, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_13867), Reflex::Literal("FwdPtr"), constructor_20308, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("FwdPtr"), constructor_20309, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~FwdPtr"), destructor_20310, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_4487, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__FwdPtr_reco__CaloJet__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__FwdPtr_reco__CaloJet__funcmem_bld);
}

//------Delayed data member builder for class FwdPtr<reco::CaloJet> -------------------
void __edm__FwdPtr_reco__CaloJet__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_4723, Reflex::Literal("ptr_"), OffsetOf(__shadow__::__edm__FwdPtr_reco__CaloJet_, ptr_), ::Reflex::PRIVATE)
  .AddDataMember(type_4723, Reflex::Literal("backPtr_"), OffsetOf(__shadow__::__edm__FwdPtr_reco__CaloJet_, backPtr_), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class FwdPtr<reco::CaloJet> -------------------
void __edm__FwdPtr_reco__CaloJet__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13802), Reflex::Literal("operator*"), operator_20311, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13798), Reflex::Literal("operator->"), operator_20312, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13798), Reflex::Literal("get"), method_20313, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("isNull"), method_20314, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("isNonnull"), method_20315, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("operator!"), operator_20316, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("isAvailable"), method_20317, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("isTransient"), method_20318, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4689), Reflex::Literal("id"), method_20319, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_18571), Reflex::Literal("productGetter"), method_20320, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_347), Reflex::Literal("key"), method_20321, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("hasProductCache"), method_20322, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_21597), Reflex::Literal("refCore"), method_20323, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3933), Reflex::Literal("product"), method_20324, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_33468), Reflex::Literal("ptr"), method_20325, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_33468), Reflex::Literal("backPtr"), method_20326, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_231), Reflex::Literal("Class_Version"), method_20327, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC);
}
//------Stub functions for class RefVector<std::vector<reco::JPTJet, std::allocator<reco::JPTJet> >,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet, std::allocator<reco::JPTJet> >, reco::JPTJet> > -------------------------------
static void destructor_20383(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::RefVector<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >*)o)->::edm::RefVector<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >::~RefVector)();
}
static void constructor_20384( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefVector<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >();
  else ::new(mem) ::edm::RefVector<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >();
}

static void constructor_20385( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefVector<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >(*(const ::edm::RefVector<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >*)arg[0]);
  else ::new(mem) ::edm::RefVector<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >(*(const ::edm::RefVector<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >*)arg[0]);
}

static void constructor_20386( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefVector<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >(*(const ::edm::ProductID*)arg[0]);
  else ::new(mem) ::edm::RefVector<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >(*(const ::edm::ProductID*)arg[0]);
}

static  void method_20387( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::edm::RefVector<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >*)o)->push_back)(*(const ::edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >*)arg[0]);
}

static  void operator_20388( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >)((((const ::edm::RefVector<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >*)o)->operator[])(*(::std::size_t*)arg[0]));
  else   (((const ::edm::RefVector<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >*)o)->operator[])(*(::std::size_t*)arg[0]);
}

static  void method_20389( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >)((((const ::edm::RefVector<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >*)o)->at)(*(::std::size_t*)arg[0]));
  else   (((const ::edm::RefVector<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >*)o)->at)(*(::std::size_t*)arg[0]);
}

static  void method_20390( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::RefVector<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >*)o)->refVector)();
  else   (((const ::edm::RefVector<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >*)o)->refVector)();
}

static  void method_20391( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefVector<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >*)o)->empty)());
  else   (((const ::edm::RefVector<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >*)o)->empty)();
}

static  void method_20392( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::edm::RefVector<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >*)o)->size)());
  else   (((const ::edm::RefVector<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >*)o)->size)();
}

static  void method_20393( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::edm::RefVector<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >*)o)->capacity)());
  else   (((const ::edm::RefVector<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >*)o)->capacity)();
}

static  void method_20394( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::edm::RefVector<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >*)o)->reserve)(*(::std::size_t*)arg[0]);
}

static  void method_20395( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::RefVectorIterator<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >)((((const ::edm::RefVector<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >*)o)->begin)());
  else   (((const ::edm::RefVector<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >*)o)->begin)();
}

static  void method_20396( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::RefVectorIterator<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >)((((const ::edm::RefVector<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >*)o)->end)());
  else   (((const ::edm::RefVector<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >*)o)->end)();
}

static  void method_20397( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::ProductID)((((const ::edm::RefVector<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >*)o)->id)());
  else   (((const ::edm::RefVector<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >*)o)->id)();
}

static  void method_20398( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::RefVector<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >*)o)->productGetter)());
  else   (((const ::edm::RefVector<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >*)o)->productGetter)();
}

static  void method_20399( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefVector<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >*)o)->isNull)());
  else   (((const ::edm::RefVector<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >*)o)->isNull)();
}

static  void method_20400( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefVector<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >*)o)->isNonnull)());
  else   (((const ::edm::RefVector<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >*)o)->isNonnull)();
}

static  void operator_20401( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefVector<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >*)o)->operator!)());
  else   (((const ::edm::RefVector<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >*)o)->operator!)();
}

static  void method_20402( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::RefVector<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >*)o)->product)());
  else   (((const ::edm::RefVector<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >*)o)->product)();
}

static  void method_20403( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefVector<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >*)o)->isAvailable)());
  else   (((const ::edm::RefVector<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >*)o)->isAvailable)();
}

static  void method_20404( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefVector<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >*)o)->isTransient)());
  else   (((const ::edm::RefVector<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >*)o)->isTransient)();
}

static  void method_20405( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (edm::RefVectorIterator<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >)((((::edm::RefVector<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >*)o)->erase)(*(const ::edm::RefVectorIterator<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >*)arg[0]));
  else   (((::edm::RefVector<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >*)o)->erase)(*(const ::edm::RefVectorIterator<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >*)arg[0]);
}

static  void method_20406( void*, void* o, const std::vector<void*>&, void*)
{
  (((::edm::RefVector<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >*)o)->clear)();
}

static  void method_20407( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::edm::RefVector<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >*)o)->swap)(*(::edm::RefVector<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >*)arg[0]);
}

static  void operator_20408( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::RefVector<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >*)o)->operator=)(*(const ::edm::RefVector<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >*)arg[0]);
  else   (((::edm::RefVector<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >*)o)->operator=)(*(const ::edm::RefVector<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >*)arg[0]);
}

static  void method_20409( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefVector<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >*)o)->hasProductCache)());
  else   (((const ::edm::RefVector<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >*)o)->hasProductCache)();
}

static  void method_20410( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::RefVector<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >*)o)->fillView)(*(const ::edm::ProductID*)arg[0],
    *(::std::vector<const void*>*)arg[1],
    *(::edm::helper_vector*)arg[2]);
}

static  void method_20411( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (short)((((::edm::RefVector<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >*)o)->Class_Version)());
  else   (((::edm::RefVector<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >*)o)->Class_Version)();
}

static void method_newdel_4491( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::RefVector<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::RefVector<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::RefVector<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::RefVector<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::RefVector<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class RefVector<std::vector<reco::JPTJet, std::allocator<reco::JPTJet> >,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet, std::allocator<reco::JPTJet> >, reco::JPTJet> > -------------------------------
void __edm__RefVector_std__vector_reco__JPTJet__reco__JPTJet_edm__refhelper__FindUsingAdvance_std__vector_reco__JPTJet__reco__JPTJet_s__db_datamem(Reflex::Class*);
void __edm__RefVector_std__vector_reco__JPTJet__reco__JPTJet_edm__refhelper__FindUsingAdvance_std__vector_reco__JPTJet__reco__JPTJet_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__RefVector_std__vector_reco__JPTJet__reco__JPTJet_edm__refhelper__FindUsingAdvance_std__vector_reco__JPTJet__reco__JPTJet_s__datamem_bld(&__edm__RefVector_std__vector_reco__JPTJet__reco__JPTJet_edm__refhelper__FindUsingAdvance_std__vector_reco__JPTJet__reco__JPTJet_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__RefVector_std__vector_reco__JPTJet__reco__JPTJet_edm__refhelper__FindUsingAdvance_std__vector_reco__JPTJet__reco__JPTJet_s__funcmem_bld(&__edm__RefVector_std__vector_reco__JPTJet__reco__JPTJet_edm__refhelper__FindUsingAdvance_std__vector_reco__JPTJet__reco__JPTJet_s__db_funcmem);
void __edm__RefVector_std__vector_reco__JPTJet__reco__JPTJet_edm__refhelper__FindUsingAdvance_std__vector_reco__JPTJet__reco__JPTJet_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::RefVector<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >"), typeid(::edm::RefVector<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >), sizeof(::edm::RefVector<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("ClassVersion"), ::edm::RefVector<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >::Class_Version())
  .AddTypedef(type_2968, Reflex::Literal("edm::RefVector<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >::collection_type"))
  .AddTypedef(type_7528, Reflex::Literal("edm::RefVector<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >::member_type"))
  .AddTypedef(type_18691, Reflex::Literal("edm::RefVector<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >::finder_type"))
  .AddTypedef(type_4453, Reflex::Literal("edm::RefVector<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >::iterator"))
  .AddTypedef(type_4453, Reflex::Literal("edm::RefVector<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >::const_iterator"))
  .AddTypedef(type_4738, Reflex::Literal("edm::RefVector<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >::value_type"))
  .AddTypedef(type_4738c, Reflex::Literal("edm::RefVector<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >::const_reference"))
  .AddTypedef(type_4738c, Reflex::Literal("edm::RefVector<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >::reference"))
  .AddTypedef(type_356, Reflex::Literal("edm::RefVector<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >::key_type"))
  .AddTypedef(type_2962, Reflex::Literal("edm::RefVector<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >::KeyVec"))
  .AddTypedef(type_3189, Reflex::Literal("edm::RefVector<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >::size_type"))
  .AddTypedef(type_3901, Reflex::Literal("edm::RefVector<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >::contents_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~RefVector"), destructor_20383, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::DESTRUCTOR )
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("RefVector"), constructor_20384, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_33473), Reflex::Literal("RefVector"), constructor_20385, 0, "rh", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_18495), Reflex::Literal("RefVector"), constructor_20386, 0, "iId", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_4491, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__RefVector_std__vector_reco__JPTJet__reco__JPTJet_edm__refhelper__FindUsingAdvance_std__vector_reco__JPTJet__reco__JPTJet_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__RefVector_std__vector_reco__JPTJet__reco__JPTJet_edm__refhelper__FindUsingAdvance_std__vector_reco__JPTJet__reco__JPTJet_s__funcmem_bld);
}

//------Delayed data member builder for class RefVector<std::vector<reco::JPTJet, std::allocator<reco::JPTJet> >,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet, std::allocator<reco::JPTJet> >, reco::JPTJet> > -------------------
void __edm__RefVector_std__vector_reco__JPTJet__reco__JPTJet_edm__refhelper__FindUsingAdvance_std__vector_reco__JPTJet__reco__JPTJet_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_3901, Reflex::Literal("refVector_"), OffsetOf(__shadow__::__edm__RefVector_std__vector_reco__JPTJet__reco__JPTJet_edm__refhelper__FindUsingAdvance_std__vector_reco__JPTJet__reco__JPTJet_s_, refVector_), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class RefVector<std::vector<reco::JPTJet, std::allocator<reco::JPTJet> >,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet, std::allocator<reco::JPTJet> >, reco::JPTJet> > -------------------
void __edm__RefVector_std__vector_reco__JPTJet__reco__JPTJet_edm__refhelper__FindUsingAdvance_std__vector_reco__JPTJet__reco__JPTJet_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_33204), Reflex::Literal("push_back"), method_20387, 0, "ref", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4738c, type_3189), Reflex::Literal("operator[]"), operator_20388, 0, "idx", ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4738c, type_3189), Reflex::Literal("at"), method_20389, 0, "idx", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_18570), Reflex::Literal("refVector"), method_20390, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("empty"), method_20391, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3189), Reflex::Literal("size"), method_20392, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3189), Reflex::Literal("capacity"), method_20393, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_3189), Reflex::Literal("reserve"), method_20394, 0, "n", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4453), Reflex::Literal("begin"), method_20395, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4453), Reflex::Literal("end"), method_20396, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4689), Reflex::Literal("id"), method_20397, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_18571), Reflex::Literal("productGetter"), method_20398, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("isNull"), method_20399, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("isNonnull"), method_20400, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("operator!"), operator_20401, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_33474), Reflex::Literal("product"), method_20402, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("isAvailable"), method_20403, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("isTransient"), method_20404, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4453, type_33475), Reflex::Literal("erase"), method_20405, 0, "pos", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680), Reflex::Literal("clear"), method_20406, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_33476), Reflex::Literal("swap"), method_20407, 0, "other", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_33476, type_33473), Reflex::Literal("operator="), operator_20408, 0, "rhs", ::Reflex::PUBLIC | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("hasProductCache"), method_20409, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_18495, type_18575, type_18576), Reflex::Literal("fillView"), method_20410, 0, ";pointers;helpers", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_231), Reflex::Literal("Class_Version"), method_20411, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC);
}
//------Stub functions for class RefVector<std::vector<reco::PFJet, std::allocator<reco::PFJet> >,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet> > -------------------------------
static void destructor_20425(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)o)->::edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >::~RefVector)();
}
static void constructor_20426( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >();
  else ::new(mem) ::edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >();
}

static void constructor_20427( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >(*(const ::edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)arg[0]);
  else ::new(mem) ::edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >(*(const ::edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)arg[0]);
}

static void constructor_20428( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >(*(const ::edm::ProductID*)arg[0]);
  else ::new(mem) ::edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >(*(const ::edm::ProductID*)arg[0]);
}

static  void method_20429( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)o)->push_back)(*(const ::edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)arg[0]);
}

static  void operator_20430( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >)((((const ::edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)o)->operator[])(*(::std::size_t*)arg[0]));
  else   (((const ::edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)o)->operator[])(*(::std::size_t*)arg[0]);
}

static  void method_20431( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >)((((const ::edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)o)->at)(*(::std::size_t*)arg[0]));
  else   (((const ::edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)o)->at)(*(::std::size_t*)arg[0]);
}

static  void method_20432( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)o)->refVector)();
  else   (((const ::edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)o)->refVector)();
}

static  void method_20433( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)o)->empty)());
  else   (((const ::edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)o)->empty)();
}

static  void method_20434( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)o)->size)());
  else   (((const ::edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)o)->size)();
}

static  void method_20435( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)o)->capacity)());
  else   (((const ::edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)o)->capacity)();
}

static  void method_20436( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)o)->reserve)(*(::std::size_t*)arg[0]);
}

static  void method_20437( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::RefVectorIterator<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >)((((const ::edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)o)->begin)());
  else   (((const ::edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)o)->begin)();
}

static  void method_20438( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::RefVectorIterator<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >)((((const ::edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)o)->end)());
  else   (((const ::edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)o)->end)();
}

static  void method_20439( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::ProductID)((((const ::edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)o)->id)());
  else   (((const ::edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)o)->id)();
}

static  void method_20440( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)o)->productGetter)());
  else   (((const ::edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)o)->productGetter)();
}

static  void method_20441( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)o)->isNull)());
  else   (((const ::edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)o)->isNull)();
}

static  void method_20442( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)o)->isNonnull)());
  else   (((const ::edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)o)->isNonnull)();
}

static  void operator_20443( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)o)->operator!)());
  else   (((const ::edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)o)->operator!)();
}

static  void method_20444( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)o)->product)());
  else   (((const ::edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)o)->product)();
}

static  void method_20445( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)o)->isAvailable)());
  else   (((const ::edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)o)->isAvailable)();
}

static  void method_20446( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)o)->isTransient)());
  else   (((const ::edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)o)->isTransient)();
}

static  void method_20447( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (edm::RefVectorIterator<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >)((((::edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)o)->erase)(*(const ::edm::RefVectorIterator<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)arg[0]));
  else   (((::edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)o)->erase)(*(const ::edm::RefVectorIterator<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)arg[0]);
}

static  void method_20448( void*, void* o, const std::vector<void*>&, void*)
{
  (((::edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)o)->clear)();
}

static  void method_20449( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)o)->swap)(*(::edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)arg[0]);
}

static  void operator_20450( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)o)->operator=)(*(const ::edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)arg[0]);
  else   (((::edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)o)->operator=)(*(const ::edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)arg[0]);
}

static  void method_20451( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)o)->hasProductCache)());
  else   (((const ::edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)o)->hasProductCache)();
}

static  void method_20452( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)o)->fillView)(*(const ::edm::ProductID*)arg[0],
    *(::std::vector<const void*>*)arg[1],
    *(::edm::helper_vector*)arg[2]);
}

static  void method_20453( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (short)((((::edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)o)->Class_Version)());
  else   (((::edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)o)->Class_Version)();
}

static void method_newdel_4496( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class RefVector<std::vector<reco::PFJet, std::allocator<reco::PFJet> >,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet> > -------------------------------
void __edm__RefVector_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s__db_datamem(Reflex::Class*);
void __edm__RefVector_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__RefVector_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s__datamem_bld(&__edm__RefVector_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__RefVector_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s__funcmem_bld(&__edm__RefVector_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s__db_funcmem);
void __edm__RefVector_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >"), typeid(::edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >), sizeof(::edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("ClassVersion"), ::edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >::Class_Version())
  .AddTypedef(type_2971, Reflex::Literal("edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >::collection_type"))
  .AddTypedef(type_7463, Reflex::Literal("edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >::member_type"))
  .AddTypedef(type_18703, Reflex::Literal("edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >::finder_type"))
  .AddTypedef(type_4454, Reflex::Literal("edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >::iterator"))
  .AddTypedef(type_4454, Reflex::Literal("edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >::const_iterator"))
  .AddTypedef(type_4740, Reflex::Literal("edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >::value_type"))
  .AddTypedef(type_4740c, Reflex::Literal("edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >::const_reference"))
  .AddTypedef(type_4740c, Reflex::Literal("edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >::reference"))
  .AddTypedef(type_356, Reflex::Literal("edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >::key_type"))
  .AddTypedef(type_2962, Reflex::Literal("edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >::KeyVec"))
  .AddTypedef(type_3189, Reflex::Literal("edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >::size_type"))
  .AddTypedef(type_3901, Reflex::Literal("edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >::contents_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~RefVector"), destructor_20425, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::DESTRUCTOR )
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("RefVector"), constructor_20426, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_12827), Reflex::Literal("RefVector"), constructor_20427, 0, "rh", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_18495), Reflex::Literal("RefVector"), constructor_20428, 0, "iId", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_4496, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__RefVector_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__RefVector_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s__funcmem_bld);
}

//------Delayed data member builder for class RefVector<std::vector<reco::PFJet, std::allocator<reco::PFJet> >,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet> > -------------------
void __edm__RefVector_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_3901, Reflex::Literal("refVector_"), OffsetOf(__shadow__::__edm__RefVector_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_, refVector_), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class RefVector<std::vector<reco::PFJet, std::allocator<reco::PFJet> >,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet> > -------------------
void __edm__RefVector_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_12892), Reflex::Literal("push_back"), method_20429, 0, "ref", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4740c, type_3189), Reflex::Literal("operator[]"), operator_20430, 0, "idx", ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4740c, type_3189), Reflex::Literal("at"), method_20431, 0, "idx", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_18570), Reflex::Literal("refVector"), method_20432, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("empty"), method_20433, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3189), Reflex::Literal("size"), method_20434, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3189), Reflex::Literal("capacity"), method_20435, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_3189), Reflex::Literal("reserve"), method_20436, 0, "n", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4454), Reflex::Literal("begin"), method_20437, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4454), Reflex::Literal("end"), method_20438, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4689), Reflex::Literal("id"), method_20439, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_18571), Reflex::Literal("productGetter"), method_20440, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("isNull"), method_20441, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("isNonnull"), method_20442, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("operator!"), operator_20443, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_33477), Reflex::Literal("product"), method_20444, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("isAvailable"), method_20445, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("isTransient"), method_20446, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4454, type_33478), Reflex::Literal("erase"), method_20447, 0, "pos", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680), Reflex::Literal("clear"), method_20448, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_12825), Reflex::Literal("swap"), method_20449, 0, "other", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_12825, type_12827), Reflex::Literal("operator="), operator_20450, 0, "rhs", ::Reflex::PUBLIC | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("hasProductCache"), method_20451, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_18495, type_18575, type_18576), Reflex::Literal("fillView"), method_20452, 0, ";pointers;helpers", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_231), Reflex::Literal("Class_Version"), method_20453, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC);
}
//------Stub functions for class RefVector<std::vector<reco::BasicJet, std::allocator<reco::BasicJet> >,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet, std::allocator<reco::BasicJet> >, reco::BasicJet> > -------------------------------
static void destructor_20509(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::RefVector<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)o)->::edm::RefVector<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >::~RefVector)();
}
static void constructor_20510( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefVector<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >();
  else ::new(mem) ::edm::RefVector<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >();
}

static void constructor_20511( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefVector<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >(*(const ::edm::RefVector<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)arg[0]);
  else ::new(mem) ::edm::RefVector<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >(*(const ::edm::RefVector<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)arg[0]);
}

static void constructor_20512( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefVector<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >(*(const ::edm::ProductID*)arg[0]);
  else ::new(mem) ::edm::RefVector<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >(*(const ::edm::ProductID*)arg[0]);
}

static  void method_20513( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::edm::RefVector<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)o)->push_back)(*(const ::edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)arg[0]);
}

static  void operator_20514( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >)((((const ::edm::RefVector<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)o)->operator[])(*(::std::size_t*)arg[0]));
  else   (((const ::edm::RefVector<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)o)->operator[])(*(::std::size_t*)arg[0]);
}

static  void method_20515( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >)((((const ::edm::RefVector<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)o)->at)(*(::std::size_t*)arg[0]));
  else   (((const ::edm::RefVector<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)o)->at)(*(::std::size_t*)arg[0]);
}

static  void method_20516( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::RefVector<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)o)->refVector)();
  else   (((const ::edm::RefVector<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)o)->refVector)();
}

static  void method_20517( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefVector<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)o)->empty)());
  else   (((const ::edm::RefVector<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)o)->empty)();
}

static  void method_20518( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::edm::RefVector<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)o)->size)());
  else   (((const ::edm::RefVector<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)o)->size)();
}

static  void method_20519( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::edm::RefVector<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)o)->capacity)());
  else   (((const ::edm::RefVector<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)o)->capacity)();
}

static  void method_20520( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::edm::RefVector<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)o)->reserve)(*(::std::size_t*)arg[0]);
}

static  void method_20521( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::RefVectorIterator<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >)((((const ::edm::RefVector<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)o)->begin)());
  else   (((const ::edm::RefVector<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)o)->begin)();
}

static  void method_20522( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::RefVectorIterator<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >)((((const ::edm::RefVector<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)o)->end)());
  else   (((const ::edm::RefVector<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)o)->end)();
}

static  void method_20523( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::ProductID)((((const ::edm::RefVector<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)o)->id)());
  else   (((const ::edm::RefVector<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)o)->id)();
}

static  void method_20524( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::RefVector<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)o)->productGetter)());
  else   (((const ::edm::RefVector<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)o)->productGetter)();
}

static  void method_20525( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefVector<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)o)->isNull)());
  else   (((const ::edm::RefVector<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)o)->isNull)();
}

static  void method_20526( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefVector<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)o)->isNonnull)());
  else   (((const ::edm::RefVector<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)o)->isNonnull)();
}

static  void operator_20527( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefVector<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)o)->operator!)());
  else   (((const ::edm::RefVector<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)o)->operator!)();
}

static  void method_20528( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::RefVector<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)o)->product)());
  else   (((const ::edm::RefVector<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)o)->product)();
}

static  void method_20529( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefVector<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)o)->isAvailable)());
  else   (((const ::edm::RefVector<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)o)->isAvailable)();
}

static  void method_20530( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefVector<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)o)->isTransient)());
  else   (((const ::edm::RefVector<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)o)->isTransient)();
}

static  void method_20531( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (edm::RefVectorIterator<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >)((((::edm::RefVector<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)o)->erase)(*(const ::edm::RefVectorIterator<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)arg[0]));
  else   (((::edm::RefVector<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)o)->erase)(*(const ::edm::RefVectorIterator<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)arg[0]);
}

static  void method_20532( void*, void* o, const std::vector<void*>&, void*)
{
  (((::edm::RefVector<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)o)->clear)();
}

static  void method_20533( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::edm::RefVector<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)o)->swap)(*(::edm::RefVector<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)arg[0]);
}

static  void operator_20534( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::RefVector<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)o)->operator=)(*(const ::edm::RefVector<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)arg[0]);
  else   (((::edm::RefVector<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)o)->operator=)(*(const ::edm::RefVector<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)arg[0]);
}

static  void method_20535( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefVector<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)o)->hasProductCache)());
  else   (((const ::edm::RefVector<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)o)->hasProductCache)();
}

static  void method_20536( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::RefVector<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)o)->fillView)(*(const ::edm::ProductID*)arg[0],
    *(::std::vector<const void*>*)arg[1],
    *(::edm::helper_vector*)arg[2]);
}

static  void method_20537( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (short)((((::edm::RefVector<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)o)->Class_Version)());
  else   (((::edm::RefVector<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)o)->Class_Version)();
}

static void method_newdel_4506( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::RefVector<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::RefVector<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::RefVector<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::RefVector<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::RefVector<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class RefVector<std::vector<reco::BasicJet, std::allocator<reco::BasicJet> >,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet, std::allocator<reco::BasicJet> >, reco::BasicJet> > -------------------------------
void __edm__RefVector_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s__db_datamem(Reflex::Class*);
void __edm__RefVector_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__RefVector_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s__datamem_bld(&__edm__RefVector_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__RefVector_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s__funcmem_bld(&__edm__RefVector_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s__db_funcmem);
void __edm__RefVector_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::RefVector<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >"), typeid(::edm::RefVector<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >), sizeof(::edm::RefVector<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("ClassVersion"), ::edm::RefVector<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >::Class_Version())
  .AddTypedef(type_2983, Reflex::Literal("edm::RefVector<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >::collection_type"))
  .AddTypedef(type_7564, Reflex::Literal("edm::RefVector<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >::member_type"))
  .AddTypedef(type_18727, Reflex::Literal("edm::RefVector<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >::finder_type"))
  .AddTypedef(type_4456, Reflex::Literal("edm::RefVector<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >::iterator"))
  .AddTypedef(type_4456, Reflex::Literal("edm::RefVector<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >::const_iterator"))
  .AddTypedef(type_4742, Reflex::Literal("edm::RefVector<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >::value_type"))
  .AddTypedef(type_4742c, Reflex::Literal("edm::RefVector<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >::const_reference"))
  .AddTypedef(type_4742c, Reflex::Literal("edm::RefVector<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >::reference"))
  .AddTypedef(type_356, Reflex::Literal("edm::RefVector<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >::key_type"))
  .AddTypedef(type_2962, Reflex::Literal("edm::RefVector<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >::KeyVec"))
  .AddTypedef(type_3189, Reflex::Literal("edm::RefVector<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >::size_type"))
  .AddTypedef(type_3901, Reflex::Literal("edm::RefVector<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >::contents_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~RefVector"), destructor_20509, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::DESTRUCTOR )
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("RefVector"), constructor_20510, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_33485), Reflex::Literal("RefVector"), constructor_20511, 0, "rh", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_18495), Reflex::Literal("RefVector"), constructor_20512, 0, "iId", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_4506, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__RefVector_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__RefVector_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s__funcmem_bld);
}

//------Delayed data member builder for class RefVector<std::vector<reco::BasicJet, std::allocator<reco::BasicJet> >,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet, std::allocator<reco::BasicJet> >, reco::BasicJet> > -------------------
void __edm__RefVector_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_3901, Reflex::Literal("refVector_"), OffsetOf(__shadow__::__edm__RefVector_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s_, refVector_), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class RefVector<std::vector<reco::BasicJet, std::allocator<reco::BasicJet> >,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet, std::allocator<reco::BasicJet> >, reco::BasicJet> > -------------------
void __edm__RefVector_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_33246), Reflex::Literal("push_back"), method_20513, 0, "ref", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4742c, type_3189), Reflex::Literal("operator[]"), operator_20514, 0, "idx", ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4742c, type_3189), Reflex::Literal("at"), method_20515, 0, "idx", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_18570), Reflex::Literal("refVector"), method_20516, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("empty"), method_20517, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3189), Reflex::Literal("size"), method_20518, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3189), Reflex::Literal("capacity"), method_20519, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_3189), Reflex::Literal("reserve"), method_20520, 0, "n", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4456), Reflex::Literal("begin"), method_20521, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4456), Reflex::Literal("end"), method_20522, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4689), Reflex::Literal("id"), method_20523, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_18571), Reflex::Literal("productGetter"), method_20524, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("isNull"), method_20525, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("isNonnull"), method_20526, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("operator!"), operator_20527, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_33486), Reflex::Literal("product"), method_20528, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("isAvailable"), method_20529, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("isTransient"), method_20530, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4456, type_33487), Reflex::Literal("erase"), method_20531, 0, "pos", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680), Reflex::Literal("clear"), method_20532, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_33488), Reflex::Literal("swap"), method_20533, 0, "other", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_33488, type_33485), Reflex::Literal("operator="), operator_20534, 0, "rhs", ::Reflex::PUBLIC | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("hasProductCache"), method_20535, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_18495, type_18575, type_18576), Reflex::Literal("fillView"), method_20536, 0, ";pointers;helpers", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_231), Reflex::Literal("Class_Version"), method_20537, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC);
}
//------Stub functions for class RefVector<std::vector<reco::GenJet, std::allocator<reco::GenJet> >,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet, std::allocator<reco::GenJet> >, reco::GenJet> > -------------------------------
static void destructor_20551(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::RefVector<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)o)->::edm::RefVector<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >::~RefVector)();
}
static void constructor_20552( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefVector<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >();
  else ::new(mem) ::edm::RefVector<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >();
}

static void constructor_20553( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefVector<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >(*(const ::edm::RefVector<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)arg[0]);
  else ::new(mem) ::edm::RefVector<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >(*(const ::edm::RefVector<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)arg[0]);
}

static void constructor_20554( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefVector<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >(*(const ::edm::ProductID*)arg[0]);
  else ::new(mem) ::edm::RefVector<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >(*(const ::edm::ProductID*)arg[0]);
}

static  void method_20555( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::edm::RefVector<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)o)->push_back)(*(const ::edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)arg[0]);
}

static  void operator_20556( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >)((((const ::edm::RefVector<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)o)->operator[])(*(::std::size_t*)arg[0]));
  else   (((const ::edm::RefVector<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)o)->operator[])(*(::std::size_t*)arg[0]);
}

static  void method_20557( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >)((((const ::edm::RefVector<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)o)->at)(*(::std::size_t*)arg[0]));
  else   (((const ::edm::RefVector<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)o)->at)(*(::std::size_t*)arg[0]);
}

static  void method_20558( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::RefVector<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)o)->refVector)();
  else   (((const ::edm::RefVector<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)o)->refVector)();
}

static  void method_20559( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefVector<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)o)->empty)());
  else   (((const ::edm::RefVector<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)o)->empty)();
}

static  void method_20560( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::edm::RefVector<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)o)->size)());
  else   (((const ::edm::RefVector<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)o)->size)();
}

static  void method_20561( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::edm::RefVector<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)o)->capacity)());
  else   (((const ::edm::RefVector<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)o)->capacity)();
}

static  void method_20562( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::edm::RefVector<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)o)->reserve)(*(::std::size_t*)arg[0]);
}

static  void method_20563( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::RefVectorIterator<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >)((((const ::edm::RefVector<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)o)->begin)());
  else   (((const ::edm::RefVector<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)o)->begin)();
}

static  void method_20564( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::RefVectorIterator<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >)((((const ::edm::RefVector<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)o)->end)());
  else   (((const ::edm::RefVector<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)o)->end)();
}

static  void method_20565( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::ProductID)((((const ::edm::RefVector<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)o)->id)());
  else   (((const ::edm::RefVector<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)o)->id)();
}

static  void method_20566( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::RefVector<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)o)->productGetter)());
  else   (((const ::edm::RefVector<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)o)->productGetter)();
}

static  void method_20567( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefVector<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)o)->isNull)());
  else   (((const ::edm::RefVector<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)o)->isNull)();
}

static  void method_20568( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefVector<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)o)->isNonnull)());
  else   (((const ::edm::RefVector<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)o)->isNonnull)();
}

static  void operator_20569( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefVector<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)o)->operator!)());
  else   (((const ::edm::RefVector<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)o)->operator!)();
}

static  void method_20570( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::RefVector<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)o)->product)());
  else   (((const ::edm::RefVector<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)o)->product)();
}

static  void method_20571( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefVector<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)o)->isAvailable)());
  else   (((const ::edm::RefVector<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)o)->isAvailable)();
}

static  void method_20572( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefVector<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)o)->isTransient)());
  else   (((const ::edm::RefVector<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)o)->isTransient)();
}

static  void method_20573( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (edm::RefVectorIterator<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >)((((::edm::RefVector<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)o)->erase)(*(const ::edm::RefVectorIterator<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)arg[0]));
  else   (((::edm::RefVector<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)o)->erase)(*(const ::edm::RefVectorIterator<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)arg[0]);
}

static  void method_20574( void*, void* o, const std::vector<void*>&, void*)
{
  (((::edm::RefVector<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)o)->clear)();
}

static  void method_20575( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::edm::RefVector<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)o)->swap)(*(::edm::RefVector<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)arg[0]);
}

static  void operator_20576( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::RefVector<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)o)->operator=)(*(const ::edm::RefVector<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)arg[0]);
  else   (((::edm::RefVector<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)o)->operator=)(*(const ::edm::RefVector<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)arg[0]);
}

static  void method_20577( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefVector<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)o)->hasProductCache)());
  else   (((const ::edm::RefVector<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)o)->hasProductCache)();
}

static  void method_20578( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::RefVector<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)o)->fillView)(*(const ::edm::ProductID*)arg[0],
    *(::std::vector<const void*>*)arg[1],
    *(::edm::helper_vector*)arg[2]);
}

static  void method_20579( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (short)((((::edm::RefVector<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)o)->Class_Version)());
  else   (((::edm::RefVector<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)o)->Class_Version)();
}

static void method_newdel_4511( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::RefVector<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::RefVector<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::RefVector<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::RefVector<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::RefVector<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class RefVector<std::vector<reco::GenJet, std::allocator<reco::GenJet> >,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet, std::allocator<reco::GenJet> >, reco::GenJet> > -------------------------------
void __edm__RefVector_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s__db_datamem(Reflex::Class*);
void __edm__RefVector_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__RefVector_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s__datamem_bld(&__edm__RefVector_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__RefVector_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s__funcmem_bld(&__edm__RefVector_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s__db_funcmem);
void __edm__RefVector_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::RefVector<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >"), typeid(::edm::RefVector<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >), sizeof(::edm::RefVector<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("ClassVersion"), ::edm::RefVector<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >::Class_Version())
  .AddTypedef(type_2988, Reflex::Literal("edm::RefVector<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >::collection_type"))
  .AddTypedef(type_7512, Reflex::Literal("edm::RefVector<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >::member_type"))
  .AddTypedef(type_18739, Reflex::Literal("edm::RefVector<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >::finder_type"))
  .AddTypedef(type_4457, Reflex::Literal("edm::RefVector<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >::iterator"))
  .AddTypedef(type_4457, Reflex::Literal("edm::RefVector<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >::const_iterator"))
  .AddTypedef(type_4743, Reflex::Literal("edm::RefVector<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >::value_type"))
  .AddTypedef(type_4743c, Reflex::Literal("edm::RefVector<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >::const_reference"))
  .AddTypedef(type_4743c, Reflex::Literal("edm::RefVector<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >::reference"))
  .AddTypedef(type_356, Reflex::Literal("edm::RefVector<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >::key_type"))
  .AddTypedef(type_2962, Reflex::Literal("edm::RefVector<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >::KeyVec"))
  .AddTypedef(type_3189, Reflex::Literal("edm::RefVector<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >::size_type"))
  .AddTypedef(type_3901, Reflex::Literal("edm::RefVector<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >::contents_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~RefVector"), destructor_20551, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::DESTRUCTOR )
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("RefVector"), constructor_20552, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_33490), Reflex::Literal("RefVector"), constructor_20553, 0, "rh", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_18495), Reflex::Literal("RefVector"), constructor_20554, 0, "iId", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_4511, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__RefVector_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__RefVector_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s__funcmem_bld);
}

//------Delayed data member builder for class RefVector<std::vector<reco::GenJet, std::allocator<reco::GenJet> >,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet, std::allocator<reco::GenJet> >, reco::GenJet> > -------------------
void __edm__RefVector_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_3901, Reflex::Literal("refVector_"), OffsetOf(__shadow__::__edm__RefVector_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s_, refVector_), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class RefVector<std::vector<reco::GenJet, std::allocator<reco::GenJet> >,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet, std::allocator<reco::GenJet> >, reco::GenJet> > -------------------
void __edm__RefVector_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_33260), Reflex::Literal("push_back"), method_20555, 0, "ref", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4743c, type_3189), Reflex::Literal("operator[]"), operator_20556, 0, "idx", ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4743c, type_3189), Reflex::Literal("at"), method_20557, 0, "idx", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_18570), Reflex::Literal("refVector"), method_20558, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("empty"), method_20559, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3189), Reflex::Literal("size"), method_20560, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3189), Reflex::Literal("capacity"), method_20561, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_3189), Reflex::Literal("reserve"), method_20562, 0, "n", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4457), Reflex::Literal("begin"), method_20563, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4457), Reflex::Literal("end"), method_20564, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4689), Reflex::Literal("id"), method_20565, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_18571), Reflex::Literal("productGetter"), method_20566, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("isNull"), method_20567, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("isNonnull"), method_20568, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("operator!"), operator_20569, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_33491), Reflex::Literal("product"), method_20570, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("isAvailable"), method_20571, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("isTransient"), method_20572, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4457, type_33492), Reflex::Literal("erase"), method_20573, 0, "pos", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680), Reflex::Literal("clear"), method_20574, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_33493), Reflex::Literal("swap"), method_20575, 0, "other", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_33493, type_33490), Reflex::Literal("operator="), operator_20576, 0, "rhs", ::Reflex::PUBLIC | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("hasProductCache"), method_20577, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_18495, type_18575, type_18576), Reflex::Literal("fillView"), method_20578, 0, ";pointers;helpers", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_231), Reflex::Literal("Class_Version"), method_20579, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC);
}
//------Stub functions for class RefVector<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> >,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> >, reco::CaloJet> > -------------------------------
static void destructor_20593(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)o)->::edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >::~RefVector)();
}
static void constructor_20594( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >();
  else ::new(mem) ::edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >();
}

static void constructor_20595( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >(*(const ::edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)arg[0]);
  else ::new(mem) ::edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >(*(const ::edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)arg[0]);
}

static void constructor_20596( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >(*(const ::edm::ProductID*)arg[0]);
  else ::new(mem) ::edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >(*(const ::edm::ProductID*)arg[0]);
}

static  void method_20597( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)o)->push_back)(*(const ::edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)arg[0]);
}

static  void operator_20598( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >)((((const ::edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)o)->operator[])(*(::std::size_t*)arg[0]));
  else   (((const ::edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)o)->operator[])(*(::std::size_t*)arg[0]);
}

static  void method_20599( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >)((((const ::edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)o)->at)(*(::std::size_t*)arg[0]));
  else   (((const ::edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)o)->at)(*(::std::size_t*)arg[0]);
}

static  void method_20600( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)o)->refVector)();
  else   (((const ::edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)o)->refVector)();
}

static  void method_20601( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)o)->empty)());
  else   (((const ::edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)o)->empty)();
}

static  void method_20602( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)o)->size)());
  else   (((const ::edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)o)->size)();
}

static  void method_20603( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)o)->capacity)());
  else   (((const ::edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)o)->capacity)();
}

static  void method_20604( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)o)->reserve)(*(::std::size_t*)arg[0]);
}

static  void method_20605( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::RefVectorIterator<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >)((((const ::edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)o)->begin)());
  else   (((const ::edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)o)->begin)();
}

static  void method_20606( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::RefVectorIterator<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >)((((const ::edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)o)->end)());
  else   (((const ::edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)o)->end)();
}

static  void method_20607( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::ProductID)((((const ::edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)o)->id)());
  else   (((const ::edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)o)->id)();
}

static  void method_20608( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)o)->productGetter)());
  else   (((const ::edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)o)->productGetter)();
}

static  void method_20609( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)o)->isNull)());
  else   (((const ::edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)o)->isNull)();
}

static  void method_20610( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)o)->isNonnull)());
  else   (((const ::edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)o)->isNonnull)();
}

static  void operator_20611( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)o)->operator!)());
  else   (((const ::edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)o)->operator!)();
}

static  void method_20612( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)o)->product)());
  else   (((const ::edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)o)->product)();
}

static  void method_20613( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)o)->isAvailable)());
  else   (((const ::edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)o)->isAvailable)();
}

static  void method_20614( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)o)->isTransient)());
  else   (((const ::edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)o)->isTransient)();
}

static  void method_20615( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (edm::RefVectorIterator<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >)((((::edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)o)->erase)(*(const ::edm::RefVectorIterator<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)arg[0]));
  else   (((::edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)o)->erase)(*(const ::edm::RefVectorIterator<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)arg[0]);
}

static  void method_20616( void*, void* o, const std::vector<void*>&, void*)
{
  (((::edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)o)->clear)();
}

static  void method_20617( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)o)->swap)(*(::edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)arg[0]);
}

static  void operator_20618( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)o)->operator=)(*(const ::edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)arg[0]);
  else   (((::edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)o)->operator=)(*(const ::edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)arg[0]);
}

static  void method_20619( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)o)->hasProductCache)());
  else   (((const ::edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)o)->hasProductCache)();
}

static  void method_20620( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)o)->fillView)(*(const ::edm::ProductID*)arg[0],
    *(::std::vector<const void*>*)arg[1],
    *(::edm::helper_vector*)arg[2]);
}

static  void method_20621( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (short)((((::edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)o)->Class_Version)());
  else   (((::edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)o)->Class_Version)();
}

static void method_newdel_4516( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class RefVector<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> >,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> >, reco::CaloJet> > -------------------------------
void __edm__RefVector_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s__db_datamem(Reflex::Class*);
void __edm__RefVector_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__RefVector_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s__datamem_bld(&__edm__RefVector_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__RefVector_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s__funcmem_bld(&__edm__RefVector_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s__db_funcmem);
void __edm__RefVector_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >"), typeid(::edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >), sizeof(::edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("ClassVersion"), ::edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >::Class_Version())
  .AddTypedef(type_2991, Reflex::Literal("edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >::collection_type"))
  .AddTypedef(type_7473, Reflex::Literal("edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >::member_type"))
  .AddTypedef(type_18751, Reflex::Literal("edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >::finder_type"))
  .AddTypedef(type_4458, Reflex::Literal("edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >::iterator"))
  .AddTypedef(type_4458, Reflex::Literal("edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >::const_iterator"))
  .AddTypedef(type_4744, Reflex::Literal("edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >::value_type"))
  .AddTypedef(type_4744c, Reflex::Literal("edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >::const_reference"))
  .AddTypedef(type_4744c, Reflex::Literal("edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >::reference"))
  .AddTypedef(type_356, Reflex::Literal("edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >::key_type"))
  .AddTypedef(type_2962, Reflex::Literal("edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >::KeyVec"))
  .AddTypedef(type_3189, Reflex::Literal("edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >::size_type"))
  .AddTypedef(type_3901, Reflex::Literal("edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >::contents_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~RefVector"), destructor_20593, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::DESTRUCTOR )
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("RefVector"), constructor_20594, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_13672), Reflex::Literal("RefVector"), constructor_20595, 0, "rh", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_18495), Reflex::Literal("RefVector"), constructor_20596, 0, "iId", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_4516, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__RefVector_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__RefVector_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s__funcmem_bld);
}

//------Delayed data member builder for class RefVector<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> >,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> >, reco::CaloJet> > -------------------
void __edm__RefVector_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_3901, Reflex::Literal("refVector_"), OffsetOf(__shadow__::__edm__RefVector_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_, refVector_), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class RefVector<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> >,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> >, reco::CaloJet> > -------------------
void __edm__RefVector_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_13737), Reflex::Literal("push_back"), method_20597, 0, "ref", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4744c, type_3189), Reflex::Literal("operator[]"), operator_20598, 0, "idx", ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4744c, type_3189), Reflex::Literal("at"), method_20599, 0, "idx", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_18570), Reflex::Literal("refVector"), method_20600, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("empty"), method_20601, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3189), Reflex::Literal("size"), method_20602, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3189), Reflex::Literal("capacity"), method_20603, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_3189), Reflex::Literal("reserve"), method_20604, 0, "n", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4458), Reflex::Literal("begin"), method_20605, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4458), Reflex::Literal("end"), method_20606, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4689), Reflex::Literal("id"), method_20607, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_18571), Reflex::Literal("productGetter"), method_20608, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("isNull"), method_20609, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("isNonnull"), method_20610, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("operator!"), operator_20611, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_33494), Reflex::Literal("product"), method_20612, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("isAvailable"), method_20613, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("isTransient"), method_20614, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4458, type_33495), Reflex::Literal("erase"), method_20615, 0, "pos", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680), Reflex::Literal("clear"), method_20616, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_13670), Reflex::Literal("swap"), method_20617, 0, "other", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13670, type_13672), Reflex::Literal("operator="), operator_20618, 0, "rhs", ::Reflex::PUBLIC | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("hasProductCache"), method_20619, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_18495, type_18575, type_18576), Reflex::Literal("fillView"), method_20620, 0, ";pointers;helpers", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_231), Reflex::Literal("Class_Version"), method_20621, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC);
}
//------Stub functions for class Wrapper<std::vector<reco::JPTJet, std::allocator<reco::JPTJet> > > -------------------------------
static void constructor_20689( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<std::vector<reco::JPTJet> >();
  else ::new(mem) ::edm::Wrapper<std::vector<reco::JPTJet> >();
}

static void constructor_20690( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<std::vector<reco::JPTJet> >(*(::std::auto_ptr<std::vector<reco::JPTJet> >*)arg[0]);
  else ::new(mem) ::edm::Wrapper<std::vector<reco::JPTJet> >(*(::std::auto_ptr<std::vector<reco::JPTJet> >*)arg[0]);
}

static void destructor_20691(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::Wrapper<std::vector<reco::JPTJet> >*)o)->::edm::Wrapper<std::vector<reco::JPTJet> >::~Wrapper)();
}
static  void method_20692( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Wrapper<std::vector<reco::JPTJet> >*)o)->product)());
  else   (((const ::edm::Wrapper<std::vector<reco::JPTJet> >*)o)->product)();
}

static  void operator_20693( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Wrapper<std::vector<reco::JPTJet> >*)o)->operator->)());
  else   (((const ::edm::Wrapper<std::vector<reco::JPTJet> >*)o)->operator->)();
}

static  void method_20694( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::Wrapper<std::vector<reco::JPTJet> >*)o)->productTypeInfo)();
  else   (((::edm::Wrapper<std::vector<reco::JPTJet> >*)o)->productTypeInfo)();
}

static  void method_20695( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::Wrapper<std::vector<reco::JPTJet> >*)o)->typeInfo)();
  else   (((::edm::Wrapper<std::vector<reco::JPTJet> >*)o)->typeInfo)();
}

static void constructor_20696( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<std::vector<reco::JPTJet> >((::std::vector<reco::JPTJet>*)arg[0]);
  else ::new(mem) ::edm::Wrapper<std::vector<reco::JPTJet> >((::std::vector<reco::JPTJet>*)arg[0]);
}

static  void method_20697( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((::edm::Wrapper<std::vector<reco::JPTJet> >*)o)->getInterface)());
  else   (((::edm::Wrapper<std::vector<reco::JPTJet> >*)o)->getInterface)();
}

static  void method_20698( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<std::vector<reco::JPTJet> >*)o)->fillView)(*(const ::edm::ProductID*)arg[0],
    *(::std::vector<const void*>*)arg[1],
    *(::boost::shared_ptr<edm::reftobase::RefVectorHolderBase>*)arg[2]);
}

static  void method_20699( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<std::vector<reco::JPTJet> >*)o)->setPtr)(*(const ::std::type_info*)arg[0],
    *(unsigned long*)arg[1],
    *(const void**)arg[2]);
}

static  void method_20700( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<std::vector<reco::JPTJet> >*)o)->fillPtrVector)(*(const ::std::type_info*)arg[0],
    *(const ::std::vector<unsigned long>*)arg[1],
    *(::std::vector<const void*>*)arg[2]);
}

static  void method_20701( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Wrapper<std::vector<reco::JPTJet> >*)o)->dynamicTypeInfo)();
  else   (((const ::edm::Wrapper<std::vector<reco::JPTJet> >*)o)->dynamicTypeInfo)();
}

static  void method_20702( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Wrapper<std::vector<reco::JPTJet> >*)o)->isPresent)());
  else   (((const ::edm::Wrapper<std::vector<reco::JPTJet> >*)o)->isPresent)();
}

static  void method_20703( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Wrapper<std::vector<reco::JPTJet> >*)o)->dynamicTypeInfo_)();
  else   (((const ::edm::Wrapper<std::vector<reco::JPTJet> >*)o)->dynamicTypeInfo_)();
}

static void method_newdel_4537( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<reco::JPTJet> > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<reco::JPTJet> > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<reco::JPTJet> > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<reco::JPTJet> > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<reco::JPTJet> > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class Wrapper<std::vector<reco::JPTJet, std::allocator<reco::JPTJet> > > -------------------------------
void __edm__Wrapper_std__vector_reco__JPTJet_s__db_datamem(Reflex::Class*);
void __edm__Wrapper_std__vector_reco__JPTJet_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__Wrapper_std__vector_reco__JPTJet_s__datamem_bld(&__edm__Wrapper_std__vector_reco__JPTJet_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__Wrapper_std__vector_reco__JPTJet_s__funcmem_bld(&__edm__Wrapper_std__vector_reco__JPTJet_s__db_funcmem);
void __edm__Wrapper_std__vector_reco__JPTJet_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::Wrapper<std::vector<reco::JPTJet> >"), typeid(::edm::Wrapper<std::vector<reco::JPTJet> >), sizeof(::edm::Wrapper<std::vector<reco::JPTJet> >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddTypedef(type_2968, Reflex::Literal("edm::Wrapper<std::vector<reco::JPTJet> >::value_type"))
  .AddTypedef(type_2968, Reflex::Literal("edm::Wrapper<std::vector<reco::JPTJet> >::wrapped_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("Wrapper"), constructor_20689, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_2725), Reflex::Literal("Wrapper"), constructor_20690, 0, "ptr", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~Wrapper"), destructor_20691, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_33507), Reflex::Literal("Wrapper"), constructor_20696, 0, "ptr", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_4537, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__Wrapper_std__vector_reco__JPTJet_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__Wrapper_std__vector_reco__JPTJet_s__funcmem_bld);
}

//------Delayed data member builder for class Wrapper<std::vector<reco::JPTJet, std::allocator<reco::JPTJet> > > -------------------
void __edm__Wrapper_std__vector_reco__JPTJet_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_1574, Reflex::Literal("present"), OffsetOf(__shadow__::__edm__Wrapper_std__vector_reco__JPTJet_s_, present), ::Reflex::PRIVATE)
  .AddDataMember(type_2968, Reflex::Literal("obj"), OffsetOf(__shadow__::__edm__Wrapper_std__vector_reco__JPTJet_s_, obj), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class Wrapper<std::vector<reco::JPTJet, std::allocator<reco::JPTJet> > > -------------------
void __edm__Wrapper_std__vector_reco__JPTJet_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_33474), Reflex::Literal("product"), method_20692, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_33474), Reflex::Literal("operator->"), operator_20693, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_18629), Reflex::Literal("productTypeInfo"), method_20694, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_18629), Reflex::Literal("typeInfo"), method_20695, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_33508), Reflex::Literal("getInterface"), method_20697, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_18495, type_18575, type_33095), Reflex::Literal("fillView"), method_20698, 0, "id;pointers;helpers", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_18629, type_347, type_9980), Reflex::Literal("setPtr"), method_20699, 0, "iToType;iIndex;oPtr", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_18629, type_22942, type_18575), Reflex::Literal("fillPtrVector"), method_20700, 0, "iToType;iIndices;oPtr", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_18629), Reflex::Literal("dynamicTypeInfo"), method_20701, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("isPresent"), method_20702, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_18629), Reflex::Literal("dynamicTypeInfo_"), method_20703, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST);
}
//------Stub functions for class Wrapper<std::vector<reco::PFJet, std::allocator<reco::PFJet> > > -------------------------------
static void constructor_20794( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<std::vector<reco::PFJet> >();
  else ::new(mem) ::edm::Wrapper<std::vector<reco::PFJet> >();
}

static void constructor_20795( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<std::vector<reco::PFJet> >(*(::std::auto_ptr<std::vector<reco::PFJet> >*)arg[0]);
  else ::new(mem) ::edm::Wrapper<std::vector<reco::PFJet> >(*(::std::auto_ptr<std::vector<reco::PFJet> >*)arg[0]);
}

static void destructor_20796(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::Wrapper<std::vector<reco::PFJet> >*)o)->::edm::Wrapper<std::vector<reco::PFJet> >::~Wrapper)();
}
static  void method_20797( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Wrapper<std::vector<reco::PFJet> >*)o)->product)());
  else   (((const ::edm::Wrapper<std::vector<reco::PFJet> >*)o)->product)();
}

static  void operator_20798( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Wrapper<std::vector<reco::PFJet> >*)o)->operator->)());
  else   (((const ::edm::Wrapper<std::vector<reco::PFJet> >*)o)->operator->)();
}

static  void method_20799( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::Wrapper<std::vector<reco::PFJet> >*)o)->productTypeInfo)();
  else   (((::edm::Wrapper<std::vector<reco::PFJet> >*)o)->productTypeInfo)();
}

static  void method_20800( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::Wrapper<std::vector<reco::PFJet> >*)o)->typeInfo)();
  else   (((::edm::Wrapper<std::vector<reco::PFJet> >*)o)->typeInfo)();
}

static void constructor_20801( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<std::vector<reco::PFJet> >((::std::vector<reco::PFJet>*)arg[0]);
  else ::new(mem) ::edm::Wrapper<std::vector<reco::PFJet> >((::std::vector<reco::PFJet>*)arg[0]);
}

static  void method_20802( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((::edm::Wrapper<std::vector<reco::PFJet> >*)o)->getInterface)());
  else   (((::edm::Wrapper<std::vector<reco::PFJet> >*)o)->getInterface)();
}

static  void method_20803( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<std::vector<reco::PFJet> >*)o)->fillView)(*(const ::edm::ProductID*)arg[0],
    *(::std::vector<const void*>*)arg[1],
    *(::boost::shared_ptr<edm::reftobase::RefVectorHolderBase>*)arg[2]);
}

static  void method_20804( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<std::vector<reco::PFJet> >*)o)->setPtr)(*(const ::std::type_info*)arg[0],
    *(unsigned long*)arg[1],
    *(const void**)arg[2]);
}

static  void method_20805( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<std::vector<reco::PFJet> >*)o)->fillPtrVector)(*(const ::std::type_info*)arg[0],
    *(const ::std::vector<unsigned long>*)arg[1],
    *(::std::vector<const void*>*)arg[2]);
}

static  void method_20806( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Wrapper<std::vector<reco::PFJet> >*)o)->dynamicTypeInfo)();
  else   (((const ::edm::Wrapper<std::vector<reco::PFJet> >*)o)->dynamicTypeInfo)();
}

static  void method_20807( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Wrapper<std::vector<reco::PFJet> >*)o)->isPresent)());
  else   (((const ::edm::Wrapper<std::vector<reco::PFJet> >*)o)->isPresent)();
}

static  void method_20808( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Wrapper<std::vector<reco::PFJet> >*)o)->dynamicTypeInfo_)();
  else   (((const ::edm::Wrapper<std::vector<reco::PFJet> >*)o)->dynamicTypeInfo_)();
}

static void method_newdel_4542( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<reco::PFJet> > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<reco::PFJet> > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<reco::PFJet> > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<reco::PFJet> > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<reco::PFJet> > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class Wrapper<std::vector<reco::PFJet, std::allocator<reco::PFJet> > > -------------------------------
void __edm__Wrapper_std__vector_reco__PFJet_s__db_datamem(Reflex::Class*);
void __edm__Wrapper_std__vector_reco__PFJet_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__Wrapper_std__vector_reco__PFJet_s__datamem_bld(&__edm__Wrapper_std__vector_reco__PFJet_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__Wrapper_std__vector_reco__PFJet_s__funcmem_bld(&__edm__Wrapper_std__vector_reco__PFJet_s__db_funcmem);
void __edm__Wrapper_std__vector_reco__PFJet_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::Wrapper<std::vector<reco::PFJet> >"), typeid(::edm::Wrapper<std::vector<reco::PFJet> >), sizeof(::edm::Wrapper<std::vector<reco::PFJet> >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddTypedef(type_2971, Reflex::Literal("edm::Wrapper<std::vector<reco::PFJet> >::value_type"))
  .AddTypedef(type_2971, Reflex::Literal("edm::Wrapper<std::vector<reco::PFJet> >::wrapped_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("Wrapper"), constructor_20794, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_2730), Reflex::Literal("Wrapper"), constructor_20795, 0, "ptr", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~Wrapper"), destructor_20796, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_33529), Reflex::Literal("Wrapper"), constructor_20801, 0, "ptr", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_4542, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__Wrapper_std__vector_reco__PFJet_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__Wrapper_std__vector_reco__PFJet_s__funcmem_bld);
}

//------Delayed data member builder for class Wrapper<std::vector<reco::PFJet, std::allocator<reco::PFJet> > > -------------------
void __edm__Wrapper_std__vector_reco__PFJet_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_1574, Reflex::Literal("present"), OffsetOf(__shadow__::__edm__Wrapper_std__vector_reco__PFJet_s_, present), ::Reflex::PRIVATE)
  .AddDataMember(type_2971, Reflex::Literal("obj"), OffsetOf(__shadow__::__edm__Wrapper_std__vector_reco__PFJet_s_, obj), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class Wrapper<std::vector<reco::PFJet, std::allocator<reco::PFJet> > > -------------------
void __edm__Wrapper_std__vector_reco__PFJet_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_33477), Reflex::Literal("product"), method_20797, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_33477), Reflex::Literal("operator->"), operator_20798, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_18629), Reflex::Literal("productTypeInfo"), method_20799, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_18629), Reflex::Literal("typeInfo"), method_20800, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_33530), Reflex::Literal("getInterface"), method_20802, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_18495, type_18575, type_33095), Reflex::Literal("fillView"), method_20803, 0, "id;pointers;helpers", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_18629, type_347, type_9980), Reflex::Literal("setPtr"), method_20804, 0, "iToType;iIndex;oPtr", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_18629, type_22942, type_18575), Reflex::Literal("fillPtrVector"), method_20805, 0, "iToType;iIndices;oPtr", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_18629), Reflex::Literal("dynamicTypeInfo"), method_20806, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("isPresent"), method_20807, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_18629), Reflex::Literal("dynamicTypeInfo_"), method_20808, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST);
}
//------Stub functions for class Wrapper<std::vector<reco::BasicJet, std::allocator<reco::BasicJet> > > -------------------------------
static void constructor_20941( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<std::vector<reco::BasicJet> >();
  else ::new(mem) ::edm::Wrapper<std::vector<reco::BasicJet> >();
}

static void constructor_20942( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<std::vector<reco::BasicJet> >(*(::std::auto_ptr<std::vector<reco::BasicJet> >*)arg[0]);
  else ::new(mem) ::edm::Wrapper<std::vector<reco::BasicJet> >(*(::std::auto_ptr<std::vector<reco::BasicJet> >*)arg[0]);
}

static void destructor_20943(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::Wrapper<std::vector<reco::BasicJet> >*)o)->::edm::Wrapper<std::vector<reco::BasicJet> >::~Wrapper)();
}
static  void method_20944( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Wrapper<std::vector<reco::BasicJet> >*)o)->product)());
  else   (((const ::edm::Wrapper<std::vector<reco::BasicJet> >*)o)->product)();
}

static  void operator_20945( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Wrapper<std::vector<reco::BasicJet> >*)o)->operator->)());
  else   (((const ::edm::Wrapper<std::vector<reco::BasicJet> >*)o)->operator->)();
}

static  void method_20946( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::Wrapper<std::vector<reco::BasicJet> >*)o)->productTypeInfo)();
  else   (((::edm::Wrapper<std::vector<reco::BasicJet> >*)o)->productTypeInfo)();
}

static  void method_20947( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::Wrapper<std::vector<reco::BasicJet> >*)o)->typeInfo)();
  else   (((::edm::Wrapper<std::vector<reco::BasicJet> >*)o)->typeInfo)();
}

static void constructor_20948( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<std::vector<reco::BasicJet> >((::std::vector<reco::BasicJet>*)arg[0]);
  else ::new(mem) ::edm::Wrapper<std::vector<reco::BasicJet> >((::std::vector<reco::BasicJet>*)arg[0]);
}

static  void method_20949( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((::edm::Wrapper<std::vector<reco::BasicJet> >*)o)->getInterface)());
  else   (((::edm::Wrapper<std::vector<reco::BasicJet> >*)o)->getInterface)();
}

static  void method_20950( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<std::vector<reco::BasicJet> >*)o)->fillView)(*(const ::edm::ProductID*)arg[0],
    *(::std::vector<const void*>*)arg[1],
    *(::boost::shared_ptr<edm::reftobase::RefVectorHolderBase>*)arg[2]);
}

static  void method_20951( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<std::vector<reco::BasicJet> >*)o)->setPtr)(*(const ::std::type_info*)arg[0],
    *(unsigned long*)arg[1],
    *(const void**)arg[2]);
}

static  void method_20952( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<std::vector<reco::BasicJet> >*)o)->fillPtrVector)(*(const ::std::type_info*)arg[0],
    *(const ::std::vector<unsigned long>*)arg[1],
    *(::std::vector<const void*>*)arg[2]);
}

static  void method_20953( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Wrapper<std::vector<reco::BasicJet> >*)o)->dynamicTypeInfo)();
  else   (((const ::edm::Wrapper<std::vector<reco::BasicJet> >*)o)->dynamicTypeInfo)();
}

static  void method_20954( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Wrapper<std::vector<reco::BasicJet> >*)o)->isPresent)());
  else   (((const ::edm::Wrapper<std::vector<reco::BasicJet> >*)o)->isPresent)();
}

static  void method_20955( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Wrapper<std::vector<reco::BasicJet> >*)o)->dynamicTypeInfo_)();
  else   (((const ::edm::Wrapper<std::vector<reco::BasicJet> >*)o)->dynamicTypeInfo_)();
}

static void method_newdel_4549( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<reco::BasicJet> > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<reco::BasicJet> > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<reco::BasicJet> > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<reco::BasicJet> > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<reco::BasicJet> > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class Wrapper<std::vector<reco::BasicJet, std::allocator<reco::BasicJet> > > -------------------------------
void __edm__Wrapper_std__vector_reco__BasicJet_s__db_datamem(Reflex::Class*);
void __edm__Wrapper_std__vector_reco__BasicJet_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__Wrapper_std__vector_reco__BasicJet_s__datamem_bld(&__edm__Wrapper_std__vector_reco__BasicJet_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__Wrapper_std__vector_reco__BasicJet_s__funcmem_bld(&__edm__Wrapper_std__vector_reco__BasicJet_s__db_funcmem);
void __edm__Wrapper_std__vector_reco__BasicJet_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::Wrapper<std::vector<reco::BasicJet> >"), typeid(::edm::Wrapper<std::vector<reco::BasicJet> >), sizeof(::edm::Wrapper<std::vector<reco::BasicJet> >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddTypedef(type_2983, Reflex::Literal("edm::Wrapper<std::vector<reco::BasicJet> >::value_type"))
  .AddTypedef(type_2983, Reflex::Literal("edm::Wrapper<std::vector<reco::BasicJet> >::wrapped_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("Wrapper"), constructor_20941, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_2737), Reflex::Literal("Wrapper"), constructor_20942, 0, "ptr", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~Wrapper"), destructor_20943, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_33562), Reflex::Literal("Wrapper"), constructor_20948, 0, "ptr", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_4549, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__Wrapper_std__vector_reco__BasicJet_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__Wrapper_std__vector_reco__BasicJet_s__funcmem_bld);
}

//------Delayed data member builder for class Wrapper<std::vector<reco::BasicJet, std::allocator<reco::BasicJet> > > -------------------
void __edm__Wrapper_std__vector_reco__BasicJet_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_1574, Reflex::Literal("present"), OffsetOf(__shadow__::__edm__Wrapper_std__vector_reco__BasicJet_s_, present), ::Reflex::PRIVATE)
  .AddDataMember(type_2983, Reflex::Literal("obj"), OffsetOf(__shadow__::__edm__Wrapper_std__vector_reco__BasicJet_s_, obj), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class Wrapper<std::vector<reco::BasicJet, std::allocator<reco::BasicJet> > > -------------------
void __edm__Wrapper_std__vector_reco__BasicJet_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_33486), Reflex::Literal("product"), method_20944, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_33486), Reflex::Literal("operator->"), operator_20945, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_18629), Reflex::Literal("productTypeInfo"), method_20946, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_18629), Reflex::Literal("typeInfo"), method_20947, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_33563), Reflex::Literal("getInterface"), method_20949, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_18495, type_18575, type_33095), Reflex::Literal("fillView"), method_20950, 0, "id;pointers;helpers", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_18629, type_347, type_9980), Reflex::Literal("setPtr"), method_20951, 0, "iToType;iIndex;oPtr", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_18629, type_22942, type_18575), Reflex::Literal("fillPtrVector"), method_20952, 0, "iToType;iIndices;oPtr", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_18629), Reflex::Literal("dynamicTypeInfo"), method_20953, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("isPresent"), method_20954, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_18629), Reflex::Literal("dynamicTypeInfo_"), method_20955, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST);
}
//------Stub functions for class Wrapper<std::vector<reco::GenJet, std::allocator<reco::GenJet> > > -------------------------------
static void constructor_21025( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<std::vector<reco::GenJet> >();
  else ::new(mem) ::edm::Wrapper<std::vector<reco::GenJet> >();
}

static void constructor_21026( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<std::vector<reco::GenJet> >(*(::std::auto_ptr<std::vector<reco::GenJet> >*)arg[0]);
  else ::new(mem) ::edm::Wrapper<std::vector<reco::GenJet> >(*(::std::auto_ptr<std::vector<reco::GenJet> >*)arg[0]);
}

static void destructor_21027(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::Wrapper<std::vector<reco::GenJet> >*)o)->::edm::Wrapper<std::vector<reco::GenJet> >::~Wrapper)();
}
static  void method_21028( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Wrapper<std::vector<reco::GenJet> >*)o)->product)());
  else   (((const ::edm::Wrapper<std::vector<reco::GenJet> >*)o)->product)();
}

static  void operator_21029( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Wrapper<std::vector<reco::GenJet> >*)o)->operator->)());
  else   (((const ::edm::Wrapper<std::vector<reco::GenJet> >*)o)->operator->)();
}

static  void method_21030( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::Wrapper<std::vector<reco::GenJet> >*)o)->productTypeInfo)();
  else   (((::edm::Wrapper<std::vector<reco::GenJet> >*)o)->productTypeInfo)();
}

static  void method_21031( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::Wrapper<std::vector<reco::GenJet> >*)o)->typeInfo)();
  else   (((::edm::Wrapper<std::vector<reco::GenJet> >*)o)->typeInfo)();
}

static void constructor_21032( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<std::vector<reco::GenJet> >((::std::vector<reco::GenJet>*)arg[0]);
  else ::new(mem) ::edm::Wrapper<std::vector<reco::GenJet> >((::std::vector<reco::GenJet>*)arg[0]);
}

static  void method_21033( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((::edm::Wrapper<std::vector<reco::GenJet> >*)o)->getInterface)());
  else   (((::edm::Wrapper<std::vector<reco::GenJet> >*)o)->getInterface)();
}

static  void method_21034( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<std::vector<reco::GenJet> >*)o)->fillView)(*(const ::edm::ProductID*)arg[0],
    *(::std::vector<const void*>*)arg[1],
    *(::boost::shared_ptr<edm::reftobase::RefVectorHolderBase>*)arg[2]);
}

static  void method_21035( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<std::vector<reco::GenJet> >*)o)->setPtr)(*(const ::std::type_info*)arg[0],
    *(unsigned long*)arg[1],
    *(const void**)arg[2]);
}

static  void method_21036( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<std::vector<reco::GenJet> >*)o)->fillPtrVector)(*(const ::std::type_info*)arg[0],
    *(const ::std::vector<unsigned long>*)arg[1],
    *(::std::vector<const void*>*)arg[2]);
}

static  void method_21037( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Wrapper<std::vector<reco::GenJet> >*)o)->dynamicTypeInfo)();
  else   (((const ::edm::Wrapper<std::vector<reco::GenJet> >*)o)->dynamicTypeInfo)();
}

static  void method_21038( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Wrapper<std::vector<reco::GenJet> >*)o)->isPresent)());
  else   (((const ::edm::Wrapper<std::vector<reco::GenJet> >*)o)->isPresent)();
}

static  void method_21039( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Wrapper<std::vector<reco::GenJet> >*)o)->dynamicTypeInfo_)();
  else   (((const ::edm::Wrapper<std::vector<reco::GenJet> >*)o)->dynamicTypeInfo_)();
}

static void method_newdel_4553( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<reco::GenJet> > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<reco::GenJet> > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<reco::GenJet> > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<reco::GenJet> > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<reco::GenJet> > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class Wrapper<std::vector<reco::GenJet, std::allocator<reco::GenJet> > > -------------------------------
void __edm__Wrapper_std__vector_reco__GenJet_s__db_datamem(Reflex::Class*);
void __edm__Wrapper_std__vector_reco__GenJet_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__Wrapper_std__vector_reco__GenJet_s__datamem_bld(&__edm__Wrapper_std__vector_reco__GenJet_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__Wrapper_std__vector_reco__GenJet_s__funcmem_bld(&__edm__Wrapper_std__vector_reco__GenJet_s__db_funcmem);
void __edm__Wrapper_std__vector_reco__GenJet_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::Wrapper<std::vector<reco::GenJet> >"), typeid(::edm::Wrapper<std::vector<reco::GenJet> >), sizeof(::edm::Wrapper<std::vector<reco::GenJet> >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddTypedef(type_2988, Reflex::Literal("edm::Wrapper<std::vector<reco::GenJet> >::value_type"))
  .AddTypedef(type_2988, Reflex::Literal("edm::Wrapper<std::vector<reco::GenJet> >::wrapped_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("Wrapper"), constructor_21025, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_2741), Reflex::Literal("Wrapper"), constructor_21026, 0, "ptr", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~Wrapper"), destructor_21027, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_33581), Reflex::Literal("Wrapper"), constructor_21032, 0, "ptr", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_4553, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__Wrapper_std__vector_reco__GenJet_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__Wrapper_std__vector_reco__GenJet_s__funcmem_bld);
}

//------Delayed data member builder for class Wrapper<std::vector<reco::GenJet, std::allocator<reco::GenJet> > > -------------------
void __edm__Wrapper_std__vector_reco__GenJet_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_1574, Reflex::Literal("present"), OffsetOf(__shadow__::__edm__Wrapper_std__vector_reco__GenJet_s_, present), ::Reflex::PRIVATE)
  .AddDataMember(type_2988, Reflex::Literal("obj"), OffsetOf(__shadow__::__edm__Wrapper_std__vector_reco__GenJet_s_, obj), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class Wrapper<std::vector<reco::GenJet, std::allocator<reco::GenJet> > > -------------------
void __edm__Wrapper_std__vector_reco__GenJet_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_33491), Reflex::Literal("product"), method_21028, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_33491), Reflex::Literal("operator->"), operator_21029, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_18629), Reflex::Literal("productTypeInfo"), method_21030, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_18629), Reflex::Literal("typeInfo"), method_21031, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_33582), Reflex::Literal("getInterface"), method_21033, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_18495, type_18575, type_33095), Reflex::Literal("fillView"), method_21034, 0, "id;pointers;helpers", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_18629, type_347, type_9980), Reflex::Literal("setPtr"), method_21035, 0, "iToType;iIndex;oPtr", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_18629, type_22942, type_18575), Reflex::Literal("fillPtrVector"), method_21036, 0, "iToType;iIndices;oPtr", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_18629), Reflex::Literal("dynamicTypeInfo"), method_21037, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("isPresent"), method_21038, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_18629), Reflex::Literal("dynamicTypeInfo_"), method_21039, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST);
}
//------Stub functions for class Wrapper<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> > > -------------------------------
static void constructor_21130( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<std::vector<reco::CaloJet> >();
  else ::new(mem) ::edm::Wrapper<std::vector<reco::CaloJet> >();
}

static void constructor_21131( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<std::vector<reco::CaloJet> >(*(::std::auto_ptr<std::vector<reco::CaloJet> >*)arg[0]);
  else ::new(mem) ::edm::Wrapper<std::vector<reco::CaloJet> >(*(::std::auto_ptr<std::vector<reco::CaloJet> >*)arg[0]);
}

static void destructor_21132(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::Wrapper<std::vector<reco::CaloJet> >*)o)->::edm::Wrapper<std::vector<reco::CaloJet> >::~Wrapper)();
}
static  void method_21133( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Wrapper<std::vector<reco::CaloJet> >*)o)->product)());
  else   (((const ::edm::Wrapper<std::vector<reco::CaloJet> >*)o)->product)();
}

static  void operator_21134( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Wrapper<std::vector<reco::CaloJet> >*)o)->operator->)());
  else   (((const ::edm::Wrapper<std::vector<reco::CaloJet> >*)o)->operator->)();
}

static  void method_21135( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::Wrapper<std::vector<reco::CaloJet> >*)o)->productTypeInfo)();
  else   (((::edm::Wrapper<std::vector<reco::CaloJet> >*)o)->productTypeInfo)();
}

static  void method_21136( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::Wrapper<std::vector<reco::CaloJet> >*)o)->typeInfo)();
  else   (((::edm::Wrapper<std::vector<reco::CaloJet> >*)o)->typeInfo)();
}

static void constructor_21137( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<std::vector<reco::CaloJet> >((::std::vector<reco::CaloJet>*)arg[0]);
  else ::new(mem) ::edm::Wrapper<std::vector<reco::CaloJet> >((::std::vector<reco::CaloJet>*)arg[0]);
}

static  void method_21138( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((::edm::Wrapper<std::vector<reco::CaloJet> >*)o)->getInterface)());
  else   (((::edm::Wrapper<std::vector<reco::CaloJet> >*)o)->getInterface)();
}

static  void method_21139( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<std::vector<reco::CaloJet> >*)o)->fillView)(*(const ::edm::ProductID*)arg[0],
    *(::std::vector<const void*>*)arg[1],
    *(::boost::shared_ptr<edm::reftobase::RefVectorHolderBase>*)arg[2]);
}

static  void method_21140( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<std::vector<reco::CaloJet> >*)o)->setPtr)(*(const ::std::type_info*)arg[0],
    *(unsigned long*)arg[1],
    *(const void**)arg[2]);
}

static  void method_21141( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<std::vector<reco::CaloJet> >*)o)->fillPtrVector)(*(const ::std::type_info*)arg[0],
    *(const ::std::vector<unsigned long>*)arg[1],
    *(::std::vector<const void*>*)arg[2]);
}

static  void method_21142( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Wrapper<std::vector<reco::CaloJet> >*)o)->dynamicTypeInfo)();
  else   (((const ::edm::Wrapper<std::vector<reco::CaloJet> >*)o)->dynamicTypeInfo)();
}

static  void method_21143( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Wrapper<std::vector<reco::CaloJet> >*)o)->isPresent)());
  else   (((const ::edm::Wrapper<std::vector<reco::CaloJet> >*)o)->isPresent)();
}

static  void method_21144( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Wrapper<std::vector<reco::CaloJet> >*)o)->dynamicTypeInfo_)();
  else   (((const ::edm::Wrapper<std::vector<reco::CaloJet> >*)o)->dynamicTypeInfo_)();
}

static void method_newdel_4558( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<reco::CaloJet> > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<reco::CaloJet> > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<reco::CaloJet> > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<reco::CaloJet> > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<reco::CaloJet> > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class Wrapper<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> > > -------------------------------
void __edm__Wrapper_std__vector_reco__CaloJet_s__db_datamem(Reflex::Class*);
void __edm__Wrapper_std__vector_reco__CaloJet_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__Wrapper_std__vector_reco__CaloJet_s__datamem_bld(&__edm__Wrapper_std__vector_reco__CaloJet_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__Wrapper_std__vector_reco__CaloJet_s__funcmem_bld(&__edm__Wrapper_std__vector_reco__CaloJet_s__db_funcmem);
void __edm__Wrapper_std__vector_reco__CaloJet_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::Wrapper<std::vector<reco::CaloJet> >"), typeid(::edm::Wrapper<std::vector<reco::CaloJet> >), sizeof(::edm::Wrapper<std::vector<reco::CaloJet> >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddTypedef(type_2991, Reflex::Literal("edm::Wrapper<std::vector<reco::CaloJet> >::value_type"))
  .AddTypedef(type_2991, Reflex::Literal("edm::Wrapper<std::vector<reco::CaloJet> >::wrapped_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("Wrapper"), constructor_21130, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_2746), Reflex::Literal("Wrapper"), constructor_21131, 0, "ptr", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~Wrapper"), destructor_21132, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_33603), Reflex::Literal("Wrapper"), constructor_21137, 0, "ptr", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_4558, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__Wrapper_std__vector_reco__CaloJet_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__Wrapper_std__vector_reco__CaloJet_s__funcmem_bld);
}

//------Delayed data member builder for class Wrapper<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> > > -------------------
void __edm__Wrapper_std__vector_reco__CaloJet_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_1574, Reflex::Literal("present"), OffsetOf(__shadow__::__edm__Wrapper_std__vector_reco__CaloJet_s_, present), ::Reflex::PRIVATE)
  .AddDataMember(type_2991, Reflex::Literal("obj"), OffsetOf(__shadow__::__edm__Wrapper_std__vector_reco__CaloJet_s_, obj), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class Wrapper<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> > > -------------------
void __edm__Wrapper_std__vector_reco__CaloJet_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_33494), Reflex::Literal("product"), method_21133, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_33494), Reflex::Literal("operator->"), operator_21134, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_18629), Reflex::Literal("productTypeInfo"), method_21135, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_18629), Reflex::Literal("typeInfo"), method_21136, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_33604), Reflex::Literal("getInterface"), method_21138, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_18495, type_18575, type_33095), Reflex::Literal("fillView"), method_21139, 0, "id;pointers;helpers", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_18629, type_347, type_9980), Reflex::Literal("setPtr"), method_21140, 0, "iToType;iIndex;oPtr", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_18629, type_22942, type_18575), Reflex::Literal("fillPtrVector"), method_21141, 0, "iToType;iIndices;oPtr", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_18629), Reflex::Literal("dynamicTypeInfo"), method_21142, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("isPresent"), method_21143, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_18629), Reflex::Literal("dynamicTypeInfo_"), method_21144, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST);
}
//------Stub functions for class FwdRef<std::vector<reco::PFJet, std::allocator<reco::PFJet> >,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet> > -------------------------------
static  void operator_21389( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)o)->operator=)(*(const ::edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)arg[0]);
  else   (((::edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)o)->operator=)(*(const ::edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)arg[0]);
}

static void constructor_21390( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >(*(const ::edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)arg[0]);
  else ::new(mem) ::edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >(*(const ::edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)arg[0]);
}

static void constructor_21391( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >();
  else ::new(mem) ::edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >();
}

static void constructor_21392( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >(*(const ::edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)arg[0],
      *(const ::edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)arg[1]);
  else ::new(mem) ::edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >(*(const ::edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)arg[0],
      *(const ::edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)arg[1]);
}

static void destructor_21393(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)o)->::edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >::~FwdRef)();
}
static  void operator_21394( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)o)->operator*)();
  else   (((const ::edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)o)->operator*)();
}

static  void operator_21395( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)o)->operator->)());
  else   (((const ::edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)o)->operator->)();
}

static  void method_21396( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)o)->get)());
  else   (((const ::edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)o)->get)();
}

static  void method_21397( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)o)->isNull)());
  else   (((const ::edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)o)->isNull)();
}

static  void method_21398( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)o)->isNonnull)());
  else   (((const ::edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)o)->isNonnull)();
}

static  void operator_21399( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)o)->operator!)());
  else   (((const ::edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)o)->operator!)();
}

static  void method_21400( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)o)->ref)();
  else   (((const ::edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)o)->ref)();
}

static  void method_21401( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)o)->backRef)();
  else   (((const ::edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)o)->backRef)();
}

static  void method_21402( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)o)->productGetter)());
  else   (((const ::edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)o)->productGetter)();
}

static  void method_21403( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)o)->product)());
  else   (((const ::edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)o)->product)();
}

static  void method_21404( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::ProductID)((((const ::edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)o)->id)());
  else   (((const ::edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)o)->id)();
}

static  void method_21405( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (unsigned int)((((const ::edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)o)->key)());
  else   (((const ::edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)o)->key)();
}

static  void method_21406( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)o)->hasProductCache)());
  else   (((const ::edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)o)->hasProductCache)();
}

static  void method_21407( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)o)->isAvailable)());
  else   (((const ::edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)o)->isAvailable)();
}

static  void method_21408( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)o)->isTransient)());
  else   (((const ::edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)o)->isTransient)();
}

static  void method_21409( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (short)((((::edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)o)->Class_Version)());
  else   (((::edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)o)->Class_Version)();
}

static void method_newdel_4571( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class FwdRef<std::vector<reco::PFJet, std::allocator<reco::PFJet> >,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet> > -------------------------------
void __edm__FwdRef_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s__db_datamem(Reflex::Class*);
void __edm__FwdRef_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__FwdRef_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s__datamem_bld(&__edm__FwdRef_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__FwdRef_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s__funcmem_bld(&__edm__FwdRef_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s__db_funcmem);
void __edm__FwdRef_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >"), typeid(::edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >), sizeof(::edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("ClassVersion"), ::edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >::Class_Version())
  .AddTypedef(type_2971, Reflex::Literal("edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >::product_type"))
  .AddTypedef(type_7463, Reflex::Literal("edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >::value_type"))
  .AddTypedef(type_7463c, Reflex::Literal("edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >::element_type"))
  .AddTypedef(type_18703, Reflex::Literal("edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >::finder_type"))
  .AddTypedef(type_356, Reflex::Literal("edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >::argument_type"))
  .AddTypedef(type_356, Reflex::Literal("edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >::key_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13085, type_13087), Reflex::Literal("operator="), operator_21389, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_13087), Reflex::Literal("FwdRef"), constructor_21390, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("FwdRef"), constructor_21391, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_12892, type_12892), Reflex::Literal("FwdRef"), constructor_21392, 0, "ref;backRef", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~FwdRef"), destructor_21393, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_4571, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__FwdRef_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__FwdRef_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s__funcmem_bld);
}

//------Delayed data member builder for class FwdRef<std::vector<reco::PFJet, std::allocator<reco::PFJet> >,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet> > -------------------
void __edm__FwdRef_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_4740, Reflex::Literal("ref_"), OffsetOf(__shadow__::__edm__FwdRef_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_, ref_), ::Reflex::PRIVATE)
  .AddDataMember(type_4740, Reflex::Literal("backRef_"), OffsetOf(__shadow__::__edm__FwdRef_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_, backRef_), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class FwdRef<std::vector<reco::PFJet, std::allocator<reco::PFJet> >,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet> > -------------------
void __edm__FwdRef_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_12957), Reflex::Literal("operator*"), operator_21394, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_12953), Reflex::Literal("operator->"), operator_21395, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_12953), Reflex::Literal("get"), method_21396, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("isNull"), method_21397, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("isNonnull"), method_21398, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("operator!"), operator_21399, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_12892), Reflex::Literal("ref"), method_21400, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_12892), Reflex::Literal("backRef"), method_21401, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_18571), Reflex::Literal("productGetter"), method_21402, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_33477), Reflex::Literal("product"), method_21403, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4689), Reflex::Literal("id"), method_21404, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_356), Reflex::Literal("key"), method_21405, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("hasProductCache"), method_21406, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("isAvailable"), method_21407, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("isTransient"), method_21408, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_231), Reflex::Literal("Class_Version"), method_21409, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC);
}
//------Stub functions for class FwdRef<std::vector<reco::BasicJet, std::allocator<reco::BasicJet> >,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet, std::allocator<reco::BasicJet> >, reco::BasicJet> > -------------------------------
static  void operator_21447( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)o)->operator=)(*(const ::edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)arg[0]);
  else   (((::edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)o)->operator=)(*(const ::edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)arg[0]);
}

static void constructor_21448( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >(*(const ::edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)arg[0]);
  else ::new(mem) ::edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >(*(const ::edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)arg[0]);
}

static void constructor_21449( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >();
  else ::new(mem) ::edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >();
}

static void constructor_21450( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >(*(const ::edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)arg[0],
      *(const ::edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)arg[1]);
  else ::new(mem) ::edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >(*(const ::edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)arg[0],
      *(const ::edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)arg[1]);
}

static void destructor_21451(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)o)->::edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >::~FwdRef)();
}
static  void operator_21452( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)o)->operator*)();
  else   (((const ::edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)o)->operator*)();
}

static  void operator_21453( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)o)->operator->)());
  else   (((const ::edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)o)->operator->)();
}

static  void method_21454( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)o)->get)());
  else   (((const ::edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)o)->get)();
}

static  void method_21455( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)o)->isNull)());
  else   (((const ::edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)o)->isNull)();
}

static  void method_21456( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)o)->isNonnull)());
  else   (((const ::edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)o)->isNonnull)();
}

static  void operator_21457( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)o)->operator!)());
  else   (((const ::edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)o)->operator!)();
}

static  void method_21458( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)o)->ref)();
  else   (((const ::edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)o)->ref)();
}

static  void method_21459( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)o)->backRef)();
  else   (((const ::edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)o)->backRef)();
}

static  void method_21460( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)o)->productGetter)());
  else   (((const ::edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)o)->productGetter)();
}

static  void method_21461( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)o)->product)());
  else   (((const ::edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)o)->product)();
}

static  void method_21462( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::ProductID)((((const ::edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)o)->id)());
  else   (((const ::edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)o)->id)();
}

static  void method_21463( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (unsigned int)((((const ::edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)o)->key)());
  else   (((const ::edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)o)->key)();
}

static  void method_21464( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)o)->hasProductCache)());
  else   (((const ::edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)o)->hasProductCache)();
}

static  void method_21465( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)o)->isAvailable)());
  else   (((const ::edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)o)->isAvailable)();
}

static  void method_21466( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)o)->isTransient)());
  else   (((const ::edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)o)->isTransient)();
}

static  void method_21467( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (short)((((::edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)o)->Class_Version)());
  else   (((::edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)o)->Class_Version)();
}

static void method_newdel_4573( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class FwdRef<std::vector<reco::BasicJet, std::allocator<reco::BasicJet> >,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet, std::allocator<reco::BasicJet> >, reco::BasicJet> > -------------------------------
void __edm__FwdRef_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s__db_datamem(Reflex::Class*);
void __edm__FwdRef_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__FwdRef_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s__datamem_bld(&__edm__FwdRef_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__FwdRef_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s__funcmem_bld(&__edm__FwdRef_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s__db_funcmem);
void __edm__FwdRef_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >"), typeid(::edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >), sizeof(::edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("ClassVersion"), ::edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >::Class_Version())
  .AddTypedef(type_2983, Reflex::Literal("edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >::product_type"))
  .AddTypedef(type_7564, Reflex::Literal("edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >::value_type"))
  .AddTypedef(type_7564c, Reflex::Literal("edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >::element_type"))
  .AddTypedef(type_18727, Reflex::Literal("edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >::finder_type"))
  .AddTypedef(type_356, Reflex::Literal("edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >::argument_type"))
  .AddTypedef(type_356, Reflex::Literal("edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >::key_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13345, type_13347), Reflex::Literal("operator="), operator_21447, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_13347), Reflex::Literal("FwdRef"), constructor_21448, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("FwdRef"), constructor_21449, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_33246, type_33246), Reflex::Literal("FwdRef"), constructor_21450, 0, "ref;backRef", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~FwdRef"), destructor_21451, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_4573, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__FwdRef_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__FwdRef_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s__funcmem_bld);
}

//------Delayed data member builder for class FwdRef<std::vector<reco::BasicJet, std::allocator<reco::BasicJet> >,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet, std::allocator<reco::BasicJet> >, reco::BasicJet> > -------------------
void __edm__FwdRef_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_4742, Reflex::Literal("ref_"), OffsetOf(__shadow__::__edm__FwdRef_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s_, ref_), ::Reflex::PRIVATE)
  .AddDataMember(type_4742, Reflex::Literal("backRef_"), OffsetOf(__shadow__::__edm__FwdRef_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s_, backRef_), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class FwdRef<std::vector<reco::BasicJet, std::allocator<reco::BasicJet> >,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet, std::allocator<reco::BasicJet> >, reco::BasicJet> > -------------------
void __edm__FwdRef_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13412), Reflex::Literal("operator*"), operator_21452, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13408), Reflex::Literal("operator->"), operator_21453, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13408), Reflex::Literal("get"), method_21454, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("isNull"), method_21455, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("isNonnull"), method_21456, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("operator!"), operator_21457, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_33246), Reflex::Literal("ref"), method_21458, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_33246), Reflex::Literal("backRef"), method_21459, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_18571), Reflex::Literal("productGetter"), method_21460, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_33486), Reflex::Literal("product"), method_21461, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4689), Reflex::Literal("id"), method_21462, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_356), Reflex::Literal("key"), method_21463, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("hasProductCache"), method_21464, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("isAvailable"), method_21465, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("isTransient"), method_21466, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_231), Reflex::Literal("Class_Version"), method_21467, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC);
}
//------Stub functions for class FwdRef<std::vector<reco::GenJet, std::allocator<reco::GenJet> >,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet, std::allocator<reco::GenJet> >, reco::GenJet> > -------------------------------
static  void operator_21476( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)o)->operator=)(*(const ::edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)arg[0]);
  else   (((::edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)o)->operator=)(*(const ::edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)arg[0]);
}

static void constructor_21477( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >(*(const ::edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)arg[0]);
  else ::new(mem) ::edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >(*(const ::edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)arg[0]);
}

static void constructor_21478( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >();
  else ::new(mem) ::edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >();
}

static void constructor_21479( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >(*(const ::edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)arg[0],
      *(const ::edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)arg[1]);
  else ::new(mem) ::edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >(*(const ::edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)arg[0],
      *(const ::edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)arg[1]);
}

static void destructor_21480(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)o)->::edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >::~FwdRef)();
}
static  void operator_21481( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)o)->operator*)();
  else   (((const ::edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)o)->operator*)();
}

static  void operator_21482( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)o)->operator->)());
  else   (((const ::edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)o)->operator->)();
}

static  void method_21483( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)o)->get)());
  else   (((const ::edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)o)->get)();
}

static  void method_21484( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)o)->isNull)());
  else   (((const ::edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)o)->isNull)();
}

static  void method_21485( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)o)->isNonnull)());
  else   (((const ::edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)o)->isNonnull)();
}

static  void operator_21486( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)o)->operator!)());
  else   (((const ::edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)o)->operator!)();
}

static  void method_21487( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)o)->ref)();
  else   (((const ::edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)o)->ref)();
}

static  void method_21488( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)o)->backRef)();
  else   (((const ::edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)o)->backRef)();
}

static  void method_21489( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)o)->productGetter)());
  else   (((const ::edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)o)->productGetter)();
}

static  void method_21490( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)o)->product)());
  else   (((const ::edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)o)->product)();
}

static  void method_21491( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::ProductID)((((const ::edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)o)->id)());
  else   (((const ::edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)o)->id)();
}

static  void method_21492( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (unsigned int)((((const ::edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)o)->key)());
  else   (((const ::edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)o)->key)();
}

static  void method_21493( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)o)->hasProductCache)());
  else   (((const ::edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)o)->hasProductCache)();
}

static  void method_21494( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)o)->isAvailable)());
  else   (((const ::edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)o)->isAvailable)();
}

static  void method_21495( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)o)->isTransient)());
  else   (((const ::edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)o)->isTransient)();
}

static  void method_21496( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (short)((((::edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)o)->Class_Version)());
  else   (((::edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)o)->Class_Version)();
}

static void method_newdel_4574( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class FwdRef<std::vector<reco::GenJet, std::allocator<reco::GenJet> >,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet, std::allocator<reco::GenJet> >, reco::GenJet> > -------------------------------
void __edm__FwdRef_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s__db_datamem(Reflex::Class*);
void __edm__FwdRef_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__FwdRef_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s__datamem_bld(&__edm__FwdRef_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__FwdRef_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s__funcmem_bld(&__edm__FwdRef_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s__db_funcmem);
void __edm__FwdRef_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >"), typeid(::edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >), sizeof(::edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("ClassVersion"), ::edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >::Class_Version())
  .AddTypedef(type_2988, Reflex::Literal("edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >::product_type"))
  .AddTypedef(type_7512, Reflex::Literal("edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >::value_type"))
  .AddTypedef(type_7512c, Reflex::Literal("edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >::element_type"))
  .AddTypedef(type_18739, Reflex::Literal("edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >::finder_type"))
  .AddTypedef(type_356, Reflex::Literal("edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >::argument_type"))
  .AddTypedef(type_356, Reflex::Literal("edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >::key_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13540, type_13542), Reflex::Literal("operator="), operator_21476, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_13542), Reflex::Literal("FwdRef"), constructor_21477, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("FwdRef"), constructor_21478, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_33260, type_33260), Reflex::Literal("FwdRef"), constructor_21479, 0, "ref;backRef", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~FwdRef"), destructor_21480, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_4574, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__FwdRef_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__FwdRef_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s__funcmem_bld);
}

//------Delayed data member builder for class FwdRef<std::vector<reco::GenJet, std::allocator<reco::GenJet> >,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet, std::allocator<reco::GenJet> >, reco::GenJet> > -------------------
void __edm__FwdRef_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_4743, Reflex::Literal("ref_"), OffsetOf(__shadow__::__edm__FwdRef_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s_, ref_), ::Reflex::PRIVATE)
  .AddDataMember(type_4743, Reflex::Literal("backRef_"), OffsetOf(__shadow__::__edm__FwdRef_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s_, backRef_), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class FwdRef<std::vector<reco::GenJet, std::allocator<reco::GenJet> >,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet, std::allocator<reco::GenJet> >, reco::GenJet> > -------------------
void __edm__FwdRef_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13607), Reflex::Literal("operator*"), operator_21481, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13603), Reflex::Literal("operator->"), operator_21482, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13603), Reflex::Literal("get"), method_21483, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("isNull"), method_21484, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("isNonnull"), method_21485, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("operator!"), operator_21486, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_33260), Reflex::Literal("ref"), method_21487, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_33260), Reflex::Literal("backRef"), method_21488, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_18571), Reflex::Literal("productGetter"), method_21489, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_33491), Reflex::Literal("product"), method_21490, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4689), Reflex::Literal("id"), method_21491, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_356), Reflex::Literal("key"), method_21492, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("hasProductCache"), method_21493, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("isAvailable"), method_21494, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("isTransient"), method_21495, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_231), Reflex::Literal("Class_Version"), method_21496, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC);
}
//------Stub functions for class FwdRef<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> >,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> >, reco::CaloJet> > -------------------------------
static  void operator_21505( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)o)->operator=)(*(const ::edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)arg[0]);
  else   (((::edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)o)->operator=)(*(const ::edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)arg[0]);
}

static void constructor_21506( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >(*(const ::edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)arg[0]);
  else ::new(mem) ::edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >(*(const ::edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)arg[0]);
}

static void constructor_21507( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >();
  else ::new(mem) ::edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >();
}

static void constructor_21508( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >(*(const ::edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)arg[0],
      *(const ::edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)arg[1]);
  else ::new(mem) ::edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >(*(const ::edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)arg[0],
      *(const ::edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)arg[1]);
}

static void destructor_21509(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)o)->::edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >::~FwdRef)();
}
static  void operator_21510( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)o)->operator*)();
  else   (((const ::edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)o)->operator*)();
}

static  void operator_21511( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)o)->operator->)());
  else   (((const ::edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)o)->operator->)();
}

static  void method_21512( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)o)->get)());
  else   (((const ::edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)o)->get)();
}

static  void method_21513( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)o)->isNull)());
  else   (((const ::edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)o)->isNull)();
}

static  void method_21514( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)o)->isNonnull)());
  else   (((const ::edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)o)->isNonnull)();
}

static  void operator_21515( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)o)->operator!)());
  else   (((const ::edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)o)->operator!)();
}

static  void method_21516( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)o)->ref)();
  else   (((const ::edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)o)->ref)();
}

static  void method_21517( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)o)->backRef)();
  else   (((const ::edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)o)->backRef)();
}

static  void method_21518( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)o)->productGetter)());
  else   (((const ::edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)o)->productGetter)();
}

static  void method_21519( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)o)->product)());
  else   (((const ::edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)o)->product)();
}

static  void method_21520( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::ProductID)((((const ::edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)o)->id)());
  else   (((const ::edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)o)->id)();
}

static  void method_21521( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (unsigned int)((((const ::edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)o)->key)());
  else   (((const ::edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)o)->key)();
}

static  void method_21522( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)o)->hasProductCache)());
  else   (((const ::edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)o)->hasProductCache)();
}

static  void method_21523( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)o)->isAvailable)());
  else   (((const ::edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)o)->isAvailable)();
}

static  void method_21524( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)o)->isTransient)());
  else   (((const ::edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)o)->isTransient)();
}

static  void method_21525( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (short)((((::edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)o)->Class_Version)());
  else   (((::edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)o)->Class_Version)();
}

static void method_newdel_4575( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class FwdRef<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> >,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> >, reco::CaloJet> > -------------------------------
void __edm__FwdRef_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s__db_datamem(Reflex::Class*);
void __edm__FwdRef_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__FwdRef_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s__datamem_bld(&__edm__FwdRef_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__FwdRef_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s__funcmem_bld(&__edm__FwdRef_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s__db_funcmem);
void __edm__FwdRef_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >"), typeid(::edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >), sizeof(::edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("ClassVersion"), ::edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >::Class_Version())
  .AddTypedef(type_2991, Reflex::Literal("edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >::product_type"))
  .AddTypedef(type_7473, Reflex::Literal("edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >::value_type"))
  .AddTypedef(type_7473c, Reflex::Literal("edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >::element_type"))
  .AddTypedef(type_18751, Reflex::Literal("edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >::finder_type"))
  .AddTypedef(type_356, Reflex::Literal("edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >::argument_type"))
  .AddTypedef(type_356, Reflex::Literal("edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >::key_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13930, type_13932), Reflex::Literal("operator="), operator_21505, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_13932), Reflex::Literal("FwdRef"), constructor_21506, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("FwdRef"), constructor_21507, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_13737, type_13737), Reflex::Literal("FwdRef"), constructor_21508, 0, "ref;backRef", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~FwdRef"), destructor_21509, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_4575, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__FwdRef_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__FwdRef_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s__funcmem_bld);
}

//------Delayed data member builder for class FwdRef<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> >,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> >, reco::CaloJet> > -------------------
void __edm__FwdRef_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_4744, Reflex::Literal("ref_"), OffsetOf(__shadow__::__edm__FwdRef_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_, ref_), ::Reflex::PRIVATE)
  .AddDataMember(type_4744, Reflex::Literal("backRef_"), OffsetOf(__shadow__::__edm__FwdRef_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_, backRef_), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class FwdRef<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> >,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> >, reco::CaloJet> > -------------------
void __edm__FwdRef_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13802), Reflex::Literal("operator*"), operator_21510, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13798), Reflex::Literal("operator->"), operator_21511, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13798), Reflex::Literal("get"), method_21512, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("isNull"), method_21513, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("isNonnull"), method_21514, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("operator!"), operator_21515, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13737), Reflex::Literal("ref"), method_21516, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13737), Reflex::Literal("backRef"), method_21517, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_18571), Reflex::Literal("productGetter"), method_21518, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_33494), Reflex::Literal("product"), method_21519, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4689), Reflex::Literal("id"), method_21520, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_356), Reflex::Literal("key"), method_21521, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("hasProductCache"), method_21522, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("isAvailable"), method_21523, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("isTransient"), method_21524, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_231), Reflex::Literal("Class_Version"), method_21525, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC);
}
//------Stub functions for class RefProd<std::vector<reco::JPTJet, std::allocator<reco::JPTJet> > > -------------------------------
static  void operator_21850( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::RefProd<std::vector<reco::JPTJet> >*)o)->operator=)(*(const ::edm::RefProd<std::vector<reco::JPTJet> >*)arg[0]);
  else   (((::edm::RefProd<std::vector<reco::JPTJet> >*)o)->operator=)(*(const ::edm::RefProd<std::vector<reco::JPTJet> >*)arg[0]);
}

static void constructor_21851( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefProd<std::vector<reco::JPTJet> >(*(const ::edm::RefProd<std::vector<reco::JPTJet> >*)arg[0]);
  else ::new(mem) ::edm::RefProd<std::vector<reco::JPTJet> >(*(const ::edm::RefProd<std::vector<reco::JPTJet> >*)arg[0]);
}

static void constructor_21852( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefProd<std::vector<reco::JPTJet> >();
  else ::new(mem) ::edm::RefProd<std::vector<reco::JPTJet> >();
}

static void constructor_21853( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefProd<std::vector<reco::JPTJet> >(*(const ::edm::Handle<std::vector<reco::JPTJet> >*)arg[0]);
  else ::new(mem) ::edm::RefProd<std::vector<reco::JPTJet> >(*(const ::edm::Handle<std::vector<reco::JPTJet> >*)arg[0]);
}

static void constructor_21854( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefProd<std::vector<reco::JPTJet> >(*(const ::edm::OrphanHandle<std::vector<reco::JPTJet> >*)arg[0]);
  else ::new(mem) ::edm::RefProd<std::vector<reco::JPTJet> >(*(const ::edm::OrphanHandle<std::vector<reco::JPTJet> >*)arg[0]);
}

static void constructor_21855( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefProd<std::vector<reco::JPTJet> >((const ::std::vector<reco::JPTJet>*)arg[0]);
  else ::new(mem) ::edm::RefProd<std::vector<reco::JPTJet> >((const ::std::vector<reco::JPTJet>*)arg[0]);
}

static void constructor_21856( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefProd<std::vector<reco::JPTJet> >(*(const ::edm::TestHandle<std::vector<reco::JPTJet> >*)arg[0]);
  else ::new(mem) ::edm::RefProd<std::vector<reco::JPTJet> >(*(const ::edm::TestHandle<std::vector<reco::JPTJet> >*)arg[0]);
}

static void constructor_21857( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefProd<std::vector<reco::JPTJet> >(*(const ::edm::ProductID*)arg[0],
      (const ::edm::EDProductGetter*)arg[1]);
  else ::new(mem) ::edm::RefProd<std::vector<reco::JPTJet> >(*(const ::edm::ProductID*)arg[0],
      (const ::edm::EDProductGetter*)arg[1]);
}

static void destructor_21858(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::RefProd<std::vector<reco::JPTJet> >*)o)->::edm::RefProd<std::vector<reco::JPTJet> >::~RefProd)();
}
static  void operator_21859( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::RefProd<std::vector<reco::JPTJet> >*)o)->operator*)();
  else   (((const ::edm::RefProd<std::vector<reco::JPTJet> >*)o)->operator*)();
}

static  void operator_21860( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::RefProd<std::vector<reco::JPTJet> >*)o)->operator->)());
  else   (((const ::edm::RefProd<std::vector<reco::JPTJet> >*)o)->operator->)();
}

static  void method_21861( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::RefProd<std::vector<reco::JPTJet> >*)o)->get)());
  else   (((const ::edm::RefProd<std::vector<reco::JPTJet> >*)o)->get)();
}

static  void method_21862( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::RefProd<std::vector<reco::JPTJet> >*)o)->product)());
  else   (((const ::edm::RefProd<std::vector<reco::JPTJet> >*)o)->product)();
}

static  void method_21863( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::RefProd<std::vector<reco::JPTJet> >*)o)->refCore)();
  else   (((const ::edm::RefProd<std::vector<reco::JPTJet> >*)o)->refCore)();
}

static  void method_21864( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefProd<std::vector<reco::JPTJet> >*)o)->isNull)());
  else   (((const ::edm::RefProd<std::vector<reco::JPTJet> >*)o)->isNull)();
}

static  void method_21865( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefProd<std::vector<reco::JPTJet> >*)o)->isNonnull)());
  else   (((const ::edm::RefProd<std::vector<reco::JPTJet> >*)o)->isNonnull)();
}

static  void operator_21866( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefProd<std::vector<reco::JPTJet> >*)o)->operator!)());
  else   (((const ::edm::RefProd<std::vector<reco::JPTJet> >*)o)->operator!)();
}

static  void method_21867( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::ProductID)((((const ::edm::RefProd<std::vector<reco::JPTJet> >*)o)->id)());
  else   (((const ::edm::RefProd<std::vector<reco::JPTJet> >*)o)->id)();
}

static  void method_21868( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::RefProd<std::vector<reco::JPTJet> >*)o)->productGetter)());
  else   (((const ::edm::RefProd<std::vector<reco::JPTJet> >*)o)->productGetter)();
}

static  void method_21869( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefProd<std::vector<reco::JPTJet> >*)o)->hasCache)());
  else   (((const ::edm::RefProd<std::vector<reco::JPTJet> >*)o)->hasCache)();
}

static  void method_21870( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefProd<std::vector<reco::JPTJet> >*)o)->hasProductCache)());
  else   (((const ::edm::RefProd<std::vector<reco::JPTJet> >*)o)->hasProductCache)();
}

static  void method_21871( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefProd<std::vector<reco::JPTJet> >*)o)->isAvailable)());
  else   (((const ::edm::RefProd<std::vector<reco::JPTJet> >*)o)->isAvailable)();
}

static  void method_21872( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefProd<std::vector<reco::JPTJet> >*)o)->isTransient)());
  else   (((const ::edm::RefProd<std::vector<reco::JPTJet> >*)o)->isTransient)();
}

static  void method_21873( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::edm::RefProd<std::vector<reco::JPTJet> >*)o)->swap)(*(::edm::RefProd<std::vector<reco::JPTJet> >*)arg[0]);
}

static  void method_21874( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (short)((((::edm::RefProd<std::vector<reco::JPTJet> >*)o)->Class_Version)());
  else   (((::edm::RefProd<std::vector<reco::JPTJet> >*)o)->Class_Version)();
}

static void method_newdel_4704( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::RefProd<std::vector<reco::JPTJet> > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::RefProd<std::vector<reco::JPTJet> > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::RefProd<std::vector<reco::JPTJet> > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::RefProd<std::vector<reco::JPTJet> > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::RefProd<std::vector<reco::JPTJet> > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class RefProd<std::vector<reco::JPTJet, std::allocator<reco::JPTJet> > > -------------------------------
void __edm__RefProd_std__vector_reco__JPTJet_s__db_datamem(Reflex::Class*);
void __edm__RefProd_std__vector_reco__JPTJet_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__RefProd_std__vector_reco__JPTJet_s__datamem_bld(&__edm__RefProd_std__vector_reco__JPTJet_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__RefProd_std__vector_reco__JPTJet_s__funcmem_bld(&__edm__RefProd_std__vector_reco__JPTJet_s__db_funcmem);
void __edm__RefProd_std__vector_reco__JPTJet_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::RefProd<std::vector<reco::JPTJet> >"), typeid(::edm::RefProd<std::vector<reco::JPTJet> >), sizeof(::edm::RefProd<std::vector<reco::JPTJet> >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("ClassVersion"), ::edm::RefProd<std::vector<reco::JPTJet> >::Class_Version())
  .AddTypedef(type_2968, Reflex::Literal("edm::RefProd<std::vector<reco::JPTJet> >::product_type"))
  .AddTypedef(type_2968, Reflex::Literal("edm::RefProd<std::vector<reco::JPTJet> >::value_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_33948, type_33949), Reflex::Literal("operator="), operator_21850, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_33949), Reflex::Literal("RefProd"), constructor_21851, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("RefProd"), constructor_21852, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_33950), Reflex::Literal("RefProd"), constructor_21853, 0, "handle", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_33951), Reflex::Literal("RefProd"), constructor_21854, 0, "handle", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_33474), Reflex::Literal("RefProd"), constructor_21855, 0, "iProduct", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_33952), Reflex::Literal("RefProd"), constructor_21856, 0, "handle", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_18495, type_18571), Reflex::Literal("RefProd"), constructor_21857, 0, "productID;prodGetter", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~RefProd"), destructor_21858, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_4704, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__RefProd_std__vector_reco__JPTJet_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__RefProd_std__vector_reco__JPTJet_s__funcmem_bld);
}

//------Delayed data member builder for class RefProd<std::vector<reco::JPTJet, std::allocator<reco::JPTJet> > > -------------------
void __edm__RefProd_std__vector_reco__JPTJet_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_4691, Reflex::Literal("product_"), OffsetOf(__shadow__::__edm__RefProd_std__vector_reco__JPTJet_s_, product_), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class RefProd<std::vector<reco::JPTJet, std::allocator<reco::JPTJet> > > -------------------
void __edm__RefProd_std__vector_reco__JPTJet_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_18696), Reflex::Literal("operator*"), operator_21859, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_33474), Reflex::Literal("operator->"), operator_21860, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_33474), Reflex::Literal("get"), method_21861, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_33474), Reflex::Literal("product"), method_21862, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_21597), Reflex::Literal("refCore"), method_21863, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("isNull"), method_21864, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("isNonnull"), method_21865, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("operator!"), operator_21866, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4689), Reflex::Literal("id"), method_21867, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_18571), Reflex::Literal("productGetter"), method_21868, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("hasCache"), method_21869, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("hasProductCache"), method_21870, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("isAvailable"), method_21871, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("isTransient"), method_21872, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_33948), Reflex::Literal("swap"), method_21873, 0, "other", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_231), Reflex::Literal("Class_Version"), method_21874, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC);
}
//------Stub functions for class RefProd<std::vector<reco::PFJet, std::allocator<reco::PFJet> > > -------------------------------
static  void operator_21879( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::RefProd<std::vector<reco::PFJet> >*)o)->operator=)(*(const ::edm::RefProd<std::vector<reco::PFJet> >*)arg[0]);
  else   (((::edm::RefProd<std::vector<reco::PFJet> >*)o)->operator=)(*(const ::edm::RefProd<std::vector<reco::PFJet> >*)arg[0]);
}

static void constructor_21880( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefProd<std::vector<reco::PFJet> >(*(const ::edm::RefProd<std::vector<reco::PFJet> >*)arg[0]);
  else ::new(mem) ::edm::RefProd<std::vector<reco::PFJet> >(*(const ::edm::RefProd<std::vector<reco::PFJet> >*)arg[0]);
}

static void constructor_21881( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefProd<std::vector<reco::PFJet> >();
  else ::new(mem) ::edm::RefProd<std::vector<reco::PFJet> >();
}

static void constructor_21882( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefProd<std::vector<reco::PFJet> >(*(const ::edm::Handle<std::vector<reco::PFJet> >*)arg[0]);
  else ::new(mem) ::edm::RefProd<std::vector<reco::PFJet> >(*(const ::edm::Handle<std::vector<reco::PFJet> >*)arg[0]);
}

static void constructor_21883( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefProd<std::vector<reco::PFJet> >(*(const ::edm::OrphanHandle<std::vector<reco::PFJet> >*)arg[0]);
  else ::new(mem) ::edm::RefProd<std::vector<reco::PFJet> >(*(const ::edm::OrphanHandle<std::vector<reco::PFJet> >*)arg[0]);
}

static void constructor_21884( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefProd<std::vector<reco::PFJet> >((const ::std::vector<reco::PFJet>*)arg[0]);
  else ::new(mem) ::edm::RefProd<std::vector<reco::PFJet> >((const ::std::vector<reco::PFJet>*)arg[0]);
}

static void constructor_21885( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefProd<std::vector<reco::PFJet> >(*(const ::edm::TestHandle<std::vector<reco::PFJet> >*)arg[0]);
  else ::new(mem) ::edm::RefProd<std::vector<reco::PFJet> >(*(const ::edm::TestHandle<std::vector<reco::PFJet> >*)arg[0]);
}

static void constructor_21886( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefProd<std::vector<reco::PFJet> >(*(const ::edm::ProductID*)arg[0],
      (const ::edm::EDProductGetter*)arg[1]);
  else ::new(mem) ::edm::RefProd<std::vector<reco::PFJet> >(*(const ::edm::ProductID*)arg[0],
      (const ::edm::EDProductGetter*)arg[1]);
}

static void destructor_21887(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::RefProd<std::vector<reco::PFJet> >*)o)->::edm::RefProd<std::vector<reco::PFJet> >::~RefProd)();
}
static  void operator_21888( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::RefProd<std::vector<reco::PFJet> >*)o)->operator*)();
  else   (((const ::edm::RefProd<std::vector<reco::PFJet> >*)o)->operator*)();
}

static  void operator_21889( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::RefProd<std::vector<reco::PFJet> >*)o)->operator->)());
  else   (((const ::edm::RefProd<std::vector<reco::PFJet> >*)o)->operator->)();
}

static  void method_21890( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::RefProd<std::vector<reco::PFJet> >*)o)->get)());
  else   (((const ::edm::RefProd<std::vector<reco::PFJet> >*)o)->get)();
}

static  void method_21891( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::RefProd<std::vector<reco::PFJet> >*)o)->product)());
  else   (((const ::edm::RefProd<std::vector<reco::PFJet> >*)o)->product)();
}

static  void method_21892( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::RefProd<std::vector<reco::PFJet> >*)o)->refCore)();
  else   (((const ::edm::RefProd<std::vector<reco::PFJet> >*)o)->refCore)();
}

static  void method_21893( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefProd<std::vector<reco::PFJet> >*)o)->isNull)());
  else   (((const ::edm::RefProd<std::vector<reco::PFJet> >*)o)->isNull)();
}

static  void method_21894( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefProd<std::vector<reco::PFJet> >*)o)->isNonnull)());
  else   (((const ::edm::RefProd<std::vector<reco::PFJet> >*)o)->isNonnull)();
}

static  void operator_21895( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefProd<std::vector<reco::PFJet> >*)o)->operator!)());
  else   (((const ::edm::RefProd<std::vector<reco::PFJet> >*)o)->operator!)();
}

static  void method_21896( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::ProductID)((((const ::edm::RefProd<std::vector<reco::PFJet> >*)o)->id)());
  else   (((const ::edm::RefProd<std::vector<reco::PFJet> >*)o)->id)();
}

static  void method_21897( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::RefProd<std::vector<reco::PFJet> >*)o)->productGetter)());
  else   (((const ::edm::RefProd<std::vector<reco::PFJet> >*)o)->productGetter)();
}

static  void method_21898( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefProd<std::vector<reco::PFJet> >*)o)->hasCache)());
  else   (((const ::edm::RefProd<std::vector<reco::PFJet> >*)o)->hasCache)();
}

static  void method_21899( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefProd<std::vector<reco::PFJet> >*)o)->hasProductCache)());
  else   (((const ::edm::RefProd<std::vector<reco::PFJet> >*)o)->hasProductCache)();
}

static  void method_21900( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefProd<std::vector<reco::PFJet> >*)o)->isAvailable)());
  else   (((const ::edm::RefProd<std::vector<reco::PFJet> >*)o)->isAvailable)();
}

static  void method_21901( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefProd<std::vector<reco::PFJet> >*)o)->isTransient)());
  else   (((const ::edm::RefProd<std::vector<reco::PFJet> >*)o)->isTransient)();
}

static  void method_21902( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::edm::RefProd<std::vector<reco::PFJet> >*)o)->swap)(*(::edm::RefProd<std::vector<reco::PFJet> >*)arg[0]);
}

static  void method_21903( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (short)((((::edm::RefProd<std::vector<reco::PFJet> >*)o)->Class_Version)());
  else   (((::edm::RefProd<std::vector<reco::PFJet> >*)o)->Class_Version)();
}

static void method_newdel_4705( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::RefProd<std::vector<reco::PFJet> > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::RefProd<std::vector<reco::PFJet> > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::RefProd<std::vector<reco::PFJet> > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::RefProd<std::vector<reco::PFJet> > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::RefProd<std::vector<reco::PFJet> > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class RefProd<std::vector<reco::PFJet, std::allocator<reco::PFJet> > > -------------------------------
void __edm__RefProd_std__vector_reco__PFJet_s__db_datamem(Reflex::Class*);
void __edm__RefProd_std__vector_reco__PFJet_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__RefProd_std__vector_reco__PFJet_s__datamem_bld(&__edm__RefProd_std__vector_reco__PFJet_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__RefProd_std__vector_reco__PFJet_s__funcmem_bld(&__edm__RefProd_std__vector_reco__PFJet_s__db_funcmem);
void __edm__RefProd_std__vector_reco__PFJet_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::RefProd<std::vector<reco::PFJet> >"), typeid(::edm::RefProd<std::vector<reco::PFJet> >), sizeof(::edm::RefProd<std::vector<reco::PFJet> >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("ClassVersion"), ::edm::RefProd<std::vector<reco::PFJet> >::Class_Version())
  .AddTypedef(type_2971, Reflex::Literal("edm::RefProd<std::vector<reco::PFJet> >::product_type"))
  .AddTypedef(type_2971, Reflex::Literal("edm::RefProd<std::vector<reco::PFJet> >::value_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_33953, type_33954), Reflex::Literal("operator="), operator_21879, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_33954), Reflex::Literal("RefProd"), constructor_21880, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("RefProd"), constructor_21881, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_33955), Reflex::Literal("RefProd"), constructor_21882, 0, "handle", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_33956), Reflex::Literal("RefProd"), constructor_21883, 0, "handle", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_33477), Reflex::Literal("RefProd"), constructor_21884, 0, "iProduct", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_33957), Reflex::Literal("RefProd"), constructor_21885, 0, "handle", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_18495, type_18571), Reflex::Literal("RefProd"), constructor_21886, 0, "productID;prodGetter", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~RefProd"), destructor_21887, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_4705, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__RefProd_std__vector_reco__PFJet_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__RefProd_std__vector_reco__PFJet_s__funcmem_bld);
}

//------Delayed data member builder for class RefProd<std::vector<reco::PFJet, std::allocator<reco::PFJet> > > -------------------
void __edm__RefProd_std__vector_reco__PFJet_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_4691, Reflex::Literal("product_"), OffsetOf(__shadow__::__edm__RefProd_std__vector_reco__PFJet_s_, product_), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class RefProd<std::vector<reco::PFJet, std::allocator<reco::PFJet> > > -------------------
void __edm__RefProd_std__vector_reco__PFJet_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_18708), Reflex::Literal("operator*"), operator_21888, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_33477), Reflex::Literal("operator->"), operator_21889, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_33477), Reflex::Literal("get"), method_21890, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_33477), Reflex::Literal("product"), method_21891, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_21597), Reflex::Literal("refCore"), method_21892, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("isNull"), method_21893, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("isNonnull"), method_21894, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("operator!"), operator_21895, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4689), Reflex::Literal("id"), method_21896, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_18571), Reflex::Literal("productGetter"), method_21897, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("hasCache"), method_21898, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("hasProductCache"), method_21899, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("isAvailable"), method_21900, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("isTransient"), method_21901, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_33953), Reflex::Literal("swap"), method_21902, 0, "other", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_231), Reflex::Literal("Class_Version"), method_21903, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC);
}
//------Stub functions for class RefProd<std::vector<reco::BasicJet, std::allocator<reco::BasicJet> > > -------------------------------
static  void operator_21937( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::RefProd<std::vector<reco::BasicJet> >*)o)->operator=)(*(const ::edm::RefProd<std::vector<reco::BasicJet> >*)arg[0]);
  else   (((::edm::RefProd<std::vector<reco::BasicJet> >*)o)->operator=)(*(const ::edm::RefProd<std::vector<reco::BasicJet> >*)arg[0]);
}

static void constructor_21938( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefProd<std::vector<reco::BasicJet> >(*(const ::edm::RefProd<std::vector<reco::BasicJet> >*)arg[0]);
  else ::new(mem) ::edm::RefProd<std::vector<reco::BasicJet> >(*(const ::edm::RefProd<std::vector<reco::BasicJet> >*)arg[0]);
}

static void constructor_21939( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefProd<std::vector<reco::BasicJet> >();
  else ::new(mem) ::edm::RefProd<std::vector<reco::BasicJet> >();
}

static void constructor_21940( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefProd<std::vector<reco::BasicJet> >(*(const ::edm::Handle<std::vector<reco::BasicJet> >*)arg[0]);
  else ::new(mem) ::edm::RefProd<std::vector<reco::BasicJet> >(*(const ::edm::Handle<std::vector<reco::BasicJet> >*)arg[0]);
}

static void constructor_21941( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefProd<std::vector<reco::BasicJet> >(*(const ::edm::OrphanHandle<std::vector<reco::BasicJet> >*)arg[0]);
  else ::new(mem) ::edm::RefProd<std::vector<reco::BasicJet> >(*(const ::edm::OrphanHandle<std::vector<reco::BasicJet> >*)arg[0]);
}

static void constructor_21942( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefProd<std::vector<reco::BasicJet> >((const ::std::vector<reco::BasicJet>*)arg[0]);
  else ::new(mem) ::edm::RefProd<std::vector<reco::BasicJet> >((const ::std::vector<reco::BasicJet>*)arg[0]);
}

static void constructor_21943( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefProd<std::vector<reco::BasicJet> >(*(const ::edm::TestHandle<std::vector<reco::BasicJet> >*)arg[0]);
  else ::new(mem) ::edm::RefProd<std::vector<reco::BasicJet> >(*(const ::edm::TestHandle<std::vector<reco::BasicJet> >*)arg[0]);
}

static void constructor_21944( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefProd<std::vector<reco::BasicJet> >(*(const ::edm::ProductID*)arg[0],
      (const ::edm::EDProductGetter*)arg[1]);
  else ::new(mem) ::edm::RefProd<std::vector<reco::BasicJet> >(*(const ::edm::ProductID*)arg[0],
      (const ::edm::EDProductGetter*)arg[1]);
}

static void destructor_21945(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::RefProd<std::vector<reco::BasicJet> >*)o)->::edm::RefProd<std::vector<reco::BasicJet> >::~RefProd)();
}
static  void operator_21946( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::RefProd<std::vector<reco::BasicJet> >*)o)->operator*)();
  else   (((const ::edm::RefProd<std::vector<reco::BasicJet> >*)o)->operator*)();
}

static  void operator_21947( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::RefProd<std::vector<reco::BasicJet> >*)o)->operator->)());
  else   (((const ::edm::RefProd<std::vector<reco::BasicJet> >*)o)->operator->)();
}

static  void method_21948( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::RefProd<std::vector<reco::BasicJet> >*)o)->get)());
  else   (((const ::edm::RefProd<std::vector<reco::BasicJet> >*)o)->get)();
}

static  void method_21949( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::RefProd<std::vector<reco::BasicJet> >*)o)->product)());
  else   (((const ::edm::RefProd<std::vector<reco::BasicJet> >*)o)->product)();
}

static  void method_21950( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::RefProd<std::vector<reco::BasicJet> >*)o)->refCore)();
  else   (((const ::edm::RefProd<std::vector<reco::BasicJet> >*)o)->refCore)();
}

static  void method_21951( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefProd<std::vector<reco::BasicJet> >*)o)->isNull)());
  else   (((const ::edm::RefProd<std::vector<reco::BasicJet> >*)o)->isNull)();
}

static  void method_21952( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefProd<std::vector<reco::BasicJet> >*)o)->isNonnull)());
  else   (((const ::edm::RefProd<std::vector<reco::BasicJet> >*)o)->isNonnull)();
}

static  void operator_21953( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefProd<std::vector<reco::BasicJet> >*)o)->operator!)());
  else   (((const ::edm::RefProd<std::vector<reco::BasicJet> >*)o)->operator!)();
}

static  void method_21954( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::ProductID)((((const ::edm::RefProd<std::vector<reco::BasicJet> >*)o)->id)());
  else   (((const ::edm::RefProd<std::vector<reco::BasicJet> >*)o)->id)();
}

static  void method_21955( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::RefProd<std::vector<reco::BasicJet> >*)o)->productGetter)());
  else   (((const ::edm::RefProd<std::vector<reco::BasicJet> >*)o)->productGetter)();
}

static  void method_21956( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefProd<std::vector<reco::BasicJet> >*)o)->hasCache)());
  else   (((const ::edm::RefProd<std::vector<reco::BasicJet> >*)o)->hasCache)();
}

static  void method_21957( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefProd<std::vector<reco::BasicJet> >*)o)->hasProductCache)());
  else   (((const ::edm::RefProd<std::vector<reco::BasicJet> >*)o)->hasProductCache)();
}

static  void method_21958( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefProd<std::vector<reco::BasicJet> >*)o)->isAvailable)());
  else   (((const ::edm::RefProd<std::vector<reco::BasicJet> >*)o)->isAvailable)();
}

static  void method_21959( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefProd<std::vector<reco::BasicJet> >*)o)->isTransient)());
  else   (((const ::edm::RefProd<std::vector<reco::BasicJet> >*)o)->isTransient)();
}

static  void method_21960( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::edm::RefProd<std::vector<reco::BasicJet> >*)o)->swap)(*(::edm::RefProd<std::vector<reco::BasicJet> >*)arg[0]);
}

static  void method_21961( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (short)((((::edm::RefProd<std::vector<reco::BasicJet> >*)o)->Class_Version)());
  else   (((::edm::RefProd<std::vector<reco::BasicJet> >*)o)->Class_Version)();
}

static void method_newdel_4707( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::RefProd<std::vector<reco::BasicJet> > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::RefProd<std::vector<reco::BasicJet> > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::RefProd<std::vector<reco::BasicJet> > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::RefProd<std::vector<reco::BasicJet> > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::RefProd<std::vector<reco::BasicJet> > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class RefProd<std::vector<reco::BasicJet, std::allocator<reco::BasicJet> > > -------------------------------
void __edm__RefProd_std__vector_reco__BasicJet_s__db_datamem(Reflex::Class*);
void __edm__RefProd_std__vector_reco__BasicJet_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__RefProd_std__vector_reco__BasicJet_s__datamem_bld(&__edm__RefProd_std__vector_reco__BasicJet_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__RefProd_std__vector_reco__BasicJet_s__funcmem_bld(&__edm__RefProd_std__vector_reco__BasicJet_s__db_funcmem);
void __edm__RefProd_std__vector_reco__BasicJet_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::RefProd<std::vector<reco::BasicJet> >"), typeid(::edm::RefProd<std::vector<reco::BasicJet> >), sizeof(::edm::RefProd<std::vector<reco::BasicJet> >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("ClassVersion"), ::edm::RefProd<std::vector<reco::BasicJet> >::Class_Version())
  .AddTypedef(type_2983, Reflex::Literal("edm::RefProd<std::vector<reco::BasicJet> >::product_type"))
  .AddTypedef(type_2983, Reflex::Literal("edm::RefProd<std::vector<reco::BasicJet> >::value_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_33963, type_33964), Reflex::Literal("operator="), operator_21937, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_33964), Reflex::Literal("RefProd"), constructor_21938, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("RefProd"), constructor_21939, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_33965), Reflex::Literal("RefProd"), constructor_21940, 0, "handle", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_33966), Reflex::Literal("RefProd"), constructor_21941, 0, "handle", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_33486), Reflex::Literal("RefProd"), constructor_21942, 0, "iProduct", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_33967), Reflex::Literal("RefProd"), constructor_21943, 0, "handle", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_18495, type_18571), Reflex::Literal("RefProd"), constructor_21944, 0, "productID;prodGetter", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~RefProd"), destructor_21945, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_4707, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__RefProd_std__vector_reco__BasicJet_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__RefProd_std__vector_reco__BasicJet_s__funcmem_bld);
}

//------Delayed data member builder for class RefProd<std::vector<reco::BasicJet, std::allocator<reco::BasicJet> > > -------------------
void __edm__RefProd_std__vector_reco__BasicJet_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_4691, Reflex::Literal("product_"), OffsetOf(__shadow__::__edm__RefProd_std__vector_reco__BasicJet_s_, product_), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class RefProd<std::vector<reco::BasicJet, std::allocator<reco::BasicJet> > > -------------------
void __edm__RefProd_std__vector_reco__BasicJet_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_18732), Reflex::Literal("operator*"), operator_21946, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_33486), Reflex::Literal("operator->"), operator_21947, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_33486), Reflex::Literal("get"), method_21948, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_33486), Reflex::Literal("product"), method_21949, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_21597), Reflex::Literal("refCore"), method_21950, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("isNull"), method_21951, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("isNonnull"), method_21952, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("operator!"), operator_21953, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4689), Reflex::Literal("id"), method_21954, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_18571), Reflex::Literal("productGetter"), method_21955, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("hasCache"), method_21956, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("hasProductCache"), method_21957, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("isAvailable"), method_21958, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("isTransient"), method_21959, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_33963), Reflex::Literal("swap"), method_21960, 0, "other", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_231), Reflex::Literal("Class_Version"), method_21961, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC);
}
//------Stub functions for class RefProd<std::vector<reco::GenJet, std::allocator<reco::GenJet> > > -------------------------------
static  void operator_21966( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::RefProd<std::vector<reco::GenJet> >*)o)->operator=)(*(const ::edm::RefProd<std::vector<reco::GenJet> >*)arg[0]);
  else   (((::edm::RefProd<std::vector<reco::GenJet> >*)o)->operator=)(*(const ::edm::RefProd<std::vector<reco::GenJet> >*)arg[0]);
}

static void constructor_21967( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefProd<std::vector<reco::GenJet> >(*(const ::edm::RefProd<std::vector<reco::GenJet> >*)arg[0]);
  else ::new(mem) ::edm::RefProd<std::vector<reco::GenJet> >(*(const ::edm::RefProd<std::vector<reco::GenJet> >*)arg[0]);
}

static void constructor_21968( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefProd<std::vector<reco::GenJet> >();
  else ::new(mem) ::edm::RefProd<std::vector<reco::GenJet> >();
}

static void constructor_21969( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefProd<std::vector<reco::GenJet> >(*(const ::edm::Handle<std::vector<reco::GenJet> >*)arg[0]);
  else ::new(mem) ::edm::RefProd<std::vector<reco::GenJet> >(*(const ::edm::Handle<std::vector<reco::GenJet> >*)arg[0]);
}

static void constructor_21970( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefProd<std::vector<reco::GenJet> >(*(const ::edm::OrphanHandle<std::vector<reco::GenJet> >*)arg[0]);
  else ::new(mem) ::edm::RefProd<std::vector<reco::GenJet> >(*(const ::edm::OrphanHandle<std::vector<reco::GenJet> >*)arg[0]);
}

static void constructor_21971( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefProd<std::vector<reco::GenJet> >((const ::std::vector<reco::GenJet>*)arg[0]);
  else ::new(mem) ::edm::RefProd<std::vector<reco::GenJet> >((const ::std::vector<reco::GenJet>*)arg[0]);
}

static void constructor_21972( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefProd<std::vector<reco::GenJet> >(*(const ::edm::TestHandle<std::vector<reco::GenJet> >*)arg[0]);
  else ::new(mem) ::edm::RefProd<std::vector<reco::GenJet> >(*(const ::edm::TestHandle<std::vector<reco::GenJet> >*)arg[0]);
}

static void constructor_21973( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefProd<std::vector<reco::GenJet> >(*(const ::edm::ProductID*)arg[0],
      (const ::edm::EDProductGetter*)arg[1]);
  else ::new(mem) ::edm::RefProd<std::vector<reco::GenJet> >(*(const ::edm::ProductID*)arg[0],
      (const ::edm::EDProductGetter*)arg[1]);
}

static void destructor_21974(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::RefProd<std::vector<reco::GenJet> >*)o)->::edm::RefProd<std::vector<reco::GenJet> >::~RefProd)();
}
static  void operator_21975( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::RefProd<std::vector<reco::GenJet> >*)o)->operator*)();
  else   (((const ::edm::RefProd<std::vector<reco::GenJet> >*)o)->operator*)();
}

static  void operator_21976( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::RefProd<std::vector<reco::GenJet> >*)o)->operator->)());
  else   (((const ::edm::RefProd<std::vector<reco::GenJet> >*)o)->operator->)();
}

static  void method_21977( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::RefProd<std::vector<reco::GenJet> >*)o)->get)());
  else   (((const ::edm::RefProd<std::vector<reco::GenJet> >*)o)->get)();
}

static  void method_21978( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::RefProd<std::vector<reco::GenJet> >*)o)->product)());
  else   (((const ::edm::RefProd<std::vector<reco::GenJet> >*)o)->product)();
}

static  void method_21979( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::RefProd<std::vector<reco::GenJet> >*)o)->refCore)();
  else   (((const ::edm::RefProd<std::vector<reco::GenJet> >*)o)->refCore)();
}

static  void method_21980( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefProd<std::vector<reco::GenJet> >*)o)->isNull)());
  else   (((const ::edm::RefProd<std::vector<reco::GenJet> >*)o)->isNull)();
}

static  void method_21981( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefProd<std::vector<reco::GenJet> >*)o)->isNonnull)());
  else   (((const ::edm::RefProd<std::vector<reco::GenJet> >*)o)->isNonnull)();
}

static  void operator_21982( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefProd<std::vector<reco::GenJet> >*)o)->operator!)());
  else   (((const ::edm::RefProd<std::vector<reco::GenJet> >*)o)->operator!)();
}

static  void method_21983( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::ProductID)((((const ::edm::RefProd<std::vector<reco::GenJet> >*)o)->id)());
  else   (((const ::edm::RefProd<std::vector<reco::GenJet> >*)o)->id)();
}

static  void method_21984( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::RefProd<std::vector<reco::GenJet> >*)o)->productGetter)());
  else   (((const ::edm::RefProd<std::vector<reco::GenJet> >*)o)->productGetter)();
}

static  void method_21985( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefProd<std::vector<reco::GenJet> >*)o)->hasCache)());
  else   (((const ::edm::RefProd<std::vector<reco::GenJet> >*)o)->hasCache)();
}

static  void method_21986( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefProd<std::vector<reco::GenJet> >*)o)->hasProductCache)());
  else   (((const ::edm::RefProd<std::vector<reco::GenJet> >*)o)->hasProductCache)();
}

static  void method_21987( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefProd<std::vector<reco::GenJet> >*)o)->isAvailable)());
  else   (((const ::edm::RefProd<std::vector<reco::GenJet> >*)o)->isAvailable)();
}

static  void method_21988( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefProd<std::vector<reco::GenJet> >*)o)->isTransient)());
  else   (((const ::edm::RefProd<std::vector<reco::GenJet> >*)o)->isTransient)();
}

static  void method_21989( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::edm::RefProd<std::vector<reco::GenJet> >*)o)->swap)(*(::edm::RefProd<std::vector<reco::GenJet> >*)arg[0]);
}

static  void method_21990( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (short)((((::edm::RefProd<std::vector<reco::GenJet> >*)o)->Class_Version)());
  else   (((::edm::RefProd<std::vector<reco::GenJet> >*)o)->Class_Version)();
}

static void method_newdel_4708( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::RefProd<std::vector<reco::GenJet> > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::RefProd<std::vector<reco::GenJet> > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::RefProd<std::vector<reco::GenJet> > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::RefProd<std::vector<reco::GenJet> > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::RefProd<std::vector<reco::GenJet> > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class RefProd<std::vector<reco::GenJet, std::allocator<reco::GenJet> > > -------------------------------
void __edm__RefProd_std__vector_reco__GenJet_s__db_datamem(Reflex::Class*);
void __edm__RefProd_std__vector_reco__GenJet_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__RefProd_std__vector_reco__GenJet_s__datamem_bld(&__edm__RefProd_std__vector_reco__GenJet_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__RefProd_std__vector_reco__GenJet_s__funcmem_bld(&__edm__RefProd_std__vector_reco__GenJet_s__db_funcmem);
void __edm__RefProd_std__vector_reco__GenJet_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::RefProd<std::vector<reco::GenJet> >"), typeid(::edm::RefProd<std::vector<reco::GenJet> >), sizeof(::edm::RefProd<std::vector<reco::GenJet> >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("ClassVersion"), ::edm::RefProd<std::vector<reco::GenJet> >::Class_Version())
  .AddTypedef(type_2988, Reflex::Literal("edm::RefProd<std::vector<reco::GenJet> >::product_type"))
  .AddTypedef(type_2988, Reflex::Literal("edm::RefProd<std::vector<reco::GenJet> >::value_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_33968, type_33969), Reflex::Literal("operator="), operator_21966, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_33969), Reflex::Literal("RefProd"), constructor_21967, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("RefProd"), constructor_21968, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_33970), Reflex::Literal("RefProd"), constructor_21969, 0, "handle", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_33971), Reflex::Literal("RefProd"), constructor_21970, 0, "handle", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_33491), Reflex::Literal("RefProd"), constructor_21971, 0, "iProduct", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_33972), Reflex::Literal("RefProd"), constructor_21972, 0, "handle", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_18495, type_18571), Reflex::Literal("RefProd"), constructor_21973, 0, "productID;prodGetter", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~RefProd"), destructor_21974, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_4708, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__RefProd_std__vector_reco__GenJet_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__RefProd_std__vector_reco__GenJet_s__funcmem_bld);
}

//------Delayed data member builder for class RefProd<std::vector<reco::GenJet, std::allocator<reco::GenJet> > > -------------------
void __edm__RefProd_std__vector_reco__GenJet_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_4691, Reflex::Literal("product_"), OffsetOf(__shadow__::__edm__RefProd_std__vector_reco__GenJet_s_, product_), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class RefProd<std::vector<reco::GenJet, std::allocator<reco::GenJet> > > -------------------
void __edm__RefProd_std__vector_reco__GenJet_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_18744), Reflex::Literal("operator*"), operator_21975, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_33491), Reflex::Literal("operator->"), operator_21976, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_33491), Reflex::Literal("get"), method_21977, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_33491), Reflex::Literal("product"), method_21978, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_21597), Reflex::Literal("refCore"), method_21979, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("isNull"), method_21980, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("isNonnull"), method_21981, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("operator!"), operator_21982, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4689), Reflex::Literal("id"), method_21983, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_18571), Reflex::Literal("productGetter"), method_21984, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("hasCache"), method_21985, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("hasProductCache"), method_21986, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("isAvailable"), method_21987, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("isTransient"), method_21988, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_33968), Reflex::Literal("swap"), method_21989, 0, "other", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_231), Reflex::Literal("Class_Version"), method_21990, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC);
}
//------Stub functions for class RefProd<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> > > -------------------------------
static  void operator_21995( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::RefProd<std::vector<reco::CaloJet> >*)o)->operator=)(*(const ::edm::RefProd<std::vector<reco::CaloJet> >*)arg[0]);
  else   (((::edm::RefProd<std::vector<reco::CaloJet> >*)o)->operator=)(*(const ::edm::RefProd<std::vector<reco::CaloJet> >*)arg[0]);
}

static void constructor_21996( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefProd<std::vector<reco::CaloJet> >(*(const ::edm::RefProd<std::vector<reco::CaloJet> >*)arg[0]);
  else ::new(mem) ::edm::RefProd<std::vector<reco::CaloJet> >(*(const ::edm::RefProd<std::vector<reco::CaloJet> >*)arg[0]);
}

static void constructor_21997( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefProd<std::vector<reco::CaloJet> >();
  else ::new(mem) ::edm::RefProd<std::vector<reco::CaloJet> >();
}

static void constructor_21998( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefProd<std::vector<reco::CaloJet> >(*(const ::edm::Handle<std::vector<reco::CaloJet> >*)arg[0]);
  else ::new(mem) ::edm::RefProd<std::vector<reco::CaloJet> >(*(const ::edm::Handle<std::vector<reco::CaloJet> >*)arg[0]);
}

static void constructor_21999( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefProd<std::vector<reco::CaloJet> >(*(const ::edm::OrphanHandle<std::vector<reco::CaloJet> >*)arg[0]);
  else ::new(mem) ::edm::RefProd<std::vector<reco::CaloJet> >(*(const ::edm::OrphanHandle<std::vector<reco::CaloJet> >*)arg[0]);
}

static void constructor_22000( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefProd<std::vector<reco::CaloJet> >((const ::std::vector<reco::CaloJet>*)arg[0]);
  else ::new(mem) ::edm::RefProd<std::vector<reco::CaloJet> >((const ::std::vector<reco::CaloJet>*)arg[0]);
}

static void constructor_22001( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefProd<std::vector<reco::CaloJet> >(*(const ::edm::TestHandle<std::vector<reco::CaloJet> >*)arg[0]);
  else ::new(mem) ::edm::RefProd<std::vector<reco::CaloJet> >(*(const ::edm::TestHandle<std::vector<reco::CaloJet> >*)arg[0]);
}

static void constructor_22002( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefProd<std::vector<reco::CaloJet> >(*(const ::edm::ProductID*)arg[0],
      (const ::edm::EDProductGetter*)arg[1]);
  else ::new(mem) ::edm::RefProd<std::vector<reco::CaloJet> >(*(const ::edm::ProductID*)arg[0],
      (const ::edm::EDProductGetter*)arg[1]);
}

static void destructor_22003(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::RefProd<std::vector<reco::CaloJet> >*)o)->::edm::RefProd<std::vector<reco::CaloJet> >::~RefProd)();
}
static  void operator_22004( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::RefProd<std::vector<reco::CaloJet> >*)o)->operator*)();
  else   (((const ::edm::RefProd<std::vector<reco::CaloJet> >*)o)->operator*)();
}

static  void operator_22005( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::RefProd<std::vector<reco::CaloJet> >*)o)->operator->)());
  else   (((const ::edm::RefProd<std::vector<reco::CaloJet> >*)o)->operator->)();
}

static  void method_22006( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::RefProd<std::vector<reco::CaloJet> >*)o)->get)());
  else   (((const ::edm::RefProd<std::vector<reco::CaloJet> >*)o)->get)();
}

static  void method_22007( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::RefProd<std::vector<reco::CaloJet> >*)o)->product)());
  else   (((const ::edm::RefProd<std::vector<reco::CaloJet> >*)o)->product)();
}

static  void method_22008( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::RefProd<std::vector<reco::CaloJet> >*)o)->refCore)();
  else   (((const ::edm::RefProd<std::vector<reco::CaloJet> >*)o)->refCore)();
}

static  void method_22009( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefProd<std::vector<reco::CaloJet> >*)o)->isNull)());
  else   (((const ::edm::RefProd<std::vector<reco::CaloJet> >*)o)->isNull)();
}

static  void method_22010( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefProd<std::vector<reco::CaloJet> >*)o)->isNonnull)());
  else   (((const ::edm::RefProd<std::vector<reco::CaloJet> >*)o)->isNonnull)();
}

static  void operator_22011( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefProd<std::vector<reco::CaloJet> >*)o)->operator!)());
  else   (((const ::edm::RefProd<std::vector<reco::CaloJet> >*)o)->operator!)();
}

static  void method_22012( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::ProductID)((((const ::edm::RefProd<std::vector<reco::CaloJet> >*)o)->id)());
  else   (((const ::edm::RefProd<std::vector<reco::CaloJet> >*)o)->id)();
}

static  void method_22013( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::RefProd<std::vector<reco::CaloJet> >*)o)->productGetter)());
  else   (((const ::edm::RefProd<std::vector<reco::CaloJet> >*)o)->productGetter)();
}

static  void method_22014( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefProd<std::vector<reco::CaloJet> >*)o)->hasCache)());
  else   (((const ::edm::RefProd<std::vector<reco::CaloJet> >*)o)->hasCache)();
}

static  void method_22015( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefProd<std::vector<reco::CaloJet> >*)o)->hasProductCache)());
  else   (((const ::edm::RefProd<std::vector<reco::CaloJet> >*)o)->hasProductCache)();
}

static  void method_22016( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefProd<std::vector<reco::CaloJet> >*)o)->isAvailable)());
  else   (((const ::edm::RefProd<std::vector<reco::CaloJet> >*)o)->isAvailable)();
}

static  void method_22017( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefProd<std::vector<reco::CaloJet> >*)o)->isTransient)());
  else   (((const ::edm::RefProd<std::vector<reco::CaloJet> >*)o)->isTransient)();
}

static  void method_22018( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::edm::RefProd<std::vector<reco::CaloJet> >*)o)->swap)(*(::edm::RefProd<std::vector<reco::CaloJet> >*)arg[0]);
}

static  void method_22019( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (short)((((::edm::RefProd<std::vector<reco::CaloJet> >*)o)->Class_Version)());
  else   (((::edm::RefProd<std::vector<reco::CaloJet> >*)o)->Class_Version)();
}

static void method_newdel_4709( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::RefProd<std::vector<reco::CaloJet> > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::RefProd<std::vector<reco::CaloJet> > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::RefProd<std::vector<reco::CaloJet> > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::RefProd<std::vector<reco::CaloJet> > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::RefProd<std::vector<reco::CaloJet> > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class RefProd<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> > > -------------------------------
void __edm__RefProd_std__vector_reco__CaloJet_s__db_datamem(Reflex::Class*);
void __edm__RefProd_std__vector_reco__CaloJet_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__RefProd_std__vector_reco__CaloJet_s__datamem_bld(&__edm__RefProd_std__vector_reco__CaloJet_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__RefProd_std__vector_reco__CaloJet_s__funcmem_bld(&__edm__RefProd_std__vector_reco__CaloJet_s__db_funcmem);
void __edm__RefProd_std__vector_reco__CaloJet_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::RefProd<std::vector<reco::CaloJet> >"), typeid(::edm::RefProd<std::vector<reco::CaloJet> >), sizeof(::edm::RefProd<std::vector<reco::CaloJet> >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("ClassVersion"), ::edm::RefProd<std::vector<reco::CaloJet> >::Class_Version())
  .AddTypedef(type_2991, Reflex::Literal("edm::RefProd<std::vector<reco::CaloJet> >::product_type"))
  .AddTypedef(type_2991, Reflex::Literal("edm::RefProd<std::vector<reco::CaloJet> >::value_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_33973, type_33974), Reflex::Literal("operator="), operator_21995, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_33974), Reflex::Literal("RefProd"), constructor_21996, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("RefProd"), constructor_21997, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_33975), Reflex::Literal("RefProd"), constructor_21998, 0, "handle", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_33976), Reflex::Literal("RefProd"), constructor_21999, 0, "handle", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_33494), Reflex::Literal("RefProd"), constructor_22000, 0, "iProduct", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_33977), Reflex::Literal("RefProd"), constructor_22001, 0, "handle", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_18495, type_18571), Reflex::Literal("RefProd"), constructor_22002, 0, "productID;prodGetter", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~RefProd"), destructor_22003, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_4709, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__RefProd_std__vector_reco__CaloJet_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__RefProd_std__vector_reco__CaloJet_s__funcmem_bld);
}

//------Delayed data member builder for class RefProd<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> > > -------------------
void __edm__RefProd_std__vector_reco__CaloJet_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_4691, Reflex::Literal("product_"), OffsetOf(__shadow__::__edm__RefProd_std__vector_reco__CaloJet_s_, product_), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class RefProd<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> > > -------------------
void __edm__RefProd_std__vector_reco__CaloJet_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_18756), Reflex::Literal("operator*"), operator_22004, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_33494), Reflex::Literal("operator->"), operator_22005, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_33494), Reflex::Literal("get"), method_22006, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_33494), Reflex::Literal("product"), method_22007, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_21597), Reflex::Literal("refCore"), method_22008, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("isNull"), method_22009, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("isNonnull"), method_22010, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("operator!"), operator_22011, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4689), Reflex::Literal("id"), method_22012, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_18571), Reflex::Literal("productGetter"), method_22013, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("hasCache"), method_22014, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("hasProductCache"), method_22015, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("isAvailable"), method_22016, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("isTransient"), method_22017, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_33973), Reflex::Literal("swap"), method_22018, 0, "other", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_231), Reflex::Literal("Class_Version"), method_22019, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC);
}
//------Stub functions for class Ref<std::vector<reco::JPTJet, std::allocator<reco::JPTJet> >,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet, std::allocator<reco::JPTJet> >, reco::JPTJet> > -------------------------------
static  void operator_22311( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >*)o)->operator=)(*(const ::edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >*)arg[0]);
  else   (((::edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >*)o)->operator=)(*(const ::edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >*)arg[0]);
}

static void constructor_22312( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >(*(const ::edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >*)arg[0]);
  else ::new(mem) ::edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >(*(const ::edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >*)arg[0]);
}

static void constructor_22313( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >();
  else ::new(mem) ::edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >();
}

static void constructor_22314( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if ( arg.size() == 2 ) {
    if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >(*(const ::edm::Handle<std::vector<reco::JPTJet> >*)arg[0],
      *(unsigned int*)arg[1]);
  else ::new(mem) ::edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >(*(const ::edm::Handle<std::vector<reco::JPTJet> >*)arg[0],
      *(unsigned int*)arg[1]);
  }
  else if ( arg.size() == 3 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >(*(const ::edm::Handle<std::vector<reco::JPTJet> >*)arg[0],
      *(unsigned int*)arg[1],
      *(bool*)arg[2]);
  else ::new(mem) ::edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >(*(const ::edm::Handle<std::vector<reco::JPTJet> >*)arg[0],
      *(unsigned int*)arg[1],
      *(bool*)arg[2]);
  }
}

static void constructor_22315( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if ( arg.size() == 2 ) {
    if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >(*(const ::edm::OrphanHandle<std::vector<reco::JPTJet> >*)arg[0],
      *(unsigned int*)arg[1]);
  else ::new(mem) ::edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >(*(const ::edm::OrphanHandle<std::vector<reco::JPTJet> >*)arg[0],
      *(unsigned int*)arg[1]);
  }
  else if ( arg.size() == 3 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >(*(const ::edm::OrphanHandle<std::vector<reco::JPTJet> >*)arg[0],
      *(unsigned int*)arg[1],
      *(bool*)arg[2]);
  else ::new(mem) ::edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >(*(const ::edm::OrphanHandle<std::vector<reco::JPTJet> >*)arg[0],
      *(unsigned int*)arg[1],
      *(bool*)arg[2]);
  }
}

static void constructor_22316( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if ( arg.size() == 2 ) {
    if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >(*(const ::edm::RefVector<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >*)arg[0],
      *(unsigned int*)arg[1]);
  else ::new(mem) ::edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >(*(const ::edm::RefVector<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >*)arg[0],
      *(unsigned int*)arg[1]);
  }
  else if ( arg.size() == 3 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >(*(const ::edm::RefVector<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >*)arg[0],
      *(unsigned int*)arg[1],
      *(bool*)arg[2]);
  else ::new(mem) ::edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >(*(const ::edm::RefVector<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >*)arg[0],
      *(unsigned int*)arg[1],
      *(bool*)arg[2]);
  }
}

static void constructor_22317( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if ( arg.size() == 2 ) {
    if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >((const ::std::vector<reco::JPTJet>*)arg[0],
      *(unsigned int*)arg[1]);
  else ::new(mem) ::edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >((const ::std::vector<reco::JPTJet>*)arg[0],
      *(unsigned int*)arg[1]);
  }
  else if ( arg.size() == 3 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >((const ::std::vector<reco::JPTJet>*)arg[0],
      *(unsigned int*)arg[1],
      *(bool*)arg[2]);
  else ::new(mem) ::edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >((const ::std::vector<reco::JPTJet>*)arg[0],
      *(unsigned int*)arg[1],
      *(bool*)arg[2]);
  }
}

static void constructor_22318( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if ( arg.size() == 2 ) {
    if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >(*(const ::edm::TestHandle<std::vector<reco::JPTJet> >*)arg[0],
      *(unsigned int*)arg[1]);
  else ::new(mem) ::edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >(*(const ::edm::TestHandle<std::vector<reco::JPTJet> >*)arg[0],
      *(unsigned int*)arg[1]);
  }
  else if ( arg.size() == 3 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >(*(const ::edm::TestHandle<std::vector<reco::JPTJet> >*)arg[0],
      *(unsigned int*)arg[1],
      *(bool*)arg[2]);
  else ::new(mem) ::edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >(*(const ::edm::TestHandle<std::vector<reco::JPTJet> >*)arg[0],
      *(unsigned int*)arg[1],
      *(bool*)arg[2]);
  }
}

static void constructor_22319( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >(*(const ::edm::ProductID*)arg[0],
      *(unsigned int*)arg[1],
      (const ::edm::EDProductGetter*)arg[2]);
  else ::new(mem) ::edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >(*(const ::edm::ProductID*)arg[0],
      *(unsigned int*)arg[1],
      (const ::edm::EDProductGetter*)arg[2]);
}

static void constructor_22320( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >(*(const ::edm::ProductID*)arg[0],
      (const ::reco::JPTJet*)arg[1],
      *(unsigned int*)arg[2],
      (const ::std::vector<reco::JPTJet>*)arg[3]);
  else ::new(mem) ::edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >(*(const ::edm::ProductID*)arg[0],
      (const ::reco::JPTJet*)arg[1],
      *(unsigned int*)arg[2],
      (const ::std::vector<reco::JPTJet>*)arg[3]);
}

static void constructor_22321( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >(*(const ::edm::ProductID*)arg[0]);
  else ::new(mem) ::edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >(*(const ::edm::ProductID*)arg[0]);
}

static void constructor_22322( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >(*(const ::edm::RefProd<std::vector<reco::JPTJet> >*)arg[0],
      *(unsigned int*)arg[1]);
  else ::new(mem) ::edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >(*(const ::edm::RefProd<std::vector<reco::JPTJet> >*)arg[0],
      *(unsigned int*)arg[1]);
}

static void destructor_22323(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >*)o)->::edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >::~Ref)();
}
static  void operator_22324( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >*)o)->operator*)();
  else   (((const ::edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >*)o)->operator*)();
}

static  void operator_22325( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >*)o)->operator->)());
  else   (((const ::edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >*)o)->operator->)();
}

static  void method_22326( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >*)o)->get)());
  else   (((const ::edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >*)o)->get)();
}

static  void method_22327( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >*)o)->isNull)());
  else   (((const ::edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >*)o)->isNull)();
}

static  void method_22328( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >*)o)->isNonnull)());
  else   (((const ::edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >*)o)->isNonnull)();
}

static  void operator_22329( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >*)o)->operator!)());
  else   (((const ::edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >*)o)->operator!)();
}

static  void method_22330( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::ProductID)((((const ::edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >*)o)->id)());
  else   (((const ::edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >*)o)->id)();
}

static  void method_22331( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >*)o)->productGetter)());
  else   (((const ::edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >*)o)->productGetter)();
}

static  void method_22332( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >*)o)->product)());
  else   (((const ::edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >*)o)->product)();
}

static  void method_22333( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (unsigned int)((((const ::edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >*)o)->key)());
  else   (((const ::edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >*)o)->key)();
}

static  void method_22334( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (unsigned int)((((const ::edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >*)o)->index)());
  else   (((const ::edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >*)o)->index)();
}

static  void method_22335( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >*)o)->hasProductCache)());
  else   (((const ::edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >*)o)->hasProductCache)();
}

static  void method_22336( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >*)o)->isAvailable)());
  else   (((const ::edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >*)o)->isAvailable)();
}

static  void method_22337( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >*)o)->isTransient)());
  else   (((const ::edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >*)o)->isTransient)();
}

static  void method_22338( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >*)o)->refCore)();
  else   (((const ::edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >*)o)->refCore)();
}

static  void method_22339( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (short)((((::edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >*)o)->Class_Version)());
  else   (((::edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >*)o)->Class_Version)();
}

static void constructor_22340( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >(*(const ::edm::RefCore*)arg[0],
      *(const unsigned int*)arg[1]);
  else ::new(mem) ::edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >(*(const ::edm::RefCore*)arg[0],
      *(const unsigned int*)arg[1]);
}

static void method_newdel_4738( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class Ref<std::vector<reco::JPTJet, std::allocator<reco::JPTJet> >,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet, std::allocator<reco::JPTJet> >, reco::JPTJet> > -------------------------------
void __edm__Ref_std__vector_reco__JPTJet__reco__JPTJet_edm__refhelper__FindUsingAdvance_std__vector_reco__JPTJet__reco__JPTJet_s__db_datamem(Reflex::Class*);
void __edm__Ref_std__vector_reco__JPTJet__reco__JPTJet_edm__refhelper__FindUsingAdvance_std__vector_reco__JPTJet__reco__JPTJet_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__Ref_std__vector_reco__JPTJet__reco__JPTJet_edm__refhelper__FindUsingAdvance_std__vector_reco__JPTJet__reco__JPTJet_s__datamem_bld(&__edm__Ref_std__vector_reco__JPTJet__reco__JPTJet_edm__refhelper__FindUsingAdvance_std__vector_reco__JPTJet__reco__JPTJet_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__Ref_std__vector_reco__JPTJet__reco__JPTJet_edm__refhelper__FindUsingAdvance_std__vector_reco__JPTJet__reco__JPTJet_s__funcmem_bld(&__edm__Ref_std__vector_reco__JPTJet__reco__JPTJet_edm__refhelper__FindUsingAdvance_std__vector_reco__JPTJet__reco__JPTJet_s__db_funcmem);
void __edm__Ref_std__vector_reco__JPTJet__reco__JPTJet_edm__refhelper__FindUsingAdvance_std__vector_reco__JPTJet__reco__JPTJet_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >"), typeid(::edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >), sizeof(::edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("ClassVersion"), ::edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >::Class_Version())
  .AddTypedef(type_7528, Reflex::Literal("edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >::T"))
  .AddTypedef(type_18691, Reflex::Literal("edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >::F"))
  .AddTypedef(type_20164, Reflex::Literal("edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >::VF"))
  .AddTypedef(type_20163, Reflex::Literal("edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >::VBF"))
  .AddTypedef(type_2968, Reflex::Literal("edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >::product_type"))
  .AddTypedef(type_7528, Reflex::Literal("edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >::value_type"))
  .AddTypedef(type_7528c, Reflex::Literal("edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >::element_type"))
  .AddTypedef(type_18691, Reflex::Literal("edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >::finder_type"))
  .AddTypedef(type_356, Reflex::Literal("edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >::argument_type"))
  .AddTypedef(type_356, Reflex::Literal("edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >::key_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_34012, type_33204), Reflex::Literal("operator="), operator_22311, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_33204), Reflex::Literal("Ref"), constructor_22312, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("Ref"), constructor_22313, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_33950, type_356, type_1574), Reflex::Literal("Ref"), constructor_22314, 0, "handle;itemKey;setNow=true", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_33951, type_356, type_1574), Reflex::Literal("Ref"), constructor_22315, 0, "handle;itemKey;setNow=true", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_33473, type_356, type_1574), Reflex::Literal("Ref"), constructor_22316, 0, "refvector;itemKey;setNow=true", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_33474, type_356, type_1574), Reflex::Literal("Ref"), constructor_22317, 0, "iProduct;iItemKey;iSetNow=true", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_33952, type_356, type_1574), Reflex::Literal("Ref"), constructor_22318, 0, "handle;itemKey;setNow=true", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_18495, type_356, type_18571), Reflex::Literal("Ref"), constructor_22319, 0, "productID;itemKey;prodGetter", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_18495, type_12758, type_356, type_33474), Reflex::Literal("Ref"), constructor_22320, 0, "iProductID;;iItemKey;iProduct", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_18495), Reflex::Literal("Ref"), constructor_22321, 0, "iId", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_33949, type_356), Reflex::Literal("Ref"), constructor_22322, 0, "refProd;itemKey", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~Ref"), destructor_22323, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_21597, type_9929), Reflex::Literal("Ref"), constructor_22340, 0, "iRefCore;iKey", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_4738, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__Ref_std__vector_reco__JPTJet__reco__JPTJet_edm__refhelper__FindUsingAdvance_std__vector_reco__JPTJet__reco__JPTJet_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__Ref_std__vector_reco__JPTJet__reco__JPTJet_edm__refhelper__FindUsingAdvance_std__vector_reco__JPTJet__reco__JPTJet_s__funcmem_bld);
}

//------Delayed data member builder for class Ref<std::vector<reco::JPTJet, std::allocator<reco::JPTJet> >,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet, std::allocator<reco::JPTJet> >, reco::JPTJet> > -------------------
void __edm__Ref_std__vector_reco__JPTJet__reco__JPTJet_edm__refhelper__FindUsingAdvance_std__vector_reco__JPTJet__reco__JPTJet_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_4462, Reflex::Literal("product_"), OffsetOf(__shadow__::__edm__Ref_std__vector_reco__JPTJet__reco__JPTJet_edm__refhelper__FindUsingAdvance_std__vector_reco__JPTJet__reco__JPTJet_s_, product_), ::Reflex::PRIVATE | ::Reflex::MUTABLE);
}
//------Delayed function member builder for class Ref<std::vector<reco::JPTJet, std::allocator<reco::JPTJet> >,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet, std::allocator<reco::JPTJet> >, reco::JPTJet> > -------------------
void __edm__Ref_std__vector_reco__JPTJet__reco__JPTJet_edm__refhelper__FindUsingAdvance_std__vector_reco__JPTJet__reco__JPTJet_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_12762), Reflex::Literal("operator*"), operator_22324, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_12758), Reflex::Literal("operator->"), operator_22325, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_12758), Reflex::Literal("get"), method_22326, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("isNull"), method_22327, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("isNonnull"), method_22328, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("operator!"), operator_22329, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4689), Reflex::Literal("id"), method_22330, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_18571), Reflex::Literal("productGetter"), method_22331, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_33474), Reflex::Literal("product"), method_22332, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_356), Reflex::Literal("key"), method_22333, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_356), Reflex::Literal("index"), method_22334, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("hasProductCache"), method_22335, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("isAvailable"), method_22336, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("isTransient"), method_22337, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_21597), Reflex::Literal("refCore"), method_22338, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_231), Reflex::Literal("Class_Version"), method_22339, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC);
}
//------Stub functions for class Ref<std::vector<reco::BasicJet, std::allocator<reco::BasicJet> >,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet, std::allocator<reco::BasicJet> >, reco::BasicJet> > -------------------------------
static  void operator_22479( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)o)->operator=)(*(const ::edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)arg[0]);
  else   (((::edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)o)->operator=)(*(const ::edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)arg[0]);
}

static void constructor_22480( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >(*(const ::edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)arg[0]);
  else ::new(mem) ::edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >(*(const ::edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)arg[0]);
}

static void constructor_22481( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >();
  else ::new(mem) ::edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >();
}

static void constructor_22482( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if ( arg.size() == 2 ) {
    if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >(*(const ::edm::Handle<std::vector<reco::BasicJet> >*)arg[0],
      *(unsigned int*)arg[1]);
  else ::new(mem) ::edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >(*(const ::edm::Handle<std::vector<reco::BasicJet> >*)arg[0],
      *(unsigned int*)arg[1]);
  }
  else if ( arg.size() == 3 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >(*(const ::edm::Handle<std::vector<reco::BasicJet> >*)arg[0],
      *(unsigned int*)arg[1],
      *(bool*)arg[2]);
  else ::new(mem) ::edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >(*(const ::edm::Handle<std::vector<reco::BasicJet> >*)arg[0],
      *(unsigned int*)arg[1],
      *(bool*)arg[2]);
  }
}

static void constructor_22483( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if ( arg.size() == 2 ) {
    if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >(*(const ::edm::OrphanHandle<std::vector<reco::BasicJet> >*)arg[0],
      *(unsigned int*)arg[1]);
  else ::new(mem) ::edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >(*(const ::edm::OrphanHandle<std::vector<reco::BasicJet> >*)arg[0],
      *(unsigned int*)arg[1]);
  }
  else if ( arg.size() == 3 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >(*(const ::edm::OrphanHandle<std::vector<reco::BasicJet> >*)arg[0],
      *(unsigned int*)arg[1],
      *(bool*)arg[2]);
  else ::new(mem) ::edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >(*(const ::edm::OrphanHandle<std::vector<reco::BasicJet> >*)arg[0],
      *(unsigned int*)arg[1],
      *(bool*)arg[2]);
  }
}

static void constructor_22484( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if ( arg.size() == 2 ) {
    if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >(*(const ::edm::RefVector<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)arg[0],
      *(unsigned int*)arg[1]);
  else ::new(mem) ::edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >(*(const ::edm::RefVector<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)arg[0],
      *(unsigned int*)arg[1]);
  }
  else if ( arg.size() == 3 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >(*(const ::edm::RefVector<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)arg[0],
      *(unsigned int*)arg[1],
      *(bool*)arg[2]);
  else ::new(mem) ::edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >(*(const ::edm::RefVector<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)arg[0],
      *(unsigned int*)arg[1],
      *(bool*)arg[2]);
  }
}

static void constructor_22485( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if ( arg.size() == 2 ) {
    if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >((const ::std::vector<reco::BasicJet>*)arg[0],
      *(unsigned int*)arg[1]);
  else ::new(mem) ::edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >((const ::std::vector<reco::BasicJet>*)arg[0],
      *(unsigned int*)arg[1]);
  }
  else if ( arg.size() == 3 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >((const ::std::vector<reco::BasicJet>*)arg[0],
      *(unsigned int*)arg[1],
      *(bool*)arg[2]);
  else ::new(mem) ::edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >((const ::std::vector<reco::BasicJet>*)arg[0],
      *(unsigned int*)arg[1],
      *(bool*)arg[2]);
  }
}

static void constructor_22486( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if ( arg.size() == 2 ) {
    if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >(*(const ::edm::TestHandle<std::vector<reco::BasicJet> >*)arg[0],
      *(unsigned int*)arg[1]);
  else ::new(mem) ::edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >(*(const ::edm::TestHandle<std::vector<reco::BasicJet> >*)arg[0],
      *(unsigned int*)arg[1]);
  }
  else if ( arg.size() == 3 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >(*(const ::edm::TestHandle<std::vector<reco::BasicJet> >*)arg[0],
      *(unsigned int*)arg[1],
      *(bool*)arg[2]);
  else ::new(mem) ::edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >(*(const ::edm::TestHandle<std::vector<reco::BasicJet> >*)arg[0],
      *(unsigned int*)arg[1],
      *(bool*)arg[2]);
  }
}

static void constructor_22487( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >(*(const ::edm::ProductID*)arg[0],
      *(unsigned int*)arg[1],
      (const ::edm::EDProductGetter*)arg[2]);
  else ::new(mem) ::edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >(*(const ::edm::ProductID*)arg[0],
      *(unsigned int*)arg[1],
      (const ::edm::EDProductGetter*)arg[2]);
}

static void constructor_22488( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >(*(const ::edm::ProductID*)arg[0],
      (const ::reco::BasicJet*)arg[1],
      *(unsigned int*)arg[2],
      (const ::std::vector<reco::BasicJet>*)arg[3]);
  else ::new(mem) ::edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >(*(const ::edm::ProductID*)arg[0],
      (const ::reco::BasicJet*)arg[1],
      *(unsigned int*)arg[2],
      (const ::std::vector<reco::BasicJet>*)arg[3]);
}

static void constructor_22489( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >(*(const ::edm::ProductID*)arg[0]);
  else ::new(mem) ::edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >(*(const ::edm::ProductID*)arg[0]);
}

static void constructor_22490( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >(*(const ::edm::RefProd<std::vector<reco::BasicJet> >*)arg[0],
      *(unsigned int*)arg[1]);
  else ::new(mem) ::edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >(*(const ::edm::RefProd<std::vector<reco::BasicJet> >*)arg[0],
      *(unsigned int*)arg[1]);
}

static void destructor_22491(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)o)->::edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >::~Ref)();
}
static  void operator_22492( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)o)->operator*)();
  else   (((const ::edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)o)->operator*)();
}

static  void operator_22493( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)o)->operator->)());
  else   (((const ::edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)o)->operator->)();
}

static  void method_22494( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)o)->get)());
  else   (((const ::edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)o)->get)();
}

static  void method_22495( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)o)->isNull)());
  else   (((const ::edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)o)->isNull)();
}

static  void method_22496( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)o)->isNonnull)());
  else   (((const ::edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)o)->isNonnull)();
}

static  void operator_22497( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)o)->operator!)());
  else   (((const ::edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)o)->operator!)();
}

static  void method_22498( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::ProductID)((((const ::edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)o)->id)());
  else   (((const ::edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)o)->id)();
}

static  void method_22499( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)o)->productGetter)());
  else   (((const ::edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)o)->productGetter)();
}

static  void method_22500( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)o)->product)());
  else   (((const ::edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)o)->product)();
}

static  void method_22501( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (unsigned int)((((const ::edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)o)->key)());
  else   (((const ::edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)o)->key)();
}

static  void method_22502( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (unsigned int)((((const ::edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)o)->index)());
  else   (((const ::edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)o)->index)();
}

static  void method_22503( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)o)->hasProductCache)());
  else   (((const ::edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)o)->hasProductCache)();
}

static  void method_22504( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)o)->isAvailable)());
  else   (((const ::edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)o)->isAvailable)();
}

static  void method_22505( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)o)->isTransient)());
  else   (((const ::edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)o)->isTransient)();
}

static  void method_22506( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)o)->refCore)();
  else   (((const ::edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)o)->refCore)();
}

static  void method_22507( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (short)((((::edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)o)->Class_Version)());
  else   (((::edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)o)->Class_Version)();
}

static void constructor_22508( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >(*(const ::edm::RefCore*)arg[0],
      *(const unsigned int*)arg[1]);
  else ::new(mem) ::edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >(*(const ::edm::RefCore*)arg[0],
      *(const unsigned int*)arg[1]);
}

static void method_newdel_4742( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class Ref<std::vector<reco::BasicJet, std::allocator<reco::BasicJet> >,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet, std::allocator<reco::BasicJet> >, reco::BasicJet> > -------------------------------
void __edm__Ref_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s__db_datamem(Reflex::Class*);
void __edm__Ref_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__Ref_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s__datamem_bld(&__edm__Ref_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__Ref_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s__funcmem_bld(&__edm__Ref_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s__db_funcmem);
void __edm__Ref_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >"), typeid(::edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >), sizeof(::edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("ClassVersion"), ::edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >::Class_Version())
  .AddTypedef(type_7564, Reflex::Literal("edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >::T"))
  .AddTypedef(type_18727, Reflex::Literal("edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >::F"))
  .AddTypedef(type_20170, Reflex::Literal("edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >::VF"))
  .AddTypedef(type_20169, Reflex::Literal("edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >::VBF"))
  .AddTypedef(type_2983, Reflex::Literal("edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >::product_type"))
  .AddTypedef(type_7564, Reflex::Literal("edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >::value_type"))
  .AddTypedef(type_7564c, Reflex::Literal("edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >::element_type"))
  .AddTypedef(type_18727, Reflex::Literal("edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >::finder_type"))
  .AddTypedef(type_356, Reflex::Literal("edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >::argument_type"))
  .AddTypedef(type_356, Reflex::Literal("edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >::key_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_34014, type_33246), Reflex::Literal("operator="), operator_22479, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_33246), Reflex::Literal("Ref"), constructor_22480, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("Ref"), constructor_22481, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_33965, type_356, type_1574), Reflex::Literal("Ref"), constructor_22482, 0, "handle;itemKey;setNow=true", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_33966, type_356, type_1574), Reflex::Literal("Ref"), constructor_22483, 0, "handle;itemKey;setNow=true", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_33485, type_356, type_1574), Reflex::Literal("Ref"), constructor_22484, 0, "refvector;itemKey;setNow=true", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_33486, type_356, type_1574), Reflex::Literal("Ref"), constructor_22485, 0, "iProduct;iItemKey;iSetNow=true", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_33967, type_356, type_1574), Reflex::Literal("Ref"), constructor_22486, 0, "handle;itemKey;setNow=true", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_18495, type_356, type_18571), Reflex::Literal("Ref"), constructor_22487, 0, "productID;itemKey;prodGetter", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_18495, type_13408, type_356, type_33486), Reflex::Literal("Ref"), constructor_22488, 0, "iProductID;;iItemKey;iProduct", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_18495), Reflex::Literal("Ref"), constructor_22489, 0, "iId", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_33964, type_356), Reflex::Literal("Ref"), constructor_22490, 0, "refProd;itemKey", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~Ref"), destructor_22491, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_21597, type_9929), Reflex::Literal("Ref"), constructor_22508, 0, "iRefCore;iKey", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_4742, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__Ref_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__Ref_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s__funcmem_bld);
}

//------Delayed data member builder for class Ref<std::vector<reco::BasicJet, std::allocator<reco::BasicJet> >,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet, std::allocator<reco::BasicJet> >, reco::BasicJet> > -------------------
void __edm__Ref_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_4462, Reflex::Literal("product_"), OffsetOf(__shadow__::__edm__Ref_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s_, product_), ::Reflex::PRIVATE | ::Reflex::MUTABLE);
}
//------Delayed function member builder for class Ref<std::vector<reco::BasicJet, std::allocator<reco::BasicJet> >,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet, std::allocator<reco::BasicJet> >, reco::BasicJet> > -------------------
void __edm__Ref_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13412), Reflex::Literal("operator*"), operator_22492, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13408), Reflex::Literal("operator->"), operator_22493, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13408), Reflex::Literal("get"), method_22494, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("isNull"), method_22495, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("isNonnull"), method_22496, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("operator!"), operator_22497, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4689), Reflex::Literal("id"), method_22498, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_18571), Reflex::Literal("productGetter"), method_22499, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_33486), Reflex::Literal("product"), method_22500, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_356), Reflex::Literal("key"), method_22501, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_356), Reflex::Literal("index"), method_22502, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("hasProductCache"), method_22503, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("isAvailable"), method_22504, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("isTransient"), method_22505, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_21597), Reflex::Literal("refCore"), method_22506, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_231), Reflex::Literal("Class_Version"), method_22507, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC);
}
//------Stub functions for class Ref<std::vector<reco::GenJet, std::allocator<reco::GenJet> >,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet, std::allocator<reco::GenJet> >, reco::GenJet> > -------------------------------
static  void operator_22521( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)o)->operator=)(*(const ::edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)arg[0]);
  else   (((::edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)o)->operator=)(*(const ::edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)arg[0]);
}

static void constructor_22522( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >(*(const ::edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)arg[0]);
  else ::new(mem) ::edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >(*(const ::edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)arg[0]);
}

static void constructor_22523( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >();
  else ::new(mem) ::edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >();
}

static void constructor_22524( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if ( arg.size() == 2 ) {
    if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >(*(const ::edm::Handle<std::vector<reco::GenJet> >*)arg[0],
      *(unsigned int*)arg[1]);
  else ::new(mem) ::edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >(*(const ::edm::Handle<std::vector<reco::GenJet> >*)arg[0],
      *(unsigned int*)arg[1]);
  }
  else if ( arg.size() == 3 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >(*(const ::edm::Handle<std::vector<reco::GenJet> >*)arg[0],
      *(unsigned int*)arg[1],
      *(bool*)arg[2]);
  else ::new(mem) ::edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >(*(const ::edm::Handle<std::vector<reco::GenJet> >*)arg[0],
      *(unsigned int*)arg[1],
      *(bool*)arg[2]);
  }
}

static void constructor_22525( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if ( arg.size() == 2 ) {
    if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >(*(const ::edm::OrphanHandle<std::vector<reco::GenJet> >*)arg[0],
      *(unsigned int*)arg[1]);
  else ::new(mem) ::edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >(*(const ::edm::OrphanHandle<std::vector<reco::GenJet> >*)arg[0],
      *(unsigned int*)arg[1]);
  }
  else if ( arg.size() == 3 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >(*(const ::edm::OrphanHandle<std::vector<reco::GenJet> >*)arg[0],
      *(unsigned int*)arg[1],
      *(bool*)arg[2]);
  else ::new(mem) ::edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >(*(const ::edm::OrphanHandle<std::vector<reco::GenJet> >*)arg[0],
      *(unsigned int*)arg[1],
      *(bool*)arg[2]);
  }
}

static void constructor_22526( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if ( arg.size() == 2 ) {
    if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >(*(const ::edm::RefVector<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)arg[0],
      *(unsigned int*)arg[1]);
  else ::new(mem) ::edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >(*(const ::edm::RefVector<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)arg[0],
      *(unsigned int*)arg[1]);
  }
  else if ( arg.size() == 3 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >(*(const ::edm::RefVector<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)arg[0],
      *(unsigned int*)arg[1],
      *(bool*)arg[2]);
  else ::new(mem) ::edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >(*(const ::edm::RefVector<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)arg[0],
      *(unsigned int*)arg[1],
      *(bool*)arg[2]);
  }
}

static void constructor_22527( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if ( arg.size() == 2 ) {
    if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >((const ::std::vector<reco::GenJet>*)arg[0],
      *(unsigned int*)arg[1]);
  else ::new(mem) ::edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >((const ::std::vector<reco::GenJet>*)arg[0],
      *(unsigned int*)arg[1]);
  }
  else if ( arg.size() == 3 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >((const ::std::vector<reco::GenJet>*)arg[0],
      *(unsigned int*)arg[1],
      *(bool*)arg[2]);
  else ::new(mem) ::edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >((const ::std::vector<reco::GenJet>*)arg[0],
      *(unsigned int*)arg[1],
      *(bool*)arg[2]);
  }
}

static void constructor_22528( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if ( arg.size() == 2 ) {
    if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >(*(const ::edm::TestHandle<std::vector<reco::GenJet> >*)arg[0],
      *(unsigned int*)arg[1]);
  else ::new(mem) ::edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >(*(const ::edm::TestHandle<std::vector<reco::GenJet> >*)arg[0],
      *(unsigned int*)arg[1]);
  }
  else if ( arg.size() == 3 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >(*(const ::edm::TestHandle<std::vector<reco::GenJet> >*)arg[0],
      *(unsigned int*)arg[1],
      *(bool*)arg[2]);
  else ::new(mem) ::edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >(*(const ::edm::TestHandle<std::vector<reco::GenJet> >*)arg[0],
      *(unsigned int*)arg[1],
      *(bool*)arg[2]);
  }
}

static void constructor_22529( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >(*(const ::edm::ProductID*)arg[0],
      *(unsigned int*)arg[1],
      (const ::edm::EDProductGetter*)arg[2]);
  else ::new(mem) ::edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >(*(const ::edm::ProductID*)arg[0],
      *(unsigned int*)arg[1],
      (const ::edm::EDProductGetter*)arg[2]);
}

static void constructor_22530( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >(*(const ::edm::ProductID*)arg[0],
      (const ::reco::GenJet*)arg[1],
      *(unsigned int*)arg[2],
      (const ::std::vector<reco::GenJet>*)arg[3]);
  else ::new(mem) ::edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >(*(const ::edm::ProductID*)arg[0],
      (const ::reco::GenJet*)arg[1],
      *(unsigned int*)arg[2],
      (const ::std::vector<reco::GenJet>*)arg[3]);
}

static void constructor_22531( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >(*(const ::edm::ProductID*)arg[0]);
  else ::new(mem) ::edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >(*(const ::edm::ProductID*)arg[0]);
}

static void constructor_22532( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >(*(const ::edm::RefProd<std::vector<reco::GenJet> >*)arg[0],
      *(unsigned int*)arg[1]);
  else ::new(mem) ::edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >(*(const ::edm::RefProd<std::vector<reco::GenJet> >*)arg[0],
      *(unsigned int*)arg[1]);
}

static void destructor_22533(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)o)->::edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >::~Ref)();
}
static  void operator_22534( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)o)->operator*)();
  else   (((const ::edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)o)->operator*)();
}

static  void operator_22535( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)o)->operator->)());
  else   (((const ::edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)o)->operator->)();
}

static  void method_22536( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)o)->get)());
  else   (((const ::edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)o)->get)();
}

static  void method_22537( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)o)->isNull)());
  else   (((const ::edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)o)->isNull)();
}

static  void method_22538( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)o)->isNonnull)());
  else   (((const ::edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)o)->isNonnull)();
}

static  void operator_22539( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)o)->operator!)());
  else   (((const ::edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)o)->operator!)();
}

static  void method_22540( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::ProductID)((((const ::edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)o)->id)());
  else   (((const ::edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)o)->id)();
}

static  void method_22541( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)o)->productGetter)());
  else   (((const ::edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)o)->productGetter)();
}

static  void method_22542( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)o)->product)());
  else   (((const ::edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)o)->product)();
}

static  void method_22543( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (unsigned int)((((const ::edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)o)->key)());
  else   (((const ::edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)o)->key)();
}

static  void method_22544( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (unsigned int)((((const ::edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)o)->index)());
  else   (((const ::edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)o)->index)();
}

static  void method_22545( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)o)->hasProductCache)());
  else   (((const ::edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)o)->hasProductCache)();
}

static  void method_22546( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)o)->isAvailable)());
  else   (((const ::edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)o)->isAvailable)();
}

static  void method_22547( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)o)->isTransient)());
  else   (((const ::edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)o)->isTransient)();
}

static  void method_22548( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)o)->refCore)();
  else   (((const ::edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)o)->refCore)();
}

static  void method_22549( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (short)((((::edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)o)->Class_Version)());
  else   (((::edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)o)->Class_Version)();
}

static void constructor_22550( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >(*(const ::edm::RefCore*)arg[0],
      *(const unsigned int*)arg[1]);
  else ::new(mem) ::edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >(*(const ::edm::RefCore*)arg[0],
      *(const unsigned int*)arg[1]);
}

static void method_newdel_4743( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class Ref<std::vector<reco::GenJet, std::allocator<reco::GenJet> >,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet, std::allocator<reco::GenJet> >, reco::GenJet> > -------------------------------
void __edm__Ref_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s__db_datamem(Reflex::Class*);
void __edm__Ref_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__Ref_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s__datamem_bld(&__edm__Ref_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__Ref_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s__funcmem_bld(&__edm__Ref_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s__db_funcmem);
void __edm__Ref_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >"), typeid(::edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >), sizeof(::edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("ClassVersion"), ::edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >::Class_Version())
  .AddTypedef(type_7512, Reflex::Literal("edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >::T"))
  .AddTypedef(type_18739, Reflex::Literal("edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >::F"))
  .AddTypedef(type_20172, Reflex::Literal("edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >::VF"))
  .AddTypedef(type_20171, Reflex::Literal("edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >::VBF"))
  .AddTypedef(type_2988, Reflex::Literal("edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >::product_type"))
  .AddTypedef(type_7512, Reflex::Literal("edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >::value_type"))
  .AddTypedef(type_7512c, Reflex::Literal("edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >::element_type"))
  .AddTypedef(type_18739, Reflex::Literal("edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >::finder_type"))
  .AddTypedef(type_356, Reflex::Literal("edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >::argument_type"))
  .AddTypedef(type_356, Reflex::Literal("edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >::key_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_34015, type_33260), Reflex::Literal("operator="), operator_22521, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_33260), Reflex::Literal("Ref"), constructor_22522, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("Ref"), constructor_22523, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_33970, type_356, type_1574), Reflex::Literal("Ref"), constructor_22524, 0, "handle;itemKey;setNow=true", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_33971, type_356, type_1574), Reflex::Literal("Ref"), constructor_22525, 0, "handle;itemKey;setNow=true", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_33490, type_356, type_1574), Reflex::Literal("Ref"), constructor_22526, 0, "refvector;itemKey;setNow=true", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_33491, type_356, type_1574), Reflex::Literal("Ref"), constructor_22527, 0, "iProduct;iItemKey;iSetNow=true", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_33972, type_356, type_1574), Reflex::Literal("Ref"), constructor_22528, 0, "handle;itemKey;setNow=true", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_18495, type_356, type_18571), Reflex::Literal("Ref"), constructor_22529, 0, "productID;itemKey;prodGetter", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_18495, type_13603, type_356, type_33491), Reflex::Literal("Ref"), constructor_22530, 0, "iProductID;;iItemKey;iProduct", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_18495), Reflex::Literal("Ref"), constructor_22531, 0, "iId", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_33969, type_356), Reflex::Literal("Ref"), constructor_22532, 0, "refProd;itemKey", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~Ref"), destructor_22533, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_21597, type_9929), Reflex::Literal("Ref"), constructor_22550, 0, "iRefCore;iKey", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_4743, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__Ref_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__Ref_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s__funcmem_bld);
}

//------Delayed data member builder for class Ref<std::vector<reco::GenJet, std::allocator<reco::GenJet> >,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet, std::allocator<reco::GenJet> >, reco::GenJet> > -------------------
void __edm__Ref_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_4462, Reflex::Literal("product_"), OffsetOf(__shadow__::__edm__Ref_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s_, product_), ::Reflex::PRIVATE | ::Reflex::MUTABLE);
}
//------Delayed function member builder for class Ref<std::vector<reco::GenJet, std::allocator<reco::GenJet> >,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet, std::allocator<reco::GenJet> >, reco::GenJet> > -------------------
void __edm__Ref_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13607), Reflex::Literal("operator*"), operator_22534, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13603), Reflex::Literal("operator->"), operator_22535, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13603), Reflex::Literal("get"), method_22536, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("isNull"), method_22537, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("isNonnull"), method_22538, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("operator!"), operator_22539, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4689), Reflex::Literal("id"), method_22540, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_18571), Reflex::Literal("productGetter"), method_22541, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_33491), Reflex::Literal("product"), method_22542, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_356), Reflex::Literal("key"), method_22543, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_356), Reflex::Literal("index"), method_22544, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("hasProductCache"), method_22545, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("isAvailable"), method_22546, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("isTransient"), method_22547, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_21597), Reflex::Literal("refCore"), method_22548, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_231), Reflex::Literal("Class_Version"), method_22549, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC);
}
//------Stub functions for class Jet -------------------------------
static  void operator_24318( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::reco::Jet*)o)->operator=)(*(const ::reco::Jet*)arg[0]);
  else   (((::reco::Jet*)o)->operator=)(*(const ::reco::Jet*)arg[0]);
}

static void constructor_24319( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::reco::Jet(*(const ::reco::Jet*)arg[0]);
  else ::new(mem) ::reco::Jet(*(const ::reco::Jet*)arg[0]);
}

static void constructor_24320( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::reco::Jet();
  else ::new(mem) ::reco::Jet();
}

static void constructor_24321( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::reco::Jet(*(const ::math::XYZTLorentzVector*)arg[0],
      *(const ::math::XYZPoint*)arg[1]);
  else ::new(mem) ::reco::Jet(*(const ::math::XYZTLorentzVector*)arg[0],
      *(const ::math::XYZPoint*)arg[1]);
}

static void constructor_24322( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::reco::Jet(*(const ::math::XYZTLorentzVector*)arg[0],
      *(const ::math::XYZPoint*)arg[1],
      *(const ::std::vector<edm::Ptr<reco::Candidate> >*)arg[2]);
  else ::new(mem) ::reco::Jet(*(const ::math::XYZTLorentzVector*)arg[0],
      *(const ::math::XYZPoint*)arg[1],
      *(const ::std::vector<edm::Ptr<reco::Candidate> >*)arg[2]);
}

static void destructor_24323(void*, void * o, const std::vector<void*>&, void *) {
(((::reco::Jet*)o)->::reco::Jet::~Jet)();
}
static  void method_24324( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (reco::Jet::EtaPhiMoments)((((const ::reco::Jet*)o)->etaPhiStatistics)());
  else   (((const ::reco::Jet*)o)->etaPhiStatistics)();
}

static  void method_24325( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (float)((((const ::reco::Jet*)o)->etaetaMoment)());
  else   (((const ::reco::Jet*)o)->etaetaMoment)();
}

static  void method_24326( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (float)((((const ::reco::Jet*)o)->phiphiMoment)());
  else   (((const ::reco::Jet*)o)->phiphiMoment)();
}

static  void method_24327( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (float)((((const ::reco::Jet*)o)->etaphiMoment)());
  else   (((const ::reco::Jet*)o)->etaphiMoment)();
}

static  void method_24328( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (float)((((const ::reco::Jet*)o)->etInAnnulus)(*(float*)arg[0],
    *(float*)arg[1]));
  else   (((const ::reco::Jet*)o)->etInAnnulus)(*(float*)arg[0],
    *(float*)arg[1]);
}

static  void method_24329( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (int)((((const ::reco::Jet*)o)->nCarrying)(*(float*)arg[0]));
  else   (((const ::reco::Jet*)o)->nCarrying)(*(float*)arg[0]);
}

static  void method_24330( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (float)((((const ::reco::Jet*)o)->maxDistance)());
  else   (((const ::reco::Jet*)o)->maxDistance)();
}

static  void method_24331( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (int)((((const ::reco::Jet*)o)->nConstituents)());
  else   (((const ::reco::Jet*)o)->nConstituents)();
}

static  void method_24332( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (float)((((::reco::Jet*)o)->physicsEta)(*(float*)arg[0],
    *(float*)arg[1]));
  else   (((::reco::Jet*)o)->physicsEta)(*(float*)arg[0],
    *(float*)arg[1]);
}

static  void method_24333( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (float)((((::reco::Jet*)o)->detectorEta)(*(float*)arg[0],
    *(float*)arg[1]));
  else   (((::reco::Jet*)o)->detectorEta)(*(float*)arg[0],
    *(float*)arg[1]);
}

static  void method_24334( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if ( arg.size() == 2 ) {
    if (retaddr) new (retaddr) (math::XYZTLorentzVector)((((::reco::Jet*)o)->physicsP4)(*(const ::math::XYZPoint*)arg[0],
      *(const ::reco::Candidate*)arg[1]));
    else     (((::reco::Jet*)o)->physicsP4)(*(const ::math::XYZPoint*)arg[0],
      *(const ::reco::Candidate*)arg[1]);
  }
  else if ( arg.size() == 3 ) { 
    if (retaddr) new (retaddr) (math::XYZTLorentzVector)((((::reco::Jet*)o)->physicsP4)(*(const ::math::XYZPoint*)arg[0],
      *(const ::reco::Candidate*)arg[1],
      *(const ::math::XYZPoint*)arg[2]));
    else     (((::reco::Jet*)o)->physicsP4)(*(const ::math::XYZPoint*)arg[0],
      *(const ::reco::Candidate*)arg[1],
      *(const ::math::XYZPoint*)arg[2]);
  }
}

static  void method_24335( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (math::XYZTLorentzVector)((((::reco::Jet*)o)->detectorP4)(*(const ::math::XYZPoint*)arg[0],
    *(const ::reco::Candidate*)arg[1]));
  else   (((::reco::Jet*)o)->detectorP4)(*(const ::math::XYZPoint*)arg[0],
    *(const ::reco::Candidate*)arg[1]);
}

static  void method_24336( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::vector<edm::Ptr<reco::Candidate> >)((((const ::reco::Jet*)o)->getJetConstituents)());
  else   (((const ::reco::Jet*)o)->getJetConstituents)();
}

static  void method_24337( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::vector<const reco::Candidate*>)((((const ::reco::Jet*)o)->getJetConstituentsQuick)());
  else   (((const ::reco::Jet*)o)->getJetConstituentsQuick)();
}

static  void method_24338( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (float)((((const ::reco::Jet*)o)->constituentPtDistribution)());
  else   (((const ::reco::Jet*)o)->constituentPtDistribution)();
}

static  void method_24339( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (float)((((const ::reco::Jet*)o)->constituentEtaPhiSpread)());
  else   (((const ::reco::Jet*)o)->constituentEtaPhiSpread)();
}

static  void method_24340( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::string)((((const ::reco::Jet*)o)->print)());
  else   (((const ::reco::Jet*)o)->print)();
}

static  void method_24341( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::reco::Jet*)o)->scaleEnergy)(*(double*)arg[0]);
}

static  void method_24342( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::reco::Jet*)o)->setJetArea)(*(float*)arg[0]);
}

static  void method_24343( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (float)((((const ::reco::Jet*)o)->jetArea)());
  else   (((const ::reco::Jet*)o)->jetArea)();
}

static  void method_24344( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::reco::Jet*)o)->setPileup)(*(float*)arg[0]);
}

static  void method_24345( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (float)((((const ::reco::Jet*)o)->pileup)());
  else   (((const ::reco::Jet*)o)->pileup)();
}

static  void method_24346( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::reco::Jet*)o)->setNPasses)(*(int*)arg[0]);
}

static  void method_24347( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (int)((((const ::reco::Jet*)o)->nPasses)());
  else   (((const ::reco::Jet*)o)->nPasses)();
}

static  void method_24348( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::reco::Jet*)o)->isJet)());
  else   (((const ::reco::Jet*)o)->isJet)();
}

static void method_newdel_7485( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::reco::Jet >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::reco::Jet >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::reco::Jet >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::reco::Jet >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::reco::Jet >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

static void method_x60( void* retaddr, void*, const std::vector<void*>&, void*)
{
  typedef std::vector<std::pair< ::Reflex::Base, int> > Bases_t;
  static Bases_t s_bases;
  if ( !s_bases.size() ) {
    s_bases.push_back(std::make_pair(::Reflex::Base( ::Reflex::TypeBuilder(Reflex::Literal("reco::CompositePtrCandidate")), ::Reflex::BaseOffset< ::reco::Jet,::reco::CompositePtrCandidate >::Get(),::Reflex::PUBLIC), 0));
    s_bases.push_back(std::make_pair(::Reflex::Base( ::Reflex::TypeBuilder(Reflex::Literal("reco::LeafCandidate")), ::Reflex::BaseOffset< ::reco::Jet,::reco::LeafCandidate >::Get(),::Reflex::PUBLIC), 1));
    s_bases.push_back(std::make_pair(::Reflex::Base( ::Reflex::TypeBuilder(Reflex::Literal("reco::Candidate")), ::Reflex::BaseOffset< ::reco::Jet,::reco::Candidate >::Get(),::Reflex::PUBLIC), 2));
  }
  if (retaddr) *(Bases_t**)retaddr = &s_bases;
}

//------Dictionary for class Jet -------------------------------
void __reco__Jet_db_datamem(Reflex::Class*);
void __reco__Jet_db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __reco__Jet_datamem_bld(&__reco__Jet_db_datamem);
Reflex::GenreflexMemberBuilder __reco__Jet_funcmem_bld(&__reco__Jet_db_funcmem);
void __reco__Jet_dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("reco::Jet"), typeid(::reco::Jet), sizeof(::reco::Jet), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::VIRTUAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("ClassVersion"), "10")
  .AddBase(type_7476, ::Reflex::BaseOffset< ::reco::Jet, ::reco::CompositePtrCandidate >::Get(), ::Reflex::PUBLIC)
  .AddTypedef(type_4725, Reflex::Literal("reco::Jet::Constituent"))
  .AddTypedef(type_3013, Reflex::Literal("reco::Jet::Constituents"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_34672, type_33987), Reflex::Literal("operator="), operator_24318, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_33987), Reflex::Literal("Jet"), constructor_24319, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("Jet"), constructor_24320, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_23124, type_23126), Reflex::Literal("Jet"), constructor_24321, 0, "fP4;fVertex", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_23124, type_23126, type_30674), Reflex::Literal("Jet"), constructor_24322, 0, "fP4;fVertex;fConstituents", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~Jet"), destructor_24323, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::DESTRUCTOR )
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_7485, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getBasesTable"), method_x60, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__reco__Jet_datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__reco__Jet_funcmem_bld);
}

//------Delayed data member builder for class Jet -------------------
void __reco__Jet_db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_878, Reflex::Literal("mJetArea"), OffsetOf(__shadow__::__reco__Jet, mJetArea), ::Reflex::PRIVATE)
  .AddDataMember(type_878, Reflex::Literal("mPileupEnergy"), OffsetOf(__shadow__::__reco__Jet, mPileupEnergy), ::Reflex::PRIVATE)
  .AddDataMember(type_64, Reflex::Literal("mPassNumber"), OffsetOf(__shadow__::__reco__Jet, mPassNumber), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class Jet -------------------
void __reco__Jet_db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_24317), Reflex::Literal("etaPhiStatistics"), method_24324, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_878), Reflex::Literal("etaetaMoment"), method_24325, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_878), Reflex::Literal("phiphiMoment"), method_24326, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_878), Reflex::Literal("etaphiMoment"), method_24327, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_878, type_878, type_878), Reflex::Literal("etInAnnulus"), method_24328, 0, "fRmin;fRmax", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_64, type_878), Reflex::Literal("nCarrying"), method_24329, 0, "fFraction", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_878), Reflex::Literal("maxDistance"), method_24330, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_64), Reflex::Literal("nConstituents"), method_24331, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_878, type_878, type_878), Reflex::Literal("physicsEta"), method_24332, 0, "fZVertex;fDetectorEta", ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_878, type_878, type_878), Reflex::Literal("detectorEta"), method_24333, 0, "fZVertex;fPhysicsEta", ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_6506, type_23126, type_22651, type_23126), Reflex::Literal("physicsP4"), method_24334, 0, "newVertex;inParticle;oldVertex=ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<double>, ROOT::Math::DefaultCoordinateSystemTag>(((const double&)((const double*)(&0.0))), ((const double&)((const double*)(&0.0))), ((const double&)((const double*)(&0.0))))", ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_6506, type_23126, type_22651), Reflex::Literal("detectorP4"), method_24335, 0, "vertex;inParticle", ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3013), Reflex::Literal("getJetConstituents"), method_24336, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3012), Reflex::Literal("getJetConstituentsQuick"), method_24337, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_878), Reflex::Literal("constituentPtDistribution"), method_24338, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_878), Reflex::Literal("constituentEtaPhiSpread"), method_24339, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2504), Reflex::Literal("print"), method_24340, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_97), Reflex::Literal("scaleEnergy"), method_24341, 0, "fScale", ::Reflex::PUBLIC | ::Reflex::VIRTUAL)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_878), Reflex::Literal("setJetArea"), method_24342, 0, "fArea", ::Reflex::PUBLIC | ::Reflex::VIRTUAL)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_878), Reflex::Literal("jetArea"), method_24343, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_878), Reflex::Literal("setPileup"), method_24344, 0, "fEnergy", ::Reflex::PUBLIC | ::Reflex::VIRTUAL)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_878), Reflex::Literal("pileup"), method_24345, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_64), Reflex::Literal("setNPasses"), method_24346, 0, "fPasses", ::Reflex::PUBLIC | ::Reflex::VIRTUAL)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_64), Reflex::Literal("nPasses"), method_24347, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("isJet"), method_24348, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST);
}
//------Stub functions for class JetTrackMatch<std::vector<reco::JPTJet, std::allocator<reco::JPTJet> > > -------------------------------
static  void operator_24563( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::reco::JetTrackMatch<std::vector<reco::JPTJet> >*)o)->operator=)(*(const ::reco::JetTrackMatch<std::vector<reco::JPTJet> >*)arg[0]);
  else   (((::reco::JetTrackMatch<std::vector<reco::JPTJet> >*)o)->operator=)(*(const ::reco::JetTrackMatch<std::vector<reco::JPTJet> >*)arg[0]);
}

static void constructor_24564( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::reco::JetTrackMatch<std::vector<reco::JPTJet> >(*(const ::reco::JetTrackMatch<std::vector<reco::JPTJet> >*)arg[0]);
  else ::new(mem) ::reco::JetTrackMatch<std::vector<reco::JPTJet> >(*(const ::reco::JetTrackMatch<std::vector<reco::JPTJet> >*)arg[0]);
}

static void constructor_24565( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::reco::JetTrackMatch<std::vector<reco::JPTJet> >();
  else ::new(mem) ::reco::JetTrackMatch<std::vector<reco::JPTJet> >();
}

static void destructor_24566(void*, void * o, const std::vector<void*>&, void *) {
(((::reco::JetTrackMatch<std::vector<reco::JPTJet> >*)o)->::reco::JetTrackMatch<std::vector<reco::JPTJet> >::~JetTrackMatch)();
}
static  void method_24567( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::reco::JetTrackMatch<std::vector<reco::JPTJet> >*)o)->insert)(*(const ::edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >*)arg[0]);
}

static  void method_24568( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::reco::JetTrackMatch<std::vector<reco::JPTJet> >*)o)->insert)(*(const ::edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >*)arg[0],
    *(const ::edm::Ref<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> >*)arg[1]);
}

static  void method_24569( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::vector<edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >)((((const ::reco::JetTrackMatch<std::vector<reco::JPTJet> >*)o)->allJets)());
  else   (((const ::reco::JetTrackMatch<std::vector<reco::JPTJet> >*)o)->allJets)();
}

static  void method_24570( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (std::vector<edm::Ref<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >)((((const ::reco::JetTrackMatch<std::vector<reco::JPTJet> >*)o)->getTracks)(*(const ::edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >*)arg[0]));
  else   (((const ::reco::JetTrackMatch<std::vector<reco::JPTJet> >*)o)->getTracks)(*(const ::edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >*)arg[0]);
}

static void method_newdel_7498( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::reco::JetTrackMatch<std::vector<reco::JPTJet> > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::reco::JetTrackMatch<std::vector<reco::JPTJet> > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::reco::JetTrackMatch<std::vector<reco::JPTJet> > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::reco::JetTrackMatch<std::vector<reco::JPTJet> > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::reco::JetTrackMatch<std::vector<reco::JPTJet> > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class JetTrackMatch<std::vector<reco::JPTJet, std::allocator<reco::JPTJet> > > -------------------------------
void __reco__JetTrackMatch_std__vector_reco__JPTJet_s__db_datamem(Reflex::Class*);
void __reco__JetTrackMatch_std__vector_reco__JPTJet_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __reco__JetTrackMatch_std__vector_reco__JPTJet_s__datamem_bld(&__reco__JetTrackMatch_std__vector_reco__JPTJet_s__db_datamem);
Reflex::GenreflexMemberBuilder __reco__JetTrackMatch_std__vector_reco__JPTJet_s__funcmem_bld(&__reco__JetTrackMatch_std__vector_reco__JPTJet_s__db_funcmem);
void __reco__JetTrackMatch_std__vector_reco__JPTJet_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("reco::JetTrackMatch<std::vector<reco::JPTJet> >"), typeid(::reco::JetTrackMatch<std::vector<reco::JPTJet> >), sizeof(::reco::JetTrackMatch<std::vector<reco::JPTJet> >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddTypedef(type_4738, Reflex::Literal("reco::JetTrackMatch<std::vector<reco::JPTJet> >::JetRef"))
  .AddTypedef(type_4739, Reflex::Literal("reco::JetTrackMatch<std::vector<reco::JPTJet> >::TrackRef"))
  .AddTypedef(type_4563, Reflex::Literal("reco::JetTrackMatch<std::vector<reco::JPTJet> >::Map"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_34774, type_34775), Reflex::Literal("operator="), operator_24563, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_34775), Reflex::Literal("JetTrackMatch"), constructor_24564, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("JetTrackMatch"), constructor_24565, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~JetTrackMatch"), destructor_24566, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_7498, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__reco__JetTrackMatch_std__vector_reco__JPTJet_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__reco__JetTrackMatch_std__vector_reco__JPTJet_s__funcmem_bld);
}

//------Delayed data member builder for class JetTrackMatch<std::vector<reco::JPTJet, std::allocator<reco::JPTJet> > > -------------------
void __reco__JetTrackMatch_std__vector_reco__JPTJet_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_4563, Reflex::Literal("mMap"), OffsetOf(__shadow__::__reco__JetTrackMatch_std__vector_reco__JPTJet_s_, mMap), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class JetTrackMatch<std::vector<reco::JPTJet, std::allocator<reco::JPTJet> > > -------------------
void __reco__JetTrackMatch_std__vector_reco__JPTJet_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_33204), Reflex::Literal("insert"), method_24567, 0, "fJet", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_33204, type_12444), Reflex::Literal("insert"), method_24568, 0, "fJet;fTrack", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2961), Reflex::Literal("allJets"), method_24569, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2959, type_33204), Reflex::Literal("getTracks"), method_24570, 0, "mJet", ::Reflex::PUBLIC | ::Reflex::CONST);
}
//------Stub functions for class JetTrackMatch<std::vector<reco::PFJet, std::allocator<reco::PFJet> > > -------------------------------
static  void operator_24575( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::reco::JetTrackMatch<std::vector<reco::PFJet> >*)o)->operator=)(*(const ::reco::JetTrackMatch<std::vector<reco::PFJet> >*)arg[0]);
  else   (((::reco::JetTrackMatch<std::vector<reco::PFJet> >*)o)->operator=)(*(const ::reco::JetTrackMatch<std::vector<reco::PFJet> >*)arg[0]);
}

static void constructor_24576( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::reco::JetTrackMatch<std::vector<reco::PFJet> >(*(const ::reco::JetTrackMatch<std::vector<reco::PFJet> >*)arg[0]);
  else ::new(mem) ::reco::JetTrackMatch<std::vector<reco::PFJet> >(*(const ::reco::JetTrackMatch<std::vector<reco::PFJet> >*)arg[0]);
}

static void constructor_24577( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::reco::JetTrackMatch<std::vector<reco::PFJet> >();
  else ::new(mem) ::reco::JetTrackMatch<std::vector<reco::PFJet> >();
}

static void destructor_24578(void*, void * o, const std::vector<void*>&, void *) {
(((::reco::JetTrackMatch<std::vector<reco::PFJet> >*)o)->::reco::JetTrackMatch<std::vector<reco::PFJet> >::~JetTrackMatch)();
}
static  void method_24579( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::reco::JetTrackMatch<std::vector<reco::PFJet> >*)o)->insert)(*(const ::edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)arg[0]);
}

static  void method_24580( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::reco::JetTrackMatch<std::vector<reco::PFJet> >*)o)->insert)(*(const ::edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)arg[0],
    *(const ::edm::Ref<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> >*)arg[1]);
}

static  void method_24581( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::vector<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >)((((const ::reco::JetTrackMatch<std::vector<reco::PFJet> >*)o)->allJets)());
  else   (((const ::reco::JetTrackMatch<std::vector<reco::PFJet> >*)o)->allJets)();
}

static  void method_24582( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (std::vector<edm::Ref<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >)((((const ::reco::JetTrackMatch<std::vector<reco::PFJet> >*)o)->getTracks)(*(const ::edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)arg[0]));
  else   (((const ::reco::JetTrackMatch<std::vector<reco::PFJet> >*)o)->getTracks)(*(const ::edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)arg[0]);
}

static void method_newdel_7499( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::reco::JetTrackMatch<std::vector<reco::PFJet> > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::reco::JetTrackMatch<std::vector<reco::PFJet> > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::reco::JetTrackMatch<std::vector<reco::PFJet> > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::reco::JetTrackMatch<std::vector<reco::PFJet> > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::reco::JetTrackMatch<std::vector<reco::PFJet> > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class JetTrackMatch<std::vector<reco::PFJet, std::allocator<reco::PFJet> > > -------------------------------
void __reco__JetTrackMatch_std__vector_reco__PFJet_s__db_datamem(Reflex::Class*);
void __reco__JetTrackMatch_std__vector_reco__PFJet_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __reco__JetTrackMatch_std__vector_reco__PFJet_s__datamem_bld(&__reco__JetTrackMatch_std__vector_reco__PFJet_s__db_datamem);
Reflex::GenreflexMemberBuilder __reco__JetTrackMatch_std__vector_reco__PFJet_s__funcmem_bld(&__reco__JetTrackMatch_std__vector_reco__PFJet_s__db_funcmem);
void __reco__JetTrackMatch_std__vector_reco__PFJet_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("reco::JetTrackMatch<std::vector<reco::PFJet> >"), typeid(::reco::JetTrackMatch<std::vector<reco::PFJet> >), sizeof(::reco::JetTrackMatch<std::vector<reco::PFJet> >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddTypedef(type_4740, Reflex::Literal("reco::JetTrackMatch<std::vector<reco::PFJet> >::JetRef"))
  .AddTypedef(type_4739, Reflex::Literal("reco::JetTrackMatch<std::vector<reco::PFJet> >::TrackRef"))
  .AddTypedef(type_4564, Reflex::Literal("reco::JetTrackMatch<std::vector<reco::PFJet> >::Map"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_34776, type_34777), Reflex::Literal("operator="), operator_24575, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_34777), Reflex::Literal("JetTrackMatch"), constructor_24576, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("JetTrackMatch"), constructor_24577, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~JetTrackMatch"), destructor_24578, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_7499, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__reco__JetTrackMatch_std__vector_reco__PFJet_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__reco__JetTrackMatch_std__vector_reco__PFJet_s__funcmem_bld);
}

//------Delayed data member builder for class JetTrackMatch<std::vector<reco::PFJet, std::allocator<reco::PFJet> > > -------------------
void __reco__JetTrackMatch_std__vector_reco__PFJet_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_4564, Reflex::Literal("mMap"), OffsetOf(__shadow__::__reco__JetTrackMatch_std__vector_reco__PFJet_s_, mMap), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class JetTrackMatch<std::vector<reco::PFJet, std::allocator<reco::PFJet> > > -------------------
void __reco__JetTrackMatch_std__vector_reco__PFJet_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_12892), Reflex::Literal("insert"), method_24579, 0, "fJet", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_12892, type_12444), Reflex::Literal("insert"), method_24580, 0, "fJet;fTrack", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2970), Reflex::Literal("allJets"), method_24581, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2959, type_12892), Reflex::Literal("getTracks"), method_24582, 0, "mJet", ::Reflex::PUBLIC | ::Reflex::CONST);
}
//------Stub functions for class JetTrackMatch<std::vector<reco::BasicJet, std::allocator<reco::BasicJet> > > -------------------------------
static  void operator_24599( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::reco::JetTrackMatch<std::vector<reco::BasicJet> >*)o)->operator=)(*(const ::reco::JetTrackMatch<std::vector<reco::BasicJet> >*)arg[0]);
  else   (((::reco::JetTrackMatch<std::vector<reco::BasicJet> >*)o)->operator=)(*(const ::reco::JetTrackMatch<std::vector<reco::BasicJet> >*)arg[0]);
}

static void constructor_24600( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::reco::JetTrackMatch<std::vector<reco::BasicJet> >(*(const ::reco::JetTrackMatch<std::vector<reco::BasicJet> >*)arg[0]);
  else ::new(mem) ::reco::JetTrackMatch<std::vector<reco::BasicJet> >(*(const ::reco::JetTrackMatch<std::vector<reco::BasicJet> >*)arg[0]);
}

static void constructor_24601( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::reco::JetTrackMatch<std::vector<reco::BasicJet> >();
  else ::new(mem) ::reco::JetTrackMatch<std::vector<reco::BasicJet> >();
}

static void destructor_24602(void*, void * o, const std::vector<void*>&, void *) {
(((::reco::JetTrackMatch<std::vector<reco::BasicJet> >*)o)->::reco::JetTrackMatch<std::vector<reco::BasicJet> >::~JetTrackMatch)();
}
static  void method_24603( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::reco::JetTrackMatch<std::vector<reco::BasicJet> >*)o)->insert)(*(const ::edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)arg[0]);
}

static  void method_24604( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::reco::JetTrackMatch<std::vector<reco::BasicJet> >*)o)->insert)(*(const ::edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)arg[0],
    *(const ::edm::Ref<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> >*)arg[1]);
}

static  void method_24605( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::vector<edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >)((((const ::reco::JetTrackMatch<std::vector<reco::BasicJet> >*)o)->allJets)());
  else   (((const ::reco::JetTrackMatch<std::vector<reco::BasicJet> >*)o)->allJets)();
}

static  void method_24606( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (std::vector<edm::Ref<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >)((((const ::reco::JetTrackMatch<std::vector<reco::BasicJet> >*)o)->getTracks)(*(const ::edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)arg[0]));
  else   (((const ::reco::JetTrackMatch<std::vector<reco::BasicJet> >*)o)->getTracks)(*(const ::edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)arg[0]);
}

static void method_newdel_7501( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::reco::JetTrackMatch<std::vector<reco::BasicJet> > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::reco::JetTrackMatch<std::vector<reco::BasicJet> > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::reco::JetTrackMatch<std::vector<reco::BasicJet> > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::reco::JetTrackMatch<std::vector<reco::BasicJet> > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::reco::JetTrackMatch<std::vector<reco::BasicJet> > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class JetTrackMatch<std::vector<reco::BasicJet, std::allocator<reco::BasicJet> > > -------------------------------
void __reco__JetTrackMatch_std__vector_reco__BasicJet_s__db_datamem(Reflex::Class*);
void __reco__JetTrackMatch_std__vector_reco__BasicJet_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __reco__JetTrackMatch_std__vector_reco__BasicJet_s__datamem_bld(&__reco__JetTrackMatch_std__vector_reco__BasicJet_s__db_datamem);
Reflex::GenreflexMemberBuilder __reco__JetTrackMatch_std__vector_reco__BasicJet_s__funcmem_bld(&__reco__JetTrackMatch_std__vector_reco__BasicJet_s__db_funcmem);
void __reco__JetTrackMatch_std__vector_reco__BasicJet_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("reco::JetTrackMatch<std::vector<reco::BasicJet> >"), typeid(::reco::JetTrackMatch<std::vector<reco::BasicJet> >), sizeof(::reco::JetTrackMatch<std::vector<reco::BasicJet> >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddTypedef(type_4742, Reflex::Literal("reco::JetTrackMatch<std::vector<reco::BasicJet> >::JetRef"))
  .AddTypedef(type_4739, Reflex::Literal("reco::JetTrackMatch<std::vector<reco::BasicJet> >::TrackRef"))
  .AddTypedef(type_4566, Reflex::Literal("reco::JetTrackMatch<std::vector<reco::BasicJet> >::Map"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_34780, type_34781), Reflex::Literal("operator="), operator_24599, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_34781), Reflex::Literal("JetTrackMatch"), constructor_24600, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("JetTrackMatch"), constructor_24601, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~JetTrackMatch"), destructor_24602, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_7501, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__reco__JetTrackMatch_std__vector_reco__BasicJet_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__reco__JetTrackMatch_std__vector_reco__BasicJet_s__funcmem_bld);
}

//------Delayed data member builder for class JetTrackMatch<std::vector<reco::BasicJet, std::allocator<reco::BasicJet> > > -------------------
void __reco__JetTrackMatch_std__vector_reco__BasicJet_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_4566, Reflex::Literal("mMap"), OffsetOf(__shadow__::__reco__JetTrackMatch_std__vector_reco__BasicJet_s_, mMap), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class JetTrackMatch<std::vector<reco::BasicJet, std::allocator<reco::BasicJet> > > -------------------
void __reco__JetTrackMatch_std__vector_reco__BasicJet_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_33246), Reflex::Literal("insert"), method_24603, 0, "fJet", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_33246, type_12444), Reflex::Literal("insert"), method_24604, 0, "fJet;fTrack", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2979), Reflex::Literal("allJets"), method_24605, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2959, type_33246), Reflex::Literal("getTracks"), method_24606, 0, "mJet", ::Reflex::PUBLIC | ::Reflex::CONST);
}
//------Stub functions for class JetTrackMatch<std::vector<reco::GenJet, std::allocator<reco::GenJet> > > -------------------------------
static  void operator_24611( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::reco::JetTrackMatch<std::vector<reco::GenJet> >*)o)->operator=)(*(const ::reco::JetTrackMatch<std::vector<reco::GenJet> >*)arg[0]);
  else   (((::reco::JetTrackMatch<std::vector<reco::GenJet> >*)o)->operator=)(*(const ::reco::JetTrackMatch<std::vector<reco::GenJet> >*)arg[0]);
}

static void constructor_24612( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::reco::JetTrackMatch<std::vector<reco::GenJet> >(*(const ::reco::JetTrackMatch<std::vector<reco::GenJet> >*)arg[0]);
  else ::new(mem) ::reco::JetTrackMatch<std::vector<reco::GenJet> >(*(const ::reco::JetTrackMatch<std::vector<reco::GenJet> >*)arg[0]);
}

static void constructor_24613( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::reco::JetTrackMatch<std::vector<reco::GenJet> >();
  else ::new(mem) ::reco::JetTrackMatch<std::vector<reco::GenJet> >();
}

static void destructor_24614(void*, void * o, const std::vector<void*>&, void *) {
(((::reco::JetTrackMatch<std::vector<reco::GenJet> >*)o)->::reco::JetTrackMatch<std::vector<reco::GenJet> >::~JetTrackMatch)();
}
static  void method_24615( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::reco::JetTrackMatch<std::vector<reco::GenJet> >*)o)->insert)(*(const ::edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)arg[0]);
}

static  void method_24616( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::reco::JetTrackMatch<std::vector<reco::GenJet> >*)o)->insert)(*(const ::edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)arg[0],
    *(const ::edm::Ref<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> >*)arg[1]);
}

static  void method_24617( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::vector<edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >)((((const ::reco::JetTrackMatch<std::vector<reco::GenJet> >*)o)->allJets)());
  else   (((const ::reco::JetTrackMatch<std::vector<reco::GenJet> >*)o)->allJets)();
}

static  void method_24618( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (std::vector<edm::Ref<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >)((((const ::reco::JetTrackMatch<std::vector<reco::GenJet> >*)o)->getTracks)(*(const ::edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)arg[0]));
  else   (((const ::reco::JetTrackMatch<std::vector<reco::GenJet> >*)o)->getTracks)(*(const ::edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)arg[0]);
}

static void method_newdel_7502( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::reco::JetTrackMatch<std::vector<reco::GenJet> > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::reco::JetTrackMatch<std::vector<reco::GenJet> > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::reco::JetTrackMatch<std::vector<reco::GenJet> > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::reco::JetTrackMatch<std::vector<reco::GenJet> > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::reco::JetTrackMatch<std::vector<reco::GenJet> > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class JetTrackMatch<std::vector<reco::GenJet, std::allocator<reco::GenJet> > > -------------------------------
void __reco__JetTrackMatch_std__vector_reco__GenJet_s__db_datamem(Reflex::Class*);
void __reco__JetTrackMatch_std__vector_reco__GenJet_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __reco__JetTrackMatch_std__vector_reco__GenJet_s__datamem_bld(&__reco__JetTrackMatch_std__vector_reco__GenJet_s__db_datamem);
Reflex::GenreflexMemberBuilder __reco__JetTrackMatch_std__vector_reco__GenJet_s__funcmem_bld(&__reco__JetTrackMatch_std__vector_reco__GenJet_s__db_funcmem);
void __reco__JetTrackMatch_std__vector_reco__GenJet_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("reco::JetTrackMatch<std::vector<reco::GenJet> >"), typeid(::reco::JetTrackMatch<std::vector<reco::GenJet> >), sizeof(::reco::JetTrackMatch<std::vector<reco::GenJet> >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddTypedef(type_4743, Reflex::Literal("reco::JetTrackMatch<std::vector<reco::GenJet> >::JetRef"))
  .AddTypedef(type_4739, Reflex::Literal("reco::JetTrackMatch<std::vector<reco::GenJet> >::TrackRef"))
  .AddTypedef(type_4567, Reflex::Literal("reco::JetTrackMatch<std::vector<reco::GenJet> >::Map"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_34782, type_34783), Reflex::Literal("operator="), operator_24611, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_34783), Reflex::Literal("JetTrackMatch"), constructor_24612, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("JetTrackMatch"), constructor_24613, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~JetTrackMatch"), destructor_24614, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_7502, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__reco__JetTrackMatch_std__vector_reco__GenJet_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__reco__JetTrackMatch_std__vector_reco__GenJet_s__funcmem_bld);
}

//------Delayed data member builder for class JetTrackMatch<std::vector<reco::GenJet, std::allocator<reco::GenJet> > > -------------------
void __reco__JetTrackMatch_std__vector_reco__GenJet_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_4567, Reflex::Literal("mMap"), OffsetOf(__shadow__::__reco__JetTrackMatch_std__vector_reco__GenJet_s_, mMap), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class JetTrackMatch<std::vector<reco::GenJet, std::allocator<reco::GenJet> > > -------------------
void __reco__JetTrackMatch_std__vector_reco__GenJet_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_33260), Reflex::Literal("insert"), method_24615, 0, "fJet", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_33260, type_12444), Reflex::Literal("insert"), method_24616, 0, "fJet;fTrack", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2984), Reflex::Literal("allJets"), method_24617, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2959, type_33260), Reflex::Literal("getTracks"), method_24618, 0, "mJet", ::Reflex::PUBLIC | ::Reflex::CONST);
}
//------Stub functions for class JetTrackMatch<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> > > -------------------------------
static  void operator_24623( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::reco::JetTrackMatch<std::vector<reco::CaloJet> >*)o)->operator=)(*(const ::reco::JetTrackMatch<std::vector<reco::CaloJet> >*)arg[0]);
  else   (((::reco::JetTrackMatch<std::vector<reco::CaloJet> >*)o)->operator=)(*(const ::reco::JetTrackMatch<std::vector<reco::CaloJet> >*)arg[0]);
}

static void constructor_24624( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::reco::JetTrackMatch<std::vector<reco::CaloJet> >(*(const ::reco::JetTrackMatch<std::vector<reco::CaloJet> >*)arg[0]);
  else ::new(mem) ::reco::JetTrackMatch<std::vector<reco::CaloJet> >(*(const ::reco::JetTrackMatch<std::vector<reco::CaloJet> >*)arg[0]);
}

static void constructor_24625( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::reco::JetTrackMatch<std::vector<reco::CaloJet> >();
  else ::new(mem) ::reco::JetTrackMatch<std::vector<reco::CaloJet> >();
}

static void destructor_24626(void*, void * o, const std::vector<void*>&, void *) {
(((::reco::JetTrackMatch<std::vector<reco::CaloJet> >*)o)->::reco::JetTrackMatch<std::vector<reco::CaloJet> >::~JetTrackMatch)();
}
static  void method_24627( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::reco::JetTrackMatch<std::vector<reco::CaloJet> >*)o)->insert)(*(const ::edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)arg[0]);
}

static  void method_24628( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::reco::JetTrackMatch<std::vector<reco::CaloJet> >*)o)->insert)(*(const ::edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)arg[0],
    *(const ::edm::Ref<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> >*)arg[1]);
}

static  void method_24629( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::vector<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >)((((const ::reco::JetTrackMatch<std::vector<reco::CaloJet> >*)o)->allJets)());
  else   (((const ::reco::JetTrackMatch<std::vector<reco::CaloJet> >*)o)->allJets)();
}

static  void method_24630( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (std::vector<edm::Ref<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >)((((const ::reco::JetTrackMatch<std::vector<reco::CaloJet> >*)o)->getTracks)(*(const ::edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)arg[0]));
  else   (((const ::reco::JetTrackMatch<std::vector<reco::CaloJet> >*)o)->getTracks)(*(const ::edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)arg[0]);
}

static void method_newdel_7503( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::reco::JetTrackMatch<std::vector<reco::CaloJet> > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::reco::JetTrackMatch<std::vector<reco::CaloJet> > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::reco::JetTrackMatch<std::vector<reco::CaloJet> > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::reco::JetTrackMatch<std::vector<reco::CaloJet> > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::reco::JetTrackMatch<std::vector<reco::CaloJet> > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class JetTrackMatch<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> > > -------------------------------
void __reco__JetTrackMatch_std__vector_reco__CaloJet_s__db_datamem(Reflex::Class*);
void __reco__JetTrackMatch_std__vector_reco__CaloJet_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __reco__JetTrackMatch_std__vector_reco__CaloJet_s__datamem_bld(&__reco__JetTrackMatch_std__vector_reco__CaloJet_s__db_datamem);
Reflex::GenreflexMemberBuilder __reco__JetTrackMatch_std__vector_reco__CaloJet_s__funcmem_bld(&__reco__JetTrackMatch_std__vector_reco__CaloJet_s__db_funcmem);
void __reco__JetTrackMatch_std__vector_reco__CaloJet_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("reco::JetTrackMatch<std::vector<reco::CaloJet> >"), typeid(::reco::JetTrackMatch<std::vector<reco::CaloJet> >), sizeof(::reco::JetTrackMatch<std::vector<reco::CaloJet> >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddTypedef(type_4744, Reflex::Literal("reco::JetTrackMatch<std::vector<reco::CaloJet> >::JetRef"))
  .AddTypedef(type_4739, Reflex::Literal("reco::JetTrackMatch<std::vector<reco::CaloJet> >::TrackRef"))
  .AddTypedef(type_4568, Reflex::Literal("reco::JetTrackMatch<std::vector<reco::CaloJet> >::Map"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_34784, type_34785), Reflex::Literal("operator="), operator_24623, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_34785), Reflex::Literal("JetTrackMatch"), constructor_24624, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("JetTrackMatch"), constructor_24625, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~JetTrackMatch"), destructor_24626, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_7503, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__reco__JetTrackMatch_std__vector_reco__CaloJet_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__reco__JetTrackMatch_std__vector_reco__CaloJet_s__funcmem_bld);
}

//------Delayed data member builder for class JetTrackMatch<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> > > -------------------
void __reco__JetTrackMatch_std__vector_reco__CaloJet_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_4568, Reflex::Literal("mMap"), OffsetOf(__shadow__::__reco__JetTrackMatch_std__vector_reco__CaloJet_s_, mMap), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class JetTrackMatch<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> > > -------------------
void __reco__JetTrackMatch_std__vector_reco__CaloJet_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_13737), Reflex::Literal("insert"), method_24627, 0, "fJet", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_13737, type_12444), Reflex::Literal("insert"), method_24628, 0, "fJet;fTrack", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2990), Reflex::Literal("allJets"), method_24629, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2959, type_13737), Reflex::Literal("getTracks"), method_24630, 0, "mJet", ::Reflex::PUBLIC | ::Reflex::CONST);
}
//------Stub functions for class Holder<reco::Candidate,edm::Ref<std::vector<reco::JPTJet, std::allocator<reco::JPTJet> >, reco::JPTJet, edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet, std::allocator<reco::JPTJet> >, reco::JPTJet> > > -------------------------------
static void constructor_33745( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >();
  else ::new(mem) ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >();
}

static void constructor_33746( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >(*(const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >*)arg[0]);
  else ::new(mem) ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >(*(const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >*)arg[0]);
}

static void constructor_33747( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >(*(const ::edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >*)arg[0]);
  else ::new(mem) ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >(*(const ::edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >*)arg[0]);
}

static  void operator_33748( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >*)o)->operator=)(*(const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >*)arg[0]);
  else   (((::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >*)o)->operator=)(*(const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >*)arg[0]);
}

static  void method_33749( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >*)o)->swap)(*(::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >*)arg[0]);
}

static void destructor_33750(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >*)o)->::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >::~Holder)();
}
static  void method_33751( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >*)o)->clone)());
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >*)o)->clone)();
}

static  void method_33752( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >*)o)->getPtr)());
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >*)o)->getPtr)();
}

static  void method_33753( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::ProductID)((((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >*)o)->id)());
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >*)o)->id)();
}

static  void method_33754( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (size_t)((((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >*)o)->key)());
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >*)o)->key)();
}

static  void method_33755( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >*)o)->isEqualTo)(*(const ::edm::reftobase::BaseHolder<reco::Candidate>*)arg[0]));
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >*)o)->isEqualTo)(*(const ::edm::reftobase::BaseHolder<reco::Candidate>*)arg[0]);
}

static  void method_33756( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >*)o)->getRef)();
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >*)o)->getRef)();
}

static  void method_33757( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >*)o)->fillRefIfMyTypeMatches)(*(::edm::reftobase::RefHolderBase*)arg[0],
    *(::std::basic_string<char>*)arg[1]));
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >*)o)->fillRefIfMyTypeMatches)(*(::edm::reftobase::RefHolderBase*)arg[0],
    *(::std::basic_string<char>*)arg[1]);
}

static  void method_33758( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::auto_ptr<edm::reftobase::RefHolderBase>)((((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >*)o)->holder)());
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >*)o)->holder)();
}

static  void method_33759( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::auto_ptr<edm::reftobase::BaseVectorHolder<reco::Candidate> >)((((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >*)o)->makeVectorHolder)());
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >*)o)->makeVectorHolder)();
}

static  void method_33760( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::auto_ptr<edm::reftobase::RefVectorHolderBase>)((((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >*)o)->makeVectorBaseHolder)());
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >*)o)->makeVectorBaseHolder)();
}

static  void method_33761( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >*)o)->productGetter)());
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >*)o)->productGetter)();
}

static  void method_33762( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >*)o)->hasProductCache)());
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >*)o)->hasProductCache)();
}

static  void method_33763( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >*)o)->product)());
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >*)o)->product)();
}

static  void method_33764( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >*)o)->isAvailable)());
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >*)o)->isAvailable)();
}

static  void method_33765( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (short)((((::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >*)o)->Class_Version)());
  else   (((::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >*)o)->Class_Version)();
}

static void method_newdel_21546( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

static void method_x67( void* retaddr, void*, const std::vector<void*>&, void*)
{
  typedef std::vector<std::pair< ::Reflex::Base, int> > Bases_t;
  static Bases_t s_bases;
  if ( !s_bases.size() ) {
    s_bases.push_back(std::make_pair(::Reflex::Base( ::Reflex::TypeBuilder(Reflex::Literal("edm::reftobase::BaseHolder<reco::Candidate>")), ::Reflex::BaseOffset< ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >,::edm::reftobase::BaseHolder<reco::Candidate> >::Get(),::Reflex::PUBLIC), 0));
  }
  if (retaddr) *(Bases_t**)retaddr = &s_bases;
}

//------Dictionary for class Holder<reco::Candidate,edm::Ref<std::vector<reco::JPTJet, std::allocator<reco::JPTJet> >, reco::JPTJet, edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet, std::allocator<reco::JPTJet> >, reco::JPTJet> > > -------------------------------
void __edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__JPTJet__reco__JPTJet_edm__refhelper__FindUsingAdvance_std__vector_reco__JPTJet__reco__JPTJet_s_s__db_datamem(Reflex::Class*);
void __edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__JPTJet__reco__JPTJet_edm__refhelper__FindUsingAdvance_std__vector_reco__JPTJet__reco__JPTJet_s_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__JPTJet__reco__JPTJet_edm__refhelper__FindUsingAdvance_std__vector_reco__JPTJet__reco__JPTJet_s_s__datamem_bld(&__edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__JPTJet__reco__JPTJet_edm__refhelper__FindUsingAdvance_std__vector_reco__JPTJet__reco__JPTJet_s_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__JPTJet__reco__JPTJet_edm__refhelper__FindUsingAdvance_std__vector_reco__JPTJet__reco__JPTJet_s_s__funcmem_bld(&__edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__JPTJet__reco__JPTJet_edm__refhelper__FindUsingAdvance_std__vector_reco__JPTJet__reco__JPTJet_s_s__db_funcmem);
void __edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__JPTJet__reco__JPTJet_edm__refhelper__FindUsingAdvance_std__vector_reco__JPTJet__reco__JPTJet_s_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >"), typeid(::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >), sizeof(::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::VIRTUAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("ClassVersion"), ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >::Class_Version())
  .AddBase(type_21536, ::Reflex::BaseOffset< ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >, ::edm::reftobase::BaseHolder<reco::Candidate> >::Get(), ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("Holder"), constructor_33745, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_38055), Reflex::Literal("Holder"), constructor_33746, 0, "other", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_33204), Reflex::Literal("Holder"), constructor_33747, 0, "r", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~Holder"), destructor_33750, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::DESTRUCTOR )
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_21546, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getBasesTable"), method_x67, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__JPTJet__reco__JPTJet_edm__refhelper__FindUsingAdvance_std__vector_reco__JPTJet__reco__JPTJet_s_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__JPTJet__reco__JPTJet_edm__refhelper__FindUsingAdvance_std__vector_reco__JPTJet__reco__JPTJet_s_s__funcmem_bld);
}

//------Delayed data member builder for class Holder<reco::Candidate,edm::Ref<std::vector<reco::JPTJet, std::allocator<reco::JPTJet> >, reco::JPTJet, edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet, std::allocator<reco::JPTJet> >, reco::JPTJet> > > -------------------
void __edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__JPTJet__reco__JPTJet_edm__refhelper__FindUsingAdvance_std__vector_reco__JPTJet__reco__JPTJet_s_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_4738, Reflex::Literal("ref_"), OffsetOf(__shadow__::__edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__JPTJet__reco__JPTJet_edm__refhelper__FindUsingAdvance_std__vector_reco__JPTJet__reco__JPTJet_s_s_, ref_), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class Holder<reco::Candidate,edm::Ref<std::vector<reco::JPTJet, std::allocator<reco::JPTJet> >, reco::JPTJet, edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet, std::allocator<reco::JPTJet> >, reco::JPTJet> > > -------------------
void __edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__JPTJet__reco__JPTJet_edm__refhelper__FindUsingAdvance_std__vector_reco__JPTJet__reco__JPTJet_s_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_38056, type_38055), Reflex::Literal("operator="), operator_33748, 0, "rhs", ::Reflex::PUBLIC | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_38056), Reflex::Literal("swap"), method_33749, 0, "other", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_33978), Reflex::Literal("clone"), method_33751, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_33981), Reflex::Literal("getPtr"), method_33752, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4689), Reflex::Literal("id"), method_33753, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2096), Reflex::Literal("key"), method_33754, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574, type_38043), Reflex::Literal("isEqualTo"), method_33755, 0, "rhs", ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_33204), Reflex::Literal("getRef"), method_33756, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574, type_19718, type_10023), Reflex::Literal("fillRefIfMyTypeMatches"), method_33757, 0, "fillme;msg", ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2722), Reflex::Literal("holder"), method_33758, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2723), Reflex::Literal("makeVectorHolder"), method_33759, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2720), Reflex::Literal("makeVectorBaseHolder"), method_33760, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_18571), Reflex::Literal("productGetter"), method_33761, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("hasProductCache"), method_33762, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3933), Reflex::Literal("product"), method_33763, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("isAvailable"), method_33764, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_231), Reflex::Literal("Class_Version"), method_33765, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC);
}
//------Stub functions for class Holder<reco::Candidate,edm::Ref<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet, edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet> > > -------------------------------
static void constructor_33767( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >();
  else ::new(mem) ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >();
}

static void constructor_33768( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >(*(const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)arg[0]);
  else ::new(mem) ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >(*(const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)arg[0]);
}

static void constructor_33769( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >(*(const ::edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)arg[0]);
  else ::new(mem) ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >(*(const ::edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)arg[0]);
}

static  void operator_33770( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->operator=)(*(const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)arg[0]);
  else   (((::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->operator=)(*(const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)arg[0]);
}

static  void method_33771( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->swap)(*(::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)arg[0]);
}

static void destructor_33772(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >::~Holder)();
}
static  void method_33773( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->clone)());
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->clone)();
}

static  void method_33774( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->getPtr)());
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->getPtr)();
}

static  void method_33775( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::ProductID)((((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->id)());
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->id)();
}

static  void method_33776( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (size_t)((((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->key)());
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->key)();
}

static  void method_33777( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->isEqualTo)(*(const ::edm::reftobase::BaseHolder<reco::Candidate>*)arg[0]));
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->isEqualTo)(*(const ::edm::reftobase::BaseHolder<reco::Candidate>*)arg[0]);
}

static  void method_33778( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->getRef)();
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->getRef)();
}

static  void method_33779( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->fillRefIfMyTypeMatches)(*(::edm::reftobase::RefHolderBase*)arg[0],
    *(::std::basic_string<char>*)arg[1]));
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->fillRefIfMyTypeMatches)(*(::edm::reftobase::RefHolderBase*)arg[0],
    *(::std::basic_string<char>*)arg[1]);
}

static  void method_33780( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::auto_ptr<edm::reftobase::RefHolderBase>)((((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->holder)());
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->holder)();
}

static  void method_33781( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::auto_ptr<edm::reftobase::BaseVectorHolder<reco::Candidate> >)((((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->makeVectorHolder)());
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->makeVectorHolder)();
}

static  void method_33782( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::auto_ptr<edm::reftobase::RefVectorHolderBase>)((((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->makeVectorBaseHolder)());
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->makeVectorBaseHolder)();
}

static  void method_33783( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->productGetter)());
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->productGetter)();
}

static  void method_33784( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->hasProductCache)());
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->hasProductCache)();
}

static  void method_33785( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->product)());
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->product)();
}

static  void method_33786( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->isAvailable)());
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->isAvailable)();
}

static  void method_33787( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (short)((((::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->Class_Version)());
  else   (((::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->Class_Version)();
}

static void method_newdel_21547( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

static void method_x69( void* retaddr, void*, const std::vector<void*>&, void*)
{
  typedef std::vector<std::pair< ::Reflex::Base, int> > Bases_t;
  static Bases_t s_bases;
  if ( !s_bases.size() ) {
    s_bases.push_back(std::make_pair(::Reflex::Base( ::Reflex::TypeBuilder(Reflex::Literal("edm::reftobase::BaseHolder<reco::Candidate>")), ::Reflex::BaseOffset< ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >,::edm::reftobase::BaseHolder<reco::Candidate> >::Get(),::Reflex::PUBLIC), 0));
  }
  if (retaddr) *(Bases_t**)retaddr = &s_bases;
}

//------Dictionary for class Holder<reco::Candidate,edm::Ref<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet, edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet> > > -------------------------------
void __edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s__db_datamem(Reflex::Class*);
void __edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s__datamem_bld(&__edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s__funcmem_bld(&__edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s__db_funcmem);
void __edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >"), typeid(::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >), sizeof(::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::VIRTUAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("ClassVersion"), ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >::Class_Version())
  .AddBase(type_21536, ::Reflex::BaseOffset< ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >, ::edm::reftobase::BaseHolder<reco::Candidate> >::Get(), ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("Holder"), constructor_33767, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_38057), Reflex::Literal("Holder"), constructor_33768, 0, "other", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_12892), Reflex::Literal("Holder"), constructor_33769, 0, "r", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~Holder"), destructor_33772, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::DESTRUCTOR )
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_21547, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getBasesTable"), method_x69, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s__funcmem_bld);
}

//------Delayed data member builder for class Holder<reco::Candidate,edm::Ref<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet, edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet> > > -------------------
void __edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_4740, Reflex::Literal("ref_"), OffsetOf(__shadow__::__edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s_, ref_), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class Holder<reco::Candidate,edm::Ref<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet, edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet> > > -------------------
void __edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_38058, type_38057), Reflex::Literal("operator="), operator_33770, 0, "rhs", ::Reflex::PUBLIC | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_38058), Reflex::Literal("swap"), method_33771, 0, "other", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_33978), Reflex::Literal("clone"), method_33773, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_33981), Reflex::Literal("getPtr"), method_33774, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4689), Reflex::Literal("id"), method_33775, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2096), Reflex::Literal("key"), method_33776, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574, type_38043), Reflex::Literal("isEqualTo"), method_33777, 0, "rhs", ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_12892), Reflex::Literal("getRef"), method_33778, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574, type_19718, type_10023), Reflex::Literal("fillRefIfMyTypeMatches"), method_33779, 0, "fillme;msg", ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2722), Reflex::Literal("holder"), method_33780, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2723), Reflex::Literal("makeVectorHolder"), method_33781, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2720), Reflex::Literal("makeVectorBaseHolder"), method_33782, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_18571), Reflex::Literal("productGetter"), method_33783, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("hasProductCache"), method_33784, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3933), Reflex::Literal("product"), method_33785, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("isAvailable"), method_33786, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_231), Reflex::Literal("Class_Version"), method_33787, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC);
}
//------Stub functions for class Holder<reco::Candidate,edm::Ref<std::vector<reco::BasicJet, std::allocator<reco::BasicJet> >, reco::BasicJet, edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet, std::allocator<reco::BasicJet> >, reco::BasicJet> > > -------------------------------
static void constructor_33811( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >();
  else ::new(mem) ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >();
}

static void constructor_33812( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >(*(const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)arg[0]);
  else ::new(mem) ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >(*(const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)arg[0]);
}

static void constructor_33813( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >(*(const ::edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)arg[0]);
  else ::new(mem) ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >(*(const ::edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)arg[0]);
}

static  void operator_33814( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->operator=)(*(const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)arg[0]);
  else   (((::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->operator=)(*(const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)arg[0]);
}

static  void method_33815( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->swap)(*(::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)arg[0]);
}

static void destructor_33816(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >::~Holder)();
}
static  void method_33817( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->clone)());
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->clone)();
}

static  void method_33818( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->getPtr)());
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->getPtr)();
}

static  void method_33819( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::ProductID)((((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->id)());
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->id)();
}

static  void method_33820( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (size_t)((((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->key)());
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->key)();
}

static  void method_33821( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->isEqualTo)(*(const ::edm::reftobase::BaseHolder<reco::Candidate>*)arg[0]));
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->isEqualTo)(*(const ::edm::reftobase::BaseHolder<reco::Candidate>*)arg[0]);
}

static  void method_33822( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->getRef)();
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->getRef)();
}

static  void method_33823( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->fillRefIfMyTypeMatches)(*(::edm::reftobase::RefHolderBase*)arg[0],
    *(::std::basic_string<char>*)arg[1]));
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->fillRefIfMyTypeMatches)(*(::edm::reftobase::RefHolderBase*)arg[0],
    *(::std::basic_string<char>*)arg[1]);
}

static  void method_33824( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::auto_ptr<edm::reftobase::RefHolderBase>)((((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->holder)());
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->holder)();
}

static  void method_33825( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::auto_ptr<edm::reftobase::BaseVectorHolder<reco::Candidate> >)((((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->makeVectorHolder)());
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->makeVectorHolder)();
}

static  void method_33826( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::auto_ptr<edm::reftobase::RefVectorHolderBase>)((((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->makeVectorBaseHolder)());
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->makeVectorBaseHolder)();
}

static  void method_33827( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->productGetter)());
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->productGetter)();
}

static  void method_33828( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->hasProductCache)());
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->hasProductCache)();
}

static  void method_33829( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->product)());
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->product)();
}

static  void method_33830( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->isAvailable)());
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->isAvailable)();
}

static  void method_33831( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (short)((((::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->Class_Version)());
  else   (((::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->Class_Version)();
}

static void method_newdel_21549( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

static void method_x71( void* retaddr, void*, const std::vector<void*>&, void*)
{
  typedef std::vector<std::pair< ::Reflex::Base, int> > Bases_t;
  static Bases_t s_bases;
  if ( !s_bases.size() ) {
    s_bases.push_back(std::make_pair(::Reflex::Base( ::Reflex::TypeBuilder(Reflex::Literal("edm::reftobase::BaseHolder<reco::Candidate>")), ::Reflex::BaseOffset< ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >,::edm::reftobase::BaseHolder<reco::Candidate> >::Get(),::Reflex::PUBLIC), 0));
  }
  if (retaddr) *(Bases_t**)retaddr = &s_bases;
}

//------Dictionary for class Holder<reco::Candidate,edm::Ref<std::vector<reco::BasicJet, std::allocator<reco::BasicJet> >, reco::BasicJet, edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet, std::allocator<reco::BasicJet> >, reco::BasicJet> > > -------------------------------
void __edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s_s__db_datamem(Reflex::Class*);
void __edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s_s__datamem_bld(&__edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s_s__funcmem_bld(&__edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s_s__db_funcmem);
void __edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >"), typeid(::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >), sizeof(::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::VIRTUAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("ClassVersion"), ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >::Class_Version())
  .AddBase(type_21536, ::Reflex::BaseOffset< ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >, ::edm::reftobase::BaseHolder<reco::Candidate> >::Get(), ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("Holder"), constructor_33811, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_38061), Reflex::Literal("Holder"), constructor_33812, 0, "other", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_33246), Reflex::Literal("Holder"), constructor_33813, 0, "r", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~Holder"), destructor_33816, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::DESTRUCTOR )
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_21549, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getBasesTable"), method_x71, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s_s__funcmem_bld);
}

//------Delayed data member builder for class Holder<reco::Candidate,edm::Ref<std::vector<reco::BasicJet, std::allocator<reco::BasicJet> >, reco::BasicJet, edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet, std::allocator<reco::BasicJet> >, reco::BasicJet> > > -------------------
void __edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_4742, Reflex::Literal("ref_"), OffsetOf(__shadow__::__edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s_s_, ref_), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class Holder<reco::Candidate,edm::Ref<std::vector<reco::BasicJet, std::allocator<reco::BasicJet> >, reco::BasicJet, edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet, std::allocator<reco::BasicJet> >, reco::BasicJet> > > -------------------
void __edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_38062, type_38061), Reflex::Literal("operator="), operator_33814, 0, "rhs", ::Reflex::PUBLIC | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_38062), Reflex::Literal("swap"), method_33815, 0, "other", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_33978), Reflex::Literal("clone"), method_33817, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_33981), Reflex::Literal("getPtr"), method_33818, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4689), Reflex::Literal("id"), method_33819, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2096), Reflex::Literal("key"), method_33820, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574, type_38043), Reflex::Literal("isEqualTo"), method_33821, 0, "rhs", ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_33246), Reflex::Literal("getRef"), method_33822, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574, type_19718, type_10023), Reflex::Literal("fillRefIfMyTypeMatches"), method_33823, 0, "fillme;msg", ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2722), Reflex::Literal("holder"), method_33824, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2723), Reflex::Literal("makeVectorHolder"), method_33825, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2720), Reflex::Literal("makeVectorBaseHolder"), method_33826, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_18571), Reflex::Literal("productGetter"), method_33827, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("hasProductCache"), method_33828, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3933), Reflex::Literal("product"), method_33829, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("isAvailable"), method_33830, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_231), Reflex::Literal("Class_Version"), method_33831, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC);
}
//------Stub functions for class Holder<reco::Candidate,edm::Ref<std::vector<reco::GenJet, std::allocator<reco::GenJet> >, reco::GenJet, edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet, std::allocator<reco::GenJet> >, reco::GenJet> > > -------------------------------
static void constructor_33833( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >();
  else ::new(mem) ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >();
}

static void constructor_33834( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >(*(const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)arg[0]);
  else ::new(mem) ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >(*(const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)arg[0]);
}

static void constructor_33835( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >(*(const ::edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)arg[0]);
  else ::new(mem) ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >(*(const ::edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)arg[0]);
}

static  void operator_33836( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->operator=)(*(const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)arg[0]);
  else   (((::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->operator=)(*(const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)arg[0]);
}

static  void method_33837( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->swap)(*(::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)arg[0]);
}

static void destructor_33838(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >::~Holder)();
}
static  void method_33839( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->clone)());
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->clone)();
}

static  void method_33840( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->getPtr)());
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->getPtr)();
}

static  void method_33841( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::ProductID)((((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->id)());
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->id)();
}

static  void method_33842( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (size_t)((((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->key)());
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->key)();
}

static  void method_33843( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->isEqualTo)(*(const ::edm::reftobase::BaseHolder<reco::Candidate>*)arg[0]));
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->isEqualTo)(*(const ::edm::reftobase::BaseHolder<reco::Candidate>*)arg[0]);
}

static  void method_33844( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->getRef)();
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->getRef)();
}

static  void method_33845( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->fillRefIfMyTypeMatches)(*(::edm::reftobase::RefHolderBase*)arg[0],
    *(::std::basic_string<char>*)arg[1]));
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->fillRefIfMyTypeMatches)(*(::edm::reftobase::RefHolderBase*)arg[0],
    *(::std::basic_string<char>*)arg[1]);
}

static  void method_33846( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::auto_ptr<edm::reftobase::RefHolderBase>)((((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->holder)());
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->holder)();
}

static  void method_33847( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::auto_ptr<edm::reftobase::BaseVectorHolder<reco::Candidate> >)((((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->makeVectorHolder)());
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->makeVectorHolder)();
}

static  void method_33848( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::auto_ptr<edm::reftobase::RefVectorHolderBase>)((((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->makeVectorBaseHolder)());
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->makeVectorBaseHolder)();
}

static  void method_33849( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->productGetter)());
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->productGetter)();
}

static  void method_33850( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->hasProductCache)());
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->hasProductCache)();
}

static  void method_33851( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->product)());
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->product)();
}

static  void method_33852( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->isAvailable)());
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->isAvailable)();
}

static  void method_33853( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (short)((((::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->Class_Version)());
  else   (((::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->Class_Version)();
}

static void method_newdel_21550( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

static void method_x73( void* retaddr, void*, const std::vector<void*>&, void*)
{
  typedef std::vector<std::pair< ::Reflex::Base, int> > Bases_t;
  static Bases_t s_bases;
  if ( !s_bases.size() ) {
    s_bases.push_back(std::make_pair(::Reflex::Base( ::Reflex::TypeBuilder(Reflex::Literal("edm::reftobase::BaseHolder<reco::Candidate>")), ::Reflex::BaseOffset< ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >,::edm::reftobase::BaseHolder<reco::Candidate> >::Get(),::Reflex::PUBLIC), 0));
  }
  if (retaddr) *(Bases_t**)retaddr = &s_bases;
}

//------Dictionary for class Holder<reco::Candidate,edm::Ref<std::vector<reco::GenJet, std::allocator<reco::GenJet> >, reco::GenJet, edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet, std::allocator<reco::GenJet> >, reco::GenJet> > > -------------------------------
void __edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s_s__db_datamem(Reflex::Class*);
void __edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s_s__datamem_bld(&__edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s_s__funcmem_bld(&__edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s_s__db_funcmem);
void __edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >"), typeid(::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >), sizeof(::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::VIRTUAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("ClassVersion"), ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >::Class_Version())
  .AddBase(type_21536, ::Reflex::BaseOffset< ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >, ::edm::reftobase::BaseHolder<reco::Candidate> >::Get(), ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("Holder"), constructor_33833, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_38063), Reflex::Literal("Holder"), constructor_33834, 0, "other", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_33260), Reflex::Literal("Holder"), constructor_33835, 0, "r", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~Holder"), destructor_33838, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::DESTRUCTOR )
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_21550, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getBasesTable"), method_x73, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s_s__funcmem_bld);
}

//------Delayed data member builder for class Holder<reco::Candidate,edm::Ref<std::vector<reco::GenJet, std::allocator<reco::GenJet> >, reco::GenJet, edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet, std::allocator<reco::GenJet> >, reco::GenJet> > > -------------------
void __edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_4743, Reflex::Literal("ref_"), OffsetOf(__shadow__::__edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s_s_, ref_), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class Holder<reco::Candidate,edm::Ref<std::vector<reco::GenJet, std::allocator<reco::GenJet> >, reco::GenJet, edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet, std::allocator<reco::GenJet> >, reco::GenJet> > > -------------------
void __edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_38064, type_38063), Reflex::Literal("operator="), operator_33836, 0, "rhs", ::Reflex::PUBLIC | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_38064), Reflex::Literal("swap"), method_33837, 0, "other", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_33978), Reflex::Literal("clone"), method_33839, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_33981), Reflex::Literal("getPtr"), method_33840, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4689), Reflex::Literal("id"), method_33841, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2096), Reflex::Literal("key"), method_33842, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574, type_38043), Reflex::Literal("isEqualTo"), method_33843, 0, "rhs", ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_33260), Reflex::Literal("getRef"), method_33844, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574, type_19718, type_10023), Reflex::Literal("fillRefIfMyTypeMatches"), method_33845, 0, "fillme;msg", ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2722), Reflex::Literal("holder"), method_33846, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2723), Reflex::Literal("makeVectorHolder"), method_33847, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2720), Reflex::Literal("makeVectorBaseHolder"), method_33848, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_18571), Reflex::Literal("productGetter"), method_33849, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("hasProductCache"), method_33850, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3933), Reflex::Literal("product"), method_33851, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("isAvailable"), method_33852, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_231), Reflex::Literal("Class_Version"), method_33853, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC);
}
//------Stub functions for class Holder<reco::Candidate,edm::Ref<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> >, reco::CaloJet, edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> >, reco::CaloJet> > > -------------------------------
static void constructor_33855( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >();
  else ::new(mem) ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >();
}

static void constructor_33856( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >(*(const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)arg[0]);
  else ::new(mem) ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >(*(const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)arg[0]);
}

static void constructor_33857( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >(*(const ::edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)arg[0]);
  else ::new(mem) ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >(*(const ::edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)arg[0]);
}

static  void operator_33858( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->operator=)(*(const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)arg[0]);
  else   (((::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->operator=)(*(const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)arg[0]);
}

static  void method_33859( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->swap)(*(::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)arg[0]);
}

static void destructor_33860(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >::~Holder)();
}
static  void method_33861( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->clone)());
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->clone)();
}

static  void method_33862( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->getPtr)());
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->getPtr)();
}

static  void method_33863( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::ProductID)((((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->id)());
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->id)();
}

static  void method_33864( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (size_t)((((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->key)());
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->key)();
}

static  void method_33865( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->isEqualTo)(*(const ::edm::reftobase::BaseHolder<reco::Candidate>*)arg[0]));
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->isEqualTo)(*(const ::edm::reftobase::BaseHolder<reco::Candidate>*)arg[0]);
}

static  void method_33866( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->getRef)();
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->getRef)();
}

static  void method_33867( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->fillRefIfMyTypeMatches)(*(::edm::reftobase::RefHolderBase*)arg[0],
    *(::std::basic_string<char>*)arg[1]));
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->fillRefIfMyTypeMatches)(*(::edm::reftobase::RefHolderBase*)arg[0],
    *(::std::basic_string<char>*)arg[1]);
}

static  void method_33868( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::auto_ptr<edm::reftobase::RefHolderBase>)((((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->holder)());
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->holder)();
}

static  void method_33869( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::auto_ptr<edm::reftobase::BaseVectorHolder<reco::Candidate> >)((((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->makeVectorHolder)());
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->makeVectorHolder)();
}

static  void method_33870( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::auto_ptr<edm::reftobase::RefVectorHolderBase>)((((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->makeVectorBaseHolder)());
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->makeVectorBaseHolder)();
}

static  void method_33871( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->productGetter)());
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->productGetter)();
}

static  void method_33872( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->hasProductCache)());
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->hasProductCache)();
}

static  void method_33873( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->product)());
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->product)();
}

static  void method_33874( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->isAvailable)());
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->isAvailable)();
}

static  void method_33875( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (short)((((::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->Class_Version)());
  else   (((::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->Class_Version)();
}

static void method_newdel_21551( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

static void method_x75( void* retaddr, void*, const std::vector<void*>&, void*)
{
  typedef std::vector<std::pair< ::Reflex::Base, int> > Bases_t;
  static Bases_t s_bases;
  if ( !s_bases.size() ) {
    s_bases.push_back(std::make_pair(::Reflex::Base( ::Reflex::TypeBuilder(Reflex::Literal("edm::reftobase::BaseHolder<reco::Candidate>")), ::Reflex::BaseOffset< ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >,::edm::reftobase::BaseHolder<reco::Candidate> >::Get(),::Reflex::PUBLIC), 0));
  }
  if (retaddr) *(Bases_t**)retaddr = &s_bases;
}

//------Dictionary for class Holder<reco::Candidate,edm::Ref<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> >, reco::CaloJet, edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> >, reco::CaloJet> > > -------------------------------
void __edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s__db_datamem(Reflex::Class*);
void __edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s__datamem_bld(&__edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s__funcmem_bld(&__edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s__db_funcmem);
void __edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >"), typeid(::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >), sizeof(::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::VIRTUAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("ClassVersion"), ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >::Class_Version())
  .AddBase(type_21536, ::Reflex::BaseOffset< ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >, ::edm::reftobase::BaseHolder<reco::Candidate> >::Get(), ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("Holder"), constructor_33855, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_38065), Reflex::Literal("Holder"), constructor_33856, 0, "other", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_13737), Reflex::Literal("Holder"), constructor_33857, 0, "r", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~Holder"), destructor_33860, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::DESTRUCTOR )
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_21551, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getBasesTable"), method_x75, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s__funcmem_bld);
}

//------Delayed data member builder for class Holder<reco::Candidate,edm::Ref<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> >, reco::CaloJet, edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> >, reco::CaloJet> > > -------------------
void __edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_4744, Reflex::Literal("ref_"), OffsetOf(__shadow__::__edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s_, ref_), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class Holder<reco::Candidate,edm::Ref<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> >, reco::CaloJet, edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> >, reco::CaloJet> > > -------------------
void __edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_38066, type_38065), Reflex::Literal("operator="), operator_33858, 0, "rhs", ::Reflex::PUBLIC | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_38066), Reflex::Literal("swap"), method_33859, 0, "other", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_33978), Reflex::Literal("clone"), method_33861, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_33981), Reflex::Literal("getPtr"), method_33862, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4689), Reflex::Literal("id"), method_33863, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2096), Reflex::Literal("key"), method_33864, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574, type_38043), Reflex::Literal("isEqualTo"), method_33865, 0, "rhs", ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13737), Reflex::Literal("getRef"), method_33866, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574, type_19718, type_10023), Reflex::Literal("fillRefIfMyTypeMatches"), method_33867, 0, "fillme;msg", ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2722), Reflex::Literal("holder"), method_33868, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2723), Reflex::Literal("makeVectorHolder"), method_33869, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2720), Reflex::Literal("makeVectorBaseHolder"), method_33870, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_18571), Reflex::Literal("productGetter"), method_33871, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("hasProductCache"), method_33872, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3933), Reflex::Literal("product"), method_33873, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("isAvailable"), method_33874, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_231), Reflex::Literal("Class_Version"), method_33875, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC);
}
//------Stub functions for class Specific -------------------------------
static void destructor_34636(void*, void * o, const std::vector<void*>&, void *) {
(((::reco::PFJet::Specific*)o)->::reco::PFJet::Specific::~Specific)();
}
static  void operator_34637( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::reco::PFJet::Specific*)o)->operator=)(*(const ::reco::PFJet::Specific*)arg[0]);
  else   (((::reco::PFJet::Specific*)o)->operator=)(*(const ::reco::PFJet::Specific*)arg[0]);
}

static void constructor_34638( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::reco::PFJet::Specific(*(const ::reco::PFJet::Specific*)arg[0]);
  else ::new(mem) ::reco::PFJet::Specific(*(const ::reco::PFJet::Specific*)arg[0]);
}

static void constructor_34639( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::reco::PFJet::Specific();
  else ::new(mem) ::reco::PFJet::Specific();
}

static void method_newdel_24150( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::reco::PFJet::Specific >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::reco::PFJet::Specific >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::reco::PFJet::Specific >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::reco::PFJet::Specific >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::reco::PFJet::Specific >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class Specific -------------------------------
void __reco__PFJet__Specific_db_datamem(Reflex::Class*);
void __reco__PFJet__Specific_db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __reco__PFJet__Specific_datamem_bld(&__reco__PFJet__Specific_db_datamem);
Reflex::GenreflexMemberBuilder __reco__PFJet__Specific_funcmem_bld(&__reco__PFJet__Specific_db_funcmem);
void __reco__PFJet__Specific_dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("reco::PFJet::Specific"), typeid(::reco::PFJet::Specific), sizeof(::reco::PFJet::Specific), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::STRUCT)
  .AddProperty(Reflex::Literal("ClassVersion"), "10")
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~Specific"), destructor_34636, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::DESTRUCTOR )
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_38263, type_34640), Reflex::Literal("operator="), operator_34637, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_34640), Reflex::Literal("Specific"), constructor_34638, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("Specific"), constructor_34639, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_24150, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__reco__PFJet__Specific_datamem_bld);
}

//------Delayed data member builder for class Specific -------------------
void __reco__PFJet__Specific_db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_878, Reflex::Literal("mChargedHadronEnergy"), OffsetOf(__shadow__::__reco__PFJet__Specific, mChargedHadronEnergy), ::Reflex::PUBLIC)
  .AddDataMember(type_878, Reflex::Literal("mNeutralHadronEnergy"), OffsetOf(__shadow__::__reco__PFJet__Specific, mNeutralHadronEnergy), ::Reflex::PUBLIC)
  .AddDataMember(type_878, Reflex::Literal("mPhotonEnergy"), OffsetOf(__shadow__::__reco__PFJet__Specific, mPhotonEnergy), ::Reflex::PUBLIC)
  .AddDataMember(type_878, Reflex::Literal("mElectronEnergy"), OffsetOf(__shadow__::__reco__PFJet__Specific, mElectronEnergy), ::Reflex::PUBLIC)
  .AddDataMember(type_878, Reflex::Literal("mMuonEnergy"), OffsetOf(__shadow__::__reco__PFJet__Specific, mMuonEnergy), ::Reflex::PUBLIC)
  .AddDataMember(type_878, Reflex::Literal("mHFHadronEnergy"), OffsetOf(__shadow__::__reco__PFJet__Specific, mHFHadronEnergy), ::Reflex::PUBLIC)
  .AddDataMember(type_878, Reflex::Literal("mHFEMEnergy"), OffsetOf(__shadow__::__reco__PFJet__Specific, mHFEMEnergy), ::Reflex::PUBLIC)
  .AddDataMember(type_64, Reflex::Literal("mChargedHadronMultiplicity"), OffsetOf(__shadow__::__reco__PFJet__Specific, mChargedHadronMultiplicity), ::Reflex::PUBLIC)
  .AddDataMember(type_64, Reflex::Literal("mNeutralHadronMultiplicity"), OffsetOf(__shadow__::__reco__PFJet__Specific, mNeutralHadronMultiplicity), ::Reflex::PUBLIC)
  .AddDataMember(type_64, Reflex::Literal("mPhotonMultiplicity"), OffsetOf(__shadow__::__reco__PFJet__Specific, mPhotonMultiplicity), ::Reflex::PUBLIC)
  .AddDataMember(type_64, Reflex::Literal("mElectronMultiplicity"), OffsetOf(__shadow__::__reco__PFJet__Specific, mElectronMultiplicity), ::Reflex::PUBLIC)
  .AddDataMember(type_64, Reflex::Literal("mMuonMultiplicity"), OffsetOf(__shadow__::__reco__PFJet__Specific, mMuonMultiplicity), ::Reflex::PUBLIC)
  .AddDataMember(type_64, Reflex::Literal("mHFHadronMultiplicity"), OffsetOf(__shadow__::__reco__PFJet__Specific, mHFHadronMultiplicity), ::Reflex::PUBLIC)
  .AddDataMember(type_64, Reflex::Literal("mHFEMMultiplicity"), OffsetOf(__shadow__::__reco__PFJet__Specific, mHFEMMultiplicity), ::Reflex::PUBLIC)
  .AddDataMember(type_878, Reflex::Literal("mChargedEmEnergy"), OffsetOf(__shadow__::__reco__PFJet__Specific, mChargedEmEnergy), ::Reflex::PUBLIC)
  .AddDataMember(type_878, Reflex::Literal("mChargedMuEnergy"), OffsetOf(__shadow__::__reco__PFJet__Specific, mChargedMuEnergy), ::Reflex::PUBLIC)
  .AddDataMember(type_878, Reflex::Literal("mNeutralEmEnergy"), OffsetOf(__shadow__::__reco__PFJet__Specific, mNeutralEmEnergy), ::Reflex::PUBLIC)
  .AddDataMember(type_64, Reflex::Literal("mChargedMultiplicity"), OffsetOf(__shadow__::__reco__PFJet__Specific, mChargedMultiplicity), ::Reflex::PUBLIC)
  .AddDataMember(type_64, Reflex::Literal("mNeutralMultiplicity"), OffsetOf(__shadow__::__reco__PFJet__Specific, mNeutralMultiplicity), ::Reflex::PUBLIC);
}
//------Delayed function member builder for class Specific -------------------
void __reco__PFJet__Specific_db_funcmem(Reflex::Class*) {

}
//------Stub functions for class Specific -------------------------------
static void destructor_34655(void*, void * o, const std::vector<void*>&, void *) {
(((::reco::CaloJet::Specific*)o)->::reco::CaloJet::Specific::~Specific)();
}
static  void operator_34656( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::reco::CaloJet::Specific*)o)->operator=)(*(const ::reco::CaloJet::Specific*)arg[0]);
  else   (((::reco::CaloJet::Specific*)o)->operator=)(*(const ::reco::CaloJet::Specific*)arg[0]);
}

static void constructor_34657( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::reco::CaloJet::Specific(*(const ::reco::CaloJet::Specific*)arg[0]);
  else ::new(mem) ::reco::CaloJet::Specific(*(const ::reco::CaloJet::Specific*)arg[0]);
}

static void constructor_34658( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::reco::CaloJet::Specific();
  else ::new(mem) ::reco::CaloJet::Specific();
}

static void method_newdel_24250( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::reco::CaloJet::Specific >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::reco::CaloJet::Specific >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::reco::CaloJet::Specific >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::reco::CaloJet::Specific >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::reco::CaloJet::Specific >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class Specific -------------------------------
void __reco__CaloJet__Specific_db_datamem(Reflex::Class*);
void __reco__CaloJet__Specific_db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __reco__CaloJet__Specific_datamem_bld(&__reco__CaloJet__Specific_db_datamem);
Reflex::GenreflexMemberBuilder __reco__CaloJet__Specific_funcmem_bld(&__reco__CaloJet__Specific_db_funcmem);
void __reco__CaloJet__Specific_dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("reco::CaloJet::Specific"), typeid(::reco::CaloJet::Specific), sizeof(::reco::CaloJet::Specific), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::STRUCT)
  .AddProperty(Reflex::Literal("ClassVersion"), "10")
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~Specific"), destructor_34655, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::DESTRUCTOR )
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_38267, type_34659), Reflex::Literal("operator="), operator_34656, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_34659), Reflex::Literal("Specific"), constructor_34657, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("Specific"), constructor_34658, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_24250, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__reco__CaloJet__Specific_datamem_bld);
}

//------Delayed data member builder for class Specific -------------------
void __reco__CaloJet__Specific_db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_878, Reflex::Literal("mMaxEInEmTowers"), OffsetOf(__shadow__::__reco__CaloJet__Specific, mMaxEInEmTowers), ::Reflex::PUBLIC)
  .AddDataMember(type_878, Reflex::Literal("mMaxEInHadTowers"), OffsetOf(__shadow__::__reco__CaloJet__Specific, mMaxEInHadTowers), ::Reflex::PUBLIC)
  .AddDataMember(type_878, Reflex::Literal("mHadEnergyInHO"), OffsetOf(__shadow__::__reco__CaloJet__Specific, mHadEnergyInHO), ::Reflex::PUBLIC)
  .AddDataMember(type_878, Reflex::Literal("mHadEnergyInHB"), OffsetOf(__shadow__::__reco__CaloJet__Specific, mHadEnergyInHB), ::Reflex::PUBLIC)
  .AddDataMember(type_878, Reflex::Literal("mHadEnergyInHF"), OffsetOf(__shadow__::__reco__CaloJet__Specific, mHadEnergyInHF), ::Reflex::PUBLIC)
  .AddDataMember(type_878, Reflex::Literal("mHadEnergyInHE"), OffsetOf(__shadow__::__reco__CaloJet__Specific, mHadEnergyInHE), ::Reflex::PUBLIC)
  .AddDataMember(type_878, Reflex::Literal("mEmEnergyInEB"), OffsetOf(__shadow__::__reco__CaloJet__Specific, mEmEnergyInEB), ::Reflex::PUBLIC)
  .AddDataMember(type_878, Reflex::Literal("mEmEnergyInEE"), OffsetOf(__shadow__::__reco__CaloJet__Specific, mEmEnergyInEE), ::Reflex::PUBLIC)
  .AddDataMember(type_878, Reflex::Literal("mEmEnergyInHF"), OffsetOf(__shadow__::__reco__CaloJet__Specific, mEmEnergyInHF), ::Reflex::PUBLIC)
  .AddDataMember(type_878, Reflex::Literal("mEnergyFractionHadronic"), OffsetOf(__shadow__::__reco__CaloJet__Specific, mEnergyFractionHadronic), ::Reflex::PUBLIC)
  .AddDataMember(type_878, Reflex::Literal("mEnergyFractionEm"), OffsetOf(__shadow__::__reco__CaloJet__Specific, mEnergyFractionEm), ::Reflex::PUBLIC)
  .AddDataMember(type_878, Reflex::Literal("mTowersArea"), OffsetOf(__shadow__::__reco__CaloJet__Specific, mTowersArea), ::Reflex::PUBLIC);
}
//------Delayed function member builder for class Specific -------------------
void __reco__CaloJet__Specific_db_funcmem(Reflex::Class*) {

}
//------Stub functions for class EtaPhiMoments -------------------------------
static void destructor_34668(void*, void * o, const std::vector<void*>&, void *) {
(((::reco::Jet::EtaPhiMoments*)o)->::reco::Jet::EtaPhiMoments::~EtaPhiMoments)();
}
static  void operator_34669( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::reco::Jet::EtaPhiMoments*)o)->operator=)(*(const ::reco::Jet::EtaPhiMoments*)arg[0]);
  else   (((::reco::Jet::EtaPhiMoments*)o)->operator=)(*(const ::reco::Jet::EtaPhiMoments*)arg[0]);
}

static void constructor_34670( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::reco::Jet::EtaPhiMoments(*(const ::reco::Jet::EtaPhiMoments*)arg[0]);
  else ::new(mem) ::reco::Jet::EtaPhiMoments(*(const ::reco::Jet::EtaPhiMoments*)arg[0]);
}

static void constructor_34671( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::reco::Jet::EtaPhiMoments();
  else ::new(mem) ::reco::Jet::EtaPhiMoments();
}

static void method_newdel_24317( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::reco::Jet::EtaPhiMoments >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::reco::Jet::EtaPhiMoments >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::reco::Jet::EtaPhiMoments >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::reco::Jet::EtaPhiMoments >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::reco::Jet::EtaPhiMoments >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class EtaPhiMoments -------------------------------
void __reco__Jet__EtaPhiMoments_db_datamem(Reflex::Class*);
void __reco__Jet__EtaPhiMoments_db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __reco__Jet__EtaPhiMoments_datamem_bld(&__reco__Jet__EtaPhiMoments_db_datamem);
Reflex::GenreflexMemberBuilder __reco__Jet__EtaPhiMoments_funcmem_bld(&__reco__Jet__EtaPhiMoments_db_funcmem);
void __reco__Jet__EtaPhiMoments_dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("reco::Jet::EtaPhiMoments"), typeid(::reco::Jet::EtaPhiMoments), sizeof(::reco::Jet::EtaPhiMoments), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("ClassVersion"), "10")
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~EtaPhiMoments"), destructor_34668, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::DESTRUCTOR )
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_38270, type_38271), Reflex::Literal("operator="), operator_34669, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_38271), Reflex::Literal("EtaPhiMoments"), constructor_34670, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("EtaPhiMoments"), constructor_34671, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_24317, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__reco__Jet__EtaPhiMoments_datamem_bld);
}

//------Delayed data member builder for class EtaPhiMoments -------------------
void __reco__Jet__EtaPhiMoments_db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_878, Reflex::Literal("etaMean"), OffsetOf(__shadow__::__reco__Jet__EtaPhiMoments, etaMean), ::Reflex::PUBLIC)
  .AddDataMember(type_878, Reflex::Literal("phiMean"), OffsetOf(__shadow__::__reco__Jet__EtaPhiMoments, phiMean), ::Reflex::PUBLIC)
  .AddDataMember(type_878, Reflex::Literal("etaEtaMoment"), OffsetOf(__shadow__::__reco__Jet__EtaPhiMoments, etaEtaMoment), ::Reflex::PUBLIC)
  .AddDataMember(type_878, Reflex::Literal("phiPhiMoment"), OffsetOf(__shadow__::__reco__Jet__EtaPhiMoments, phiPhiMoment), ::Reflex::PUBLIC)
  .AddDataMember(type_878, Reflex::Literal("etaPhiMoment"), OffsetOf(__shadow__::__reco__Jet__EtaPhiMoments, etaPhiMoment), ::Reflex::PUBLIC);
}
//------Delayed function member builder for class EtaPhiMoments -------------------
void __reco__Jet__EtaPhiMoments_db_funcmem(Reflex::Class*) {

}
//------Stub functions for class Specific -------------------------------
static void destructor_34794(void*, void * o, const std::vector<void*>&, void *) {
(((::reco::GenJet::Specific*)o)->::reco::GenJet::Specific::~Specific)();
}
static  void operator_34795( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::reco::GenJet::Specific*)o)->operator=)(*(const ::reco::GenJet::Specific*)arg[0]);
  else   (((::reco::GenJet::Specific*)o)->operator=)(*(const ::reco::GenJet::Specific*)arg[0]);
}

static void constructor_34796( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::reco::GenJet::Specific(*(const ::reco::GenJet::Specific*)arg[0]);
  else ::new(mem) ::reco::GenJet::Specific(*(const ::reco::GenJet::Specific*)arg[0]);
}

static void constructor_34797( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::reco::GenJet::Specific();
  else ::new(mem) ::reco::GenJet::Specific();
}

static void method_newdel_24675( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::reco::GenJet::Specific >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::reco::GenJet::Specific >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::reco::GenJet::Specific >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::reco::GenJet::Specific >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::reco::GenJet::Specific >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class Specific -------------------------------
void __reco__GenJet__Specific_db_datamem(Reflex::Class*);
void __reco__GenJet__Specific_db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __reco__GenJet__Specific_datamem_bld(&__reco__GenJet__Specific_db_datamem);
Reflex::GenreflexMemberBuilder __reco__GenJet__Specific_funcmem_bld(&__reco__GenJet__Specific_db_funcmem);
void __reco__GenJet__Specific_dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("reco::GenJet::Specific"), typeid(::reco::GenJet::Specific), sizeof(::reco::GenJet::Specific), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::STRUCT)
  .AddProperty(Reflex::Literal("ClassVersion"), "14")
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~Specific"), destructor_34794, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::DESTRUCTOR )
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_38300, type_34798), Reflex::Literal("operator="), operator_34795, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_34798), Reflex::Literal("Specific"), constructor_34796, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("Specific"), constructor_34797, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_24675, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__reco__GenJet__Specific_datamem_bld);
}

//------Delayed data member builder for class Specific -------------------
void __reco__GenJet__Specific_db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_878, Reflex::Literal("m_NeEmEnergy"), OffsetOf(__shadow__::__reco__GenJet__Specific, m_NeEmEnergy), ::Reflex::PUBLIC)
  .AddDataMember(type_878, Reflex::Literal("m_EmEnergy"), OffsetOf(__shadow__::__reco__GenJet__Specific, m_EmEnergy), ::Reflex::PUBLIC)
  .AddDataMember(type_878, Reflex::Literal("m_ChHadEnergy"), OffsetOf(__shadow__::__reco__GenJet__Specific, m_ChHadEnergy), ::Reflex::PUBLIC)
  .AddDataMember(type_878, Reflex::Literal("m_HadEnergy"), OffsetOf(__shadow__::__reco__GenJet__Specific, m_HadEnergy), ::Reflex::PUBLIC)
  .AddDataMember(type_878, Reflex::Literal("m_MuEnergy"), OffsetOf(__shadow__::__reco__GenJet__Specific, m_MuEnergy), ::Reflex::PUBLIC)
  .AddDataMember(type_878, Reflex::Literal("m_InvisibleEnergy"), OffsetOf(__shadow__::__reco__GenJet__Specific, m_InvisibleEnergy), ::Reflex::PUBLIC)
  .AddDataMember(type_878, Reflex::Literal("m_AuxiliaryEnergy"), OffsetOf(__shadow__::__reco__GenJet__Specific, m_AuxiliaryEnergy), ::Reflex::PUBLIC);
}
//------Delayed function member builder for class Specific -------------------
void __reco__GenJet__Specific_db_funcmem(Reflex::Class*) {

}
//------Stub functions for class Specific -------------------------------
static void destructor_34833(void*, void * o, const std::vector<void*>&, void *) {
(((::reco::JPTJet::Specific*)o)->::reco::JPTJet::Specific::~Specific)();
}
static  void operator_34834( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::reco::JPTJet::Specific*)o)->operator=)(*(const ::reco::JPTJet::Specific*)arg[0]);
  else   (((::reco::JPTJet::Specific*)o)->operator=)(*(const ::reco::JPTJet::Specific*)arg[0]);
}

static void constructor_34835( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::reco::JPTJet::Specific(*(const ::reco::JPTJet::Specific*)arg[0]);
  else ::new(mem) ::reco::JPTJet::Specific(*(const ::reco::JPTJet::Specific*)arg[0]);
}

static void constructor_34836( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::reco::JPTJet::Specific();
  else ::new(mem) ::reco::JPTJet::Specific();
}

static void method_newdel_24786( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::reco::JPTJet::Specific >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::reco::JPTJet::Specific >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::reco::JPTJet::Specific >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::reco::JPTJet::Specific >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::reco::JPTJet::Specific >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class Specific -------------------------------
void __reco__JPTJet__Specific_db_datamem(Reflex::Class*);
void __reco__JPTJet__Specific_db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __reco__JPTJet__Specific_datamem_bld(&__reco__JPTJet__Specific_db_datamem);
Reflex::GenreflexMemberBuilder __reco__JPTJet__Specific_funcmem_bld(&__reco__JPTJet__Specific_db_funcmem);
void __reco__JPTJet__Specific_dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("reco::JPTJet::Specific"), typeid(::reco::JPTJet::Specific), sizeof(::reco::JPTJet::Specific), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::STRUCT)
  .AddProperty(Reflex::Literal("ClassVersion"), "10")
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~Specific"), destructor_34833, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::DESTRUCTOR )
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_38305, type_34837), Reflex::Literal("operator="), operator_34834, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_34837), Reflex::Literal("Specific"), constructor_34835, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("Specific"), constructor_34836, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_24786, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__reco__JPTJet__Specific_datamem_bld);
}

//------Delayed data member builder for class Specific -------------------
void __reco__JPTJet__Specific_db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_878, Reflex::Literal("mZSPCor"), OffsetOf(__shadow__::__reco__JPTJet__Specific, mZSPCor), ::Reflex::PUBLIC)
  .AddDataMember(type_4714, Reflex::Literal("theCaloJetRef"), OffsetOf(__shadow__::__reco__JPTJet__Specific, theCaloJetRef), ::Reflex::PUBLIC)
  .AddDataMember(type_7530, Reflex::Literal("pionsInVertexInCalo"), OffsetOf(__shadow__::__reco__JPTJet__Specific, pionsInVertexInCalo), ::Reflex::PUBLIC)
  .AddDataMember(type_7530, Reflex::Literal("pionsInVertexOutCalo"), OffsetOf(__shadow__::__reco__JPTJet__Specific, pionsInVertexOutCalo), ::Reflex::PUBLIC)
  .AddDataMember(type_7530, Reflex::Literal("pionsOutVertexInCalo"), OffsetOf(__shadow__::__reco__JPTJet__Specific, pionsOutVertexInCalo), ::Reflex::PUBLIC)
  .AddDataMember(type_7530, Reflex::Literal("muonsInVertexInCalo"), OffsetOf(__shadow__::__reco__JPTJet__Specific, muonsInVertexInCalo), ::Reflex::PUBLIC)
  .AddDataMember(type_7530, Reflex::Literal("muonsInVertexOutCalo"), OffsetOf(__shadow__::__reco__JPTJet__Specific, muonsInVertexOutCalo), ::Reflex::PUBLIC)
  .AddDataMember(type_7530, Reflex::Literal("muonsOutVertexInCalo"), OffsetOf(__shadow__::__reco__JPTJet__Specific, muonsOutVertexInCalo), ::Reflex::PUBLIC)
  .AddDataMember(type_7530, Reflex::Literal("elecsInVertexInCalo"), OffsetOf(__shadow__::__reco__JPTJet__Specific, elecsInVertexInCalo), ::Reflex::PUBLIC)
  .AddDataMember(type_7530, Reflex::Literal("elecsInVertexOutCalo"), OffsetOf(__shadow__::__reco__JPTJet__Specific, elecsInVertexOutCalo), ::Reflex::PUBLIC)
  .AddDataMember(type_7530, Reflex::Literal("elecsOutVertexInCalo"), OffsetOf(__shadow__::__reco__JPTJet__Specific, elecsOutVertexInCalo), ::Reflex::PUBLIC)
  .AddDataMember(type_878, Reflex::Literal("mChargedHadronEnergy"), OffsetOf(__shadow__::__reco__JPTJet__Specific, mChargedHadronEnergy), ::Reflex::PUBLIC)
  .AddDataMember(type_878, Reflex::Literal("mNeutralHadronEnergy"), OffsetOf(__shadow__::__reco__JPTJet__Specific, mNeutralHadronEnergy), ::Reflex::PUBLIC)
  .AddDataMember(type_878, Reflex::Literal("mChargedEmEnergy"), OffsetOf(__shadow__::__reco__JPTJet__Specific, mChargedEmEnergy), ::Reflex::PUBLIC)
  .AddDataMember(type_878, Reflex::Literal("mNeutralEmEnergy"), OffsetOf(__shadow__::__reco__JPTJet__Specific, mNeutralEmEnergy), ::Reflex::PUBLIC)
  .AddDataMember(type_878, Reflex::Literal("mResponseOfChargedWithEff"), OffsetOf(__shadow__::__reco__JPTJet__Specific, mResponseOfChargedWithEff), ::Reflex::PUBLIC)
  .AddDataMember(type_878, Reflex::Literal("mResponseOfChargedWithoutEff"), OffsetOf(__shadow__::__reco__JPTJet__Specific, mResponseOfChargedWithoutEff), ::Reflex::PUBLIC)
  .AddDataMember(type_878, Reflex::Literal("mSumPtOfChargedWithEff"), OffsetOf(__shadow__::__reco__JPTJet__Specific, mSumPtOfChargedWithEff), ::Reflex::PUBLIC)
  .AddDataMember(type_878, Reflex::Literal("mSumPtOfChargedWithoutEff"), OffsetOf(__shadow__::__reco__JPTJet__Specific, mSumPtOfChargedWithoutEff), ::Reflex::PUBLIC)
  .AddDataMember(type_878, Reflex::Literal("mSumEnergyOfChargedWithEff"), OffsetOf(__shadow__::__reco__JPTJet__Specific, mSumEnergyOfChargedWithEff), ::Reflex::PUBLIC)
  .AddDataMember(type_878, Reflex::Literal("mSumEnergyOfChargedWithoutEff"), OffsetOf(__shadow__::__reco__JPTJet__Specific, mSumEnergyOfChargedWithoutEff), ::Reflex::PUBLIC)
  .AddDataMember(type_878, Reflex::Literal("R2momtr"), OffsetOf(__shadow__::__reco__JPTJet__Specific, R2momtr), ::Reflex::PUBLIC)
  .AddDataMember(type_878, Reflex::Literal("Eta2momtr"), OffsetOf(__shadow__::__reco__JPTJet__Specific, Eta2momtr), ::Reflex::PUBLIC)
  .AddDataMember(type_878, Reflex::Literal("Phi2momtr"), OffsetOf(__shadow__::__reco__JPTJet__Specific, Phi2momtr), ::Reflex::PUBLIC)
  .AddDataMember(type_878, Reflex::Literal("Pout"), OffsetOf(__shadow__::__reco__JPTJet__Specific, Pout), ::Reflex::PUBLIC)
  .AddDataMember(type_878, Reflex::Literal("Zch"), OffsetOf(__shadow__::__reco__JPTJet__Specific, Zch), ::Reflex::PUBLIC);
}
//------Delayed function member builder for class Specific -------------------
void __reco__JPTJet__Specific_db_funcmem(Reflex::Class*) {

}
//------Stub functions for class vector<edm::FwdPtr<reco::BasicJet>,std::allocator<edm::FwdPtr<reco::BasicJet> > > -------------------------------
static void constructor_13291( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<edm::FwdPtr<reco::BasicJet> >();
  else ::new(mem) ::std::vector<edm::FwdPtr<reco::BasicJet> >();
}

static void constructor_13292( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<edm::FwdPtr<reco::BasicJet> >(*(const ::std::allocator<edm::FwdPtr<reco::BasicJet> >*)arg[0]);
  else ::new(mem) ::std::vector<edm::FwdPtr<reco::BasicJet> >(*(const ::std::allocator<edm::FwdPtr<reco::BasicJet> >*)arg[0]);
}

static void constructor_13293( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if ( arg.size() == 1 ) {
    if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<edm::FwdPtr<reco::BasicJet> >(*(::std::size_t*)arg[0]);
  else ::new(mem) ::std::vector<edm::FwdPtr<reco::BasicJet> >(*(::std::size_t*)arg[0]);
  }
  else if ( arg.size() == 2 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<edm::FwdPtr<reco::BasicJet> >(*(::std::size_t*)arg[0],
      *(const ::edm::FwdPtr<reco::BasicJet>*)arg[1]);
  else ::new(mem) ::std::vector<edm::FwdPtr<reco::BasicJet> >(*(::std::size_t*)arg[0],
      *(const ::edm::FwdPtr<reco::BasicJet>*)arg[1]);
  }
  else if ( arg.size() == 3 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<edm::FwdPtr<reco::BasicJet> >(*(::std::size_t*)arg[0],
      *(const ::edm::FwdPtr<reco::BasicJet>*)arg[1],
      *(const ::std::allocator<edm::FwdPtr<reco::BasicJet> >*)arg[2]);
  else ::new(mem) ::std::vector<edm::FwdPtr<reco::BasicJet> >(*(::std::size_t*)arg[0],
      *(const ::edm::FwdPtr<reco::BasicJet>*)arg[1],
      *(const ::std::allocator<edm::FwdPtr<reco::BasicJet> >*)arg[2]);
  }
}

static void constructor_13294( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<edm::FwdPtr<reco::BasicJet> >(*(const ::std::vector<edm::FwdPtr<reco::BasicJet> >*)arg[0]);
  else ::new(mem) ::std::vector<edm::FwdPtr<reco::BasicJet> >(*(const ::std::vector<edm::FwdPtr<reco::BasicJet> >*)arg[0]);
}

static void destructor_13295(void*, void * o, const std::vector<void*>&, void *) {
(((::std::vector<edm::FwdPtr<reco::BasicJet> >*)o)->::std::vector<edm::FwdPtr<reco::BasicJet> >::~vector)();
}
static  void operator_13296( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<edm::FwdPtr<reco::BasicJet> >*)o)->operator=)(*(const ::std::vector<edm::FwdPtr<reco::BasicJet> >*)arg[0]);
  else   (((::std::vector<edm::FwdPtr<reco::BasicJet> >*)o)->operator=)(*(const ::std::vector<edm::FwdPtr<reco::BasicJet> >*)arg[0]);
}

static  void method_13297( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<edm::FwdPtr<reco::BasicJet> >*)o)->assign)(*(::std::size_t*)arg[0],
    *(const ::edm::FwdPtr<reco::BasicJet>*)arg[1]);
}

static  void method_13298( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::BasicJet>*,std::vector<edm::FwdPtr<reco::BasicJet> > >)((((::std::vector<edm::FwdPtr<reco::BasicJet> >*)o)->begin)());
  else   (((::std::vector<edm::FwdPtr<reco::BasicJet> >*)o)->begin)();
}

static  void method_13299( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<const edm::FwdPtr<reco::BasicJet>*,std::vector<edm::FwdPtr<reco::BasicJet> > >)((((const ::std::vector<edm::FwdPtr<reco::BasicJet> >*)o)->begin)());
  else   (((const ::std::vector<edm::FwdPtr<reco::BasicJet> >*)o)->begin)();
}

static  void method_13300( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::BasicJet>*,std::vector<edm::FwdPtr<reco::BasicJet> > >)((((::std::vector<edm::FwdPtr<reco::BasicJet> >*)o)->end)());
  else   (((::std::vector<edm::FwdPtr<reco::BasicJet> >*)o)->end)();
}

static  void method_13301( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<const edm::FwdPtr<reco::BasicJet>*,std::vector<edm::FwdPtr<reco::BasicJet> > >)((((const ::std::vector<edm::FwdPtr<reco::BasicJet> >*)o)->end)());
  else   (((const ::std::vector<edm::FwdPtr<reco::BasicJet> >*)o)->end)();
}

static  void method_13306( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::std::vector<edm::FwdPtr<reco::BasicJet> >*)o)->size)());
  else   (((const ::std::vector<edm::FwdPtr<reco::BasicJet> >*)o)->size)();
}

static  void method_13307( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::std::vector<edm::FwdPtr<reco::BasicJet> >*)o)->max_size)());
  else   (((const ::std::vector<edm::FwdPtr<reco::BasicJet> >*)o)->max_size)();
}

static  void method_13308( void*, void* o, const std::vector<void*>& arg, void*)
{
  if ( arg.size() == 1 ) {
    (((::std::vector<edm::FwdPtr<reco::BasicJet> >*)o)->resize)(*(::std::size_t*)arg[0]);
  }
  else if ( arg.size() == 2 ) { 
    (((::std::vector<edm::FwdPtr<reco::BasicJet> >*)o)->resize)(*(::std::size_t*)arg[0],
      *(::edm::FwdPtr<reco::BasicJet>*)arg[1]);
  }
}

static  void method_13309( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::std::vector<edm::FwdPtr<reco::BasicJet> >*)o)->capacity)());
  else   (((const ::std::vector<edm::FwdPtr<reco::BasicJet> >*)o)->capacity)();
}

static  void method_13310( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::std::vector<edm::FwdPtr<reco::BasicJet> >*)o)->empty)());
  else   (((const ::std::vector<edm::FwdPtr<reco::BasicJet> >*)o)->empty)();
}

static  void method_13311( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<edm::FwdPtr<reco::BasicJet> >*)o)->reserve)(*(::std::size_t*)arg[0]);
}

static  void operator_13312( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<edm::FwdPtr<reco::BasicJet> >*)o)->operator[])(*(::std::size_t*)arg[0]);
  else   (((::std::vector<edm::FwdPtr<reco::BasicJet> >*)o)->operator[])(*(::std::size_t*)arg[0]);
}

static  void operator_13313( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<edm::FwdPtr<reco::BasicJet> >*)o)->operator[])(*(::std::size_t*)arg[0]);
  else   (((const ::std::vector<edm::FwdPtr<reco::BasicJet> >*)o)->operator[])(*(::std::size_t*)arg[0]);
}

static  void method_13315( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<edm::FwdPtr<reco::BasicJet> >*)o)->at)(*(::std::size_t*)arg[0]);
  else   (((::std::vector<edm::FwdPtr<reco::BasicJet> >*)o)->at)(*(::std::size_t*)arg[0]);
}

static  void method_13316( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<edm::FwdPtr<reco::BasicJet> >*)o)->at)(*(::std::size_t*)arg[0]);
  else   (((const ::std::vector<edm::FwdPtr<reco::BasicJet> >*)o)->at)(*(::std::size_t*)arg[0]);
}

static  void method_13317( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<edm::FwdPtr<reco::BasicJet> >*)o)->front)();
  else   (((::std::vector<edm::FwdPtr<reco::BasicJet> >*)o)->front)();
}

static  void method_13318( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<edm::FwdPtr<reco::BasicJet> >*)o)->front)();
  else   (((const ::std::vector<edm::FwdPtr<reco::BasicJet> >*)o)->front)();
}

static  void method_13319( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<edm::FwdPtr<reco::BasicJet> >*)o)->back)();
  else   (((::std::vector<edm::FwdPtr<reco::BasicJet> >*)o)->back)();
}

static  void method_13320( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<edm::FwdPtr<reco::BasicJet> >*)o)->back)();
  else   (((const ::std::vector<edm::FwdPtr<reco::BasicJet> >*)o)->back)();
}

static  void method_13321( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((::std::vector<edm::FwdPtr<reco::BasicJet> >*)o)->data)());
  else   (((::std::vector<edm::FwdPtr<reco::BasicJet> >*)o)->data)();
}

static  void method_13322( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::std::vector<edm::FwdPtr<reco::BasicJet> >*)o)->data)());
  else   (((const ::std::vector<edm::FwdPtr<reco::BasicJet> >*)o)->data)();
}

static  void method_13323( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<edm::FwdPtr<reco::BasicJet> >*)o)->push_back)(*(const ::edm::FwdPtr<reco::BasicJet>*)arg[0]);
}

static  void method_13324( void*, void* o, const std::vector<void*>&, void*)
{
  (((::std::vector<edm::FwdPtr<reco::BasicJet> >*)o)->pop_back)();
}

static  void method_13325( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::BasicJet>*,std::vector<edm::FwdPtr<reco::BasicJet> > >)((((::std::vector<edm::FwdPtr<reco::BasicJet> >*)o)->insert)(*(::__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::BasicJet>*,std::vector<edm::FwdPtr<reco::BasicJet> > >*)arg[0],
    *(const ::edm::FwdPtr<reco::BasicJet>*)arg[1]));
  else   (((::std::vector<edm::FwdPtr<reco::BasicJet> >*)o)->insert)(*(::__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::BasicJet>*,std::vector<edm::FwdPtr<reco::BasicJet> > >*)arg[0],
    *(const ::edm::FwdPtr<reco::BasicJet>*)arg[1]);
}

static  void method_13326( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<edm::FwdPtr<reco::BasicJet> >*)o)->insert)(*(::__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::BasicJet>*,std::vector<edm::FwdPtr<reco::BasicJet> > >*)arg[0],
    *(::std::size_t*)arg[1],
    *(const ::edm::FwdPtr<reco::BasicJet>*)arg[2]);
}

static  void method_13327( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::BasicJet>*,std::vector<edm::FwdPtr<reco::BasicJet> > >)((((::std::vector<edm::FwdPtr<reco::BasicJet> >*)o)->erase)(*(::__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::BasicJet>*,std::vector<edm::FwdPtr<reco::BasicJet> > >*)arg[0]));
  else   (((::std::vector<edm::FwdPtr<reco::BasicJet> >*)o)->erase)(*(::__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::BasicJet>*,std::vector<edm::FwdPtr<reco::BasicJet> > >*)arg[0]);
}

static  void method_13328( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::BasicJet>*,std::vector<edm::FwdPtr<reco::BasicJet> > >)((((::std::vector<edm::FwdPtr<reco::BasicJet> >*)o)->erase)(*(::__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::BasicJet>*,std::vector<edm::FwdPtr<reco::BasicJet> > >*)arg[0],
    *(::__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::BasicJet>*,std::vector<edm::FwdPtr<reco::BasicJet> > >*)arg[1]));
  else   (((::std::vector<edm::FwdPtr<reco::BasicJet> >*)o)->erase)(*(::__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::BasicJet>*,std::vector<edm::FwdPtr<reco::BasicJet> > >*)arg[0],
    *(::__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::BasicJet>*,std::vector<edm::FwdPtr<reco::BasicJet> > >*)arg[1]);
}

static  void method_13329( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<edm::FwdPtr<reco::BasicJet> >*)o)->swap)(*(::std::vector<edm::FwdPtr<reco::BasicJet> >*)arg[0]);
}

static  void method_13330( void*, void* o, const std::vector<void*>&, void*)
{
  (((::std::vector<edm::FwdPtr<reco::BasicJet> >*)o)->clear)();
}

static void method_newdel_2981( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::std::vector<edm::FwdPtr<reco::BasicJet> > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::std::vector<edm::FwdPtr<reco::BasicJet> > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::std::vector<edm::FwdPtr<reco::BasicJet> > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::std::vector<edm::FwdPtr<reco::BasicJet> > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::std::vector<edm::FwdPtr<reco::BasicJet> > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

static void method_x82( void* retaddr, void*, const std::vector<void*>&, void*)
{
  typedef std::vector<std::pair< ::Reflex::Base, int> > Bases_t;
  static Bases_t s_bases;
  if ( !s_bases.size() ) {
    s_bases.push_back(std::make_pair(::Reflex::Base( ::Reflex::TypeBuilder(Reflex::Literal("std::_Vector_base<edm::FwdPtr<reco::BasicJet>,std::allocator<edm::FwdPtr<reco::BasicJet> > >")), ::Reflex::BaseOffset< ::std::vector<edm::FwdPtr<reco::BasicJet> >,::std::_Vector_base<edm::FwdPtr<reco::BasicJet>,std::allocator<edm::FwdPtr<reco::BasicJet> > > >::Get(),::Reflex::PROTECTED), 0));
  }
  if (retaddr) *(Bases_t**)retaddr = &s_bases;
}

static void method_x83( void* retaddr, void*, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**) retaddr = ::Reflex::Proxy< ::std::vector<edm::FwdPtr<reco::BasicJet> > >::Generate();
  else ::Reflex::Proxy< ::std::vector<edm::FwdPtr<reco::BasicJet> > >::Generate();
}

//------Dictionary for class vector<edm::FwdPtr<reco::BasicJet>,std::allocator<edm::FwdPtr<reco::BasicJet> > > -------------------------------
void __std__vector_edm__FwdPtr_reco__BasicJet_s__db_datamem(Reflex::Class*);
void __std__vector_edm__FwdPtr_reco__BasicJet_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __std__vector_edm__FwdPtr_reco__BasicJet_s__datamem_bld(&__std__vector_edm__FwdPtr_reco__BasicJet_s__db_datamem);
Reflex::GenreflexMemberBuilder __std__vector_edm__FwdPtr_reco__BasicJet_s__funcmem_bld(&__std__vector_edm__FwdPtr_reco__BasicJet_s__db_funcmem);
void __std__vector_edm__FwdPtr_reco__BasicJet_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("std::vector<edm::FwdPtr<reco::BasicJet> >"), typeid(::std::vector<edm::FwdPtr<reco::BasicJet> >), sizeof(::std::vector<edm::FwdPtr<reco::BasicJet> >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddBase(type_2452, ::Reflex::BaseOffset< ::std::vector<edm::FwdPtr<reco::BasicJet> >, ::std::_Vector_base<edm::FwdPtr<reco::BasicJet>,std::allocator<edm::FwdPtr<reco::BasicJet> > > >::Get(), ::Reflex::PROTECTED)
  .AddTypedef(type_4485, Reflex::Literal("std::vector<edm::FwdPtr<reco::BasicJet> >::_Alloc_value_type"))
  .AddTypedef(type_2452, Reflex::Literal("std::vector<edm::FwdPtr<reco::BasicJet> >::_Base"))
  .AddTypedef(type_3245, Reflex::Literal("std::vector<edm::FwdPtr<reco::BasicJet> >::_Tp_alloc_type"))
  .AddTypedef(type_7965, Reflex::Literal("std::vector<edm::FwdPtr<reco::BasicJet> >::_Alloc_traits"))
  .AddTypedef(type_4485, Reflex::Literal("std::vector<edm::FwdPtr<reco::BasicJet> >::value_type"))
  .AddTypedef(type_8892, Reflex::Literal("std::vector<edm::FwdPtr<reco::BasicJet> >::pointer"))
  .AddTypedef(type_13278, Reflex::Literal("std::vector<edm::FwdPtr<reco::BasicJet> >::const_pointer"))
  .AddTypedef(type_13280, Reflex::Literal("std::vector<edm::FwdPtr<reco::BasicJet> >::reference"))
  .AddTypedef(type_13282, Reflex::Literal("std::vector<edm::FwdPtr<reco::BasicJet> >::const_reference"))
  .AddTypedef(type_7845, Reflex::Literal("std::vector<edm::FwdPtr<reco::BasicJet> >::iterator"))
  .AddTypedef(type_7846, Reflex::Literal("std::vector<edm::FwdPtr<reco::BasicJet> >::const_iterator"))
  .AddTypedef(type_3425, Reflex::Literal("std::vector<edm::FwdPtr<reco::BasicJet> >::const_reverse_iterator"))
  .AddTypedef(type_3426, Reflex::Literal("std::vector<edm::FwdPtr<reco::BasicJet> >::reverse_iterator"))
  .AddTypedef(type_3189, Reflex::Literal("std::vector<edm::FwdPtr<reco::BasicJet> >::size_type"))
  .AddTypedef(type_3096, Reflex::Literal("std::vector<edm::FwdPtr<reco::BasicJet> >::difference_type"))
  .AddTypedef(type_3245, Reflex::Literal("std::vector<edm::FwdPtr<reco::BasicJet> >::allocator_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("vector"), constructor_13291, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_29535), Reflex::Literal("vector"), constructor_13292, 0, "__a", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_3189, type_13282, type_29535), Reflex::Literal("vector"), constructor_13293, 0, "__n;__value=_Tp();__a=_Alloc()", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_30628), Reflex::Literal("vector"), constructor_13294, 0, "__x", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~vector"), destructor_13295, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_2981, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getBasesTable"), method_x82, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddFunctionMember<void*(void)>(Reflex::Literal("createCollFuncTable"), method_x83, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandFunctionMemberBuilder(&__std__vector_edm__FwdPtr_reco__BasicJet_s__funcmem_bld);
}

//------Delayed data member builder for class vector<edm::FwdPtr<reco::BasicJet>,std::allocator<edm::FwdPtr<reco::BasicJet> > > -------------------
void __std__vector_edm__FwdPtr_reco__BasicJet_s__db_datamem(Reflex::Class*) {

}
//------Delayed function member builder for class vector<edm::FwdPtr<reco::BasicJet>,std::allocator<edm::FwdPtr<reco::BasicJet> > > -------------------
void __std__vector_edm__FwdPtr_reco__BasicJet_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_30629, type_30628), Reflex::Literal("operator="), operator_13296, 0, "__x", ::Reflex::PUBLIC | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_3189, type_13282), Reflex::Literal("assign"), method_13297, 0, "__n;__val", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_7845), Reflex::Literal("begin"), method_13298, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_7846), Reflex::Literal("begin"), method_13299, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_7845), Reflex::Literal("end"), method_13300, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_7846), Reflex::Literal("end"), method_13301, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3189), Reflex::Literal("size"), method_13306, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3189), Reflex::Literal("max_size"), method_13307, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_3189, type_4485), Reflex::Literal("resize"), method_13308, 0, "__new_size;__x=_Tp()", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3189), Reflex::Literal("capacity"), method_13309, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("empty"), method_13310, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_3189), Reflex::Literal("reserve"), method_13311, 0, "__n", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13280, type_3189), Reflex::Literal("operator[]"), operator_13312, 0, "__n", ::Reflex::PUBLIC | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13282, type_3189), Reflex::Literal("operator[]"), operator_13313, 0, "__n", ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13280, type_3189), Reflex::Literal("at"), method_13315, 0, "__n", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13282, type_3189), Reflex::Literal("at"), method_13316, 0, "__n", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13280), Reflex::Literal("front"), method_13317, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13282), Reflex::Literal("front"), method_13318, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13280), Reflex::Literal("back"), method_13319, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13282), Reflex::Literal("back"), method_13320, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_8892), Reflex::Literal("data"), method_13321, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13278), Reflex::Literal("data"), method_13322, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_13282), Reflex::Literal("push_back"), method_13323, 0, "__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680), Reflex::Literal("pop_back"), method_13324, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_7845, type_7845, type_13282), Reflex::Literal("insert"), method_13325, 0, "__position;__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_7845, type_3189, type_13282), Reflex::Literal("insert"), method_13326, 0, "__position;__n;__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_7845, type_7845), Reflex::Literal("erase"), method_13327, 0, "__position", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_7845, type_7845, type_7845), Reflex::Literal("erase"), method_13328, 0, "__first;__last", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_30629), Reflex::Literal("swap"), method_13329, 0, "__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680), Reflex::Literal("clear"), method_13330, 0, 0, ::Reflex::PUBLIC);
}
//------Stub functions for class vector<edm::FwdRef<std::vector<reco::BasicJet, std::allocator<reco::BasicJet> >, reco::BasicJet, edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet, std::allocator<reco::BasicJet> >, reco::BasicJet> >,std::allocator<edm::FwdRef<std::vector<reco::BasicJet, std::allocator<reco::BasicJet> >, reco::BasicJet, edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet, std::allocator<reco::BasicJet> >, reco::BasicJet> > > > -------------------------------
static void constructor_13356( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >();
  else ::new(mem) ::std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >();
}

static void constructor_13357( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >(*(const ::std::allocator<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)arg[0]);
  else ::new(mem) ::std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >(*(const ::std::allocator<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)arg[0]);
}

static void constructor_13358( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if ( arg.size() == 1 ) {
    if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >(*(::std::size_t*)arg[0]);
  else ::new(mem) ::std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >(*(::std::size_t*)arg[0]);
  }
  else if ( arg.size() == 2 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >(*(::std::size_t*)arg[0],
      *(const ::edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)arg[1]);
  else ::new(mem) ::std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >(*(::std::size_t*)arg[0],
      *(const ::edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)arg[1]);
  }
  else if ( arg.size() == 3 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >(*(::std::size_t*)arg[0],
      *(const ::edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)arg[1],
      *(const ::std::allocator<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)arg[2]);
  else ::new(mem) ::std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >(*(::std::size_t*)arg[0],
      *(const ::edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)arg[1],
      *(const ::std::allocator<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)arg[2]);
  }
}

static void constructor_13359( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >(*(const ::std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)arg[0]);
  else ::new(mem) ::std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >(*(const ::std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)arg[0]);
}

static void destructor_13360(void*, void * o, const std::vector<void*>&, void *) {
(((::std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->::std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >::~vector)();
}
static  void operator_13361( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->operator=)(*(const ::std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)arg[0]);
  else   (((::std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->operator=)(*(const ::std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)arg[0]);
}

static  void method_13362( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->assign)(*(::std::size_t*)arg[0],
    *(const ::edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)arg[1]);
}

static  void method_13363( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*,std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > > >)((((::std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->begin)());
  else   (((::std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->begin)();
}

static  void method_13364( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<const edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*,std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > > >)((((const ::std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->begin)());
  else   (((const ::std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->begin)();
}

static  void method_13365( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*,std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > > >)((((::std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->end)());
  else   (((::std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->end)();
}

static  void method_13366( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<const edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*,std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > > >)((((const ::std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->end)());
  else   (((const ::std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->end)();
}

static  void method_13371( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->size)());
  else   (((const ::std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->size)();
}

static  void method_13372( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->max_size)());
  else   (((const ::std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->max_size)();
}

static  void method_13373( void*, void* o, const std::vector<void*>& arg, void*)
{
  if ( arg.size() == 1 ) {
    (((::std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->resize)(*(::std::size_t*)arg[0]);
  }
  else if ( arg.size() == 2 ) { 
    (((::std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->resize)(*(::std::size_t*)arg[0],
      *(::edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)arg[1]);
  }
}

static  void method_13374( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->capacity)());
  else   (((const ::std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->capacity)();
}

static  void method_13375( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->empty)());
  else   (((const ::std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->empty)();
}

static  void method_13376( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->reserve)(*(::std::size_t*)arg[0]);
}

static  void operator_13377( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->operator[])(*(::std::size_t*)arg[0]);
  else   (((::std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->operator[])(*(::std::size_t*)arg[0]);
}

static  void operator_13378( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->operator[])(*(::std::size_t*)arg[0]);
  else   (((const ::std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->operator[])(*(::std::size_t*)arg[0]);
}

static  void method_13380( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->at)(*(::std::size_t*)arg[0]);
  else   (((::std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->at)(*(::std::size_t*)arg[0]);
}

static  void method_13381( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->at)(*(::std::size_t*)arg[0]);
  else   (((const ::std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->at)(*(::std::size_t*)arg[0]);
}

static  void method_13382( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->front)();
  else   (((::std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->front)();
}

static  void method_13383( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->front)();
  else   (((const ::std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->front)();
}

static  void method_13384( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->back)();
  else   (((::std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->back)();
}

static  void method_13385( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->back)();
  else   (((const ::std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->back)();
}

static  void method_13386( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((::std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->data)());
  else   (((::std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->data)();
}

static  void method_13387( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->data)());
  else   (((const ::std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->data)();
}

static  void method_13388( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->push_back)(*(const ::edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)arg[0]);
}

static  void method_13389( void*, void* o, const std::vector<void*>&, void*)
{
  (((::std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->pop_back)();
}

static  void method_13390( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*,std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > > >)((((::std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->insert)(*(::__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*,std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > > >*)arg[0],
    *(const ::edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)arg[1]));
  else   (((::std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->insert)(*(::__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*,std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > > >*)arg[0],
    *(const ::edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)arg[1]);
}

static  void method_13391( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->insert)(*(::__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*,std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > > >*)arg[0],
    *(::std::size_t*)arg[1],
    *(const ::edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)arg[2]);
}

static  void method_13392( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*,std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > > >)((((::std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->erase)(*(::__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*,std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > > >*)arg[0]));
  else   (((::std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->erase)(*(::__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*,std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > > >*)arg[0]);
}

static  void method_13393( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*,std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > > >)((((::std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->erase)(*(::__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*,std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > > >*)arg[0],
    *(::__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*,std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > > >*)arg[1]));
  else   (((::std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->erase)(*(::__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*,std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > > >*)arg[0],
    *(::__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*,std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > > >*)arg[1]);
}

static  void method_13394( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->swap)(*(::std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)arg[0]);
}

static  void method_13395( void*, void* o, const std::vector<void*>&, void*)
{
  (((::std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->clear)();
}

static void method_newdel_2982( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

static void method_x85( void* retaddr, void*, const std::vector<void*>&, void*)
{
  typedef std::vector<std::pair< ::Reflex::Base, int> > Bases_t;
  static Bases_t s_bases;
  if ( !s_bases.size() ) {
    s_bases.push_back(std::make_pair(::Reflex::Base( ::Reflex::TypeBuilder(Reflex::Literal("std::_Vector_base<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >,std::allocator<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > > >")), ::Reflex::BaseOffset< ::std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >,::std::_Vector_base<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >,std::allocator<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > > > >::Get(),::Reflex::PROTECTED), 0));
  }
  if (retaddr) *(Bases_t**)retaddr = &s_bases;
}

static void method_x86( void* retaddr, void*, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**) retaddr = ::Reflex::Proxy< ::std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > > >::Generate();
  else ::Reflex::Proxy< ::std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > > >::Generate();
}

//------Dictionary for class vector<edm::FwdRef<std::vector<reco::BasicJet, std::allocator<reco::BasicJet> >, reco::BasicJet, edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet, std::allocator<reco::BasicJet> >, reco::BasicJet> >,std::allocator<edm::FwdRef<std::vector<reco::BasicJet, std::allocator<reco::BasicJet> >, reco::BasicJet, edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet, std::allocator<reco::BasicJet> >, reco::BasicJet> > > > -------------------------------
void __std__vector_edm__FwdRef_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s_s__db_datamem(Reflex::Class*);
void __std__vector_edm__FwdRef_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __std__vector_edm__FwdRef_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s_s__datamem_bld(&__std__vector_edm__FwdRef_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s_s__db_datamem);
Reflex::GenreflexMemberBuilder __std__vector_edm__FwdRef_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s_s__funcmem_bld(&__std__vector_edm__FwdRef_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s_s__db_funcmem);
void __std__vector_edm__FwdRef_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >"), typeid(::std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >), sizeof(::std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddBase(type_2453, ::Reflex::BaseOffset< ::std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >, ::std::_Vector_base<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >,std::allocator<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > > > >::Get(), ::Reflex::PROTECTED)
  .AddTypedef(type_4573, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >::_Alloc_value_type"))
  .AddTypedef(type_2453, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >::_Base"))
  .AddTypedef(type_3246, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >::_Tp_alloc_type"))
  .AddTypedef(type_7966, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >::_Alloc_traits"))
  .AddTypedef(type_4573, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >::value_type"))
  .AddTypedef(type_8911, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >::pointer"))
  .AddTypedef(type_13343, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >::const_pointer"))
  .AddTypedef(type_13345, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >::reference"))
  .AddTypedef(type_13347, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >::const_reference"))
  .AddTypedef(type_7847, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >::iterator"))
  .AddTypedef(type_7848, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >::const_iterator"))
  .AddTypedef(type_3427, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >::const_reverse_iterator"))
  .AddTypedef(type_3428, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >::reverse_iterator"))
  .AddTypedef(type_3189, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >::size_type"))
  .AddTypedef(type_3096, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >::difference_type"))
  .AddTypedef(type_3246, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >::allocator_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("vector"), constructor_13356, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_29548), Reflex::Literal("vector"), constructor_13357, 0, "__a", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_3189, type_13347, type_29548), Reflex::Literal("vector"), constructor_13358, 0, "__n;__value=_Tp();__a=_Alloc()", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_30631), Reflex::Literal("vector"), constructor_13359, 0, "__x", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~vector"), destructor_13360, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_2982, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getBasesTable"), method_x85, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddFunctionMember<void*(void)>(Reflex::Literal("createCollFuncTable"), method_x86, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandFunctionMemberBuilder(&__std__vector_edm__FwdRef_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s_s__funcmem_bld);
}

//------Delayed data member builder for class vector<edm::FwdRef<std::vector<reco::BasicJet, std::allocator<reco::BasicJet> >, reco::BasicJet, edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet, std::allocator<reco::BasicJet> >, reco::BasicJet> >,std::allocator<edm::FwdRef<std::vector<reco::BasicJet, std::allocator<reco::BasicJet> >, reco::BasicJet, edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet, std::allocator<reco::BasicJet> >, reco::BasicJet> > > > -------------------
void __std__vector_edm__FwdRef_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s_s__db_datamem(Reflex::Class*) {

}
//------Delayed function member builder for class vector<edm::FwdRef<std::vector<reco::BasicJet, std::allocator<reco::BasicJet> >, reco::BasicJet, edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet, std::allocator<reco::BasicJet> >, reco::BasicJet> >,std::allocator<edm::FwdRef<std::vector<reco::BasicJet, std::allocator<reco::BasicJet> >, reco::BasicJet, edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet, std::allocator<reco::BasicJet> >, reco::BasicJet> > > > -------------------
void __std__vector_edm__FwdRef_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_30632, type_30631), Reflex::Literal("operator="), operator_13361, 0, "__x", ::Reflex::PUBLIC | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_3189, type_13347), Reflex::Literal("assign"), method_13362, 0, "__n;__val", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_7847), Reflex::Literal("begin"), method_13363, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_7848), Reflex::Literal("begin"), method_13364, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_7847), Reflex::Literal("end"), method_13365, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_7848), Reflex::Literal("end"), method_13366, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3189), Reflex::Literal("size"), method_13371, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3189), Reflex::Literal("max_size"), method_13372, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_3189, type_4573), Reflex::Literal("resize"), method_13373, 0, "__new_size;__x=_Tp()", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3189), Reflex::Literal("capacity"), method_13374, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("empty"), method_13375, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_3189), Reflex::Literal("reserve"), method_13376, 0, "__n", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13345, type_3189), Reflex::Literal("operator[]"), operator_13377, 0, "__n", ::Reflex::PUBLIC | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13347, type_3189), Reflex::Literal("operator[]"), operator_13378, 0, "__n", ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13345, type_3189), Reflex::Literal("at"), method_13380, 0, "__n", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13347, type_3189), Reflex::Literal("at"), method_13381, 0, "__n", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13345), Reflex::Literal("front"), method_13382, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13347), Reflex::Literal("front"), method_13383, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13345), Reflex::Literal("back"), method_13384, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13347), Reflex::Literal("back"), method_13385, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_8911), Reflex::Literal("data"), method_13386, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13343), Reflex::Literal("data"), method_13387, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_13347), Reflex::Literal("push_back"), method_13388, 0, "__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680), Reflex::Literal("pop_back"), method_13389, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_7847, type_7847, type_13347), Reflex::Literal("insert"), method_13390, 0, "__position;__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_7847, type_3189, type_13347), Reflex::Literal("insert"), method_13391, 0, "__position;__n;__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_7847, type_7847), Reflex::Literal("erase"), method_13392, 0, "__position", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_7847, type_7847, type_7847), Reflex::Literal("erase"), method_13393, 0, "__first;__last", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_30632), Reflex::Literal("swap"), method_13394, 0, "__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680), Reflex::Literal("clear"), method_13395, 0, 0, ::Reflex::PUBLIC);
}
//------Stub functions for class vector<edm::FwdPtr<reco::GenJet>,std::allocator<edm::FwdPtr<reco::GenJet> > > -------------------------------
static void constructor_13486( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<edm::FwdPtr<reco::GenJet> >();
  else ::new(mem) ::std::vector<edm::FwdPtr<reco::GenJet> >();
}

static void constructor_13487( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<edm::FwdPtr<reco::GenJet> >(*(const ::std::allocator<edm::FwdPtr<reco::GenJet> >*)arg[0]);
  else ::new(mem) ::std::vector<edm::FwdPtr<reco::GenJet> >(*(const ::std::allocator<edm::FwdPtr<reco::GenJet> >*)arg[0]);
}

static void constructor_13488( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if ( arg.size() == 1 ) {
    if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<edm::FwdPtr<reco::GenJet> >(*(::std::size_t*)arg[0]);
  else ::new(mem) ::std::vector<edm::FwdPtr<reco::GenJet> >(*(::std::size_t*)arg[0]);
  }
  else if ( arg.size() == 2 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<edm::FwdPtr<reco::GenJet> >(*(::std::size_t*)arg[0],
      *(const ::edm::FwdPtr<reco::GenJet>*)arg[1]);
  else ::new(mem) ::std::vector<edm::FwdPtr<reco::GenJet> >(*(::std::size_t*)arg[0],
      *(const ::edm::FwdPtr<reco::GenJet>*)arg[1]);
  }
  else if ( arg.size() == 3 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<edm::FwdPtr<reco::GenJet> >(*(::std::size_t*)arg[0],
      *(const ::edm::FwdPtr<reco::GenJet>*)arg[1],
      *(const ::std::allocator<edm::FwdPtr<reco::GenJet> >*)arg[2]);
  else ::new(mem) ::std::vector<edm::FwdPtr<reco::GenJet> >(*(::std::size_t*)arg[0],
      *(const ::edm::FwdPtr<reco::GenJet>*)arg[1],
      *(const ::std::allocator<edm::FwdPtr<reco::GenJet> >*)arg[2]);
  }
}

static void constructor_13489( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<edm::FwdPtr<reco::GenJet> >(*(const ::std::vector<edm::FwdPtr<reco::GenJet> >*)arg[0]);
  else ::new(mem) ::std::vector<edm::FwdPtr<reco::GenJet> >(*(const ::std::vector<edm::FwdPtr<reco::GenJet> >*)arg[0]);
}

static void destructor_13490(void*, void * o, const std::vector<void*>&, void *) {
(((::std::vector<edm::FwdPtr<reco::GenJet> >*)o)->::std::vector<edm::FwdPtr<reco::GenJet> >::~vector)();
}
static  void operator_13491( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<edm::FwdPtr<reco::GenJet> >*)o)->operator=)(*(const ::std::vector<edm::FwdPtr<reco::GenJet> >*)arg[0]);
  else   (((::std::vector<edm::FwdPtr<reco::GenJet> >*)o)->operator=)(*(const ::std::vector<edm::FwdPtr<reco::GenJet> >*)arg[0]);
}

static  void method_13492( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<edm::FwdPtr<reco::GenJet> >*)o)->assign)(*(::std::size_t*)arg[0],
    *(const ::edm::FwdPtr<reco::GenJet>*)arg[1]);
}

static  void method_13493( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::GenJet>*,std::vector<edm::FwdPtr<reco::GenJet> > >)((((::std::vector<edm::FwdPtr<reco::GenJet> >*)o)->begin)());
  else   (((::std::vector<edm::FwdPtr<reco::GenJet> >*)o)->begin)();
}

static  void method_13494( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<const edm::FwdPtr<reco::GenJet>*,std::vector<edm::FwdPtr<reco::GenJet> > >)((((const ::std::vector<edm::FwdPtr<reco::GenJet> >*)o)->begin)());
  else   (((const ::std::vector<edm::FwdPtr<reco::GenJet> >*)o)->begin)();
}

static  void method_13495( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::GenJet>*,std::vector<edm::FwdPtr<reco::GenJet> > >)((((::std::vector<edm::FwdPtr<reco::GenJet> >*)o)->end)());
  else   (((::std::vector<edm::FwdPtr<reco::GenJet> >*)o)->end)();
}

static  void method_13496( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<const edm::FwdPtr<reco::GenJet>*,std::vector<edm::FwdPtr<reco::GenJet> > >)((((const ::std::vector<edm::FwdPtr<reco::GenJet> >*)o)->end)());
  else   (((const ::std::vector<edm::FwdPtr<reco::GenJet> >*)o)->end)();
}

static  void method_13501( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::std::vector<edm::FwdPtr<reco::GenJet> >*)o)->size)());
  else   (((const ::std::vector<edm::FwdPtr<reco::GenJet> >*)o)->size)();
}

static  void method_13502( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::std::vector<edm::FwdPtr<reco::GenJet> >*)o)->max_size)());
  else   (((const ::std::vector<edm::FwdPtr<reco::GenJet> >*)o)->max_size)();
}

static  void method_13503( void*, void* o, const std::vector<void*>& arg, void*)
{
  if ( arg.size() == 1 ) {
    (((::std::vector<edm::FwdPtr<reco::GenJet> >*)o)->resize)(*(::std::size_t*)arg[0]);
  }
  else if ( arg.size() == 2 ) { 
    (((::std::vector<edm::FwdPtr<reco::GenJet> >*)o)->resize)(*(::std::size_t*)arg[0],
      *(::edm::FwdPtr<reco::GenJet>*)arg[1]);
  }
}

static  void method_13504( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::std::vector<edm::FwdPtr<reco::GenJet> >*)o)->capacity)());
  else   (((const ::std::vector<edm::FwdPtr<reco::GenJet> >*)o)->capacity)();
}

static  void method_13505( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::std::vector<edm::FwdPtr<reco::GenJet> >*)o)->empty)());
  else   (((const ::std::vector<edm::FwdPtr<reco::GenJet> >*)o)->empty)();
}

static  void method_13506( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<edm::FwdPtr<reco::GenJet> >*)o)->reserve)(*(::std::size_t*)arg[0]);
}

static  void operator_13507( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<edm::FwdPtr<reco::GenJet> >*)o)->operator[])(*(::std::size_t*)arg[0]);
  else   (((::std::vector<edm::FwdPtr<reco::GenJet> >*)o)->operator[])(*(::std::size_t*)arg[0]);
}

static  void operator_13508( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<edm::FwdPtr<reco::GenJet> >*)o)->operator[])(*(::std::size_t*)arg[0]);
  else   (((const ::std::vector<edm::FwdPtr<reco::GenJet> >*)o)->operator[])(*(::std::size_t*)arg[0]);
}

static  void method_13510( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<edm::FwdPtr<reco::GenJet> >*)o)->at)(*(::std::size_t*)arg[0]);
  else   (((::std::vector<edm::FwdPtr<reco::GenJet> >*)o)->at)(*(::std::size_t*)arg[0]);
}

static  void method_13511( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<edm::FwdPtr<reco::GenJet> >*)o)->at)(*(::std::size_t*)arg[0]);
  else   (((const ::std::vector<edm::FwdPtr<reco::GenJet> >*)o)->at)(*(::std::size_t*)arg[0]);
}

static  void method_13512( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<edm::FwdPtr<reco::GenJet> >*)o)->front)();
  else   (((::std::vector<edm::FwdPtr<reco::GenJet> >*)o)->front)();
}

static  void method_13513( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<edm::FwdPtr<reco::GenJet> >*)o)->front)();
  else   (((const ::std::vector<edm::FwdPtr<reco::GenJet> >*)o)->front)();
}

static  void method_13514( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<edm::FwdPtr<reco::GenJet> >*)o)->back)();
  else   (((::std::vector<edm::FwdPtr<reco::GenJet> >*)o)->back)();
}

static  void method_13515( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<edm::FwdPtr<reco::GenJet> >*)o)->back)();
  else   (((const ::std::vector<edm::FwdPtr<reco::GenJet> >*)o)->back)();
}

static  void method_13516( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((::std::vector<edm::FwdPtr<reco::GenJet> >*)o)->data)());
  else   (((::std::vector<edm::FwdPtr<reco::GenJet> >*)o)->data)();
}

static  void method_13517( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::std::vector<edm::FwdPtr<reco::GenJet> >*)o)->data)());
  else   (((const ::std::vector<edm::FwdPtr<reco::GenJet> >*)o)->data)();
}

static  void method_13518( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<edm::FwdPtr<reco::GenJet> >*)o)->push_back)(*(const ::edm::FwdPtr<reco::GenJet>*)arg[0]);
}

static  void method_13519( void*, void* o, const std::vector<void*>&, void*)
{
  (((::std::vector<edm::FwdPtr<reco::GenJet> >*)o)->pop_back)();
}

static  void method_13520( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::GenJet>*,std::vector<edm::FwdPtr<reco::GenJet> > >)((((::std::vector<edm::FwdPtr<reco::GenJet> >*)o)->insert)(*(::__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::GenJet>*,std::vector<edm::FwdPtr<reco::GenJet> > >*)arg[0],
    *(const ::edm::FwdPtr<reco::GenJet>*)arg[1]));
  else   (((::std::vector<edm::FwdPtr<reco::GenJet> >*)o)->insert)(*(::__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::GenJet>*,std::vector<edm::FwdPtr<reco::GenJet> > >*)arg[0],
    *(const ::edm::FwdPtr<reco::GenJet>*)arg[1]);
}

static  void method_13521( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<edm::FwdPtr<reco::GenJet> >*)o)->insert)(*(::__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::GenJet>*,std::vector<edm::FwdPtr<reco::GenJet> > >*)arg[0],
    *(::std::size_t*)arg[1],
    *(const ::edm::FwdPtr<reco::GenJet>*)arg[2]);
}

static  void method_13522( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::GenJet>*,std::vector<edm::FwdPtr<reco::GenJet> > >)((((::std::vector<edm::FwdPtr<reco::GenJet> >*)o)->erase)(*(::__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::GenJet>*,std::vector<edm::FwdPtr<reco::GenJet> > >*)arg[0]));
  else   (((::std::vector<edm::FwdPtr<reco::GenJet> >*)o)->erase)(*(::__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::GenJet>*,std::vector<edm::FwdPtr<reco::GenJet> > >*)arg[0]);
}

static  void method_13523( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::GenJet>*,std::vector<edm::FwdPtr<reco::GenJet> > >)((((::std::vector<edm::FwdPtr<reco::GenJet> >*)o)->erase)(*(::__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::GenJet>*,std::vector<edm::FwdPtr<reco::GenJet> > >*)arg[0],
    *(::__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::GenJet>*,std::vector<edm::FwdPtr<reco::GenJet> > >*)arg[1]));
  else   (((::std::vector<edm::FwdPtr<reco::GenJet> >*)o)->erase)(*(::__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::GenJet>*,std::vector<edm::FwdPtr<reco::GenJet> > >*)arg[0],
    *(::__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::GenJet>*,std::vector<edm::FwdPtr<reco::GenJet> > >*)arg[1]);
}

static  void method_13524( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<edm::FwdPtr<reco::GenJet> >*)o)->swap)(*(::std::vector<edm::FwdPtr<reco::GenJet> >*)arg[0]);
}

static  void method_13525( void*, void* o, const std::vector<void*>&, void*)
{
  (((::std::vector<edm::FwdPtr<reco::GenJet> >*)o)->clear)();
}

static void method_newdel_2986( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::std::vector<edm::FwdPtr<reco::GenJet> > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::std::vector<edm::FwdPtr<reco::GenJet> > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::std::vector<edm::FwdPtr<reco::GenJet> > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::std::vector<edm::FwdPtr<reco::GenJet> > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::std::vector<edm::FwdPtr<reco::GenJet> > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

static void method_x88( void* retaddr, void*, const std::vector<void*>&, void*)
{
  typedef std::vector<std::pair< ::Reflex::Base, int> > Bases_t;
  static Bases_t s_bases;
  if ( !s_bases.size() ) {
    s_bases.push_back(std::make_pair(::Reflex::Base( ::Reflex::TypeBuilder(Reflex::Literal("std::_Vector_base<edm::FwdPtr<reco::GenJet>,std::allocator<edm::FwdPtr<reco::GenJet> > >")), ::Reflex::BaseOffset< ::std::vector<edm::FwdPtr<reco::GenJet> >,::std::_Vector_base<edm::FwdPtr<reco::GenJet>,std::allocator<edm::FwdPtr<reco::GenJet> > > >::Get(),::Reflex::PROTECTED), 0));
  }
  if (retaddr) *(Bases_t**)retaddr = &s_bases;
}

static void method_x89( void* retaddr, void*, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**) retaddr = ::Reflex::Proxy< ::std::vector<edm::FwdPtr<reco::GenJet> > >::Generate();
  else ::Reflex::Proxy< ::std::vector<edm::FwdPtr<reco::GenJet> > >::Generate();
}

//------Dictionary for class vector<edm::FwdPtr<reco::GenJet>,std::allocator<edm::FwdPtr<reco::GenJet> > > -------------------------------
void __std__vector_edm__FwdPtr_reco__GenJet_s__db_datamem(Reflex::Class*);
void __std__vector_edm__FwdPtr_reco__GenJet_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __std__vector_edm__FwdPtr_reco__GenJet_s__datamem_bld(&__std__vector_edm__FwdPtr_reco__GenJet_s__db_datamem);
Reflex::GenreflexMemberBuilder __std__vector_edm__FwdPtr_reco__GenJet_s__funcmem_bld(&__std__vector_edm__FwdPtr_reco__GenJet_s__db_funcmem);
void __std__vector_edm__FwdPtr_reco__GenJet_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("std::vector<edm::FwdPtr<reco::GenJet> >"), typeid(::std::vector<edm::FwdPtr<reco::GenJet> >), sizeof(::std::vector<edm::FwdPtr<reco::GenJet> >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddBase(type_2454, ::Reflex::BaseOffset< ::std::vector<edm::FwdPtr<reco::GenJet> >, ::std::_Vector_base<edm::FwdPtr<reco::GenJet>,std::allocator<edm::FwdPtr<reco::GenJet> > > >::Get(), ::Reflex::PROTECTED)
  .AddTypedef(type_4486, Reflex::Literal("std::vector<edm::FwdPtr<reco::GenJet> >::_Alloc_value_type"))
  .AddTypedef(type_2454, Reflex::Literal("std::vector<edm::FwdPtr<reco::GenJet> >::_Base"))
  .AddTypedef(type_3253, Reflex::Literal("std::vector<edm::FwdPtr<reco::GenJet> >::_Tp_alloc_type"))
  .AddTypedef(type_7967, Reflex::Literal("std::vector<edm::FwdPtr<reco::GenJet> >::_Alloc_traits"))
  .AddTypedef(type_4486, Reflex::Literal("std::vector<edm::FwdPtr<reco::GenJet> >::value_type"))
  .AddTypedef(type_8930, Reflex::Literal("std::vector<edm::FwdPtr<reco::GenJet> >::pointer"))
  .AddTypedef(type_13473, Reflex::Literal("std::vector<edm::FwdPtr<reco::GenJet> >::const_pointer"))
  .AddTypedef(type_13475, Reflex::Literal("std::vector<edm::FwdPtr<reco::GenJet> >::reference"))
  .AddTypedef(type_13477, Reflex::Literal("std::vector<edm::FwdPtr<reco::GenJet> >::const_reference"))
  .AddTypedef(type_7849, Reflex::Literal("std::vector<edm::FwdPtr<reco::GenJet> >::iterator"))
  .AddTypedef(type_7850, Reflex::Literal("std::vector<edm::FwdPtr<reco::GenJet> >::const_iterator"))
  .AddTypedef(type_3431, Reflex::Literal("std::vector<edm::FwdPtr<reco::GenJet> >::const_reverse_iterator"))
  .AddTypedef(type_3432, Reflex::Literal("std::vector<edm::FwdPtr<reco::GenJet> >::reverse_iterator"))
  .AddTypedef(type_3189, Reflex::Literal("std::vector<edm::FwdPtr<reco::GenJet> >::size_type"))
  .AddTypedef(type_3096, Reflex::Literal("std::vector<edm::FwdPtr<reco::GenJet> >::difference_type"))
  .AddTypedef(type_3253, Reflex::Literal("std::vector<edm::FwdPtr<reco::GenJet> >::allocator_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("vector"), constructor_13486, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_29561), Reflex::Literal("vector"), constructor_13487, 0, "__a", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_3189, type_13477, type_29561), Reflex::Literal("vector"), constructor_13488, 0, "__n;__value=_Tp();__a=_Alloc()", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_30636), Reflex::Literal("vector"), constructor_13489, 0, "__x", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~vector"), destructor_13490, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_2986, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getBasesTable"), method_x88, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddFunctionMember<void*(void)>(Reflex::Literal("createCollFuncTable"), method_x89, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandFunctionMemberBuilder(&__std__vector_edm__FwdPtr_reco__GenJet_s__funcmem_bld);
}

//------Delayed data member builder for class vector<edm::FwdPtr<reco::GenJet>,std::allocator<edm::FwdPtr<reco::GenJet> > > -------------------
void __std__vector_edm__FwdPtr_reco__GenJet_s__db_datamem(Reflex::Class*) {

}
//------Delayed function member builder for class vector<edm::FwdPtr<reco::GenJet>,std::allocator<edm::FwdPtr<reco::GenJet> > > -------------------
void __std__vector_edm__FwdPtr_reco__GenJet_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_30637, type_30636), Reflex::Literal("operator="), operator_13491, 0, "__x", ::Reflex::PUBLIC | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_3189, type_13477), Reflex::Literal("assign"), method_13492, 0, "__n;__val", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_7849), Reflex::Literal("begin"), method_13493, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_7850), Reflex::Literal("begin"), method_13494, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_7849), Reflex::Literal("end"), method_13495, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_7850), Reflex::Literal("end"), method_13496, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3189), Reflex::Literal("size"), method_13501, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3189), Reflex::Literal("max_size"), method_13502, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_3189, type_4486), Reflex::Literal("resize"), method_13503, 0, "__new_size;__x=_Tp()", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3189), Reflex::Literal("capacity"), method_13504, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("empty"), method_13505, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_3189), Reflex::Literal("reserve"), method_13506, 0, "__n", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13475, type_3189), Reflex::Literal("operator[]"), operator_13507, 0, "__n", ::Reflex::PUBLIC | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13477, type_3189), Reflex::Literal("operator[]"), operator_13508, 0, "__n", ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13475, type_3189), Reflex::Literal("at"), method_13510, 0, "__n", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13477, type_3189), Reflex::Literal("at"), method_13511, 0, "__n", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13475), Reflex::Literal("front"), method_13512, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13477), Reflex::Literal("front"), method_13513, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13475), Reflex::Literal("back"), method_13514, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13477), Reflex::Literal("back"), method_13515, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_8930), Reflex::Literal("data"), method_13516, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13473), Reflex::Literal("data"), method_13517, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_13477), Reflex::Literal("push_back"), method_13518, 0, "__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680), Reflex::Literal("pop_back"), method_13519, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_7849, type_7849, type_13477), Reflex::Literal("insert"), method_13520, 0, "__position;__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_7849, type_3189, type_13477), Reflex::Literal("insert"), method_13521, 0, "__position;__n;__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_7849, type_7849), Reflex::Literal("erase"), method_13522, 0, "__position", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_7849, type_7849, type_7849), Reflex::Literal("erase"), method_13523, 0, "__first;__last", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_30637), Reflex::Literal("swap"), method_13524, 0, "__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680), Reflex::Literal("clear"), method_13525, 0, 0, ::Reflex::PUBLIC);
}
//------Stub functions for class vector<edm::FwdRef<std::vector<reco::GenJet, std::allocator<reco::GenJet> >, reco::GenJet, edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet, std::allocator<reco::GenJet> >, reco::GenJet> >,std::allocator<edm::FwdRef<std::vector<reco::GenJet, std::allocator<reco::GenJet> >, reco::GenJet, edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet, std::allocator<reco::GenJet> >, reco::GenJet> > > > -------------------------------
static void constructor_13551( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >();
  else ::new(mem) ::std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >();
}

static void constructor_13552( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >(*(const ::std::allocator<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)arg[0]);
  else ::new(mem) ::std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >(*(const ::std::allocator<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)arg[0]);
}

static void constructor_13553( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if ( arg.size() == 1 ) {
    if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >(*(::std::size_t*)arg[0]);
  else ::new(mem) ::std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >(*(::std::size_t*)arg[0]);
  }
  else if ( arg.size() == 2 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >(*(::std::size_t*)arg[0],
      *(const ::edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)arg[1]);
  else ::new(mem) ::std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >(*(::std::size_t*)arg[0],
      *(const ::edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)arg[1]);
  }
  else if ( arg.size() == 3 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >(*(::std::size_t*)arg[0],
      *(const ::edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)arg[1],
      *(const ::std::allocator<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)arg[2]);
  else ::new(mem) ::std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >(*(::std::size_t*)arg[0],
      *(const ::edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)arg[1],
      *(const ::std::allocator<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)arg[2]);
  }
}

static void constructor_13554( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >(*(const ::std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)arg[0]);
  else ::new(mem) ::std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >(*(const ::std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)arg[0]);
}

static void destructor_13555(void*, void * o, const std::vector<void*>&, void *) {
(((::std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->::std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >::~vector)();
}
static  void operator_13556( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->operator=)(*(const ::std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)arg[0]);
  else   (((::std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->operator=)(*(const ::std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)arg[0]);
}

static  void method_13557( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->assign)(*(::std::size_t*)arg[0],
    *(const ::edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)arg[1]);
}

static  void method_13558( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*,std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > > >)((((::std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->begin)());
  else   (((::std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->begin)();
}

static  void method_13559( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<const edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*,std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > > >)((((const ::std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->begin)());
  else   (((const ::std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->begin)();
}

static  void method_13560( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*,std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > > >)((((::std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->end)());
  else   (((::std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->end)();
}

static  void method_13561( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<const edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*,std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > > >)((((const ::std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->end)());
  else   (((const ::std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->end)();
}

static  void method_13566( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->size)());
  else   (((const ::std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->size)();
}

static  void method_13567( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->max_size)());
  else   (((const ::std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->max_size)();
}

static  void method_13568( void*, void* o, const std::vector<void*>& arg, void*)
{
  if ( arg.size() == 1 ) {
    (((::std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->resize)(*(::std::size_t*)arg[0]);
  }
  else if ( arg.size() == 2 ) { 
    (((::std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->resize)(*(::std::size_t*)arg[0],
      *(::edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)arg[1]);
  }
}

static  void method_13569( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->capacity)());
  else   (((const ::std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->capacity)();
}

static  void method_13570( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->empty)());
  else   (((const ::std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->empty)();
}

static  void method_13571( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->reserve)(*(::std::size_t*)arg[0]);
}

static  void operator_13572( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->operator[])(*(::std::size_t*)arg[0]);
  else   (((::std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->operator[])(*(::std::size_t*)arg[0]);
}

static  void operator_13573( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->operator[])(*(::std::size_t*)arg[0]);
  else   (((const ::std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->operator[])(*(::std::size_t*)arg[0]);
}

static  void method_13575( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->at)(*(::std::size_t*)arg[0]);
  else   (((::std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->at)(*(::std::size_t*)arg[0]);
}

static  void method_13576( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->at)(*(::std::size_t*)arg[0]);
  else   (((const ::std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->at)(*(::std::size_t*)arg[0]);
}

static  void method_13577( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->front)();
  else   (((::std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->front)();
}

static  void method_13578( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->front)();
  else   (((const ::std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->front)();
}

static  void method_13579( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->back)();
  else   (((::std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->back)();
}

static  void method_13580( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->back)();
  else   (((const ::std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->back)();
}

static  void method_13581( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((::std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->data)());
  else   (((::std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->data)();
}

static  void method_13582( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->data)());
  else   (((const ::std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->data)();
}

static  void method_13583( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->push_back)(*(const ::edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)arg[0]);
}

static  void method_13584( void*, void* o, const std::vector<void*>&, void*)
{
  (((::std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->pop_back)();
}

static  void method_13585( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*,std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > > >)((((::std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->insert)(*(::__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*,std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > > >*)arg[0],
    *(const ::edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)arg[1]));
  else   (((::std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->insert)(*(::__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*,std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > > >*)arg[0],
    *(const ::edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)arg[1]);
}

static  void method_13586( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->insert)(*(::__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*,std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > > >*)arg[0],
    *(::std::size_t*)arg[1],
    *(const ::edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)arg[2]);
}

static  void method_13587( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*,std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > > >)((((::std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->erase)(*(::__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*,std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > > >*)arg[0]));
  else   (((::std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->erase)(*(::__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*,std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > > >*)arg[0]);
}

static  void method_13588( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*,std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > > >)((((::std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->erase)(*(::__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*,std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > > >*)arg[0],
    *(::__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*,std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > > >*)arg[1]));
  else   (((::std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->erase)(*(::__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*,std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > > >*)arg[0],
    *(::__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*,std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > > >*)arg[1]);
}

static  void method_13589( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->swap)(*(::std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)arg[0]);
}

static  void method_13590( void*, void* o, const std::vector<void*>&, void*)
{
  (((::std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->clear)();
}

static void method_newdel_2987( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

static void method_x91( void* retaddr, void*, const std::vector<void*>&, void*)
{
  typedef std::vector<std::pair< ::Reflex::Base, int> > Bases_t;
  static Bases_t s_bases;
  if ( !s_bases.size() ) {
    s_bases.push_back(std::make_pair(::Reflex::Base( ::Reflex::TypeBuilder(Reflex::Literal("std::_Vector_base<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >,std::allocator<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > > >")), ::Reflex::BaseOffset< ::std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >,::std::_Vector_base<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >,std::allocator<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > > > >::Get(),::Reflex::PROTECTED), 0));
  }
  if (retaddr) *(Bases_t**)retaddr = &s_bases;
}

static void method_x92( void* retaddr, void*, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**) retaddr = ::Reflex::Proxy< ::std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > > >::Generate();
  else ::Reflex::Proxy< ::std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > > >::Generate();
}

//------Dictionary for class vector<edm::FwdRef<std::vector<reco::GenJet, std::allocator<reco::GenJet> >, reco::GenJet, edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet, std::allocator<reco::GenJet> >, reco::GenJet> >,std::allocator<edm::FwdRef<std::vector<reco::GenJet, std::allocator<reco::GenJet> >, reco::GenJet, edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet, std::allocator<reco::GenJet> >, reco::GenJet> > > > -------------------------------
void __std__vector_edm__FwdRef_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s_s__db_datamem(Reflex::Class*);
void __std__vector_edm__FwdRef_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __std__vector_edm__FwdRef_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s_s__datamem_bld(&__std__vector_edm__FwdRef_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s_s__db_datamem);
Reflex::GenreflexMemberBuilder __std__vector_edm__FwdRef_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s_s__funcmem_bld(&__std__vector_edm__FwdRef_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s_s__db_funcmem);
void __std__vector_edm__FwdRef_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >"), typeid(::std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >), sizeof(::std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddBase(type_2455, ::Reflex::BaseOffset< ::std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >, ::std::_Vector_base<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >,std::allocator<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > > > >::Get(), ::Reflex::PROTECTED)
  .AddTypedef(type_4574, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >::_Alloc_value_type"))
  .AddTypedef(type_2455, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >::_Base"))
  .AddTypedef(type_3254, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >::_Tp_alloc_type"))
  .AddTypedef(type_7968, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >::_Alloc_traits"))
  .AddTypedef(type_4574, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >::value_type"))
  .AddTypedef(type_8949, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >::pointer"))
  .AddTypedef(type_13538, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >::const_pointer"))
  .AddTypedef(type_13540, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >::reference"))
  .AddTypedef(type_13542, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >::const_reference"))
  .AddTypedef(type_7851, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >::iterator"))
  .AddTypedef(type_7852, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >::const_iterator"))
  .AddTypedef(type_3433, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >::const_reverse_iterator"))
  .AddTypedef(type_3434, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >::reverse_iterator"))
  .AddTypedef(type_3189, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >::size_type"))
  .AddTypedef(type_3096, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >::difference_type"))
  .AddTypedef(type_3254, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >::allocator_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("vector"), constructor_13551, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_29574), Reflex::Literal("vector"), constructor_13552, 0, "__a", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_3189, type_13542, type_29574), Reflex::Literal("vector"), constructor_13553, 0, "__n;__value=_Tp();__a=_Alloc()", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_30639), Reflex::Literal("vector"), constructor_13554, 0, "__x", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~vector"), destructor_13555, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_2987, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getBasesTable"), method_x91, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddFunctionMember<void*(void)>(Reflex::Literal("createCollFuncTable"), method_x92, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandFunctionMemberBuilder(&__std__vector_edm__FwdRef_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s_s__funcmem_bld);
}

//------Delayed data member builder for class vector<edm::FwdRef<std::vector<reco::GenJet, std::allocator<reco::GenJet> >, reco::GenJet, edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet, std::allocator<reco::GenJet> >, reco::GenJet> >,std::allocator<edm::FwdRef<std::vector<reco::GenJet, std::allocator<reco::GenJet> >, reco::GenJet, edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet, std::allocator<reco::GenJet> >, reco::GenJet> > > > -------------------
void __std__vector_edm__FwdRef_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s_s__db_datamem(Reflex::Class*) {

}
//------Delayed function member builder for class vector<edm::FwdRef<std::vector<reco::GenJet, std::allocator<reco::GenJet> >, reco::GenJet, edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet, std::allocator<reco::GenJet> >, reco::GenJet> >,std::allocator<edm::FwdRef<std::vector<reco::GenJet, std::allocator<reco::GenJet> >, reco::GenJet, edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet, std::allocator<reco::GenJet> >, reco::GenJet> > > > -------------------
void __std__vector_edm__FwdRef_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_30640, type_30639), Reflex::Literal("operator="), operator_13556, 0, "__x", ::Reflex::PUBLIC | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_3189, type_13542), Reflex::Literal("assign"), method_13557, 0, "__n;__val", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_7851), Reflex::Literal("begin"), method_13558, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_7852), Reflex::Literal("begin"), method_13559, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_7851), Reflex::Literal("end"), method_13560, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_7852), Reflex::Literal("end"), method_13561, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3189), Reflex::Literal("size"), method_13566, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3189), Reflex::Literal("max_size"), method_13567, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_3189, type_4574), Reflex::Literal("resize"), method_13568, 0, "__new_size;__x=_Tp()", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3189), Reflex::Literal("capacity"), method_13569, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("empty"), method_13570, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_3189), Reflex::Literal("reserve"), method_13571, 0, "__n", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13540, type_3189), Reflex::Literal("operator[]"), operator_13572, 0, "__n", ::Reflex::PUBLIC | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13542, type_3189), Reflex::Literal("operator[]"), operator_13573, 0, "__n", ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13540, type_3189), Reflex::Literal("at"), method_13575, 0, "__n", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13542, type_3189), Reflex::Literal("at"), method_13576, 0, "__n", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13540), Reflex::Literal("front"), method_13577, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13542), Reflex::Literal("front"), method_13578, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13540), Reflex::Literal("back"), method_13579, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13542), Reflex::Literal("back"), method_13580, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_8949), Reflex::Literal("data"), method_13581, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13538), Reflex::Literal("data"), method_13582, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_13542), Reflex::Literal("push_back"), method_13583, 0, "__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680), Reflex::Literal("pop_back"), method_13584, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_7851, type_7851, type_13542), Reflex::Literal("insert"), method_13585, 0, "__position;__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_7851, type_3189, type_13542), Reflex::Literal("insert"), method_13586, 0, "__position;__n;__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_7851, type_7851), Reflex::Literal("erase"), method_13587, 0, "__position", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_7851, type_7851, type_7851), Reflex::Literal("erase"), method_13588, 0, "__first;__last", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_30640), Reflex::Literal("swap"), method_13589, 0, "__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680), Reflex::Literal("clear"), method_13590, 0, 0, ::Reflex::PUBLIC);
}
//------Stub functions for class vector<edm::FwdPtr<reco::PFJet>,std::allocator<edm::FwdPtr<reco::PFJet> > > -------------------------------
static void constructor_13031( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<edm::FwdPtr<reco::PFJet> >();
  else ::new(mem) ::std::vector<edm::FwdPtr<reco::PFJet> >();
}

static void constructor_13032( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<edm::FwdPtr<reco::PFJet> >(*(const ::std::allocator<edm::FwdPtr<reco::PFJet> >*)arg[0]);
  else ::new(mem) ::std::vector<edm::FwdPtr<reco::PFJet> >(*(const ::std::allocator<edm::FwdPtr<reco::PFJet> >*)arg[0]);
}

static void constructor_13033( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if ( arg.size() == 1 ) {
    if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<edm::FwdPtr<reco::PFJet> >(*(::std::size_t*)arg[0]);
  else ::new(mem) ::std::vector<edm::FwdPtr<reco::PFJet> >(*(::std::size_t*)arg[0]);
  }
  else if ( arg.size() == 2 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<edm::FwdPtr<reco::PFJet> >(*(::std::size_t*)arg[0],
      *(const ::edm::FwdPtr<reco::PFJet>*)arg[1]);
  else ::new(mem) ::std::vector<edm::FwdPtr<reco::PFJet> >(*(::std::size_t*)arg[0],
      *(const ::edm::FwdPtr<reco::PFJet>*)arg[1]);
  }
  else if ( arg.size() == 3 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<edm::FwdPtr<reco::PFJet> >(*(::std::size_t*)arg[0],
      *(const ::edm::FwdPtr<reco::PFJet>*)arg[1],
      *(const ::std::allocator<edm::FwdPtr<reco::PFJet> >*)arg[2]);
  else ::new(mem) ::std::vector<edm::FwdPtr<reco::PFJet> >(*(::std::size_t*)arg[0],
      *(const ::edm::FwdPtr<reco::PFJet>*)arg[1],
      *(const ::std::allocator<edm::FwdPtr<reco::PFJet> >*)arg[2]);
  }
}

static void constructor_13034( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<edm::FwdPtr<reco::PFJet> >(*(const ::std::vector<edm::FwdPtr<reco::PFJet> >*)arg[0]);
  else ::new(mem) ::std::vector<edm::FwdPtr<reco::PFJet> >(*(const ::std::vector<edm::FwdPtr<reco::PFJet> >*)arg[0]);
}

static void destructor_13035(void*, void * o, const std::vector<void*>&, void *) {
(((::std::vector<edm::FwdPtr<reco::PFJet> >*)o)->::std::vector<edm::FwdPtr<reco::PFJet> >::~vector)();
}
static  void operator_13036( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<edm::FwdPtr<reco::PFJet> >*)o)->operator=)(*(const ::std::vector<edm::FwdPtr<reco::PFJet> >*)arg[0]);
  else   (((::std::vector<edm::FwdPtr<reco::PFJet> >*)o)->operator=)(*(const ::std::vector<edm::FwdPtr<reco::PFJet> >*)arg[0]);
}

static  void method_13037( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<edm::FwdPtr<reco::PFJet> >*)o)->assign)(*(::std::size_t*)arg[0],
    *(const ::edm::FwdPtr<reco::PFJet>*)arg[1]);
}

static  void method_13038( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::PFJet>*,std::vector<edm::FwdPtr<reco::PFJet> > >)((((::std::vector<edm::FwdPtr<reco::PFJet> >*)o)->begin)());
  else   (((::std::vector<edm::FwdPtr<reco::PFJet> >*)o)->begin)();
}

static  void method_13039( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<const edm::FwdPtr<reco::PFJet>*,std::vector<edm::FwdPtr<reco::PFJet> > >)((((const ::std::vector<edm::FwdPtr<reco::PFJet> >*)o)->begin)());
  else   (((const ::std::vector<edm::FwdPtr<reco::PFJet> >*)o)->begin)();
}

static  void method_13040( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::PFJet>*,std::vector<edm::FwdPtr<reco::PFJet> > >)((((::std::vector<edm::FwdPtr<reco::PFJet> >*)o)->end)());
  else   (((::std::vector<edm::FwdPtr<reco::PFJet> >*)o)->end)();
}

static  void method_13041( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<const edm::FwdPtr<reco::PFJet>*,std::vector<edm::FwdPtr<reco::PFJet> > >)((((const ::std::vector<edm::FwdPtr<reco::PFJet> >*)o)->end)());
  else   (((const ::std::vector<edm::FwdPtr<reco::PFJet> >*)o)->end)();
}

static  void method_13046( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::std::vector<edm::FwdPtr<reco::PFJet> >*)o)->size)());
  else   (((const ::std::vector<edm::FwdPtr<reco::PFJet> >*)o)->size)();
}

static  void method_13047( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::std::vector<edm::FwdPtr<reco::PFJet> >*)o)->max_size)());
  else   (((const ::std::vector<edm::FwdPtr<reco::PFJet> >*)o)->max_size)();
}

static  void method_13048( void*, void* o, const std::vector<void*>& arg, void*)
{
  if ( arg.size() == 1 ) {
    (((::std::vector<edm::FwdPtr<reco::PFJet> >*)o)->resize)(*(::std::size_t*)arg[0]);
  }
  else if ( arg.size() == 2 ) { 
    (((::std::vector<edm::FwdPtr<reco::PFJet> >*)o)->resize)(*(::std::size_t*)arg[0],
      *(::edm::FwdPtr<reco::PFJet>*)arg[1]);
  }
}

static  void method_13049( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::std::vector<edm::FwdPtr<reco::PFJet> >*)o)->capacity)());
  else   (((const ::std::vector<edm::FwdPtr<reco::PFJet> >*)o)->capacity)();
}

static  void method_13050( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::std::vector<edm::FwdPtr<reco::PFJet> >*)o)->empty)());
  else   (((const ::std::vector<edm::FwdPtr<reco::PFJet> >*)o)->empty)();
}

static  void method_13051( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<edm::FwdPtr<reco::PFJet> >*)o)->reserve)(*(::std::size_t*)arg[0]);
}

static  void operator_13052( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<edm::FwdPtr<reco::PFJet> >*)o)->operator[])(*(::std::size_t*)arg[0]);
  else   (((::std::vector<edm::FwdPtr<reco::PFJet> >*)o)->operator[])(*(::std::size_t*)arg[0]);
}

static  void operator_13053( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<edm::FwdPtr<reco::PFJet> >*)o)->operator[])(*(::std::size_t*)arg[0]);
  else   (((const ::std::vector<edm::FwdPtr<reco::PFJet> >*)o)->operator[])(*(::std::size_t*)arg[0]);
}

static  void method_13055( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<edm::FwdPtr<reco::PFJet> >*)o)->at)(*(::std::size_t*)arg[0]);
  else   (((::std::vector<edm::FwdPtr<reco::PFJet> >*)o)->at)(*(::std::size_t*)arg[0]);
}

static  void method_13056( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<edm::FwdPtr<reco::PFJet> >*)o)->at)(*(::std::size_t*)arg[0]);
  else   (((const ::std::vector<edm::FwdPtr<reco::PFJet> >*)o)->at)(*(::std::size_t*)arg[0]);
}

static  void method_13057( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<edm::FwdPtr<reco::PFJet> >*)o)->front)();
  else   (((::std::vector<edm::FwdPtr<reco::PFJet> >*)o)->front)();
}

static  void method_13058( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<edm::FwdPtr<reco::PFJet> >*)o)->front)();
  else   (((const ::std::vector<edm::FwdPtr<reco::PFJet> >*)o)->front)();
}

static  void method_13059( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<edm::FwdPtr<reco::PFJet> >*)o)->back)();
  else   (((::std::vector<edm::FwdPtr<reco::PFJet> >*)o)->back)();
}

static  void method_13060( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<edm::FwdPtr<reco::PFJet> >*)o)->back)();
  else   (((const ::std::vector<edm::FwdPtr<reco::PFJet> >*)o)->back)();
}

static  void method_13061( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((::std::vector<edm::FwdPtr<reco::PFJet> >*)o)->data)());
  else   (((::std::vector<edm::FwdPtr<reco::PFJet> >*)o)->data)();
}

static  void method_13062( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::std::vector<edm::FwdPtr<reco::PFJet> >*)o)->data)());
  else   (((const ::std::vector<edm::FwdPtr<reco::PFJet> >*)o)->data)();
}

static  void method_13063( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<edm::FwdPtr<reco::PFJet> >*)o)->push_back)(*(const ::edm::FwdPtr<reco::PFJet>*)arg[0]);
}

static  void method_13064( void*, void* o, const std::vector<void*>&, void*)
{
  (((::std::vector<edm::FwdPtr<reco::PFJet> >*)o)->pop_back)();
}

static  void method_13065( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::PFJet>*,std::vector<edm::FwdPtr<reco::PFJet> > >)((((::std::vector<edm::FwdPtr<reco::PFJet> >*)o)->insert)(*(::__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::PFJet>*,std::vector<edm::FwdPtr<reco::PFJet> > >*)arg[0],
    *(const ::edm::FwdPtr<reco::PFJet>*)arg[1]));
  else   (((::std::vector<edm::FwdPtr<reco::PFJet> >*)o)->insert)(*(::__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::PFJet>*,std::vector<edm::FwdPtr<reco::PFJet> > >*)arg[0],
    *(const ::edm::FwdPtr<reco::PFJet>*)arg[1]);
}

static  void method_13066( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<edm::FwdPtr<reco::PFJet> >*)o)->insert)(*(::__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::PFJet>*,std::vector<edm::FwdPtr<reco::PFJet> > >*)arg[0],
    *(::std::size_t*)arg[1],
    *(const ::edm::FwdPtr<reco::PFJet>*)arg[2]);
}

static  void method_13067( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::PFJet>*,std::vector<edm::FwdPtr<reco::PFJet> > >)((((::std::vector<edm::FwdPtr<reco::PFJet> >*)o)->erase)(*(::__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::PFJet>*,std::vector<edm::FwdPtr<reco::PFJet> > >*)arg[0]));
  else   (((::std::vector<edm::FwdPtr<reco::PFJet> >*)o)->erase)(*(::__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::PFJet>*,std::vector<edm::FwdPtr<reco::PFJet> > >*)arg[0]);
}

static  void method_13068( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::PFJet>*,std::vector<edm::FwdPtr<reco::PFJet> > >)((((::std::vector<edm::FwdPtr<reco::PFJet> >*)o)->erase)(*(::__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::PFJet>*,std::vector<edm::FwdPtr<reco::PFJet> > >*)arg[0],
    *(::__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::PFJet>*,std::vector<edm::FwdPtr<reco::PFJet> > >*)arg[1]));
  else   (((::std::vector<edm::FwdPtr<reco::PFJet> >*)o)->erase)(*(::__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::PFJet>*,std::vector<edm::FwdPtr<reco::PFJet> > >*)arg[0],
    *(::__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::PFJet>*,std::vector<edm::FwdPtr<reco::PFJet> > >*)arg[1]);
}

static  void method_13069( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<edm::FwdPtr<reco::PFJet> >*)o)->swap)(*(::std::vector<edm::FwdPtr<reco::PFJet> >*)arg[0]);
}

static  void method_13070( void*, void* o, const std::vector<void*>&, void*)
{
  (((::std::vector<edm::FwdPtr<reco::PFJet> >*)o)->clear)();
}

static void method_newdel_2973( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::std::vector<edm::FwdPtr<reco::PFJet> > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::std::vector<edm::FwdPtr<reco::PFJet> > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::std::vector<edm::FwdPtr<reco::PFJet> > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::std::vector<edm::FwdPtr<reco::PFJet> > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::std::vector<edm::FwdPtr<reco::PFJet> > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

static void method_x94( void* retaddr, void*, const std::vector<void*>&, void*)
{
  typedef std::vector<std::pair< ::Reflex::Base, int> > Bases_t;
  static Bases_t s_bases;
  if ( !s_bases.size() ) {
    s_bases.push_back(std::make_pair(::Reflex::Base( ::Reflex::TypeBuilder(Reflex::Literal("std::_Vector_base<edm::FwdPtr<reco::PFJet>,std::allocator<edm::FwdPtr<reco::PFJet> > >")), ::Reflex::BaseOffset< ::std::vector<edm::FwdPtr<reco::PFJet> >,::std::_Vector_base<edm::FwdPtr<reco::PFJet>,std::allocator<edm::FwdPtr<reco::PFJet> > > >::Get(),::Reflex::PROTECTED), 0));
  }
  if (retaddr) *(Bases_t**)retaddr = &s_bases;
}

static void method_x95( void* retaddr, void*, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**) retaddr = ::Reflex::Proxy< ::std::vector<edm::FwdPtr<reco::PFJet> > >::Generate();
  else ::Reflex::Proxy< ::std::vector<edm::FwdPtr<reco::PFJet> > >::Generate();
}

//------Dictionary for class vector<edm::FwdPtr<reco::PFJet>,std::allocator<edm::FwdPtr<reco::PFJet> > > -------------------------------
void __std__vector_edm__FwdPtr_reco__PFJet_s__db_datamem(Reflex::Class*);
void __std__vector_edm__FwdPtr_reco__PFJet_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __std__vector_edm__FwdPtr_reco__PFJet_s__datamem_bld(&__std__vector_edm__FwdPtr_reco__PFJet_s__db_datamem);
Reflex::GenreflexMemberBuilder __std__vector_edm__FwdPtr_reco__PFJet_s__funcmem_bld(&__std__vector_edm__FwdPtr_reco__PFJet_s__db_funcmem);
void __std__vector_edm__FwdPtr_reco__PFJet_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("std::vector<edm::FwdPtr<reco::PFJet> >"), typeid(::std::vector<edm::FwdPtr<reco::PFJet> >), sizeof(::std::vector<edm::FwdPtr<reco::PFJet> >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddBase(type_2449, ::Reflex::BaseOffset< ::std::vector<edm::FwdPtr<reco::PFJet> >, ::std::_Vector_base<edm::FwdPtr<reco::PFJet>,std::allocator<edm::FwdPtr<reco::PFJet> > > >::Get(), ::Reflex::PROTECTED)
  .AddTypedef(type_4484, Reflex::Literal("std::vector<edm::FwdPtr<reco::PFJet> >::_Alloc_value_type"))
  .AddTypedef(type_2449, Reflex::Literal("std::vector<edm::FwdPtr<reco::PFJet> >::_Base"))
  .AddTypedef(type_3231, Reflex::Literal("std::vector<edm::FwdPtr<reco::PFJet> >::_Tp_alloc_type"))
  .AddTypedef(type_7962, Reflex::Literal("std::vector<edm::FwdPtr<reco::PFJet> >::_Alloc_traits"))
  .AddTypedef(type_4484, Reflex::Literal("std::vector<edm::FwdPtr<reco::PFJet> >::value_type"))
  .AddTypedef(type_8835, Reflex::Literal("std::vector<edm::FwdPtr<reco::PFJet> >::pointer"))
  .AddTypedef(type_13018, Reflex::Literal("std::vector<edm::FwdPtr<reco::PFJet> >::const_pointer"))
  .AddTypedef(type_13020, Reflex::Literal("std::vector<edm::FwdPtr<reco::PFJet> >::reference"))
  .AddTypedef(type_13022, Reflex::Literal("std::vector<edm::FwdPtr<reco::PFJet> >::const_reference"))
  .AddTypedef(type_7839, Reflex::Literal("std::vector<edm::FwdPtr<reco::PFJet> >::iterator"))
  .AddTypedef(type_7840, Reflex::Literal("std::vector<edm::FwdPtr<reco::PFJet> >::const_iterator"))
  .AddTypedef(type_3415, Reflex::Literal("std::vector<edm::FwdPtr<reco::PFJet> >::const_reverse_iterator"))
  .AddTypedef(type_3416, Reflex::Literal("std::vector<edm::FwdPtr<reco::PFJet> >::reverse_iterator"))
  .AddTypedef(type_3189, Reflex::Literal("std::vector<edm::FwdPtr<reco::PFJet> >::size_type"))
  .AddTypedef(type_3096, Reflex::Literal("std::vector<edm::FwdPtr<reco::PFJet> >::difference_type"))
  .AddTypedef(type_3231, Reflex::Literal("std::vector<edm::FwdPtr<reco::PFJet> >::allocator_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("vector"), constructor_13031, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_29496), Reflex::Literal("vector"), constructor_13032, 0, "__a", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_3189, type_13022, type_29496), Reflex::Literal("vector"), constructor_13033, 0, "__n;__value=_Tp();__a=_Alloc()", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_30617), Reflex::Literal("vector"), constructor_13034, 0, "__x", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~vector"), destructor_13035, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_2973, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getBasesTable"), method_x94, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddFunctionMember<void*(void)>(Reflex::Literal("createCollFuncTable"), method_x95, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandFunctionMemberBuilder(&__std__vector_edm__FwdPtr_reco__PFJet_s__funcmem_bld);
}

//------Delayed data member builder for class vector<edm::FwdPtr<reco::PFJet>,std::allocator<edm::FwdPtr<reco::PFJet> > > -------------------
void __std__vector_edm__FwdPtr_reco__PFJet_s__db_datamem(Reflex::Class*) {

}
//------Delayed function member builder for class vector<edm::FwdPtr<reco::PFJet>,std::allocator<edm::FwdPtr<reco::PFJet> > > -------------------
void __std__vector_edm__FwdPtr_reco__PFJet_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_30618, type_30617), Reflex::Literal("operator="), operator_13036, 0, "__x", ::Reflex::PUBLIC | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_3189, type_13022), Reflex::Literal("assign"), method_13037, 0, "__n;__val", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_7839), Reflex::Literal("begin"), method_13038, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_7840), Reflex::Literal("begin"), method_13039, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_7839), Reflex::Literal("end"), method_13040, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_7840), Reflex::Literal("end"), method_13041, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3189), Reflex::Literal("size"), method_13046, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3189), Reflex::Literal("max_size"), method_13047, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_3189, type_4484), Reflex::Literal("resize"), method_13048, 0, "__new_size;__x=_Tp()", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3189), Reflex::Literal("capacity"), method_13049, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("empty"), method_13050, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_3189), Reflex::Literal("reserve"), method_13051, 0, "__n", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13020, type_3189), Reflex::Literal("operator[]"), operator_13052, 0, "__n", ::Reflex::PUBLIC | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13022, type_3189), Reflex::Literal("operator[]"), operator_13053, 0, "__n", ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13020, type_3189), Reflex::Literal("at"), method_13055, 0, "__n", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13022, type_3189), Reflex::Literal("at"), method_13056, 0, "__n", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13020), Reflex::Literal("front"), method_13057, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13022), Reflex::Literal("front"), method_13058, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13020), Reflex::Literal("back"), method_13059, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13022), Reflex::Literal("back"), method_13060, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_8835), Reflex::Literal("data"), method_13061, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13018), Reflex::Literal("data"), method_13062, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_13022), Reflex::Literal("push_back"), method_13063, 0, "__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680), Reflex::Literal("pop_back"), method_13064, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_7839, type_7839, type_13022), Reflex::Literal("insert"), method_13065, 0, "__position;__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_7839, type_3189, type_13022), Reflex::Literal("insert"), method_13066, 0, "__position;__n;__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_7839, type_7839), Reflex::Literal("erase"), method_13067, 0, "__position", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_7839, type_7839, type_7839), Reflex::Literal("erase"), method_13068, 0, "__first;__last", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_30618), Reflex::Literal("swap"), method_13069, 0, "__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680), Reflex::Literal("clear"), method_13070, 0, 0, ::Reflex::PUBLIC);
}
//------Stub functions for class vector<edm::FwdPtr<reco::CaloJet>,std::allocator<edm::FwdPtr<reco::CaloJet> > > -------------------------------
static void constructor_13876( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<edm::FwdPtr<reco::CaloJet> >();
  else ::new(mem) ::std::vector<edm::FwdPtr<reco::CaloJet> >();
}

static void constructor_13877( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<edm::FwdPtr<reco::CaloJet> >(*(const ::std::allocator<edm::FwdPtr<reco::CaloJet> >*)arg[0]);
  else ::new(mem) ::std::vector<edm::FwdPtr<reco::CaloJet> >(*(const ::std::allocator<edm::FwdPtr<reco::CaloJet> >*)arg[0]);
}

static void constructor_13878( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if ( arg.size() == 1 ) {
    if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<edm::FwdPtr<reco::CaloJet> >(*(::std::size_t*)arg[0]);
  else ::new(mem) ::std::vector<edm::FwdPtr<reco::CaloJet> >(*(::std::size_t*)arg[0]);
  }
  else if ( arg.size() == 2 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<edm::FwdPtr<reco::CaloJet> >(*(::std::size_t*)arg[0],
      *(const ::edm::FwdPtr<reco::CaloJet>*)arg[1]);
  else ::new(mem) ::std::vector<edm::FwdPtr<reco::CaloJet> >(*(::std::size_t*)arg[0],
      *(const ::edm::FwdPtr<reco::CaloJet>*)arg[1]);
  }
  else if ( arg.size() == 3 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<edm::FwdPtr<reco::CaloJet> >(*(::std::size_t*)arg[0],
      *(const ::edm::FwdPtr<reco::CaloJet>*)arg[1],
      *(const ::std::allocator<edm::FwdPtr<reco::CaloJet> >*)arg[2]);
  else ::new(mem) ::std::vector<edm::FwdPtr<reco::CaloJet> >(*(::std::size_t*)arg[0],
      *(const ::edm::FwdPtr<reco::CaloJet>*)arg[1],
      *(const ::std::allocator<edm::FwdPtr<reco::CaloJet> >*)arg[2]);
  }
}

static void constructor_13879( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<edm::FwdPtr<reco::CaloJet> >(*(const ::std::vector<edm::FwdPtr<reco::CaloJet> >*)arg[0]);
  else ::new(mem) ::std::vector<edm::FwdPtr<reco::CaloJet> >(*(const ::std::vector<edm::FwdPtr<reco::CaloJet> >*)arg[0]);
}

static void destructor_13880(void*, void * o, const std::vector<void*>&, void *) {
(((::std::vector<edm::FwdPtr<reco::CaloJet> >*)o)->::std::vector<edm::FwdPtr<reco::CaloJet> >::~vector)();
}
static  void operator_13881( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<edm::FwdPtr<reco::CaloJet> >*)o)->operator=)(*(const ::std::vector<edm::FwdPtr<reco::CaloJet> >*)arg[0]);
  else   (((::std::vector<edm::FwdPtr<reco::CaloJet> >*)o)->operator=)(*(const ::std::vector<edm::FwdPtr<reco::CaloJet> >*)arg[0]);
}

static  void method_13882( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<edm::FwdPtr<reco::CaloJet> >*)o)->assign)(*(::std::size_t*)arg[0],
    *(const ::edm::FwdPtr<reco::CaloJet>*)arg[1]);
}

static  void method_13883( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::CaloJet>*,std::vector<edm::FwdPtr<reco::CaloJet> > >)((((::std::vector<edm::FwdPtr<reco::CaloJet> >*)o)->begin)());
  else   (((::std::vector<edm::FwdPtr<reco::CaloJet> >*)o)->begin)();
}

static  void method_13884( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<const edm::FwdPtr<reco::CaloJet>*,std::vector<edm::FwdPtr<reco::CaloJet> > >)((((const ::std::vector<edm::FwdPtr<reco::CaloJet> >*)o)->begin)());
  else   (((const ::std::vector<edm::FwdPtr<reco::CaloJet> >*)o)->begin)();
}

static  void method_13885( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::CaloJet>*,std::vector<edm::FwdPtr<reco::CaloJet> > >)((((::std::vector<edm::FwdPtr<reco::CaloJet> >*)o)->end)());
  else   (((::std::vector<edm::FwdPtr<reco::CaloJet> >*)o)->end)();
}

static  void method_13886( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<const edm::FwdPtr<reco::CaloJet>*,std::vector<edm::FwdPtr<reco::CaloJet> > >)((((const ::std::vector<edm::FwdPtr<reco::CaloJet> >*)o)->end)());
  else   (((const ::std::vector<edm::FwdPtr<reco::CaloJet> >*)o)->end)();
}

static  void method_13891( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::std::vector<edm::FwdPtr<reco::CaloJet> >*)o)->size)());
  else   (((const ::std::vector<edm::FwdPtr<reco::CaloJet> >*)o)->size)();
}

static  void method_13892( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::std::vector<edm::FwdPtr<reco::CaloJet> >*)o)->max_size)());
  else   (((const ::std::vector<edm::FwdPtr<reco::CaloJet> >*)o)->max_size)();
}

static  void method_13893( void*, void* o, const std::vector<void*>& arg, void*)
{
  if ( arg.size() == 1 ) {
    (((::std::vector<edm::FwdPtr<reco::CaloJet> >*)o)->resize)(*(::std::size_t*)arg[0]);
  }
  else if ( arg.size() == 2 ) { 
    (((::std::vector<edm::FwdPtr<reco::CaloJet> >*)o)->resize)(*(::std::size_t*)arg[0],
      *(::edm::FwdPtr<reco::CaloJet>*)arg[1]);
  }
}

static  void method_13894( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::std::vector<edm::FwdPtr<reco::CaloJet> >*)o)->capacity)());
  else   (((const ::std::vector<edm::FwdPtr<reco::CaloJet> >*)o)->capacity)();
}

static  void method_13895( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::std::vector<edm::FwdPtr<reco::CaloJet> >*)o)->empty)());
  else   (((const ::std::vector<edm::FwdPtr<reco::CaloJet> >*)o)->empty)();
}

static  void method_13896( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<edm::FwdPtr<reco::CaloJet> >*)o)->reserve)(*(::std::size_t*)arg[0]);
}

static  void operator_13897( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<edm::FwdPtr<reco::CaloJet> >*)o)->operator[])(*(::std::size_t*)arg[0]);
  else   (((::std::vector<edm::FwdPtr<reco::CaloJet> >*)o)->operator[])(*(::std::size_t*)arg[0]);
}

static  void operator_13898( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<edm::FwdPtr<reco::CaloJet> >*)o)->operator[])(*(::std::size_t*)arg[0]);
  else   (((const ::std::vector<edm::FwdPtr<reco::CaloJet> >*)o)->operator[])(*(::std::size_t*)arg[0]);
}

static  void method_13900( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<edm::FwdPtr<reco::CaloJet> >*)o)->at)(*(::std::size_t*)arg[0]);
  else   (((::std::vector<edm::FwdPtr<reco::CaloJet> >*)o)->at)(*(::std::size_t*)arg[0]);
}

static  void method_13901( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<edm::FwdPtr<reco::CaloJet> >*)o)->at)(*(::std::size_t*)arg[0]);
  else   (((const ::std::vector<edm::FwdPtr<reco::CaloJet> >*)o)->at)(*(::std::size_t*)arg[0]);
}

static  void method_13902( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<edm::FwdPtr<reco::CaloJet> >*)o)->front)();
  else   (((::std::vector<edm::FwdPtr<reco::CaloJet> >*)o)->front)();
}

static  void method_13903( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<edm::FwdPtr<reco::CaloJet> >*)o)->front)();
  else   (((const ::std::vector<edm::FwdPtr<reco::CaloJet> >*)o)->front)();
}

static  void method_13904( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<edm::FwdPtr<reco::CaloJet> >*)o)->back)();
  else   (((::std::vector<edm::FwdPtr<reco::CaloJet> >*)o)->back)();
}

static  void method_13905( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<edm::FwdPtr<reco::CaloJet> >*)o)->back)();
  else   (((const ::std::vector<edm::FwdPtr<reco::CaloJet> >*)o)->back)();
}

static  void method_13906( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((::std::vector<edm::FwdPtr<reco::CaloJet> >*)o)->data)());
  else   (((::std::vector<edm::FwdPtr<reco::CaloJet> >*)o)->data)();
}

static  void method_13907( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::std::vector<edm::FwdPtr<reco::CaloJet> >*)o)->data)());
  else   (((const ::std::vector<edm::FwdPtr<reco::CaloJet> >*)o)->data)();
}

static  void method_13908( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<edm::FwdPtr<reco::CaloJet> >*)o)->push_back)(*(const ::edm::FwdPtr<reco::CaloJet>*)arg[0]);
}

static  void method_13909( void*, void* o, const std::vector<void*>&, void*)
{
  (((::std::vector<edm::FwdPtr<reco::CaloJet> >*)o)->pop_back)();
}

static  void method_13910( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::CaloJet>*,std::vector<edm::FwdPtr<reco::CaloJet> > >)((((::std::vector<edm::FwdPtr<reco::CaloJet> >*)o)->insert)(*(::__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::CaloJet>*,std::vector<edm::FwdPtr<reco::CaloJet> > >*)arg[0],
    *(const ::edm::FwdPtr<reco::CaloJet>*)arg[1]));
  else   (((::std::vector<edm::FwdPtr<reco::CaloJet> >*)o)->insert)(*(::__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::CaloJet>*,std::vector<edm::FwdPtr<reco::CaloJet> > >*)arg[0],
    *(const ::edm::FwdPtr<reco::CaloJet>*)arg[1]);
}

static  void method_13911( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<edm::FwdPtr<reco::CaloJet> >*)o)->insert)(*(::__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::CaloJet>*,std::vector<edm::FwdPtr<reco::CaloJet> > >*)arg[0],
    *(::std::size_t*)arg[1],
    *(const ::edm::FwdPtr<reco::CaloJet>*)arg[2]);
}

static  void method_13912( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::CaloJet>*,std::vector<edm::FwdPtr<reco::CaloJet> > >)((((::std::vector<edm::FwdPtr<reco::CaloJet> >*)o)->erase)(*(::__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::CaloJet>*,std::vector<edm::FwdPtr<reco::CaloJet> > >*)arg[0]));
  else   (((::std::vector<edm::FwdPtr<reco::CaloJet> >*)o)->erase)(*(::__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::CaloJet>*,std::vector<edm::FwdPtr<reco::CaloJet> > >*)arg[0]);
}

static  void method_13913( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::CaloJet>*,std::vector<edm::FwdPtr<reco::CaloJet> > >)((((::std::vector<edm::FwdPtr<reco::CaloJet> >*)o)->erase)(*(::__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::CaloJet>*,std::vector<edm::FwdPtr<reco::CaloJet> > >*)arg[0],
    *(::__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::CaloJet>*,std::vector<edm::FwdPtr<reco::CaloJet> > >*)arg[1]));
  else   (((::std::vector<edm::FwdPtr<reco::CaloJet> >*)o)->erase)(*(::__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::CaloJet>*,std::vector<edm::FwdPtr<reco::CaloJet> > >*)arg[0],
    *(::__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::CaloJet>*,std::vector<edm::FwdPtr<reco::CaloJet> > >*)arg[1]);
}

static  void method_13914( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<edm::FwdPtr<reco::CaloJet> >*)o)->swap)(*(::std::vector<edm::FwdPtr<reco::CaloJet> >*)arg[0]);
}

static  void method_13915( void*, void* o, const std::vector<void*>&, void*)
{
  (((::std::vector<edm::FwdPtr<reco::CaloJet> >*)o)->clear)();
}

static void method_newdel_2993( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::std::vector<edm::FwdPtr<reco::CaloJet> > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::std::vector<edm::FwdPtr<reco::CaloJet> > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::std::vector<edm::FwdPtr<reco::CaloJet> > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::std::vector<edm::FwdPtr<reco::CaloJet> > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::std::vector<edm::FwdPtr<reco::CaloJet> > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

static void method_x97( void* retaddr, void*, const std::vector<void*>&, void*)
{
  typedef std::vector<std::pair< ::Reflex::Base, int> > Bases_t;
  static Bases_t s_bases;
  if ( !s_bases.size() ) {
    s_bases.push_back(std::make_pair(::Reflex::Base( ::Reflex::TypeBuilder(Reflex::Literal("std::_Vector_base<edm::FwdPtr<reco::CaloJet>,std::allocator<edm::FwdPtr<reco::CaloJet> > >")), ::Reflex::BaseOffset< ::std::vector<edm::FwdPtr<reco::CaloJet> >,::std::_Vector_base<edm::FwdPtr<reco::CaloJet>,std::allocator<edm::FwdPtr<reco::CaloJet> > > >::Get(),::Reflex::PROTECTED), 0));
  }
  if (retaddr) *(Bases_t**)retaddr = &s_bases;
}

static void method_x98( void* retaddr, void*, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**) retaddr = ::Reflex::Proxy< ::std::vector<edm::FwdPtr<reco::CaloJet> > >::Generate();
  else ::Reflex::Proxy< ::std::vector<edm::FwdPtr<reco::CaloJet> > >::Generate();
}

//------Dictionary for class vector<edm::FwdPtr<reco::CaloJet>,std::allocator<edm::FwdPtr<reco::CaloJet> > > -------------------------------
void __std__vector_edm__FwdPtr_reco__CaloJet_s__db_datamem(Reflex::Class*);
void __std__vector_edm__FwdPtr_reco__CaloJet_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __std__vector_edm__FwdPtr_reco__CaloJet_s__datamem_bld(&__std__vector_edm__FwdPtr_reco__CaloJet_s__db_datamem);
Reflex::GenreflexMemberBuilder __std__vector_edm__FwdPtr_reco__CaloJet_s__funcmem_bld(&__std__vector_edm__FwdPtr_reco__CaloJet_s__db_funcmem);
void __std__vector_edm__FwdPtr_reco__CaloJet_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("std::vector<edm::FwdPtr<reco::CaloJet> >"), typeid(::std::vector<edm::FwdPtr<reco::CaloJet> >), sizeof(::std::vector<edm::FwdPtr<reco::CaloJet> >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddBase(type_2458, ::Reflex::BaseOffset< ::std::vector<edm::FwdPtr<reco::CaloJet> >, ::std::_Vector_base<edm::FwdPtr<reco::CaloJet>,std::allocator<edm::FwdPtr<reco::CaloJet> > > >::Get(), ::Reflex::PROTECTED)
  .AddTypedef(type_4487, Reflex::Literal("std::vector<edm::FwdPtr<reco::CaloJet> >::_Alloc_value_type"))
  .AddTypedef(type_2458, Reflex::Literal("std::vector<edm::FwdPtr<reco::CaloJet> >::_Base"))
  .AddTypedef(type_3264, Reflex::Literal("std::vector<edm::FwdPtr<reco::CaloJet> >::_Tp_alloc_type"))
  .AddTypedef(type_7971, Reflex::Literal("std::vector<edm::FwdPtr<reco::CaloJet> >::_Alloc_traits"))
  .AddTypedef(type_4487, Reflex::Literal("std::vector<edm::FwdPtr<reco::CaloJet> >::value_type"))
  .AddTypedef(type_9006, Reflex::Literal("std::vector<edm::FwdPtr<reco::CaloJet> >::pointer"))
  .AddTypedef(type_13863, Reflex::Literal("std::vector<edm::FwdPtr<reco::CaloJet> >::const_pointer"))
  .AddTypedef(type_13865, Reflex::Literal("std::vector<edm::FwdPtr<reco::CaloJet> >::reference"))
  .AddTypedef(type_13867, Reflex::Literal("std::vector<edm::FwdPtr<reco::CaloJet> >::const_reference"))
  .AddTypedef(type_7857, Reflex::Literal("std::vector<edm::FwdPtr<reco::CaloJet> >::iterator"))
  .AddTypedef(type_7858, Reflex::Literal("std::vector<edm::FwdPtr<reco::CaloJet> >::const_iterator"))
  .AddTypedef(type_3443, Reflex::Literal("std::vector<edm::FwdPtr<reco::CaloJet> >::const_reverse_iterator"))
  .AddTypedef(type_3444, Reflex::Literal("std::vector<edm::FwdPtr<reco::CaloJet> >::reverse_iterator"))
  .AddTypedef(type_3189, Reflex::Literal("std::vector<edm::FwdPtr<reco::CaloJet> >::size_type"))
  .AddTypedef(type_3096, Reflex::Literal("std::vector<edm::FwdPtr<reco::CaloJet> >::difference_type"))
  .AddTypedef(type_3264, Reflex::Literal("std::vector<edm::FwdPtr<reco::CaloJet> >::allocator_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("vector"), constructor_13876, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_29613), Reflex::Literal("vector"), constructor_13877, 0, "__a", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_3189, type_13867, type_29613), Reflex::Literal("vector"), constructor_13878, 0, "__n;__value=_Tp();__a=_Alloc()", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_30652), Reflex::Literal("vector"), constructor_13879, 0, "__x", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~vector"), destructor_13880, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_2993, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getBasesTable"), method_x97, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddFunctionMember<void*(void)>(Reflex::Literal("createCollFuncTable"), method_x98, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandFunctionMemberBuilder(&__std__vector_edm__FwdPtr_reco__CaloJet_s__funcmem_bld);
}

//------Delayed data member builder for class vector<edm::FwdPtr<reco::CaloJet>,std::allocator<edm::FwdPtr<reco::CaloJet> > > -------------------
void __std__vector_edm__FwdPtr_reco__CaloJet_s__db_datamem(Reflex::Class*) {

}
//------Delayed function member builder for class vector<edm::FwdPtr<reco::CaloJet>,std::allocator<edm::FwdPtr<reco::CaloJet> > > -------------------
void __std__vector_edm__FwdPtr_reco__CaloJet_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_30653, type_30652), Reflex::Literal("operator="), operator_13881, 0, "__x", ::Reflex::PUBLIC | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_3189, type_13867), Reflex::Literal("assign"), method_13882, 0, "__n;__val", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_7857), Reflex::Literal("begin"), method_13883, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_7858), Reflex::Literal("begin"), method_13884, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_7857), Reflex::Literal("end"), method_13885, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_7858), Reflex::Literal("end"), method_13886, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3189), Reflex::Literal("size"), method_13891, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3189), Reflex::Literal("max_size"), method_13892, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_3189, type_4487), Reflex::Literal("resize"), method_13893, 0, "__new_size;__x=_Tp()", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3189), Reflex::Literal("capacity"), method_13894, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("empty"), method_13895, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_3189), Reflex::Literal("reserve"), method_13896, 0, "__n", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13865, type_3189), Reflex::Literal("operator[]"), operator_13897, 0, "__n", ::Reflex::PUBLIC | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13867, type_3189), Reflex::Literal("operator[]"), operator_13898, 0, "__n", ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13865, type_3189), Reflex::Literal("at"), method_13900, 0, "__n", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13867, type_3189), Reflex::Literal("at"), method_13901, 0, "__n", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13865), Reflex::Literal("front"), method_13902, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13867), Reflex::Literal("front"), method_13903, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13865), Reflex::Literal("back"), method_13904, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13867), Reflex::Literal("back"), method_13905, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_9006), Reflex::Literal("data"), method_13906, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13863), Reflex::Literal("data"), method_13907, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_13867), Reflex::Literal("push_back"), method_13908, 0, "__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680), Reflex::Literal("pop_back"), method_13909, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_7857, type_7857, type_13867), Reflex::Literal("insert"), method_13910, 0, "__position;__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_7857, type_3189, type_13867), Reflex::Literal("insert"), method_13911, 0, "__position;__n;__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_7857, type_7857), Reflex::Literal("erase"), method_13912, 0, "__position", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_7857, type_7857, type_7857), Reflex::Literal("erase"), method_13913, 0, "__first;__last", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_30653), Reflex::Literal("swap"), method_13914, 0, "__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680), Reflex::Literal("clear"), method_13915, 0, 0, ::Reflex::PUBLIC);
}
//------Stub functions for class vector<edm::FwdRef<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet, edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet> >,std::allocator<edm::FwdRef<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet, edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet> > > > -------------------------------
static void constructor_13096( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >();
  else ::new(mem) ::std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >();
}

static void constructor_13097( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >(*(const ::std::allocator<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)arg[0]);
  else ::new(mem) ::std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >(*(const ::std::allocator<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)arg[0]);
}

static void constructor_13098( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if ( arg.size() == 1 ) {
    if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >(*(::std::size_t*)arg[0]);
  else ::new(mem) ::std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >(*(::std::size_t*)arg[0]);
  }
  else if ( arg.size() == 2 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >(*(::std::size_t*)arg[0],
      *(const ::edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)arg[1]);
  else ::new(mem) ::std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >(*(::std::size_t*)arg[0],
      *(const ::edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)arg[1]);
  }
  else if ( arg.size() == 3 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >(*(::std::size_t*)arg[0],
      *(const ::edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)arg[1],
      *(const ::std::allocator<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)arg[2]);
  else ::new(mem) ::std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >(*(::std::size_t*)arg[0],
      *(const ::edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)arg[1],
      *(const ::std::allocator<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)arg[2]);
  }
}

static void constructor_13099( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >(*(const ::std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)arg[0]);
  else ::new(mem) ::std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >(*(const ::std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)arg[0]);
}

static void destructor_13100(void*, void * o, const std::vector<void*>&, void *) {
(((::std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->::std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >::~vector)();
}
static  void operator_13101( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->operator=)(*(const ::std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)arg[0]);
  else   (((::std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->operator=)(*(const ::std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)arg[0]);
}

static  void method_13102( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->assign)(*(::std::size_t*)arg[0],
    *(const ::edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)arg[1]);
}

static  void method_13103( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*,std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >)((((::std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->begin)());
  else   (((::std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->begin)();
}

static  void method_13104( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<const edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*,std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >)((((const ::std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->begin)());
  else   (((const ::std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->begin)();
}

static  void method_13105( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*,std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >)((((::std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->end)());
  else   (((::std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->end)();
}

static  void method_13106( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<const edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*,std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >)((((const ::std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->end)());
  else   (((const ::std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->end)();
}

static  void method_13111( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->size)());
  else   (((const ::std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->size)();
}

static  void method_13112( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->max_size)());
  else   (((const ::std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->max_size)();
}

static  void method_13113( void*, void* o, const std::vector<void*>& arg, void*)
{
  if ( arg.size() == 1 ) {
    (((::std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->resize)(*(::std::size_t*)arg[0]);
  }
  else if ( arg.size() == 2 ) { 
    (((::std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->resize)(*(::std::size_t*)arg[0],
      *(::edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)arg[1]);
  }
}

static  void method_13114( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->capacity)());
  else   (((const ::std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->capacity)();
}

static  void method_13115( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->empty)());
  else   (((const ::std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->empty)();
}

static  void method_13116( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->reserve)(*(::std::size_t*)arg[0]);
}

static  void operator_13117( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->operator[])(*(::std::size_t*)arg[0]);
  else   (((::std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->operator[])(*(::std::size_t*)arg[0]);
}

static  void operator_13118( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->operator[])(*(::std::size_t*)arg[0]);
  else   (((const ::std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->operator[])(*(::std::size_t*)arg[0]);
}

static  void method_13120( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->at)(*(::std::size_t*)arg[0]);
  else   (((::std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->at)(*(::std::size_t*)arg[0]);
}

static  void method_13121( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->at)(*(::std::size_t*)arg[0]);
  else   (((const ::std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->at)(*(::std::size_t*)arg[0]);
}

static  void method_13122( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->front)();
  else   (((::std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->front)();
}

static  void method_13123( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->front)();
  else   (((const ::std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->front)();
}

static  void method_13124( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->back)();
  else   (((::std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->back)();
}

static  void method_13125( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->back)();
  else   (((const ::std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->back)();
}

static  void method_13126( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((::std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->data)());
  else   (((::std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->data)();
}

static  void method_13127( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->data)());
  else   (((const ::std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->data)();
}

static  void method_13128( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->push_back)(*(const ::edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)arg[0]);
}

static  void method_13129( void*, void* o, const std::vector<void*>&, void*)
{
  (((::std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->pop_back)();
}

static  void method_13130( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*,std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >)((((::std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->insert)(*(::__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*,std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >*)arg[0],
    *(const ::edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)arg[1]));
  else   (((::std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->insert)(*(::__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*,std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >*)arg[0],
    *(const ::edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)arg[1]);
}

static  void method_13131( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->insert)(*(::__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*,std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >*)arg[0],
    *(::std::size_t*)arg[1],
    *(const ::edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)arg[2]);
}

static  void method_13132( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*,std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >)((((::std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->erase)(*(::__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*,std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >*)arg[0]));
  else   (((::std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->erase)(*(::__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*,std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >*)arg[0]);
}

static  void method_13133( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*,std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >)((((::std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->erase)(*(::__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*,std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >*)arg[0],
    *(::__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*,std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >*)arg[1]));
  else   (((::std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->erase)(*(::__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*,std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >*)arg[0],
    *(::__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*,std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >*)arg[1]);
}

static  void method_13134( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->swap)(*(::std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)arg[0]);
}

static  void method_13135( void*, void* o, const std::vector<void*>&, void*)
{
  (((::std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->clear)();
}

static void method_newdel_2974( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

static void method_x100( void* retaddr, void*, const std::vector<void*>&, void*)
{
  typedef std::vector<std::pair< ::Reflex::Base, int> > Bases_t;
  static Bases_t s_bases;
  if ( !s_bases.size() ) {
    s_bases.push_back(std::make_pair(::Reflex::Base( ::Reflex::TypeBuilder(Reflex::Literal("std::_Vector_base<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,std::allocator<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >")), ::Reflex::BaseOffset< ::std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >,::std::_Vector_base<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,std::allocator<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > > >::Get(),::Reflex::PROTECTED), 0));
  }
  if (retaddr) *(Bases_t**)retaddr = &s_bases;
}

static void method_x101( void* retaddr, void*, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**) retaddr = ::Reflex::Proxy< ::std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >::Generate();
  else ::Reflex::Proxy< ::std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >::Generate();
}

//------Dictionary for class vector<edm::FwdRef<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet, edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet> >,std::allocator<edm::FwdRef<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet, edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet> > > > -------------------------------
void __std__vector_edm__FwdRef_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s__db_datamem(Reflex::Class*);
void __std__vector_edm__FwdRef_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __std__vector_edm__FwdRef_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s__datamem_bld(&__std__vector_edm__FwdRef_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s__db_datamem);
Reflex::GenreflexMemberBuilder __std__vector_edm__FwdRef_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s__funcmem_bld(&__std__vector_edm__FwdRef_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s__db_funcmem);
void __std__vector_edm__FwdRef_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >"), typeid(::std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >), sizeof(::std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddBase(type_2450, ::Reflex::BaseOffset< ::std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >, ::std::_Vector_base<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,std::allocator<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > > >::Get(), ::Reflex::PROTECTED)
  .AddTypedef(type_4571, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >::_Alloc_value_type"))
  .AddTypedef(type_2450, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >::_Base"))
  .AddTypedef(type_3232, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >::_Tp_alloc_type"))
  .AddTypedef(type_7963, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >::_Alloc_traits"))
  .AddTypedef(type_4571, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >::value_type"))
  .AddTypedef(type_8854, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >::pointer"))
  .AddTypedef(type_13083, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >::const_pointer"))
  .AddTypedef(type_13085, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >::reference"))
  .AddTypedef(type_13087, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >::const_reference"))
  .AddTypedef(type_7841, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >::iterator"))
  .AddTypedef(type_7842, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >::const_iterator"))
  .AddTypedef(type_3417, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >::const_reverse_iterator"))
  .AddTypedef(type_3418, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >::reverse_iterator"))
  .AddTypedef(type_3189, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >::size_type"))
  .AddTypedef(type_3096, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >::difference_type"))
  .AddTypedef(type_3232, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >::allocator_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("vector"), constructor_13096, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_29509), Reflex::Literal("vector"), constructor_13097, 0, "__a", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_3189, type_13087, type_29509), Reflex::Literal("vector"), constructor_13098, 0, "__n;__value=_Tp();__a=_Alloc()", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_30620), Reflex::Literal("vector"), constructor_13099, 0, "__x", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~vector"), destructor_13100, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_2974, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getBasesTable"), method_x100, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddFunctionMember<void*(void)>(Reflex::Literal("createCollFuncTable"), method_x101, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandFunctionMemberBuilder(&__std__vector_edm__FwdRef_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s__funcmem_bld);
}

//------Delayed data member builder for class vector<edm::FwdRef<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet, edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet> >,std::allocator<edm::FwdRef<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet, edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet> > > > -------------------
void __std__vector_edm__FwdRef_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s__db_datamem(Reflex::Class*) {

}
//------Delayed function member builder for class vector<edm::FwdRef<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet, edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet> >,std::allocator<edm::FwdRef<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet, edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet> > > > -------------------
void __std__vector_edm__FwdRef_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_30621, type_30620), Reflex::Literal("operator="), operator_13101, 0, "__x", ::Reflex::PUBLIC | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_3189, type_13087), Reflex::Literal("assign"), method_13102, 0, "__n;__val", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_7841), Reflex::Literal("begin"), method_13103, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_7842), Reflex::Literal("begin"), method_13104, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_7841), Reflex::Literal("end"), method_13105, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_7842), Reflex::Literal("end"), method_13106, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3189), Reflex::Literal("size"), method_13111, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3189), Reflex::Literal("max_size"), method_13112, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_3189, type_4571), Reflex::Literal("resize"), method_13113, 0, "__new_size;__x=_Tp()", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3189), Reflex::Literal("capacity"), method_13114, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("empty"), method_13115, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_3189), Reflex::Literal("reserve"), method_13116, 0, "__n", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13085, type_3189), Reflex::Literal("operator[]"), operator_13117, 0, "__n", ::Reflex::PUBLIC | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13087, type_3189), Reflex::Literal("operator[]"), operator_13118, 0, "__n", ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13085, type_3189), Reflex::Literal("at"), method_13120, 0, "__n", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13087, type_3189), Reflex::Literal("at"), method_13121, 0, "__n", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13085), Reflex::Literal("front"), method_13122, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13087), Reflex::Literal("front"), method_13123, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13085), Reflex::Literal("back"), method_13124, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13087), Reflex::Literal("back"), method_13125, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_8854), Reflex::Literal("data"), method_13126, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13083), Reflex::Literal("data"), method_13127, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_13087), Reflex::Literal("push_back"), method_13128, 0, "__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680), Reflex::Literal("pop_back"), method_13129, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_7841, type_7841, type_13087), Reflex::Literal("insert"), method_13130, 0, "__position;__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_7841, type_3189, type_13087), Reflex::Literal("insert"), method_13131, 0, "__position;__n;__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_7841, type_7841), Reflex::Literal("erase"), method_13132, 0, "__position", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_7841, type_7841, type_7841), Reflex::Literal("erase"), method_13133, 0, "__first;__last", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_30621), Reflex::Literal("swap"), method_13134, 0, "__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680), Reflex::Literal("clear"), method_13135, 0, 0, ::Reflex::PUBLIC);
}
//------Stub functions for class vector<edm::FwdRef<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> >, reco::CaloJet, edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> >, reco::CaloJet> >,std::allocator<edm::FwdRef<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> >, reco::CaloJet, edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> >, reco::CaloJet> > > > -------------------------------
static void constructor_13941( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >();
  else ::new(mem) ::std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >();
}

static void constructor_13942( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >(*(const ::std::allocator<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)arg[0]);
  else ::new(mem) ::std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >(*(const ::std::allocator<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)arg[0]);
}

static void constructor_13943( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if ( arg.size() == 1 ) {
    if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >(*(::std::size_t*)arg[0]);
  else ::new(mem) ::std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >(*(::std::size_t*)arg[0]);
  }
  else if ( arg.size() == 2 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >(*(::std::size_t*)arg[0],
      *(const ::edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)arg[1]);
  else ::new(mem) ::std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >(*(::std::size_t*)arg[0],
      *(const ::edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)arg[1]);
  }
  else if ( arg.size() == 3 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >(*(::std::size_t*)arg[0],
      *(const ::edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)arg[1],
      *(const ::std::allocator<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)arg[2]);
  else ::new(mem) ::std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >(*(::std::size_t*)arg[0],
      *(const ::edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)arg[1],
      *(const ::std::allocator<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)arg[2]);
  }
}

static void constructor_13944( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >(*(const ::std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)arg[0]);
  else ::new(mem) ::std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >(*(const ::std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)arg[0]);
}

static void destructor_13945(void*, void * o, const std::vector<void*>&, void *) {
(((::std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->::std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >::~vector)();
}
static  void operator_13946( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->operator=)(*(const ::std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)arg[0]);
  else   (((::std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->operator=)(*(const ::std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)arg[0]);
}

static  void method_13947( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->assign)(*(::std::size_t*)arg[0],
    *(const ::edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)arg[1]);
}

static  void method_13948( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*,std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >)((((::std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->begin)());
  else   (((::std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->begin)();
}

static  void method_13949( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<const edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*,std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >)((((const ::std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->begin)());
  else   (((const ::std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->begin)();
}

static  void method_13950( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*,std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >)((((::std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->end)());
  else   (((::std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->end)();
}

static  void method_13951( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<const edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*,std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >)((((const ::std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->end)());
  else   (((const ::std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->end)();
}

static  void method_13956( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->size)());
  else   (((const ::std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->size)();
}

static  void method_13957( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->max_size)());
  else   (((const ::std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->max_size)();
}

static  void method_13958( void*, void* o, const std::vector<void*>& arg, void*)
{
  if ( arg.size() == 1 ) {
    (((::std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->resize)(*(::std::size_t*)arg[0]);
  }
  else if ( arg.size() == 2 ) { 
    (((::std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->resize)(*(::std::size_t*)arg[0],
      *(::edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)arg[1]);
  }
}

static  void method_13959( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->capacity)());
  else   (((const ::std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->capacity)();
}

static  void method_13960( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->empty)());
  else   (((const ::std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->empty)();
}

static  void method_13961( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->reserve)(*(::std::size_t*)arg[0]);
}

static  void operator_13962( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->operator[])(*(::std::size_t*)arg[0]);
  else   (((::std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->operator[])(*(::std::size_t*)arg[0]);
}

static  void operator_13963( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->operator[])(*(::std::size_t*)arg[0]);
  else   (((const ::std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->operator[])(*(::std::size_t*)arg[0]);
}

static  void method_13965( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->at)(*(::std::size_t*)arg[0]);
  else   (((::std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->at)(*(::std::size_t*)arg[0]);
}

static  void method_13966( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->at)(*(::std::size_t*)arg[0]);
  else   (((const ::std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->at)(*(::std::size_t*)arg[0]);
}

static  void method_13967( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->front)();
  else   (((::std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->front)();
}

static  void method_13968( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->front)();
  else   (((const ::std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->front)();
}

static  void method_13969( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->back)();
  else   (((::std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->back)();
}

static  void method_13970( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->back)();
  else   (((const ::std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->back)();
}

static  void method_13971( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((::std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->data)());
  else   (((::std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->data)();
}

static  void method_13972( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->data)());
  else   (((const ::std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->data)();
}

static  void method_13973( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->push_back)(*(const ::edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)arg[0]);
}

static  void method_13974( void*, void* o, const std::vector<void*>&, void*)
{
  (((::std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->pop_back)();
}

static  void method_13975( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*,std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >)((((::std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->insert)(*(::__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*,std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >*)arg[0],
    *(const ::edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)arg[1]));
  else   (((::std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->insert)(*(::__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*,std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >*)arg[0],
    *(const ::edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)arg[1]);
}

static  void method_13976( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->insert)(*(::__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*,std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >*)arg[0],
    *(::std::size_t*)arg[1],
    *(const ::edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)arg[2]);
}

static  void method_13977( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*,std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >)((((::std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->erase)(*(::__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*,std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >*)arg[0]));
  else   (((::std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->erase)(*(::__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*,std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >*)arg[0]);
}

static  void method_13978( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*,std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >)((((::std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->erase)(*(::__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*,std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >*)arg[0],
    *(::__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*,std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >*)arg[1]));
  else   (((::std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->erase)(*(::__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*,std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >*)arg[0],
    *(::__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*,std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >*)arg[1]);
}

static  void method_13979( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->swap)(*(::std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)arg[0]);
}

static  void method_13980( void*, void* o, const std::vector<void*>&, void*)
{
  (((::std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->clear)();
}

static void method_newdel_2994( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

static void method_x103( void* retaddr, void*, const std::vector<void*>&, void*)
{
  typedef std::vector<std::pair< ::Reflex::Base, int> > Bases_t;
  static Bases_t s_bases;
  if ( !s_bases.size() ) {
    s_bases.push_back(std::make_pair(::Reflex::Base( ::Reflex::TypeBuilder(Reflex::Literal("std::_Vector_base<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >,std::allocator<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >")), ::Reflex::BaseOffset< ::std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >,::std::_Vector_base<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >,std::allocator<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > > >::Get(),::Reflex::PROTECTED), 0));
  }
  if (retaddr) *(Bases_t**)retaddr = &s_bases;
}

static void method_x104( void* retaddr, void*, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**) retaddr = ::Reflex::Proxy< ::std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >::Generate();
  else ::Reflex::Proxy< ::std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >::Generate();
}

//------Dictionary for class vector<edm::FwdRef<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> >, reco::CaloJet, edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> >, reco::CaloJet> >,std::allocator<edm::FwdRef<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> >, reco::CaloJet, edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> >, reco::CaloJet> > > > -------------------------------
void __std__vector_edm__FwdRef_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s__db_datamem(Reflex::Class*);
void __std__vector_edm__FwdRef_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __std__vector_edm__FwdRef_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s__datamem_bld(&__std__vector_edm__FwdRef_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s__db_datamem);
Reflex::GenreflexMemberBuilder __std__vector_edm__FwdRef_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s__funcmem_bld(&__std__vector_edm__FwdRef_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s__db_funcmem);
void __std__vector_edm__FwdRef_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >"), typeid(::std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >), sizeof(::std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddBase(type_2459, ::Reflex::BaseOffset< ::std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >, ::std::_Vector_base<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >,std::allocator<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > > >::Get(), ::Reflex::PROTECTED)
  .AddTypedef(type_4575, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >::_Alloc_value_type"))
  .AddTypedef(type_2459, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >::_Base"))
  .AddTypedef(type_3265, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >::_Tp_alloc_type"))
  .AddTypedef(type_7972, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >::_Alloc_traits"))
  .AddTypedef(type_4575, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >::value_type"))
  .AddTypedef(type_9025, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >::pointer"))
  .AddTypedef(type_13928, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >::const_pointer"))
  .AddTypedef(type_13930, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >::reference"))
  .AddTypedef(type_13932, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >::const_reference"))
  .AddTypedef(type_7859, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >::iterator"))
  .AddTypedef(type_7860, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >::const_iterator"))
  .AddTypedef(type_3445, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >::const_reverse_iterator"))
  .AddTypedef(type_3446, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >::reverse_iterator"))
  .AddTypedef(type_3189, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >::size_type"))
  .AddTypedef(type_3096, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >::difference_type"))
  .AddTypedef(type_3265, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >::allocator_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("vector"), constructor_13941, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_29626), Reflex::Literal("vector"), constructor_13942, 0, "__a", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_3189, type_13932, type_29626), Reflex::Literal("vector"), constructor_13943, 0, "__n;__value=_Tp();__a=_Alloc()", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_30655), Reflex::Literal("vector"), constructor_13944, 0, "__x", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~vector"), destructor_13945, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_2994, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getBasesTable"), method_x103, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddFunctionMember<void*(void)>(Reflex::Literal("createCollFuncTable"), method_x104, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandFunctionMemberBuilder(&__std__vector_edm__FwdRef_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s__funcmem_bld);
}

//------Delayed data member builder for class vector<edm::FwdRef<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> >, reco::CaloJet, edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> >, reco::CaloJet> >,std::allocator<edm::FwdRef<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> >, reco::CaloJet, edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> >, reco::CaloJet> > > > -------------------
void __std__vector_edm__FwdRef_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s__db_datamem(Reflex::Class*) {

}
//------Delayed function member builder for class vector<edm::FwdRef<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> >, reco::CaloJet, edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> >, reco::CaloJet> >,std::allocator<edm::FwdRef<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> >, reco::CaloJet, edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> >, reco::CaloJet> > > > -------------------
void __std__vector_edm__FwdRef_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_30656, type_30655), Reflex::Literal("operator="), operator_13946, 0, "__x", ::Reflex::PUBLIC | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_3189, type_13932), Reflex::Literal("assign"), method_13947, 0, "__n;__val", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_7859), Reflex::Literal("begin"), method_13948, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_7860), Reflex::Literal("begin"), method_13949, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_7859), Reflex::Literal("end"), method_13950, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_7860), Reflex::Literal("end"), method_13951, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3189), Reflex::Literal("size"), method_13956, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3189), Reflex::Literal("max_size"), method_13957, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_3189, type_4575), Reflex::Literal("resize"), method_13958, 0, "__new_size;__x=_Tp()", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3189), Reflex::Literal("capacity"), method_13959, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("empty"), method_13960, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_3189), Reflex::Literal("reserve"), method_13961, 0, "__n", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13930, type_3189), Reflex::Literal("operator[]"), operator_13962, 0, "__n", ::Reflex::PUBLIC | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13932, type_3189), Reflex::Literal("operator[]"), operator_13963, 0, "__n", ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13930, type_3189), Reflex::Literal("at"), method_13965, 0, "__n", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13932, type_3189), Reflex::Literal("at"), method_13966, 0, "__n", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13930), Reflex::Literal("front"), method_13967, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13932), Reflex::Literal("front"), method_13968, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13930), Reflex::Literal("back"), method_13969, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13932), Reflex::Literal("back"), method_13970, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_9025), Reflex::Literal("data"), method_13971, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13928), Reflex::Literal("data"), method_13972, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_13932), Reflex::Literal("push_back"), method_13973, 0, "__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680), Reflex::Literal("pop_back"), method_13974, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_7859, type_7859, type_13932), Reflex::Literal("insert"), method_13975, 0, "__position;__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_7859, type_3189, type_13932), Reflex::Literal("insert"), method_13976, 0, "__position;__n;__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_7859, type_7859), Reflex::Literal("erase"), method_13977, 0, "__position", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_7859, type_7859, type_7859), Reflex::Literal("erase"), method_13978, 0, "__first;__last", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_30656), Reflex::Literal("swap"), method_13979, 0, "__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680), Reflex::Literal("clear"), method_13980, 0, 0, ::Reflex::PUBLIC);
}
//------Stub functions for class vector<edm::RefVector<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet, edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet> >,std::allocator<edm::RefVector<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet, edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet> > > > -------------------------------
static void constructor_12836( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >();
  else ::new(mem) ::std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >();
}

static void constructor_12837( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >(*(const ::std::allocator<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)arg[0]);
  else ::new(mem) ::std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >(*(const ::std::allocator<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)arg[0]);
}

static void constructor_12838( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if ( arg.size() == 1 ) {
    if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >(*(::std::size_t*)arg[0]);
  else ::new(mem) ::std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >(*(::std::size_t*)arg[0]);
  }
  else if ( arg.size() == 2 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >(*(::std::size_t*)arg[0],
      *(const ::edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)arg[1]);
  else ::new(mem) ::std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >(*(::std::size_t*)arg[0],
      *(const ::edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)arg[1]);
  }
  else if ( arg.size() == 3 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >(*(::std::size_t*)arg[0],
      *(const ::edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)arg[1],
      *(const ::std::allocator<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)arg[2]);
  else ::new(mem) ::std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >(*(::std::size_t*)arg[0],
      *(const ::edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)arg[1],
      *(const ::std::allocator<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)arg[2]);
  }
}

static void constructor_12839( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >(*(const ::std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)arg[0]);
  else ::new(mem) ::std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >(*(const ::std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)arg[0]);
}

static void destructor_12840(void*, void * o, const std::vector<void*>&, void *) {
(((::std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->::std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >::~vector)();
}
static  void operator_12841( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->operator=)(*(const ::std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)arg[0]);
  else   (((::std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->operator=)(*(const ::std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)arg[0]);
}

static  void method_12842( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->assign)(*(::std::size_t*)arg[0],
    *(const ::edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)arg[1]);
}

static  void method_12843( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*,std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >)((((::std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->begin)());
  else   (((::std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->begin)();
}

static  void method_12844( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<const edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*,std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >)((((const ::std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->begin)());
  else   (((const ::std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->begin)();
}

static  void method_12845( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*,std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >)((((::std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->end)());
  else   (((::std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->end)();
}

static  void method_12846( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<const edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*,std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >)((((const ::std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->end)());
  else   (((const ::std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->end)();
}

static  void method_12851( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->size)());
  else   (((const ::std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->size)();
}

static  void method_12852( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->max_size)());
  else   (((const ::std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->max_size)();
}

static  void method_12853( void*, void* o, const std::vector<void*>& arg, void*)
{
  if ( arg.size() == 1 ) {
    (((::std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->resize)(*(::std::size_t*)arg[0]);
  }
  else if ( arg.size() == 2 ) { 
    (((::std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->resize)(*(::std::size_t*)arg[0],
      *(::edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)arg[1]);
  }
}

static  void method_12854( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->capacity)());
  else   (((const ::std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->capacity)();
}

static  void method_12855( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->empty)());
  else   (((const ::std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->empty)();
}

static  void method_12856( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->reserve)(*(::std::size_t*)arg[0]);
}

static  void operator_12857( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->operator[])(*(::std::size_t*)arg[0]);
  else   (((::std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->operator[])(*(::std::size_t*)arg[0]);
}

static  void operator_12858( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->operator[])(*(::std::size_t*)arg[0]);
  else   (((const ::std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->operator[])(*(::std::size_t*)arg[0]);
}

static  void method_12860( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->at)(*(::std::size_t*)arg[0]);
  else   (((::std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->at)(*(::std::size_t*)arg[0]);
}

static  void method_12861( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->at)(*(::std::size_t*)arg[0]);
  else   (((const ::std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->at)(*(::std::size_t*)arg[0]);
}

static  void method_12862( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->front)();
  else   (((::std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->front)();
}

static  void method_12863( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->front)();
  else   (((const ::std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->front)();
}

static  void method_12864( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->back)();
  else   (((::std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->back)();
}

static  void method_12865( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->back)();
  else   (((const ::std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->back)();
}

static  void method_12866( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((::std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->data)());
  else   (((::std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->data)();
}

static  void method_12867( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->data)());
  else   (((const ::std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->data)();
}

static  void method_12868( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->push_back)(*(const ::edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)arg[0]);
}

static  void method_12869( void*, void* o, const std::vector<void*>&, void*)
{
  (((::std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->pop_back)();
}

static  void method_12870( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*,std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >)((((::std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->insert)(*(::__gnu_cxx::__normal_iterator<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*,std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >*)arg[0],
    *(const ::edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)arg[1]));
  else   (((::std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->insert)(*(::__gnu_cxx::__normal_iterator<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*,std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >*)arg[0],
    *(const ::edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)arg[1]);
}

static  void method_12871( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->insert)(*(::__gnu_cxx::__normal_iterator<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*,std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >*)arg[0],
    *(::std::size_t*)arg[1],
    *(const ::edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)arg[2]);
}

static  void method_12872( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*,std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >)((((::std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->erase)(*(::__gnu_cxx::__normal_iterator<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*,std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >*)arg[0]));
  else   (((::std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->erase)(*(::__gnu_cxx::__normal_iterator<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*,std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >*)arg[0]);
}

static  void method_12873( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*,std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >)((((::std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->erase)(*(::__gnu_cxx::__normal_iterator<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*,std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >*)arg[0],
    *(::__gnu_cxx::__normal_iterator<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*,std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >*)arg[1]));
  else   (((::std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->erase)(*(::__gnu_cxx::__normal_iterator<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*,std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >*)arg[0],
    *(::__gnu_cxx::__normal_iterator<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*,std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >*)arg[1]);
}

static  void method_12874( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->swap)(*(::std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)arg[0]);
}

static  void method_12875( void*, void* o, const std::vector<void*>&, void*)
{
  (((::std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->clear)();
}

static void method_newdel_2969( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

static void method_x106( void* retaddr, void*, const std::vector<void*>&, void*)
{
  typedef std::vector<std::pair< ::Reflex::Base, int> > Bases_t;
  static Bases_t s_bases;
  if ( !s_bases.size() ) {
    s_bases.push_back(std::make_pair(::Reflex::Base( ::Reflex::TypeBuilder(Reflex::Literal("std::_Vector_base<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,std::allocator<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >")), ::Reflex::BaseOffset< ::std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >,::std::_Vector_base<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,std::allocator<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > > >::Get(),::Reflex::PROTECTED), 0));
  }
  if (retaddr) *(Bases_t**)retaddr = &s_bases;
}

static void method_x107( void* retaddr, void*, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**) retaddr = ::Reflex::Proxy< ::std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >::Generate();
  else ::Reflex::Proxy< ::std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >::Generate();
}

//------Dictionary for class vector<edm::RefVector<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet, edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet> >,std::allocator<edm::RefVector<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet, edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet> > > > -------------------------------
void __std__vector_edm__RefVector_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s__db_datamem(Reflex::Class*);
void __std__vector_edm__RefVector_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __std__vector_edm__RefVector_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s__datamem_bld(&__std__vector_edm__RefVector_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s__db_datamem);
Reflex::GenreflexMemberBuilder __std__vector_edm__RefVector_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s__funcmem_bld(&__std__vector_edm__RefVector_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s__db_funcmem);
void __std__vector_edm__RefVector_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >"), typeid(::std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >), sizeof(::std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("o_name"), "std::vector<reco::PFJetRefVector>")
  .AddBase(type_2447, ::Reflex::BaseOffset< ::std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >, ::std::_Vector_base<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,std::allocator<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > > >::Get(), ::Reflex::PROTECTED)
  .AddTypedef(type_4496, Reflex::Literal("std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >::_Alloc_value_type"))
  .AddTypedef(type_2447, Reflex::Literal("std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >::_Base"))
  .AddTypedef(type_3224, Reflex::Literal("std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >::_Tp_alloc_type"))
  .AddTypedef(type_7960, Reflex::Literal("std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >::_Alloc_traits"))
  .AddTypedef(type_4496, Reflex::Literal("std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >::value_type"))
  .AddTypedef(type_8797, Reflex::Literal("std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >::pointer"))
  .AddTypedef(type_12823, Reflex::Literal("std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >::const_pointer"))
  .AddTypedef(type_12825, Reflex::Literal("std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >::reference"))
  .AddTypedef(type_12827, Reflex::Literal("std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >::const_reference"))
  .AddTypedef(type_7835, Reflex::Literal("std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >::iterator"))
  .AddTypedef(type_7836, Reflex::Literal("std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >::const_iterator"))
  .AddTypedef(type_3409, Reflex::Literal("std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >::const_reverse_iterator"))
  .AddTypedef(type_3410, Reflex::Literal("std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >::reverse_iterator"))
  .AddTypedef(type_3189, Reflex::Literal("std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >::size_type"))
  .AddTypedef(type_3096, Reflex::Literal("std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >::difference_type"))
  .AddTypedef(type_3224, Reflex::Literal("std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >::allocator_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("vector"), constructor_12836, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_29470), Reflex::Literal("vector"), constructor_12837, 0, "__a", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_3189, type_12827, type_29470), Reflex::Literal("vector"), constructor_12838, 0, "__n;__value=_Tp();__a=_Alloc()", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_30609), Reflex::Literal("vector"), constructor_12839, 0, "__x", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~vector"), destructor_12840, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_2969, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getBasesTable"), method_x106, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddFunctionMember<void*(void)>(Reflex::Literal("createCollFuncTable"), method_x107, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandFunctionMemberBuilder(&__std__vector_edm__RefVector_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s__funcmem_bld);
}

//------Delayed data member builder for class vector<edm::RefVector<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet, edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet> >,std::allocator<edm::RefVector<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet, edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet> > > > -------------------
void __std__vector_edm__RefVector_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s__db_datamem(Reflex::Class*) {

}
//------Delayed function member builder for class vector<edm::RefVector<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet, edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet> >,std::allocator<edm::RefVector<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet, edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet> > > > -------------------
void __std__vector_edm__RefVector_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_30610, type_30609), Reflex::Literal("operator="), operator_12841, 0, "__x", ::Reflex::PUBLIC | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_3189, type_12827), Reflex::Literal("assign"), method_12842, 0, "__n;__val", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_7835), Reflex::Literal("begin"), method_12843, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_7836), Reflex::Literal("begin"), method_12844, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_7835), Reflex::Literal("end"), method_12845, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_7836), Reflex::Literal("end"), method_12846, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3189), Reflex::Literal("size"), method_12851, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3189), Reflex::Literal("max_size"), method_12852, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_3189, type_4496), Reflex::Literal("resize"), method_12853, 0, "__new_size;__x=_Tp()", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3189), Reflex::Literal("capacity"), method_12854, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("empty"), method_12855, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_3189), Reflex::Literal("reserve"), method_12856, 0, "__n", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_12825, type_3189), Reflex::Literal("operator[]"), operator_12857, 0, "__n", ::Reflex::PUBLIC | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_12827, type_3189), Reflex::Literal("operator[]"), operator_12858, 0, "__n", ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_12825, type_3189), Reflex::Literal("at"), method_12860, 0, "__n", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_12827, type_3189), Reflex::Literal("at"), method_12861, 0, "__n", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_12825), Reflex::Literal("front"), method_12862, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_12827), Reflex::Literal("front"), method_12863, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_12825), Reflex::Literal("back"), method_12864, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_12827), Reflex::Literal("back"), method_12865, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_8797), Reflex::Literal("data"), method_12866, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_12823), Reflex::Literal("data"), method_12867, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_12827), Reflex::Literal("push_back"), method_12868, 0, "__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680), Reflex::Literal("pop_back"), method_12869, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_7835, type_7835, type_12827), Reflex::Literal("insert"), method_12870, 0, "__position;__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_7835, type_3189, type_12827), Reflex::Literal("insert"), method_12871, 0, "__position;__n;__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_7835, type_7835), Reflex::Literal("erase"), method_12872, 0, "__position", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_7835, type_7835, type_7835), Reflex::Literal("erase"), method_12873, 0, "__first;__last", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_30610), Reflex::Literal("swap"), method_12874, 0, "__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680), Reflex::Literal("clear"), method_12875, 0, 0, ::Reflex::PUBLIC);
}
//------Stub functions for class vector<edm::RefVector<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> >, reco::CaloJet, edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> >, reco::CaloJet> >,std::allocator<edm::RefVector<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> >, reco::CaloJet, edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> >, reco::CaloJet> > > > -------------------------------
static void constructor_13681( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >();
  else ::new(mem) ::std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >();
}

static void constructor_13682( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >(*(const ::std::allocator<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)arg[0]);
  else ::new(mem) ::std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >(*(const ::std::allocator<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)arg[0]);
}

static void constructor_13683( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if ( arg.size() == 1 ) {
    if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >(*(::std::size_t*)arg[0]);
  else ::new(mem) ::std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >(*(::std::size_t*)arg[0]);
  }
  else if ( arg.size() == 2 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >(*(::std::size_t*)arg[0],
      *(const ::edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)arg[1]);
  else ::new(mem) ::std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >(*(::std::size_t*)arg[0],
      *(const ::edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)arg[1]);
  }
  else if ( arg.size() == 3 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >(*(::std::size_t*)arg[0],
      *(const ::edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)arg[1],
      *(const ::std::allocator<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)arg[2]);
  else ::new(mem) ::std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >(*(::std::size_t*)arg[0],
      *(const ::edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)arg[1],
      *(const ::std::allocator<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)arg[2]);
  }
}

static void constructor_13684( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >(*(const ::std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)arg[0]);
  else ::new(mem) ::std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >(*(const ::std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)arg[0]);
}

static void destructor_13685(void*, void * o, const std::vector<void*>&, void *) {
(((::std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->::std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >::~vector)();
}
static  void operator_13686( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->operator=)(*(const ::std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)arg[0]);
  else   (((::std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->operator=)(*(const ::std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)arg[0]);
}

static  void method_13687( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->assign)(*(::std::size_t*)arg[0],
    *(const ::edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)arg[1]);
}

static  void method_13688( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*,std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >)((((::std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->begin)());
  else   (((::std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->begin)();
}

static  void method_13689( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<const edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*,std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >)((((const ::std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->begin)());
  else   (((const ::std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->begin)();
}

static  void method_13690( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*,std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >)((((::std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->end)());
  else   (((::std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->end)();
}

static  void method_13691( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<const edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*,std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >)((((const ::std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->end)());
  else   (((const ::std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->end)();
}

static  void method_13696( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->size)());
  else   (((const ::std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->size)();
}

static  void method_13697( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->max_size)());
  else   (((const ::std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->max_size)();
}

static  void method_13698( void*, void* o, const std::vector<void*>& arg, void*)
{
  if ( arg.size() == 1 ) {
    (((::std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->resize)(*(::std::size_t*)arg[0]);
  }
  else if ( arg.size() == 2 ) { 
    (((::std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->resize)(*(::std::size_t*)arg[0],
      *(::edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)arg[1]);
  }
}

static  void method_13699( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->capacity)());
  else   (((const ::std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->capacity)();
}

static  void method_13700( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->empty)());
  else   (((const ::std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->empty)();
}

static  void method_13701( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->reserve)(*(::std::size_t*)arg[0]);
}

static  void operator_13702( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->operator[])(*(::std::size_t*)arg[0]);
  else   (((::std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->operator[])(*(::std::size_t*)arg[0]);
}

static  void operator_13703( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->operator[])(*(::std::size_t*)arg[0]);
  else   (((const ::std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->operator[])(*(::std::size_t*)arg[0]);
}

static  void method_13705( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->at)(*(::std::size_t*)arg[0]);
  else   (((::std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->at)(*(::std::size_t*)arg[0]);
}

static  void method_13706( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->at)(*(::std::size_t*)arg[0]);
  else   (((const ::std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->at)(*(::std::size_t*)arg[0]);
}

static  void method_13707( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->front)();
  else   (((::std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->front)();
}

static  void method_13708( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->front)();
  else   (((const ::std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->front)();
}

static  void method_13709( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->back)();
  else   (((::std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->back)();
}

static  void method_13710( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->back)();
  else   (((const ::std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->back)();
}

static  void method_13711( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((::std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->data)());
  else   (((::std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->data)();
}

static  void method_13712( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->data)());
  else   (((const ::std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->data)();
}

static  void method_13713( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->push_back)(*(const ::edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)arg[0]);
}

static  void method_13714( void*, void* o, const std::vector<void*>&, void*)
{
  (((::std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->pop_back)();
}

static  void method_13715( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*,std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >)((((::std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->insert)(*(::__gnu_cxx::__normal_iterator<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*,std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >*)arg[0],
    *(const ::edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)arg[1]));
  else   (((::std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->insert)(*(::__gnu_cxx::__normal_iterator<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*,std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >*)arg[0],
    *(const ::edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)arg[1]);
}

static  void method_13716( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->insert)(*(::__gnu_cxx::__normal_iterator<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*,std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >*)arg[0],
    *(::std::size_t*)arg[1],
    *(const ::edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)arg[2]);
}

static  void method_13717( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*,std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >)((((::std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->erase)(*(::__gnu_cxx::__normal_iterator<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*,std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >*)arg[0]));
  else   (((::std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->erase)(*(::__gnu_cxx::__normal_iterator<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*,std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >*)arg[0]);
}

static  void method_13718( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*,std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >)((((::std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->erase)(*(::__gnu_cxx::__normal_iterator<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*,std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >*)arg[0],
    *(::__gnu_cxx::__normal_iterator<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*,std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >*)arg[1]));
  else   (((::std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->erase)(*(::__gnu_cxx::__normal_iterator<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*,std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >*)arg[0],
    *(::__gnu_cxx::__normal_iterator<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*,std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >*)arg[1]);
}

static  void method_13719( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->swap)(*(::std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)arg[0]);
}

static  void method_13720( void*, void* o, const std::vector<void*>&, void*)
{
  (((::std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->clear)();
}

static void method_newdel_2989( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

static void method_x109( void* retaddr, void*, const std::vector<void*>&, void*)
{
  typedef std::vector<std::pair< ::Reflex::Base, int> > Bases_t;
  static Bases_t s_bases;
  if ( !s_bases.size() ) {
    s_bases.push_back(std::make_pair(::Reflex::Base( ::Reflex::TypeBuilder(Reflex::Literal("std::_Vector_base<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >,std::allocator<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >")), ::Reflex::BaseOffset< ::std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >,::std::_Vector_base<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >,std::allocator<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > > >::Get(),::Reflex::PROTECTED), 0));
  }
  if (retaddr) *(Bases_t**)retaddr = &s_bases;
}

static void method_x110( void* retaddr, void*, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**) retaddr = ::Reflex::Proxy< ::std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >::Generate();
  else ::Reflex::Proxy< ::std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >::Generate();
}

//------Dictionary for class vector<edm::RefVector<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> >, reco::CaloJet, edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> >, reco::CaloJet> >,std::allocator<edm::RefVector<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> >, reco::CaloJet, edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> >, reco::CaloJet> > > > -------------------------------
void __std__vector_edm__RefVector_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s__db_datamem(Reflex::Class*);
void __std__vector_edm__RefVector_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __std__vector_edm__RefVector_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s__datamem_bld(&__std__vector_edm__RefVector_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s__db_datamem);
Reflex::GenreflexMemberBuilder __std__vector_edm__RefVector_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s__funcmem_bld(&__std__vector_edm__RefVector_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s__db_funcmem);
void __std__vector_edm__RefVector_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >"), typeid(::std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >), sizeof(::std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("o_name"), "std::vector<reco::CaloJetRefVector>")
  .AddBase(type_2456, ::Reflex::BaseOffset< ::std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >, ::std::_Vector_base<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >,std::allocator<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > > >::Get(), ::Reflex::PROTECTED)
  .AddTypedef(type_4516, Reflex::Literal("std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >::_Alloc_value_type"))
  .AddTypedef(type_2456, Reflex::Literal("std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >::_Base"))
  .AddTypedef(type_3256, Reflex::Literal("std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >::_Tp_alloc_type"))
  .AddTypedef(type_7969, Reflex::Literal("std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >::_Alloc_traits"))
  .AddTypedef(type_4516, Reflex::Literal("std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >::value_type"))
  .AddTypedef(type_8968, Reflex::Literal("std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >::pointer"))
  .AddTypedef(type_13668, Reflex::Literal("std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >::const_pointer"))
  .AddTypedef(type_13670, Reflex::Literal("std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >::reference"))
  .AddTypedef(type_13672, Reflex::Literal("std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >::const_reference"))
  .AddTypedef(type_7853, Reflex::Literal("std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >::iterator"))
  .AddTypedef(type_7854, Reflex::Literal("std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >::const_iterator"))
  .AddTypedef(type_3435, Reflex::Literal("std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >::const_reverse_iterator"))
  .AddTypedef(type_3436, Reflex::Literal("std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >::reverse_iterator"))
  .AddTypedef(type_3189, Reflex::Literal("std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >::size_type"))
  .AddTypedef(type_3096, Reflex::Literal("std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >::difference_type"))
  .AddTypedef(type_3256, Reflex::Literal("std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >::allocator_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("vector"), constructor_13681, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_29587), Reflex::Literal("vector"), constructor_13682, 0, "__a", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_3189, type_13672, type_29587), Reflex::Literal("vector"), constructor_13683, 0, "__n;__value=_Tp();__a=_Alloc()", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_30644), Reflex::Literal("vector"), constructor_13684, 0, "__x", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~vector"), destructor_13685, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_2989, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getBasesTable"), method_x109, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddFunctionMember<void*(void)>(Reflex::Literal("createCollFuncTable"), method_x110, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandFunctionMemberBuilder(&__std__vector_edm__RefVector_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s__funcmem_bld);
}

//------Delayed data member builder for class vector<edm::RefVector<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> >, reco::CaloJet, edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> >, reco::CaloJet> >,std::allocator<edm::RefVector<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> >, reco::CaloJet, edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> >, reco::CaloJet> > > > -------------------
void __std__vector_edm__RefVector_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s__db_datamem(Reflex::Class*) {

}
//------Delayed function member builder for class vector<edm::RefVector<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> >, reco::CaloJet, edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> >, reco::CaloJet> >,std::allocator<edm::RefVector<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> >, reco::CaloJet, edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> >, reco::CaloJet> > > > -------------------
void __std__vector_edm__RefVector_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_30645, type_30644), Reflex::Literal("operator="), operator_13686, 0, "__x", ::Reflex::PUBLIC | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_3189, type_13672), Reflex::Literal("assign"), method_13687, 0, "__n;__val", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_7853), Reflex::Literal("begin"), method_13688, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_7854), Reflex::Literal("begin"), method_13689, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_7853), Reflex::Literal("end"), method_13690, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_7854), Reflex::Literal("end"), method_13691, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3189), Reflex::Literal("size"), method_13696, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3189), Reflex::Literal("max_size"), method_13697, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_3189, type_4516), Reflex::Literal("resize"), method_13698, 0, "__new_size;__x=_Tp()", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3189), Reflex::Literal("capacity"), method_13699, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("empty"), method_13700, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_3189), Reflex::Literal("reserve"), method_13701, 0, "__n", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13670, type_3189), Reflex::Literal("operator[]"), operator_13702, 0, "__n", ::Reflex::PUBLIC | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13672, type_3189), Reflex::Literal("operator[]"), operator_13703, 0, "__n", ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13670, type_3189), Reflex::Literal("at"), method_13705, 0, "__n", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13672, type_3189), Reflex::Literal("at"), method_13706, 0, "__n", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13670), Reflex::Literal("front"), method_13707, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13672), Reflex::Literal("front"), method_13708, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13670), Reflex::Literal("back"), method_13709, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13672), Reflex::Literal("back"), method_13710, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_8968), Reflex::Literal("data"), method_13711, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13668), Reflex::Literal("data"), method_13712, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_13672), Reflex::Literal("push_back"), method_13713, 0, "__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680), Reflex::Literal("pop_back"), method_13714, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_7853, type_7853, type_13672), Reflex::Literal("insert"), method_13715, 0, "__position;__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_7853, type_3189, type_13672), Reflex::Literal("insert"), method_13716, 0, "__position;__n;__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_7853, type_7853), Reflex::Literal("erase"), method_13717, 0, "__position", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_7853, type_7853, type_7853), Reflex::Literal("erase"), method_13718, 0, "__first;__last", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_30645), Reflex::Literal("swap"), method_13719, 0, "__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680), Reflex::Literal("clear"), method_13720, 0, 0, ::Reflex::PUBLIC);
}
//------Stub functions for class Wrapper<edm::RefVector<std::vector<reco::JPTJet, std::allocator<reco::JPTJet> >, reco::JPTJet, edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet, std::allocator<reco::JPTJet> >, reco::JPTJet> > > -------------------------------
static void constructor_20668( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<edm::RefVector<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >();
  else ::new(mem) ::edm::Wrapper<edm::RefVector<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >();
}

static void constructor_20669( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<edm::RefVector<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >(*(::std::auto_ptr<edm::RefVector<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >*)arg[0]);
  else ::new(mem) ::edm::Wrapper<edm::RefVector<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >(*(::std::auto_ptr<edm::RefVector<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >*)arg[0]);
}

static void destructor_20670(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::Wrapper<edm::RefVector<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >*)o)->::edm::Wrapper<edm::RefVector<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >::~Wrapper)();
}
static  void method_20671( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Wrapper<edm::RefVector<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >*)o)->product)());
  else   (((const ::edm::Wrapper<edm::RefVector<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >*)o)->product)();
}

static  void operator_20672( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Wrapper<edm::RefVector<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >*)o)->operator->)());
  else   (((const ::edm::Wrapper<edm::RefVector<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >*)o)->operator->)();
}

static  void method_20673( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::Wrapper<edm::RefVector<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >*)o)->productTypeInfo)();
  else   (((::edm::Wrapper<edm::RefVector<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >*)o)->productTypeInfo)();
}

static  void method_20674( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::Wrapper<edm::RefVector<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >*)o)->typeInfo)();
  else   (((::edm::Wrapper<edm::RefVector<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >*)o)->typeInfo)();
}

static void constructor_20675( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<edm::RefVector<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >((::edm::RefVector<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >*)arg[0]);
  else ::new(mem) ::edm::Wrapper<edm::RefVector<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >((::edm::RefVector<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >*)arg[0]);
}

static  void method_20676( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((::edm::Wrapper<edm::RefVector<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >*)o)->getInterface)());
  else   (((::edm::Wrapper<edm::RefVector<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >*)o)->getInterface)();
}

static  void method_20677( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<edm::RefVector<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >*)o)->fillView)(*(const ::edm::ProductID*)arg[0],
    *(::std::vector<const void*>*)arg[1],
    *(::boost::shared_ptr<edm::reftobase::RefVectorHolderBase>*)arg[2]);
}

static  void method_20678( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<edm::RefVector<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >*)o)->setPtr)(*(const ::std::type_info*)arg[0],
    *(unsigned long*)arg[1],
    *(const void**)arg[2]);
}

static  void method_20679( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<edm::RefVector<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >*)o)->fillPtrVector)(*(const ::std::type_info*)arg[0],
    *(const ::std::vector<unsigned long>*)arg[1],
    *(::std::vector<const void*>*)arg[2]);
}

static  void method_20680( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Wrapper<edm::RefVector<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >*)o)->dynamicTypeInfo)();
  else   (((const ::edm::Wrapper<edm::RefVector<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >*)o)->dynamicTypeInfo)();
}

static  void method_20681( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Wrapper<edm::RefVector<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >*)o)->isPresent)());
  else   (((const ::edm::Wrapper<edm::RefVector<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >*)o)->isPresent)();
}

static  void method_20682( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Wrapper<edm::RefVector<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >*)o)->dynamicTypeInfo_)();
  else   (((const ::edm::Wrapper<edm::RefVector<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >*)o)->dynamicTypeInfo_)();
}

static void method_newdel_4536( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<edm::RefVector<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<edm::RefVector<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<edm::RefVector<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<edm::RefVector<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<edm::RefVector<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class Wrapper<edm::RefVector<std::vector<reco::JPTJet, std::allocator<reco::JPTJet> >, reco::JPTJet, edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet, std::allocator<reco::JPTJet> >, reco::JPTJet> > > -------------------------------
void __edm__Wrapper_edm__RefVector_std__vector_reco__JPTJet__reco__JPTJet_edm__refhelper__FindUsingAdvance_std__vector_reco__JPTJet__reco__JPTJet_s_s__db_datamem(Reflex::Class*);
void __edm__Wrapper_edm__RefVector_std__vector_reco__JPTJet__reco__JPTJet_edm__refhelper__FindUsingAdvance_std__vector_reco__JPTJet__reco__JPTJet_s_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__Wrapper_edm__RefVector_std__vector_reco__JPTJet__reco__JPTJet_edm__refhelper__FindUsingAdvance_std__vector_reco__JPTJet__reco__JPTJet_s_s__datamem_bld(&__edm__Wrapper_edm__RefVector_std__vector_reco__JPTJet__reco__JPTJet_edm__refhelper__FindUsingAdvance_std__vector_reco__JPTJet__reco__JPTJet_s_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__Wrapper_edm__RefVector_std__vector_reco__JPTJet__reco__JPTJet_edm__refhelper__FindUsingAdvance_std__vector_reco__JPTJet__reco__JPTJet_s_s__funcmem_bld(&__edm__Wrapper_edm__RefVector_std__vector_reco__JPTJet__reco__JPTJet_edm__refhelper__FindUsingAdvance_std__vector_reco__JPTJet__reco__JPTJet_s_s__db_funcmem);
void __edm__Wrapper_edm__RefVector_std__vector_reco__JPTJet__reco__JPTJet_edm__refhelper__FindUsingAdvance_std__vector_reco__JPTJet__reco__JPTJet_s_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::Wrapper<edm::RefVector<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >"), typeid(::edm::Wrapper<edm::RefVector<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >), sizeof(::edm::Wrapper<edm::RefVector<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("o_name"), "edm::Wrapper<reco::JPTJetRefVector>")
  .AddTypedef(type_4491, Reflex::Literal("edm::Wrapper<edm::RefVector<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >::value_type"))
  .AddTypedef(type_4491, Reflex::Literal("edm::Wrapper<edm::RefVector<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >::wrapped_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("Wrapper"), constructor_20668, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_2724), Reflex::Literal("Wrapper"), constructor_20669, 0, "ptr", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~Wrapper"), destructor_20670, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_33503), Reflex::Literal("Wrapper"), constructor_20675, 0, "ptr", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_4536, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__Wrapper_edm__RefVector_std__vector_reco__JPTJet__reco__JPTJet_edm__refhelper__FindUsingAdvance_std__vector_reco__JPTJet__reco__JPTJet_s_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__Wrapper_edm__RefVector_std__vector_reco__JPTJet__reco__JPTJet_edm__refhelper__FindUsingAdvance_std__vector_reco__JPTJet__reco__JPTJet_s_s__funcmem_bld);
}

//------Delayed data member builder for class Wrapper<edm::RefVector<std::vector<reco::JPTJet, std::allocator<reco::JPTJet> >, reco::JPTJet, edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet, std::allocator<reco::JPTJet> >, reco::JPTJet> > > -------------------
void __edm__Wrapper_edm__RefVector_std__vector_reco__JPTJet__reco__JPTJet_edm__refhelper__FindUsingAdvance_std__vector_reco__JPTJet__reco__JPTJet_s_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_1574, Reflex::Literal("present"), OffsetOf(__shadow__::__edm__Wrapper_edm__RefVector_std__vector_reco__JPTJet__reco__JPTJet_edm__refhelper__FindUsingAdvance_std__vector_reco__JPTJet__reco__JPTJet_s_s_, present), ::Reflex::PRIVATE)
  .AddDataMember(type_4491, Reflex::Literal("obj"), OffsetOf(__shadow__::__edm__Wrapper_edm__RefVector_std__vector_reco__JPTJet__reco__JPTJet_edm__refhelper__FindUsingAdvance_std__vector_reco__JPTJet__reco__JPTJet_s_s_, obj), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class Wrapper<edm::RefVector<std::vector<reco::JPTJet, std::allocator<reco::JPTJet> >, reco::JPTJet, edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet, std::allocator<reco::JPTJet> >, reco::JPTJet> > > -------------------
void __edm__Wrapper_edm__RefVector_std__vector_reco__JPTJet__reco__JPTJet_edm__refhelper__FindUsingAdvance_std__vector_reco__JPTJet__reco__JPTJet_s_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_33502), Reflex::Literal("product"), method_20671, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_33502), Reflex::Literal("operator->"), operator_20672, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_18629), Reflex::Literal("productTypeInfo"), method_20673, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_18629), Reflex::Literal("typeInfo"), method_20674, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_33504), Reflex::Literal("getInterface"), method_20676, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_18495, type_18575, type_33095), Reflex::Literal("fillView"), method_20677, 0, "id;pointers;helpers", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_18629, type_347, type_9980), Reflex::Literal("setPtr"), method_20678, 0, "iToType;iIndex;oPtr", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_18629, type_22942, type_18575), Reflex::Literal("fillPtrVector"), method_20679, 0, "iToType;iIndices;oPtr", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_18629), Reflex::Literal("dynamicTypeInfo"), method_20680, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("isPresent"), method_20681, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_18629), Reflex::Literal("dynamicTypeInfo_"), method_20682, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST);
}
//------Stub functions for class Wrapper<std::vector<edm::RefVector<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet, edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet> >, std::allocator<edm::RefVector<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet, edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet> > > > > -------------------------------
static void constructor_20710( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >();
  else ::new(mem) ::edm::Wrapper<std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >();
}

static void constructor_20711( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >(*(::std::auto_ptr<std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >*)arg[0]);
  else ::new(mem) ::edm::Wrapper<std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >(*(::std::auto_ptr<std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >*)arg[0]);
}

static void destructor_20712(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::Wrapper<std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >*)o)->::edm::Wrapper<std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >::~Wrapper)();
}
static  void method_20713( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Wrapper<std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >*)o)->product)());
  else   (((const ::edm::Wrapper<std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >*)o)->product)();
}

static  void operator_20714( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Wrapper<std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >*)o)->operator->)());
  else   (((const ::edm::Wrapper<std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >*)o)->operator->)();
}

static  void method_20715( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::Wrapper<std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >*)o)->productTypeInfo)();
  else   (((::edm::Wrapper<std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >*)o)->productTypeInfo)();
}

static  void method_20716( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::Wrapper<std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >*)o)->typeInfo)();
  else   (((::edm::Wrapper<std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >*)o)->typeInfo)();
}

static void constructor_20717( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >((::std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)arg[0]);
  else ::new(mem) ::edm::Wrapper<std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >((::std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)arg[0]);
}

static  void method_20718( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((::edm::Wrapper<std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >*)o)->getInterface)());
  else   (((::edm::Wrapper<std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >*)o)->getInterface)();
}

static  void method_20719( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >*)o)->fillView)(*(const ::edm::ProductID*)arg[0],
    *(::std::vector<const void*>*)arg[1],
    *(::boost::shared_ptr<edm::reftobase::RefVectorHolderBase>*)arg[2]);
}

static  void method_20720( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >*)o)->setPtr)(*(const ::std::type_info*)arg[0],
    *(unsigned long*)arg[1],
    *(const void**)arg[2]);
}

static  void method_20721( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >*)o)->fillPtrVector)(*(const ::std::type_info*)arg[0],
    *(const ::std::vector<unsigned long>*)arg[1],
    *(::std::vector<const void*>*)arg[2]);
}

static  void method_20722( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Wrapper<std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >*)o)->dynamicTypeInfo)();
  else   (((const ::edm::Wrapper<std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >*)o)->dynamicTypeInfo)();
}

static  void method_20723( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Wrapper<std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >*)o)->isPresent)());
  else   (((const ::edm::Wrapper<std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >*)o)->isPresent)();
}

static  void method_20724( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Wrapper<std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >*)o)->dynamicTypeInfo_)();
  else   (((const ::edm::Wrapper<std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >*)o)->dynamicTypeInfo_)();
}

static void method_newdel_4538( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class Wrapper<std::vector<edm::RefVector<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet, edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet> >, std::allocator<edm::RefVector<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet, edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet> > > > > -------------------------------
void __edm__Wrapper_std__vector_edm__RefVector_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s_s__db_datamem(Reflex::Class*);
void __edm__Wrapper_std__vector_edm__RefVector_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__Wrapper_std__vector_edm__RefVector_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s_s__datamem_bld(&__edm__Wrapper_std__vector_edm__RefVector_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__Wrapper_std__vector_edm__RefVector_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s_s__funcmem_bld(&__edm__Wrapper_std__vector_edm__RefVector_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s_s__db_funcmem);
void __edm__Wrapper_std__vector_edm__RefVector_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::Wrapper<std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >"), typeid(::edm::Wrapper<std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >), sizeof(::edm::Wrapper<std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("o_name"), "edm::Wrapper<std::vector<reco::PFJetRefVector> >")
  .AddTypedef(type_2969, Reflex::Literal("edm::Wrapper<std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >::value_type"))
  .AddTypedef(type_2969, Reflex::Literal("edm::Wrapper<std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >::wrapped_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("Wrapper"), constructor_20710, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_2726), Reflex::Literal("Wrapper"), constructor_20711, 0, "ptr", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~Wrapper"), destructor_20712, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_33512), Reflex::Literal("Wrapper"), constructor_20717, 0, "ptr", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_4538, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__Wrapper_std__vector_edm__RefVector_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__Wrapper_std__vector_edm__RefVector_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s_s__funcmem_bld);
}

//------Delayed data member builder for class Wrapper<std::vector<edm::RefVector<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet, edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet> >, std::allocator<edm::RefVector<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet, edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet> > > > > -------------------
void __edm__Wrapper_std__vector_edm__RefVector_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_1574, Reflex::Literal("present"), OffsetOf(__shadow__::__edm__Wrapper_std__vector_edm__RefVector_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s_s_, present), ::Reflex::PRIVATE)
  .AddDataMember(type_2969, Reflex::Literal("obj"), OffsetOf(__shadow__::__edm__Wrapper_std__vector_edm__RefVector_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s_s_, obj), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class Wrapper<std::vector<edm::RefVector<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet, edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet> >, std::allocator<edm::RefVector<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet, edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet> > > > > -------------------
void __edm__Wrapper_std__vector_edm__RefVector_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_33511), Reflex::Literal("product"), method_20713, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_33511), Reflex::Literal("operator->"), operator_20714, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_18629), Reflex::Literal("productTypeInfo"), method_20715, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_18629), Reflex::Literal("typeInfo"), method_20716, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_33513), Reflex::Literal("getInterface"), method_20718, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_18495, type_18575, type_33095), Reflex::Literal("fillView"), method_20719, 0, "id;pointers;helpers", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_18629, type_347, type_9980), Reflex::Literal("setPtr"), method_20720, 0, "iToType;iIndex;oPtr", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_18629, type_22942, type_18575), Reflex::Literal("fillPtrVector"), method_20721, 0, "iToType;iIndices;oPtr", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_18629), Reflex::Literal("dynamicTypeInfo"), method_20722, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("isPresent"), method_20723, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_18629), Reflex::Literal("dynamicTypeInfo_"), method_20724, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST);
}
//------Stub functions for class Wrapper<std::vector<edm::FwdPtr<reco::PFJet>, std::allocator<edm::FwdPtr<reco::PFJet> > > > -------------------------------
static void constructor_20731( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<std::vector<edm::FwdPtr<reco::PFJet> > >();
  else ::new(mem) ::edm::Wrapper<std::vector<edm::FwdPtr<reco::PFJet> > >();
}

static void constructor_20732( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<std::vector<edm::FwdPtr<reco::PFJet> > >(*(::std::auto_ptr<std::vector<edm::FwdPtr<reco::PFJet> > >*)arg[0]);
  else ::new(mem) ::edm::Wrapper<std::vector<edm::FwdPtr<reco::PFJet> > >(*(::std::auto_ptr<std::vector<edm::FwdPtr<reco::PFJet> > >*)arg[0]);
}

static void destructor_20733(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::Wrapper<std::vector<edm::FwdPtr<reco::PFJet> > >*)o)->::edm::Wrapper<std::vector<edm::FwdPtr<reco::PFJet> > >::~Wrapper)();
}
static  void method_20734( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Wrapper<std::vector<edm::FwdPtr<reco::PFJet> > >*)o)->product)());
  else   (((const ::edm::Wrapper<std::vector<edm::FwdPtr<reco::PFJet> > >*)o)->product)();
}

static  void operator_20735( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Wrapper<std::vector<edm::FwdPtr<reco::PFJet> > >*)o)->operator->)());
  else   (((const ::edm::Wrapper<std::vector<edm::FwdPtr<reco::PFJet> > >*)o)->operator->)();
}

static  void method_20736( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::Wrapper<std::vector<edm::FwdPtr<reco::PFJet> > >*)o)->productTypeInfo)();
  else   (((::edm::Wrapper<std::vector<edm::FwdPtr<reco::PFJet> > >*)o)->productTypeInfo)();
}

static  void method_20737( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::Wrapper<std::vector<edm::FwdPtr<reco::PFJet> > >*)o)->typeInfo)();
  else   (((::edm::Wrapper<std::vector<edm::FwdPtr<reco::PFJet> > >*)o)->typeInfo)();
}

static void constructor_20738( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<std::vector<edm::FwdPtr<reco::PFJet> > >((::std::vector<edm::FwdPtr<reco::PFJet> >*)arg[0]);
  else ::new(mem) ::edm::Wrapper<std::vector<edm::FwdPtr<reco::PFJet> > >((::std::vector<edm::FwdPtr<reco::PFJet> >*)arg[0]);
}

static  void method_20739( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((::edm::Wrapper<std::vector<edm::FwdPtr<reco::PFJet> > >*)o)->getInterface)());
  else   (((::edm::Wrapper<std::vector<edm::FwdPtr<reco::PFJet> > >*)o)->getInterface)();
}

static  void method_20740( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<std::vector<edm::FwdPtr<reco::PFJet> > >*)o)->fillView)(*(const ::edm::ProductID*)arg[0],
    *(::std::vector<const void*>*)arg[1],
    *(::boost::shared_ptr<edm::reftobase::RefVectorHolderBase>*)arg[2]);
}

static  void method_20741( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<std::vector<edm::FwdPtr<reco::PFJet> > >*)o)->setPtr)(*(const ::std::type_info*)arg[0],
    *(unsigned long*)arg[1],
    *(const void**)arg[2]);
}

static  void method_20742( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<std::vector<edm::FwdPtr<reco::PFJet> > >*)o)->fillPtrVector)(*(const ::std::type_info*)arg[0],
    *(const ::std::vector<unsigned long>*)arg[1],
    *(::std::vector<const void*>*)arg[2]);
}

static  void method_20743( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Wrapper<std::vector<edm::FwdPtr<reco::PFJet> > >*)o)->dynamicTypeInfo)();
  else   (((const ::edm::Wrapper<std::vector<edm::FwdPtr<reco::PFJet> > >*)o)->dynamicTypeInfo)();
}

static  void method_20744( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Wrapper<std::vector<edm::FwdPtr<reco::PFJet> > >*)o)->isPresent)());
  else   (((const ::edm::Wrapper<std::vector<edm::FwdPtr<reco::PFJet> > >*)o)->isPresent)();
}

static  void method_20745( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Wrapper<std::vector<edm::FwdPtr<reco::PFJet> > >*)o)->dynamicTypeInfo_)();
  else   (((const ::edm::Wrapper<std::vector<edm::FwdPtr<reco::PFJet> > >*)o)->dynamicTypeInfo_)();
}

static void method_newdel_4539( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<edm::FwdPtr<reco::PFJet> > > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<edm::FwdPtr<reco::PFJet> > > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<edm::FwdPtr<reco::PFJet> > > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<edm::FwdPtr<reco::PFJet> > > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<edm::FwdPtr<reco::PFJet> > > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class Wrapper<std::vector<edm::FwdPtr<reco::PFJet>, std::allocator<edm::FwdPtr<reco::PFJet> > > > -------------------------------
void __edm__Wrapper_std__vector_edm__FwdPtr_reco__PFJet_s_s__db_datamem(Reflex::Class*);
void __edm__Wrapper_std__vector_edm__FwdPtr_reco__PFJet_s_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__Wrapper_std__vector_edm__FwdPtr_reco__PFJet_s_s__datamem_bld(&__edm__Wrapper_std__vector_edm__FwdPtr_reco__PFJet_s_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__Wrapper_std__vector_edm__FwdPtr_reco__PFJet_s_s__funcmem_bld(&__edm__Wrapper_std__vector_edm__FwdPtr_reco__PFJet_s_s__db_funcmem);
void __edm__Wrapper_std__vector_edm__FwdPtr_reco__PFJet_s_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::Wrapper<std::vector<edm::FwdPtr<reco::PFJet> > >"), typeid(::edm::Wrapper<std::vector<edm::FwdPtr<reco::PFJet> > >), sizeof(::edm::Wrapper<std::vector<edm::FwdPtr<reco::PFJet> > >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("o_name"), "edm::Wrapper<reco::PFJetFwdPtrVector>")
  .AddTypedef(type_2973, Reflex::Literal("edm::Wrapper<std::vector<edm::FwdPtr<reco::PFJet> > >::value_type"))
  .AddTypedef(type_2973, Reflex::Literal("edm::Wrapper<std::vector<edm::FwdPtr<reco::PFJet> > >::wrapped_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("Wrapper"), constructor_20731, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_2727), Reflex::Literal("Wrapper"), constructor_20732, 0, "ptr", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~Wrapper"), destructor_20733, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_33517), Reflex::Literal("Wrapper"), constructor_20738, 0, "ptr", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_4539, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__Wrapper_std__vector_edm__FwdPtr_reco__PFJet_s_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__Wrapper_std__vector_edm__FwdPtr_reco__PFJet_s_s__funcmem_bld);
}

//------Delayed data member builder for class Wrapper<std::vector<edm::FwdPtr<reco::PFJet>, std::allocator<edm::FwdPtr<reco::PFJet> > > > -------------------
void __edm__Wrapper_std__vector_edm__FwdPtr_reco__PFJet_s_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_1574, Reflex::Literal("present"), OffsetOf(__shadow__::__edm__Wrapper_std__vector_edm__FwdPtr_reco__PFJet_s_s_, present), ::Reflex::PRIVATE)
  .AddDataMember(type_2973, Reflex::Literal("obj"), OffsetOf(__shadow__::__edm__Wrapper_std__vector_edm__FwdPtr_reco__PFJet_s_s_, obj), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class Wrapper<std::vector<edm::FwdPtr<reco::PFJet>, std::allocator<edm::FwdPtr<reco::PFJet> > > > -------------------
void __edm__Wrapper_std__vector_edm__FwdPtr_reco__PFJet_s_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_33516), Reflex::Literal("product"), method_20734, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_33516), Reflex::Literal("operator->"), operator_20735, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_18629), Reflex::Literal("productTypeInfo"), method_20736, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_18629), Reflex::Literal("typeInfo"), method_20737, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_33518), Reflex::Literal("getInterface"), method_20739, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_18495, type_18575, type_33095), Reflex::Literal("fillView"), method_20740, 0, "id;pointers;helpers", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_18629, type_347, type_9980), Reflex::Literal("setPtr"), method_20741, 0, "iToType;iIndex;oPtr", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_18629, type_22942, type_18575), Reflex::Literal("fillPtrVector"), method_20742, 0, "iToType;iIndices;oPtr", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_18629), Reflex::Literal("dynamicTypeInfo"), method_20743, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("isPresent"), method_20744, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_18629), Reflex::Literal("dynamicTypeInfo_"), method_20745, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST);
}
//------Stub functions for class Wrapper<std::vector<edm::FwdRef<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet, edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet> >, std::allocator<edm::FwdRef<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet, edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet> > > > > -------------------------------
static void constructor_20752( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >();
  else ::new(mem) ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >();
}

static void constructor_20753( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >(*(::std::auto_ptr<std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >*)arg[0]);
  else ::new(mem) ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >(*(::std::auto_ptr<std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >*)arg[0]);
}

static void destructor_20754(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >*)o)->::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >::~Wrapper)();
}
static  void method_20755( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >*)o)->product)());
  else   (((const ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >*)o)->product)();
}

static  void operator_20756( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >*)o)->operator->)());
  else   (((const ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >*)o)->operator->)();
}

static  void method_20757( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >*)o)->productTypeInfo)();
  else   (((::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >*)o)->productTypeInfo)();
}

static  void method_20758( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >*)o)->typeInfo)();
  else   (((::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >*)o)->typeInfo)();
}

static void constructor_20759( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >((::std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)arg[0]);
  else ::new(mem) ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >((::std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)arg[0]);
}

static  void method_20760( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >*)o)->getInterface)());
  else   (((::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >*)o)->getInterface)();
}

static  void method_20761( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >*)o)->fillView)(*(const ::edm::ProductID*)arg[0],
    *(::std::vector<const void*>*)arg[1],
    *(::boost::shared_ptr<edm::reftobase::RefVectorHolderBase>*)arg[2]);
}

static  void method_20762( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >*)o)->setPtr)(*(const ::std::type_info*)arg[0],
    *(unsigned long*)arg[1],
    *(const void**)arg[2]);
}

static  void method_20763( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >*)o)->fillPtrVector)(*(const ::std::type_info*)arg[0],
    *(const ::std::vector<unsigned long>*)arg[1],
    *(::std::vector<const void*>*)arg[2]);
}

static  void method_20764( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >*)o)->dynamicTypeInfo)();
  else   (((const ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >*)o)->dynamicTypeInfo)();
}

static  void method_20765( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >*)o)->isPresent)());
  else   (((const ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >*)o)->isPresent)();
}

static  void method_20766( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >*)o)->dynamicTypeInfo_)();
  else   (((const ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >*)o)->dynamicTypeInfo_)();
}

static void method_newdel_4540( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class Wrapper<std::vector<edm::FwdRef<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet, edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet> >, std::allocator<edm::FwdRef<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet, edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet> > > > > -------------------------------
void __edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s_s__db_datamem(Reflex::Class*);
void __edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s_s__datamem_bld(&__edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s_s__funcmem_bld(&__edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s_s__db_funcmem);
void __edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >"), typeid(::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >), sizeof(::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("o_name"), "edm::Wrapper<reco::PFJetFwdRefVector>")
  .AddTypedef(type_2974, Reflex::Literal("edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >::value_type"))
  .AddTypedef(type_2974, Reflex::Literal("edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >::wrapped_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("Wrapper"), constructor_20752, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_2728), Reflex::Literal("Wrapper"), constructor_20753, 0, "ptr", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~Wrapper"), destructor_20754, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_33522), Reflex::Literal("Wrapper"), constructor_20759, 0, "ptr", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_4540, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s_s__funcmem_bld);
}

//------Delayed data member builder for class Wrapper<std::vector<edm::FwdRef<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet, edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet> >, std::allocator<edm::FwdRef<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet, edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet> > > > > -------------------
void __edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_1574, Reflex::Literal("present"), OffsetOf(__shadow__::__edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s_s_, present), ::Reflex::PRIVATE)
  .AddDataMember(type_2974, Reflex::Literal("obj"), OffsetOf(__shadow__::__edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s_s_, obj), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class Wrapper<std::vector<edm::FwdRef<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet, edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet> >, std::allocator<edm::FwdRef<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet, edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet> > > > > -------------------
void __edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_33521), Reflex::Literal("product"), method_20755, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_33521), Reflex::Literal("operator->"), operator_20756, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_18629), Reflex::Literal("productTypeInfo"), method_20757, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_18629), Reflex::Literal("typeInfo"), method_20758, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_33523), Reflex::Literal("getInterface"), method_20760, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_18495, type_18575, type_33095), Reflex::Literal("fillView"), method_20761, 0, "id;pointers;helpers", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_18629, type_347, type_9980), Reflex::Literal("setPtr"), method_20762, 0, "iToType;iIndex;oPtr", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_18629, type_22942, type_18575), Reflex::Literal("fillPtrVector"), method_20763, 0, "iToType;iIndices;oPtr", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_18629), Reflex::Literal("dynamicTypeInfo"), method_20764, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("isPresent"), method_20765, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_18629), Reflex::Literal("dynamicTypeInfo_"), method_20766, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST);
}
//------Stub functions for class Wrapper<edm::RefVector<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet, edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet> > > -------------------------------
static void constructor_20773( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >();
  else ::new(mem) ::edm::Wrapper<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >();
}

static void constructor_20774( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >(*(::std::auto_ptr<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)arg[0]);
  else ::new(mem) ::edm::Wrapper<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >(*(::std::auto_ptr<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)arg[0]);
}

static void destructor_20775(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::Wrapper<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->::edm::Wrapper<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >::~Wrapper)();
}
static  void method_20776( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Wrapper<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->product)());
  else   (((const ::edm::Wrapper<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->product)();
}

static  void operator_20777( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Wrapper<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->operator->)());
  else   (((const ::edm::Wrapper<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->operator->)();
}

static  void method_20778( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::Wrapper<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->productTypeInfo)();
  else   (((::edm::Wrapper<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->productTypeInfo)();
}

static  void method_20779( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::Wrapper<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->typeInfo)();
  else   (((::edm::Wrapper<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->typeInfo)();
}

static void constructor_20780( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >((::edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)arg[0]);
  else ::new(mem) ::edm::Wrapper<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >((::edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)arg[0]);
}

static  void method_20781( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((::edm::Wrapper<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->getInterface)());
  else   (((::edm::Wrapper<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->getInterface)();
}

static  void method_20782( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->fillView)(*(const ::edm::ProductID*)arg[0],
    *(::std::vector<const void*>*)arg[1],
    *(::boost::shared_ptr<edm::reftobase::RefVectorHolderBase>*)arg[2]);
}

static  void method_20783( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->setPtr)(*(const ::std::type_info*)arg[0],
    *(unsigned long*)arg[1],
    *(const void**)arg[2]);
}

static  void method_20784( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->fillPtrVector)(*(const ::std::type_info*)arg[0],
    *(const ::std::vector<unsigned long>*)arg[1],
    *(::std::vector<const void*>*)arg[2]);
}

static  void method_20785( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Wrapper<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->dynamicTypeInfo)();
  else   (((const ::edm::Wrapper<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->dynamicTypeInfo)();
}

static  void method_20786( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Wrapper<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->isPresent)());
  else   (((const ::edm::Wrapper<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->isPresent)();
}

static  void method_20787( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Wrapper<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->dynamicTypeInfo_)();
  else   (((const ::edm::Wrapper<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->dynamicTypeInfo_)();
}

static void method_newdel_4541( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class Wrapper<edm::RefVector<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet, edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet> > > -------------------------------
void __edm__Wrapper_edm__RefVector_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s__db_datamem(Reflex::Class*);
void __edm__Wrapper_edm__RefVector_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__Wrapper_edm__RefVector_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s__datamem_bld(&__edm__Wrapper_edm__RefVector_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__Wrapper_edm__RefVector_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s__funcmem_bld(&__edm__Wrapper_edm__RefVector_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s__db_funcmem);
void __edm__Wrapper_edm__RefVector_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::Wrapper<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >"), typeid(::edm::Wrapper<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >), sizeof(::edm::Wrapper<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("o_name"), "edm::Wrapper<reco::PFJetRefVector>")
  .AddTypedef(type_4496, Reflex::Literal("edm::Wrapper<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >::value_type"))
  .AddTypedef(type_4496, Reflex::Literal("edm::Wrapper<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >::wrapped_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("Wrapper"), constructor_20773, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_2729), Reflex::Literal("Wrapper"), constructor_20774, 0, "ptr", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~Wrapper"), destructor_20775, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_8797), Reflex::Literal("Wrapper"), constructor_20780, 0, "ptr", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_4541, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__Wrapper_edm__RefVector_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__Wrapper_edm__RefVector_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s__funcmem_bld);
}

//------Delayed data member builder for class Wrapper<edm::RefVector<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet, edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet> > > -------------------
void __edm__Wrapper_edm__RefVector_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_1574, Reflex::Literal("present"), OffsetOf(__shadow__::__edm__Wrapper_edm__RefVector_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s_, present), ::Reflex::PRIVATE)
  .AddDataMember(type_4496, Reflex::Literal("obj"), OffsetOf(__shadow__::__edm__Wrapper_edm__RefVector_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s_, obj), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class Wrapper<edm::RefVector<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet, edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet> > > -------------------
void __edm__Wrapper_edm__RefVector_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_12823), Reflex::Literal("product"), method_20776, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_12823), Reflex::Literal("operator->"), operator_20777, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_18629), Reflex::Literal("productTypeInfo"), method_20778, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_18629), Reflex::Literal("typeInfo"), method_20779, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_33526), Reflex::Literal("getInterface"), method_20781, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_18495, type_18575, type_33095), Reflex::Literal("fillView"), method_20782, 0, "id;pointers;helpers", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_18629, type_347, type_9980), Reflex::Literal("setPtr"), method_20783, 0, "iToType;iIndex;oPtr", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_18629, type_22942, type_18575), Reflex::Literal("fillPtrVector"), method_20784, 0, "iToType;iIndices;oPtr", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_18629), Reflex::Literal("dynamicTypeInfo"), method_20785, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("isPresent"), method_20786, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_18629), Reflex::Literal("dynamicTypeInfo_"), method_20787, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST);
}
//------Stub functions for class Wrapper<std::vector<edm::FwdPtr<reco::BasicJet>, std::allocator<edm::FwdPtr<reco::BasicJet> > > > -------------------------------
static void constructor_20878( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<std::vector<edm::FwdPtr<reco::BasicJet> > >();
  else ::new(mem) ::edm::Wrapper<std::vector<edm::FwdPtr<reco::BasicJet> > >();
}

static void constructor_20879( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<std::vector<edm::FwdPtr<reco::BasicJet> > >(*(::std::auto_ptr<std::vector<edm::FwdPtr<reco::BasicJet> > >*)arg[0]);
  else ::new(mem) ::edm::Wrapper<std::vector<edm::FwdPtr<reco::BasicJet> > >(*(::std::auto_ptr<std::vector<edm::FwdPtr<reco::BasicJet> > >*)arg[0]);
}

static void destructor_20880(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::Wrapper<std::vector<edm::FwdPtr<reco::BasicJet> > >*)o)->::edm::Wrapper<std::vector<edm::FwdPtr<reco::BasicJet> > >::~Wrapper)();
}
static  void method_20881( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Wrapper<std::vector<edm::FwdPtr<reco::BasicJet> > >*)o)->product)());
  else   (((const ::edm::Wrapper<std::vector<edm::FwdPtr<reco::BasicJet> > >*)o)->product)();
}

static  void operator_20882( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Wrapper<std::vector<edm::FwdPtr<reco::BasicJet> > >*)o)->operator->)());
  else   (((const ::edm::Wrapper<std::vector<edm::FwdPtr<reco::BasicJet> > >*)o)->operator->)();
}

static  void method_20883( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::Wrapper<std::vector<edm::FwdPtr<reco::BasicJet> > >*)o)->productTypeInfo)();
  else   (((::edm::Wrapper<std::vector<edm::FwdPtr<reco::BasicJet> > >*)o)->productTypeInfo)();
}

static  void method_20884( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::Wrapper<std::vector<edm::FwdPtr<reco::BasicJet> > >*)o)->typeInfo)();
  else   (((::edm::Wrapper<std::vector<edm::FwdPtr<reco::BasicJet> > >*)o)->typeInfo)();
}

static void constructor_20885( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<std::vector<edm::FwdPtr<reco::BasicJet> > >((::std::vector<edm::FwdPtr<reco::BasicJet> >*)arg[0]);
  else ::new(mem) ::edm::Wrapper<std::vector<edm::FwdPtr<reco::BasicJet> > >((::std::vector<edm::FwdPtr<reco::BasicJet> >*)arg[0]);
}

static  void method_20886( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((::edm::Wrapper<std::vector<edm::FwdPtr<reco::BasicJet> > >*)o)->getInterface)());
  else   (((::edm::Wrapper<std::vector<edm::FwdPtr<reco::BasicJet> > >*)o)->getInterface)();
}

static  void method_20887( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<std::vector<edm::FwdPtr<reco::BasicJet> > >*)o)->fillView)(*(const ::edm::ProductID*)arg[0],
    *(::std::vector<const void*>*)arg[1],
    *(::boost::shared_ptr<edm::reftobase::RefVectorHolderBase>*)arg[2]);
}

static  void method_20888( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<std::vector<edm::FwdPtr<reco::BasicJet> > >*)o)->setPtr)(*(const ::std::type_info*)arg[0],
    *(unsigned long*)arg[1],
    *(const void**)arg[2]);
}

static  void method_20889( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<std::vector<edm::FwdPtr<reco::BasicJet> > >*)o)->fillPtrVector)(*(const ::std::type_info*)arg[0],
    *(const ::std::vector<unsigned long>*)arg[1],
    *(::std::vector<const void*>*)arg[2]);
}

static  void method_20890( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Wrapper<std::vector<edm::FwdPtr<reco::BasicJet> > >*)o)->dynamicTypeInfo)();
  else   (((const ::edm::Wrapper<std::vector<edm::FwdPtr<reco::BasicJet> > >*)o)->dynamicTypeInfo)();
}

static  void method_20891( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Wrapper<std::vector<edm::FwdPtr<reco::BasicJet> > >*)o)->isPresent)());
  else   (((const ::edm::Wrapper<std::vector<edm::FwdPtr<reco::BasicJet> > >*)o)->isPresent)();
}

static  void method_20892( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Wrapper<std::vector<edm::FwdPtr<reco::BasicJet> > >*)o)->dynamicTypeInfo_)();
  else   (((const ::edm::Wrapper<std::vector<edm::FwdPtr<reco::BasicJet> > >*)o)->dynamicTypeInfo_)();
}

static void method_newdel_4546( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<edm::FwdPtr<reco::BasicJet> > > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<edm::FwdPtr<reco::BasicJet> > > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<edm::FwdPtr<reco::BasicJet> > > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<edm::FwdPtr<reco::BasicJet> > > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<edm::FwdPtr<reco::BasicJet> > > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class Wrapper<std::vector<edm::FwdPtr<reco::BasicJet>, std::allocator<edm::FwdPtr<reco::BasicJet> > > > -------------------------------
void __edm__Wrapper_std__vector_edm__FwdPtr_reco__BasicJet_s_s__db_datamem(Reflex::Class*);
void __edm__Wrapper_std__vector_edm__FwdPtr_reco__BasicJet_s_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__Wrapper_std__vector_edm__FwdPtr_reco__BasicJet_s_s__datamem_bld(&__edm__Wrapper_std__vector_edm__FwdPtr_reco__BasicJet_s_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__Wrapper_std__vector_edm__FwdPtr_reco__BasicJet_s_s__funcmem_bld(&__edm__Wrapper_std__vector_edm__FwdPtr_reco__BasicJet_s_s__db_funcmem);
void __edm__Wrapper_std__vector_edm__FwdPtr_reco__BasicJet_s_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::Wrapper<std::vector<edm::FwdPtr<reco::BasicJet> > >"), typeid(::edm::Wrapper<std::vector<edm::FwdPtr<reco::BasicJet> > >), sizeof(::edm::Wrapper<std::vector<edm::FwdPtr<reco::BasicJet> > >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("o_name"), "edm::Wrapper<reco::BasicJetFwdPtrVector>")
  .AddTypedef(type_2981, Reflex::Literal("edm::Wrapper<std::vector<edm::FwdPtr<reco::BasicJet> > >::value_type"))
  .AddTypedef(type_2981, Reflex::Literal("edm::Wrapper<std::vector<edm::FwdPtr<reco::BasicJet> > >::wrapped_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("Wrapper"), constructor_20878, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_2734), Reflex::Literal("Wrapper"), constructor_20879, 0, "ptr", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~Wrapper"), destructor_20880, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_33548), Reflex::Literal("Wrapper"), constructor_20885, 0, "ptr", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_4546, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__Wrapper_std__vector_edm__FwdPtr_reco__BasicJet_s_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__Wrapper_std__vector_edm__FwdPtr_reco__BasicJet_s_s__funcmem_bld);
}

//------Delayed data member builder for class Wrapper<std::vector<edm::FwdPtr<reco::BasicJet>, std::allocator<edm::FwdPtr<reco::BasicJet> > > > -------------------
void __edm__Wrapper_std__vector_edm__FwdPtr_reco__BasicJet_s_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_1574, Reflex::Literal("present"), OffsetOf(__shadow__::__edm__Wrapper_std__vector_edm__FwdPtr_reco__BasicJet_s_s_, present), ::Reflex::PRIVATE)
  .AddDataMember(type_2981, Reflex::Literal("obj"), OffsetOf(__shadow__::__edm__Wrapper_std__vector_edm__FwdPtr_reco__BasicJet_s_s_, obj), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class Wrapper<std::vector<edm::FwdPtr<reco::BasicJet>, std::allocator<edm::FwdPtr<reco::BasicJet> > > > -------------------
void __edm__Wrapper_std__vector_edm__FwdPtr_reco__BasicJet_s_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_33547), Reflex::Literal("product"), method_20881, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_33547), Reflex::Literal("operator->"), operator_20882, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_18629), Reflex::Literal("productTypeInfo"), method_20883, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_18629), Reflex::Literal("typeInfo"), method_20884, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_33549), Reflex::Literal("getInterface"), method_20886, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_18495, type_18575, type_33095), Reflex::Literal("fillView"), method_20887, 0, "id;pointers;helpers", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_18629, type_347, type_9980), Reflex::Literal("setPtr"), method_20888, 0, "iToType;iIndex;oPtr", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_18629, type_22942, type_18575), Reflex::Literal("fillPtrVector"), method_20889, 0, "iToType;iIndices;oPtr", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_18629), Reflex::Literal("dynamicTypeInfo"), method_20890, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("isPresent"), method_20891, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_18629), Reflex::Literal("dynamicTypeInfo_"), method_20892, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST);
}
//------Stub functions for class Wrapper<std::vector<edm::FwdRef<std::vector<reco::BasicJet, std::allocator<reco::BasicJet> >, reco::BasicJet, edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet, std::allocator<reco::BasicJet> >, reco::BasicJet> >, std::allocator<edm::FwdRef<std::vector<reco::BasicJet, std::allocator<reco::BasicJet> >, reco::BasicJet, edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet, std::allocator<reco::BasicJet> >, reco::BasicJet> > > > > -------------------------------
static void constructor_20899( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > > >();
  else ::new(mem) ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > > >();
}

static void constructor_20900( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > > >(*(::std::auto_ptr<std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > > >*)arg[0]);
  else ::new(mem) ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > > >(*(::std::auto_ptr<std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > > >*)arg[0]);
}

static void destructor_20901(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > > >*)o)->::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > > >::~Wrapper)();
}
static  void method_20902( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > > >*)o)->product)());
  else   (((const ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > > >*)o)->product)();
}

static  void operator_20903( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > > >*)o)->operator->)());
  else   (((const ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > > >*)o)->operator->)();
}

static  void method_20904( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > > >*)o)->productTypeInfo)();
  else   (((::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > > >*)o)->productTypeInfo)();
}

static  void method_20905( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > > >*)o)->typeInfo)();
  else   (((::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > > >*)o)->typeInfo)();
}

static void constructor_20906( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > > >((::std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)arg[0]);
  else ::new(mem) ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > > >((::std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)arg[0]);
}

static  void method_20907( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > > >*)o)->getInterface)());
  else   (((::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > > >*)o)->getInterface)();
}

static  void method_20908( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > > >*)o)->fillView)(*(const ::edm::ProductID*)arg[0],
    *(::std::vector<const void*>*)arg[1],
    *(::boost::shared_ptr<edm::reftobase::RefVectorHolderBase>*)arg[2]);
}

static  void method_20909( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > > >*)o)->setPtr)(*(const ::std::type_info*)arg[0],
    *(unsigned long*)arg[1],
    *(const void**)arg[2]);
}

static  void method_20910( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > > >*)o)->fillPtrVector)(*(const ::std::type_info*)arg[0],
    *(const ::std::vector<unsigned long>*)arg[1],
    *(::std::vector<const void*>*)arg[2]);
}

static  void method_20911( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > > >*)o)->dynamicTypeInfo)();
  else   (((const ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > > >*)o)->dynamicTypeInfo)();
}

static  void method_20912( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > > >*)o)->isPresent)());
  else   (((const ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > > >*)o)->isPresent)();
}

static  void method_20913( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > > >*)o)->dynamicTypeInfo_)();
  else   (((const ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > > >*)o)->dynamicTypeInfo_)();
}

static void method_newdel_4547( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > > > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > > > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > > > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > > > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > > > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class Wrapper<std::vector<edm::FwdRef<std::vector<reco::BasicJet, std::allocator<reco::BasicJet> >, reco::BasicJet, edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet, std::allocator<reco::BasicJet> >, reco::BasicJet> >, std::allocator<edm::FwdRef<std::vector<reco::BasicJet, std::allocator<reco::BasicJet> >, reco::BasicJet, edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet, std::allocator<reco::BasicJet> >, reco::BasicJet> > > > > -------------------------------
void __edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s_s_s__db_datamem(Reflex::Class*);
void __edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s_s_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s_s_s__datamem_bld(&__edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s_s_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s_s_s__funcmem_bld(&__edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s_s_s__db_funcmem);
void __edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s_s_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > > >"), typeid(::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > > >), sizeof(::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > > >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("o_name"), "edm::Wrapper<reco::BasicJetFwdRefVector>")
  .AddTypedef(type_2982, Reflex::Literal("edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > > >::value_type"))
  .AddTypedef(type_2982, Reflex::Literal("edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > > >::wrapped_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("Wrapper"), constructor_20899, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_2735), Reflex::Literal("Wrapper"), constructor_20900, 0, "ptr", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~Wrapper"), destructor_20901, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_33553), Reflex::Literal("Wrapper"), constructor_20906, 0, "ptr", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_4547, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s_s_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s_s_s__funcmem_bld);
}

//------Delayed data member builder for class Wrapper<std::vector<edm::FwdRef<std::vector<reco::BasicJet, std::allocator<reco::BasicJet> >, reco::BasicJet, edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet, std::allocator<reco::BasicJet> >, reco::BasicJet> >, std::allocator<edm::FwdRef<std::vector<reco::BasicJet, std::allocator<reco::BasicJet> >, reco::BasicJet, edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet, std::allocator<reco::BasicJet> >, reco::BasicJet> > > > > -------------------
void __edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s_s_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_1574, Reflex::Literal("present"), OffsetOf(__shadow__::__edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s_s_s_, present), ::Reflex::PRIVATE)
  .AddDataMember(type_2982, Reflex::Literal("obj"), OffsetOf(__shadow__::__edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s_s_s_, obj), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class Wrapper<std::vector<edm::FwdRef<std::vector<reco::BasicJet, std::allocator<reco::BasicJet> >, reco::BasicJet, edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet, std::allocator<reco::BasicJet> >, reco::BasicJet> >, std::allocator<edm::FwdRef<std::vector<reco::BasicJet, std::allocator<reco::BasicJet> >, reco::BasicJet, edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet, std::allocator<reco::BasicJet> >, reco::BasicJet> > > > > -------------------
void __edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s_s_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_33552), Reflex::Literal("product"), method_20902, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_33552), Reflex::Literal("operator->"), operator_20903, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_18629), Reflex::Literal("productTypeInfo"), method_20904, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_18629), Reflex::Literal("typeInfo"), method_20905, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_33554), Reflex::Literal("getInterface"), method_20907, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_18495, type_18575, type_33095), Reflex::Literal("fillView"), method_20908, 0, "id;pointers;helpers", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_18629, type_347, type_9980), Reflex::Literal("setPtr"), method_20909, 0, "iToType;iIndex;oPtr", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_18629, type_22942, type_18575), Reflex::Literal("fillPtrVector"), method_20910, 0, "iToType;iIndices;oPtr", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_18629), Reflex::Literal("dynamicTypeInfo"), method_20911, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("isPresent"), method_20912, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_18629), Reflex::Literal("dynamicTypeInfo_"), method_20913, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST);
}
//------Stub functions for class Wrapper<edm::RefVector<std::vector<reco::BasicJet, std::allocator<reco::BasicJet> >, reco::BasicJet, edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet, std::allocator<reco::BasicJet> >, reco::BasicJet> > > -------------------------------
static void constructor_20920( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<edm::RefVector<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >();
  else ::new(mem) ::edm::Wrapper<edm::RefVector<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >();
}

static void constructor_20921( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<edm::RefVector<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >(*(::std::auto_ptr<edm::RefVector<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)arg[0]);
  else ::new(mem) ::edm::Wrapper<edm::RefVector<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >(*(::std::auto_ptr<edm::RefVector<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)arg[0]);
}

static void destructor_20922(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::Wrapper<edm::RefVector<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->::edm::Wrapper<edm::RefVector<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >::~Wrapper)();
}
static  void method_20923( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Wrapper<edm::RefVector<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->product)());
  else   (((const ::edm::Wrapper<edm::RefVector<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->product)();
}

static  void operator_20924( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Wrapper<edm::RefVector<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->operator->)());
  else   (((const ::edm::Wrapper<edm::RefVector<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->operator->)();
}

static  void method_20925( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::Wrapper<edm::RefVector<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->productTypeInfo)();
  else   (((::edm::Wrapper<edm::RefVector<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->productTypeInfo)();
}

static  void method_20926( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::Wrapper<edm::RefVector<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->typeInfo)();
  else   (((::edm::Wrapper<edm::RefVector<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->typeInfo)();
}

static void constructor_20927( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<edm::RefVector<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >((::edm::RefVector<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)arg[0]);
  else ::new(mem) ::edm::Wrapper<edm::RefVector<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >((::edm::RefVector<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)arg[0]);
}

static  void method_20928( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((::edm::Wrapper<edm::RefVector<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->getInterface)());
  else   (((::edm::Wrapper<edm::RefVector<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->getInterface)();
}

static  void method_20929( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<edm::RefVector<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->fillView)(*(const ::edm::ProductID*)arg[0],
    *(::std::vector<const void*>*)arg[1],
    *(::boost::shared_ptr<edm::reftobase::RefVectorHolderBase>*)arg[2]);
}

static  void method_20930( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<edm::RefVector<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->setPtr)(*(const ::std::type_info*)arg[0],
    *(unsigned long*)arg[1],
    *(const void**)arg[2]);
}

static  void method_20931( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<edm::RefVector<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->fillPtrVector)(*(const ::std::type_info*)arg[0],
    *(const ::std::vector<unsigned long>*)arg[1],
    *(::std::vector<const void*>*)arg[2]);
}

static  void method_20932( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Wrapper<edm::RefVector<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->dynamicTypeInfo)();
  else   (((const ::edm::Wrapper<edm::RefVector<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->dynamicTypeInfo)();
}

static  void method_20933( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Wrapper<edm::RefVector<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->isPresent)());
  else   (((const ::edm::Wrapper<edm::RefVector<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->isPresent)();
}

static  void method_20934( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Wrapper<edm::RefVector<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->dynamicTypeInfo_)();
  else   (((const ::edm::Wrapper<edm::RefVector<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->dynamicTypeInfo_)();
}

static void method_newdel_4548( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<edm::RefVector<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<edm::RefVector<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<edm::RefVector<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<edm::RefVector<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<edm::RefVector<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class Wrapper<edm::RefVector<std::vector<reco::BasicJet, std::allocator<reco::BasicJet> >, reco::BasicJet, edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet, std::allocator<reco::BasicJet> >, reco::BasicJet> > > -------------------------------
void __edm__Wrapper_edm__RefVector_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s_s__db_datamem(Reflex::Class*);
void __edm__Wrapper_edm__RefVector_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__Wrapper_edm__RefVector_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s_s__datamem_bld(&__edm__Wrapper_edm__RefVector_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__Wrapper_edm__RefVector_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s_s__funcmem_bld(&__edm__Wrapper_edm__RefVector_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s_s__db_funcmem);
void __edm__Wrapper_edm__RefVector_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::Wrapper<edm::RefVector<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >"), typeid(::edm::Wrapper<edm::RefVector<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >), sizeof(::edm::Wrapper<edm::RefVector<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("o_name"), "edm::Wrapper<reco::BasicJetRefVector>")
  .AddTypedef(type_4506, Reflex::Literal("edm::Wrapper<edm::RefVector<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >::value_type"))
  .AddTypedef(type_4506, Reflex::Literal("edm::Wrapper<edm::RefVector<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >::wrapped_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("Wrapper"), constructor_20920, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_2736), Reflex::Literal("Wrapper"), constructor_20921, 0, "ptr", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~Wrapper"), destructor_20922, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_33558), Reflex::Literal("Wrapper"), constructor_20927, 0, "ptr", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_4548, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__Wrapper_edm__RefVector_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__Wrapper_edm__RefVector_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s_s__funcmem_bld);
}

//------Delayed data member builder for class Wrapper<edm::RefVector<std::vector<reco::BasicJet, std::allocator<reco::BasicJet> >, reco::BasicJet, edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet, std::allocator<reco::BasicJet> >, reco::BasicJet> > > -------------------
void __edm__Wrapper_edm__RefVector_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_1574, Reflex::Literal("present"), OffsetOf(__shadow__::__edm__Wrapper_edm__RefVector_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s_s_, present), ::Reflex::PRIVATE)
  .AddDataMember(type_4506, Reflex::Literal("obj"), OffsetOf(__shadow__::__edm__Wrapper_edm__RefVector_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s_s_, obj), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class Wrapper<edm::RefVector<std::vector<reco::BasicJet, std::allocator<reco::BasicJet> >, reco::BasicJet, edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet, std::allocator<reco::BasicJet> >, reco::BasicJet> > > -------------------
void __edm__Wrapper_edm__RefVector_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_33557), Reflex::Literal("product"), method_20923, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_33557), Reflex::Literal("operator->"), operator_20924, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_18629), Reflex::Literal("productTypeInfo"), method_20925, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_18629), Reflex::Literal("typeInfo"), method_20926, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_33559), Reflex::Literal("getInterface"), method_20928, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_18495, type_18575, type_33095), Reflex::Literal("fillView"), method_20929, 0, "id;pointers;helpers", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_18629, type_347, type_9980), Reflex::Literal("setPtr"), method_20930, 0, "iToType;iIndex;oPtr", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_18629, type_22942, type_18575), Reflex::Literal("fillPtrVector"), method_20931, 0, "iToType;iIndices;oPtr", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_18629), Reflex::Literal("dynamicTypeInfo"), method_20932, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("isPresent"), method_20933, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_18629), Reflex::Literal("dynamicTypeInfo_"), method_20934, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST);
}
//------Stub functions for class Wrapper<std::vector<edm::FwdPtr<reco::GenJet>, std::allocator<edm::FwdPtr<reco::GenJet> > > > -------------------------------
static void constructor_20962( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<std::vector<edm::FwdPtr<reco::GenJet> > >();
  else ::new(mem) ::edm::Wrapper<std::vector<edm::FwdPtr<reco::GenJet> > >();
}

static void constructor_20963( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<std::vector<edm::FwdPtr<reco::GenJet> > >(*(::std::auto_ptr<std::vector<edm::FwdPtr<reco::GenJet> > >*)arg[0]);
  else ::new(mem) ::edm::Wrapper<std::vector<edm::FwdPtr<reco::GenJet> > >(*(::std::auto_ptr<std::vector<edm::FwdPtr<reco::GenJet> > >*)arg[0]);
}

static void destructor_20964(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::Wrapper<std::vector<edm::FwdPtr<reco::GenJet> > >*)o)->::edm::Wrapper<std::vector<edm::FwdPtr<reco::GenJet> > >::~Wrapper)();
}
static  void method_20965( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Wrapper<std::vector<edm::FwdPtr<reco::GenJet> > >*)o)->product)());
  else   (((const ::edm::Wrapper<std::vector<edm::FwdPtr<reco::GenJet> > >*)o)->product)();
}

static  void operator_20966( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Wrapper<std::vector<edm::FwdPtr<reco::GenJet> > >*)o)->operator->)());
  else   (((const ::edm::Wrapper<std::vector<edm::FwdPtr<reco::GenJet> > >*)o)->operator->)();
}

static  void method_20967( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::Wrapper<std::vector<edm::FwdPtr<reco::GenJet> > >*)o)->productTypeInfo)();
  else   (((::edm::Wrapper<std::vector<edm::FwdPtr<reco::GenJet> > >*)o)->productTypeInfo)();
}

static  void method_20968( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::Wrapper<std::vector<edm::FwdPtr<reco::GenJet> > >*)o)->typeInfo)();
  else   (((::edm::Wrapper<std::vector<edm::FwdPtr<reco::GenJet> > >*)o)->typeInfo)();
}

static void constructor_20969( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<std::vector<edm::FwdPtr<reco::GenJet> > >((::std::vector<edm::FwdPtr<reco::GenJet> >*)arg[0]);
  else ::new(mem) ::edm::Wrapper<std::vector<edm::FwdPtr<reco::GenJet> > >((::std::vector<edm::FwdPtr<reco::GenJet> >*)arg[0]);
}

static  void method_20970( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((::edm::Wrapper<std::vector<edm::FwdPtr<reco::GenJet> > >*)o)->getInterface)());
  else   (((::edm::Wrapper<std::vector<edm::FwdPtr<reco::GenJet> > >*)o)->getInterface)();
}

static  void method_20971( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<std::vector<edm::FwdPtr<reco::GenJet> > >*)o)->fillView)(*(const ::edm::ProductID*)arg[0],
    *(::std::vector<const void*>*)arg[1],
    *(::boost::shared_ptr<edm::reftobase::RefVectorHolderBase>*)arg[2]);
}

static  void method_20972( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<std::vector<edm::FwdPtr<reco::GenJet> > >*)o)->setPtr)(*(const ::std::type_info*)arg[0],
    *(unsigned long*)arg[1],
    *(const void**)arg[2]);
}

static  void method_20973( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<std::vector<edm::FwdPtr<reco::GenJet> > >*)o)->fillPtrVector)(*(const ::std::type_info*)arg[0],
    *(const ::std::vector<unsigned long>*)arg[1],
    *(::std::vector<const void*>*)arg[2]);
}

static  void method_20974( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Wrapper<std::vector<edm::FwdPtr<reco::GenJet> > >*)o)->dynamicTypeInfo)();
  else   (((const ::edm::Wrapper<std::vector<edm::FwdPtr<reco::GenJet> > >*)o)->dynamicTypeInfo)();
}

static  void method_20975( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Wrapper<std::vector<edm::FwdPtr<reco::GenJet> > >*)o)->isPresent)());
  else   (((const ::edm::Wrapper<std::vector<edm::FwdPtr<reco::GenJet> > >*)o)->isPresent)();
}

static  void method_20976( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Wrapper<std::vector<edm::FwdPtr<reco::GenJet> > >*)o)->dynamicTypeInfo_)();
  else   (((const ::edm::Wrapper<std::vector<edm::FwdPtr<reco::GenJet> > >*)o)->dynamicTypeInfo_)();
}

static void method_newdel_4550( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<edm::FwdPtr<reco::GenJet> > > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<edm::FwdPtr<reco::GenJet> > > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<edm::FwdPtr<reco::GenJet> > > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<edm::FwdPtr<reco::GenJet> > > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<edm::FwdPtr<reco::GenJet> > > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class Wrapper<std::vector<edm::FwdPtr<reco::GenJet>, std::allocator<edm::FwdPtr<reco::GenJet> > > > -------------------------------
void __edm__Wrapper_std__vector_edm__FwdPtr_reco__GenJet_s_s__db_datamem(Reflex::Class*);
void __edm__Wrapper_std__vector_edm__FwdPtr_reco__GenJet_s_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__Wrapper_std__vector_edm__FwdPtr_reco__GenJet_s_s__datamem_bld(&__edm__Wrapper_std__vector_edm__FwdPtr_reco__GenJet_s_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__Wrapper_std__vector_edm__FwdPtr_reco__GenJet_s_s__funcmem_bld(&__edm__Wrapper_std__vector_edm__FwdPtr_reco__GenJet_s_s__db_funcmem);
void __edm__Wrapper_std__vector_edm__FwdPtr_reco__GenJet_s_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::Wrapper<std::vector<edm::FwdPtr<reco::GenJet> > >"), typeid(::edm::Wrapper<std::vector<edm::FwdPtr<reco::GenJet> > >), sizeof(::edm::Wrapper<std::vector<edm::FwdPtr<reco::GenJet> > >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("o_name"), "edm::Wrapper<reco::GenJetFwdPtrVector>")
  .AddTypedef(type_2986, Reflex::Literal("edm::Wrapper<std::vector<edm::FwdPtr<reco::GenJet> > >::value_type"))
  .AddTypedef(type_2986, Reflex::Literal("edm::Wrapper<std::vector<edm::FwdPtr<reco::GenJet> > >::wrapped_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("Wrapper"), constructor_20962, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_2738), Reflex::Literal("Wrapper"), constructor_20963, 0, "ptr", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~Wrapper"), destructor_20964, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_33567), Reflex::Literal("Wrapper"), constructor_20969, 0, "ptr", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_4550, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__Wrapper_std__vector_edm__FwdPtr_reco__GenJet_s_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__Wrapper_std__vector_edm__FwdPtr_reco__GenJet_s_s__funcmem_bld);
}

//------Delayed data member builder for class Wrapper<std::vector<edm::FwdPtr<reco::GenJet>, std::allocator<edm::FwdPtr<reco::GenJet> > > > -------------------
void __edm__Wrapper_std__vector_edm__FwdPtr_reco__GenJet_s_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_1574, Reflex::Literal("present"), OffsetOf(__shadow__::__edm__Wrapper_std__vector_edm__FwdPtr_reco__GenJet_s_s_, present), ::Reflex::PRIVATE)
  .AddDataMember(type_2986, Reflex::Literal("obj"), OffsetOf(__shadow__::__edm__Wrapper_std__vector_edm__FwdPtr_reco__GenJet_s_s_, obj), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class Wrapper<std::vector<edm::FwdPtr<reco::GenJet>, std::allocator<edm::FwdPtr<reco::GenJet> > > > -------------------
void __edm__Wrapper_std__vector_edm__FwdPtr_reco__GenJet_s_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_33566), Reflex::Literal("product"), method_20965, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_33566), Reflex::Literal("operator->"), operator_20966, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_18629), Reflex::Literal("productTypeInfo"), method_20967, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_18629), Reflex::Literal("typeInfo"), method_20968, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_33568), Reflex::Literal("getInterface"), method_20970, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_18495, type_18575, type_33095), Reflex::Literal("fillView"), method_20971, 0, "id;pointers;helpers", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_18629, type_347, type_9980), Reflex::Literal("setPtr"), method_20972, 0, "iToType;iIndex;oPtr", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_18629, type_22942, type_18575), Reflex::Literal("fillPtrVector"), method_20973, 0, "iToType;iIndices;oPtr", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_18629), Reflex::Literal("dynamicTypeInfo"), method_20974, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("isPresent"), method_20975, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_18629), Reflex::Literal("dynamicTypeInfo_"), method_20976, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST);
}
//------Stub functions for class Wrapper<std::vector<edm::FwdRef<std::vector<reco::GenJet, std::allocator<reco::GenJet> >, reco::GenJet, edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet, std::allocator<reco::GenJet> >, reco::GenJet> >, std::allocator<edm::FwdRef<std::vector<reco::GenJet, std::allocator<reco::GenJet> >, reco::GenJet, edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet, std::allocator<reco::GenJet> >, reco::GenJet> > > > > -------------------------------
static void constructor_20983( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > > >();
  else ::new(mem) ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > > >();
}

static void constructor_20984( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > > >(*(::std::auto_ptr<std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > > >*)arg[0]);
  else ::new(mem) ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > > >(*(::std::auto_ptr<std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > > >*)arg[0]);
}

static void destructor_20985(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > > >*)o)->::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > > >::~Wrapper)();
}
static  void method_20986( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > > >*)o)->product)());
  else   (((const ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > > >*)o)->product)();
}

static  void operator_20987( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > > >*)o)->operator->)());
  else   (((const ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > > >*)o)->operator->)();
}

static  void method_20988( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > > >*)o)->productTypeInfo)();
  else   (((::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > > >*)o)->productTypeInfo)();
}

static  void method_20989( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > > >*)o)->typeInfo)();
  else   (((::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > > >*)o)->typeInfo)();
}

static void constructor_20990( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > > >((::std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)arg[0]);
  else ::new(mem) ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > > >((::std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)arg[0]);
}

static  void method_20991( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > > >*)o)->getInterface)());
  else   (((::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > > >*)o)->getInterface)();
}

static  void method_20992( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > > >*)o)->fillView)(*(const ::edm::ProductID*)arg[0],
    *(::std::vector<const void*>*)arg[1],
    *(::boost::shared_ptr<edm::reftobase::RefVectorHolderBase>*)arg[2]);
}

static  void method_20993( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > > >*)o)->setPtr)(*(const ::std::type_info*)arg[0],
    *(unsigned long*)arg[1],
    *(const void**)arg[2]);
}

static  void method_20994( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > > >*)o)->fillPtrVector)(*(const ::std::type_info*)arg[0],
    *(const ::std::vector<unsigned long>*)arg[1],
    *(::std::vector<const void*>*)arg[2]);
}

static  void method_20995( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > > >*)o)->dynamicTypeInfo)();
  else   (((const ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > > >*)o)->dynamicTypeInfo)();
}

static  void method_20996( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > > >*)o)->isPresent)());
  else   (((const ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > > >*)o)->isPresent)();
}

static  void method_20997( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > > >*)o)->dynamicTypeInfo_)();
  else   (((const ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > > >*)o)->dynamicTypeInfo_)();
}

static void method_newdel_4551( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > > > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > > > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > > > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > > > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > > > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class Wrapper<std::vector<edm::FwdRef<std::vector<reco::GenJet, std::allocator<reco::GenJet> >, reco::GenJet, edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet, std::allocator<reco::GenJet> >, reco::GenJet> >, std::allocator<edm::FwdRef<std::vector<reco::GenJet, std::allocator<reco::GenJet> >, reco::GenJet, edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet, std::allocator<reco::GenJet> >, reco::GenJet> > > > > -------------------------------
void __edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s_s_s__db_datamem(Reflex::Class*);
void __edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s_s_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s_s_s__datamem_bld(&__edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s_s_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s_s_s__funcmem_bld(&__edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s_s_s__db_funcmem);
void __edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s_s_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > > >"), typeid(::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > > >), sizeof(::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > > >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("o_name"), "edm::Wrapper<reco::GenJetFwdRefVector>")
  .AddTypedef(type_2987, Reflex::Literal("edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > > >::value_type"))
  .AddTypedef(type_2987, Reflex::Literal("edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > > >::wrapped_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("Wrapper"), constructor_20983, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_2739), Reflex::Literal("Wrapper"), constructor_20984, 0, "ptr", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~Wrapper"), destructor_20985, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_33572), Reflex::Literal("Wrapper"), constructor_20990, 0, "ptr", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_4551, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s_s_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s_s_s__funcmem_bld);
}

//------Delayed data member builder for class Wrapper<std::vector<edm::FwdRef<std::vector<reco::GenJet, std::allocator<reco::GenJet> >, reco::GenJet, edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet, std::allocator<reco::GenJet> >, reco::GenJet> >, std::allocator<edm::FwdRef<std::vector<reco::GenJet, std::allocator<reco::GenJet> >, reco::GenJet, edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet, std::allocator<reco::GenJet> >, reco::GenJet> > > > > -------------------
void __edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s_s_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_1574, Reflex::Literal("present"), OffsetOf(__shadow__::__edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s_s_s_, present), ::Reflex::PRIVATE)
  .AddDataMember(type_2987, Reflex::Literal("obj"), OffsetOf(__shadow__::__edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s_s_s_, obj), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class Wrapper<std::vector<edm::FwdRef<std::vector<reco::GenJet, std::allocator<reco::GenJet> >, reco::GenJet, edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet, std::allocator<reco::GenJet> >, reco::GenJet> >, std::allocator<edm::FwdRef<std::vector<reco::GenJet, std::allocator<reco::GenJet> >, reco::GenJet, edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet, std::allocator<reco::GenJet> >, reco::GenJet> > > > > -------------------
void __edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s_s_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_33571), Reflex::Literal("product"), method_20986, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_33571), Reflex::Literal("operator->"), operator_20987, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_18629), Reflex::Literal("productTypeInfo"), method_20988, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_18629), Reflex::Literal("typeInfo"), method_20989, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_33573), Reflex::Literal("getInterface"), method_20991, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_18495, type_18575, type_33095), Reflex::Literal("fillView"), method_20992, 0, "id;pointers;helpers", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_18629, type_347, type_9980), Reflex::Literal("setPtr"), method_20993, 0, "iToType;iIndex;oPtr", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_18629, type_22942, type_18575), Reflex::Literal("fillPtrVector"), method_20994, 0, "iToType;iIndices;oPtr", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_18629), Reflex::Literal("dynamicTypeInfo"), method_20995, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("isPresent"), method_20996, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_18629), Reflex::Literal("dynamicTypeInfo_"), method_20997, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST);
}
//------Stub functions for class Wrapper<edm::RefVector<std::vector<reco::GenJet, std::allocator<reco::GenJet> >, reco::GenJet, edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet, std::allocator<reco::GenJet> >, reco::GenJet> > > -------------------------------
static void constructor_21004( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<edm::RefVector<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >();
  else ::new(mem) ::edm::Wrapper<edm::RefVector<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >();
}

static void constructor_21005( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<edm::RefVector<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >(*(::std::auto_ptr<edm::RefVector<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)arg[0]);
  else ::new(mem) ::edm::Wrapper<edm::RefVector<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >(*(::std::auto_ptr<edm::RefVector<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)arg[0]);
}

static void destructor_21006(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::Wrapper<edm::RefVector<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->::edm::Wrapper<edm::RefVector<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >::~Wrapper)();
}
static  void method_21007( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Wrapper<edm::RefVector<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->product)());
  else   (((const ::edm::Wrapper<edm::RefVector<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->product)();
}

static  void operator_21008( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Wrapper<edm::RefVector<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->operator->)());
  else   (((const ::edm::Wrapper<edm::RefVector<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->operator->)();
}

static  void method_21009( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::Wrapper<edm::RefVector<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->productTypeInfo)();
  else   (((::edm::Wrapper<edm::RefVector<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->productTypeInfo)();
}

static  void method_21010( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::Wrapper<edm::RefVector<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->typeInfo)();
  else   (((::edm::Wrapper<edm::RefVector<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->typeInfo)();
}

static void constructor_21011( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<edm::RefVector<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >((::edm::RefVector<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)arg[0]);
  else ::new(mem) ::edm::Wrapper<edm::RefVector<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >((::edm::RefVector<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)arg[0]);
}

static  void method_21012( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((::edm::Wrapper<edm::RefVector<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->getInterface)());
  else   (((::edm::Wrapper<edm::RefVector<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->getInterface)();
}

static  void method_21013( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<edm::RefVector<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->fillView)(*(const ::edm::ProductID*)arg[0],
    *(::std::vector<const void*>*)arg[1],
    *(::boost::shared_ptr<edm::reftobase::RefVectorHolderBase>*)arg[2]);
}

static  void method_21014( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<edm::RefVector<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->setPtr)(*(const ::std::type_info*)arg[0],
    *(unsigned long*)arg[1],
    *(const void**)arg[2]);
}

static  void method_21015( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<edm::RefVector<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->fillPtrVector)(*(const ::std::type_info*)arg[0],
    *(const ::std::vector<unsigned long>*)arg[1],
    *(::std::vector<const void*>*)arg[2]);
}

static  void method_21016( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Wrapper<edm::RefVector<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->dynamicTypeInfo)();
  else   (((const ::edm::Wrapper<edm::RefVector<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->dynamicTypeInfo)();
}

static  void method_21017( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Wrapper<edm::RefVector<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->isPresent)());
  else   (((const ::edm::Wrapper<edm::RefVector<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->isPresent)();
}

static  void method_21018( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Wrapper<edm::RefVector<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->dynamicTypeInfo_)();
  else   (((const ::edm::Wrapper<edm::RefVector<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->dynamicTypeInfo_)();
}

static void method_newdel_4552( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<edm::RefVector<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<edm::RefVector<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<edm::RefVector<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<edm::RefVector<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<edm::RefVector<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class Wrapper<edm::RefVector<std::vector<reco::GenJet, std::allocator<reco::GenJet> >, reco::GenJet, edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet, std::allocator<reco::GenJet> >, reco::GenJet> > > -------------------------------
void __edm__Wrapper_edm__RefVector_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s_s__db_datamem(Reflex::Class*);
void __edm__Wrapper_edm__RefVector_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__Wrapper_edm__RefVector_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s_s__datamem_bld(&__edm__Wrapper_edm__RefVector_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__Wrapper_edm__RefVector_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s_s__funcmem_bld(&__edm__Wrapper_edm__RefVector_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s_s__db_funcmem);
void __edm__Wrapper_edm__RefVector_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::Wrapper<edm::RefVector<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >"), typeid(::edm::Wrapper<edm::RefVector<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >), sizeof(::edm::Wrapper<edm::RefVector<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("o_name"), "edm::Wrapper<reco::GenJetRefVector>")
  .AddTypedef(type_4511, Reflex::Literal("edm::Wrapper<edm::RefVector<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >::value_type"))
  .AddTypedef(type_4511, Reflex::Literal("edm::Wrapper<edm::RefVector<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >::wrapped_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("Wrapper"), constructor_21004, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_2740), Reflex::Literal("Wrapper"), constructor_21005, 0, "ptr", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~Wrapper"), destructor_21006, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_33577), Reflex::Literal("Wrapper"), constructor_21011, 0, "ptr", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_4552, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__Wrapper_edm__RefVector_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__Wrapper_edm__RefVector_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s_s__funcmem_bld);
}

//------Delayed data member builder for class Wrapper<edm::RefVector<std::vector<reco::GenJet, std::allocator<reco::GenJet> >, reco::GenJet, edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet, std::allocator<reco::GenJet> >, reco::GenJet> > > -------------------
void __edm__Wrapper_edm__RefVector_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_1574, Reflex::Literal("present"), OffsetOf(__shadow__::__edm__Wrapper_edm__RefVector_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s_s_, present), ::Reflex::PRIVATE)
  .AddDataMember(type_4511, Reflex::Literal("obj"), OffsetOf(__shadow__::__edm__Wrapper_edm__RefVector_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s_s_, obj), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class Wrapper<edm::RefVector<std::vector<reco::GenJet, std::allocator<reco::GenJet> >, reco::GenJet, edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet, std::allocator<reco::GenJet> >, reco::GenJet> > > -------------------
void __edm__Wrapper_edm__RefVector_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_33576), Reflex::Literal("product"), method_21007, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_33576), Reflex::Literal("operator->"), operator_21008, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_18629), Reflex::Literal("productTypeInfo"), method_21009, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_18629), Reflex::Literal("typeInfo"), method_21010, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_33578), Reflex::Literal("getInterface"), method_21012, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_18495, type_18575, type_33095), Reflex::Literal("fillView"), method_21013, 0, "id;pointers;helpers", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_18629, type_347, type_9980), Reflex::Literal("setPtr"), method_21014, 0, "iToType;iIndex;oPtr", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_18629, type_22942, type_18575), Reflex::Literal("fillPtrVector"), method_21015, 0, "iToType;iIndices;oPtr", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_18629), Reflex::Literal("dynamicTypeInfo"), method_21016, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("isPresent"), method_21017, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_18629), Reflex::Literal("dynamicTypeInfo_"), method_21018, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST);
}
//------Stub functions for class Wrapper<std::vector<edm::RefVector<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> >, reco::CaloJet, edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> >, reco::CaloJet> >, std::allocator<edm::RefVector<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> >, reco::CaloJet, edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> >, reco::CaloJet> > > > > -------------------------------
static void constructor_21046( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >();
  else ::new(mem) ::edm::Wrapper<std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >();
}

static void constructor_21047( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >(*(::std::auto_ptr<std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >*)arg[0]);
  else ::new(mem) ::edm::Wrapper<std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >(*(::std::auto_ptr<std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >*)arg[0]);
}

static void destructor_21048(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::Wrapper<std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >*)o)->::edm::Wrapper<std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >::~Wrapper)();
}
static  void method_21049( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Wrapper<std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >*)o)->product)());
  else   (((const ::edm::Wrapper<std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >*)o)->product)();
}

static  void operator_21050( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Wrapper<std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >*)o)->operator->)());
  else   (((const ::edm::Wrapper<std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >*)o)->operator->)();
}

static  void method_21051( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::Wrapper<std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >*)o)->productTypeInfo)();
  else   (((::edm::Wrapper<std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >*)o)->productTypeInfo)();
}

static  void method_21052( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::Wrapper<std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >*)o)->typeInfo)();
  else   (((::edm::Wrapper<std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >*)o)->typeInfo)();
}

static void constructor_21053( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >((::std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)arg[0]);
  else ::new(mem) ::edm::Wrapper<std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >((::std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)arg[0]);
}

static  void method_21054( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((::edm::Wrapper<std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >*)o)->getInterface)());
  else   (((::edm::Wrapper<std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >*)o)->getInterface)();
}

static  void method_21055( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >*)o)->fillView)(*(const ::edm::ProductID*)arg[0],
    *(::std::vector<const void*>*)arg[1],
    *(::boost::shared_ptr<edm::reftobase::RefVectorHolderBase>*)arg[2]);
}

static  void method_21056( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >*)o)->setPtr)(*(const ::std::type_info*)arg[0],
    *(unsigned long*)arg[1],
    *(const void**)arg[2]);
}

static  void method_21057( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >*)o)->fillPtrVector)(*(const ::std::type_info*)arg[0],
    *(const ::std::vector<unsigned long>*)arg[1],
    *(::std::vector<const void*>*)arg[2]);
}

static  void method_21058( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Wrapper<std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >*)o)->dynamicTypeInfo)();
  else   (((const ::edm::Wrapper<std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >*)o)->dynamicTypeInfo)();
}

static  void method_21059( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Wrapper<std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >*)o)->isPresent)());
  else   (((const ::edm::Wrapper<std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >*)o)->isPresent)();
}

static  void method_21060( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Wrapper<std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >*)o)->dynamicTypeInfo_)();
  else   (((const ::edm::Wrapper<std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >*)o)->dynamicTypeInfo_)();
}

static void method_newdel_4554( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class Wrapper<std::vector<edm::RefVector<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> >, reco::CaloJet, edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> >, reco::CaloJet> >, std::allocator<edm::RefVector<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> >, reco::CaloJet, edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> >, reco::CaloJet> > > > > -------------------------------
void __edm__Wrapper_std__vector_edm__RefVector_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s_s__db_datamem(Reflex::Class*);
void __edm__Wrapper_std__vector_edm__RefVector_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__Wrapper_std__vector_edm__RefVector_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s_s__datamem_bld(&__edm__Wrapper_std__vector_edm__RefVector_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__Wrapper_std__vector_edm__RefVector_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s_s__funcmem_bld(&__edm__Wrapper_std__vector_edm__RefVector_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s_s__db_funcmem);
void __edm__Wrapper_std__vector_edm__RefVector_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::Wrapper<std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >"), typeid(::edm::Wrapper<std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >), sizeof(::edm::Wrapper<std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("o_name"), "edm::Wrapper<std::vector<reco::CaloJetRefVector> >")
  .AddTypedef(type_2989, Reflex::Literal("edm::Wrapper<std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >::value_type"))
  .AddTypedef(type_2989, Reflex::Literal("edm::Wrapper<std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >::wrapped_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("Wrapper"), constructor_21046, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_2742), Reflex::Literal("Wrapper"), constructor_21047, 0, "ptr", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~Wrapper"), destructor_21048, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_33586), Reflex::Literal("Wrapper"), constructor_21053, 0, "ptr", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_4554, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__Wrapper_std__vector_edm__RefVector_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__Wrapper_std__vector_edm__RefVector_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s_s__funcmem_bld);
}

//------Delayed data member builder for class Wrapper<std::vector<edm::RefVector<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> >, reco::CaloJet, edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> >, reco::CaloJet> >, std::allocator<edm::RefVector<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> >, reco::CaloJet, edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> >, reco::CaloJet> > > > > -------------------
void __edm__Wrapper_std__vector_edm__RefVector_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_1574, Reflex::Literal("present"), OffsetOf(__shadow__::__edm__Wrapper_std__vector_edm__RefVector_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s_s_, present), ::Reflex::PRIVATE)
  .AddDataMember(type_2989, Reflex::Literal("obj"), OffsetOf(__shadow__::__edm__Wrapper_std__vector_edm__RefVector_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s_s_, obj), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class Wrapper<std::vector<edm::RefVector<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> >, reco::CaloJet, edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> >, reco::CaloJet> >, std::allocator<edm::RefVector<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> >, reco::CaloJet, edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> >, reco::CaloJet> > > > > -------------------
void __edm__Wrapper_std__vector_edm__RefVector_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_33585), Reflex::Literal("product"), method_21049, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_33585), Reflex::Literal("operator->"), operator_21050, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_18629), Reflex::Literal("productTypeInfo"), method_21051, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_18629), Reflex::Literal("typeInfo"), method_21052, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_33587), Reflex::Literal("getInterface"), method_21054, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_18495, type_18575, type_33095), Reflex::Literal("fillView"), method_21055, 0, "id;pointers;helpers", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_18629, type_347, type_9980), Reflex::Literal("setPtr"), method_21056, 0, "iToType;iIndex;oPtr", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_18629, type_22942, type_18575), Reflex::Literal("fillPtrVector"), method_21057, 0, "iToType;iIndices;oPtr", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_18629), Reflex::Literal("dynamicTypeInfo"), method_21058, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("isPresent"), method_21059, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_18629), Reflex::Literal("dynamicTypeInfo_"), method_21060, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST);
}
//------Stub functions for class Wrapper<std::vector<edm::FwdPtr<reco::CaloJet>, std::allocator<edm::FwdPtr<reco::CaloJet> > > > -------------------------------
static void constructor_21067( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<std::vector<edm::FwdPtr<reco::CaloJet> > >();
  else ::new(mem) ::edm::Wrapper<std::vector<edm::FwdPtr<reco::CaloJet> > >();
}

static void constructor_21068( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<std::vector<edm::FwdPtr<reco::CaloJet> > >(*(::std::auto_ptr<std::vector<edm::FwdPtr<reco::CaloJet> > >*)arg[0]);
  else ::new(mem) ::edm::Wrapper<std::vector<edm::FwdPtr<reco::CaloJet> > >(*(::std::auto_ptr<std::vector<edm::FwdPtr<reco::CaloJet> > >*)arg[0]);
}

static void destructor_21069(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::Wrapper<std::vector<edm::FwdPtr<reco::CaloJet> > >*)o)->::edm::Wrapper<std::vector<edm::FwdPtr<reco::CaloJet> > >::~Wrapper)();
}
static  void method_21070( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Wrapper<std::vector<edm::FwdPtr<reco::CaloJet> > >*)o)->product)());
  else   (((const ::edm::Wrapper<std::vector<edm::FwdPtr<reco::CaloJet> > >*)o)->product)();
}

static  void operator_21071( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Wrapper<std::vector<edm::FwdPtr<reco::CaloJet> > >*)o)->operator->)());
  else   (((const ::edm::Wrapper<std::vector<edm::FwdPtr<reco::CaloJet> > >*)o)->operator->)();
}

static  void method_21072( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::Wrapper<std::vector<edm::FwdPtr<reco::CaloJet> > >*)o)->productTypeInfo)();
  else   (((::edm::Wrapper<std::vector<edm::FwdPtr<reco::CaloJet> > >*)o)->productTypeInfo)();
}

static  void method_21073( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::Wrapper<std::vector<edm::FwdPtr<reco::CaloJet> > >*)o)->typeInfo)();
  else   (((::edm::Wrapper<std::vector<edm::FwdPtr<reco::CaloJet> > >*)o)->typeInfo)();
}

static void constructor_21074( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<std::vector<edm::FwdPtr<reco::CaloJet> > >((::std::vector<edm::FwdPtr<reco::CaloJet> >*)arg[0]);
  else ::new(mem) ::edm::Wrapper<std::vector<edm::FwdPtr<reco::CaloJet> > >((::std::vector<edm::FwdPtr<reco::CaloJet> >*)arg[0]);
}

static  void method_21075( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((::edm::Wrapper<std::vector<edm::FwdPtr<reco::CaloJet> > >*)o)->getInterface)());
  else   (((::edm::Wrapper<std::vector<edm::FwdPtr<reco::CaloJet> > >*)o)->getInterface)();
}

static  void method_21076( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<std::vector<edm::FwdPtr<reco::CaloJet> > >*)o)->fillView)(*(const ::edm::ProductID*)arg[0],
    *(::std::vector<const void*>*)arg[1],
    *(::boost::shared_ptr<edm::reftobase::RefVectorHolderBase>*)arg[2]);
}

static  void method_21077( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<std::vector<edm::FwdPtr<reco::CaloJet> > >*)o)->setPtr)(*(const ::std::type_info*)arg[0],
    *(unsigned long*)arg[1],
    *(const void**)arg[2]);
}

static  void method_21078( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<std::vector<edm::FwdPtr<reco::CaloJet> > >*)o)->fillPtrVector)(*(const ::std::type_info*)arg[0],
    *(const ::std::vector<unsigned long>*)arg[1],
    *(::std::vector<const void*>*)arg[2]);
}

static  void method_21079( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Wrapper<std::vector<edm::FwdPtr<reco::CaloJet> > >*)o)->dynamicTypeInfo)();
  else   (((const ::edm::Wrapper<std::vector<edm::FwdPtr<reco::CaloJet> > >*)o)->dynamicTypeInfo)();
}

static  void method_21080( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Wrapper<std::vector<edm::FwdPtr<reco::CaloJet> > >*)o)->isPresent)());
  else   (((const ::edm::Wrapper<std::vector<edm::FwdPtr<reco::CaloJet> > >*)o)->isPresent)();
}

static  void method_21081( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Wrapper<std::vector<edm::FwdPtr<reco::CaloJet> > >*)o)->dynamicTypeInfo_)();
  else   (((const ::edm::Wrapper<std::vector<edm::FwdPtr<reco::CaloJet> > >*)o)->dynamicTypeInfo_)();
}

static void method_newdel_4555( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<edm::FwdPtr<reco::CaloJet> > > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<edm::FwdPtr<reco::CaloJet> > > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<edm::FwdPtr<reco::CaloJet> > > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<edm::FwdPtr<reco::CaloJet> > > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<edm::FwdPtr<reco::CaloJet> > > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class Wrapper<std::vector<edm::FwdPtr<reco::CaloJet>, std::allocator<edm::FwdPtr<reco::CaloJet> > > > -------------------------------
void __edm__Wrapper_std__vector_edm__FwdPtr_reco__CaloJet_s_s__db_datamem(Reflex::Class*);
void __edm__Wrapper_std__vector_edm__FwdPtr_reco__CaloJet_s_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__Wrapper_std__vector_edm__FwdPtr_reco__CaloJet_s_s__datamem_bld(&__edm__Wrapper_std__vector_edm__FwdPtr_reco__CaloJet_s_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__Wrapper_std__vector_edm__FwdPtr_reco__CaloJet_s_s__funcmem_bld(&__edm__Wrapper_std__vector_edm__FwdPtr_reco__CaloJet_s_s__db_funcmem);
void __edm__Wrapper_std__vector_edm__FwdPtr_reco__CaloJet_s_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::Wrapper<std::vector<edm::FwdPtr<reco::CaloJet> > >"), typeid(::edm::Wrapper<std::vector<edm::FwdPtr<reco::CaloJet> > >), sizeof(::edm::Wrapper<std::vector<edm::FwdPtr<reco::CaloJet> > >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("o_name"), "edm::Wrapper<reco::CaloJetFwdPtrVector>")
  .AddTypedef(type_2993, Reflex::Literal("edm::Wrapper<std::vector<edm::FwdPtr<reco::CaloJet> > >::value_type"))
  .AddTypedef(type_2993, Reflex::Literal("edm::Wrapper<std::vector<edm::FwdPtr<reco::CaloJet> > >::wrapped_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("Wrapper"), constructor_21067, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_2743), Reflex::Literal("Wrapper"), constructor_21068, 0, "ptr", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~Wrapper"), destructor_21069, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_33591), Reflex::Literal("Wrapper"), constructor_21074, 0, "ptr", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_4555, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__Wrapper_std__vector_edm__FwdPtr_reco__CaloJet_s_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__Wrapper_std__vector_edm__FwdPtr_reco__CaloJet_s_s__funcmem_bld);
}

//------Delayed data member builder for class Wrapper<std::vector<edm::FwdPtr<reco::CaloJet>, std::allocator<edm::FwdPtr<reco::CaloJet> > > > -------------------
void __edm__Wrapper_std__vector_edm__FwdPtr_reco__CaloJet_s_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_1574, Reflex::Literal("present"), OffsetOf(__shadow__::__edm__Wrapper_std__vector_edm__FwdPtr_reco__CaloJet_s_s_, present), ::Reflex::PRIVATE)
  .AddDataMember(type_2993, Reflex::Literal("obj"), OffsetOf(__shadow__::__edm__Wrapper_std__vector_edm__FwdPtr_reco__CaloJet_s_s_, obj), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class Wrapper<std::vector<edm::FwdPtr<reco::CaloJet>, std::allocator<edm::FwdPtr<reco::CaloJet> > > > -------------------
void __edm__Wrapper_std__vector_edm__FwdPtr_reco__CaloJet_s_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_33590), Reflex::Literal("product"), method_21070, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_33590), Reflex::Literal("operator->"), operator_21071, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_18629), Reflex::Literal("productTypeInfo"), method_21072, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_18629), Reflex::Literal("typeInfo"), method_21073, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_33592), Reflex::Literal("getInterface"), method_21075, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_18495, type_18575, type_33095), Reflex::Literal("fillView"), method_21076, 0, "id;pointers;helpers", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_18629, type_347, type_9980), Reflex::Literal("setPtr"), method_21077, 0, "iToType;iIndex;oPtr", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_18629, type_22942, type_18575), Reflex::Literal("fillPtrVector"), method_21078, 0, "iToType;iIndices;oPtr", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_18629), Reflex::Literal("dynamicTypeInfo"), method_21079, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("isPresent"), method_21080, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_18629), Reflex::Literal("dynamicTypeInfo_"), method_21081, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST);
}
//------Stub functions for class Wrapper<std::vector<edm::FwdRef<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> >, reco::CaloJet, edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> >, reco::CaloJet> >, std::allocator<edm::FwdRef<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> >, reco::CaloJet, edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> >, reco::CaloJet> > > > > -------------------------------
static void constructor_21088( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >();
  else ::new(mem) ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >();
}

static void constructor_21089( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >(*(::std::auto_ptr<std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >*)arg[0]);
  else ::new(mem) ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >(*(::std::auto_ptr<std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >*)arg[0]);
}

static void destructor_21090(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >*)o)->::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >::~Wrapper)();
}
static  void method_21091( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >*)o)->product)());
  else   (((const ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >*)o)->product)();
}

static  void operator_21092( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >*)o)->operator->)());
  else   (((const ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >*)o)->operator->)();
}

static  void method_21093( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >*)o)->productTypeInfo)();
  else   (((::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >*)o)->productTypeInfo)();
}

static  void method_21094( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >*)o)->typeInfo)();
  else   (((::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >*)o)->typeInfo)();
}

static void constructor_21095( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >((::std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)arg[0]);
  else ::new(mem) ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >((::std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)arg[0]);
}

static  void method_21096( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >*)o)->getInterface)());
  else   (((::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >*)o)->getInterface)();
}

static  void method_21097( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >*)o)->fillView)(*(const ::edm::ProductID*)arg[0],
    *(::std::vector<const void*>*)arg[1],
    *(::boost::shared_ptr<edm::reftobase::RefVectorHolderBase>*)arg[2]);
}

static  void method_21098( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >*)o)->setPtr)(*(const ::std::type_info*)arg[0],
    *(unsigned long*)arg[1],
    *(const void**)arg[2]);
}

static  void method_21099( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >*)o)->fillPtrVector)(*(const ::std::type_info*)arg[0],
    *(const ::std::vector<unsigned long>*)arg[1],
    *(::std::vector<const void*>*)arg[2]);
}

static  void method_21100( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >*)o)->dynamicTypeInfo)();
  else   (((const ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >*)o)->dynamicTypeInfo)();
}

static  void method_21101( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >*)o)->isPresent)());
  else   (((const ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >*)o)->isPresent)();
}

static  void method_21102( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >*)o)->dynamicTypeInfo_)();
  else   (((const ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >*)o)->dynamicTypeInfo_)();
}

static void method_newdel_4556( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class Wrapper<std::vector<edm::FwdRef<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> >, reco::CaloJet, edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> >, reco::CaloJet> >, std::allocator<edm::FwdRef<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> >, reco::CaloJet, edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> >, reco::CaloJet> > > > > -------------------------------
void __edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s_s__db_datamem(Reflex::Class*);
void __edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s_s__datamem_bld(&__edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s_s__funcmem_bld(&__edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s_s__db_funcmem);
void __edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >"), typeid(::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >), sizeof(::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("o_name"), "edm::Wrapper<reco::CaloJetFwdRefVector>")
  .AddTypedef(type_2994, Reflex::Literal("edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >::value_type"))
  .AddTypedef(type_2994, Reflex::Literal("edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >::wrapped_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("Wrapper"), constructor_21088, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_2744), Reflex::Literal("Wrapper"), constructor_21089, 0, "ptr", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~Wrapper"), destructor_21090, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_33596), Reflex::Literal("Wrapper"), constructor_21095, 0, "ptr", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_4556, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s_s__funcmem_bld);
}

//------Delayed data member builder for class Wrapper<std::vector<edm::FwdRef<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> >, reco::CaloJet, edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> >, reco::CaloJet> >, std::allocator<edm::FwdRef<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> >, reco::CaloJet, edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> >, reco::CaloJet> > > > > -------------------
void __edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_1574, Reflex::Literal("present"), OffsetOf(__shadow__::__edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s_s_, present), ::Reflex::PRIVATE)
  .AddDataMember(type_2994, Reflex::Literal("obj"), OffsetOf(__shadow__::__edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s_s_, obj), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class Wrapper<std::vector<edm::FwdRef<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> >, reco::CaloJet, edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> >, reco::CaloJet> >, std::allocator<edm::FwdRef<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> >, reco::CaloJet, edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> >, reco::CaloJet> > > > > -------------------
void __edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_33595), Reflex::Literal("product"), method_21091, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_33595), Reflex::Literal("operator->"), operator_21092, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_18629), Reflex::Literal("productTypeInfo"), method_21093, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_18629), Reflex::Literal("typeInfo"), method_21094, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_33597), Reflex::Literal("getInterface"), method_21096, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_18495, type_18575, type_33095), Reflex::Literal("fillView"), method_21097, 0, "id;pointers;helpers", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_18629, type_347, type_9980), Reflex::Literal("setPtr"), method_21098, 0, "iToType;iIndex;oPtr", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_18629, type_22942, type_18575), Reflex::Literal("fillPtrVector"), method_21099, 0, "iToType;iIndices;oPtr", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_18629), Reflex::Literal("dynamicTypeInfo"), method_21100, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("isPresent"), method_21101, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_18629), Reflex::Literal("dynamicTypeInfo_"), method_21102, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST);
}
//------Stub functions for class Wrapper<edm::RefVector<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> >, reco::CaloJet, edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> >, reco::CaloJet> > > -------------------------------
static void constructor_21109( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >();
  else ::new(mem) ::edm::Wrapper<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >();
}

static void constructor_21110( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >(*(::std::auto_ptr<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)arg[0]);
  else ::new(mem) ::edm::Wrapper<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >(*(::std::auto_ptr<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)arg[0]);
}

static void destructor_21111(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::Wrapper<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->::edm::Wrapper<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >::~Wrapper)();
}
static  void method_21112( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Wrapper<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->product)());
  else   (((const ::edm::Wrapper<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->product)();
}

static  void operator_21113( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Wrapper<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->operator->)());
  else   (((const ::edm::Wrapper<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->operator->)();
}

static  void method_21114( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::Wrapper<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->productTypeInfo)();
  else   (((::edm::Wrapper<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->productTypeInfo)();
}

static  void method_21115( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::Wrapper<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->typeInfo)();
  else   (((::edm::Wrapper<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->typeInfo)();
}

static void constructor_21116( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >((::edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)arg[0]);
  else ::new(mem) ::edm::Wrapper<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >((::edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)arg[0]);
}

static  void method_21117( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((::edm::Wrapper<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->getInterface)());
  else   (((::edm::Wrapper<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->getInterface)();
}

static  void method_21118( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->fillView)(*(const ::edm::ProductID*)arg[0],
    *(::std::vector<const void*>*)arg[1],
    *(::boost::shared_ptr<edm::reftobase::RefVectorHolderBase>*)arg[2]);
}

static  void method_21119( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->setPtr)(*(const ::std::type_info*)arg[0],
    *(unsigned long*)arg[1],
    *(const void**)arg[2]);
}

static  void method_21120( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->fillPtrVector)(*(const ::std::type_info*)arg[0],
    *(const ::std::vector<unsigned long>*)arg[1],
    *(::std::vector<const void*>*)arg[2]);
}

static  void method_21121( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Wrapper<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->dynamicTypeInfo)();
  else   (((const ::edm::Wrapper<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->dynamicTypeInfo)();
}

static  void method_21122( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Wrapper<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->isPresent)());
  else   (((const ::edm::Wrapper<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->isPresent)();
}

static  void method_21123( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Wrapper<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->dynamicTypeInfo_)();
  else   (((const ::edm::Wrapper<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->dynamicTypeInfo_)();
}

static void method_newdel_4557( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class Wrapper<edm::RefVector<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> >, reco::CaloJet, edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> >, reco::CaloJet> > > -------------------------------
void __edm__Wrapper_edm__RefVector_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s__db_datamem(Reflex::Class*);
void __edm__Wrapper_edm__RefVector_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__Wrapper_edm__RefVector_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s__datamem_bld(&__edm__Wrapper_edm__RefVector_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__Wrapper_edm__RefVector_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s__funcmem_bld(&__edm__Wrapper_edm__RefVector_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s__db_funcmem);
void __edm__Wrapper_edm__RefVector_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::Wrapper<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >"), typeid(::edm::Wrapper<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >), sizeof(::edm::Wrapper<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("o_name"), "edm::Wrapper<reco::CaloJetRefVector>")
  .AddTypedef(type_4516, Reflex::Literal("edm::Wrapper<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >::value_type"))
  .AddTypedef(type_4516, Reflex::Literal("edm::Wrapper<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >::wrapped_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("Wrapper"), constructor_21109, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_2745), Reflex::Literal("Wrapper"), constructor_21110, 0, "ptr", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~Wrapper"), destructor_21111, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_8968), Reflex::Literal("Wrapper"), constructor_21116, 0, "ptr", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_4557, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__Wrapper_edm__RefVector_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__Wrapper_edm__RefVector_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s__funcmem_bld);
}

//------Delayed data member builder for class Wrapper<edm::RefVector<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> >, reco::CaloJet, edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> >, reco::CaloJet> > > -------------------
void __edm__Wrapper_edm__RefVector_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_1574, Reflex::Literal("present"), OffsetOf(__shadow__::__edm__Wrapper_edm__RefVector_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s_, present), ::Reflex::PRIVATE)
  .AddDataMember(type_4516, Reflex::Literal("obj"), OffsetOf(__shadow__::__edm__Wrapper_edm__RefVector_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s_, obj), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class Wrapper<edm::RefVector<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> >, reco::CaloJet, edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> >, reco::CaloJet> > > -------------------
void __edm__Wrapper_edm__RefVector_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13668), Reflex::Literal("product"), method_21112, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13668), Reflex::Literal("operator->"), operator_21113, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_18629), Reflex::Literal("productTypeInfo"), method_21114, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_18629), Reflex::Literal("typeInfo"), method_21115, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_33600), Reflex::Literal("getInterface"), method_21117, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_18495, type_18575, type_33095), Reflex::Literal("fillView"), method_21118, 0, "id;pointers;helpers", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_18629, type_347, type_9980), Reflex::Literal("setPtr"), method_21119, 0, "iToType;iIndex;oPtr", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_18629, type_22942, type_18575), Reflex::Literal("fillPtrVector"), method_21120, 0, "iToType;iIndices;oPtr", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_18629), Reflex::Literal("dynamicTypeInfo"), method_21121, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("isPresent"), method_21122, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_18629), Reflex::Literal("dynamicTypeInfo_"), method_21123, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST);
}
//------Stub functions for class AssociationMap<edm::OneToMany<std::vector<reco::JPTJet, std::allocator<reco::JPTJet> >, std::vector<reco::Track, std::allocator<reco::Track> >, unsigned int> > -------------------------------
static void destructor_21162(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::AssociationMap<edm::OneToMany<std::vector<reco::JPTJet>,std::vector<reco::Track>,unsigned int> >*)o)->::edm::AssociationMap<edm::OneToMany<std::vector<reco::JPTJet>,std::vector<reco::Track>,unsigned int> >::~AssociationMap)();
}
static  void operator_21163( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::AssociationMap<edm::OneToMany<std::vector<reco::JPTJet>,std::vector<reco::Track>,unsigned int> >*)o)->operator=)(*(const ::edm::AssociationMap<edm::OneToMany<std::vector<reco::JPTJet>,std::vector<reco::Track>,unsigned int> >*)arg[0]);
  else   (((::edm::AssociationMap<edm::OneToMany<std::vector<reco::JPTJet>,std::vector<reco::Track>,unsigned int> >*)o)->operator=)(*(const ::edm::AssociationMap<edm::OneToMany<std::vector<reco::JPTJet>,std::vector<reco::Track>,unsigned int> >*)arg[0]);
}

static void constructor_21164( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::AssociationMap<edm::OneToMany<std::vector<reco::JPTJet>,std::vector<reco::Track>,unsigned int> >(*(const ::edm::AssociationMap<edm::OneToMany<std::vector<reco::JPTJet>,std::vector<reco::Track>,unsigned int> >*)arg[0]);
  else ::new(mem) ::edm::AssociationMap<edm::OneToMany<std::vector<reco::JPTJet>,std::vector<reco::Track>,unsigned int> >(*(const ::edm::AssociationMap<edm::OneToMany<std::vector<reco::JPTJet>,std::vector<reco::Track>,unsigned int> >*)arg[0]);
}

static void constructor_21165( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::AssociationMap<edm::OneToMany<std::vector<reco::JPTJet>,std::vector<reco::Track>,unsigned int> >();
  else ::new(mem) ::edm::AssociationMap<edm::OneToMany<std::vector<reco::JPTJet>,std::vector<reco::Track>,unsigned int> >();
}

static void constructor_21166( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::AssociationMap<edm::OneToMany<std::vector<reco::JPTJet>,std::vector<reco::Track>,unsigned int> >(*(const ::edm::helpers::KeyVal<edm::RefProd<std::vector<reco::JPTJet> >,edm::RefProd<std::vector<reco::Track> > >*)arg[0]);
  else ::new(mem) ::edm::AssociationMap<edm::OneToMany<std::vector<reco::JPTJet>,std::vector<reco::Track>,unsigned int> >(*(const ::edm::helpers::KeyVal<edm::RefProd<std::vector<reco::JPTJet> >,edm::RefProd<std::vector<reco::Track> > >*)arg[0]);
}

static  void method_21167( void*, void* o, const std::vector<void*>&, void*)
{
  (((::edm::AssociationMap<edm::OneToMany<std::vector<reco::JPTJet>,std::vector<reco::Track>,unsigned int> >*)o)->clear)();
}

static  void method_21168( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::edm::AssociationMap<edm::OneToMany<std::vector<reco::JPTJet>,std::vector<reco::Track>,unsigned int> >*)o)->size)());
  else   (((const ::edm::AssociationMap<edm::OneToMany<std::vector<reco::JPTJet>,std::vector<reco::Track>,unsigned int> >*)o)->size)();
}

static  void method_21169( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::AssociationMap<edm::OneToMany<std::vector<reco::JPTJet>,std::vector<reco::Track>,unsigned int> >*)o)->empty)());
  else   (((const ::edm::AssociationMap<edm::OneToMany<std::vector<reco::JPTJet>,std::vector<reco::Track>,unsigned int> >*)o)->empty)();
}

static  void method_21170( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::edm::AssociationMap<edm::OneToMany<std::vector<reco::JPTJet>,std::vector<reco::Track>,unsigned int> >*)o)->insert)(*(const ::edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >*)arg[0],
    *(const ::edm::Ref<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> >*)arg[1]);
}

static  void method_21171( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::edm::AssociationMap<edm::OneToMany<std::vector<reco::JPTJet>,std::vector<reco::Track>,unsigned int> >*)o)->insert)(*(const ::edm::helpers::KeyVal<edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >*)arg[0]);
}

static  void method_21172( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::AssociationMap<edm::OneToMany<std::vector<reco::JPTJet>,std::vector<reco::Track>,unsigned int> >::const_iterator)((((const ::edm::AssociationMap<edm::OneToMany<std::vector<reco::JPTJet>,std::vector<reco::Track>,unsigned int> >*)o)->begin)());
  else   (((const ::edm::AssociationMap<edm::OneToMany<std::vector<reco::JPTJet>,std::vector<reco::Track>,unsigned int> >*)o)->begin)();
}

static  void method_21173( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::AssociationMap<edm::OneToMany<std::vector<reco::JPTJet>,std::vector<reco::Track>,unsigned int> >::const_iterator)((((const ::edm::AssociationMap<edm::OneToMany<std::vector<reco::JPTJet>,std::vector<reco::Track>,unsigned int> >*)o)->end)());
  else   (((const ::edm::AssociationMap<edm::OneToMany<std::vector<reco::JPTJet>,std::vector<reco::Track>,unsigned int> >*)o)->end)();
}

static  void method_21174( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (edm::AssociationMap<edm::OneToMany<std::vector<reco::JPTJet>,std::vector<reco::Track>,unsigned int> >::const_iterator)((((const ::edm::AssociationMap<edm::OneToMany<std::vector<reco::JPTJet>,std::vector<reco::Track>,unsigned int> >*)o)->find)(*(const ::edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >*)arg[0]));
  else   (((const ::edm::AssociationMap<edm::OneToMany<std::vector<reco::JPTJet>,std::vector<reco::Track>,unsigned int> >*)o)->find)(*(const ::edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >*)arg[0]);
}

static  void method_21175( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((::edm::AssociationMap<edm::OneToMany<std::vector<reco::JPTJet>,std::vector<reco::Track>,unsigned int> >*)o)->erase)(*(const ::edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >*)arg[0]));
  else   (((::edm::AssociationMap<edm::OneToMany<std::vector<reco::JPTJet>,std::vector<reco::Track>,unsigned int> >*)o)->erase)(*(const ::edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >*)arg[0]);
}

static  void operator_21176( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::AssociationMap<edm::OneToMany<std::vector<reco::JPTJet>,std::vector<reco::Track>,unsigned int> >*)o)->operator[])(*(const ::edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >*)arg[0]);
  else   (((const ::edm::AssociationMap<edm::OneToMany<std::vector<reco::JPTJet>,std::vector<reco::Track>,unsigned int> >*)o)->operator[])(*(const ::edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >*)arg[0]);
}

static  void method_21177( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::edm::AssociationMap<edm::OneToMany<std::vector<reco::JPTJet>,std::vector<reco::Track>,unsigned int> >*)o)->numberOfAssociations)(*(const ::edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >*)arg[0]));
  else   (((const ::edm::AssociationMap<edm::OneToMany<std::vector<reco::JPTJet>,std::vector<reco::Track>,unsigned int> >*)o)->numberOfAssociations)(*(const ::edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >*)arg[0]);
}

static  void method_21178( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::AssociationMap<edm::OneToMany<std::vector<reco::JPTJet>,std::vector<reco::Track>,unsigned int> >*)o)->refProd)();
  else   (((const ::edm::AssociationMap<edm::OneToMany<std::vector<reco::JPTJet>,std::vector<reco::Track>,unsigned int> >*)o)->refProd)();
}

static  void method_21179( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::map<const reco::JPTJet*,std::vector<const reco::Track*> >)((((::edm::AssociationMap<edm::OneToMany<std::vector<reco::JPTJet>,std::vector<reco::Track>,unsigned int> >*)o)->map)());
  else   (((::edm::AssociationMap<edm::OneToMany<std::vector<reco::JPTJet>,std::vector<reco::Track>,unsigned int> >*)o)->map)();
}

static  void method_21180( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::vector<const reco::JPTJet*>)((((::edm::AssociationMap<edm::OneToMany<std::vector<reco::JPTJet>,std::vector<reco::Track>,unsigned int> >*)o)->keys)());
  else   (((::edm::AssociationMap<edm::OneToMany<std::vector<reco::JPTJet>,std::vector<reco::Track>,unsigned int> >*)o)->keys)();
}

static  void method_21181( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::vector<std::vector<const reco::Track*> >)((((::edm::AssociationMap<edm::OneToMany<std::vector<reco::JPTJet>,std::vector<reco::Track>,unsigned int> >*)o)->values)());
  else   (((::edm::AssociationMap<edm::OneToMany<std::vector<reco::JPTJet>,std::vector<reco::Track>,unsigned int> >*)o)->values)();
}

static  void method_21182( void*, void* o, const std::vector<void*>&, void*)
{
  (((::edm::AssociationMap<edm::OneToMany<std::vector<reco::JPTJet>,std::vector<reco::Track>,unsigned int> >*)o)->post_insert)();
}

static  void method_21183( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (short)((((::edm::AssociationMap<edm::OneToMany<std::vector<reco::JPTJet>,std::vector<reco::Track>,unsigned int> >*)o)->Class_Version)());
  else   (((::edm::AssociationMap<edm::OneToMany<std::vector<reco::JPTJet>,std::vector<reco::Track>,unsigned int> >*)o)->Class_Version)();
}

static void method_newdel_4563( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::AssociationMap<edm::OneToMany<std::vector<reco::JPTJet>,std::vector<reco::Track>,unsigned int> > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::AssociationMap<edm::OneToMany<std::vector<reco::JPTJet>,std::vector<reco::Track>,unsigned int> > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::AssociationMap<edm::OneToMany<std::vector<reco::JPTJet>,std::vector<reco::Track>,unsigned int> > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::AssociationMap<edm::OneToMany<std::vector<reco::JPTJet>,std::vector<reco::Track>,unsigned int> > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::AssociationMap<edm::OneToMany<std::vector<reco::JPTJet>,std::vector<reco::Track>,unsigned int> > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class AssociationMap<edm::OneToMany<std::vector<reco::JPTJet, std::allocator<reco::JPTJet> >, std::vector<reco::Track, std::allocator<reco::Track> >, unsigned int> > -------------------------------
void __edm__AssociationMap_edm__OneToMany_std__vector_reco__JPTJet__std__vector_reco__Track__unsignedsint_s__db_datamem(Reflex::Class*);
void __edm__AssociationMap_edm__OneToMany_std__vector_reco__JPTJet__std__vector_reco__Track__unsignedsint_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__AssociationMap_edm__OneToMany_std__vector_reco__JPTJet__std__vector_reco__Track__unsignedsint_s__datamem_bld(&__edm__AssociationMap_edm__OneToMany_std__vector_reco__JPTJet__std__vector_reco__Track__unsignedsint_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__AssociationMap_edm__OneToMany_std__vector_reco__JPTJet__std__vector_reco__Track__unsignedsint_s__funcmem_bld(&__edm__AssociationMap_edm__OneToMany_std__vector_reco__JPTJet__std__vector_reco__Track__unsignedsint_s__db_funcmem);
void __edm__AssociationMap_edm__OneToMany_std__vector_reco__JPTJet__std__vector_reco__Track__unsignedsint_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::AssociationMap<edm::OneToMany<std::vector<reco::JPTJet>,std::vector<reco::Track>,unsigned int> >"), typeid(::edm::AssociationMap<edm::OneToMany<std::vector<reco::JPTJet>,std::vector<reco::Track>,unsigned int> >), sizeof(::edm::AssociationMap<edm::OneToMany<std::vector<reco::JPTJet>,std::vector<reco::Track>,unsigned int> >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("ClassVersion"), ::edm::AssociationMap<edm::OneToMany<std::vector<reco::JPTJet>,std::vector<reco::Track>,unsigned int> >::Class_Version())
  .AddProperty(Reflex::Literal("o_name"), "edm::AssociationMap<edm::OneToMany<reco::JPTJetCollection, std::vector<reco::Track>, unsigned int> >")
  .AddTypedef(type_4490, Reflex::Literal("edm::AssociationMap<edm::OneToMany<std::vector<reco::JPTJet>,std::vector<reco::Track>,unsigned int> >::internal_val_type"))
  .AddTypedef(type_356, Reflex::Literal("edm::AssociationMap<edm::OneToMany<std::vector<reco::JPTJet>,std::vector<reco::Track>,unsigned int> >::index_type"))
  .AddTypedef(type_4738, Reflex::Literal("edm::AssociationMap<edm::OneToMany<std::vector<reco::JPTJet>,std::vector<reco::Track>,unsigned int> >::key_type"))
  .AddTypedef(type_4739, Reflex::Literal("edm::AssociationMap<edm::OneToMany<std::vector<reco::JPTJet>,std::vector<reco::Track>,unsigned int> >::data_type"))
  .AddTypedef(type_19975, Reflex::Literal("edm::AssociationMap<edm::OneToMany<std::vector<reco::JPTJet>,std::vector<reco::Track>,unsigned int> >::ref_type"))
  .AddTypedef(type_3121, Reflex::Literal("edm::AssociationMap<edm::OneToMany<std::vector<reco::JPTJet>,std::vector<reco::Track>,unsigned int> >::map_type"))
  .AddTypedef(type_3189, Reflex::Literal("edm::AssociationMap<edm::OneToMany<std::vector<reco::JPTJet>,std::vector<reco::Track>,unsigned int> >::size_type"))
  .AddTypedef(type_15864, Reflex::Literal("edm::AssociationMap<edm::OneToMany<std::vector<reco::JPTJet>,std::vector<reco::Track>,unsigned int> >::value_type"))
  .AddTypedef(type_4490, Reflex::Literal("edm::AssociationMap<edm::OneToMany<std::vector<reco::JPTJet>,std::vector<reco::Track>,unsigned int> >::result_type"))
  .AddTypedef(type_3120, Reflex::Literal("edm::AssociationMap<edm::OneToMany<std::vector<reco::JPTJet>,std::vector<reco::Track>,unsigned int> >::internal_transient_map_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~AssociationMap"), destructor_21162, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::DESTRUCTOR )
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_33607, type_33608), Reflex::Literal("operator="), operator_21163, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_33608), Reflex::Literal("AssociationMap"), constructor_21164, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("AssociationMap"), constructor_21165, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_33206), Reflex::Literal("AssociationMap"), constructor_21166, 0, "ref", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_4563, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__AssociationMap_edm__OneToMany_std__vector_reco__JPTJet__std__vector_reco__Track__unsignedsint_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__AssociationMap_edm__OneToMany_std__vector_reco__JPTJet__std__vector_reco__Track__unsignedsint_s__funcmem_bld);
}

//------Delayed data member builder for class AssociationMap<edm::OneToMany<std::vector<reco::JPTJet, std::allocator<reco::JPTJet> >, std::vector<reco::Track, std::allocator<reco::Track> >, unsigned int> > -------------------
void __edm__AssociationMap_edm__OneToMany_std__vector_reco__JPTJet__std__vector_reco__Track__unsignedsint_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_19975, Reflex::Literal("ref_"), OffsetOf(__shadow__::__edm__AssociationMap_edm__OneToMany_std__vector_reco__JPTJet__std__vector_reco__Track__unsignedsint_s_, ref_), ::Reflex::PRIVATE)
  .AddDataMember(type_3121, Reflex::Literal("map_"), OffsetOf(__shadow__::__edm__AssociationMap_edm__OneToMany_std__vector_reco__JPTJet__std__vector_reco__Track__unsignedsint_s_, map_), ::Reflex::PRIVATE)
  .AddDataMember(type_3120, Reflex::Literal("transientMap_"), OffsetOf(__shadow__::__edm__AssociationMap_edm__OneToMany_std__vector_reco__JPTJet__std__vector_reco__Track__unsignedsint_s_, transientMap_), ::Reflex::PRIVATE | ::Reflex::TRANSIENT | ::Reflex::MUTABLE);
}
//------Delayed function member builder for class AssociationMap<edm::OneToMany<std::vector<reco::JPTJet, std::allocator<reco::JPTJet> >, std::vector<reco::Track, std::allocator<reco::Track> >, unsigned int> > -------------------
void __edm__AssociationMap_edm__OneToMany_std__vector_reco__JPTJet__std__vector_reco__Track__unsignedsint_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680), Reflex::Literal("clear"), method_21167, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3189), Reflex::Literal("size"), method_21168, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("empty"), method_21169, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_33204, type_12444), Reflex::Literal("insert"), method_21170, 0, "k;v", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_30798), Reflex::Literal("insert"), method_21171, 0, "kv", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_21160), Reflex::Literal("begin"), method_21172, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_21160), Reflex::Literal("end"), method_21173, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_21160, type_33204), Reflex::Literal("find"), method_21174, 0, "k", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3189, type_33204), Reflex::Literal("erase"), method_21175, 0, "k", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_33205, type_33204), Reflex::Literal("operator[]"), operator_21176, 0, "k", ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3189, type_33204), Reflex::Literal("numberOfAssociations"), method_21177, 0, "k", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_33206), Reflex::Literal("refProd"), method_21178, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3122), Reflex::Literal("map"), method_21179, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2965), Reflex::Literal("keys"), method_21180, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2963), Reflex::Literal("values"), method_21181, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680), Reflex::Literal("post_insert"), method_21182, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_231), Reflex::Literal("Class_Version"), method_21183, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC);
}
//------Stub functions for class AssociationMap<edm::OneToMany<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> >, std::vector<reco::Track, std::allocator<reco::Track> >, unsigned int> > -------------------------------
static void destructor_21357(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::AssociationMap<edm::OneToMany<std::vector<reco::CaloJet>,std::vector<reco::Track>,unsigned int> >*)o)->::edm::AssociationMap<edm::OneToMany<std::vector<reco::CaloJet>,std::vector<reco::Track>,unsigned int> >::~AssociationMap)();
}
static  void operator_21358( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::AssociationMap<edm::OneToMany<std::vector<reco::CaloJet>,std::vector<reco::Track>,unsigned int> >*)o)->operator=)(*(const ::edm::AssociationMap<edm::OneToMany<std::vector<reco::CaloJet>,std::vector<reco::Track>,unsigned int> >*)arg[0]);
  else   (((::edm::AssociationMap<edm::OneToMany<std::vector<reco::CaloJet>,std::vector<reco::Track>,unsigned int> >*)o)->operator=)(*(const ::edm::AssociationMap<edm::OneToMany<std::vector<reco::CaloJet>,std::vector<reco::Track>,unsigned int> >*)arg[0]);
}

static void constructor_21359( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::AssociationMap<edm::OneToMany<std::vector<reco::CaloJet>,std::vector<reco::Track>,unsigned int> >(*(const ::edm::AssociationMap<edm::OneToMany<std::vector<reco::CaloJet>,std::vector<reco::Track>,unsigned int> >*)arg[0]);
  else ::new(mem) ::edm::AssociationMap<edm::OneToMany<std::vector<reco::CaloJet>,std::vector<reco::Track>,unsigned int> >(*(const ::edm::AssociationMap<edm::OneToMany<std::vector<reco::CaloJet>,std::vector<reco::Track>,unsigned int> >*)arg[0]);
}

static void constructor_21360( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::AssociationMap<edm::OneToMany<std::vector<reco::CaloJet>,std::vector<reco::Track>,unsigned int> >();
  else ::new(mem) ::edm::AssociationMap<edm::OneToMany<std::vector<reco::CaloJet>,std::vector<reco::Track>,unsigned int> >();
}

static void constructor_21361( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::AssociationMap<edm::OneToMany<std::vector<reco::CaloJet>,std::vector<reco::Track>,unsigned int> >(*(const ::edm::helpers::KeyVal<edm::RefProd<std::vector<reco::CaloJet> >,edm::RefProd<std::vector<reco::Track> > >*)arg[0]);
  else ::new(mem) ::edm::AssociationMap<edm::OneToMany<std::vector<reco::CaloJet>,std::vector<reco::Track>,unsigned int> >(*(const ::edm::helpers::KeyVal<edm::RefProd<std::vector<reco::CaloJet> >,edm::RefProd<std::vector<reco::Track> > >*)arg[0]);
}

static  void method_21362( void*, void* o, const std::vector<void*>&, void*)
{
  (((::edm::AssociationMap<edm::OneToMany<std::vector<reco::CaloJet>,std::vector<reco::Track>,unsigned int> >*)o)->clear)();
}

static  void method_21363( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::edm::AssociationMap<edm::OneToMany<std::vector<reco::CaloJet>,std::vector<reco::Track>,unsigned int> >*)o)->size)());
  else   (((const ::edm::AssociationMap<edm::OneToMany<std::vector<reco::CaloJet>,std::vector<reco::Track>,unsigned int> >*)o)->size)();
}

static  void method_21364( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::AssociationMap<edm::OneToMany<std::vector<reco::CaloJet>,std::vector<reco::Track>,unsigned int> >*)o)->empty)());
  else   (((const ::edm::AssociationMap<edm::OneToMany<std::vector<reco::CaloJet>,std::vector<reco::Track>,unsigned int> >*)o)->empty)();
}

static  void method_21365( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::edm::AssociationMap<edm::OneToMany<std::vector<reco::CaloJet>,std::vector<reco::Track>,unsigned int> >*)o)->insert)(*(const ::edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)arg[0],
    *(const ::edm::Ref<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> >*)arg[1]);
}

static  void method_21366( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::edm::AssociationMap<edm::OneToMany<std::vector<reco::CaloJet>,std::vector<reco::Track>,unsigned int> >*)o)->insert)(*(const ::edm::helpers::KeyVal<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >*)arg[0]);
}

static  void method_21367( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::AssociationMap<edm::OneToMany<std::vector<reco::CaloJet>,std::vector<reco::Track>,unsigned int> >::const_iterator)((((const ::edm::AssociationMap<edm::OneToMany<std::vector<reco::CaloJet>,std::vector<reco::Track>,unsigned int> >*)o)->begin)());
  else   (((const ::edm::AssociationMap<edm::OneToMany<std::vector<reco::CaloJet>,std::vector<reco::Track>,unsigned int> >*)o)->begin)();
}

static  void method_21368( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::AssociationMap<edm::OneToMany<std::vector<reco::CaloJet>,std::vector<reco::Track>,unsigned int> >::const_iterator)((((const ::edm::AssociationMap<edm::OneToMany<std::vector<reco::CaloJet>,std::vector<reco::Track>,unsigned int> >*)o)->end)());
  else   (((const ::edm::AssociationMap<edm::OneToMany<std::vector<reco::CaloJet>,std::vector<reco::Track>,unsigned int> >*)o)->end)();
}

static  void method_21369( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (edm::AssociationMap<edm::OneToMany<std::vector<reco::CaloJet>,std::vector<reco::Track>,unsigned int> >::const_iterator)((((const ::edm::AssociationMap<edm::OneToMany<std::vector<reco::CaloJet>,std::vector<reco::Track>,unsigned int> >*)o)->find)(*(const ::edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)arg[0]));
  else   (((const ::edm::AssociationMap<edm::OneToMany<std::vector<reco::CaloJet>,std::vector<reco::Track>,unsigned int> >*)o)->find)(*(const ::edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)arg[0]);
}

static  void method_21370( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((::edm::AssociationMap<edm::OneToMany<std::vector<reco::CaloJet>,std::vector<reco::Track>,unsigned int> >*)o)->erase)(*(const ::edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)arg[0]));
  else   (((::edm::AssociationMap<edm::OneToMany<std::vector<reco::CaloJet>,std::vector<reco::Track>,unsigned int> >*)o)->erase)(*(const ::edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)arg[0]);
}

static  void operator_21371( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::AssociationMap<edm::OneToMany<std::vector<reco::CaloJet>,std::vector<reco::Track>,unsigned int> >*)o)->operator[])(*(const ::edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)arg[0]);
  else   (((const ::edm::AssociationMap<edm::OneToMany<std::vector<reco::CaloJet>,std::vector<reco::Track>,unsigned int> >*)o)->operator[])(*(const ::edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)arg[0]);
}

static  void method_21372( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::edm::AssociationMap<edm::OneToMany<std::vector<reco::CaloJet>,std::vector<reco::Track>,unsigned int> >*)o)->numberOfAssociations)(*(const ::edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)arg[0]));
  else   (((const ::edm::AssociationMap<edm::OneToMany<std::vector<reco::CaloJet>,std::vector<reco::Track>,unsigned int> >*)o)->numberOfAssociations)(*(const ::edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)arg[0]);
}

static  void method_21373( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::AssociationMap<edm::OneToMany<std::vector<reco::CaloJet>,std::vector<reco::Track>,unsigned int> >*)o)->refProd)();
  else   (((const ::edm::AssociationMap<edm::OneToMany<std::vector<reco::CaloJet>,std::vector<reco::Track>,unsigned int> >*)o)->refProd)();
}

static  void method_21374( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::map<const reco::CaloJet*,std::vector<const reco::Track*> >)((((::edm::AssociationMap<edm::OneToMany<std::vector<reco::CaloJet>,std::vector<reco::Track>,unsigned int> >*)o)->map)());
  else   (((::edm::AssociationMap<edm::OneToMany<std::vector<reco::CaloJet>,std::vector<reco::Track>,unsigned int> >*)o)->map)();
}

static  void method_21375( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::vector<const reco::CaloJet*>)((((::edm::AssociationMap<edm::OneToMany<std::vector<reco::CaloJet>,std::vector<reco::Track>,unsigned int> >*)o)->keys)());
  else   (((::edm::AssociationMap<edm::OneToMany<std::vector<reco::CaloJet>,std::vector<reco::Track>,unsigned int> >*)o)->keys)();
}

static  void method_21376( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::vector<std::vector<const reco::Track*> >)((((::edm::AssociationMap<edm::OneToMany<std::vector<reco::CaloJet>,std::vector<reco::Track>,unsigned int> >*)o)->values)());
  else   (((::edm::AssociationMap<edm::OneToMany<std::vector<reco::CaloJet>,std::vector<reco::Track>,unsigned int> >*)o)->values)();
}

static  void method_21377( void*, void* o, const std::vector<void*>&, void*)
{
  (((::edm::AssociationMap<edm::OneToMany<std::vector<reco::CaloJet>,std::vector<reco::Track>,unsigned int> >*)o)->post_insert)();
}

static  void method_21378( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (short)((((::edm::AssociationMap<edm::OneToMany<std::vector<reco::CaloJet>,std::vector<reco::Track>,unsigned int> >*)o)->Class_Version)());
  else   (((::edm::AssociationMap<edm::OneToMany<std::vector<reco::CaloJet>,std::vector<reco::Track>,unsigned int> >*)o)->Class_Version)();
}

static void method_newdel_4568( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::AssociationMap<edm::OneToMany<std::vector<reco::CaloJet>,std::vector<reco::Track>,unsigned int> > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::AssociationMap<edm::OneToMany<std::vector<reco::CaloJet>,std::vector<reco::Track>,unsigned int> > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::AssociationMap<edm::OneToMany<std::vector<reco::CaloJet>,std::vector<reco::Track>,unsigned int> > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::AssociationMap<edm::OneToMany<std::vector<reco::CaloJet>,std::vector<reco::Track>,unsigned int> > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::AssociationMap<edm::OneToMany<std::vector<reco::CaloJet>,std::vector<reco::Track>,unsigned int> > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class AssociationMap<edm::OneToMany<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> >, std::vector<reco::Track, std::allocator<reco::Track> >, unsigned int> > -------------------------------
void __edm__AssociationMap_edm__OneToMany_std__vector_reco__CaloJet__std__vector_reco__Track__unsignedsint_s__db_datamem(Reflex::Class*);
void __edm__AssociationMap_edm__OneToMany_std__vector_reco__CaloJet__std__vector_reco__Track__unsignedsint_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__AssociationMap_edm__OneToMany_std__vector_reco__CaloJet__std__vector_reco__Track__unsignedsint_s__datamem_bld(&__edm__AssociationMap_edm__OneToMany_std__vector_reco__CaloJet__std__vector_reco__Track__unsignedsint_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__AssociationMap_edm__OneToMany_std__vector_reco__CaloJet__std__vector_reco__Track__unsignedsint_s__funcmem_bld(&__edm__AssociationMap_edm__OneToMany_std__vector_reco__CaloJet__std__vector_reco__Track__unsignedsint_s__db_funcmem);
void __edm__AssociationMap_edm__OneToMany_std__vector_reco__CaloJet__std__vector_reco__Track__unsignedsint_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::AssociationMap<edm::OneToMany<std::vector<reco::CaloJet>,std::vector<reco::Track>,unsigned int> >"), typeid(::edm::AssociationMap<edm::OneToMany<std::vector<reco::CaloJet>,std::vector<reco::Track>,unsigned int> >), sizeof(::edm::AssociationMap<edm::OneToMany<std::vector<reco::CaloJet>,std::vector<reco::Track>,unsigned int> >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("ClassVersion"), ::edm::AssociationMap<edm::OneToMany<std::vector<reco::CaloJet>,std::vector<reco::Track>,unsigned int> >::Class_Version())
  .AddProperty(Reflex::Literal("o_name"), "edm::AssociationMap<edm::OneToMany<reco::CaloJetCollection, std::vector<reco::Track>, unsigned int> >")
  .AddTypedef(type_4490, Reflex::Literal("edm::AssociationMap<edm::OneToMany<std::vector<reco::CaloJet>,std::vector<reco::Track>,unsigned int> >::internal_val_type"))
  .AddTypedef(type_356, Reflex::Literal("edm::AssociationMap<edm::OneToMany<std::vector<reco::CaloJet>,std::vector<reco::Track>,unsigned int> >::index_type"))
  .AddTypedef(type_4744, Reflex::Literal("edm::AssociationMap<edm::OneToMany<std::vector<reco::CaloJet>,std::vector<reco::Track>,unsigned int> >::key_type"))
  .AddTypedef(type_4739, Reflex::Literal("edm::AssociationMap<edm::OneToMany<std::vector<reco::CaloJet>,std::vector<reco::Track>,unsigned int> >::data_type"))
  .AddTypedef(type_20100, Reflex::Literal("edm::AssociationMap<edm::OneToMany<std::vector<reco::CaloJet>,std::vector<reco::Track>,unsigned int> >::ref_type"))
  .AddTypedef(type_3121, Reflex::Literal("edm::AssociationMap<edm::OneToMany<std::vector<reco::CaloJet>,std::vector<reco::Track>,unsigned int> >::map_type"))
  .AddTypedef(type_3189, Reflex::Literal("edm::AssociationMap<edm::OneToMany<std::vector<reco::CaloJet>,std::vector<reco::Track>,unsigned int> >::size_type"))
  .AddTypedef(type_16217, Reflex::Literal("edm::AssociationMap<edm::OneToMany<std::vector<reco::CaloJet>,std::vector<reco::Track>,unsigned int> >::value_type"))
  .AddTypedef(type_4490, Reflex::Literal("edm::AssociationMap<edm::OneToMany<std::vector<reco::CaloJet>,std::vector<reco::Track>,unsigned int> >::result_type"))
  .AddTypedef(type_3131, Reflex::Literal("edm::AssociationMap<edm::OneToMany<std::vector<reco::CaloJet>,std::vector<reco::Track>,unsigned int> >::internal_transient_map_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~AssociationMap"), destructor_21357, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::DESTRUCTOR )
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_33617, type_33618), Reflex::Literal("operator="), operator_21358, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_33618), Reflex::Literal("AssociationMap"), constructor_21359, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("AssociationMap"), constructor_21360, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_33274), Reflex::Literal("AssociationMap"), constructor_21361, 0, "ref", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_4568, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__AssociationMap_edm__OneToMany_std__vector_reco__CaloJet__std__vector_reco__Track__unsignedsint_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__AssociationMap_edm__OneToMany_std__vector_reco__CaloJet__std__vector_reco__Track__unsignedsint_s__funcmem_bld);
}

//------Delayed data member builder for class AssociationMap<edm::OneToMany<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> >, std::vector<reco::Track, std::allocator<reco::Track> >, unsigned int> > -------------------
void __edm__AssociationMap_edm__OneToMany_std__vector_reco__CaloJet__std__vector_reco__Track__unsignedsint_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_20100, Reflex::Literal("ref_"), OffsetOf(__shadow__::__edm__AssociationMap_edm__OneToMany_std__vector_reco__CaloJet__std__vector_reco__Track__unsignedsint_s_, ref_), ::Reflex::PRIVATE)
  .AddDataMember(type_3121, Reflex::Literal("map_"), OffsetOf(__shadow__::__edm__AssociationMap_edm__OneToMany_std__vector_reco__CaloJet__std__vector_reco__Track__unsignedsint_s_, map_), ::Reflex::PRIVATE)
  .AddDataMember(type_3131, Reflex::Literal("transientMap_"), OffsetOf(__shadow__::__edm__AssociationMap_edm__OneToMany_std__vector_reco__CaloJet__std__vector_reco__Track__unsignedsint_s_, transientMap_), ::Reflex::PRIVATE | ::Reflex::TRANSIENT | ::Reflex::MUTABLE);
}
//------Delayed function member builder for class AssociationMap<edm::OneToMany<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> >, std::vector<reco::Track, std::allocator<reco::Track> >, unsigned int> > -------------------
void __edm__AssociationMap_edm__OneToMany_std__vector_reco__CaloJet__std__vector_reco__Track__unsignedsint_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680), Reflex::Literal("clear"), method_21362, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3189), Reflex::Literal("size"), method_21363, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("empty"), method_21364, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_13737, type_12444), Reflex::Literal("insert"), method_21365, 0, "k;v", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_30865), Reflex::Literal("insert"), method_21366, 0, "kv", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_21355), Reflex::Literal("begin"), method_21367, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_21355), Reflex::Literal("end"), method_21368, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_21355, type_13737), Reflex::Literal("find"), method_21369, 0, "k", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3189, type_13737), Reflex::Literal("erase"), method_21370, 0, "k", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_33205, type_13737), Reflex::Literal("operator[]"), operator_21371, 0, "k", ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3189, type_13737), Reflex::Literal("numberOfAssociations"), method_21372, 0, "k", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_33274), Reflex::Literal("refProd"), method_21373, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3132), Reflex::Literal("map"), method_21374, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2992), Reflex::Literal("keys"), method_21375, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2963), Reflex::Literal("values"), method_21376, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680), Reflex::Literal("post_insert"), method_21377, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_231), Reflex::Literal("Class_Version"), method_21378, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC);
}
//------Stub functions for class KeyVal<edm::RefProd<std::vector<reco::JPTJet, std::allocator<reco::JPTJet> > >,edm::RefProd<std::vector<reco::Track, std::allocator<reco::Track> > > > -------------------------------
static void destructor_33196(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::helpers::KeyVal<edm::RefProd<std::vector<reco::JPTJet> >,edm::RefProd<std::vector<reco::Track> > >*)o)->::edm::helpers::KeyVal<edm::RefProd<std::vector<reco::JPTJet> >,edm::RefProd<std::vector<reco::Track> > >::~KeyVal)();
}
static  void operator_33197( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::helpers::KeyVal<edm::RefProd<std::vector<reco::JPTJet> >,edm::RefProd<std::vector<reco::Track> > >*)o)->operator=)(*(const ::edm::helpers::KeyVal<edm::RefProd<std::vector<reco::JPTJet> >,edm::RefProd<std::vector<reco::Track> > >*)arg[0]);
  else   (((::edm::helpers::KeyVal<edm::RefProd<std::vector<reco::JPTJet> >,edm::RefProd<std::vector<reco::Track> > >*)o)->operator=)(*(const ::edm::helpers::KeyVal<edm::RefProd<std::vector<reco::JPTJet> >,edm::RefProd<std::vector<reco::Track> > >*)arg[0]);
}

static void constructor_33198( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::helpers::KeyVal<edm::RefProd<std::vector<reco::JPTJet> >,edm::RefProd<std::vector<reco::Track> > >(*(const ::edm::helpers::KeyVal<edm::RefProd<std::vector<reco::JPTJet> >,edm::RefProd<std::vector<reco::Track> > >*)arg[0]);
  else ::new(mem) ::edm::helpers::KeyVal<edm::RefProd<std::vector<reco::JPTJet> >,edm::RefProd<std::vector<reco::Track> > >(*(const ::edm::helpers::KeyVal<edm::RefProd<std::vector<reco::JPTJet> >,edm::RefProd<std::vector<reco::Track> > >*)arg[0]);
}

static void constructor_33199( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::helpers::KeyVal<edm::RefProd<std::vector<reco::JPTJet> >,edm::RefProd<std::vector<reco::Track> > >();
  else ::new(mem) ::edm::helpers::KeyVal<edm::RefProd<std::vector<reco::JPTJet> >,edm::RefProd<std::vector<reco::Track> > >();
}

static void constructor_33200( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::helpers::KeyVal<edm::RefProd<std::vector<reco::JPTJet> >,edm::RefProd<std::vector<reco::Track> > >(*(const ::edm::RefProd<std::vector<reco::JPTJet> >*)arg[0],
      *(const ::edm::RefProd<std::vector<reco::Track> >*)arg[1]);
  else ::new(mem) ::edm::helpers::KeyVal<edm::RefProd<std::vector<reco::JPTJet> >,edm::RefProd<std::vector<reco::Track> > >(*(const ::edm::RefProd<std::vector<reco::JPTJet> >*)arg[0],
      *(const ::edm::RefProd<std::vector<reco::Track> >*)arg[1]);
}

static void method_newdel_19975( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::helpers::KeyVal<edm::RefProd<std::vector<reco::JPTJet> >,edm::RefProd<std::vector<reco::Track> > > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::helpers::KeyVal<edm::RefProd<std::vector<reco::JPTJet> >,edm::RefProd<std::vector<reco::Track> > > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::helpers::KeyVal<edm::RefProd<std::vector<reco::JPTJet> >,edm::RefProd<std::vector<reco::Track> > > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::helpers::KeyVal<edm::RefProd<std::vector<reco::JPTJet> >,edm::RefProd<std::vector<reco::Track> > > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::helpers::KeyVal<edm::RefProd<std::vector<reco::JPTJet> >,edm::RefProd<std::vector<reco::Track> > > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class KeyVal<edm::RefProd<std::vector<reco::JPTJet, std::allocator<reco::JPTJet> > >,edm::RefProd<std::vector<reco::Track, std::allocator<reco::Track> > > > -------------------------------
void __edm__helpers__KeyVal_edm__RefProd_std__vector_reco__JPTJet_s__edm__RefProd_std__vector_reco__Track_s_s__db_datamem(Reflex::Class*);
void __edm__helpers__KeyVal_edm__RefProd_std__vector_reco__JPTJet_s__edm__RefProd_std__vector_reco__Track_s_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__helpers__KeyVal_edm__RefProd_std__vector_reco__JPTJet_s__edm__RefProd_std__vector_reco__Track_s_s__datamem_bld(&__edm__helpers__KeyVal_edm__RefProd_std__vector_reco__JPTJet_s__edm__RefProd_std__vector_reco__Track_s_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__helpers__KeyVal_edm__RefProd_std__vector_reco__JPTJet_s__edm__RefProd_std__vector_reco__Track_s_s__funcmem_bld(&__edm__helpers__KeyVal_edm__RefProd_std__vector_reco__JPTJet_s__edm__RefProd_std__vector_reco__Track_s_s__db_funcmem);
void __edm__helpers__KeyVal_edm__RefProd_std__vector_reco__JPTJet_s__edm__RefProd_std__vector_reco__Track_s_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::helpers::KeyVal<edm::RefProd<std::vector<reco::JPTJet> >,edm::RefProd<std::vector<reco::Track> > >"), typeid(::edm::helpers::KeyVal<edm::RefProd<std::vector<reco::JPTJet> >,edm::RefProd<std::vector<reco::Track> > >), sizeof(::edm::helpers::KeyVal<edm::RefProd<std::vector<reco::JPTJet> >,edm::RefProd<std::vector<reco::Track> > >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::STRUCT)
  .AddProperty(Reflex::Literal("o_name"), "edm::helpers::KeyVal<edm::RefProd<reco::JPTJetCollection>,edm::RefProd<std::vector<reco::Track> > >")
  .AddTypedef(type_4704, Reflex::Literal("edm::helpers::KeyVal<edm::RefProd<std::vector<reco::JPTJet> >,edm::RefProd<std::vector<reco::Track> > >::key_type"))
  .AddTypedef(type_4703, Reflex::Literal("edm::helpers::KeyVal<edm::RefProd<std::vector<reco::JPTJet> >,edm::RefProd<std::vector<reco::Track> > >::value_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~KeyVal"), destructor_33196, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::DESTRUCTOR )
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_33203, type_33206), Reflex::Literal("operator="), operator_33197, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_33206), Reflex::Literal("KeyVal"), constructor_33198, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("KeyVal"), constructor_33199, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_33949, type_33944), Reflex::Literal("KeyVal"), constructor_33200, 0, "k;v", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_19975, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__helpers__KeyVal_edm__RefProd_std__vector_reco__JPTJet_s__edm__RefProd_std__vector_reco__Track_s_s__datamem_bld);
}

//------Delayed data member builder for class KeyVal<edm::RefProd<std::vector<reco::JPTJet, std::allocator<reco::JPTJet> > >,edm::RefProd<std::vector<reco::Track, std::allocator<reco::Track> > > > -------------------
void __edm__helpers__KeyVal_edm__RefProd_std__vector_reco__JPTJet_s__edm__RefProd_std__vector_reco__Track_s_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_4704, Reflex::Literal("key"), OffsetOf(__shadow__::__edm__helpers__KeyVal_edm__RefProd_std__vector_reco__JPTJet_s__edm__RefProd_std__vector_reco__Track_s_s_, key), ::Reflex::PUBLIC)
  .AddDataMember(type_4703, Reflex::Literal("val"), OffsetOf(__shadow__::__edm__helpers__KeyVal_edm__RefProd_std__vector_reco__JPTJet_s__edm__RefProd_std__vector_reco__Track_s_s_, val), ::Reflex::PUBLIC);
}
//------Delayed function member builder for class KeyVal<edm::RefProd<std::vector<reco::JPTJet, std::allocator<reco::JPTJet> > >,edm::RefProd<std::vector<reco::Track, std::allocator<reco::Track> > > > -------------------
void __edm__helpers__KeyVal_edm__RefProd_std__vector_reco__JPTJet_s__edm__RefProd_std__vector_reco__Track_s_s__db_funcmem(Reflex::Class*) {

}
//------Stub functions for class KeyVal<edm::RefProd<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> > >,edm::RefProd<std::vector<reco::Track, std::allocator<reco::Track> > > > -------------------------------
static void destructor_33266(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::helpers::KeyVal<edm::RefProd<std::vector<reco::CaloJet> >,edm::RefProd<std::vector<reco::Track> > >*)o)->::edm::helpers::KeyVal<edm::RefProd<std::vector<reco::CaloJet> >,edm::RefProd<std::vector<reco::Track> > >::~KeyVal)();
}
static  void operator_33267( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::helpers::KeyVal<edm::RefProd<std::vector<reco::CaloJet> >,edm::RefProd<std::vector<reco::Track> > >*)o)->operator=)(*(const ::edm::helpers::KeyVal<edm::RefProd<std::vector<reco::CaloJet> >,edm::RefProd<std::vector<reco::Track> > >*)arg[0]);
  else   (((::edm::helpers::KeyVal<edm::RefProd<std::vector<reco::CaloJet> >,edm::RefProd<std::vector<reco::Track> > >*)o)->operator=)(*(const ::edm::helpers::KeyVal<edm::RefProd<std::vector<reco::CaloJet> >,edm::RefProd<std::vector<reco::Track> > >*)arg[0]);
}

static void constructor_33268( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::helpers::KeyVal<edm::RefProd<std::vector<reco::CaloJet> >,edm::RefProd<std::vector<reco::Track> > >(*(const ::edm::helpers::KeyVal<edm::RefProd<std::vector<reco::CaloJet> >,edm::RefProd<std::vector<reco::Track> > >*)arg[0]);
  else ::new(mem) ::edm::helpers::KeyVal<edm::RefProd<std::vector<reco::CaloJet> >,edm::RefProd<std::vector<reco::Track> > >(*(const ::edm::helpers::KeyVal<edm::RefProd<std::vector<reco::CaloJet> >,edm::RefProd<std::vector<reco::Track> > >*)arg[0]);
}

static void constructor_33269( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::helpers::KeyVal<edm::RefProd<std::vector<reco::CaloJet> >,edm::RefProd<std::vector<reco::Track> > >();
  else ::new(mem) ::edm::helpers::KeyVal<edm::RefProd<std::vector<reco::CaloJet> >,edm::RefProd<std::vector<reco::Track> > >();
}

static void constructor_33270( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::helpers::KeyVal<edm::RefProd<std::vector<reco::CaloJet> >,edm::RefProd<std::vector<reco::Track> > >(*(const ::edm::RefProd<std::vector<reco::CaloJet> >*)arg[0],
      *(const ::edm::RefProd<std::vector<reco::Track> >*)arg[1]);
  else ::new(mem) ::edm::helpers::KeyVal<edm::RefProd<std::vector<reco::CaloJet> >,edm::RefProd<std::vector<reco::Track> > >(*(const ::edm::RefProd<std::vector<reco::CaloJet> >*)arg[0],
      *(const ::edm::RefProd<std::vector<reco::Track> >*)arg[1]);
}

static void method_newdel_20100( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::helpers::KeyVal<edm::RefProd<std::vector<reco::CaloJet> >,edm::RefProd<std::vector<reco::Track> > > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::helpers::KeyVal<edm::RefProd<std::vector<reco::CaloJet> >,edm::RefProd<std::vector<reco::Track> > > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::helpers::KeyVal<edm::RefProd<std::vector<reco::CaloJet> >,edm::RefProd<std::vector<reco::Track> > > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::helpers::KeyVal<edm::RefProd<std::vector<reco::CaloJet> >,edm::RefProd<std::vector<reco::Track> > > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::helpers::KeyVal<edm::RefProd<std::vector<reco::CaloJet> >,edm::RefProd<std::vector<reco::Track> > > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class KeyVal<edm::RefProd<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> > >,edm::RefProd<std::vector<reco::Track, std::allocator<reco::Track> > > > -------------------------------
void __edm__helpers__KeyVal_edm__RefProd_std__vector_reco__CaloJet_s__edm__RefProd_std__vector_reco__Track_s_s__db_datamem(Reflex::Class*);
void __edm__helpers__KeyVal_edm__RefProd_std__vector_reco__CaloJet_s__edm__RefProd_std__vector_reco__Track_s_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__helpers__KeyVal_edm__RefProd_std__vector_reco__CaloJet_s__edm__RefProd_std__vector_reco__Track_s_s__datamem_bld(&__edm__helpers__KeyVal_edm__RefProd_std__vector_reco__CaloJet_s__edm__RefProd_std__vector_reco__Track_s_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__helpers__KeyVal_edm__RefProd_std__vector_reco__CaloJet_s__edm__RefProd_std__vector_reco__Track_s_s__funcmem_bld(&__edm__helpers__KeyVal_edm__RefProd_std__vector_reco__CaloJet_s__edm__RefProd_std__vector_reco__Track_s_s__db_funcmem);
void __edm__helpers__KeyVal_edm__RefProd_std__vector_reco__CaloJet_s__edm__RefProd_std__vector_reco__Track_s_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::helpers::KeyVal<edm::RefProd<std::vector<reco::CaloJet> >,edm::RefProd<std::vector<reco::Track> > >"), typeid(::edm::helpers::KeyVal<edm::RefProd<std::vector<reco::CaloJet> >,edm::RefProd<std::vector<reco::Track> > >), sizeof(::edm::helpers::KeyVal<edm::RefProd<std::vector<reco::CaloJet> >,edm::RefProd<std::vector<reco::Track> > >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::STRUCT)
  .AddProperty(Reflex::Literal("o_name"), "edm::helpers::KeyVal<edm::RefProd<reco::CaloJetCollection>,edm::RefProd<std::vector<reco::Track> > >")
  .AddTypedef(type_4709, Reflex::Literal("edm::helpers::KeyVal<edm::RefProd<std::vector<reco::CaloJet> >,edm::RefProd<std::vector<reco::Track> > >::key_type"))
  .AddTypedef(type_4703, Reflex::Literal("edm::helpers::KeyVal<edm::RefProd<std::vector<reco::CaloJet> >,edm::RefProd<std::vector<reco::Track> > >::value_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~KeyVal"), destructor_33266, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::DESTRUCTOR )
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_33273, type_33274), Reflex::Literal("operator="), operator_33267, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_33274), Reflex::Literal("KeyVal"), constructor_33268, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("KeyVal"), constructor_33269, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_33974, type_33944), Reflex::Literal("KeyVal"), constructor_33270, 0, "k;v", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_20100, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__helpers__KeyVal_edm__RefProd_std__vector_reco__CaloJet_s__edm__RefProd_std__vector_reco__Track_s_s__datamem_bld);
}

//------Delayed data member builder for class KeyVal<edm::RefProd<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> > >,edm::RefProd<std::vector<reco::Track, std::allocator<reco::Track> > > > -------------------
void __edm__helpers__KeyVal_edm__RefProd_std__vector_reco__CaloJet_s__edm__RefProd_std__vector_reco__Track_s_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_4709, Reflex::Literal("key"), OffsetOf(__shadow__::__edm__helpers__KeyVal_edm__RefProd_std__vector_reco__CaloJet_s__edm__RefProd_std__vector_reco__Track_s_s_, key), ::Reflex::PUBLIC)
  .AddDataMember(type_4703, Reflex::Literal("val"), OffsetOf(__shadow__::__edm__helpers__KeyVal_edm__RefProd_std__vector_reco__CaloJet_s__edm__RefProd_std__vector_reco__Track_s_s_, val), ::Reflex::PUBLIC);
}
//------Delayed function member builder for class KeyVal<edm::RefProd<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> > >,edm::RefProd<std::vector<reco::Track, std::allocator<reco::Track> > > > -------------------
void __edm__helpers__KeyVal_edm__RefProd_std__vector_reco__CaloJet_s__edm__RefProd_std__vector_reco__Track_s_s__db_funcmem(Reflex::Class*) {

}
//------Stub functions for class RefVectorHolder<edm::RefVector<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet, edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet> > > -------------------------------
static void constructor_33666( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::reftobase::RefVectorHolder<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >(*(const ::edm::reftobase::RefVectorHolder<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)arg[0]);
  else ::new(mem) ::edm::reftobase::RefVectorHolder<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >(*(const ::edm::reftobase::RefVectorHolder<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)arg[0]);
}

static void constructor_33667( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::reftobase::RefVectorHolder<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >();
  else ::new(mem) ::edm::reftobase::RefVectorHolder<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >();
}

static void constructor_33668( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::reftobase::RefVectorHolder<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >(*(const ::edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)arg[0]);
  else ::new(mem) ::edm::reftobase::RefVectorHolder<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >(*(const ::edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)arg[0]);
}

static void constructor_33669( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::reftobase::RefVectorHolder<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >(*(const ::edm::ProductID*)arg[0]);
  else ::new(mem) ::edm::reftobase::RefVectorHolder<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >(*(const ::edm::ProductID*)arg[0]);
}

static void destructor_33670(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::reftobase::RefVectorHolder<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->::edm::reftobase::RefVectorHolder<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >::~RefVectorHolder)();
}
static  void method_33671( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::edm::reftobase::RefVectorHolder<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->swap)(*(::edm::reftobase::RefVectorHolder<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)arg[0]);
}

static  void operator_33672( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::reftobase::RefVectorHolder<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->operator=)(*(const ::edm::reftobase::RefVectorHolder<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)arg[0]);
  else   (((::edm::reftobase::RefVectorHolder<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->operator=)(*(const ::edm::reftobase::RefVectorHolder<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)arg[0]);
}

static  void method_33673( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::reftobase::RefVectorHolder<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->empty)());
  else   (((const ::edm::reftobase::RefVectorHolder<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->empty)();
}

static  void method_33674( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (size_t)((((const ::edm::reftobase::RefVectorHolder<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->size)());
  else   (((const ::edm::reftobase::RefVectorHolder<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->size)();
}

static  void method_33675( void*, void* o, const std::vector<void*>&, void*)
{
  (((::edm::reftobase::RefVectorHolder<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->clear)();
}

static  void method_33676( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::edm::reftobase::RefVectorHolder<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->push_back)((const ::edm::reftobase::RefHolderBase*)arg[0]);
}

static  void method_33677( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::edm::reftobase::RefVectorHolder<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->reserve)(*(::size_t*)arg[0]);
}

static  void method_33678( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::ProductID)((((const ::edm::reftobase::RefVectorHolder<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->id)());
  else   (((const ::edm::reftobase::RefVectorHolder<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->id)();
}

static  void method_33679( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::reftobase::RefVectorHolder<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->productGetter)());
  else   (((const ::edm::reftobase::RefVectorHolder<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->productGetter)();
}

static  void method_33680( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::reftobase::RefVectorHolder<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->clone)());
  else   (((const ::edm::reftobase::RefVectorHolder<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->clone)();
}

static  void method_33681( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::reftobase::RefVectorHolder<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->cloneEmpty)());
  else   (((const ::edm::reftobase::RefVectorHolder<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->cloneEmpty)();
}

static  void method_33682( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::edm::reftobase::RefVectorHolder<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->setRefs)(*(const ::edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)arg[0]);
}

static  void method_33683( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::edm::reftobase::RefVectorHolder<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->reallyFillView)((const void*)arg[0],
    *(const ::edm::ProductID*)arg[1],
    *(::std::vector<const void*>*)arg[2]);
}

static  void method_33684( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (size_t)((((const ::edm::reftobase::RefVectorHolder<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->keyForIndex)(*(::size_t*)arg[0]));
  else   (((const ::edm::reftobase::RefVectorHolder<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->keyForIndex)(*(::size_t*)arg[0]);
}

static  void method_33685( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (short)((((::edm::reftobase::RefVectorHolder<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->Class_Version)());
  else   (((::edm::reftobase::RefVectorHolder<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->Class_Version)();
}

static  void method_33686( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::reftobase::RefVectorHolderBase::const_iterator)((((const ::edm::reftobase::RefVectorHolder<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->begin)());
  else   (((const ::edm::reftobase::RefVectorHolder<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->begin)();
}

static  void method_33687( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::reftobase::RefVectorHolderBase::const_iterator)((((const ::edm::reftobase::RefVectorHolder<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->end)());
  else   (((const ::edm::reftobase::RefVectorHolder<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->end)();
}

static  void method_33688( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::reftobase::RefVectorHolder<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->product)());
  else   (((const ::edm::reftobase::RefVectorHolder<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->product)();
}

static  void method_33689( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::reftobase::RefVectorHolder<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->isAvailable)());
  else   (((const ::edm::reftobase::RefVectorHolder<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->isAvailable)();
}

static void method_newdel_21538( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::reftobase::RefVectorHolder<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::reftobase::RefVectorHolder<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::reftobase::RefVectorHolder<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::reftobase::RefVectorHolder<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::reftobase::RefVectorHolder<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

static void method_x131( void* retaddr, void*, const std::vector<void*>&, void*)
{
  typedef std::vector<std::pair< ::Reflex::Base, int> > Bases_t;
  static Bases_t s_bases;
  if ( !s_bases.size() ) {
    s_bases.push_back(std::make_pair(::Reflex::Base( ::Reflex::TypeBuilder(Reflex::Literal("edm::reftobase::RefVectorHolderBase")), ::Reflex::BaseOffset< ::edm::reftobase::RefVectorHolder<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >,::edm::reftobase::RefVectorHolderBase >::Get(),::Reflex::PUBLIC), 0));
  }
  if (retaddr) *(Bases_t**)retaddr = &s_bases;
}

//------Dictionary for class RefVectorHolder<edm::RefVector<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet, edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet> > > -------------------------------
void __edm__reftobase__RefVectorHolder_edm__RefVector_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s__db_datamem(Reflex::Class*);
void __edm__reftobase__RefVectorHolder_edm__RefVector_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__reftobase__RefVectorHolder_edm__RefVector_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s__datamem_bld(&__edm__reftobase__RefVectorHolder_edm__RefVector_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__reftobase__RefVectorHolder_edm__RefVector_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s__funcmem_bld(&__edm__reftobase__RefVectorHolder_edm__RefVector_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s__db_funcmem);
void __edm__reftobase__RefVectorHolder_edm__RefVector_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::reftobase::RefVectorHolder<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >"), typeid(::edm::reftobase::RefVectorHolder<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >), sizeof(::edm::reftobase::RefVectorHolder<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::VIRTUAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("ClassVersion"), ::edm::reftobase::RefVectorHolder<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >::Class_Version())
  .AddProperty(Reflex::Literal("o_name"), "edm::reftobase::RefVectorHolder<reco::PFJetRefVector>")
  .AddBase(type_4692, ::Reflex::BaseOffset< ::edm::reftobase::RefVectorHolder<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >, ::edm::reftobase::RefVectorHolderBase >::Get(), ::Reflex::PUBLIC)
  .AddTypedef(type_21794, Reflex::Literal("edm::reftobase::RefVectorHolder<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >::const_iterator_imp"))
  .AddTypedef(type_21795, Reflex::Literal("edm::reftobase::RefVectorHolder<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >::const_iterator"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_38044), Reflex::Literal("RefVectorHolder"), constructor_33666, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("RefVectorHolder"), constructor_33667, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_12827), Reflex::Literal("RefVectorHolder"), constructor_33668, 0, "refs", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_18495), Reflex::Literal("RefVectorHolder"), constructor_33669, 0, "iId", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~RefVectorHolder"), destructor_33670, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::DESTRUCTOR )
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_21538, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getBasesTable"), method_x131, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__reftobase__RefVectorHolder_edm__RefVector_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__reftobase__RefVectorHolder_edm__RefVector_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s__funcmem_bld);
}

//------Delayed data member builder for class RefVectorHolder<edm::RefVector<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet, edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet> > > -------------------
void __edm__reftobase__RefVectorHolder_edm__RefVector_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_4496, Reflex::Literal("refs_"), OffsetOf(__shadow__::__edm__reftobase__RefVectorHolder_edm__RefVector_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s_, refs_), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class RefVectorHolder<edm::RefVector<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet, edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet> > > -------------------
void __edm__reftobase__RefVectorHolder_edm__RefVector_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_38045), Reflex::Literal("swap"), method_33671, 0, "other", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_38045, type_38044), Reflex::Literal("operator="), operator_33672, 0, "rhs", ::Reflex::PUBLIC | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("empty"), method_33673, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2096), Reflex::Literal("size"), method_33674, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680), Reflex::Literal("clear"), method_33675, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_33942), Reflex::Literal("push_back"), method_33676, 0, "h", ::Reflex::PUBLIC | ::Reflex::VIRTUAL)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_2096), Reflex::Literal("reserve"), method_33677, 0, "n", ::Reflex::PUBLIC | ::Reflex::VIRTUAL)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4689), Reflex::Literal("id"), method_33678, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_18571), Reflex::Literal("productGetter"), method_33679, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_38046), Reflex::Literal("clone"), method_33680, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_38046), Reflex::Literal("cloneEmpty"), method_33681, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_12827), Reflex::Literal("setRefs"), method_33682, 0, "refs", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_3933, type_18495, type_18575), Reflex::Literal("reallyFillView"), method_33683, 0, "iProd;iId;oPointers", ::Reflex::PUBLIC | ::Reflex::VIRTUAL)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2096, type_2096), Reflex::Literal("keyForIndex"), method_33684, 0, "idx", ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_231), Reflex::Literal("Class_Version"), method_33685, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_21795), Reflex::Literal("begin"), method_33686, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_21795), Reflex::Literal("end"), method_33687, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3933), Reflex::Literal("product"), method_33688, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("isAvailable"), method_33689, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST);
}
//------Stub functions for class RefHolder<edm::Ref<std::vector<reco::BasicJet, std::allocator<reco::BasicJet> >, reco::BasicJet, edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet, std::allocator<reco::BasicJet> >, reco::BasicJet> > > -------------------------------
static  void operator_33692( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->operator=)(*(const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)arg[0]);
  else   (((::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->operator=)(*(const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)arg[0]);
}

static void constructor_33693( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >(*(const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)arg[0]);
  else ::new(mem) ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >(*(const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)arg[0]);
}

static void constructor_33694( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >();
  else ::new(mem) ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >();
}

static void constructor_33695( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >(*(const ::edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)arg[0]);
  else ::new(mem) ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >(*(const ::edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)arg[0]);
}

static  void method_33696( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->swap)(*(::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)arg[0]);
}

static void destructor_33697(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >::~RefHolder)();
}
static  void method_33698( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->clone)());
  else   (((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->clone)();
}

static  void method_33699( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::ProductID)((((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->id)());
  else   (((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->id)();
}

static  void method_33700( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (size_t)((((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->key)());
  else   (((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->key)();
}

static  void method_33701( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->isEqualTo)(*(const ::edm::reftobase::RefHolderBase*)arg[0]));
  else   (((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->isEqualTo)(*(const ::edm::reftobase::RefHolderBase*)arg[0]);
}

static  void method_33702( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->fillRefIfMyTypeMatches)(*(::edm::reftobase::RefHolderBase*)arg[0],
    *(::std::basic_string<char>*)arg[1]));
  else   (((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->fillRefIfMyTypeMatches)(*(::edm::reftobase::RefHolderBase*)arg[0],
    *(::std::basic_string<char>*)arg[1]);
}

static  void method_33703( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->getRef)();
  else   (((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->getRef)();
}

static  void method_33704( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->setRef)(*(const ::edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)arg[0]);
}

static  void method_33705( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::auto_ptr<edm::reftobase::RefVectorHolderBase>)((((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->makeVectorHolder)());
  else   (((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->makeVectorHolder)();
}

static  void method_33706( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->productGetter)());
  else   (((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->productGetter)();
}

static  void method_33707( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->hasProductCache)());
  else   (((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->hasProductCache)();
}

static  void method_33708( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->product)());
  else   (((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->product)();
}

static  void method_33709( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->isAvailable)());
  else   (((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->isAvailable)();
}

static  void method_33710( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (short)((((::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->Class_Version)());
  else   (((::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->Class_Version)();
}

static void method_newdel_21539( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

static void method_x133( void* retaddr, void*, const std::vector<void*>&, void*)
{
  typedef std::vector<std::pair< ::Reflex::Base, int> > Bases_t;
  static Bases_t s_bases;
  if ( !s_bases.size() ) {
    s_bases.push_back(std::make_pair(::Reflex::Base( ::Reflex::TypeBuilder(Reflex::Literal("edm::reftobase::RefHolderBase")), ::Reflex::BaseOffset< ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >,::edm::reftobase::RefHolderBase >::Get(),::Reflex::PUBLIC), 0));
  }
  if (retaddr) *(Bases_t**)retaddr = &s_bases;
}

//------Dictionary for class RefHolder<edm::Ref<std::vector<reco::BasicJet, std::allocator<reco::BasicJet> >, reco::BasicJet, edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet, std::allocator<reco::BasicJet> >, reco::BasicJet> > > -------------------------------
void __edm__reftobase__RefHolder_edm__Ref_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s_s__db_datamem(Reflex::Class*);
void __edm__reftobase__RefHolder_edm__Ref_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__reftobase__RefHolder_edm__Ref_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s_s__datamem_bld(&__edm__reftobase__RefHolder_edm__Ref_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__reftobase__RefHolder_edm__Ref_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s_s__funcmem_bld(&__edm__reftobase__RefHolder_edm__Ref_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s_s__db_funcmem);
void __edm__reftobase__RefHolder_edm__Ref_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::reftobase::RefHolder<edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >"), typeid(::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >), sizeof(::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::VIRTUAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("ClassVersion"), ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >::Class_Version())
  .AddProperty(Reflex::Literal("o_name"), "edm::reftobase::RefHolder<reco::BasicJetRef>")
  .AddBase(type_11851, ::Reflex::BaseOffset< ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >, ::edm::reftobase::RefHolderBase >::Get(), ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_38047, type_38048), Reflex::Literal("operator="), operator_33692, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_38048), Reflex::Literal("RefHolder"), constructor_33693, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("RefHolder"), constructor_33694, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_33246), Reflex::Literal("RefHolder"), constructor_33695, 0, "ref", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~RefHolder"), destructor_33697, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::DESTRUCTOR )
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_21539, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getBasesTable"), method_x133, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__reftobase__RefHolder_edm__Ref_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__reftobase__RefHolder_edm__Ref_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s_s__funcmem_bld);
}

//------Delayed data member builder for class RefHolder<edm::Ref<std::vector<reco::BasicJet, std::allocator<reco::BasicJet> >, reco::BasicJet, edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet, std::allocator<reco::BasicJet> >, reco::BasicJet> > > -------------------
void __edm__reftobase__RefHolder_edm__Ref_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_4742, Reflex::Literal("ref_"), OffsetOf(__shadow__::__edm__reftobase__RefHolder_edm__Ref_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s_s_, ref_), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class RefHolder<edm::Ref<std::vector<reco::BasicJet, std::allocator<reco::BasicJet> >, reco::BasicJet, edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet, std::allocator<reco::BasicJet> >, reco::BasicJet> > > -------------------
void __edm__reftobase__RefHolder_edm__Ref_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_38047), Reflex::Literal("swap"), method_33696, 0, "other", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_19716), Reflex::Literal("clone"), method_33698, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4689), Reflex::Literal("id"), method_33699, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2096), Reflex::Literal("key"), method_33700, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574, type_35796), Reflex::Literal("isEqualTo"), method_33701, 0, "rhs", ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574, type_19718, type_10023), Reflex::Literal("fillRefIfMyTypeMatches"), method_33702, 0, "fillme;msg", ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_33246), Reflex::Literal("getRef"), method_33703, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_33246), Reflex::Literal("setRef"), method_33704, 0, "r", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2720), Reflex::Literal("makeVectorHolder"), method_33705, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_18571), Reflex::Literal("productGetter"), method_33706, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("hasProductCache"), method_33707, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3933), Reflex::Literal("product"), method_33708, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("isAvailable"), method_33709, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_231), Reflex::Literal("Class_Version"), method_33710, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC);
}
//------Stub functions for class Holder<reco::Jet,edm::Ref<std::vector<reco::BasicJet, std::allocator<reco::BasicJet> >, reco::BasicJet, edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet, std::allocator<reco::BasicJet> >, reco::BasicJet> > > -------------------------------
static void constructor_33723( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >();
  else ::new(mem) ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >();
}

static void constructor_33724( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >(*(const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)arg[0]);
  else ::new(mem) ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >(*(const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)arg[0]);
}

static void constructor_33725( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >(*(const ::edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)arg[0]);
  else ::new(mem) ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >(*(const ::edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> >*)arg[0]);
}

static  void operator_33726( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->operator=)(*(const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)arg[0]);
  else   (((::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->operator=)(*(const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)arg[0]);
}

static  void method_33727( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->swap)(*(::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)arg[0]);
}

static void destructor_33728(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >::~Holder)();
}
static  void method_33729( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->clone)());
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->clone)();
}

static  void method_33730( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->getPtr)());
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->getPtr)();
}

static  void method_33731( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::ProductID)((((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->id)());
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->id)();
}

static  void method_33732( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (size_t)((((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->key)());
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->key)();
}

static  void method_33733( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->isEqualTo)(*(const ::edm::reftobase::BaseHolder<reco::Jet>*)arg[0]));
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->isEqualTo)(*(const ::edm::reftobase::BaseHolder<reco::Jet>*)arg[0]);
}

static  void method_33734( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->getRef)();
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->getRef)();
}

static  void method_33735( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->fillRefIfMyTypeMatches)(*(::edm::reftobase::RefHolderBase*)arg[0],
    *(::std::basic_string<char>*)arg[1]));
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->fillRefIfMyTypeMatches)(*(::edm::reftobase::RefHolderBase*)arg[0],
    *(::std::basic_string<char>*)arg[1]);
}

static  void method_33736( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::auto_ptr<edm::reftobase::RefHolderBase>)((((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->holder)());
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->holder)();
}

static  void method_33737( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::auto_ptr<edm::reftobase::BaseVectorHolder<reco::Jet> >)((((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->makeVectorHolder)());
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->makeVectorHolder)();
}

static  void method_33738( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::auto_ptr<edm::reftobase::RefVectorHolderBase>)((((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->makeVectorBaseHolder)());
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->makeVectorBaseHolder)();
}

static  void method_33739( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->productGetter)());
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->productGetter)();
}

static  void method_33740( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->hasProductCache)());
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->hasProductCache)();
}

static  void method_33741( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->product)());
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->product)();
}

static  void method_33742( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->isAvailable)());
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->isAvailable)();
}

static  void method_33743( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (short)((((::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->Class_Version)());
  else   (((::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >*)o)->Class_Version)();
}

static void method_newdel_21545( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

static void method_x135( void* retaddr, void*, const std::vector<void*>&, void*)
{
  typedef std::vector<std::pair< ::Reflex::Base, int> > Bases_t;
  static Bases_t s_bases;
  if ( !s_bases.size() ) {
    s_bases.push_back(std::make_pair(::Reflex::Base( ::Reflex::TypeBuilder(Reflex::Literal("edm::reftobase::BaseHolder<reco::Jet>")), ::Reflex::BaseOffset< ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >,::edm::reftobase::BaseHolder<reco::Jet> >::Get(),::Reflex::PUBLIC), 0));
  }
  if (retaddr) *(Bases_t**)retaddr = &s_bases;
}

//------Dictionary for class Holder<reco::Jet,edm::Ref<std::vector<reco::BasicJet, std::allocator<reco::BasicJet> >, reco::BasicJet, edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet, std::allocator<reco::BasicJet> >, reco::BasicJet> > > -------------------------------
void __edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s_s__db_datamem(Reflex::Class*);
void __edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s_s__datamem_bld(&__edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s_s__funcmem_bld(&__edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s_s__db_funcmem);
void __edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >"), typeid(::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >), sizeof(::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::VIRTUAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("ClassVersion"), ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >::Class_Version())
  .AddProperty(Reflex::Literal("o_name"), "edm::reftobase::Holder<reco::Jet, reco::BasicJetRef>")
  .AddBase(type_21535, ::Reflex::BaseOffset< ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > >, ::edm::reftobase::BaseHolder<reco::Jet> >::Get(), ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("Holder"), constructor_33723, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_38053), Reflex::Literal("Holder"), constructor_33724, 0, "other", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_33246), Reflex::Literal("Holder"), constructor_33725, 0, "r", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~Holder"), destructor_33728, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::DESTRUCTOR )
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_21545, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getBasesTable"), method_x135, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s_s__funcmem_bld);
}

//------Delayed data member builder for class Holder<reco::Jet,edm::Ref<std::vector<reco::BasicJet, std::allocator<reco::BasicJet> >, reco::BasicJet, edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet, std::allocator<reco::BasicJet> >, reco::BasicJet> > > -------------------
void __edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_4742, Reflex::Literal("ref_"), OffsetOf(__shadow__::__edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s_s_, ref_), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class Holder<reco::Jet,edm::Ref<std::vector<reco::BasicJet, std::allocator<reco::BasicJet> >, reco::BasicJet, edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet, std::allocator<reco::BasicJet> >, reco::BasicJet> > > -------------------
void __edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_38054, type_38053), Reflex::Literal("operator="), operator_33726, 0, "rhs", ::Reflex::PUBLIC | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_680, type_38054), Reflex::Literal("swap"), method_33727, 0, "other", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_33982), Reflex::Literal("clone"), method_33729, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_33988), Reflex::Literal("getPtr"), method_33730, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4689), Reflex::Literal("id"), method_33731, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2096), Reflex::Literal("key"), method_33732, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574, type_38041), Reflex::Literal("isEqualTo"), method_33733, 0, "rhs", ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_33246), Reflex::Literal("getRef"), method_33734, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574, type_19718, type_10023), Reflex::Literal("fillRefIfMyTypeMatches"), method_33735, 0, "fillme;msg", ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2722), Reflex::Literal("holder"), method_33736, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2721), Reflex::Literal("makeVectorHolder"), method_33737, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2720), Reflex::Literal("makeVectorBaseHolder"), method_33738, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_18571), Reflex::Literal("productGetter"), method_33739, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("hasProductCache"), method_33740, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3933), Reflex::Literal("product"), method_33741, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1574), Reflex::Literal("isAvailable"), method_33742, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_231), Reflex::Literal("Class_Version"), method_33743, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC);
}
//------Stub functions for class Key<edm::RefProd<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> > > > -------------------------------
static void destructor_33898(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::helpers::Key<edm::RefProd<std::vector<reco::CaloJet> > >*)o)->::edm::helpers::Key<edm::RefProd<std::vector<reco::CaloJet> > >::~Key)();
}
static  void operator_33899( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::helpers::Key<edm::RefProd<std::vector<reco::CaloJet> > >*)o)->operator=)(*(const ::edm::helpers::Key<edm::RefProd<std::vector<reco::CaloJet> > >*)arg[0]);
  else   (((::edm::helpers::Key<edm::RefProd<std::vector<reco::CaloJet> > >*)o)->operator=)(*(const ::edm::helpers::Key<edm::RefProd<std::vector<reco::CaloJet> > >*)arg[0]);
}

static void constructor_33900( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::helpers::Key<edm::RefProd<std::vector<reco::CaloJet> > >(*(const ::edm::helpers::Key<edm::RefProd<std::vector<reco::CaloJet> > >*)arg[0]);
  else ::new(mem) ::edm::helpers::Key<edm::RefProd<std::vector<reco::CaloJet> > >(*(const ::edm::helpers::Key<edm::RefProd<std::vector<reco::CaloJet> > >*)arg[0]);
}

static void constructor_33901( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::helpers::Key<edm::RefProd<std::vector<reco::CaloJet> > >();
  else ::new(mem) ::edm::helpers::Key<edm::RefProd<std::vector<reco::CaloJet> > >();
}

static void constructor_33902( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::helpers::Key<edm::RefProd<std::vector<reco::CaloJet> > >(*(const ::edm::RefProd<std::vector<reco::CaloJet> >*)arg[0]);
  else ::new(mem) ::edm::helpers::Key<edm::RefProd<std::vector<reco::CaloJet> > >(*(const ::edm::RefProd<std::vector<reco::CaloJet> >*)arg[0]);
}

static void method_newdel_21742( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::helpers::Key<edm::RefProd<std::vector<reco::CaloJet> > > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::helpers::Key<edm::RefProd<std::vector<reco::CaloJet> > > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::helpers::Key<edm::RefProd<std::vector<reco::CaloJet> > > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::helpers::Key<edm::RefProd<std::vector<reco::CaloJet> > > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::helpers::Key<edm::RefProd<std::vector<reco::CaloJet> > > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class Key<edm::RefProd<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> > > > -------------------------------
void __edm__helpers__Key_edm__RefProd_std__vector_reco__CaloJet_s_s__db_datamem(Reflex::Class*);
void __edm__helpers__Key_edm__RefProd_std__vector_reco__CaloJet_s_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__helpers__Key_edm__RefProd_std__vector_reco__CaloJet_s_s__datamem_bld(&__edm__helpers__Key_edm__RefProd_std__vector_reco__CaloJet_s_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__helpers__Key_edm__RefProd_std__vector_reco__CaloJet_s_s__funcmem_bld(&__edm__helpers__Key_edm__RefProd_std__vector_reco__CaloJet_s_s__db_funcmem);
void __edm__helpers__Key_edm__RefProd_std__vector_reco__CaloJet_s_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::helpers::Key<edm::RefProd<std::vector<reco::CaloJet> > >"), typeid(::edm::helpers::Key<edm::RefProd<std::vector<reco::CaloJet> > >), sizeof(::edm::helpers::Key<edm::RefProd<std::vector<reco::CaloJet> > >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::STRUCT)
  .AddProperty(Reflex::Literal("o_name"), "edm::helpers::Key<edm::RefProd<reco::CaloJetCollection > >")
  .AddTypedef(type_4709, Reflex::Literal("edm::helpers::Key<edm::RefProd<std::vector<reco::CaloJet> > >::key_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~Key"), destructor_33898, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::DESTRUCTOR )
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_38073, type_38074), Reflex::Literal("operator="), operator_33899, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_38074), Reflex::Literal("Key"), constructor_33900, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("Key"), constructor_33901, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_33974), Reflex::Literal("Key"), constructor_33902, 0, "k", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_21742, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__helpers__Key_edm__RefProd_std__vector_reco__CaloJet_s_s__datamem_bld);
}

//------Delayed data member builder for class Key<edm::RefProd<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> > > > -------------------
void __edm__helpers__Key_edm__RefProd_std__vector_reco__CaloJet_s_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_4709, Reflex::Literal("key"), OffsetOf(__shadow__::__edm__helpers__Key_edm__RefProd_std__vector_reco__CaloJet_s_s_, key), ::Reflex::PUBLIC);
}
//------Delayed function member builder for class Key<edm::RefProd<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> > > > -------------------
void __edm__helpers__Key_edm__RefProd_std__vector_reco__CaloJet_s_s__db_funcmem(Reflex::Class*) {

}
namespace {
  struct Dictionaries {
    Dictionaries() {
      Reflex::Instance initialize_reflex;
      __reco__JPTJet_dict(); 
      __std__vector_reco__JPTJet__dict(); 
      __reco__PFJet_dict(); 
      __edm__Ref_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s__dict(); 
      __std__vector_edm__Ref_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s__dict(); 
      __std__vector_reco__PFJet__dict(); 
      __reco__BasicJet_dict(); 
      __std__vector_reco__BasicJet__dict(); 
      __reco__GenJet_dict(); 
      __std__vector_reco__GenJet__dict(); 
      __reco__CaloJet_dict(); 
      __edm__Ref_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s__dict(); 
      __std__vector_edm__Ref_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s__dict(); 
      __std__vector_reco__CaloJet__dict(); 
      __edm__FwdPtr_reco__PFJet__dict(); 
      __edm__FwdPtr_reco__BasicJet__dict(); 
      __edm__FwdPtr_reco__GenJet__dict(); 
      __edm__FwdPtr_reco__CaloJet__dict(); 
      __edm__RefVector_std__vector_reco__JPTJet__reco__JPTJet_edm__refhelper__FindUsingAdvance_std__vector_reco__JPTJet__reco__JPTJet_s__dict(); 
      __edm__RefVector_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s__dict(); 
      __edm__RefVector_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s__dict(); 
      __edm__RefVector_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s__dict(); 
      __edm__RefVector_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s__dict(); 
      __edm__Wrapper_std__vector_reco__JPTJet_s__dict(); 
      __edm__Wrapper_std__vector_reco__PFJet_s__dict(); 
      __edm__Wrapper_std__vector_reco__BasicJet_s__dict(); 
      __edm__Wrapper_std__vector_reco__GenJet_s__dict(); 
      __edm__Wrapper_std__vector_reco__CaloJet_s__dict(); 
      __edm__FwdRef_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s__dict(); 
      __edm__FwdRef_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s__dict(); 
      __edm__FwdRef_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s__dict(); 
      __edm__FwdRef_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s__dict(); 
      __edm__RefProd_std__vector_reco__JPTJet_s__dict(); 
      __edm__RefProd_std__vector_reco__PFJet_s__dict(); 
      __edm__RefProd_std__vector_reco__BasicJet_s__dict(); 
      __edm__RefProd_std__vector_reco__GenJet_s__dict(); 
      __edm__RefProd_std__vector_reco__CaloJet_s__dict(); 
      __edm__Ref_std__vector_reco__JPTJet__reco__JPTJet_edm__refhelper__FindUsingAdvance_std__vector_reco__JPTJet__reco__JPTJet_s__dict(); 
      __edm__Ref_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s__dict(); 
      __edm__Ref_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s__dict(); 
      __reco__Jet_dict(); 
      __reco__JetTrackMatch_std__vector_reco__JPTJet_s__dict(); 
      __reco__JetTrackMatch_std__vector_reco__PFJet_s__dict(); 
      __reco__JetTrackMatch_std__vector_reco__BasicJet_s__dict(); 
      __reco__JetTrackMatch_std__vector_reco__GenJet_s__dict(); 
      __reco__JetTrackMatch_std__vector_reco__CaloJet_s__dict(); 
      __edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__JPTJet__reco__JPTJet_edm__refhelper__FindUsingAdvance_std__vector_reco__JPTJet__reco__JPTJet_s_s__dict(); 
      __edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s__dict(); 
      __edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s_s__dict(); 
      __edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s_s__dict(); 
      __edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s__dict(); 
      __reco__PFJet__Specific_dict(); 
      __reco__CaloJet__Specific_dict(); 
      __reco__Jet__EtaPhiMoments_dict(); 
      __reco__GenJet__Specific_dict(); 
      __reco__JPTJet__Specific_dict(); 
      __std__vector_edm__FwdPtr_reco__BasicJet_s__dict(); 
      __std__vector_edm__FwdRef_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s_s__dict(); 
      __std__vector_edm__FwdPtr_reco__GenJet_s__dict(); 
      __std__vector_edm__FwdRef_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s_s__dict(); 
      __std__vector_edm__FwdPtr_reco__PFJet_s__dict(); 
      __std__vector_edm__FwdPtr_reco__CaloJet_s__dict(); 
      __std__vector_edm__FwdRef_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s__dict(); 
      __std__vector_edm__FwdRef_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s__dict(); 
      __std__vector_edm__RefVector_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s__dict(); 
      __std__vector_edm__RefVector_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s__dict(); 
      __edm__Wrapper_edm__RefVector_std__vector_reco__JPTJet__reco__JPTJet_edm__refhelper__FindUsingAdvance_std__vector_reco__JPTJet__reco__JPTJet_s_s__dict(); 
      __edm__Wrapper_std__vector_edm__RefVector_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s_s__dict(); 
      __edm__Wrapper_std__vector_edm__FwdPtr_reco__PFJet_s_s__dict(); 
      __edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s_s__dict(); 
      __edm__Wrapper_edm__RefVector_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s__dict(); 
      __edm__Wrapper_std__vector_edm__FwdPtr_reco__BasicJet_s_s__dict(); 
      __edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s_s_s__dict(); 
      __edm__Wrapper_edm__RefVector_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s_s__dict(); 
      __edm__Wrapper_std__vector_edm__FwdPtr_reco__GenJet_s_s__dict(); 
      __edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s_s_s__dict(); 
      __edm__Wrapper_edm__RefVector_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s_s__dict(); 
      __edm__Wrapper_std__vector_edm__RefVector_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s_s__dict(); 
      __edm__Wrapper_std__vector_edm__FwdPtr_reco__CaloJet_s_s__dict(); 
      __edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s_s__dict(); 
      __edm__Wrapper_edm__RefVector_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s__dict(); 
      __edm__AssociationMap_edm__OneToMany_std__vector_reco__JPTJet__std__vector_reco__Track__unsignedsint_s__dict(); 
      __edm__AssociationMap_edm__OneToMany_std__vector_reco__CaloJet__std__vector_reco__Track__unsignedsint_s__dict(); 
      __edm__helpers__KeyVal_edm__RefProd_std__vector_reco__JPTJet_s__edm__RefProd_std__vector_reco__Track_s_s__dict(); 
      __edm__helpers__KeyVal_edm__RefProd_std__vector_reco__CaloJet_s__edm__RefProd_std__vector_reco__Track_s_s__dict(); 
      __edm__reftobase__RefVectorHolder_edm__RefVector_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s__dict(); 
      __edm__reftobase__RefHolder_edm__Ref_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s_s__dict(); 
      __edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__BasicJet__reco__BasicJet_edm__refhelper__FindUsingAdvance_std__vector_reco__BasicJet__reco__BasicJet_s_s__dict(); 
      __edm__helpers__Key_edm__RefProd_std__vector_reco__CaloJet_s_s__dict(); 
    }
    ~Dictionaries() {
      type_7528.Unload(); // class reco::JPTJet 
      type_2968.Unload(); // class std::vector<reco::JPTJet> 
      type_7463.Unload(); // class reco::PFJet 
      type_4740.Unload(); // class edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > 
      type_2970.Unload(); // class std::vector<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > 
      type_2971.Unload(); // class std::vector<reco::PFJet> 
      type_7564.Unload(); // class reco::BasicJet 
      type_2983.Unload(); // class std::vector<reco::BasicJet> 
      type_7512.Unload(); // class reco::GenJet 
      type_2988.Unload(); // class std::vector<reco::GenJet> 
      type_7473.Unload(); // class reco::CaloJet 
      type_4744.Unload(); // class edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > 
      type_2990.Unload(); // class std::vector<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > 
      type_2991.Unload(); // class std::vector<reco::CaloJet> 
      type_4484.Unload(); // class edm::FwdPtr<reco::PFJet> 
      type_4485.Unload(); // class edm::FwdPtr<reco::BasicJet> 
      type_4486.Unload(); // class edm::FwdPtr<reco::GenJet> 
      type_4487.Unload(); // class edm::FwdPtr<reco::CaloJet> 
      type_4491.Unload(); // class edm::RefVector<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > 
      type_4496.Unload(); // class edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > 
      type_4506.Unload(); // class edm::RefVector<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > 
      type_4511.Unload(); // class edm::RefVector<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > 
      type_4516.Unload(); // class edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > 
      type_4537.Unload(); // class edm::Wrapper<std::vector<reco::JPTJet> > 
      type_4542.Unload(); // class edm::Wrapper<std::vector<reco::PFJet> > 
      type_4549.Unload(); // class edm::Wrapper<std::vector<reco::BasicJet> > 
      type_4553.Unload(); // class edm::Wrapper<std::vector<reco::GenJet> > 
      type_4558.Unload(); // class edm::Wrapper<std::vector<reco::CaloJet> > 
      type_4571.Unload(); // class edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > 
      type_4573.Unload(); // class edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > 
      type_4574.Unload(); // class edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > 
      type_4575.Unload(); // class edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > 
      type_4704.Unload(); // class edm::RefProd<std::vector<reco::JPTJet> > 
      type_4705.Unload(); // class edm::RefProd<std::vector<reco::PFJet> > 
      type_4707.Unload(); // class edm::RefProd<std::vector<reco::BasicJet> > 
      type_4708.Unload(); // class edm::RefProd<std::vector<reco::GenJet> > 
      type_4709.Unload(); // class edm::RefProd<std::vector<reco::CaloJet> > 
      type_4738.Unload(); // class edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > 
      type_4742.Unload(); // class edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > 
      type_4743.Unload(); // class edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > 
      type_7485.Unload(); // class reco::Jet 
      type_7498.Unload(); // class reco::JetTrackMatch<std::vector<reco::JPTJet> > 
      type_7499.Unload(); // class reco::JetTrackMatch<std::vector<reco::PFJet> > 
      type_7501.Unload(); // class reco::JetTrackMatch<std::vector<reco::BasicJet> > 
      type_7502.Unload(); // class reco::JetTrackMatch<std::vector<reco::GenJet> > 
      type_7503.Unload(); // class reco::JetTrackMatch<std::vector<reco::CaloJet> > 
      type_21546.Unload(); // class edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > > 
      type_21547.Unload(); // class edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > 
      type_21549.Unload(); // class edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > > 
      type_21550.Unload(); // class edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > > 
      type_21551.Unload(); // class edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > 
      type_24150.Unload(); // class reco::PFJet::Specific 
      type_24250.Unload(); // class reco::CaloJet::Specific 
      type_24317.Unload(); // class reco::Jet::EtaPhiMoments 
      type_24675.Unload(); // class reco::GenJet::Specific 
      type_24786.Unload(); // class reco::JPTJet::Specific 
      type_2981.Unload(); // class std::vector<edm::FwdPtr<reco::BasicJet> > 
      type_2982.Unload(); // class std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > > 
      type_2986.Unload(); // class std::vector<edm::FwdPtr<reco::GenJet> > 
      type_2987.Unload(); // class std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > > 
      type_2973.Unload(); // class std::vector<edm::FwdPtr<reco::PFJet> > 
      type_2993.Unload(); // class std::vector<edm::FwdPtr<reco::CaloJet> > 
      type_2974.Unload(); // class std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > 
      type_2994.Unload(); // class std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > 
      type_2969.Unload(); // class std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > 
      type_2989.Unload(); // class std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > 
      type_4536.Unload(); // class edm::Wrapper<edm::RefVector<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > > 
      type_4538.Unload(); // class edm::Wrapper<std::vector<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > > 
      type_4539.Unload(); // class edm::Wrapper<std::vector<edm::FwdPtr<reco::PFJet> > > 
      type_4540.Unload(); // class edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > > 
      type_4541.Unload(); // class edm::Wrapper<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > 
      type_4546.Unload(); // class edm::Wrapper<std::vector<edm::FwdPtr<reco::BasicJet> > > 
      type_4547.Unload(); // class edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > > > 
      type_4548.Unload(); // class edm::Wrapper<edm::RefVector<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > > 
      type_4550.Unload(); // class edm::Wrapper<std::vector<edm::FwdPtr<reco::GenJet> > > 
      type_4551.Unload(); // class edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > > > 
      type_4552.Unload(); // class edm::Wrapper<edm::RefVector<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > > 
      type_4554.Unload(); // class edm::Wrapper<std::vector<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > > 
      type_4555.Unload(); // class edm::Wrapper<std::vector<edm::FwdPtr<reco::CaloJet> > > 
      type_4556.Unload(); // class edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > > 
      type_4557.Unload(); // class edm::Wrapper<edm::RefVector<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > 
      type_4563.Unload(); // class edm::AssociationMap<edm::OneToMany<std::vector<reco::JPTJet>,std::vector<reco::Track>,unsigned int> > 
      type_4568.Unload(); // class edm::AssociationMap<edm::OneToMany<std::vector<reco::CaloJet>,std::vector<reco::Track>,unsigned int> > 
      type_19975.Unload(); // class edm::helpers::KeyVal<edm::RefProd<std::vector<reco::JPTJet> >,edm::RefProd<std::vector<reco::Track> > > 
      type_20100.Unload(); // class edm::helpers::KeyVal<edm::RefProd<std::vector<reco::CaloJet> >,edm::RefProd<std::vector<reco::Track> > > 
      type_21538.Unload(); // class edm::reftobase::RefVectorHolder<edm::RefVector<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > 
      type_21539.Unload(); // class edm::reftobase::RefHolder<edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > > 
      type_21545.Unload(); // class edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::BasicJet>,reco::BasicJet,edm::refhelper::FindUsingAdvance<std::vector<reco::BasicJet>,reco::BasicJet> > > 
      type_21742.Unload(); // class edm::helpers::Key<edm::RefProd<std::vector<reco::CaloJet> > > 
    }
  };
  static Dictionaries instance;
}
} // unnamed namespace
