// Generated at Tue Dec 20 22:57:10 2016. Do not modify it

/*
GCC-XML version 0.9.0
Configuration settings:
  GCCXML_CONFIG="/afs/cern.ch/cms/slc6_amd64_gcc481/external/gccxml/0.9.0-20140124-0/share/gccxml-0.9/gccxml_config"
  GCCXML_COMPILER="/afs/cern.ch/cms/slc6_amd64_gcc481/external/gcc/4.8.1/bin/c++"
  GCCXML_CXXFLAGS=""
  GCCXML_EXECUTABLE="/afs/cern.ch/cms/slc6_amd64_gcc481/external/gccxml/0.9.0-20140124-0/bin/gccxml_cc1plus"
  GCCXML_CPP="/afs/cern.ch/cms/slc6_amd64_gcc481/external/gccxml/0.9.0-20140124-0/bin/gccxml_cc1plus"
  GCCXML_FLAGS="-D__DBL_MIN_EXP__='(-1021)' -D__UINT_LEAST16_MAX__='65535' -D__ATOMIC_ACQUIRE='2' -D__FLT_MIN__='1.17549435082228750797e-38F' -D__UINT_LEAST8_TYPE__='unsigned char' -D__INTMAX_C(c)='c ## L' -D__CHAR_BIT__='8' -D__UINT8_MAX__='255' -D__WINT_MAX__='4294967295U' -D__ORDER_LITTLE_ENDIAN__='1234' -D__SIZE_MAX__='18446744073709551615UL' -D__WCHAR_MAX__='2147483647' -D__GCC_HAVE_SYNC_COMPARE_AND_SWAP_1='1' -D__GCC_HAVE_SYNC_COMPARE_AND_SWAP_2='1' -D__GCC_HAVE_SYNC_COMPARE_AND_SWAP_4='1' -D__DBL_DENORM_MIN__='double(4.94065645841246544177e-324L)' -D__GCC_HAVE_SYNC_COMPARE_AND_SWAP_8='1' -D__GCC_ATOMIC_CHAR_LOCK_FREE='2' -D__FLT_EVAL_METHOD__='0' -D__unix__='1' -D__GCC_ATOMIC_CHAR32_T_LOCK_FREE='2' -D__x86_64='1' -D__UINT_FAST64_MAX__='18446744073709551615UL' -D__SIG_ATOMIC_TYPE__='int' -D__DBL_MIN_10_EXP__='(-307)' -D__FINITE_MATH_ONLY__='0' -D__GNUC_PATCHLEVEL__='1' -D__UINT_FAST8_MAX__='255' -D__DEC64_MAX_EXP__='385' -D__INT8_C(c)='c' -D__UINT_LEAST64_MAX__='18446744073709551615UL' -D__SHRT_MAX__='32767' -D__LDBL_MAX__='1.18973149535723176502e+4932L' -D__UINT_LEAST8_MAX__='255' -D__GCC_ATOMIC_BOOL_LOCK_FREE='2' -D__UINTMAX_TYPE__='long unsigned int' -D__linux='1' -D__DEC32_EPSILON__='1E-6DF' -D__unix='1' -D__UINT32_MAX__='4294967295U' -D__LDBL_MAX_EXP__='16384' -D__WINT_MIN__='0U' -D__linux__='1' -D__SCHAR_MAX__='127' -D__WCHAR_MIN__='(-__WCHAR_MAX__ - 1)' -D__INT64_C(c)='c ## L' -D__DBL_DIG__='15' -D__GCC_ATOMIC_POINTER_LOCK_FREE='2' -D__SIZEOF_INT__='4' -D__SIZEOF_POINTER__='8' -D__GCC_ATOMIC_CHAR16_T_LOCK_FREE='2' -D__USER_LABEL_PREFIX__='' -D__STDC_HOSTED__='1' -D__LDBL_HAS_INFINITY__='1' -D__FLT_EPSILON__='1.19209289550781250000e-7F' -D__GXX_WEAK__='1' -D__LDBL_MIN__='3.36210314311209350626e-4932L' -D__DEC32_MAX__='9.999999E96DF' -D__INT32_MAX__='2147483647' -D__SIZEOF_LONG__='8' -D__UINT16_C(c)='c' -D__DECIMAL_DIG__='21' -D__gnu_linux__='1' -D__LDBL_HAS_QUIET_NAN__='1' -D__GNUC__='4' -D__GXX_RTTI='1' -D__MMX__='1' -D__FLT_HAS_DENORM__='1' -D__SIZEOF_LONG_DOUBLE__='16' -D__BIGGEST_ALIGNMENT__='16' -D__DBL_MAX__='double(1.79769313486231570815e+308L)' -D__INT_FAST32_MAX__='9223372036854775807L' -D__DBL_HAS_INFINITY__='1' -D__INT64_MAX__='9223372036854775807L' -D__DEC32_MIN_EXP__='(-94)' -D__INT_FAST16_TYPE__='long int' -D__LDBL_HAS_DENORM__='1' -D__cplusplus='199711L' -D__DEC128_MAX__='9.999999999999999999999999999999999E6144DL' -D__INT_LEAST32_MAX__='2147483647' -D__DEC32_MIN__='1E-95DF' -D__DEPRECATED='1' -D__DBL_MAX_EXP__='1024' -D__DEC128_EPSILON__='1E-33DL' -D__SSE2_MATH__='1' -D__ATOMIC_HLE_RELEASE='131072' -D__PTRDIFF_MAX__='9223372036854775807L' -D__amd64='1' -D__ATOMIC_HLE_ACQUIRE='65536' -D__GNUG__='4' -D__LONG_LONG_MAX__='9223372036854775807LL' -D__SIZEOF_SIZE_T__='8' -D__SIZEOF_WINT_T__='4' -D__GCC_HAVE_DWARF2_CFI_ASM='1' -D__GXX_ABI_VERSION='999999' -D__FLT_MIN_EXP__='(-125)' -D__INT_FAST64_TYPE__='long int' -D__DBL_MIN__='double(2.22507385850720138309e-308L)' -D__LP64__='1' -D__DECIMAL_BID_FORMAT__='1' -D__DEC128_MIN__='1E-6143DL' -D__REGISTER_PREFIX__='' -D__UINT16_MAX__='65535' -D__DBL_HAS_DENORM__='1' -D__UINT8_TYPE__='unsigned char' -D__NO_INLINE__='1' -D__FLT_MANT_DIG__='24' -D__VERSION__='"4.8.1"' -D__UINT64_C(c)='c ## UL' -D__GCC_ATOMIC_INT_LOCK_FREE='2' -D__FLOAT_WORD_ORDER__='__ORDER_LITTLE_ENDIAN__' -D__INT32_C(c)='c' -D__DEC64_EPSILON__='1E-15DD' -D__ORDER_PDP_ENDIAN__='3412' -D__DEC128_MIN_EXP__='(-6142)' -D__INT_FAST32_TYPE__='long int' -D__UINT_LEAST16_TYPE__='short unsigned int' -Dunix='1' -D__INT16_MAX__='32767' -D__SIZE_TYPE__='long unsigned int' -D__UINT64_MAX__='18446744073709551615UL' -D__INT8_TYPE__='signed char' -D__ELF__='1' -D__FLT_RADIX__='2' -D__INT_LEAST16_TYPE__='short int' -D__LDBL_EPSILON__='1.08420217248550443401e-19L' -D__UINTMAX_C(c)='c ## UL' -D__k8='1' -D__SIG_ATOMIC_MAX__='2147483647' -D__GCC_ATOMIC_WCHAR_T_LOCK_FREE='2' -D__SIZEOF_PTRDIFF_T__='8' -D__x86_64__='1' -D__DEC32_SUBNORMAL_MIN__='0.000001E-95DF' -D__INT_FAST16_MAX__='9223372036854775807L' -D__UINT_FAST32_MAX__='18446744073709551615UL' -D__UINT_LEAST64_TYPE__='long unsigned int' -D__FLT_HAS_QUIET_NAN__='1' -D__FLT_MAX_10_EXP__='38' -D__LONG_MAX__='9223372036854775807L' -D__DEC128_SUBNORMAL_MIN__='0.000000000000000000000000000000001E-6143DL' -D__FLT_HAS_INFINITY__='1' -D__UINT_FAST16_TYPE__='long unsigned int' -D__DEC64_MAX__='9.999999999999999E384DD' -D__CHAR16_TYPE__='short unsigned int' -D__PRAGMA_REDEFINE_EXTNAME='1' -D__INT_LEAST16_MAX__='32767' -D__DEC64_MANT_DIG__='16' -D__UINT_LEAST32_MAX__='4294967295U' -D__GCC_ATOMIC_LONG_LOCK_FREE='2' -D__INT_LEAST64_TYPE__='long int' -D__INT16_TYPE__='short int' -D__INT_LEAST8_TYPE__='signed char' -D__DEC32_MAX_EXP__='97' -D__INT_FAST8_MAX__='127' -D__INTPTR_MAX__='9223372036854775807L' -Dlinux='1' -D__SSE2__='1' -D__EXCEPTIONS='1' -D__LDBL_MANT_DIG__='64' -D__DBL_HAS_QUIET_NAN__='1' -D__SIG_ATOMIC_MIN__='(-__SIG_ATOMIC_MAX__ - 1)' -D__code_model_small__='1' -D__k8__='1' -D__INTPTR_TYPE__='long int' -D__UINT16_TYPE__='short unsigned int' -D__WCHAR_TYPE__='int' -D__SIZEOF_FLOAT__='4' -D__UINTPTR_MAX__='18446744073709551615UL' -D__DEC64_MIN_EXP__='(-382)' -D__INT_FAST64_MAX__='9223372036854775807L' -D__GCC_ATOMIC_TEST_AND_SET_TRUEVAL='1' -D__FLT_DIG__='6' -D__UINT_FAST64_TYPE__='long unsigned int' -D__INT_MAX__='2147483647' -D__amd64__='1' -D__INT64_TYPE__='long int' -D__FLT_MAX_EXP__='128' -D__ORDER_BIG_ENDIAN__='4321' -D__DBL_MANT_DIG__='53' -D__INT_LEAST64_MAX__='9223372036854775807L' -D__DEC64_MIN__='1E-383DD' -D__WINT_TYPE__='unsigned int' -D__UINT_LEAST32_TYPE__='unsigned int' -D__SIZEOF_SHORT__='2' -D__SSE__='1' -D__LDBL_MIN_EXP__='(-16381)' -D__INT_LEAST8_MAX__='127' -D__SIZEOF_INT128__='16' -D__LDBL_MAX_10_EXP__='4932' -D__ATOMIC_RELAXED='0' -D__DBL_EPSILON__='double(2.22044604925031308085e-16L)' -D_LP64='1' -D__UINT8_C(c)='c' -D__INT_LEAST32_TYPE__='int' -D__SIZEOF_WCHAR_T__='4' -D__UINT64_TYPE__='long unsigned int' -D__INT_FAST8_TYPE__='signed char' -D__DBL_DECIMAL_DIG__='17' -D__FXSR__='1' -D__DEC_EVAL_METHOD__='2' -D__UINT32_C(c)='c ## U' -D__INTMAX_MAX__='9223372036854775807L' -D__BYTE_ORDER__='__ORDER_LITTLE_ENDIAN__' -D__FLT_DENORM_MIN__='1.40129846432481707092e-45F' -D__INT8_MAX__='127' -D__UINT_FAST32_TYPE__='long unsigned int' -D__CHAR32_TYPE__='unsigned int' -D__FLT_MAX__='3.40282346638528859812e+38F' -D__INT32_TYPE__='int' -D__SIZEOF_DOUBLE__='8' -D__INTMAX_TYPE__='long int' -D__DEC128_MAX_EXP__='6145' -D__ATOMIC_CONSUME='1' -D__GNUC_MINOR__='8' -D__UINTMAX_MAX__='18446744073709551615UL' -D__DEC32_MANT_DIG__='7' -D__DBL_MAX_10_EXP__='308' -D__LDBL_DENORM_MIN__='3.64519953188247460253e-4951L' -D__INT16_C(c)='c' -D__STDC__='1' -D__PTRDIFF_TYPE__='long int' -D__ATOMIC_SEQ_CST='5' -D__UINT32_TYPE__='unsigned int' -D__UINTPTR_TYPE__='long unsigned int' -D__DEC64_SUBNORMAL_MIN__='0.000000000000001E-383DD' -D__DEC128_MANT_DIG__='34' -D__LDBL_MIN_10_EXP__='(-4931)' -D__SSE_MATH__='1' -D__SIZEOF_LONG_LONG__='8' -D__GCC_ATOMIC_LLONG_LOCK_FREE='2' -D__LDBL_DIG__='18' -D__FLT_DECIMAL_DIG__='9' -D__UINT_FAST16_MAX__='18446744073709551615UL' -D__GNUC_GNU_INLINE__='1' -D__FLT_MIN_10_EXP__='(-37)' -D__GCC_ATOMIC_SHORT_LOCK_FREE='2' -D__UINT_FAST8_TYPE__='unsigned char' -D_GNU_SOURCE='1' -D__ATOMIC_ACQ_REL='4' -D__ATOMIC_RELEASE='3' -iwrapper"/afs/cern.ch/cms/slc6_amd64_gcc481/external/gccxml/0.9.0-20140124-0/share/gccxml-0.9/GCC/4.8" -isystem"/afs/cern.ch/cms/slc6_amd64_gcc481/external/gcc/4.8.1/bin/../lib/gcc/x86_64-redhat-linux-gnu/4.8.1/../../../../include/c++/4.8.1" -isystem"/afs/cern.ch/cms/slc6_amd64_gcc481/external/gcc/4.8.1/bin/../lib/gcc/x86_64-redhat-linux-gnu/4.8.1/../../../../include/c++/4.8.1/x86_64-redhat-linux-gnu" -isystem"/afs/cern.ch/cms/slc6_amd64_gcc481/external/gcc/4.8.1/bin/../lib/gcc/x86_64-redhat-linux-gnu/4.8.1/../../../../include/c++/4.8.1/backward" -isystem"/afs/cern.ch/cms/slc6_amd64_gcc481/external/gcc/4.8.1/bin/../lib/gcc/x86_64-redhat-linux-gnu/4.8.1/include" -isystem"/afs/cern.ch/cms/slc6_amd64_gcc481/external/gcc/4.8.1/bin/../lib/gcc/x86_64-redhat-linux-gnu/4.8.1/include-fixed" -isystem"/usr/local/include" -isystem"/afs/cern.ch/cms/slc6_amd64_gcc481/external/gcc/4.8.1/bin/../lib/gcc/../../include" -isystem"/usr/include" -include "gccxml_builtins.h""
  GCCXML_USER_FLAGS=""
  GCCXML_ROOT="/afs/cern.ch/cms/slc6_amd64_gcc481/external/gccxml/0.9.0-20140124-0/share/gccxml-0.9"

Compiler info:
c++ (GCC) 4.8.1
Copyright (C) 2013 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

*/

#ifdef _WIN32
#pragma warning ( disable : 4786 )
#pragma warning ( disable : 4345 )
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3)) && !defined(__INTEL_COMPILER) 
# pragma GCC diagnostic ignored "-Warray-bounds"
#endif
#include "src/DataFormats/JetReco/src/classes_2.h"
#ifdef CONST
# undef CONST
#endif
#include "Reflex/Builder/ReflexBuilder.h"
#include <typeinfo>

namespace {
  ::Reflex::NamespaceBuilder nsb0( Reflex::Literal("std") );
  ::Reflex::NamespaceBuilder nsb1( Reflex::Literal("edm") );
  ::Reflex::NamespaceBuilder nsb2( Reflex::Literal("reco") );
  ::Reflex::NamespaceBuilder nsb3( Reflex::Literal("edm::reftobase") );
  ::Reflex::NamespaceBuilder nsb4( Reflex::Literal("edm::helpers") );
  ::Reflex::Type type_65 = ::Reflex::TypeBuilder(Reflex::Literal("int"));
  ::Reflex::Type type_352 = ::Reflex::TypeBuilder(Reflex::Literal("long"));
  ::Reflex::Type type_708 = ::Reflex::TypeBuilder(Reflex::Literal("void"));
  ::Reflex::Type type_void = ::Reflex::TypeBuilder(Reflex::Literal("void"));
  ::Reflex::Type type_1593 = ::Reflex::TypeBuilder(Reflex::Literal("bool"));
  ::Reflex::Type type_484 = ::Reflex::TypeBuilder(Reflex::Literal("short"));
  ::Reflex::Type type_913 = ::Reflex::TypeBuilder(Reflex::Literal("float"));
  ::Reflex::Type type_1431 = ::Reflex::TypeBuilder(Reflex::Literal("char"));
  ::Reflex::Type type_101 = ::Reflex::TypeBuilder(Reflex::Literal("double"));
  ::Reflex::Type type_8923 = ::Reflex::TypeBuilder(Reflex::Literal("reco::Jet"));
  ::Reflex::Type type_211 = ::Reflex::TypeBuilder(Reflex::Literal("unsigned int"));
  ::Reflex::Type type_53 = ::Reflex::TypeBuilder(Reflex::Literal("unsigned long"));
  ::Reflex::Type type_8849 = ::Reflex::TypeBuilder(Reflex::Literal("reco::PFJet"));
  ::Reflex::Type type_5697 = ::Reflex::TypeBuilder(Reflex::Literal("edm::RefCore"));
  ::Reflex::Type type_9048 = ::Reflex::TypeBuilder(Reflex::Literal("reco::JPTJet"));
  ::Reflex::Type type_500 = ::Reflex::TypeBuilder(Reflex::Literal("std::type_info"));
  ::Reflex::Type type_5905 = ::Reflex::TypeBuilder(Reflex::Literal("edm::ProductID"));
  ::Reflex::Type type_8938 = ::Reflex::TypeBuilder(Reflex::Literal("reco::TrackJet"));
  ::Reflex::Type type_9176 = ::Reflex::TypeBuilder(Reflex::Literal("reco::BasicJet"));
  ::Reflex::Type type_7116 = ::Reflex::TypeBuilder(Reflex::Literal("reco::Candidate"));
  ::Reflex::Type type_5637 = ::Reflex::TypeBuilder(Reflex::Literal("edm::PtrVectorBase"));
  ::Reflex::Type type_5487 = ::Reflex::TypeBuilder(Reflex::Literal("edm::ValueMap<int>"));
  ::Reflex::Type type_3176 = ::Reflex::TypeBuilder(Reflex::Literal("std::vector<double>"));
  ::Reflex::Type type_9026 = ::Reflex::TypeBuilder(Reflex::Literal("reco::FFTJet<float>"));
  ::Reflex::Type type_5806 = ::Reflex::TypeBuilder(Reflex::Literal("edm::EDProductGetter"));
  ::Reflex::Type type_5268 = ::Reflex::TypeBuilder(Reflex::Literal("edm::RefCoreWithIndex"));
  ::Reflex::Type type_2764 = ::Reflex::TypeBuilder(Reflex::Literal("std::less<unsigned int>"));
  ::Reflex::Type type_2637 = ::Reflex::TypeBuilder(Reflex::Literal("std::basic_string<char>"));
  ::Reflex::Type type_3104 = ::Reflex::TypeBuilder(Reflex::Literal("std::vector<const void*>"));
  ::Reflex::Type type_9014 = ::Reflex::TypeBuilder(Reflex::Literal("reco::FFTJetPileupSummary"));
  ::Reflex::Type type_3106 = ::Reflex::TypeBuilder(Reflex::Literal("std::vector<unsigned int>"));
  ::Reflex::Type type_3105 = ::Reflex::TypeBuilder(Reflex::Literal("std::vector<unsigned long>"));
  ::Reflex::Type type_8920 = ::Reflex::TypeBuilder(Reflex::Literal("reco::DiscretizedEnergyFlow"));
  ::Reflex::Type type_8933 = ::Reflex::TypeBuilder(Reflex::Literal("reco::FFTAnyJet<reco::PFJet>"));
  ::Reflex::Type type_8931 = ::Reflex::TypeBuilder(Reflex::Literal("reco::FFTAnyJet<reco::JPTJet>"));
  ::Reflex::Type type_15132 = ::Reflex::TypeBuilder(Reflex::Literal("edm::reftobase::RefHolderBase"));
  ::Reflex::Type type_8932 = ::Reflex::TypeBuilder(Reflex::Literal("reco::FFTAnyJet<reco::TrackJet>"));
  ::Reflex::Type type_8934 = ::Reflex::TypeBuilder(Reflex::Literal("reco::FFTAnyJet<reco::BasicJet>"));
  ::Reflex::Type type_3109 = ::Reflex::TypeBuilder(Reflex::Literal("std::vector<const reco::PFJet*>"));
  ::Reflex::Type type_4392 = ::Reflex::TypeBuilder(Reflex::Literal("edm::RefVectorBase<unsigned int>"));
  ::Reflex::Type type_5699 = ::Reflex::TypeBuilder(Reflex::Literal("edm::reftobase::RefVectorHolderBase"));
  ::Reflex::Type type_29582 = ::Reflex::TypeBuilder(Reflex::Literal("edm::reftobase::BaseHolder<reco::Jet>"));
  ::Reflex::Type type_5728 = ::Reflex::TypeBuilder(Reflex::Literal("edm::RefProd<std::vector<reco::PFJet> >"));
  ::Reflex::Type type_5781 = ::Reflex::TypeBuilder(Reflex::Literal("edm::Ptr<reco::FFTAnyJet<reco::PFJet> >"));
  ::Reflex::Type type_5450 = ::Reflex::TypeBuilder(Reflex::Literal("edm::Wrapper<reco::FFTJetPileupSummary>"));
  ::Reflex::Type type_2871 = ::Reflex::TypeBuilder(Reflex::Literal("std::auto_ptr<reco::FFTJetPileupSummary>"));
  ::Reflex::Type type_5779 = ::Reflex::TypeBuilder(Reflex::Literal("edm::Ptr<reco::FFTAnyJet<reco::JPTJet> >"));
  ::Reflex::Type type_5451 = ::Reflex::TypeBuilder(Reflex::Literal("edm::Wrapper<reco::DiscretizedEnergyFlow>"));
  ::Reflex::Type type_3129 = ::Reflex::TypeBuilder(Reflex::Literal("std::vector<reco::FFTAnyJet<reco::PFJet> >"));
  ::Reflex::Type type_5307 = ::Reflex::TypeBuilder(Reflex::Literal("edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> >"));
  ::Reflex::Type type_2872 = ::Reflex::TypeBuilder(Reflex::Literal("std::auto_ptr<reco::DiscretizedEnergyFlow>"));
  ::Reflex::Type type_5782 = ::Reflex::TypeBuilder(Reflex::Literal("edm::Ptr<reco::FFTAnyJet<reco::BasicJet> >"));
  ::Reflex::Type type_5780 = ::Reflex::TypeBuilder(Reflex::Literal("edm::Ptr<reco::FFTAnyJet<reco::TrackJet> >"));
  ::Reflex::Type type_3119 = ::Reflex::TypeBuilder(Reflex::Literal("std::vector<reco::FFTAnyJet<reco::JPTJet> >"));
  ::Reflex::Type type_5305 = ::Reflex::TypeBuilder(Reflex::Literal("edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> >"));
  ::Reflex::Type type_2876 = ::Reflex::TypeBuilder(Reflex::Literal("std::auto_ptr<edm::reftobase::RefHolderBase>"));
  ::Reflex::Type type_29583 = ::Reflex::TypeBuilder(Reflex::Literal("edm::reftobase::BaseHolder<reco::Candidate>"));
  ::Reflex::Type type_5306 = ::Reflex::TypeBuilder(Reflex::Literal("edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> >"));
  ::Reflex::Type type_5308 = ::Reflex::TypeBuilder(Reflex::Literal("edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> >"));
  ::Reflex::Type type_3134 = ::Reflex::TypeBuilder(Reflex::Literal("std::vector<reco::FFTAnyJet<reco::BasicJet> >"));
  ::Reflex::Type type_3124 = ::Reflex::TypeBuilder(Reflex::Literal("std::vector<reco::FFTAnyJet<reco::TrackJet> >"));
  ::Reflex::Type type_5727 = ::Reflex::TypeBuilder(Reflex::Literal("edm::RefProd<std::vector<reco::PFCandidate> >"));
  ::Reflex::Type type_3507 = ::Reflex::TypeBuilder(Reflex::Literal("std::allocator<reco::FFTAnyJet<reco::PFJet> >"));
  ::Reflex::Type type_5289 = ::Reflex::TypeBuilder(Reflex::Literal("edm::PtrVector<reco::FFTAnyJet<reco::PFJet> >"));
  ::Reflex::Type type_3491 = ::Reflex::TypeBuilder(Reflex::Literal("std::allocator<reco::FFTAnyJet<reco::JPTJet> >"));
  ::Reflex::Type type_5287 = ::Reflex::TypeBuilder(Reflex::Literal("edm::PtrVector<reco::FFTAnyJet<reco::JPTJet> >"));
  ::Reflex::Type type_5603 = ::Reflex::TypeBuilder(Reflex::Literal("edm::WrapperInterface<reco::FFTJetPileupSummary>"));
  ::Reflex::Type type_3516 = ::Reflex::TypeBuilder(Reflex::Literal("std::allocator<reco::FFTAnyJet<reco::BasicJet> >"));
  ::Reflex::Type type_3499 = ::Reflex::TypeBuilder(Reflex::Literal("std::allocator<reco::FFTAnyJet<reco::TrackJet> >"));
  ::Reflex::Type type_5288 = ::Reflex::TypeBuilder(Reflex::Literal("edm::PtrVector<reco::FFTAnyJet<reco::TrackJet> >"));
  ::Reflex::Type type_5528 = ::Reflex::TypeBuilder(Reflex::Literal("edm::PtrVectorItr<reco::FFTAnyJet<reco::PFJet> >"));
  ::Reflex::Type type_5290 = ::Reflex::TypeBuilder(Reflex::Literal("edm::PtrVector<reco::FFTAnyJet<reco::BasicJet> >"));
  ::Reflex::Type type_3377 = ::Reflex::TypeBuilder(Reflex::Literal("std::map<unsigned int,std::vector<unsigned int> >"));
  ::Reflex::Type type_5526 = ::Reflex::TypeBuilder(Reflex::Literal("edm::PtrVectorItr<reco::FFTAnyJet<reco::JPTJet> >"));
  ::Reflex::Type type_5604 = ::Reflex::TypeBuilder(Reflex::Literal("edm::WrapperInterface<reco::DiscretizedEnergyFlow>"));
  ::Reflex::Type type_2874 = ::Reflex::TypeBuilder(Reflex::Literal("std::auto_ptr<edm::reftobase::RefVectorHolderBase>"));
  ::Reflex::Type type_3107 = ::Reflex::TypeBuilder(Reflex::Literal("std::vector<std::vector<const reco::PFCandidate*> >"));
  ::Reflex::Type type_5527 = ::Reflex::TypeBuilder(Reflex::Literal("edm::PtrVectorItr<reco::FFTAnyJet<reco::TrackJet> >"));
  ::Reflex::Type type_5529 = ::Reflex::TypeBuilder(Reflex::Literal("edm::PtrVectorItr<reco::FFTAnyJet<reco::BasicJet> >"));
  ::Reflex::Type type_3110 = ::Reflex::TypeBuilder(Reflex::Literal("std::vector<std::pair<edm::ProductID,unsigned int> >"));
  ::Reflex::Type type_5071 = ::Reflex::TypeBuilder(Reflex::Literal("boost::shared_ptr<edm::reftobase::RefVectorHolderBase>"));
  ::Reflex::Type type_3127 = ::Reflex::TypeBuilder(Reflex::Literal("std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > >"));
  ::Reflex::Type type_5876 = ::Reflex::TypeBuilder(Reflex::Literal("edm::Handle<std::vector<reco::FFTAnyJet<reco::PFJet> > >"));
  ::Reflex::Type type_5732 = ::Reflex::TypeBuilder(Reflex::Literal("edm::RefProd<std::vector<reco::FFTAnyJet<reco::PFJet> > >"));
  ::Reflex::Type type_3117 = ::Reflex::TypeBuilder(Reflex::Literal("std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > >"));
  ::Reflex::Type type_5874 = ::Reflex::TypeBuilder(Reflex::Literal("edm::Handle<std::vector<reco::FFTAnyJet<reco::JPTJet> > >"));
  ::Reflex::Type type_5466 = ::Reflex::TypeBuilder(Reflex::Literal("edm::Wrapper<std::vector<reco::FFTAnyJet<reco::PFJet> > >"));
  ::Reflex::Type type_5729 = ::Reflex::TypeBuilder(Reflex::Literal("edm::RefProd<std::vector<reco::FFTAnyJet<reco::JPTJet> > >"));
  ::Reflex::Type type_2891 = ::Reflex::TypeBuilder(Reflex::Literal("std::auto_ptr<std::vector<reco::FFTAnyJet<reco::PFJet> > >"));
  ::Reflex::Type type_5456 = ::Reflex::TypeBuilder(Reflex::Literal("edm::Wrapper<std::vector<reco::FFTAnyJet<reco::JPTJet> > >"));
  ::Reflex::Type type_3132 = ::Reflex::TypeBuilder(Reflex::Literal("std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > >"));
  ::Reflex::Type type_3122 = ::Reflex::TypeBuilder(Reflex::Literal("std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > >"));
  ::Reflex::Type type_5878 = ::Reflex::TypeBuilder(Reflex::Literal("edm::Handle<std::vector<reco::FFTAnyJet<reco::BasicJet> > >"));
  ::Reflex::Type type_3505 = ::Reflex::TypeBuilder(Reflex::Literal("std::allocator<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > >"));
  ::Reflex::Type type_5875 = ::Reflex::TypeBuilder(Reflex::Literal("edm::Handle<std::vector<reco::FFTAnyJet<reco::TrackJet> > >"));
  ::Reflex::Type type_2881 = ::Reflex::TypeBuilder(Reflex::Literal("std::auto_ptr<std::vector<reco::FFTAnyJet<reco::JPTJet> > >"));
  ::Reflex::Type type_2875 = ::Reflex::TypeBuilder(Reflex::Literal("std::auto_ptr<edm::reftobase::BaseVectorHolder<reco::Jet> >"));
  ::Reflex::Type type_5731 = ::Reflex::TypeBuilder(Reflex::Literal("edm::RefProd<std::vector<reco::FFTAnyJet<reco::TrackJet> > >"));
  ::Reflex::Type type_5733 = ::Reflex::TypeBuilder(Reflex::Literal("edm::RefProd<std::vector<reco::FFTAnyJet<reco::BasicJet> > >"));
  ::Reflex::Type type_5582 = ::Reflex::TypeBuilder(Reflex::Literal("edm::TestHandle<std::vector<reco::FFTAnyJet<reco::PFJet> > >"));
  ::Reflex::Type type_3489 = ::Reflex::TypeBuilder(Reflex::Literal("std::allocator<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > >"));
  ::Reflex::Type type_5461 = ::Reflex::TypeBuilder(Reflex::Literal("edm::Wrapper<std::vector<reco::FFTAnyJet<reco::TrackJet> > >"));
  ::Reflex::Type type_5471 = ::Reflex::TypeBuilder(Reflex::Literal("edm::Wrapper<std::vector<reco::FFTAnyJet<reco::BasicJet> > >"));
  ::Reflex::Type type_5580 = ::Reflex::TypeBuilder(Reflex::Literal("edm::TestHandle<std::vector<reco::FFTAnyJet<reco::JPTJet> > >"));
  ::Reflex::Type type_2886 = ::Reflex::TypeBuilder(Reflex::Literal("std::auto_ptr<std::vector<reco::FFTAnyJet<reco::TrackJet> > >"));
  ::Reflex::Type type_5804 = ::Reflex::TypeBuilder(Reflex::Literal("edm::Association<std::vector<reco::FFTAnyJet<reco::PFJet> > >"));
  ::Reflex::Type type_2896 = ::Reflex::TypeBuilder(Reflex::Literal("std::auto_ptr<std::vector<reco::FFTAnyJet<reco::BasicJet> > >"));
  ::Reflex::Type type_5661 = ::Reflex::TypeBuilder(Reflex::Literal("edm::OrphanHandle<std::vector<reco::FFTAnyJet<reco::PFJet> > >"));
  ::Reflex::Type type_3514 = ::Reflex::TypeBuilder(Reflex::Literal("std::allocator<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > >"));
  ::Reflex::Type type_3497 = ::Reflex::TypeBuilder(Reflex::Literal("std::allocator<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > >"));
  ::Reflex::Type type_5802 = ::Reflex::TypeBuilder(Reflex::Literal("edm::Association<std::vector<reco::FFTAnyJet<reco::JPTJet> > >"));
  ::Reflex::Type type_5584 = ::Reflex::TypeBuilder(Reflex::Literal("edm::TestHandle<std::vector<reco::FFTAnyJet<reco::BasicJet> > >"));
  ::Reflex::Type type_5581 = ::Reflex::TypeBuilder(Reflex::Literal("edm::TestHandle<std::vector<reco::FFTAnyJet<reco::TrackJet> > >"));
  ::Reflex::Type type_5659 = ::Reflex::TypeBuilder(Reflex::Literal("edm::OrphanHandle<std::vector<reco::FFTAnyJet<reco::JPTJet> > >"));
  ::Reflex::Type type_5803 = ::Reflex::TypeBuilder(Reflex::Literal("edm::Association<std::vector<reco::FFTAnyJet<reco::TrackJet> > >"));
  ::Reflex::Type type_5805 = ::Reflex::TypeBuilder(Reflex::Literal("edm::Association<std::vector<reco::FFTAnyJet<reco::BasicJet> > >"));
  ::Reflex::Type type_8970 = ::Reflex::TypeBuilder(Reflex::Literal("reco::JetTrackMatch<std::vector<reco::FFTAnyJet<reco::PFJet> > >"));
  ::Reflex::Type type_5663 = ::Reflex::TypeBuilder(Reflex::Literal("edm::OrphanHandle<std::vector<reco::FFTAnyJet<reco::BasicJet> > >"));
  ::Reflex::Type type_5660 = ::Reflex::TypeBuilder(Reflex::Literal("edm::OrphanHandle<std::vector<reco::FFTAnyJet<reco::TrackJet> > >"));
  ::Reflex::Type type_8968 = ::Reflex::TypeBuilder(Reflex::Literal("reco::JetTrackMatch<std::vector<reco::FFTAnyJet<reco::JPTJet> > >"));
  ::Reflex::Type type_2877 = ::Reflex::TypeBuilder(Reflex::Literal("std::auto_ptr<edm::reftobase::BaseVectorHolder<reco::Candidate> >"));
  ::Reflex::Type type_5619 = ::Reflex::TypeBuilder(Reflex::Literal("edm::WrapperInterface<std::vector<reco::FFTAnyJet<reco::PFJet> > >"));
  ::Reflex::Type type_3378 = ::Reflex::TypeBuilder(Reflex::Literal("std::map<const reco::PFJet*,std::vector<const reco::PFCandidate*> >"));
  ::Reflex::Type type_5609 = ::Reflex::TypeBuilder(Reflex::Literal("edm::WrapperInterface<std::vector<reco::FFTAnyJet<reco::JPTJet> > >"));
  ::Reflex::Type type_8969 = ::Reflex::TypeBuilder(Reflex::Literal("reco::JetTrackMatch<std::vector<reco::FFTAnyJet<reco::TrackJet> > >"));
  ::Reflex::Type type_8971 = ::Reflex::TypeBuilder(Reflex::Literal("reco::JetTrackMatch<std::vector<reco::FFTAnyJet<reco::BasicJet> > >"));
  ::Reflex::Type type_5614 = ::Reflex::TypeBuilder(Reflex::Literal("edm::WrapperInterface<std::vector<reco::FFTAnyJet<reco::TrackJet> > >"));
  ::Reflex::Type type_5624 = ::Reflex::TypeBuilder(Reflex::Literal("edm::WrapperInterface<std::vector<reco::FFTAnyJet<reco::BasicJet> > >"));
  ::Reflex::Type type_5463 = ::Reflex::TypeBuilder(Reflex::Literal("edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > > >"));
  ::Reflex::Type type_2888 = ::Reflex::TypeBuilder(Reflex::Literal("std::auto_ptr<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > > >"));
  ::Reflex::Type type_5453 = ::Reflex::TypeBuilder(Reflex::Literal("edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > > >"));
  ::Reflex::Type type_9730 = ::Reflex::TypeBuilder(Reflex::Literal("__gnu_cxx::__alloc_traits<std::allocator<reco::FFTAnyJet<reco::PFJet> > >"));
  ::Reflex::Type type_2878 = ::Reflex::TypeBuilder(Reflex::Literal("std::auto_ptr<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > > >"));
  ::Reflex::Type type_9732 = ::Reflex::TypeBuilder(Reflex::Literal("__gnu_cxx::__alloc_traits<std::allocator<reco::FFTAnyJet<reco::JPTJet> > >"));
  ::Reflex::Type type_5458 = ::Reflex::TypeBuilder(Reflex::Literal("edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > > >"));
  ::Reflex::Type type_5468 = ::Reflex::TypeBuilder(Reflex::Literal("edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > > >"));
  ::Reflex::Type type_2883 = ::Reflex::TypeBuilder(Reflex::Literal("std::auto_ptr<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > > >"));
  ::Reflex::Type type_2893 = ::Reflex::TypeBuilder(Reflex::Literal("std::auto_ptr<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > > >"));
  ::Reflex::Type type_9728 = ::Reflex::TypeBuilder(Reflex::Literal("__gnu_cxx::__alloc_traits<std::allocator<reco::FFTAnyJet<reco::BasicJet> > >"));
  ::Reflex::Type type_9729 = ::Reflex::TypeBuilder(Reflex::Literal("__gnu_cxx::__alloc_traits<std::allocator<reco::FFTAnyJet<reco::TrackJet> > >"));
  ::Reflex::Type type_5462 = ::Reflex::TypeBuilder(Reflex::Literal("edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::PFJet> > > >"));
  ::Reflex::Type type_2887 = ::Reflex::TypeBuilder(Reflex::Literal("std::auto_ptr<edm::Association<std::vector<reco::FFTAnyJet<reco::PFJet> > > >"));
  ::Reflex::Type type_5452 = ::Reflex::TypeBuilder(Reflex::Literal("edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::JPTJet> > > >"));
  ::Reflex::Type type_2873 = ::Reflex::TypeBuilder(Reflex::Literal("std::auto_ptr<edm::Association<std::vector<reco::FFTAnyJet<reco::JPTJet> > > >"));
  ::Reflex::Type type_5457 = ::Reflex::TypeBuilder(Reflex::Literal("edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::TrackJet> > > >"));
  ::Reflex::Type type_5467 = ::Reflex::TypeBuilder(Reflex::Literal("edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::BasicJet> > > >"));
  ::Reflex::Type type_2882 = ::Reflex::TypeBuilder(Reflex::Literal("std::auto_ptr<edm::Association<std::vector<reco::FFTAnyJet<reco::TrackJet> > > >"));
  ::Reflex::Type type_5616 = ::Reflex::TypeBuilder(Reflex::Literal("edm::WrapperInterface<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > > >"));
  ::Reflex::Type type_2892 = ::Reflex::TypeBuilder(Reflex::Literal("std::auto_ptr<edm::Association<std::vector<reco::FFTAnyJet<reco::BasicJet> > > >"));
  ::Reflex::Type type_5606 = ::Reflex::TypeBuilder(Reflex::Literal("edm::WrapperInterface<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > > >"));
  ::Reflex::Type type_5611 = ::Reflex::TypeBuilder(Reflex::Literal("edm::WrapperInterface<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > > >"));
  ::Reflex::Type type_5621 = ::Reflex::TypeBuilder(Reflex::Literal("edm::WrapperInterface<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > > >"));
  ::Reflex::Type type_5615 = ::Reflex::TypeBuilder(Reflex::Literal("edm::WrapperInterface<edm::Association<std::vector<reco::FFTAnyJet<reco::PFJet> > > >"));
  ::Reflex::Type type_5605 = ::Reflex::TypeBuilder(Reflex::Literal("edm::WrapperInterface<edm::Association<std::vector<reco::FFTAnyJet<reco::JPTJet> > > >"));
  ::Reflex::Type type_9700 = ::Reflex::TypeBuilder(Reflex::Literal("__gnu_cxx::__alloc_traits<std::allocator<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > > >"));
  ::Reflex::Type type_9696 = ::Reflex::TypeBuilder(Reflex::Literal("__gnu_cxx::__alloc_traits<std::allocator<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > > >"));
  ::Reflex::Type type_5610 = ::Reflex::TypeBuilder(Reflex::Literal("edm::WrapperInterface<edm::Association<std::vector<reco::FFTAnyJet<reco::TrackJet> > > >"));
  ::Reflex::Type type_5620 = ::Reflex::TypeBuilder(Reflex::Literal("edm::WrapperInterface<edm::Association<std::vector<reco::FFTAnyJet<reco::BasicJet> > > >"));
  ::Reflex::Type type_9702 = ::Reflex::TypeBuilder(Reflex::Literal("__gnu_cxx::__alloc_traits<std::allocator<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > > >"));
  ::Reflex::Type type_9698 = ::Reflex::TypeBuilder(Reflex::Literal("__gnu_cxx::__alloc_traits<std::allocator<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > > >"));
  ::Reflex::Type type_2575 = ::Reflex::TypeBuilder(Reflex::Literal("std::_Vector_base<reco::FFTAnyJet<reco::PFJet>,std::allocator<reco::FFTAnyJet<reco::PFJet> > >"));
  ::Reflex::Type type_2577 = ::Reflex::TypeBuilder(Reflex::Literal("std::_Vector_base<reco::FFTAnyJet<reco::JPTJet>,std::allocator<reco::FFTAnyJet<reco::JPTJet> > >"));
  ::Reflex::Type type_27547 = ::Reflex::TypeBuilder(Reflex::Literal("edm::refhelper::FindRefVectorUsingAdvance<edm::RefToBaseVector<reco::FFTAnyJet<reco::PFJet> > >"));
  ::Reflex::Type type_27543 = ::Reflex::TypeBuilder(Reflex::Literal("edm::refhelper::FindRefVectorUsingAdvance<edm::RefToBaseVector<reco::FFTAnyJet<reco::JPTJet> > >"));
  ::Reflex::Type type_27549 = ::Reflex::TypeBuilder(Reflex::Literal("edm::refhelper::FindRefVectorUsingAdvance<edm::RefToBaseVector<reco::FFTAnyJet<reco::BasicJet> > >"));
  ::Reflex::Type type_27545 = ::Reflex::TypeBuilder(Reflex::Literal("edm::refhelper::FindRefVectorUsingAdvance<edm::RefToBaseVector<reco::FFTAnyJet<reco::TrackJet> > >"));
  ::Reflex::Type type_2573 = ::Reflex::TypeBuilder(Reflex::Literal("std::_Vector_base<reco::FFTAnyJet<reco::BasicJet>,std::allocator<reco::FFTAnyJet<reco::BasicJet> > >"));
  ::Reflex::Type type_2574 = ::Reflex::TypeBuilder(Reflex::Literal("std::_Vector_base<reco::FFTAnyJet<reco::TrackJet>,std::allocator<reco::FFTAnyJet<reco::TrackJet> > >"));
  ::Reflex::Type type_9557 = ::Reflex::TypeBuilder(Reflex::Literal("__gnu_cxx::__normal_iterator<reco::FFTAnyJet<reco::PFJet>*,std::vector<reco::FFTAnyJet<reco::PFJet> > >"));
  ::Reflex::Type type_9561 = ::Reflex::TypeBuilder(Reflex::Literal("__gnu_cxx::__normal_iterator<reco::FFTAnyJet<reco::JPTJet>*,std::vector<reco::FFTAnyJet<reco::JPTJet> > >"));
  ::Reflex::Type type_5478 = ::Reflex::TypeBuilder(Reflex::Literal("edm::AssociationMap<edm::OneToMany<std::vector<reco::PFJet>,std::vector<reco::PFCandidate>,unsigned int> >"));
  ::Reflex::Type type_25848 = ::Reflex::TypeBuilder(Reflex::Literal("edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> >"));
  ::Reflex::Type type_27350 = ::Reflex::TypeBuilder(Reflex::Literal("edm::helpers::KeyVal<edm::RefProd<std::vector<reco::PFJet> >,edm::RefProd<std::vector<reco::PFCandidate> > >"));
  ::Reflex::Type type_9558 = ::Reflex::TypeBuilder(Reflex::Literal("__gnu_cxx::__normal_iterator<const reco::FFTAnyJet<reco::PFJet>*,std::vector<reco::FFTAnyJet<reco::PFJet> > >"));
  ::Reflex::Type type_9553 = ::Reflex::TypeBuilder(Reflex::Literal("__gnu_cxx::__normal_iterator<reco::FFTAnyJet<reco::BasicJet>*,std::vector<reco::FFTAnyJet<reco::BasicJet> > >"));
  ::Reflex::Type type_25824 = ::Reflex::TypeBuilder(Reflex::Literal("edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> >"));
  ::Reflex::Type type_9555 = ::Reflex::TypeBuilder(Reflex::Literal("__gnu_cxx::__normal_iterator<reco::FFTAnyJet<reco::TrackJet>*,std::vector<reco::FFTAnyJet<reco::TrackJet> > >"));
  ::Reflex::Type type_9562 = ::Reflex::TypeBuilder(Reflex::Literal("__gnu_cxx::__normal_iterator<const reco::FFTAnyJet<reco::JPTJet>*,std::vector<reco::FFTAnyJet<reco::JPTJet> > >"));
  ::Reflex::Type type_25836 = ::Reflex::TypeBuilder(Reflex::Literal("edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> >"));
  ::Reflex::Type type_25860 = ::Reflex::TypeBuilder(Reflex::Literal("edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> >"));
  ::Reflex::Type type_9554 = ::Reflex::TypeBuilder(Reflex::Literal("__gnu_cxx::__normal_iterator<const reco::FFTAnyJet<reco::BasicJet>*,std::vector<reco::FFTAnyJet<reco::BasicJet> > >"));
  ::Reflex::Type type_9556 = ::Reflex::TypeBuilder(Reflex::Literal("__gnu_cxx::__normal_iterator<const reco::FFTAnyJet<reco::TrackJet>*,std::vector<reco::FFTAnyJet<reco::TrackJet> > >"));
  ::Reflex::Type type_5809 = ::Reflex::TypeBuilder(Reflex::Literal("edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >"));
  ::Reflex::Type type_5812 = ::Reflex::TypeBuilder(Reflex::Literal("edm::Ref<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> >"));
  ::Reflex::Type type_5481 = ::Reflex::TypeBuilder(Reflex::Literal("edm::AssociationMap<edm::OneToMany<std::vector<reco::FFTAnyJet<reco::PFJet> >,std::vector<reco::Track>,unsigned int> >"));
  ::Reflex::Type type_5479 = ::Reflex::TypeBuilder(Reflex::Literal("edm::AssociationMap<edm::OneToMany<std::vector<reco::FFTAnyJet<reco::JPTJet> >,std::vector<reco::Track>,unsigned int> >"));
  ::Reflex::Type type_5480 = ::Reflex::TypeBuilder(Reflex::Literal("edm::AssociationMap<edm::OneToMany<std::vector<reco::FFTAnyJet<reco::TrackJet> >,std::vector<reco::Track>,unsigned int> >"));
  ::Reflex::Type type_5482 = ::Reflex::TypeBuilder(Reflex::Literal("edm::AssociationMap<edm::OneToMany<std::vector<reco::FFTAnyJet<reco::BasicJet> >,std::vector<reco::Track>,unsigned int> >"));
  ::Reflex::Type type_5449 = ::Reflex::TypeBuilder(Reflex::Literal("edm::Wrapper<edm::AssociationMap<edm::OneToMany<std::vector<reco::PFJet>,std::vector<reco::PFCandidate>,unsigned int> > >"));
  ::Reflex::Type type_2870 = ::Reflex::TypeBuilder(Reflex::Literal("std::auto_ptr<edm::AssociationMap<edm::OneToMany<std::vector<reco::PFJet>,std::vector<reco::PFCandidate>,unsigned int> > >"));
  ::Reflex::Type type_2545 = ::Reflex::TypeBuilder(Reflex::Literal("std::_Vector_base<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> >,std::allocator<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > > >"));
  ::Reflex::Type type_29199 = ::Reflex::TypeBuilder(Reflex::Literal("edm::AssociationMap<edm::OneToMany<std::vector<reco::PFJet>,std::vector<reco::PFCandidate>,unsigned int> >::const_iterator"));
  ::Reflex::Type type_2541 = ::Reflex::TypeBuilder(Reflex::Literal("std::_Vector_base<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> >,std::allocator<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > > >"));
  ::Reflex::Type type_3875 = ::Reflex::TypeBuilder(Reflex::Literal("std::reverse_iterator<__gnu_cxx::__normal_iterator<reco::FFTAnyJet<reco::PFJet>*,std::vector<reco::FFTAnyJet<reco::PFJet> > > >"));
  ::Reflex::Type type_2547 = ::Reflex::TypeBuilder(Reflex::Literal("std::_Vector_base<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> >,std::allocator<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > > >"));
  ::Reflex::Type type_2543 = ::Reflex::TypeBuilder(Reflex::Literal("std::_Vector_base<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> >,std::allocator<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > > >"));
  ::Reflex::Type type_3879 = ::Reflex::TypeBuilder(Reflex::Literal("std::reverse_iterator<__gnu_cxx::__normal_iterator<reco::FFTAnyJet<reco::JPTJet>*,std::vector<reco::FFTAnyJet<reco::JPTJet> > > >"));
  ::Reflex::Type type_5602 = ::Reflex::TypeBuilder(Reflex::Literal("edm::WrapperInterface<edm::AssociationMap<edm::OneToMany<std::vector<reco::PFJet>,std::vector<reco::PFCandidate>,unsigned int> > >"));
  ::Reflex::Type type_9500 = ::Reflex::TypeBuilder(Reflex::Literal("__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> >*,std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > > >"));
  ::Reflex::Type type_3111 = ::Reflex::TypeBuilder(Reflex::Literal("std::vector<edm::Ref<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >"));
  ::Reflex::Type type_3874 = ::Reflex::TypeBuilder(Reflex::Literal("std::reverse_iterator<__gnu_cxx::__normal_iterator<const reco::FFTAnyJet<reco::PFJet>*,std::vector<reco::FFTAnyJet<reco::PFJet> > > >"));
  ::Reflex::Type type_9492 = ::Reflex::TypeBuilder(Reflex::Literal("__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> >*,std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > > >"));
  ::Reflex::Type type_3871 = ::Reflex::TypeBuilder(Reflex::Literal("std::reverse_iterator<__gnu_cxx::__normal_iterator<reco::FFTAnyJet<reco::BasicJet>*,std::vector<reco::FFTAnyJet<reco::BasicJet> > > >"));
  ::Reflex::Type type_3873 = ::Reflex::TypeBuilder(Reflex::Literal("std::reverse_iterator<__gnu_cxx::__normal_iterator<reco::FFTAnyJet<reco::TrackJet>*,std::vector<reco::FFTAnyJet<reco::TrackJet> > > >"));
  ::Reflex::Type type_3878 = ::Reflex::TypeBuilder(Reflex::Literal("std::reverse_iterator<__gnu_cxx::__normal_iterator<const reco::FFTAnyJet<reco::JPTJet>*,std::vector<reco::FFTAnyJet<reco::JPTJet> > > >"));
  ::Reflex::Type type_9501 = ::Reflex::TypeBuilder(Reflex::Literal("__gnu_cxx::__normal_iterator<const edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> >*,std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > > >"));
  ::Reflex::Type type_9504 = ::Reflex::TypeBuilder(Reflex::Literal("__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> >*,std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > > >"));
  ::Reflex::Type type_9496 = ::Reflex::TypeBuilder(Reflex::Literal("__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> >*,std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > > >"));
  ::Reflex::Type type_9493 = ::Reflex::TypeBuilder(Reflex::Literal("__gnu_cxx::__normal_iterator<const edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> >*,std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > > >"));
  ::Reflex::Type type_3870 = ::Reflex::TypeBuilder(Reflex::Literal("std::reverse_iterator<__gnu_cxx::__normal_iterator<const reco::FFTAnyJet<reco::BasicJet>*,std::vector<reco::FFTAnyJet<reco::BasicJet> > > >"));
  ::Reflex::Type type_3872 = ::Reflex::TypeBuilder(Reflex::Literal("std::reverse_iterator<__gnu_cxx::__normal_iterator<const reco::FFTAnyJet<reco::TrackJet>*,std::vector<reco::FFTAnyJet<reco::TrackJet> > > >"));
  ::Reflex::Type type_5810 = ::Reflex::TypeBuilder(Reflex::Literal("edm::Ref<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> >"));
  ::Reflex::Type type_9505 = ::Reflex::TypeBuilder(Reflex::Literal("__gnu_cxx::__normal_iterator<const edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> >*,std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > > >"));
  ::Reflex::Type type_9497 = ::Reflex::TypeBuilder(Reflex::Literal("__gnu_cxx::__normal_iterator<const edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> >*,std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > > >"));
  ::Reflex::Type type_5322 = ::Reflex::TypeBuilder(Reflex::Literal("edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> >"));
  ::Reflex::Type type_3805 = ::Reflex::TypeBuilder(Reflex::Literal("std::reverse_iterator<__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> >*,std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > > > >"));
  ::Reflex::Type type_3793 = ::Reflex::TypeBuilder(Reflex::Literal("std::reverse_iterator<__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> >*,std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > > > >"));
  ::Reflex::Type type_3804 = ::Reflex::TypeBuilder(Reflex::Literal("std::reverse_iterator<__gnu_cxx::__normal_iterator<const edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> >*,std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > > > >"));
  ::Reflex::Type type_3813 = ::Reflex::TypeBuilder(Reflex::Literal("std::reverse_iterator<__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> >*,std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > > > >"));
  ::Reflex::Type type_3799 = ::Reflex::TypeBuilder(Reflex::Literal("std::reverse_iterator<__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> >*,std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > > > >"));
  ::Reflex::Type type_3792 = ::Reflex::TypeBuilder(Reflex::Literal("std::reverse_iterator<__gnu_cxx::__normal_iterator<const edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> >*,std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > > > >"));
  ::Reflex::Type type_3812 = ::Reflex::TypeBuilder(Reflex::Literal("std::reverse_iterator<__gnu_cxx::__normal_iterator<const edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> >*,std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > > > >"));
  ::Reflex::Type type_3798 = ::Reflex::TypeBuilder(Reflex::Literal("std::reverse_iterator<__gnu_cxx::__normal_iterator<const edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> >*,std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > > > >"));
  ::Reflex::Type type_5814 = ::Reflex::TypeBuilder(Reflex::Literal("edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >"));
  ::Reflex::Type type_5496 = ::Reflex::TypeBuilder(Reflex::Literal("edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >"));
  ::Reflex::Type type_5811 = ::Reflex::TypeBuilder(Reflex::Literal("edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >"));
  ::Reflex::Type type_5343 = ::Reflex::TypeBuilder(Reflex::Literal("edm::RefVector<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >"));
  ::Reflex::Type type_5494 = ::Reflex::TypeBuilder(Reflex::Literal("edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >"));
  ::Reflex::Type type_5333 = ::Reflex::TypeBuilder(Reflex::Literal("edm::RefVector<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >"));
  ::Reflex::Type type_5815 = ::Reflex::TypeBuilder(Reflex::Literal("edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >"));
  ::Reflex::Type type_5813 = ::Reflex::TypeBuilder(Reflex::Literal("edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >"));
  ::Reflex::Type type_5250 = ::Reflex::TypeBuilder(Reflex::Literal("edm::RefVectorIterator<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >"));
  ::Reflex::Type type_3125 = ::Reflex::TypeBuilder(Reflex::Literal("std::vector<edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >"));
  ::Reflex::Type type_5497 = ::Reflex::TypeBuilder(Reflex::Literal("edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >"));
  ::Reflex::Type type_5495 = ::Reflex::TypeBuilder(Reflex::Literal("edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >"));
  ::Reflex::Type type_3128 = ::Reflex::TypeBuilder(Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >"));
  ::Reflex::Type type_5348 = ::Reflex::TypeBuilder(Reflex::Literal("edm::RefVector<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >"));
  ::Reflex::Type type_5338 = ::Reflex::TypeBuilder(Reflex::Literal("edm::RefVector<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >"));
  ::Reflex::Type type_5248 = ::Reflex::TypeBuilder(Reflex::Literal("edm::RefVectorIterator<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >"));
  ::Reflex::Type type_3113 = ::Reflex::TypeBuilder(Reflex::Literal("std::vector<edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >"));
  ::Reflex::Type type_3506 = ::Reflex::TypeBuilder(Reflex::Literal("std::allocator<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >"));
  ::Reflex::Type type_3118 = ::Reflex::TypeBuilder(Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >"));
  ::Reflex::Type type_5465 = ::Reflex::TypeBuilder(Reflex::Literal("edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >"));
  ::Reflex::Type type_2890 = ::Reflex::TypeBuilder(Reflex::Literal("std::auto_ptr<edm::RefVector<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >"));
  ::Reflex::Type type_3490 = ::Reflex::TypeBuilder(Reflex::Literal("std::allocator<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >"));
  ::Reflex::Type type_5455 = ::Reflex::TypeBuilder(Reflex::Literal("edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >"));
  ::Reflex::Type type_5251 = ::Reflex::TypeBuilder(Reflex::Literal("edm::RefVectorIterator<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >"));
  ::Reflex::Type type_5249 = ::Reflex::TypeBuilder(Reflex::Literal("edm::RefVectorIterator<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >"));
  ::Reflex::Type type_2880 = ::Reflex::TypeBuilder(Reflex::Literal("std::auto_ptr<edm::RefVector<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >"));
  ::Reflex::Type type_3120 = ::Reflex::TypeBuilder(Reflex::Literal("std::vector<edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >"));
  ::Reflex::Type type_3130 = ::Reflex::TypeBuilder(Reflex::Literal("std::vector<edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >"));
  ::Reflex::Type type_3123 = ::Reflex::TypeBuilder(Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >"));
  ::Reflex::Type type_3133 = ::Reflex::TypeBuilder(Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >"));
  ::Reflex::Type type_29589 = ::Reflex::TypeBuilder(Reflex::Literal("edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >"));
  ::Reflex::Type type_5618 = ::Reflex::TypeBuilder(Reflex::Literal("edm::WrapperInterface<edm::RefVector<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >"));
  ::Reflex::Type type_3498 = ::Reflex::TypeBuilder(Reflex::Literal("std::allocator<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >"));
  ::Reflex::Type type_3515 = ::Reflex::TypeBuilder(Reflex::Literal("std::allocator<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >"));
  ::Reflex::Type type_5464 = ::Reflex::TypeBuilder(Reflex::Literal("edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > > >"));
  ::Reflex::Type type_2889 = ::Reflex::TypeBuilder(Reflex::Literal("std::auto_ptr<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > > >"));
  ::Reflex::Type type_29587 = ::Reflex::TypeBuilder(Reflex::Literal("edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >"));
  ::Reflex::Type type_5460 = ::Reflex::TypeBuilder(Reflex::Literal("edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >"));
  ::Reflex::Type type_5470 = ::Reflex::TypeBuilder(Reflex::Literal("edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >"));
  ::Reflex::Type type_5608 = ::Reflex::TypeBuilder(Reflex::Literal("edm::WrapperInterface<edm::RefVector<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >"));
  ::Reflex::Type type_2885 = ::Reflex::TypeBuilder(Reflex::Literal("std::auto_ptr<edm::RefVector<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >"));
  ::Reflex::Type type_2895 = ::Reflex::TypeBuilder(Reflex::Literal("std::auto_ptr<edm::RefVector<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >"));
  ::Reflex::Type type_29600 = ::Reflex::TypeBuilder(Reflex::Literal("edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >"));
  ::Reflex::Type type_5454 = ::Reflex::TypeBuilder(Reflex::Literal("edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > > >"));
  ::Reflex::Type type_2879 = ::Reflex::TypeBuilder(Reflex::Literal("std::auto_ptr<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > > >"));
  ::Reflex::Type type_29596 = ::Reflex::TypeBuilder(Reflex::Literal("edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >"));
  ::Reflex::Type type_5617 = ::Reflex::TypeBuilder(Reflex::Literal("edm::WrapperInterface<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > > >"));
  ::Reflex::Type type_29588 = ::Reflex::TypeBuilder(Reflex::Literal("edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >"));
  ::Reflex::Type type_29590 = ::Reflex::TypeBuilder(Reflex::Literal("edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >"));
  ::Reflex::Type type_5613 = ::Reflex::TypeBuilder(Reflex::Literal("edm::WrapperInterface<edm::RefVector<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >"));
  ::Reflex::Type type_5623 = ::Reflex::TypeBuilder(Reflex::Literal("edm::WrapperInterface<edm::RefVector<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >"));
  ::Reflex::Type type_29601 = ::Reflex::TypeBuilder(Reflex::Literal("edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >"));
  ::Reflex::Type type_5459 = ::Reflex::TypeBuilder(Reflex::Literal("edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > > >"));
  ::Reflex::Type type_5469 = ::Reflex::TypeBuilder(Reflex::Literal("edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > > >"));
  ::Reflex::Type type_5607 = ::Reflex::TypeBuilder(Reflex::Literal("edm::WrapperInterface<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > > >"));
  ::Reflex::Type type_2884 = ::Reflex::TypeBuilder(Reflex::Literal("std::auto_ptr<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > > >"));
  ::Reflex::Type type_2894 = ::Reflex::TypeBuilder(Reflex::Literal("std::auto_ptr<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > > >"));
  ::Reflex::Type type_29597 = ::Reflex::TypeBuilder(Reflex::Literal("edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >"));
  ::Reflex::Type type_9701 = ::Reflex::TypeBuilder(Reflex::Literal("__gnu_cxx::__alloc_traits<std::allocator<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > > >"));
  ::Reflex::Type type_29598 = ::Reflex::TypeBuilder(Reflex::Literal("edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >"));
  ::Reflex::Type type_29602 = ::Reflex::TypeBuilder(Reflex::Literal("edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >"));
  ::Reflex::Type type_27548 = ::Reflex::TypeBuilder(Reflex::Literal("edm::refhelper::FindRefVectorUsingAdvance<edm::RefVector<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >"));
  ::Reflex::Type type_9697 = ::Reflex::TypeBuilder(Reflex::Literal("__gnu_cxx::__alloc_traits<std::allocator<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > > >"));
  ::Reflex::Type type_5612 = ::Reflex::TypeBuilder(Reflex::Literal("edm::WrapperInterface<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > > >"));
  ::Reflex::Type type_5622 = ::Reflex::TypeBuilder(Reflex::Literal("edm::WrapperInterface<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > > >"));
  ::Reflex::Type type_29599 = ::Reflex::TypeBuilder(Reflex::Literal("edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >"));
  ::Reflex::Type type_29603 = ::Reflex::TypeBuilder(Reflex::Literal("edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >"));
  ::Reflex::Type type_27544 = ::Reflex::TypeBuilder(Reflex::Literal("edm::refhelper::FindRefVectorUsingAdvance<edm::RefVector<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >"));
  ::Reflex::Type type_9699 = ::Reflex::TypeBuilder(Reflex::Literal("__gnu_cxx::__alloc_traits<std::allocator<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > > >"));
  ::Reflex::Type type_9703 = ::Reflex::TypeBuilder(Reflex::Literal("__gnu_cxx::__alloc_traits<std::allocator<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > > >"));
  ::Reflex::Type type_27550 = ::Reflex::TypeBuilder(Reflex::Literal("edm::refhelper::FindRefVectorUsingAdvance<edm::RefVector<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >"));
  ::Reflex::Type type_27546 = ::Reflex::TypeBuilder(Reflex::Literal("edm::refhelper::FindRefVectorUsingAdvance<edm::RefVector<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >"));
  ::Reflex::Type type_21942 = ::Reflex::TypeBuilder(Reflex::Literal("edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > >"));
  ::Reflex::Type type_3376 = ::Reflex::TypeBuilder(Reflex::Literal("std::map<unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > > >"));
  ::Reflex::Type type_3030 = ::Reflex::TypeBuilder(Reflex::Literal("std::pair<const unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > > >"));
  ::Reflex::Type type_3466 = ::Reflex::TypeBuilder(Reflex::Literal("std::allocator<std::pair<const unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > > > >"));
  ::Reflex::Type type_3284 = ::Reflex::TypeBuilder(Reflex::Literal("std::_Rb_tree_iterator<std::pair<const unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > > > >"));
  ::Reflex::Type type_2924 = ::Reflex::TypeBuilder(Reflex::Literal("std::_Rb_tree_const_iterator<std::pair<const unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > > > >"));
  ::Reflex::Type type_3033 = ::Reflex::TypeBuilder(Reflex::Literal("std::pair<std::_Rb_tree_iterator<std::pair<const unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > > > >,bool>"));
  ::Reflex::Type type_3789 = ::Reflex::TypeBuilder(Reflex::Literal("std::reverse_iterator<std::_Rb_tree_iterator<std::pair<const unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > > > > >"));
  ::Reflex::Type type_3788 = ::Reflex::TypeBuilder(Reflex::Literal("std::reverse_iterator<std::_Rb_tree_const_iterator<std::pair<const unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > > > > >"));
  ::Reflex::Type type_2546 = ::Reflex::TypeBuilder(Reflex::Literal("std::_Vector_base<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >,std::allocator<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > > >"));
  ::Reflex::Type type_2542 = ::Reflex::TypeBuilder(Reflex::Literal("std::_Vector_base<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >,std::allocator<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > > >"));
  ::Reflex::Type type_9502 = ::Reflex::TypeBuilder(Reflex::Literal("__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*,std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > > >"));
  ::Reflex::Type type_9503 = ::Reflex::TypeBuilder(Reflex::Literal("__gnu_cxx::__normal_iterator<const edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*,std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > > >"));
  ::Reflex::Type type_9494 = ::Reflex::TypeBuilder(Reflex::Literal("__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*,std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > > >"));
  ::Reflex::Type type_9495 = ::Reflex::TypeBuilder(Reflex::Literal("__gnu_cxx::__normal_iterator<const edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*,std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > > >"));
  ::Reflex::Type type_2544 = ::Reflex::TypeBuilder(Reflex::Literal("std::_Vector_base<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >,std::allocator<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > > >"));
  ::Reflex::Type type_2548 = ::Reflex::TypeBuilder(Reflex::Literal("std::_Vector_base<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >,std::allocator<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > > >"));
  ::Reflex::Type type_9498 = ::Reflex::TypeBuilder(Reflex::Literal("__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*,std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > > >"));
  ::Reflex::Type type_3807 = ::Reflex::TypeBuilder(Reflex::Literal("std::reverse_iterator<__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*,std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > > > >"));
  ::Reflex::Type type_9506 = ::Reflex::TypeBuilder(Reflex::Literal("__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*,std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > > >"));
  ::Reflex::Type type_9499 = ::Reflex::TypeBuilder(Reflex::Literal("__gnu_cxx::__normal_iterator<const edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*,std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > > >"));
  ::Reflex::Type type_3806 = ::Reflex::TypeBuilder(Reflex::Literal("std::reverse_iterator<__gnu_cxx::__normal_iterator<const edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*,std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > > > >"));
  ::Reflex::Type type_9507 = ::Reflex::TypeBuilder(Reflex::Literal("__gnu_cxx::__normal_iterator<const edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*,std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > > >"));
  ::Reflex::Type type_3795 = ::Reflex::TypeBuilder(Reflex::Literal("std::reverse_iterator<__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*,std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > > > >"));
  ::Reflex::Type type_3794 = ::Reflex::TypeBuilder(Reflex::Literal("std::reverse_iterator<__gnu_cxx::__normal_iterator<const edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*,std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > > > >"));
  ::Reflex::Type type_3801 = ::Reflex::TypeBuilder(Reflex::Literal("std::reverse_iterator<__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*,std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > > > >"));
  ::Reflex::Type type_3815 = ::Reflex::TypeBuilder(Reflex::Literal("std::reverse_iterator<__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*,std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > > > >"));
  ::Reflex::Type type_3800 = ::Reflex::TypeBuilder(Reflex::Literal("std::reverse_iterator<__gnu_cxx::__normal_iterator<const edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*,std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > > > >"));
  ::Reflex::Type type_3814 = ::Reflex::TypeBuilder(Reflex::Literal("std::reverse_iterator<__gnu_cxx::__normal_iterator<const edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*,std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > > > >"));
  ::Reflex::Type type_3032 = ::Reflex::TypeBuilder(Reflex::Literal("std::pair<std::_Rb_tree_iterator<std::pair<const unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > > > >,std::_Rb_tree_iterator<std::pair<const unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > > > > >"));
  ::Reflex::Type type_3031 = ::Reflex::TypeBuilder(Reflex::Literal("std::pair<std::_Rb_tree_const_iterator<std::pair<const unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > > > >,std::_Rb_tree_const_iterator<std::pair<const unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > > > > >"));
  ::Reflex::Type type_2816 = ::Reflex::TypeBuilder(Reflex::Literal("std::_Rb_tree<unsigned int,std::pair<const unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > > >,std::_Select1st<std::pair<const unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > > > >,std::less<unsigned int>,std::allocator<std::pair<const unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > > > > >"));
  ::Reflex::Type type_8848 = ::Reflex::TypedefTypeBuilder(Reflex::Literal("reco::FFTTrackJetFwdRefVector"), type_3123);
  ::Reflex::Type type_8851 = ::Reflex::TypedefTypeBuilder(Reflex::Literal("reco::FFTPFJetRefProd"), type_5732);
  ::Reflex::Type type_8852 = ::Reflex::TypedefTypeBuilder(Reflex::Literal("reco::FFTPFJetFwdRef"), type_5496);
  ::Reflex::Type type_8853 = ::Reflex::TypedefTypeBuilder(Reflex::Literal("reco::FFTBasicJetRef"), type_5815);
  ::Reflex::Type type_8871 = ::Reflex::TypedefTypeBuilder(Reflex::Literal("reco::FFTBasicJetRefVector"), type_5348);
  ::Reflex::Type type_8882 = ::Reflex::TypedefTypeBuilder(Reflex::Literal("reco::FFTPFJetFwdPtrVector"), type_3127);
  ::Reflex::Type type_8887 = ::Reflex::TypedefTypeBuilder(Reflex::Literal("reco::FFTPFJetRefVector"), type_5343);
  ::Reflex::Type type_8942 = ::Reflex::TypedefTypeBuilder(Reflex::Literal("reco::FFTJPTJetCollection"), type_3119);
  ::Reflex::Type type_8952 = ::Reflex::TypedefTypeBuilder(Reflex::Literal("reco::FFTBasicJetFwdPtrVector"), type_3132);
  ::Reflex::Type type_8953 = ::Reflex::TypedefTypeBuilder(Reflex::Literal("reco::FFTTrackJetRefVector"), type_5338);
  ::Reflex::Type type_8955 = ::Reflex::TypedefTypeBuilder(Reflex::Literal("reco::FFTTrackJetRef"), type_5813);
  ::Reflex::Type type_8959 = ::Reflex::TypedefTypeBuilder(Reflex::Literal("reco::FFTTrackJetFwdPtr"), type_5306);
  ::Reflex::Type type_8961 = ::Reflex::TypedefTypeBuilder(Reflex::Literal("reco::FFTTrackJet"), type_8932);
  ::Reflex::Type type_8963 = ::Reflex::TypedefTypeBuilder(Reflex::Literal("reco::FFTPFJet"), type_8933);
  ::Reflex::Type type_8988 = ::Reflex::TypedefTypeBuilder(Reflex::Literal("reco::FFTJPTJetFwdPtrVector"), type_3117);
  ::Reflex::Type type_9006 = ::Reflex::TypedefTypeBuilder(Reflex::Literal("reco::FFTBasicJetFwdPtr"), type_5308);
  ::Reflex::Type type_9020 = ::Reflex::TypedefTypeBuilder(Reflex::Literal("reco::FFTBasicJetCollection"), type_3134);
  ::Reflex::Type type_9021 = ::Reflex::TypedefTypeBuilder(Reflex::Literal("reco::FFTJPTJetFwdRefVector"), type_3118);
  ::Reflex::Type type_9054 = ::Reflex::TypedefTypeBuilder(Reflex::Literal("reco::FFTJPTJetRef"), type_5811);
  ::Reflex::Type type_9078 = ::Reflex::TypedefTypeBuilder(Reflex::Literal("reco::FFTBasicJetFwdRef"), type_5497);
  ::Reflex::Type type_9083 = ::Reflex::TypedefTypeBuilder(Reflex::Literal("reco::FFTJPTJetRefVector"), type_5333);
  ::Reflex::Type type_9098 = ::Reflex::TypedefTypeBuilder(Reflex::Literal("reco::FFTPFJetRef"), type_5814);
  ::Reflex::Type type_9102 = ::Reflex::TypedefTypeBuilder(Reflex::Literal("reco::FFTBasicJet"), type_8934);
  ::Reflex::Type type_9111 = ::Reflex::TypedefTypeBuilder(Reflex::Literal("reco::FFTTrackJetRefProd"), type_5731);
  ::Reflex::Type type_9115 = ::Reflex::TypedefTypeBuilder(Reflex::Literal("reco::FFTJPTJetFwdPtr"), type_5305);
  ::Reflex::Type type_9139 = ::Reflex::TypedefTypeBuilder(Reflex::Literal("reco::FFTPFJetFwdRefVector"), type_3128);
  ::Reflex::Type type_9142 = ::Reflex::TypedefTypeBuilder(Reflex::Literal("reco::FFTBasicJetFwdRefVector"), type_3133);
  ::Reflex::Type type_9157 = ::Reflex::TypedefTypeBuilder(Reflex::Literal("reco::FFTJPTJetFwdRef"), type_5494);
  ::Reflex::Type type_9163 = ::Reflex::TypedefTypeBuilder(Reflex::Literal("reco::FFTBasicJetRefProd"), type_5733);
  ::Reflex::Type type_9168 = ::Reflex::TypedefTypeBuilder(Reflex::Literal("reco::FFTTrackJetFwdRef"), type_5495);
  ::Reflex::Type type_9172 = ::Reflex::TypedefTypeBuilder(Reflex::Literal("reco::FFTJPTJet"), type_8931);
  ::Reflex::Type type_9179 = ::Reflex::TypedefTypeBuilder(Reflex::Literal("reco::FFTJPTJetRefProd"), type_5729);
  ::Reflex::Type type_9181 = ::Reflex::TypedefTypeBuilder(Reflex::Literal("reco::FFTPFJetCollection"), type_3129);
  ::Reflex::Type type_9183 = ::Reflex::TypedefTypeBuilder(Reflex::Literal("reco::FFTTrackJetCollection"), type_3124);
  ::Reflex::Type type_9184 = ::Reflex::TypedefTypeBuilder(Reflex::Literal("reco::FFTPFJetFwdPtr"), type_5307);
  ::Reflex::Type type_9190 = ::Reflex::TypedefTypeBuilder(Reflex::Literal("reco::FFTTrackJetFwdPtrVector"), type_3122);
  ::Reflex::Type type_13839 = ::Reflex::PointerBuilder(type_3030);
  ::Reflex::Type type_3030c = ::Reflex::ConstBuilder(type_3030);
  ::Reflex::Type type_13841 = ::Reflex::PointerBuilder(type_3030c);
  ::Reflex::Type type_13843 = ::Reflex::ReferenceBuilder(type_3030);
  ::Reflex::Type type_13845 = ::Reflex::ReferenceBuilder(type_3030c);
  ::Reflex::Type type_3455 = ::Reflex::TypedefTypeBuilder(Reflex::Literal("std::size_t"), type_53);
  ::Reflex::Type type_3318 = ::Reflex::TypedefTypeBuilder(Reflex::Literal("std::ptrdiff_t"), type_352);
  ::Reflex::Type type_2764c = ::Reflex::ConstBuilder(type_2764);
  ::Reflex::Type type_43822 = ::Reflex::ReferenceBuilder(type_2764c);
  ::Reflex::Type type_3466c = ::Reflex::ConstBuilder(type_3466);
  ::Reflex::Type type_43900 = ::Reflex::ReferenceBuilder(type_3466c);
  ::Reflex::Type type_3376c = ::Reflex::ConstBuilder(type_3376);
  ::Reflex::Type type_44493 = ::Reflex::ReferenceBuilder(type_3376c);
  ::Reflex::Type type_44494 = ::Reflex::ReferenceBuilder(type_3376);
  ::Reflex::Type type_44495 = ::Reflex::ReferenceBuilder(type_21942);
  ::Reflex::Type type_211c = ::Reflex::ConstBuilder(type_211);
  ::Reflex::Type type_13040 = ::Reflex::ReferenceBuilder(type_211c);
  ::Reflex::Type type_21942c = ::Reflex::ConstBuilder(type_21942);
  ::Reflex::Type type_44496 = ::Reflex::ReferenceBuilder(type_21942c);
  ::Reflex::Type type_48316 = ::Reflex::ReferenceBuilder(type_5478);
  ::Reflex::Type type_5478c = ::Reflex::ConstBuilder(type_5478);
  ::Reflex::Type type_48317 = ::Reflex::ReferenceBuilder(type_5478c);
  ::Reflex::Type type_27350c = ::Reflex::ConstBuilder(type_27350);
  ::Reflex::Type type_47464 = ::Reflex::ReferenceBuilder(type_27350c);
  ::Reflex::Type type_5809c = ::Reflex::ConstBuilder(type_5809);
  ::Reflex::Type type_47461 = ::Reflex::ReferenceBuilder(type_5809c);
  ::Reflex::Type type_5810c = ::Reflex::ConstBuilder(type_5810);
  ::Reflex::Type type_47462 = ::Reflex::ReferenceBuilder(type_5810c);
  ::Reflex::Type type_5322c = ::Reflex::ConstBuilder(type_5322);
  ::Reflex::Type type_47463 = ::Reflex::ReferenceBuilder(type_5322c);
  ::Reflex::Type type_48201 = ::Reflex::PointerBuilder(type_5478c);
  ::Reflex::Type type_500c = ::Reflex::ConstBuilder(type_500);
  ::Reflex::Type type_25675 = ::Reflex::ReferenceBuilder(type_500c);
  ::Reflex::Type type_48202 = ::Reflex::PointerBuilder(type_5478);
  ::Reflex::Type type_5602c = ::Reflex::ConstBuilder(type_5602);
  ::Reflex::Type type_48203 = ::Reflex::PointerBuilder(type_5602c);
  ::Reflex::Type type_5905c = ::Reflex::ConstBuilder(type_5905);
  ::Reflex::Type type_25503 = ::Reflex::ReferenceBuilder(type_5905c);
  ::Reflex::Type type_25627 = ::Reflex::ReferenceBuilder(type_3104);
  ::Reflex::Type type_47348 = ::Reflex::ReferenceBuilder(type_5071);
  ::Reflex::Type type_708c = ::Reflex::ConstBuilder(type_708);
  ::Reflex::Type type_4427 = ::Reflex::PointerBuilder(type_708c);
  ::Reflex::Type type_13292 = ::Reflex::ReferenceBuilder(type_4427);
  ::Reflex::Type type_3105c = ::Reflex::ConstBuilder(type_3105);
  ::Reflex::Type type_32194 = ::Reflex::ReferenceBuilder(type_3105c);
  ::Reflex::Type type_50023 = ::Reflex::ReferenceBuilder(type_9014);
  ::Reflex::Type type_9014c = ::Reflex::ConstBuilder(type_9014);
  ::Reflex::Type type_50024 = ::Reflex::ReferenceBuilder(type_9014c);
  ::Reflex::Type type_913c = ::Reflex::ConstBuilder(type_913);
  ::Reflex::Type type_65c = ::Reflex::ConstBuilder(type_65);
  ::Reflex::Type type_48206 = ::Reflex::PointerBuilder(type_9014c);
  ::Reflex::Type type_48207 = ::Reflex::PointerBuilder(type_9014);
  ::Reflex::Type type_5603c = ::Reflex::ConstBuilder(type_5603);
  ::Reflex::Type type_48208 = ::Reflex::PointerBuilder(type_5603c);
  ::Reflex::Type type_2638 = ::Reflex::TypedefTypeBuilder(Reflex::Literal("std::string"), type_2637);
  ::Reflex::Type type_49863 = ::Reflex::ReferenceBuilder(type_8920);
  ::Reflex::Type type_8920c = ::Reflex::ConstBuilder(type_8920);
  ::Reflex::Type type_49864 = ::Reflex::ReferenceBuilder(type_8920c);
  ::Reflex::Type type_101c = ::Reflex::ConstBuilder(type_101);
  ::Reflex::Type type_4184 = ::Reflex::PointerBuilder(type_101c);
  ::Reflex::Type type_1431c = ::Reflex::ConstBuilder(type_1431);
  ::Reflex::Type type_4044 = ::Reflex::PointerBuilder(type_1431c);
  ::Reflex::Type type_48211 = ::Reflex::PointerBuilder(type_8920c);
  ::Reflex::Type type_48212 = ::Reflex::PointerBuilder(type_8920);
  ::Reflex::Type type_5604c = ::Reflex::ConstBuilder(type_5604);
  ::Reflex::Type type_48213 = ::Reflex::PointerBuilder(type_5604c);
  ::Reflex::Type type_47460 = ::Reflex::ReferenceBuilder(type_27350);
  ::Reflex::Type type_5728c = ::Reflex::ConstBuilder(type_5728);
  ::Reflex::Type type_48812 = ::Reflex::ReferenceBuilder(type_5728c);
  ::Reflex::Type type_5727c = ::Reflex::ConstBuilder(type_5727);
  ::Reflex::Type type_48807 = ::Reflex::ReferenceBuilder(type_5727c);
  ::Reflex::Type type_16617 = ::Reflex::ReferenceBuilder(type_8932);
  ::Reflex::Type type_8932c = ::Reflex::ConstBuilder(type_8932);
  ::Reflex::Type type_16619 = ::Reflex::ReferenceBuilder(type_8932c);
  ::Reflex::Type type_8938c = ::Reflex::ConstBuilder(type_8938);
  ::Reflex::Type type_20234 = ::Reflex::ReferenceBuilder(type_8938c);
  ::Reflex::Type type_9026c = ::Reflex::ConstBuilder(type_9026);
  ::Reflex::Type type_49965 = ::Reflex::ReferenceBuilder(type_9026c);
  ::Reflex::Type type_11659 = ::Reflex::PointerBuilder(type_8932);
  ::Reflex::Type type_16552 = ::Reflex::ReferenceBuilder(type_5495);
  ::Reflex::Type type_5495c = ::Reflex::ConstBuilder(type_5495);
  ::Reflex::Type type_16554 = ::Reflex::ReferenceBuilder(type_5495c);
  ::Reflex::Type type_5813c = ::Reflex::ConstBuilder(type_5813);
  ::Reflex::Type type_47491 = ::Reflex::ReferenceBuilder(type_5813c);
  ::Reflex::Type type_16615 = ::Reflex::PointerBuilder(type_8932c);
  ::Reflex::Type type_5806c = ::Reflex::ConstBuilder(type_5806);
  ::Reflex::Type type_25623 = ::Reflex::PointerBuilder(type_5806c);
  ::Reflex::Type type_3124c = ::Reflex::ConstBuilder(type_3124);
  ::Reflex::Type type_48116 = ::Reflex::PointerBuilder(type_3124c);
  ::Reflex::Type type_11090 = ::Reflex::PointerBuilder(type_5495);
  ::Reflex::Type type_16550 = ::Reflex::PointerBuilder(type_5495c);
  ::Reflex::Type type_3498c = ::Reflex::ConstBuilder(type_3498);
  ::Reflex::Type type_42451 = ::Reflex::ReferenceBuilder(type_3498c);
  ::Reflex::Type type_3123c = ::Reflex::ConstBuilder(type_3123);
  ::Reflex::Type type_44160 = ::Reflex::ReferenceBuilder(type_3123c);
  ::Reflex::Type type_44161 = ::Reflex::ReferenceBuilder(type_3123);
  ::Reflex::Type type_16812 = ::Reflex::ReferenceBuilder(type_8933);
  ::Reflex::Type type_8933c = ::Reflex::ConstBuilder(type_8933);
  ::Reflex::Type type_16814 = ::Reflex::ReferenceBuilder(type_8933c);
  ::Reflex::Type type_8849c = ::Reflex::ConstBuilder(type_8849);
  ::Reflex::Type type_15848 = ::Reflex::ReferenceBuilder(type_8849c);
  ::Reflex::Type type_11678 = ::Reflex::PointerBuilder(type_8933);
  ::Reflex::Type type_16810 = ::Reflex::PointerBuilder(type_8933c);
  ::Reflex::Type type_3507c = ::Reflex::ConstBuilder(type_3507);
  ::Reflex::Type type_42854 = ::Reflex::ReferenceBuilder(type_3507c);
  ::Reflex::Type type_3129c = ::Reflex::ConstBuilder(type_3129);
  ::Reflex::Type type_25853 = ::Reflex::ReferenceBuilder(type_3129c);
  ::Reflex::Type type_44171 = ::Reflex::ReferenceBuilder(type_3129);
  ::Reflex::Type type_48832 = ::Reflex::ReferenceBuilder(type_5732);
  ::Reflex::Type type_5732c = ::Reflex::ConstBuilder(type_5732);
  ::Reflex::Type type_48833 = ::Reflex::ReferenceBuilder(type_5732c);
  ::Reflex::Type type_5876c = ::Reflex::ConstBuilder(type_5876);
  ::Reflex::Type type_48834 = ::Reflex::ReferenceBuilder(type_5876c);
  ::Reflex::Type type_5661c = ::Reflex::ConstBuilder(type_5661);
  ::Reflex::Type type_48835 = ::Reflex::ReferenceBuilder(type_5661c);
  ::Reflex::Type type_48121 = ::Reflex::PointerBuilder(type_3129c);
  ::Reflex::Type type_5582c = ::Reflex::ConstBuilder(type_5582);
  ::Reflex::Type type_48836 = ::Reflex::ReferenceBuilder(type_5582c);
  ::Reflex::Type type_5697c = ::Reflex::ConstBuilder(type_5697);
  ::Reflex::Type type_29672 = ::Reflex::ReferenceBuilder(type_5697c);
  ::Reflex::Type type_16747 = ::Reflex::ReferenceBuilder(type_5496);
  ::Reflex::Type type_5496c = ::Reflex::ConstBuilder(type_5496);
  ::Reflex::Type type_16749 = ::Reflex::ReferenceBuilder(type_5496c);
  ::Reflex::Type type_5814c = ::Reflex::ConstBuilder(type_5814);
  ::Reflex::Type type_47505 = ::Reflex::ReferenceBuilder(type_5814c);
  ::Reflex::Type type_17007 = ::Reflex::ReferenceBuilder(type_8934);
  ::Reflex::Type type_8934c = ::Reflex::ConstBuilder(type_8934);
  ::Reflex::Type type_17009 = ::Reflex::ReferenceBuilder(type_8934c);
  ::Reflex::Type type_9176c = ::Reflex::ConstBuilder(type_9176);
  ::Reflex::Type type_20749 = ::Reflex::ReferenceBuilder(type_9176c);
  ::Reflex::Type type_11640 = ::Reflex::PointerBuilder(type_8934);
  ::Reflex::Type type_48910 = ::Reflex::ReferenceBuilder(type_5815);
  ::Reflex::Type type_5815c = ::Reflex::ConstBuilder(type_5815);
  ::Reflex::Type type_47519 = ::Reflex::ReferenceBuilder(type_5815c);
  ::Reflex::Type type_5878c = ::Reflex::ConstBuilder(type_5878);
  ::Reflex::Type type_48839 = ::Reflex::ReferenceBuilder(type_5878c);
  ::Reflex::Type type_5663c = ::Reflex::ConstBuilder(type_5663);
  ::Reflex::Type type_48840 = ::Reflex::ReferenceBuilder(type_5663c);
  ::Reflex::Type type_5348c = ::Reflex::ConstBuilder(type_5348);
  ::Reflex::Type type_48125 = ::Reflex::ReferenceBuilder(type_5348c);
  ::Reflex::Type type_3134c = ::Reflex::ConstBuilder(type_3134);
  ::Reflex::Type type_48126 = ::Reflex::PointerBuilder(type_3134c);
  ::Reflex::Type type_5584c = ::Reflex::ConstBuilder(type_5584);
  ::Reflex::Type type_48841 = ::Reflex::ReferenceBuilder(type_5584c);
  ::Reflex::Type type_17005 = ::Reflex::PointerBuilder(type_8934c);
  ::Reflex::Type type_5733c = ::Reflex::ConstBuilder(type_5733);
  ::Reflex::Type type_48838 = ::Reflex::ReferenceBuilder(type_5733c);
  ::Reflex::Type type_4392c = ::Reflex::ConstBuilder(type_4392);
  ::Reflex::Type type_25622 = ::Reflex::ReferenceBuilder(type_4392c);
  ::Reflex::Type type_5251c = ::Reflex::ConstBuilder(type_5251);
  ::Reflex::Type type_48127 = ::Reflex::ReferenceBuilder(type_5251c);
  ::Reflex::Type type_48128 = ::Reflex::ReferenceBuilder(type_5348);
  ::Reflex::Type type_5700 = ::Reflex::TypedefTypeBuilder(Reflex::Literal("edm::helper_vector"), type_5699);
  ::Reflex::Type type_25628 = ::Reflex::ReferenceBuilder(type_5700);
  ::Reflex::Type type_16682 = ::Reflex::ReferenceBuilder(type_5307);
  ::Reflex::Type type_5307c = ::Reflex::ConstBuilder(type_5307);
  ::Reflex::Type type_16684 = ::Reflex::ReferenceBuilder(type_5307c);
  ::Reflex::Type type_5781c = ::Reflex::ConstBuilder(type_5781);
  ::Reflex::Type type_48075 = ::Reflex::ReferenceBuilder(type_5781c);
  ::Reflex::Type type_11109 = ::Reflex::PointerBuilder(type_5307);
  ::Reflex::Type type_16680 = ::Reflex::PointerBuilder(type_5307c);
  ::Reflex::Type type_3505c = ::Reflex::ConstBuilder(type_3505);
  ::Reflex::Type type_42464 = ::Reflex::ReferenceBuilder(type_3505c);
  ::Reflex::Type type_3127c = ::Reflex::ConstBuilder(type_3127);
  ::Reflex::Type type_44165 = ::Reflex::ReferenceBuilder(type_3127c);
  ::Reflex::Type type_44166 = ::Reflex::ReferenceBuilder(type_3127);
  ::Reflex::Type type_5343c = ::Reflex::ConstBuilder(type_5343);
  ::Reflex::Type type_48120 = ::Reflex::ReferenceBuilder(type_5343c);
  ::Reflex::Type type_5250c = ::Reflex::ConstBuilder(type_5250);
  ::Reflex::Type type_48122 = ::Reflex::ReferenceBuilder(type_5250c);
  ::Reflex::Type type_48123 = ::Reflex::ReferenceBuilder(type_5343);
  ::Reflex::Type type_16422 = ::Reflex::ReferenceBuilder(type_8931);
  ::Reflex::Type type_8931c = ::Reflex::ConstBuilder(type_8931);
  ::Reflex::Type type_16424 = ::Reflex::ReferenceBuilder(type_8931c);
  ::Reflex::Type type_9048c = ::Reflex::ConstBuilder(type_9048);
  ::Reflex::Type type_20491 = ::Reflex::ReferenceBuilder(type_9048c);
  ::Reflex::Type type_11716 = ::Reflex::PointerBuilder(type_8931);
  ::Reflex::Type type_16420 = ::Reflex::PointerBuilder(type_8931c);
  ::Reflex::Type type_3491c = ::Reflex::ConstBuilder(type_3491);
  ::Reflex::Type type_42880 = ::Reflex::ReferenceBuilder(type_3491c);
  ::Reflex::Type type_3119c = ::Reflex::ConstBuilder(type_3119);
  ::Reflex::Type type_25829 = ::Reflex::ReferenceBuilder(type_3119c);
  ::Reflex::Type type_44155 = ::Reflex::ReferenceBuilder(type_3119);
  ::Reflex::Type type_16877 = ::Reflex::ReferenceBuilder(type_5308);
  ::Reflex::Type type_5308c = ::Reflex::ConstBuilder(type_5308);
  ::Reflex::Type type_16879 = ::Reflex::ReferenceBuilder(type_5308c);
  ::Reflex::Type type_5782c = ::Reflex::ConstBuilder(type_5782);
  ::Reflex::Type type_48078 = ::Reflex::ReferenceBuilder(type_5782c);
  ::Reflex::Type type_11147 = ::Reflex::PointerBuilder(type_5308);
  ::Reflex::Type type_16875 = ::Reflex::PointerBuilder(type_5308c);
  ::Reflex::Type type_3514c = ::Reflex::ConstBuilder(type_3514);
  ::Reflex::Type type_42490 = ::Reflex::ReferenceBuilder(type_3514c);
  ::Reflex::Type type_3132c = ::Reflex::ConstBuilder(type_3132);
  ::Reflex::Type type_44173 = ::Reflex::ReferenceBuilder(type_3132c);
  ::Reflex::Type type_44174 = ::Reflex::ReferenceBuilder(type_3132);
  ::Reflex::Type type_5338c = ::Reflex::ConstBuilder(type_5338);
  ::Reflex::Type type_48115 = ::Reflex::ReferenceBuilder(type_5338c);
  ::Reflex::Type type_5249c = ::Reflex::ConstBuilder(type_5249);
  ::Reflex::Type type_48117 = ::Reflex::ReferenceBuilder(type_5249c);
  ::Reflex::Type type_48118 = ::Reflex::ReferenceBuilder(type_5338);
  ::Reflex::Type type_48908 = ::Reflex::ReferenceBuilder(type_5813);
  ::Reflex::Type type_5875c = ::Reflex::ConstBuilder(type_5875);
  ::Reflex::Type type_48829 = ::Reflex::ReferenceBuilder(type_5875c);
  ::Reflex::Type type_5660c = ::Reflex::ConstBuilder(type_5660);
  ::Reflex::Type type_48830 = ::Reflex::ReferenceBuilder(type_5660c);
  ::Reflex::Type type_5581c = ::Reflex::ConstBuilder(type_5581);
  ::Reflex::Type type_48831 = ::Reflex::ReferenceBuilder(type_5581c);
  ::Reflex::Type type_5731c = ::Reflex::ConstBuilder(type_5731);
  ::Reflex::Type type_48828 = ::Reflex::ReferenceBuilder(type_5731c);
  ::Reflex::Type type_16487 = ::Reflex::ReferenceBuilder(type_5306);
  ::Reflex::Type type_5306c = ::Reflex::ConstBuilder(type_5306);
  ::Reflex::Type type_16489 = ::Reflex::ReferenceBuilder(type_5306c);
  ::Reflex::Type type_5780c = ::Reflex::ConstBuilder(type_5780);
  ::Reflex::Type type_48072 = ::Reflex::ReferenceBuilder(type_5780c);
  ::Reflex::Type type_16292 = ::Reflex::ReferenceBuilder(type_5305);
  ::Reflex::Type type_5305c = ::Reflex::ConstBuilder(type_5305);
  ::Reflex::Type type_16294 = ::Reflex::ReferenceBuilder(type_5305c);
  ::Reflex::Type type_5779c = ::Reflex::ConstBuilder(type_5779);
  ::Reflex::Type type_48069 = ::Reflex::ReferenceBuilder(type_5779c);
  ::Reflex::Type type_11033 = ::Reflex::PointerBuilder(type_5305);
  ::Reflex::Type type_16290 = ::Reflex::PointerBuilder(type_5305c);
  ::Reflex::Type type_3489c = ::Reflex::ConstBuilder(type_3489);
  ::Reflex::Type type_42412 = ::Reflex::ReferenceBuilder(type_3489c);
  ::Reflex::Type type_3117c = ::Reflex::ConstBuilder(type_3117);
  ::Reflex::Type type_44149 = ::Reflex::ReferenceBuilder(type_3117c);
  ::Reflex::Type type_44150 = ::Reflex::ReferenceBuilder(type_3117);
  ::Reflex::Type type_3516c = ::Reflex::ConstBuilder(type_3516);
  ::Reflex::Type type_42828 = ::Reflex::ReferenceBuilder(type_3516c);
  ::Reflex::Type type_25865 = ::Reflex::ReferenceBuilder(type_3134c);
  ::Reflex::Type type_44179 = ::Reflex::ReferenceBuilder(type_3134);
  ::Reflex::Type type_16357 = ::Reflex::ReferenceBuilder(type_5494);
  ::Reflex::Type type_5494c = ::Reflex::ConstBuilder(type_5494);
  ::Reflex::Type type_16359 = ::Reflex::ReferenceBuilder(type_5494c);
  ::Reflex::Type type_5811c = ::Reflex::ConstBuilder(type_5811);
  ::Reflex::Type type_47477 = ::Reflex::ReferenceBuilder(type_5811c);
  ::Reflex::Type type_48111 = ::Reflex::PointerBuilder(type_3119c);
  ::Reflex::Type type_11052 = ::Reflex::PointerBuilder(type_5494);
  ::Reflex::Type type_16355 = ::Reflex::PointerBuilder(type_5494c);
  ::Reflex::Type type_3490c = ::Reflex::ConstBuilder(type_3490);
  ::Reflex::Type type_42425 = ::Reflex::ReferenceBuilder(type_3490c);
  ::Reflex::Type type_3118c = ::Reflex::ConstBuilder(type_3118);
  ::Reflex::Type type_44152 = ::Reflex::ReferenceBuilder(type_3118c);
  ::Reflex::Type type_44153 = ::Reflex::ReferenceBuilder(type_3118);
  ::Reflex::Type type_48907 = ::Reflex::ReferenceBuilder(type_5811);
  ::Reflex::Type type_5874c = ::Reflex::ConstBuilder(type_5874);
  ::Reflex::Type type_48819 = ::Reflex::ReferenceBuilder(type_5874c);
  ::Reflex::Type type_5659c = ::Reflex::ConstBuilder(type_5659);
  ::Reflex::Type type_48820 = ::Reflex::ReferenceBuilder(type_5659c);
  ::Reflex::Type type_5333c = ::Reflex::ConstBuilder(type_5333);
  ::Reflex::Type type_48110 = ::Reflex::ReferenceBuilder(type_5333c);
  ::Reflex::Type type_5580c = ::Reflex::ConstBuilder(type_5580);
  ::Reflex::Type type_48821 = ::Reflex::ReferenceBuilder(type_5580c);
  ::Reflex::Type type_5729c = ::Reflex::ConstBuilder(type_5729);
  ::Reflex::Type type_48818 = ::Reflex::ReferenceBuilder(type_5729c);
  ::Reflex::Type type_16942 = ::Reflex::ReferenceBuilder(type_5497);
  ::Reflex::Type type_5497c = ::Reflex::ConstBuilder(type_5497);
  ::Reflex::Type type_16944 = ::Reflex::ReferenceBuilder(type_5497c);
  ::Reflex::Type type_5248c = ::Reflex::ConstBuilder(type_5248);
  ::Reflex::Type type_48112 = ::Reflex::ReferenceBuilder(type_5248c);
  ::Reflex::Type type_48113 = ::Reflex::ReferenceBuilder(type_5333);
  ::Reflex::Type type_48909 = ::Reflex::ReferenceBuilder(type_5814);
  ::Reflex::Type type_3499c = ::Reflex::ConstBuilder(type_3499);
  ::Reflex::Type type_42841 = ::Reflex::ReferenceBuilder(type_3499c);
  ::Reflex::Type type_25841 = ::Reflex::ReferenceBuilder(type_3124c);
  ::Reflex::Type type_44163 = ::Reflex::ReferenceBuilder(type_3124);
  ::Reflex::Type type_48827 = ::Reflex::ReferenceBuilder(type_5731);
  ::Reflex::Type type_11128 = ::Reflex::PointerBuilder(type_5496);
  ::Reflex::Type type_16745 = ::Reflex::PointerBuilder(type_5496c);
  ::Reflex::Type type_3506c = ::Reflex::ConstBuilder(type_3506);
  ::Reflex::Type type_42477 = ::Reflex::ReferenceBuilder(type_3506c);
  ::Reflex::Type type_3128c = ::Reflex::ConstBuilder(type_3128);
  ::Reflex::Type type_44168 = ::Reflex::ReferenceBuilder(type_3128c);
  ::Reflex::Type type_44169 = ::Reflex::ReferenceBuilder(type_3128);
  ::Reflex::Type type_11166 = ::Reflex::PointerBuilder(type_5497);
  ::Reflex::Type type_16940 = ::Reflex::PointerBuilder(type_5497c);
  ::Reflex::Type type_3515c = ::Reflex::ConstBuilder(type_3515);
  ::Reflex::Type type_42503 = ::Reflex::ReferenceBuilder(type_3515c);
  ::Reflex::Type type_3133c = ::Reflex::ConstBuilder(type_3133);
  ::Reflex::Type type_44176 = ::Reflex::ReferenceBuilder(type_3133c);
  ::Reflex::Type type_44177 = ::Reflex::ReferenceBuilder(type_3133);
  ::Reflex::Type type_48837 = ::Reflex::ReferenceBuilder(type_5733);
  ::Reflex::Type type_48817 = ::Reflex::ReferenceBuilder(type_5729);
  ::Reflex::Type type_11071 = ::Reflex::PointerBuilder(type_5306);
  ::Reflex::Type type_16485 = ::Reflex::PointerBuilder(type_5306c);
  ::Reflex::Type type_3497c = ::Reflex::ConstBuilder(type_3497);
  ::Reflex::Type type_42438 = ::Reflex::ReferenceBuilder(type_3497c);
  ::Reflex::Type type_3122c = ::Reflex::ConstBuilder(type_3122);
  ::Reflex::Type type_44157 = ::Reflex::ReferenceBuilder(type_3122c);
  ::Reflex::Type type_44158 = ::Reflex::ReferenceBuilder(type_3122);
  ::Reflex::Type type_5287c = ::Reflex::ConstBuilder(type_5287);
  ::Reflex::Type type_48068 = ::Reflex::ReferenceBuilder(type_5287c);
  ::Reflex::Type type_53c = ::Reflex::ConstBuilder(type_53);
  ::Reflex::Type type_48070 = ::Reflex::ReferenceBuilder(type_5287);
  ::Reflex::Type type_5288c = ::Reflex::ConstBuilder(type_5288);
  ::Reflex::Type type_48071 = ::Reflex::ReferenceBuilder(type_5288c);
  ::Reflex::Type type_48073 = ::Reflex::ReferenceBuilder(type_5288);
  ::Reflex::Type type_5289c = ::Reflex::ConstBuilder(type_5289);
  ::Reflex::Type type_48074 = ::Reflex::ReferenceBuilder(type_5289c);
  ::Reflex::Type type_48076 = ::Reflex::ReferenceBuilder(type_5289);
  ::Reflex::Type type_5290c = ::Reflex::ConstBuilder(type_5290);
  ::Reflex::Type type_48077 = ::Reflex::ReferenceBuilder(type_5290c);
  ::Reflex::Type type_48079 = ::Reflex::ReferenceBuilder(type_5290);
  ::Reflex::Type type_5802c = ::Reflex::ConstBuilder(type_5802);
  ::Reflex::Type type_48895 = ::Reflex::ReferenceBuilder(type_5802c);
  ::Reflex::Type type_2166 = ::Reflex::TypedefTypeBuilder(Reflex::Literal("size_t"), type_53);
  ::Reflex::Type type_48896 = ::Reflex::ReferenceBuilder(type_5802);
  ::Reflex::Type type_3110c = ::Reflex::ConstBuilder(type_3110);
  ::Reflex::Type type_44141 = ::Reflex::ReferenceBuilder(type_3110c);
  ::Reflex::Type type_48216 = ::Reflex::PointerBuilder(type_5802c);
  ::Reflex::Type type_48217 = ::Reflex::PointerBuilder(type_5802);
  ::Reflex::Type type_5605c = ::Reflex::ConstBuilder(type_5605);
  ::Reflex::Type type_48218 = ::Reflex::PointerBuilder(type_5605c);
  ::Reflex::Type type_48221 = ::Reflex::PointerBuilder(type_3117c);
  ::Reflex::Type type_48222 = ::Reflex::PointerBuilder(type_3117);
  ::Reflex::Type type_5606c = ::Reflex::ConstBuilder(type_5606);
  ::Reflex::Type type_48223 = ::Reflex::PointerBuilder(type_5606c);
  ::Reflex::Type type_48226 = ::Reflex::PointerBuilder(type_3118c);
  ::Reflex::Type type_48227 = ::Reflex::PointerBuilder(type_3118);
  ::Reflex::Type type_5607c = ::Reflex::ConstBuilder(type_5607);
  ::Reflex::Type type_48228 = ::Reflex::PointerBuilder(type_5607c);
  ::Reflex::Type type_48231 = ::Reflex::PointerBuilder(type_5333c);
  ::Reflex::Type type_48232 = ::Reflex::PointerBuilder(type_5333);
  ::Reflex::Type type_5608c = ::Reflex::ConstBuilder(type_5608);
  ::Reflex::Type type_48233 = ::Reflex::PointerBuilder(type_5608c);
  ::Reflex::Type type_48236 = ::Reflex::PointerBuilder(type_3119);
  ::Reflex::Type type_5609c = ::Reflex::ConstBuilder(type_5609);
  ::Reflex::Type type_48237 = ::Reflex::PointerBuilder(type_5609c);
  ::Reflex::Type type_5803c = ::Reflex::ConstBuilder(type_5803);
  ::Reflex::Type type_48897 = ::Reflex::ReferenceBuilder(type_5803c);
  ::Reflex::Type type_48898 = ::Reflex::ReferenceBuilder(type_5803);
  ::Reflex::Type type_48240 = ::Reflex::PointerBuilder(type_5803c);
  ::Reflex::Type type_48241 = ::Reflex::PointerBuilder(type_5803);
  ::Reflex::Type type_5610c = ::Reflex::ConstBuilder(type_5610);
  ::Reflex::Type type_48242 = ::Reflex::PointerBuilder(type_5610c);
  ::Reflex::Type type_48245 = ::Reflex::PointerBuilder(type_3122c);
  ::Reflex::Type type_48246 = ::Reflex::PointerBuilder(type_3122);
  ::Reflex::Type type_5611c = ::Reflex::ConstBuilder(type_5611);
  ::Reflex::Type type_48247 = ::Reflex::PointerBuilder(type_5611c);
  ::Reflex::Type type_48250 = ::Reflex::PointerBuilder(type_3123c);
  ::Reflex::Type type_48251 = ::Reflex::PointerBuilder(type_3123);
  ::Reflex::Type type_5612c = ::Reflex::ConstBuilder(type_5612);
  ::Reflex::Type type_48252 = ::Reflex::PointerBuilder(type_5612c);
  ::Reflex::Type type_48255 = ::Reflex::PointerBuilder(type_5338c);
  ::Reflex::Type type_48256 = ::Reflex::PointerBuilder(type_5338);
  ::Reflex::Type type_5613c = ::Reflex::ConstBuilder(type_5613);
  ::Reflex::Type type_48257 = ::Reflex::PointerBuilder(type_5613c);
  ::Reflex::Type type_48260 = ::Reflex::PointerBuilder(type_3124);
  ::Reflex::Type type_5614c = ::Reflex::ConstBuilder(type_5614);
  ::Reflex::Type type_48261 = ::Reflex::PointerBuilder(type_5614c);
  ::Reflex::Type type_5804c = ::Reflex::ConstBuilder(type_5804);
  ::Reflex::Type type_48899 = ::Reflex::ReferenceBuilder(type_5804c);
  ::Reflex::Type type_48900 = ::Reflex::ReferenceBuilder(type_5804);
  ::Reflex::Type type_48264 = ::Reflex::PointerBuilder(type_5804c);
  ::Reflex::Type type_48265 = ::Reflex::PointerBuilder(type_5804);
  ::Reflex::Type type_5615c = ::Reflex::ConstBuilder(type_5615);
  ::Reflex::Type type_48266 = ::Reflex::PointerBuilder(type_5615c);
  ::Reflex::Type type_48269 = ::Reflex::PointerBuilder(type_3127c);
  ::Reflex::Type type_48270 = ::Reflex::PointerBuilder(type_3127);
  ::Reflex::Type type_5616c = ::Reflex::ConstBuilder(type_5616);
  ::Reflex::Type type_48271 = ::Reflex::PointerBuilder(type_5616c);
  ::Reflex::Type type_48274 = ::Reflex::PointerBuilder(type_3128c);
  ::Reflex::Type type_48275 = ::Reflex::PointerBuilder(type_3128);
  ::Reflex::Type type_5617c = ::Reflex::ConstBuilder(type_5617);
  ::Reflex::Type type_48276 = ::Reflex::PointerBuilder(type_5617c);
  ::Reflex::Type type_48279 = ::Reflex::PointerBuilder(type_5343c);
  ::Reflex::Type type_48280 = ::Reflex::PointerBuilder(type_5343);
  ::Reflex::Type type_5618c = ::Reflex::ConstBuilder(type_5618);
  ::Reflex::Type type_48281 = ::Reflex::PointerBuilder(type_5618c);
  ::Reflex::Type type_48284 = ::Reflex::PointerBuilder(type_3129);
  ::Reflex::Type type_5619c = ::Reflex::ConstBuilder(type_5619);
  ::Reflex::Type type_48285 = ::Reflex::PointerBuilder(type_5619c);
  ::Reflex::Type type_5805c = ::Reflex::ConstBuilder(type_5805);
  ::Reflex::Type type_48901 = ::Reflex::ReferenceBuilder(type_5805c);
  ::Reflex::Type type_48902 = ::Reflex::ReferenceBuilder(type_5805);
  ::Reflex::Type type_48288 = ::Reflex::PointerBuilder(type_5805c);
  ::Reflex::Type type_48289 = ::Reflex::PointerBuilder(type_5805);
  ::Reflex::Type type_5620c = ::Reflex::ConstBuilder(type_5620);
  ::Reflex::Type type_48290 = ::Reflex::PointerBuilder(type_5620c);
  ::Reflex::Type type_48293 = ::Reflex::PointerBuilder(type_3132c);
  ::Reflex::Type type_48294 = ::Reflex::PointerBuilder(type_3132);
  ::Reflex::Type type_5621c = ::Reflex::ConstBuilder(type_5621);
  ::Reflex::Type type_48295 = ::Reflex::PointerBuilder(type_5621c);
  ::Reflex::Type type_48298 = ::Reflex::PointerBuilder(type_3133c);
  ::Reflex::Type type_48299 = ::Reflex::PointerBuilder(type_3133);
  ::Reflex::Type type_5622c = ::Reflex::ConstBuilder(type_5622);
  ::Reflex::Type type_48300 = ::Reflex::PointerBuilder(type_5622c);
  ::Reflex::Type type_48303 = ::Reflex::PointerBuilder(type_5348c);
  ::Reflex::Type type_48304 = ::Reflex::PointerBuilder(type_5348);
  ::Reflex::Type type_5623c = ::Reflex::ConstBuilder(type_5623);
  ::Reflex::Type type_48305 = ::Reflex::PointerBuilder(type_5623c);
  ::Reflex::Type type_48308 = ::Reflex::PointerBuilder(type_3134);
  ::Reflex::Type type_5624c = ::Reflex::ConstBuilder(type_5624);
  ::Reflex::Type type_48309 = ::Reflex::PointerBuilder(type_5624c);
  ::Reflex::Type type_48883 = ::Reflex::ReferenceBuilder(type_5779);
  ::Reflex::Type type_48884 = ::Reflex::ReferenceBuilder(type_5780);
  ::Reflex::Type type_48885 = ::Reflex::ReferenceBuilder(type_5781);
  ::Reflex::Type type_48886 = ::Reflex::ReferenceBuilder(type_5782);
  ::Reflex::Type type_49987 = ::Reflex::ReferenceBuilder(type_8968);
  ::Reflex::Type type_8968c = ::Reflex::ConstBuilder(type_8968);
  ::Reflex::Type type_49988 = ::Reflex::ReferenceBuilder(type_8968c);
  ::Reflex::Type type_5812c = ::Reflex::ConstBuilder(type_5812);
  ::Reflex::Type type_16164 = ::Reflex::ReferenceBuilder(type_5812c);
  ::Reflex::Type type_49989 = ::Reflex::ReferenceBuilder(type_8969);
  ::Reflex::Type type_8969c = ::Reflex::ConstBuilder(type_8969);
  ::Reflex::Type type_49990 = ::Reflex::ReferenceBuilder(type_8969c);
  ::Reflex::Type type_49991 = ::Reflex::ReferenceBuilder(type_8970);
  ::Reflex::Type type_8970c = ::Reflex::ConstBuilder(type_8970);
  ::Reflex::Type type_49992 = ::Reflex::ReferenceBuilder(type_8970c);
  ::Reflex::Type type_49993 = ::Reflex::ReferenceBuilder(type_8971);
  ::Reflex::Type type_8971c = ::Reflex::ConstBuilder(type_8971);
  ::Reflex::Type type_49994 = ::Reflex::ReferenceBuilder(type_8971c);
  ::Reflex::Type type_54424 = ::Reflex::ReferenceBuilder(type_29587);
  ::Reflex::Type type_29587c = ::Reflex::ConstBuilder(type_29587);
  ::Reflex::Type type_54425 = ::Reflex::ReferenceBuilder(type_29587c);
  ::Reflex::Type type_27062 = ::Reflex::PointerBuilder(type_15132);
  ::Reflex::Type type_15132c = ::Reflex::ConstBuilder(type_15132);
  ::Reflex::Type type_51756 = ::Reflex::ReferenceBuilder(type_15132c);
  ::Reflex::Type type_27064 = ::Reflex::ReferenceBuilder(type_15132);
  ::Reflex::Type type_13113 = ::Reflex::ReferenceBuilder(type_2637);
  ::Reflex::Type type_54426 = ::Reflex::ReferenceBuilder(type_29588);
  ::Reflex::Type type_29588c = ::Reflex::ConstBuilder(type_29588);
  ::Reflex::Type type_54427 = ::Reflex::ReferenceBuilder(type_29588c);
  ::Reflex::Type type_54428 = ::Reflex::ReferenceBuilder(type_29589);
  ::Reflex::Type type_29589c = ::Reflex::ConstBuilder(type_29589);
  ::Reflex::Type type_54429 = ::Reflex::ReferenceBuilder(type_29589c);
  ::Reflex::Type type_54430 = ::Reflex::ReferenceBuilder(type_29590);
  ::Reflex::Type type_29590c = ::Reflex::ConstBuilder(type_29590);
  ::Reflex::Type type_54431 = ::Reflex::ReferenceBuilder(type_29590c);
  ::Reflex::Type type_29596c = ::Reflex::ConstBuilder(type_29596);
  ::Reflex::Type type_54436 = ::Reflex::ReferenceBuilder(type_29596c);
  ::Reflex::Type type_54437 = ::Reflex::ReferenceBuilder(type_29596);
  ::Reflex::Type type_48847 = ::Reflex::PointerBuilder(type_29582);
  ::Reflex::Type type_8923c = ::Reflex::ConstBuilder(type_8923);
  ::Reflex::Type type_48850 = ::Reflex::PointerBuilder(type_8923c);
  ::Reflex::Type type_29582c = ::Reflex::ConstBuilder(type_29582);
  ::Reflex::Type type_54421 = ::Reflex::ReferenceBuilder(type_29582c);
  ::Reflex::Type type_29597c = ::Reflex::ConstBuilder(type_29597);
  ::Reflex::Type type_54438 = ::Reflex::ReferenceBuilder(type_29597c);
  ::Reflex::Type type_54439 = ::Reflex::ReferenceBuilder(type_29597);
  ::Reflex::Type type_48851 = ::Reflex::PointerBuilder(type_29583);
  ::Reflex::Type type_7116c = ::Reflex::ConstBuilder(type_7116);
  ::Reflex::Type type_48854 = ::Reflex::PointerBuilder(type_7116c);
  ::Reflex::Type type_29583c = ::Reflex::ConstBuilder(type_29583);
  ::Reflex::Type type_54423 = ::Reflex::ReferenceBuilder(type_29583c);
  ::Reflex::Type type_29598c = ::Reflex::ConstBuilder(type_29598);
  ::Reflex::Type type_54440 = ::Reflex::ReferenceBuilder(type_29598c);
  ::Reflex::Type type_54441 = ::Reflex::ReferenceBuilder(type_29598);
  ::Reflex::Type type_29599c = ::Reflex::ConstBuilder(type_29599);
  ::Reflex::Type type_54442 = ::Reflex::ReferenceBuilder(type_29599c);
  ::Reflex::Type type_54443 = ::Reflex::ReferenceBuilder(type_29599);
  ::Reflex::Type type_29600c = ::Reflex::ConstBuilder(type_29600);
  ::Reflex::Type type_54444 = ::Reflex::ReferenceBuilder(type_29600c);
  ::Reflex::Type type_54445 = ::Reflex::ReferenceBuilder(type_29600);
  ::Reflex::Type type_29601c = ::Reflex::ConstBuilder(type_29601);
  ::Reflex::Type type_54446 = ::Reflex::ReferenceBuilder(type_29601c);
  ::Reflex::Type type_54447 = ::Reflex::ReferenceBuilder(type_29601);
  ::Reflex::Type type_29602c = ::Reflex::ConstBuilder(type_29602);
  ::Reflex::Type type_54448 = ::Reflex::ReferenceBuilder(type_29602c);
  ::Reflex::Type type_54449 = ::Reflex::ReferenceBuilder(type_29602);
  ::Reflex::Type type_29603c = ::Reflex::ConstBuilder(type_29603);
  ::Reflex::Type type_54450 = ::Reflex::ReferenceBuilder(type_29603c);
  ::Reflex::Type type_54451 = ::Reflex::ReferenceBuilder(type_29603);
  ::Reflex::Type type_5287f = ::Reflex::TypedefTypeBuilder(Reflex::Literal("edm::PtrVector<reco::FFTJPTJet>"), type_5287);
  ::Reflex::Type type_5288f = ::Reflex::TypedefTypeBuilder(Reflex::Literal("edm::PtrVector<reco::FFTTrackJet>"), type_5288);
  ::Reflex::Type type_5289f = ::Reflex::TypedefTypeBuilder(Reflex::Literal("edm::PtrVector<reco::FFTPFJet>"), type_5289);
  ::Reflex::Type type_5290f = ::Reflex::TypedefTypeBuilder(Reflex::Literal("edm::PtrVector<reco::FFTBasicJet>"), type_5290);
  ::Reflex::Type type_5452f = ::Reflex::TypedefTypeBuilder(Reflex::Literal("edm::Wrapper<edm::Association<reco::FFTJPTJetCollection> >"), type_5452);
  ::Reflex::Type type_5453f = ::Reflex::TypedefTypeBuilder(Reflex::Literal("edm::Wrapper<reco::FFTJPTJetFwdPtrVector>"), type_5453);
  ::Reflex::Type type_5454f = ::Reflex::TypedefTypeBuilder(Reflex::Literal("edm::Wrapper<reco::FFTJPTJetFwdRefVector>"), type_5454);
  ::Reflex::Type type_5455f = ::Reflex::TypedefTypeBuilder(Reflex::Literal("edm::Wrapper<reco::FFTJPTJetRefVector>"), type_5455);
  ::Reflex::Type type_5456f = ::Reflex::TypedefTypeBuilder(Reflex::Literal("edm::Wrapper<reco::FFTJPTJetCollection>"), type_5456);
  ::Reflex::Type type_5457f = ::Reflex::TypedefTypeBuilder(Reflex::Literal("edm::Wrapper<edm::Association<reco::FFTTrackJetCollection> >"), type_5457);
  ::Reflex::Type type_5458f = ::Reflex::TypedefTypeBuilder(Reflex::Literal("edm::Wrapper<reco::FFTTrackJetFwdPtrVector>"), type_5458);
  ::Reflex::Type type_5459f = ::Reflex::TypedefTypeBuilder(Reflex::Literal("edm::Wrapper<reco::FFTTrackJetFwdRefVector>"), type_5459);
  ::Reflex::Type type_5460f = ::Reflex::TypedefTypeBuilder(Reflex::Literal("edm::Wrapper<reco::FFTTrackJetRefVector>"), type_5460);
  ::Reflex::Type type_5461f = ::Reflex::TypedefTypeBuilder(Reflex::Literal("edm::Wrapper<reco::FFTTrackJetCollection>"), type_5461);
  ::Reflex::Type type_5462f = ::Reflex::TypedefTypeBuilder(Reflex::Literal("edm::Wrapper<edm::Association<reco::FFTPFJetCollection> >"), type_5462);
  ::Reflex::Type type_5463f = ::Reflex::TypedefTypeBuilder(Reflex::Literal("edm::Wrapper<reco::FFTPFJetFwdPtrVector>"), type_5463);
  ::Reflex::Type type_5464f = ::Reflex::TypedefTypeBuilder(Reflex::Literal("edm::Wrapper<reco::FFTPFJetFwdRefVector>"), type_5464);
  ::Reflex::Type type_5465f = ::Reflex::TypedefTypeBuilder(Reflex::Literal("edm::Wrapper<reco::FFTPFJetRefVector>"), type_5465);
  ::Reflex::Type type_5466f = ::Reflex::TypedefTypeBuilder(Reflex::Literal("edm::Wrapper<reco::FFTPFJetCollection>"), type_5466);
  ::Reflex::Type type_5467f = ::Reflex::TypedefTypeBuilder(Reflex::Literal("edm::Wrapper<edm::Association<reco::FFTBasicJetCollection> >"), type_5467);
  ::Reflex::Type type_5468f = ::Reflex::TypedefTypeBuilder(Reflex::Literal("edm::Wrapper<reco::FFTBasicJetFwdPtrVector>"), type_5468);
  ::Reflex::Type type_5469f = ::Reflex::TypedefTypeBuilder(Reflex::Literal("edm::Wrapper<reco::FFTBasicJetFwdRefVector>"), type_5469);
  ::Reflex::Type type_5470f = ::Reflex::TypedefTypeBuilder(Reflex::Literal("edm::Wrapper<reco::FFTBasicJetRefVector>"), type_5470);
  ::Reflex::Type type_5471f = ::Reflex::TypedefTypeBuilder(Reflex::Literal("edm::Wrapper<reco::FFTBasicJetCollection>"), type_5471);
  ::Reflex::Type type_5779f = ::Reflex::TypedefTypeBuilder(Reflex::Literal("edm::Ptr<reco::FFTJPTJet>"), type_5779);
  ::Reflex::Type type_5780f = ::Reflex::TypedefTypeBuilder(Reflex::Literal("edm::Ptr<reco::FFTTrackJet>"), type_5780);
  ::Reflex::Type type_5781f = ::Reflex::TypedefTypeBuilder(Reflex::Literal("edm::Ptr<reco::FFTPFJet>"), type_5781);
  ::Reflex::Type type_5782f = ::Reflex::TypedefTypeBuilder(Reflex::Literal("edm::Ptr<reco::FFTBasicJet>"), type_5782);
  ::Reflex::Type type_5802f = ::Reflex::TypedefTypeBuilder(Reflex::Literal("edm::Association<reco::FFTJPTJetCollection>"), type_5802);
  ::Reflex::Type type_5803f = ::Reflex::TypedefTypeBuilder(Reflex::Literal("edm::Association<reco::FFTTrackJetCollection>"), type_5803);
  ::Reflex::Type type_5804f = ::Reflex::TypedefTypeBuilder(Reflex::Literal("edm::Association<reco::FFTPFJetCollection>"), type_5804);
  ::Reflex::Type type_5805f = ::Reflex::TypedefTypeBuilder(Reflex::Literal("edm::Association<reco::FFTBasicJetCollection>"), type_5805);
  ::Reflex::Type type_8968f = ::Reflex::TypedefTypeBuilder(Reflex::Literal("reco::JetTrackMatch<reco::FFTJPTJetCollection>"), type_8968);
  ::Reflex::Type type_8969f = ::Reflex::TypedefTypeBuilder(Reflex::Literal("reco::JetTrackMatch<reco::FFTTrackJetCollection>"), type_8969);
  ::Reflex::Type type_8970f = ::Reflex::TypedefTypeBuilder(Reflex::Literal("reco::JetTrackMatch<reco::FFTPFJetCollection>"), type_8970);
  ::Reflex::Type type_8971f = ::Reflex::TypedefTypeBuilder(Reflex::Literal("reco::JetTrackMatch<reco::FFTBasicJetCollection>"), type_8971);
  ::Reflex::Type type_29587f = ::Reflex::TypedefTypeBuilder(Reflex::Literal("edm::reftobase::RefHolder<reco::FFTJPTJetRef>"), type_29587);
  ::Reflex::Type type_29588f = ::Reflex::TypedefTypeBuilder(Reflex::Literal("edm::reftobase::RefHolder<reco::FFTTrackJetRef>"), type_29588);
  ::Reflex::Type type_29589f = ::Reflex::TypedefTypeBuilder(Reflex::Literal("edm::reftobase::RefHolder<reco::FFTPFJetRef>"), type_29589);
  ::Reflex::Type type_29590f = ::Reflex::TypedefTypeBuilder(Reflex::Literal("edm::reftobase::RefHolder<reco::FFTBasicJetRef>"), type_29590);
  ::Reflex::Type type_29596f = ::Reflex::TypedefTypeBuilder(Reflex::Literal("edm::reftobase::Holder<reco::Jet, reco::FFTJPTJetRef>"), type_29596);
  ::Reflex::Type type_29597f = ::Reflex::TypedefTypeBuilder(Reflex::Literal("edm::reftobase::Holder<reco::Candidate, reco::FFTJPTJetRef>"), type_29597);
  ::Reflex::Type type_29598f = ::Reflex::TypedefTypeBuilder(Reflex::Literal("edm::reftobase::Holder<reco::Jet, reco::FFTTrackJetRef>"), type_29598);
  ::Reflex::Type type_29599f = ::Reflex::TypedefTypeBuilder(Reflex::Literal("edm::reftobase::Holder<reco::Candidate, reco::FFTTrackJetRef>"), type_29599);
  ::Reflex::Type type_29600f = ::Reflex::TypedefTypeBuilder(Reflex::Literal("edm::reftobase::Holder<reco::Jet, reco::FFTPFJetRef>"), type_29600);
  ::Reflex::Type type_29601f = ::Reflex::TypedefTypeBuilder(Reflex::Literal("edm::reftobase::Holder<reco::Candidate, reco::FFTPFJetRef>"), type_29601);
  ::Reflex::Type type_29602f = ::Reflex::TypedefTypeBuilder(Reflex::Literal("edm::reftobase::Holder<reco::Jet, reco::FFTBasicJetRef>"), type_29602);
  ::Reflex::Type type_29603f = ::Reflex::TypedefTypeBuilder(Reflex::Literal("edm::reftobase::Holder<reco::Candidate, reco::FFTBasicJetRef>"), type_29603);
} // unnamed namespace

#ifndef __CINT__

// Shadow classes to obtain the data member offsets 
namespace __shadow__ {
#ifdef __std__map_unsignedsint_edm__helpers__KeyVal_edm__Ref_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s__edm__RefVector_std__vector_reco__PFCandidate__reco__PFCandidate_edm__refhelper__FindUsingAdvance_std__vector_reco__PFCandidate__reco__PFCandidate_s_s_s_
#undef __std__map_unsignedsint_edm__helpers__KeyVal_edm__Ref_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s__edm__RefVector_std__vector_reco__PFCandidate__reco__PFCandidate_edm__refhelper__FindUsingAdvance_std__vector_reco__PFCandidate__reco__PFCandidate_s_s_s_
#endif
class __std__map_unsignedsint_edm__helpers__KeyVal_edm__Ref_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s__edm__RefVector_std__vector_reco__PFCandidate__reco__PFCandidate_edm__refhelper__FindUsingAdvance_std__vector_reco__PFCandidate__reco__PFCandidate_s_s_s_ {
  public:
  __std__map_unsignedsint_edm__helpers__KeyVal_edm__Ref_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s__edm__RefVector_std__vector_reco__PFCandidate__reco__PFCandidate_edm__refhelper__FindUsingAdvance_std__vector_reco__PFCandidate__reco__PFCandidate_s_s_s_();
  ::std::_Rb_tree<unsigned int,std::pair<const unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > > >,std::_Select1st<std::pair<const unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > > > >,std::less<unsigned int>,std::allocator<std::pair<const unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > > > > > _M_t;
};
#ifdef __edm__AssociationMap_edm__OneToMany_std__vector_reco__PFJet__std__vector_reco__PFCandidate__unsignedsint_s_
#undef __edm__AssociationMap_edm__OneToMany_std__vector_reco__PFJet__std__vector_reco__PFCandidate__unsignedsint_s_
#endif
class __edm__AssociationMap_edm__OneToMany_std__vector_reco__PFJet__std__vector_reco__PFCandidate__unsignedsint_s_ {
  public:
  __edm__AssociationMap_edm__OneToMany_std__vector_reco__PFJet__std__vector_reco__PFCandidate__unsignedsint_s_();
  ::edm::helpers::KeyVal<edm::RefProd<std::vector<reco::PFJet> >,edm::RefProd<std::vector<reco::PFCandidate> > > ref_;
  ::std::map<unsigned int,std::vector<unsigned int> > map_;
  ::std::map<unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > > > transientMap_;
};
#ifdef __edm__Wrapper_edm__AssociationMap_edm__OneToMany_std__vector_reco__PFJet__std__vector_reco__PFCandidate__unsignedsint_s_s_
#undef __edm__Wrapper_edm__AssociationMap_edm__OneToMany_std__vector_reco__PFJet__std__vector_reco__PFCandidate__unsignedsint_s_s_
#endif
class __edm__Wrapper_edm__AssociationMap_edm__OneToMany_std__vector_reco__PFJet__std__vector_reco__PFCandidate__unsignedsint_s_s_ {
  public:
  __edm__Wrapper_edm__AssociationMap_edm__OneToMany_std__vector_reco__PFJet__std__vector_reco__PFCandidate__unsignedsint_s_s_();
  bool present;
  ::edm::AssociationMap<edm::OneToMany<std::vector<reco::PFJet>,std::vector<reco::PFCandidate>,unsigned int> > obj;
};
#ifdef __reco__FFTJetPileupSummary
#undef __reco__FFTJetPileupSummary
#endif
class __reco__FFTJetPileupSummary {
  public:
  __reco__FFTJetPileupSummary();
  float uncalibratedQuantile_;
  float pileupRho_;
  float pileupRhoUncert_;
  int uncertaintyCode_;
};
#ifdef __edm__Wrapper_reco__FFTJetPileupSummary_
#undef __edm__Wrapper_reco__FFTJetPileupSummary_
#endif
class __edm__Wrapper_reco__FFTJetPileupSummary_ {
  public:
  __edm__Wrapper_reco__FFTJetPileupSummary_();
  bool present;
  ::reco::FFTJetPileupSummary obj;
};
#ifdef __reco__DiscretizedEnergyFlow
#undef __reco__DiscretizedEnergyFlow
#endif
class __reco__DiscretizedEnergyFlow {
  public:
  __reco__DiscretizedEnergyFlow();
  ::std::vector<double> data_;
  ::std::string title_;
  double etaMin_;
  double etaMax_;
  double phiBin0Edge_;
  unsigned int nEtaBins_;
  unsigned int nPhiBins_;
};
#ifdef __edm__Wrapper_reco__DiscretizedEnergyFlow_
#undef __edm__Wrapper_reco__DiscretizedEnergyFlow_
#endif
class __edm__Wrapper_reco__DiscretizedEnergyFlow_ {
  public:
  __edm__Wrapper_reco__DiscretizedEnergyFlow_();
  bool present;
  ::reco::DiscretizedEnergyFlow obj;
};
#ifdef __edm__helpers__KeyVal_edm__Ref_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s__edm__RefVector_std__vector_reco__PFCandidate__reco__PFCandidate_edm__refhelper__FindUsingAdvance_std__vector_reco__PFCandidate__reco__PFCandidate_s_s_
#undef __edm__helpers__KeyVal_edm__Ref_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s__edm__RefVector_std__vector_reco__PFCandidate__reco__PFCandidate_edm__refhelper__FindUsingAdvance_std__vector_reco__PFCandidate__reco__PFCandidate_s_s_
#endif
struct __edm__helpers__KeyVal_edm__Ref_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s__edm__RefVector_std__vector_reco__PFCandidate__reco__PFCandidate_edm__refhelper__FindUsingAdvance_std__vector_reco__PFCandidate__reco__PFCandidate_s_s_ {
  public:
  __edm__helpers__KeyVal_edm__Ref_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s__edm__RefVector_std__vector_reco__PFCandidate__reco__PFCandidate_edm__refhelper__FindUsingAdvance_std__vector_reco__PFCandidate__reco__PFCandidate_s_s_();
  ::edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > key;
  ::edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > val;
};
#ifdef __edm__helpers__KeyVal_edm__RefProd_std__vector_reco__PFJet_s__edm__RefProd_std__vector_reco__PFCandidate_s_s_
#undef __edm__helpers__KeyVal_edm__RefProd_std__vector_reco__PFJet_s__edm__RefProd_std__vector_reco__PFCandidate_s_s_
#endif
struct __edm__helpers__KeyVal_edm__RefProd_std__vector_reco__PFJet_s__edm__RefProd_std__vector_reco__PFCandidate_s_s_ {
  public:
  __edm__helpers__KeyVal_edm__RefProd_std__vector_reco__PFJet_s__edm__RefProd_std__vector_reco__PFCandidate_s_s_();
  ::edm::RefProd<std::vector<reco::PFJet> > key;
  ::edm::RefProd<std::vector<reco::PFCandidate> > val;
};
#ifdef __reco__FFTAnyJet_reco__TrackJet_
#undef __reco__FFTAnyJet_reco__TrackJet_
#endif
class __reco__FFTAnyJet_reco__TrackJet_ : public ::reco::TrackJet {
  public:
  __reco__FFTAnyJet_reco__TrackJet_();
  virtual ~__reco__FFTAnyJet_reco__TrackJet_() throw();
  virtual ::reco::FFTAnyJet<reco::TrackJet>* clone() const throw();
  ::reco::FFTJet<float> fftJetSpecific_;
};
#ifdef __edm__FwdRef_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s_
#undef __edm__FwdRef_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s_
#endif
class __edm__FwdRef_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s_ {
  public:
  __edm__FwdRef_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s_();
  ::edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > ref_;
  ::edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > backRef_;
};
#ifdef __std__vector_edm__FwdRef_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s_s_
#undef __std__vector_edm__FwdRef_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s_s_
#endif
class __std__vector_edm__FwdRef_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s_s_ : protected ::std::_Vector_base<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >,std::allocator<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > > > {
  public:
  __std__vector_edm__FwdRef_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s_s_();
};
#ifdef __reco__FFTAnyJet_reco__PFJet_
#undef __reco__FFTAnyJet_reco__PFJet_
#endif
class __reco__FFTAnyJet_reco__PFJet_ : public ::reco::PFJet {
  public:
  __reco__FFTAnyJet_reco__PFJet_();
  virtual ~__reco__FFTAnyJet_reco__PFJet_() throw();
  virtual ::reco::FFTAnyJet<reco::PFJet>* clone() const throw();
  ::reco::FFTJet<float> fftJetSpecific_;
};
#ifdef __std__vector_reco__FFTAnyJet_reco__PFJet_s_
#undef __std__vector_reco__FFTAnyJet_reco__PFJet_s_
#endif
class __std__vector_reco__FFTAnyJet_reco__PFJet_s_ : protected ::std::_Vector_base<reco::FFTAnyJet<reco::PFJet>,std::allocator<reco::FFTAnyJet<reco::PFJet> > > {
  public:
  __std__vector_reco__FFTAnyJet_reco__PFJet_s_();
};
#ifdef __edm__RefProd_std__vector_reco__FFTAnyJet_reco__PFJet_s_s_
#undef __edm__RefProd_std__vector_reco__FFTAnyJet_reco__PFJet_s_s_
#endif
class __edm__RefProd_std__vector_reco__FFTAnyJet_reco__PFJet_s_s_ {
  public:
  __edm__RefProd_std__vector_reco__FFTAnyJet_reco__PFJet_s_s_();
  ::edm::RefCore product_;
};
#ifdef __edm__FwdRef_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s_
#undef __edm__FwdRef_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s_
#endif
class __edm__FwdRef_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s_ {
  public:
  __edm__FwdRef_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s_();
  ::edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > ref_;
  ::edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > backRef_;
};
#ifdef __reco__FFTAnyJet_reco__BasicJet_
#undef __reco__FFTAnyJet_reco__BasicJet_
#endif
class __reco__FFTAnyJet_reco__BasicJet_ : public ::reco::BasicJet {
  public:
  __reco__FFTAnyJet_reco__BasicJet_();
  virtual ~__reco__FFTAnyJet_reco__BasicJet_() throw();
  virtual ::reco::FFTAnyJet<reco::BasicJet>* clone() const throw();
  ::reco::FFTJet<float> fftJetSpecific_;
};
#ifdef __edm__Ref_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s_
#undef __edm__Ref_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s_
#endif
class __edm__Ref_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s_ {
  public:
  __edm__Ref_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s_();
  ::edm::RefCoreWithIndex product_;
};
#ifdef __edm__RefVector_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s_
#undef __edm__RefVector_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s_
#endif
class __edm__RefVector_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s_ {
  public:
  __edm__RefVector_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s_();
  ::edm::RefVectorBase<unsigned int> refVector_;
};
#ifdef __edm__FwdPtr_reco__FFTAnyJet_reco__PFJet_s_
#undef __edm__FwdPtr_reco__FFTAnyJet_reco__PFJet_s_
#endif
class __edm__FwdPtr_reco__FFTAnyJet_reco__PFJet_s_ {
  public:
  __edm__FwdPtr_reco__FFTAnyJet_reco__PFJet_s_();
  ::edm::Ptr<reco::FFTAnyJet<reco::PFJet> > ptr_;
  ::edm::Ptr<reco::FFTAnyJet<reco::PFJet> > backPtr_;
};
#ifdef __std__vector_edm__FwdPtr_reco__FFTAnyJet_reco__PFJet_s_s_
#undef __std__vector_edm__FwdPtr_reco__FFTAnyJet_reco__PFJet_s_s_
#endif
class __std__vector_edm__FwdPtr_reco__FFTAnyJet_reco__PFJet_s_s_ : protected ::std::_Vector_base<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> >,std::allocator<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > > > {
  public:
  __std__vector_edm__FwdPtr_reco__FFTAnyJet_reco__PFJet_s_s_();
};
#ifdef __edm__RefVector_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s_
#undef __edm__RefVector_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s_
#endif
class __edm__RefVector_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s_ {
  public:
  __edm__RefVector_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s_();
  ::edm::RefVectorBase<unsigned int> refVector_;
};
#ifdef __reco__FFTAnyJet_reco__JPTJet_
#undef __reco__FFTAnyJet_reco__JPTJet_
#endif
class __reco__FFTAnyJet_reco__JPTJet_ : public ::reco::JPTJet {
  public:
  __reco__FFTAnyJet_reco__JPTJet_();
  virtual ~__reco__FFTAnyJet_reco__JPTJet_() throw();
  virtual ::reco::FFTAnyJet<reco::JPTJet>* clone() const throw();
  ::reco::FFTJet<float> fftJetSpecific_;
};
#ifdef __std__vector_reco__FFTAnyJet_reco__JPTJet_s_
#undef __std__vector_reco__FFTAnyJet_reco__JPTJet_s_
#endif
class __std__vector_reco__FFTAnyJet_reco__JPTJet_s_ : protected ::std::_Vector_base<reco::FFTAnyJet<reco::JPTJet>,std::allocator<reco::FFTAnyJet<reco::JPTJet> > > {
  public:
  __std__vector_reco__FFTAnyJet_reco__JPTJet_s_();
};
#ifdef __edm__FwdPtr_reco__FFTAnyJet_reco__BasicJet_s_
#undef __edm__FwdPtr_reco__FFTAnyJet_reco__BasicJet_s_
#endif
class __edm__FwdPtr_reco__FFTAnyJet_reco__BasicJet_s_ {
  public:
  __edm__FwdPtr_reco__FFTAnyJet_reco__BasicJet_s_();
  ::edm::Ptr<reco::FFTAnyJet<reco::BasicJet> > ptr_;
  ::edm::Ptr<reco::FFTAnyJet<reco::BasicJet> > backPtr_;
};
#ifdef __std__vector_edm__FwdPtr_reco__FFTAnyJet_reco__BasicJet_s_s_
#undef __std__vector_edm__FwdPtr_reco__FFTAnyJet_reco__BasicJet_s_s_
#endif
class __std__vector_edm__FwdPtr_reco__FFTAnyJet_reco__BasicJet_s_s_ : protected ::std::_Vector_base<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> >,std::allocator<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > > > {
  public:
  __std__vector_edm__FwdPtr_reco__FFTAnyJet_reco__BasicJet_s_s_();
};
#ifdef __edm__RefVector_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s_
#undef __edm__RefVector_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s_
#endif
class __edm__RefVector_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s_ {
  public:
  __edm__RefVector_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s_();
  ::edm::RefVectorBase<unsigned int> refVector_;
};
#ifdef __edm__Ref_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s_
#undef __edm__Ref_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s_
#endif
class __edm__Ref_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s_ {
  public:
  __edm__Ref_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s_();
  ::edm::RefCoreWithIndex product_;
};
#ifdef __edm__FwdPtr_reco__FFTAnyJet_reco__TrackJet_s_
#undef __edm__FwdPtr_reco__FFTAnyJet_reco__TrackJet_s_
#endif
class __edm__FwdPtr_reco__FFTAnyJet_reco__TrackJet_s_ {
  public:
  __edm__FwdPtr_reco__FFTAnyJet_reco__TrackJet_s_();
  ::edm::Ptr<reco::FFTAnyJet<reco::TrackJet> > ptr_;
  ::edm::Ptr<reco::FFTAnyJet<reco::TrackJet> > backPtr_;
};
#ifdef __edm__FwdPtr_reco__FFTAnyJet_reco__JPTJet_s_
#undef __edm__FwdPtr_reco__FFTAnyJet_reco__JPTJet_s_
#endif
class __edm__FwdPtr_reco__FFTAnyJet_reco__JPTJet_s_ {
  public:
  __edm__FwdPtr_reco__FFTAnyJet_reco__JPTJet_s_();
  ::edm::Ptr<reco::FFTAnyJet<reco::JPTJet> > ptr_;
  ::edm::Ptr<reco::FFTAnyJet<reco::JPTJet> > backPtr_;
};
#ifdef __std__vector_edm__FwdPtr_reco__FFTAnyJet_reco__JPTJet_s_s_
#undef __std__vector_edm__FwdPtr_reco__FFTAnyJet_reco__JPTJet_s_s_
#endif
class __std__vector_edm__FwdPtr_reco__FFTAnyJet_reco__JPTJet_s_s_ : protected ::std::_Vector_base<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> >,std::allocator<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > > > {
  public:
  __std__vector_edm__FwdPtr_reco__FFTAnyJet_reco__JPTJet_s_s_();
};
#ifdef __std__vector_reco__FFTAnyJet_reco__BasicJet_s_
#undef __std__vector_reco__FFTAnyJet_reco__BasicJet_s_
#endif
class __std__vector_reco__FFTAnyJet_reco__BasicJet_s_ : protected ::std::_Vector_base<reco::FFTAnyJet<reco::BasicJet>,std::allocator<reco::FFTAnyJet<reco::BasicJet> > > {
  public:
  __std__vector_reco__FFTAnyJet_reco__BasicJet_s_();
};
#ifdef __edm__FwdRef_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s_
#undef __edm__FwdRef_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s_
#endif
class __edm__FwdRef_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s_ {
  public:
  __edm__FwdRef_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s_();
  ::edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > ref_;
  ::edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > backRef_;
};
#ifdef __std__vector_edm__FwdRef_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s_s_
#undef __std__vector_edm__FwdRef_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s_s_
#endif
class __std__vector_edm__FwdRef_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s_s_ : protected ::std::_Vector_base<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >,std::allocator<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > > > {
  public:
  __std__vector_edm__FwdRef_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s_s_();
};
#ifdef __edm__Ref_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s_
#undef __edm__Ref_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s_
#endif
class __edm__Ref_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s_ {
  public:
  __edm__Ref_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s_();
  ::edm::RefCoreWithIndex product_;
};
#ifdef __edm__FwdRef_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s_
#undef __edm__FwdRef_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s_
#endif
class __edm__FwdRef_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s_ {
  public:
  __edm__FwdRef_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s_();
  ::edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > ref_;
  ::edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > backRef_;
};
#ifdef __edm__RefVector_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s_
#undef __edm__RefVector_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s_
#endif
class __edm__RefVector_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s_ {
  public:
  __edm__RefVector_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s_();
  ::edm::RefVectorBase<unsigned int> refVector_;
};
#ifdef __edm__Ref_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s_
#undef __edm__Ref_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s_
#endif
class __edm__Ref_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s_ {
  public:
  __edm__Ref_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s_();
  ::edm::RefCoreWithIndex product_;
};
#ifdef __std__vector_reco__FFTAnyJet_reco__TrackJet_s_
#undef __std__vector_reco__FFTAnyJet_reco__TrackJet_s_
#endif
class __std__vector_reco__FFTAnyJet_reco__TrackJet_s_ : protected ::std::_Vector_base<reco::FFTAnyJet<reco::TrackJet>,std::allocator<reco::FFTAnyJet<reco::TrackJet> > > {
  public:
  __std__vector_reco__FFTAnyJet_reco__TrackJet_s_();
};
#ifdef __edm__RefProd_std__vector_reco__FFTAnyJet_reco__TrackJet_s_s_
#undef __edm__RefProd_std__vector_reco__FFTAnyJet_reco__TrackJet_s_s_
#endif
class __edm__RefProd_std__vector_reco__FFTAnyJet_reco__TrackJet_s_s_ {
  public:
  __edm__RefProd_std__vector_reco__FFTAnyJet_reco__TrackJet_s_s_();
  ::edm::RefCore product_;
};
#ifdef __std__vector_edm__FwdRef_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s_s_
#undef __std__vector_edm__FwdRef_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s_s_
#endif
class __std__vector_edm__FwdRef_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s_s_ : protected ::std::_Vector_base<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >,std::allocator<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > > > {
  public:
  __std__vector_edm__FwdRef_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s_s_();
};
#ifdef __std__vector_edm__FwdRef_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s_s_
#undef __std__vector_edm__FwdRef_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s_s_
#endif
class __std__vector_edm__FwdRef_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s_s_ : protected ::std::_Vector_base<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >,std::allocator<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > > > {
  public:
  __std__vector_edm__FwdRef_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s_s_();
};
#ifdef __edm__RefProd_std__vector_reco__FFTAnyJet_reco__BasicJet_s_s_
#undef __edm__RefProd_std__vector_reco__FFTAnyJet_reco__BasicJet_s_s_
#endif
class __edm__RefProd_std__vector_reco__FFTAnyJet_reco__BasicJet_s_s_ {
  public:
  __edm__RefProd_std__vector_reco__FFTAnyJet_reco__BasicJet_s_s_();
  ::edm::RefCore product_;
};
#ifdef __edm__RefProd_std__vector_reco__FFTAnyJet_reco__JPTJet_s_s_
#undef __edm__RefProd_std__vector_reco__FFTAnyJet_reco__JPTJet_s_s_
#endif
class __edm__RefProd_std__vector_reco__FFTAnyJet_reco__JPTJet_s_s_ {
  public:
  __edm__RefProd_std__vector_reco__FFTAnyJet_reco__JPTJet_s_s_();
  ::edm::RefCore product_;
};
#ifdef __std__vector_edm__FwdPtr_reco__FFTAnyJet_reco__TrackJet_s_s_
#undef __std__vector_edm__FwdPtr_reco__FFTAnyJet_reco__TrackJet_s_s_
#endif
class __std__vector_edm__FwdPtr_reco__FFTAnyJet_reco__TrackJet_s_s_ : protected ::std::_Vector_base<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> >,std::allocator<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > > > {
  public:
  __std__vector_edm__FwdPtr_reco__FFTAnyJet_reco__TrackJet_s_s_();
};
#ifdef __edm__PtrVector_reco__FFTAnyJet_reco__JPTJet_s_
#undef __edm__PtrVector_reco__FFTAnyJet_reco__JPTJet_s_
#endif
class __edm__PtrVector_reco__FFTAnyJet_reco__JPTJet_s_ : public ::edm::PtrVectorBase {
  public:
  __edm__PtrVector_reco__FFTAnyJet_reco__JPTJet_s_();
  virtual ~__edm__PtrVector_reco__FFTAnyJet_reco__JPTJet_s_() throw();
};
#ifdef __edm__PtrVector_reco__FFTAnyJet_reco__TrackJet_s_
#undef __edm__PtrVector_reco__FFTAnyJet_reco__TrackJet_s_
#endif
class __edm__PtrVector_reco__FFTAnyJet_reco__TrackJet_s_ : public ::edm::PtrVectorBase {
  public:
  __edm__PtrVector_reco__FFTAnyJet_reco__TrackJet_s_();
  virtual ~__edm__PtrVector_reco__FFTAnyJet_reco__TrackJet_s_() throw();
};
#ifdef __edm__PtrVector_reco__FFTAnyJet_reco__PFJet_s_
#undef __edm__PtrVector_reco__FFTAnyJet_reco__PFJet_s_
#endif
class __edm__PtrVector_reco__FFTAnyJet_reco__PFJet_s_ : public ::edm::PtrVectorBase {
  public:
  __edm__PtrVector_reco__FFTAnyJet_reco__PFJet_s_();
  virtual ~__edm__PtrVector_reco__FFTAnyJet_reco__PFJet_s_() throw();
};
#ifdef __edm__PtrVector_reco__FFTAnyJet_reco__BasicJet_s_
#undef __edm__PtrVector_reco__FFTAnyJet_reco__BasicJet_s_
#endif
class __edm__PtrVector_reco__FFTAnyJet_reco__BasicJet_s_ : public ::edm::PtrVectorBase {
  public:
  __edm__PtrVector_reco__FFTAnyJet_reco__BasicJet_s_();
  virtual ~__edm__PtrVector_reco__FFTAnyJet_reco__BasicJet_s_() throw();
};
#ifdef __edm__Association_std__vector_reco__FFTAnyJet_reco__JPTJet_s_s_
#undef __edm__Association_std__vector_reco__FFTAnyJet_reco__JPTJet_s_s_
#endif
class __edm__Association_std__vector_reco__FFTAnyJet_reco__JPTJet_s_s_ : private ::edm::ValueMap<int> {
  public:
  __edm__Association_std__vector_reco__FFTAnyJet_reco__JPTJet_s_s_();
  ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::JPTJet> > > ref_;
};
#ifdef __edm__Wrapper_edm__Association_std__vector_reco__FFTAnyJet_reco__JPTJet_s_s_s_
#undef __edm__Wrapper_edm__Association_std__vector_reco__FFTAnyJet_reco__JPTJet_s_s_s_
#endif
class __edm__Wrapper_edm__Association_std__vector_reco__FFTAnyJet_reco__JPTJet_s_s_s_ {
  public:
  __edm__Wrapper_edm__Association_std__vector_reco__FFTAnyJet_reco__JPTJet_s_s_s_();
  bool present;
  ::edm::Association<std::vector<reco::FFTAnyJet<reco::JPTJet> > > obj;
};
#ifdef __edm__Wrapper_std__vector_edm__FwdPtr_reco__FFTAnyJet_reco__JPTJet_s_s_s_
#undef __edm__Wrapper_std__vector_edm__FwdPtr_reco__FFTAnyJet_reco__JPTJet_s_s_s_
#endif
class __edm__Wrapper_std__vector_edm__FwdPtr_reco__FFTAnyJet_reco__JPTJet_s_s_s_ {
  public:
  __edm__Wrapper_std__vector_edm__FwdPtr_reco__FFTAnyJet_reco__JPTJet_s_s_s_();
  bool present;
  ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > > obj;
};
#ifdef __edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s_s_s_
#undef __edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s_s_s_
#endif
class __edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s_s_s_ {
  public:
  __edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s_s_s_();
  bool present;
  ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > > obj;
};
#ifdef __edm__Wrapper_edm__RefVector_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s_s_
#undef __edm__Wrapper_edm__RefVector_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s_s_
#endif
class __edm__Wrapper_edm__RefVector_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s_s_ {
  public:
  __edm__Wrapper_edm__RefVector_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s_s_();
  bool present;
  ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > obj;
};
#ifdef __edm__Wrapper_std__vector_reco__FFTAnyJet_reco__JPTJet_s_s_
#undef __edm__Wrapper_std__vector_reco__FFTAnyJet_reco__JPTJet_s_s_
#endif
class __edm__Wrapper_std__vector_reco__FFTAnyJet_reco__JPTJet_s_s_ {
  public:
  __edm__Wrapper_std__vector_reco__FFTAnyJet_reco__JPTJet_s_s_();
  bool present;
  ::std::vector<reco::FFTAnyJet<reco::JPTJet> > obj;
};
#ifdef __edm__Association_std__vector_reco__FFTAnyJet_reco__TrackJet_s_s_
#undef __edm__Association_std__vector_reco__FFTAnyJet_reco__TrackJet_s_s_
#endif
class __edm__Association_std__vector_reco__FFTAnyJet_reco__TrackJet_s_s_ : private ::edm::ValueMap<int> {
  public:
  __edm__Association_std__vector_reco__FFTAnyJet_reco__TrackJet_s_s_();
  ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::TrackJet> > > ref_;
};
#ifdef __edm__Wrapper_edm__Association_std__vector_reco__FFTAnyJet_reco__TrackJet_s_s_s_
#undef __edm__Wrapper_edm__Association_std__vector_reco__FFTAnyJet_reco__TrackJet_s_s_s_
#endif
class __edm__Wrapper_edm__Association_std__vector_reco__FFTAnyJet_reco__TrackJet_s_s_s_ {
  public:
  __edm__Wrapper_edm__Association_std__vector_reco__FFTAnyJet_reco__TrackJet_s_s_s_();
  bool present;
  ::edm::Association<std::vector<reco::FFTAnyJet<reco::TrackJet> > > obj;
};
#ifdef __edm__Wrapper_std__vector_edm__FwdPtr_reco__FFTAnyJet_reco__TrackJet_s_s_s_
#undef __edm__Wrapper_std__vector_edm__FwdPtr_reco__FFTAnyJet_reco__TrackJet_s_s_s_
#endif
class __edm__Wrapper_std__vector_edm__FwdPtr_reco__FFTAnyJet_reco__TrackJet_s_s_s_ {
  public:
  __edm__Wrapper_std__vector_edm__FwdPtr_reco__FFTAnyJet_reco__TrackJet_s_s_s_();
  bool present;
  ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > > obj;
};
#ifdef __edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s_s_s_
#undef __edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s_s_s_
#endif
class __edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s_s_s_ {
  public:
  __edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s_s_s_();
  bool present;
  ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > > obj;
};
#ifdef __edm__Wrapper_edm__RefVector_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s_s_
#undef __edm__Wrapper_edm__RefVector_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s_s_
#endif
class __edm__Wrapper_edm__RefVector_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s_s_ {
  public:
  __edm__Wrapper_edm__RefVector_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s_s_();
  bool present;
  ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > obj;
};
#ifdef __edm__Wrapper_std__vector_reco__FFTAnyJet_reco__TrackJet_s_s_
#undef __edm__Wrapper_std__vector_reco__FFTAnyJet_reco__TrackJet_s_s_
#endif
class __edm__Wrapper_std__vector_reco__FFTAnyJet_reco__TrackJet_s_s_ {
  public:
  __edm__Wrapper_std__vector_reco__FFTAnyJet_reco__TrackJet_s_s_();
  bool present;
  ::std::vector<reco::FFTAnyJet<reco::TrackJet> > obj;
};
#ifdef __edm__Association_std__vector_reco__FFTAnyJet_reco__PFJet_s_s_
#undef __edm__Association_std__vector_reco__FFTAnyJet_reco__PFJet_s_s_
#endif
class __edm__Association_std__vector_reco__FFTAnyJet_reco__PFJet_s_s_ : private ::edm::ValueMap<int> {
  public:
  __edm__Association_std__vector_reco__FFTAnyJet_reco__PFJet_s_s_();
  ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::PFJet> > > ref_;
};
#ifdef __edm__Wrapper_edm__Association_std__vector_reco__FFTAnyJet_reco__PFJet_s_s_s_
#undef __edm__Wrapper_edm__Association_std__vector_reco__FFTAnyJet_reco__PFJet_s_s_s_
#endif
class __edm__Wrapper_edm__Association_std__vector_reco__FFTAnyJet_reco__PFJet_s_s_s_ {
  public:
  __edm__Wrapper_edm__Association_std__vector_reco__FFTAnyJet_reco__PFJet_s_s_s_();
  bool present;
  ::edm::Association<std::vector<reco::FFTAnyJet<reco::PFJet> > > obj;
};
#ifdef __edm__Wrapper_std__vector_edm__FwdPtr_reco__FFTAnyJet_reco__PFJet_s_s_s_
#undef __edm__Wrapper_std__vector_edm__FwdPtr_reco__FFTAnyJet_reco__PFJet_s_s_s_
#endif
class __edm__Wrapper_std__vector_edm__FwdPtr_reco__FFTAnyJet_reco__PFJet_s_s_s_ {
  public:
  __edm__Wrapper_std__vector_edm__FwdPtr_reco__FFTAnyJet_reco__PFJet_s_s_s_();
  bool present;
  ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > > obj;
};
#ifdef __edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s_s_s_
#undef __edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s_s_s_
#endif
class __edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s_s_s_ {
  public:
  __edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s_s_s_();
  bool present;
  ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > > obj;
};
#ifdef __edm__Wrapper_edm__RefVector_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s_s_
#undef __edm__Wrapper_edm__RefVector_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s_s_
#endif
class __edm__Wrapper_edm__RefVector_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s_s_ {
  public:
  __edm__Wrapper_edm__RefVector_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s_s_();
  bool present;
  ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > obj;
};
#ifdef __edm__Wrapper_std__vector_reco__FFTAnyJet_reco__PFJet_s_s_
#undef __edm__Wrapper_std__vector_reco__FFTAnyJet_reco__PFJet_s_s_
#endif
class __edm__Wrapper_std__vector_reco__FFTAnyJet_reco__PFJet_s_s_ {
  public:
  __edm__Wrapper_std__vector_reco__FFTAnyJet_reco__PFJet_s_s_();
  bool present;
  ::std::vector<reco::FFTAnyJet<reco::PFJet> > obj;
};
#ifdef __edm__Association_std__vector_reco__FFTAnyJet_reco__BasicJet_s_s_
#undef __edm__Association_std__vector_reco__FFTAnyJet_reco__BasicJet_s_s_
#endif
class __edm__Association_std__vector_reco__FFTAnyJet_reco__BasicJet_s_s_ : private ::edm::ValueMap<int> {
  public:
  __edm__Association_std__vector_reco__FFTAnyJet_reco__BasicJet_s_s_();
  ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::BasicJet> > > ref_;
};
#ifdef __edm__Wrapper_edm__Association_std__vector_reco__FFTAnyJet_reco__BasicJet_s_s_s_
#undef __edm__Wrapper_edm__Association_std__vector_reco__FFTAnyJet_reco__BasicJet_s_s_s_
#endif
class __edm__Wrapper_edm__Association_std__vector_reco__FFTAnyJet_reco__BasicJet_s_s_s_ {
  public:
  __edm__Wrapper_edm__Association_std__vector_reco__FFTAnyJet_reco__BasicJet_s_s_s_();
  bool present;
  ::edm::Association<std::vector<reco::FFTAnyJet<reco::BasicJet> > > obj;
};
#ifdef __edm__Wrapper_std__vector_edm__FwdPtr_reco__FFTAnyJet_reco__BasicJet_s_s_s_
#undef __edm__Wrapper_std__vector_edm__FwdPtr_reco__FFTAnyJet_reco__BasicJet_s_s_s_
#endif
class __edm__Wrapper_std__vector_edm__FwdPtr_reco__FFTAnyJet_reco__BasicJet_s_s_s_ {
  public:
  __edm__Wrapper_std__vector_edm__FwdPtr_reco__FFTAnyJet_reco__BasicJet_s_s_s_();
  bool present;
  ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > > obj;
};
#ifdef __edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s_s_s_
#undef __edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s_s_s_
#endif
class __edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s_s_s_ {
  public:
  __edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s_s_s_();
  bool present;
  ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > > obj;
};
#ifdef __edm__Wrapper_edm__RefVector_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s_s_
#undef __edm__Wrapper_edm__RefVector_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s_s_
#endif
class __edm__Wrapper_edm__RefVector_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s_s_ {
  public:
  __edm__Wrapper_edm__RefVector_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s_s_();
  bool present;
  ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > obj;
};
#ifdef __edm__Wrapper_std__vector_reco__FFTAnyJet_reco__BasicJet_s_s_
#undef __edm__Wrapper_std__vector_reco__FFTAnyJet_reco__BasicJet_s_s_
#endif
class __edm__Wrapper_std__vector_reco__FFTAnyJet_reco__BasicJet_s_s_ {
  public:
  __edm__Wrapper_std__vector_reco__FFTAnyJet_reco__BasicJet_s_s_();
  bool present;
  ::std::vector<reco::FFTAnyJet<reco::BasicJet> > obj;
};
#ifdef __edm__Ptr_reco__FFTAnyJet_reco__JPTJet_s_
#undef __edm__Ptr_reco__FFTAnyJet_reco__JPTJet_s_
#endif
class __edm__Ptr_reco__FFTAnyJet_reco__JPTJet_s_ {
  public:
  __edm__Ptr_reco__FFTAnyJet_reco__JPTJet_s_();
  ::edm::RefCore core_;
  unsigned long key_;
};
#ifdef __edm__Ptr_reco__FFTAnyJet_reco__TrackJet_s_
#undef __edm__Ptr_reco__FFTAnyJet_reco__TrackJet_s_
#endif
class __edm__Ptr_reco__FFTAnyJet_reco__TrackJet_s_ {
  public:
  __edm__Ptr_reco__FFTAnyJet_reco__TrackJet_s_();
  ::edm::RefCore core_;
  unsigned long key_;
};
#ifdef __edm__Ptr_reco__FFTAnyJet_reco__PFJet_s_
#undef __edm__Ptr_reco__FFTAnyJet_reco__PFJet_s_
#endif
class __edm__Ptr_reco__FFTAnyJet_reco__PFJet_s_ {
  public:
  __edm__Ptr_reco__FFTAnyJet_reco__PFJet_s_();
  ::edm::RefCore core_;
  unsigned long key_;
};
#ifdef __edm__Ptr_reco__FFTAnyJet_reco__BasicJet_s_
#undef __edm__Ptr_reco__FFTAnyJet_reco__BasicJet_s_
#endif
class __edm__Ptr_reco__FFTAnyJet_reco__BasicJet_s_ {
  public:
  __edm__Ptr_reco__FFTAnyJet_reco__BasicJet_s_();
  ::edm::RefCore core_;
  unsigned long key_;
};
#ifdef __reco__JetTrackMatch_std__vector_reco__FFTAnyJet_reco__JPTJet_s_s_
#undef __reco__JetTrackMatch_std__vector_reco__FFTAnyJet_reco__JPTJet_s_s_
#endif
class __reco__JetTrackMatch_std__vector_reco__FFTAnyJet_reco__JPTJet_s_s_ {
  public:
  __reco__JetTrackMatch_std__vector_reco__FFTAnyJet_reco__JPTJet_s_s_();
  ::edm::AssociationMap<edm::OneToMany<std::vector<reco::FFTAnyJet<reco::JPTJet> >,std::vector<reco::Track>,unsigned int> > mMap;
};
#ifdef __reco__JetTrackMatch_std__vector_reco__FFTAnyJet_reco__TrackJet_s_s_
#undef __reco__JetTrackMatch_std__vector_reco__FFTAnyJet_reco__TrackJet_s_s_
#endif
class __reco__JetTrackMatch_std__vector_reco__FFTAnyJet_reco__TrackJet_s_s_ {
  public:
  __reco__JetTrackMatch_std__vector_reco__FFTAnyJet_reco__TrackJet_s_s_();
  ::edm::AssociationMap<edm::OneToMany<std::vector<reco::FFTAnyJet<reco::TrackJet> >,std::vector<reco::Track>,unsigned int> > mMap;
};
#ifdef __reco__JetTrackMatch_std__vector_reco__FFTAnyJet_reco__PFJet_s_s_
#undef __reco__JetTrackMatch_std__vector_reco__FFTAnyJet_reco__PFJet_s_s_
#endif
class __reco__JetTrackMatch_std__vector_reco__FFTAnyJet_reco__PFJet_s_s_ {
  public:
  __reco__JetTrackMatch_std__vector_reco__FFTAnyJet_reco__PFJet_s_s_();
  ::edm::AssociationMap<edm::OneToMany<std::vector<reco::FFTAnyJet<reco::PFJet> >,std::vector<reco::Track>,unsigned int> > mMap;
};
#ifdef __reco__JetTrackMatch_std__vector_reco__FFTAnyJet_reco__BasicJet_s_s_
#undef __reco__JetTrackMatch_std__vector_reco__FFTAnyJet_reco__BasicJet_s_s_
#endif
class __reco__JetTrackMatch_std__vector_reco__FFTAnyJet_reco__BasicJet_s_s_ {
  public:
  __reco__JetTrackMatch_std__vector_reco__FFTAnyJet_reco__BasicJet_s_s_();
  ::edm::AssociationMap<edm::OneToMany<std::vector<reco::FFTAnyJet<reco::BasicJet> >,std::vector<reco::Track>,unsigned int> > mMap;
};
#ifdef __edm__reftobase__RefHolder_edm__Ref_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s_s_
#undef __edm__reftobase__RefHolder_edm__Ref_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s_s_
#endif
class __edm__reftobase__RefHolder_edm__Ref_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s_s_ : public ::edm::reftobase::RefHolderBase {
  public:
  __edm__reftobase__RefHolder_edm__Ref_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s_s_();
  virtual ~__edm__reftobase__RefHolder_edm__Ref_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s_s_() throw();
  ::edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > ref_;
};
#ifdef __edm__reftobase__RefHolder_edm__Ref_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s_s_
#undef __edm__reftobase__RefHolder_edm__Ref_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s_s_
#endif
class __edm__reftobase__RefHolder_edm__Ref_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s_s_ : public ::edm::reftobase::RefHolderBase {
  public:
  __edm__reftobase__RefHolder_edm__Ref_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s_s_();
  virtual ~__edm__reftobase__RefHolder_edm__Ref_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s_s_() throw();
  ::edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > ref_;
};
#ifdef __edm__reftobase__RefHolder_edm__Ref_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s_s_
#undef __edm__reftobase__RefHolder_edm__Ref_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s_s_
#endif
class __edm__reftobase__RefHolder_edm__Ref_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s_s_ : public ::edm::reftobase::RefHolderBase {
  public:
  __edm__reftobase__RefHolder_edm__Ref_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s_s_();
  virtual ~__edm__reftobase__RefHolder_edm__Ref_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s_s_() throw();
  ::edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > ref_;
};
#ifdef __edm__reftobase__RefHolder_edm__Ref_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s_s_
#undef __edm__reftobase__RefHolder_edm__Ref_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s_s_
#endif
class __edm__reftobase__RefHolder_edm__Ref_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s_s_ : public ::edm::reftobase::RefHolderBase {
  public:
  __edm__reftobase__RefHolder_edm__Ref_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s_s_();
  virtual ~__edm__reftobase__RefHolder_edm__Ref_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s_s_() throw();
  ::edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > ref_;
};
#ifdef __edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s_s_
#undef __edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s_s_
#endif
class __edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s_s_ : public ::edm::reftobase::BaseHolder<reco::Jet> {
  public:
  __edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s_s_();
  virtual ~__edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s_s_() throw();
  ::edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > ref_;
};
#ifdef __edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s_s_
#undef __edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s_s_
#endif
class __edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s_s_ : public ::edm::reftobase::BaseHolder<reco::Candidate> {
  public:
  __edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s_s_();
  virtual ~__edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s_s_() throw();
  ::edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > ref_;
};
#ifdef __edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s_s_
#undef __edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s_s_
#endif
class __edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s_s_ : public ::edm::reftobase::BaseHolder<reco::Jet> {
  public:
  __edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s_s_();
  virtual ~__edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s_s_() throw();
  ::edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > ref_;
};
#ifdef __edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s_s_
#undef __edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s_s_
#endif
class __edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s_s_ : public ::edm::reftobase::BaseHolder<reco::Candidate> {
  public:
  __edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s_s_();
  virtual ~__edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s_s_() throw();
  ::edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > ref_;
};
#ifdef __edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s_s_
#undef __edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s_s_
#endif
class __edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s_s_ : public ::edm::reftobase::BaseHolder<reco::Jet> {
  public:
  __edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s_s_();
  virtual ~__edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s_s_() throw();
  ::edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > ref_;
};
#ifdef __edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s_s_
#undef __edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s_s_
#endif
class __edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s_s_ : public ::edm::reftobase::BaseHolder<reco::Candidate> {
  public:
  __edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s_s_();
  virtual ~__edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s_s_() throw();
  ::edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > ref_;
};
#ifdef __edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s_s_
#undef __edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s_s_
#endif
class __edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s_s_ : public ::edm::reftobase::BaseHolder<reco::Jet> {
  public:
  __edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s_s_();
  virtual ~__edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s_s_() throw();
  ::edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > ref_;
};
#ifdef __edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s_s_
#undef __edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s_s_
#endif
class __edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s_s_ : public ::edm::reftobase::BaseHolder<reco::Candidate> {
  public:
  __edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s_s_();
  virtual ~__edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s_s_() throw();
  ::edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > ref_;
};
}


#endif // __CINT__
namespace {
//------Stub functions for class map<unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet, edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet> >, edm::RefVector<std::vector<reco::PFCandidate, std::allocator<reco::PFCandidate> >, reco::PFCandidate, edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate, std::allocator<reco::PFCandidate> >, reco::PFCandidate> > >,std::less<unsigned int>,std::allocator<std::pair<const unsigned int, edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet, edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet> >, edm::RefVector<std::vector<reco::PFCandidate, std::allocator<reco::PFCandidate> >, reco::PFCandidate, edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate, std::allocator<reco::PFCandidate> >, reco::PFCandidate> > > > > > -------------------------------
static void destructor_21961(void*, void * o, const std::vector<void*>&, void *) {
(((::std::map<unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > > >*)o)->::std::map<unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > > >::~map)();
}
static void constructor_21962( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::std::map<unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > > >();
  else ::new(mem) ::std::map<unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > > >();
}

static void constructor_21963( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if ( arg.size() == 1 ) {
    if (retaddr) *(void**)retaddr = ::new(mem) ::std::map<unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > > >(*(const ::std::less<unsigned int>*)arg[0]);
  else ::new(mem) ::std::map<unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > > >(*(const ::std::less<unsigned int>*)arg[0]);
  }
  else if ( arg.size() == 2 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::std::map<unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > > >(*(const ::std::less<unsigned int>*)arg[0],
      *(const ::std::allocator<std::pair<const unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > > > >*)arg[1]);
  else ::new(mem) ::std::map<unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > > >(*(const ::std::less<unsigned int>*)arg[0],
      *(const ::std::allocator<std::pair<const unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > > > >*)arg[1]);
  }
}

static void constructor_21964( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::std::map<unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > > >(*(const ::std::map<unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > > >*)arg[0]);
  else ::new(mem) ::std::map<unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > > >(*(const ::std::map<unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > > >*)arg[0]);
}

static  void operator_21965( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::map<unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > > >*)o)->operator=)(*(const ::std::map<unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > > >*)arg[0]);
  else   (((::std::map<unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > > >*)o)->operator=)(*(const ::std::map<unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > > >*)arg[0]);
}

static  void method_21966( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::allocator<std::pair<const unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > > > >)((((const ::std::map<unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > > >*)o)->get_allocator)());
  else   (((const ::std::map<unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > > >*)o)->get_allocator)();
}

static  void method_21967( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::_Rb_tree_iterator<std::pair<const unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > > > >)((((::std::map<unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > > >*)o)->begin)());
  else   (((::std::map<unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > > >*)o)->begin)();
}

static  void method_21968( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::_Rb_tree_const_iterator<std::pair<const unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > > > >)((((const ::std::map<unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > > >*)o)->begin)());
  else   (((const ::std::map<unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > > >*)o)->begin)();
}

static  void method_21969( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::_Rb_tree_iterator<std::pair<const unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > > > >)((((::std::map<unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > > >*)o)->end)());
  else   (((::std::map<unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > > >*)o)->end)();
}

static  void method_21970( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::_Rb_tree_const_iterator<std::pair<const unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > > > >)((((const ::std::map<unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > > >*)o)->end)());
  else   (((const ::std::map<unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > > >*)o)->end)();
}

static  void method_21975( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::std::map<unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > > >*)o)->empty)());
  else   (((const ::std::map<unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > > >*)o)->empty)();
}

static  void method_21976( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::std::map<unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > > >*)o)->size)());
  else   (((const ::std::map<unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > > >*)o)->size)();
}

static  void method_21977( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::std::map<unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > > >*)o)->max_size)());
  else   (((const ::std::map<unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > > >*)o)->max_size)();
}

static  void operator_21978( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::map<unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > > >*)o)->operator[])(*(const unsigned int*)arg[0]);
  else   (((::std::map<unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > > >*)o)->operator[])(*(const unsigned int*)arg[0]);
}

static  void method_21979( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::map<unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > > >*)o)->at)(*(const unsigned int*)arg[0]);
  else   (((::std::map<unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > > >*)o)->at)(*(const unsigned int*)arg[0]);
}

static  void method_21980( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::map<unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > > >*)o)->at)(*(const unsigned int*)arg[0]);
  else   (((const ::std::map<unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > > >*)o)->at)(*(const unsigned int*)arg[0]);
}

static  void method_21981( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (std::pair<std::_Rb_tree_iterator<std::pair<const unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > > > >,bool>)((((::std::map<unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > > >*)o)->insert)(*(const ::std::pair<const unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > > >*)arg[0]));
  else   (((::std::map<unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > > >*)o)->insert)(*(const ::std::pair<const unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > > >*)arg[0]);
}

static  void method_21982( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (std::_Rb_tree_iterator<std::pair<const unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > > > >)((((::std::map<unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > > >*)o)->insert)(*(::std::_Rb_tree_iterator<std::pair<const unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > > > >*)arg[0],
    *(const ::std::pair<const unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > > >*)arg[1]));
  else   (((::std::map<unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > > >*)o)->insert)(*(::std::_Rb_tree_iterator<std::pair<const unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > > > >*)arg[0],
    *(const ::std::pair<const unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > > >*)arg[1]);
}

static  void method_21983( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::map<unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > > >*)o)->erase)(*(::std::_Rb_tree_iterator<std::pair<const unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > > > >*)arg[0]);
}

static  void method_21984( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((::std::map<unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > > >*)o)->erase)(*(const unsigned int*)arg[0]));
  else   (((::std::map<unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > > >*)o)->erase)(*(const unsigned int*)arg[0]);
}

static  void method_21985( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::map<unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > > >*)o)->erase)(*(::std::_Rb_tree_iterator<std::pair<const unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > > > >*)arg[0],
    *(::std::_Rb_tree_iterator<std::pair<const unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > > > >*)arg[1]);
}

static  void method_21986( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::map<unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > > >*)o)->swap)(*(::std::map<unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > > >*)arg[0]);
}

static  void method_21987( void*, void* o, const std::vector<void*>&, void*)
{
  (((::std::map<unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > > >*)o)->clear)();
}

static  void method_21988( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::less<unsigned int>)((((const ::std::map<unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > > >*)o)->key_comp)());
  else   (((const ::std::map<unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > > >*)o)->key_comp)();
}

static  void method_21990( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (std::_Rb_tree_iterator<std::pair<const unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > > > >)((((::std::map<unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > > >*)o)->find)(*(const unsigned int*)arg[0]));
  else   (((::std::map<unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > > >*)o)->find)(*(const unsigned int*)arg[0]);
}

static  void method_21991( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (std::_Rb_tree_const_iterator<std::pair<const unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > > > >)((((const ::std::map<unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > > >*)o)->find)(*(const unsigned int*)arg[0]));
  else   (((const ::std::map<unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > > >*)o)->find)(*(const unsigned int*)arg[0]);
}

static  void method_21992( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::std::map<unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > > >*)o)->count)(*(const unsigned int*)arg[0]));
  else   (((const ::std::map<unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > > >*)o)->count)(*(const unsigned int*)arg[0]);
}

static  void method_21993( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (std::_Rb_tree_iterator<std::pair<const unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > > > >)((((::std::map<unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > > >*)o)->lower_bound)(*(const unsigned int*)arg[0]));
  else   (((::std::map<unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > > >*)o)->lower_bound)(*(const unsigned int*)arg[0]);
}

static  void method_21994( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (std::_Rb_tree_const_iterator<std::pair<const unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > > > >)((((const ::std::map<unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > > >*)o)->lower_bound)(*(const unsigned int*)arg[0]));
  else   (((const ::std::map<unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > > >*)o)->lower_bound)(*(const unsigned int*)arg[0]);
}

static  void method_21995( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (std::_Rb_tree_iterator<std::pair<const unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > > > >)((((::std::map<unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > > >*)o)->upper_bound)(*(const unsigned int*)arg[0]));
  else   (((::std::map<unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > > >*)o)->upper_bound)(*(const unsigned int*)arg[0]);
}

static  void method_21996( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (std::_Rb_tree_const_iterator<std::pair<const unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > > > >)((((const ::std::map<unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > > >*)o)->upper_bound)(*(const unsigned int*)arg[0]));
  else   (((const ::std::map<unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > > >*)o)->upper_bound)(*(const unsigned int*)arg[0]);
}

static  void method_21997( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (std::pair<std::_Rb_tree_iterator<std::pair<const unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > > > >,std::_Rb_tree_iterator<std::pair<const unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > > > > >)((((::std::map<unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > > >*)o)->equal_range)(*(const unsigned int*)arg[0]));
  else   (((::std::map<unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > > >*)o)->equal_range)(*(const unsigned int*)arg[0]);
}

static  void method_21998( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (std::pair<std::_Rb_tree_const_iterator<std::pair<const unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > > > >,std::_Rb_tree_const_iterator<std::pair<const unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > > > > >)((((const ::std::map<unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > > >*)o)->equal_range)(*(const unsigned int*)arg[0]));
  else   (((const ::std::map<unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > > >*)o)->equal_range)(*(const unsigned int*)arg[0]);
}

static void method_newdel_3376( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::std::map<unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > > > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::std::map<unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > > > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::std::map<unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > > > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::std::map<unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > > > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::std::map<unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > > > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

static void method_x1( void* retaddr, void*, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**) retaddr = ::Reflex::Proxy< ::std::map<unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > > > >::Generate();
  else ::Reflex::Proxy< ::std::map<unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > > > >::Generate();
}

//------Dictionary for class map<unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet, edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet> >, edm::RefVector<std::vector<reco::PFCandidate, std::allocator<reco::PFCandidate> >, reco::PFCandidate, edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate, std::allocator<reco::PFCandidate> >, reco::PFCandidate> > >,std::less<unsigned int>,std::allocator<std::pair<const unsigned int, edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet, edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet> >, edm::RefVector<std::vector<reco::PFCandidate, std::allocator<reco::PFCandidate> >, reco::PFCandidate, edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate, std::allocator<reco::PFCandidate> >, reco::PFCandidate> > > > > > -------------------------------
void __std__map_unsignedsint_edm__helpers__KeyVal_edm__Ref_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s__edm__RefVector_std__vector_reco__PFCandidate__reco__PFCandidate_edm__refhelper__FindUsingAdvance_std__vector_reco__PFCandidate__reco__PFCandidate_s_s_s__db_datamem(Reflex::Class*);
void __std__map_unsignedsint_edm__helpers__KeyVal_edm__Ref_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s__edm__RefVector_std__vector_reco__PFCandidate__reco__PFCandidate_edm__refhelper__FindUsingAdvance_std__vector_reco__PFCandidate__reco__PFCandidate_s_s_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __std__map_unsignedsint_edm__helpers__KeyVal_edm__Ref_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s__edm__RefVector_std__vector_reco__PFCandidate__reco__PFCandidate_edm__refhelper__FindUsingAdvance_std__vector_reco__PFCandidate__reco__PFCandidate_s_s_s__datamem_bld(&__std__map_unsignedsint_edm__helpers__KeyVal_edm__Ref_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s__edm__RefVector_std__vector_reco__PFCandidate__reco__PFCandidate_edm__refhelper__FindUsingAdvance_std__vector_reco__PFCandidate__reco__PFCandidate_s_s_s__db_datamem);
Reflex::GenreflexMemberBuilder __std__map_unsignedsint_edm__helpers__KeyVal_edm__Ref_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s__edm__RefVector_std__vector_reco__PFCandidate__reco__PFCandidate_edm__refhelper__FindUsingAdvance_std__vector_reco__PFCandidate__reco__PFCandidate_s_s_s__funcmem_bld(&__std__map_unsignedsint_edm__helpers__KeyVal_edm__Ref_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s__edm__RefVector_std__vector_reco__PFCandidate__reco__PFCandidate_edm__refhelper__FindUsingAdvance_std__vector_reco__PFCandidate__reco__PFCandidate_s_s_s__db_funcmem);
void __std__map_unsignedsint_edm__helpers__KeyVal_edm__Ref_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s__edm__RefVector_std__vector_reco__PFCandidate__reco__PFCandidate_edm__refhelper__FindUsingAdvance_std__vector_reco__PFCandidate__reco__PFCandidate_s_s_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("std::map<unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > > >"), typeid(::std::map<unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > > >), sizeof(::std::map<unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > > >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddTypedef(type_211, Reflex::Literal("std::map<unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > > >::key_type"))
  .AddTypedef(type_21942, Reflex::Literal("std::map<unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > > >::mapped_type"))
  .AddTypedef(type_3030, Reflex::Literal("std::map<unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > > >::value_type"))
  .AddTypedef(type_2764, Reflex::Literal("std::map<unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > > >::key_compare"))
  .AddTypedef(type_3466, Reflex::Literal("std::map<unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > > >::allocator_type"))
  .AddTypedef(type_3030, Reflex::Literal("std::map<unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > > >::_Alloc_value_type"))
  .AddTypedef(type_3466, Reflex::Literal("std::map<unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > > >::_Pair_alloc_type"))
  .AddTypedef(type_2816, Reflex::Literal("std::map<unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > > >::_Rep_type"))
  .AddTypedef(type_13839, Reflex::Literal("std::map<unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > > >::pointer"))
  .AddTypedef(type_13841, Reflex::Literal("std::map<unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > > >::const_pointer"))
  .AddTypedef(type_13843, Reflex::Literal("std::map<unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > > >::reference"))
  .AddTypedef(type_13845, Reflex::Literal("std::map<unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > > >::const_reference"))
  .AddTypedef(type_3284, Reflex::Literal("std::map<unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > > >::iterator"))
  .AddTypedef(type_2924, Reflex::Literal("std::map<unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > > >::const_iterator"))
  .AddTypedef(type_3455, Reflex::Literal("std::map<unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > > >::size_type"))
  .AddTypedef(type_3318, Reflex::Literal("std::map<unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > > >::difference_type"))
  .AddTypedef(type_3789, Reflex::Literal("std::map<unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > > >::reverse_iterator"))
  .AddTypedef(type_3788, Reflex::Literal("std::map<unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > > >::const_reverse_iterator"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~map"), destructor_21961, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::DESTRUCTOR )
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("map"), constructor_21962, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_43822, type_43900), Reflex::Literal("map"), constructor_21963, 0, "__comp;__a=_Alloc()", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_44493), Reflex::Literal("map"), constructor_21964, 0, "__x", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_3376, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddFunctionMember<void*(void)>(Reflex::Literal("createCollFuncTable"), method_x1, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__std__map_unsignedsint_edm__helpers__KeyVal_edm__Ref_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s__edm__RefVector_std__vector_reco__PFCandidate__reco__PFCandidate_edm__refhelper__FindUsingAdvance_std__vector_reco__PFCandidate__reco__PFCandidate_s_s_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__std__map_unsignedsint_edm__helpers__KeyVal_edm__Ref_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s__edm__RefVector_std__vector_reco__PFCandidate__reco__PFCandidate_edm__refhelper__FindUsingAdvance_std__vector_reco__PFCandidate__reco__PFCandidate_s_s_s__funcmem_bld);
}

//------Delayed data member builder for class map<unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet, edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet> >, edm::RefVector<std::vector<reco::PFCandidate, std::allocator<reco::PFCandidate> >, reco::PFCandidate, edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate, std::allocator<reco::PFCandidate> >, reco::PFCandidate> > >,std::less<unsigned int>,std::allocator<std::pair<const unsigned int, edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet, edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet> >, edm::RefVector<std::vector<reco::PFCandidate, std::allocator<reco::PFCandidate> >, reco::PFCandidate, edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate, std::allocator<reco::PFCandidate> >, reco::PFCandidate> > > > > > -------------------
void __std__map_unsignedsint_edm__helpers__KeyVal_edm__Ref_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s__edm__RefVector_std__vector_reco__PFCandidate__reco__PFCandidate_edm__refhelper__FindUsingAdvance_std__vector_reco__PFCandidate__reco__PFCandidate_s_s_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_2816, Reflex::Literal("_M_t"), OffsetOf(__shadow__::__std__map_unsignedsint_edm__helpers__KeyVal_edm__Ref_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s__edm__RefVector_std__vector_reco__PFCandidate__reco__PFCandidate_edm__refhelper__FindUsingAdvance_std__vector_reco__PFCandidate__reco__PFCandidate_s_s_s_, _M_t), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class map<unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet, edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet> >, edm::RefVector<std::vector<reco::PFCandidate, std::allocator<reco::PFCandidate> >, reco::PFCandidate, edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate, std::allocator<reco::PFCandidate> >, reco::PFCandidate> > >,std::less<unsigned int>,std::allocator<std::pair<const unsigned int, edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet, edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet> >, edm::RefVector<std::vector<reco::PFCandidate, std::allocator<reco::PFCandidate> >, reco::PFCandidate, edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate, std::allocator<reco::PFCandidate> >, reco::PFCandidate> > > > > > -------------------
void __std__map_unsignedsint_edm__helpers__KeyVal_edm__Ref_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s__edm__RefVector_std__vector_reco__PFCandidate__reco__PFCandidate_edm__refhelper__FindUsingAdvance_std__vector_reco__PFCandidate__reco__PFCandidate_s_s_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_44494, type_44493), Reflex::Literal("operator="), operator_21965, 0, "__x", ::Reflex::PUBLIC | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3466), Reflex::Literal("get_allocator"), method_21966, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3284), Reflex::Literal("begin"), method_21967, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2924), Reflex::Literal("begin"), method_21968, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3284), Reflex::Literal("end"), method_21969, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2924), Reflex::Literal("end"), method_21970, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("empty"), method_21975, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3455), Reflex::Literal("size"), method_21976, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3455), Reflex::Literal("max_size"), method_21977, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_44495, type_13040), Reflex::Literal("operator[]"), operator_21978, 0, "__k", ::Reflex::PUBLIC | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_44495, type_13040), Reflex::Literal("at"), method_21979, 0, "__k", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_44496, type_13040), Reflex::Literal("at"), method_21980, 0, "__k", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3033, type_13845), Reflex::Literal("insert"), method_21981, 0, "__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3284, type_3284, type_13845), Reflex::Literal("insert"), method_21982, 0, "__position;__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_3284), Reflex::Literal("erase"), method_21983, 0, "__position", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3455, type_13040), Reflex::Literal("erase"), method_21984, 0, "__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_3284, type_3284), Reflex::Literal("erase"), method_21985, 0, "__first;__last", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_44494), Reflex::Literal("swap"), method_21986, 0, "__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708), Reflex::Literal("clear"), method_21987, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2764), Reflex::Literal("key_comp"), method_21988, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3284, type_13040), Reflex::Literal("find"), method_21990, 0, "__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2924, type_13040), Reflex::Literal("find"), method_21991, 0, "__x", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3455, type_13040), Reflex::Literal("count"), method_21992, 0, "__x", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3284, type_13040), Reflex::Literal("lower_bound"), method_21993, 0, "__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2924, type_13040), Reflex::Literal("lower_bound"), method_21994, 0, "__x", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3284, type_13040), Reflex::Literal("upper_bound"), method_21995, 0, "__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2924, type_13040), Reflex::Literal("upper_bound"), method_21996, 0, "__x", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3032, type_13040), Reflex::Literal("equal_range"), method_21997, 0, "__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3031, type_13040), Reflex::Literal("equal_range"), method_21998, 0, "__x", ::Reflex::PUBLIC | ::Reflex::CONST);
}
//------Stub functions for class AssociationMap<edm::OneToMany<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, std::vector<reco::PFCandidate, std::allocator<reco::PFCandidate> >, unsigned int> > -------------------------------
static void destructor_29201(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::AssociationMap<edm::OneToMany<std::vector<reco::PFJet>,std::vector<reco::PFCandidate>,unsigned int> >*)o)->::edm::AssociationMap<edm::OneToMany<std::vector<reco::PFJet>,std::vector<reco::PFCandidate>,unsigned int> >::~AssociationMap)();
}
static  void operator_29202( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::AssociationMap<edm::OneToMany<std::vector<reco::PFJet>,std::vector<reco::PFCandidate>,unsigned int> >*)o)->operator=)(*(const ::edm::AssociationMap<edm::OneToMany<std::vector<reco::PFJet>,std::vector<reco::PFCandidate>,unsigned int> >*)arg[0]);
  else   (((::edm::AssociationMap<edm::OneToMany<std::vector<reco::PFJet>,std::vector<reco::PFCandidate>,unsigned int> >*)o)->operator=)(*(const ::edm::AssociationMap<edm::OneToMany<std::vector<reco::PFJet>,std::vector<reco::PFCandidate>,unsigned int> >*)arg[0]);
}

static void constructor_29203( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::AssociationMap<edm::OneToMany<std::vector<reco::PFJet>,std::vector<reco::PFCandidate>,unsigned int> >(*(const ::edm::AssociationMap<edm::OneToMany<std::vector<reco::PFJet>,std::vector<reco::PFCandidate>,unsigned int> >*)arg[0]);
  else ::new(mem) ::edm::AssociationMap<edm::OneToMany<std::vector<reco::PFJet>,std::vector<reco::PFCandidate>,unsigned int> >(*(const ::edm::AssociationMap<edm::OneToMany<std::vector<reco::PFJet>,std::vector<reco::PFCandidate>,unsigned int> >*)arg[0]);
}

static void constructor_29204( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::AssociationMap<edm::OneToMany<std::vector<reco::PFJet>,std::vector<reco::PFCandidate>,unsigned int> >();
  else ::new(mem) ::edm::AssociationMap<edm::OneToMany<std::vector<reco::PFJet>,std::vector<reco::PFCandidate>,unsigned int> >();
}

static void constructor_29205( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::AssociationMap<edm::OneToMany<std::vector<reco::PFJet>,std::vector<reco::PFCandidate>,unsigned int> >(*(const ::edm::helpers::KeyVal<edm::RefProd<std::vector<reco::PFJet> >,edm::RefProd<std::vector<reco::PFCandidate> > >*)arg[0]);
  else ::new(mem) ::edm::AssociationMap<edm::OneToMany<std::vector<reco::PFJet>,std::vector<reco::PFCandidate>,unsigned int> >(*(const ::edm::helpers::KeyVal<edm::RefProd<std::vector<reco::PFJet> >,edm::RefProd<std::vector<reco::PFCandidate> > >*)arg[0]);
}

static  void method_29206( void*, void* o, const std::vector<void*>&, void*)
{
  (((::edm::AssociationMap<edm::OneToMany<std::vector<reco::PFJet>,std::vector<reco::PFCandidate>,unsigned int> >*)o)->clear)();
}

static  void method_29207( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::edm::AssociationMap<edm::OneToMany<std::vector<reco::PFJet>,std::vector<reco::PFCandidate>,unsigned int> >*)o)->size)());
  else   (((const ::edm::AssociationMap<edm::OneToMany<std::vector<reco::PFJet>,std::vector<reco::PFCandidate>,unsigned int> >*)o)->size)();
}

static  void method_29208( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::AssociationMap<edm::OneToMany<std::vector<reco::PFJet>,std::vector<reco::PFCandidate>,unsigned int> >*)o)->empty)());
  else   (((const ::edm::AssociationMap<edm::OneToMany<std::vector<reco::PFJet>,std::vector<reco::PFCandidate>,unsigned int> >*)o)->empty)();
}

static  void method_29209( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::edm::AssociationMap<edm::OneToMany<std::vector<reco::PFJet>,std::vector<reco::PFCandidate>,unsigned int> >*)o)->insert)(*(const ::edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)arg[0],
    *(const ::edm::Ref<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> >*)arg[1]);
}

static  void method_29210( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::edm::AssociationMap<edm::OneToMany<std::vector<reco::PFJet>,std::vector<reco::PFCandidate>,unsigned int> >*)o)->insert)(*(const ::edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > >*)arg[0]);
}

static  void method_29211( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::AssociationMap<edm::OneToMany<std::vector<reco::PFJet>,std::vector<reco::PFCandidate>,unsigned int> >::const_iterator)((((const ::edm::AssociationMap<edm::OneToMany<std::vector<reco::PFJet>,std::vector<reco::PFCandidate>,unsigned int> >*)o)->begin)());
  else   (((const ::edm::AssociationMap<edm::OneToMany<std::vector<reco::PFJet>,std::vector<reco::PFCandidate>,unsigned int> >*)o)->begin)();
}

static  void method_29212( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::AssociationMap<edm::OneToMany<std::vector<reco::PFJet>,std::vector<reco::PFCandidate>,unsigned int> >::const_iterator)((((const ::edm::AssociationMap<edm::OneToMany<std::vector<reco::PFJet>,std::vector<reco::PFCandidate>,unsigned int> >*)o)->end)());
  else   (((const ::edm::AssociationMap<edm::OneToMany<std::vector<reco::PFJet>,std::vector<reco::PFCandidate>,unsigned int> >*)o)->end)();
}

static  void method_29213( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (edm::AssociationMap<edm::OneToMany<std::vector<reco::PFJet>,std::vector<reco::PFCandidate>,unsigned int> >::const_iterator)((((const ::edm::AssociationMap<edm::OneToMany<std::vector<reco::PFJet>,std::vector<reco::PFCandidate>,unsigned int> >*)o)->find)(*(const ::edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)arg[0]));
  else   (((const ::edm::AssociationMap<edm::OneToMany<std::vector<reco::PFJet>,std::vector<reco::PFCandidate>,unsigned int> >*)o)->find)(*(const ::edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)arg[0]);
}

static  void method_29214( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((::edm::AssociationMap<edm::OneToMany<std::vector<reco::PFJet>,std::vector<reco::PFCandidate>,unsigned int> >*)o)->erase)(*(const ::edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)arg[0]));
  else   (((::edm::AssociationMap<edm::OneToMany<std::vector<reco::PFJet>,std::vector<reco::PFCandidate>,unsigned int> >*)o)->erase)(*(const ::edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)arg[0]);
}

static  void operator_29215( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::AssociationMap<edm::OneToMany<std::vector<reco::PFJet>,std::vector<reco::PFCandidate>,unsigned int> >*)o)->operator[])(*(const ::edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)arg[0]);
  else   (((const ::edm::AssociationMap<edm::OneToMany<std::vector<reco::PFJet>,std::vector<reco::PFCandidate>,unsigned int> >*)o)->operator[])(*(const ::edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)arg[0]);
}

static  void method_29216( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::edm::AssociationMap<edm::OneToMany<std::vector<reco::PFJet>,std::vector<reco::PFCandidate>,unsigned int> >*)o)->numberOfAssociations)(*(const ::edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)arg[0]));
  else   (((const ::edm::AssociationMap<edm::OneToMany<std::vector<reco::PFJet>,std::vector<reco::PFCandidate>,unsigned int> >*)o)->numberOfAssociations)(*(const ::edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)arg[0]);
}

static  void method_29217( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::AssociationMap<edm::OneToMany<std::vector<reco::PFJet>,std::vector<reco::PFCandidate>,unsigned int> >*)o)->refProd)();
  else   (((const ::edm::AssociationMap<edm::OneToMany<std::vector<reco::PFJet>,std::vector<reco::PFCandidate>,unsigned int> >*)o)->refProd)();
}

static  void method_29218( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::map<const reco::PFJet*,std::vector<const reco::PFCandidate*> >)((((::edm::AssociationMap<edm::OneToMany<std::vector<reco::PFJet>,std::vector<reco::PFCandidate>,unsigned int> >*)o)->map)());
  else   (((::edm::AssociationMap<edm::OneToMany<std::vector<reco::PFJet>,std::vector<reco::PFCandidate>,unsigned int> >*)o)->map)();
}

static  void method_29219( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::vector<const reco::PFJet*>)((((::edm::AssociationMap<edm::OneToMany<std::vector<reco::PFJet>,std::vector<reco::PFCandidate>,unsigned int> >*)o)->keys)());
  else   (((::edm::AssociationMap<edm::OneToMany<std::vector<reco::PFJet>,std::vector<reco::PFCandidate>,unsigned int> >*)o)->keys)();
}

static  void method_29220( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::vector<std::vector<const reco::PFCandidate*> >)((((::edm::AssociationMap<edm::OneToMany<std::vector<reco::PFJet>,std::vector<reco::PFCandidate>,unsigned int> >*)o)->values)());
  else   (((::edm::AssociationMap<edm::OneToMany<std::vector<reco::PFJet>,std::vector<reco::PFCandidate>,unsigned int> >*)o)->values)();
}

static  void method_29221( void*, void* o, const std::vector<void*>&, void*)
{
  (((::edm::AssociationMap<edm::OneToMany<std::vector<reco::PFJet>,std::vector<reco::PFCandidate>,unsigned int> >*)o)->post_insert)();
}

static  void method_29222( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (short)((((::edm::AssociationMap<edm::OneToMany<std::vector<reco::PFJet>,std::vector<reco::PFCandidate>,unsigned int> >*)o)->Class_Version)());
  else   (((::edm::AssociationMap<edm::OneToMany<std::vector<reco::PFJet>,std::vector<reco::PFCandidate>,unsigned int> >*)o)->Class_Version)();
}

static void method_newdel_5478( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::AssociationMap<edm::OneToMany<std::vector<reco::PFJet>,std::vector<reco::PFCandidate>,unsigned int> > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::AssociationMap<edm::OneToMany<std::vector<reco::PFJet>,std::vector<reco::PFCandidate>,unsigned int> > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::AssociationMap<edm::OneToMany<std::vector<reco::PFJet>,std::vector<reco::PFCandidate>,unsigned int> > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::AssociationMap<edm::OneToMany<std::vector<reco::PFJet>,std::vector<reco::PFCandidate>,unsigned int> > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::AssociationMap<edm::OneToMany<std::vector<reco::PFJet>,std::vector<reco::PFCandidate>,unsigned int> > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class AssociationMap<edm::OneToMany<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, std::vector<reco::PFCandidate, std::allocator<reco::PFCandidate> >, unsigned int> > -------------------------------
void __edm__AssociationMap_edm__OneToMany_std__vector_reco__PFJet__std__vector_reco__PFCandidate__unsignedsint_s__db_datamem(Reflex::Class*);
void __edm__AssociationMap_edm__OneToMany_std__vector_reco__PFJet__std__vector_reco__PFCandidate__unsignedsint_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__AssociationMap_edm__OneToMany_std__vector_reco__PFJet__std__vector_reco__PFCandidate__unsignedsint_s__datamem_bld(&__edm__AssociationMap_edm__OneToMany_std__vector_reco__PFJet__std__vector_reco__PFCandidate__unsignedsint_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__AssociationMap_edm__OneToMany_std__vector_reco__PFJet__std__vector_reco__PFCandidate__unsignedsint_s__funcmem_bld(&__edm__AssociationMap_edm__OneToMany_std__vector_reco__PFJet__std__vector_reco__PFCandidate__unsignedsint_s__db_funcmem);
void __edm__AssociationMap_edm__OneToMany_std__vector_reco__PFJet__std__vector_reco__PFCandidate__unsignedsint_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::AssociationMap<edm::OneToMany<std::vector<reco::PFJet>,std::vector<reco::PFCandidate>,unsigned int> >"), typeid(::edm::AssociationMap<edm::OneToMany<std::vector<reco::PFJet>,std::vector<reco::PFCandidate>,unsigned int> >), sizeof(::edm::AssociationMap<edm::OneToMany<std::vector<reco::PFJet>,std::vector<reco::PFCandidate>,unsigned int> >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("ClassVersion"), ::edm::AssociationMap<edm::OneToMany<std::vector<reco::PFJet>,std::vector<reco::PFCandidate>,unsigned int> >::Class_Version())
  .AddTypedef(type_5322, Reflex::Literal("edm::AssociationMap<edm::OneToMany<std::vector<reco::PFJet>,std::vector<reco::PFCandidate>,unsigned int> >::internal_val_type"))
  .AddTypedef(type_211, Reflex::Literal("edm::AssociationMap<edm::OneToMany<std::vector<reco::PFJet>,std::vector<reco::PFCandidate>,unsigned int> >::index_type"))
  .AddTypedef(type_5809, Reflex::Literal("edm::AssociationMap<edm::OneToMany<std::vector<reco::PFJet>,std::vector<reco::PFCandidate>,unsigned int> >::key_type"))
  .AddTypedef(type_5810, Reflex::Literal("edm::AssociationMap<edm::OneToMany<std::vector<reco::PFJet>,std::vector<reco::PFCandidate>,unsigned int> >::data_type"))
  .AddTypedef(type_27350, Reflex::Literal("edm::AssociationMap<edm::OneToMany<std::vector<reco::PFJet>,std::vector<reco::PFCandidate>,unsigned int> >::ref_type"))
  .AddTypedef(type_3377, Reflex::Literal("edm::AssociationMap<edm::OneToMany<std::vector<reco::PFJet>,std::vector<reco::PFCandidate>,unsigned int> >::map_type"))
  .AddTypedef(type_3455, Reflex::Literal("edm::AssociationMap<edm::OneToMany<std::vector<reco::PFJet>,std::vector<reco::PFCandidate>,unsigned int> >::size_type"))
  .AddTypedef(type_21942, Reflex::Literal("edm::AssociationMap<edm::OneToMany<std::vector<reco::PFJet>,std::vector<reco::PFCandidate>,unsigned int> >::value_type"))
  .AddTypedef(type_5322, Reflex::Literal("edm::AssociationMap<edm::OneToMany<std::vector<reco::PFJet>,std::vector<reco::PFCandidate>,unsigned int> >::result_type"))
  .AddTypedef(type_3376, Reflex::Literal("edm::AssociationMap<edm::OneToMany<std::vector<reco::PFJet>,std::vector<reco::PFCandidate>,unsigned int> >::internal_transient_map_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~AssociationMap"), destructor_29201, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::DESTRUCTOR )
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_48316, type_48317), Reflex::Literal("operator="), operator_29202, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_48317), Reflex::Literal("AssociationMap"), constructor_29203, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("AssociationMap"), constructor_29204, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_47464), Reflex::Literal("AssociationMap"), constructor_29205, 0, "ref", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_5478, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__AssociationMap_edm__OneToMany_std__vector_reco__PFJet__std__vector_reco__PFCandidate__unsignedsint_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__AssociationMap_edm__OneToMany_std__vector_reco__PFJet__std__vector_reco__PFCandidate__unsignedsint_s__funcmem_bld);
}

//------Delayed data member builder for class AssociationMap<edm::OneToMany<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, std::vector<reco::PFCandidate, std::allocator<reco::PFCandidate> >, unsigned int> > -------------------
void __edm__AssociationMap_edm__OneToMany_std__vector_reco__PFJet__std__vector_reco__PFCandidate__unsignedsint_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_27350, Reflex::Literal("ref_"), OffsetOf(__shadow__::__edm__AssociationMap_edm__OneToMany_std__vector_reco__PFJet__std__vector_reco__PFCandidate__unsignedsint_s_, ref_), ::Reflex::PRIVATE)
  .AddDataMember(type_3377, Reflex::Literal("map_"), OffsetOf(__shadow__::__edm__AssociationMap_edm__OneToMany_std__vector_reco__PFJet__std__vector_reco__PFCandidate__unsignedsint_s_, map_), ::Reflex::PRIVATE)
  .AddDataMember(type_3376, Reflex::Literal("transientMap_"), OffsetOf(__shadow__::__edm__AssociationMap_edm__OneToMany_std__vector_reco__PFJet__std__vector_reco__PFCandidate__unsignedsint_s_, transientMap_), ::Reflex::PRIVATE | ::Reflex::MUTABLE);
}
//------Delayed function member builder for class AssociationMap<edm::OneToMany<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, std::vector<reco::PFCandidate, std::allocator<reco::PFCandidate> >, unsigned int> > -------------------
void __edm__AssociationMap_edm__OneToMany_std__vector_reco__PFJet__std__vector_reco__PFCandidate__unsignedsint_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708), Reflex::Literal("clear"), method_29206, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3455), Reflex::Literal("size"), method_29207, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("empty"), method_29208, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_47461, type_47462), Reflex::Literal("insert"), method_29209, 0, "k;v", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_44496), Reflex::Literal("insert"), method_29210, 0, "kv", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_29199), Reflex::Literal("begin"), method_29211, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_29199), Reflex::Literal("end"), method_29212, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_29199, type_47461), Reflex::Literal("find"), method_29213, 0, "k", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3455, type_47461), Reflex::Literal("erase"), method_29214, 0, "k", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_47463, type_47461), Reflex::Literal("operator[]"), operator_29215, 0, "k", ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3455, type_47461), Reflex::Literal("numberOfAssociations"), method_29216, 0, "k", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_47464), Reflex::Literal("refProd"), method_29217, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3378), Reflex::Literal("map"), method_29218, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3109), Reflex::Literal("keys"), method_29219, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3107), Reflex::Literal("values"), method_29220, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708), Reflex::Literal("post_insert"), method_29221, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_484), Reflex::Literal("Class_Version"), method_29222, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC);
}
//------Stub functions for class Wrapper<edm::AssociationMap<edm::OneToMany<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, std::vector<reco::PFCandidate, std::allocator<reco::PFCandidate> >, unsigned int> > > -------------------------------
static void constructor_28693( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<edm::AssociationMap<edm::OneToMany<std::vector<reco::PFJet>,std::vector<reco::PFCandidate>,unsigned int> > >();
  else ::new(mem) ::edm::Wrapper<edm::AssociationMap<edm::OneToMany<std::vector<reco::PFJet>,std::vector<reco::PFCandidate>,unsigned int> > >();
}

static void constructor_28694( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<edm::AssociationMap<edm::OneToMany<std::vector<reco::PFJet>,std::vector<reco::PFCandidate>,unsigned int> > >(*(::std::auto_ptr<edm::AssociationMap<edm::OneToMany<std::vector<reco::PFJet>,std::vector<reco::PFCandidate>,unsigned int> > >*)arg[0]);
  else ::new(mem) ::edm::Wrapper<edm::AssociationMap<edm::OneToMany<std::vector<reco::PFJet>,std::vector<reco::PFCandidate>,unsigned int> > >(*(::std::auto_ptr<edm::AssociationMap<edm::OneToMany<std::vector<reco::PFJet>,std::vector<reco::PFCandidate>,unsigned int> > >*)arg[0]);
}

static void destructor_28695(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::Wrapper<edm::AssociationMap<edm::OneToMany<std::vector<reco::PFJet>,std::vector<reco::PFCandidate>,unsigned int> > >*)o)->::edm::Wrapper<edm::AssociationMap<edm::OneToMany<std::vector<reco::PFJet>,std::vector<reco::PFCandidate>,unsigned int> > >::~Wrapper)();
}
static  void method_28696( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Wrapper<edm::AssociationMap<edm::OneToMany<std::vector<reco::PFJet>,std::vector<reco::PFCandidate>,unsigned int> > >*)o)->product)());
  else   (((const ::edm::Wrapper<edm::AssociationMap<edm::OneToMany<std::vector<reco::PFJet>,std::vector<reco::PFCandidate>,unsigned int> > >*)o)->product)();
}

static  void operator_28697( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Wrapper<edm::AssociationMap<edm::OneToMany<std::vector<reco::PFJet>,std::vector<reco::PFCandidate>,unsigned int> > >*)o)->operator->)());
  else   (((const ::edm::Wrapper<edm::AssociationMap<edm::OneToMany<std::vector<reco::PFJet>,std::vector<reco::PFCandidate>,unsigned int> > >*)o)->operator->)();
}

static  void method_28698( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::Wrapper<edm::AssociationMap<edm::OneToMany<std::vector<reco::PFJet>,std::vector<reco::PFCandidate>,unsigned int> > >*)o)->productTypeInfo)();
  else   (((::edm::Wrapper<edm::AssociationMap<edm::OneToMany<std::vector<reco::PFJet>,std::vector<reco::PFCandidate>,unsigned int> > >*)o)->productTypeInfo)();
}

static  void method_28699( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::Wrapper<edm::AssociationMap<edm::OneToMany<std::vector<reco::PFJet>,std::vector<reco::PFCandidate>,unsigned int> > >*)o)->typeInfo)();
  else   (((::edm::Wrapper<edm::AssociationMap<edm::OneToMany<std::vector<reco::PFJet>,std::vector<reco::PFCandidate>,unsigned int> > >*)o)->typeInfo)();
}

static void constructor_28700( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<edm::AssociationMap<edm::OneToMany<std::vector<reco::PFJet>,std::vector<reco::PFCandidate>,unsigned int> > >((::edm::AssociationMap<edm::OneToMany<std::vector<reco::PFJet>,std::vector<reco::PFCandidate>,unsigned int> >*)arg[0]);
  else ::new(mem) ::edm::Wrapper<edm::AssociationMap<edm::OneToMany<std::vector<reco::PFJet>,std::vector<reco::PFCandidate>,unsigned int> > >((::edm::AssociationMap<edm::OneToMany<std::vector<reco::PFJet>,std::vector<reco::PFCandidate>,unsigned int> >*)arg[0]);
}

static  void method_28701( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((::edm::Wrapper<edm::AssociationMap<edm::OneToMany<std::vector<reco::PFJet>,std::vector<reco::PFCandidate>,unsigned int> > >*)o)->getInterface)());
  else   (((::edm::Wrapper<edm::AssociationMap<edm::OneToMany<std::vector<reco::PFJet>,std::vector<reco::PFCandidate>,unsigned int> > >*)o)->getInterface)();
}

static  void method_28702( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<edm::AssociationMap<edm::OneToMany<std::vector<reco::PFJet>,std::vector<reco::PFCandidate>,unsigned int> > >*)o)->fillView)(*(const ::edm::ProductID*)arg[0],
    *(::std::vector<const void*>*)arg[1],
    *(::boost::shared_ptr<edm::reftobase::RefVectorHolderBase>*)arg[2]);
}

static  void method_28703( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<edm::AssociationMap<edm::OneToMany<std::vector<reco::PFJet>,std::vector<reco::PFCandidate>,unsigned int> > >*)o)->setPtr)(*(const ::std::type_info*)arg[0],
    *(unsigned long*)arg[1],
    *(const void**)arg[2]);
}

static  void method_28704( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<edm::AssociationMap<edm::OneToMany<std::vector<reco::PFJet>,std::vector<reco::PFCandidate>,unsigned int> > >*)o)->fillPtrVector)(*(const ::std::type_info*)arg[0],
    *(const ::std::vector<unsigned long>*)arg[1],
    *(::std::vector<const void*>*)arg[2]);
}

static  void method_28705( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Wrapper<edm::AssociationMap<edm::OneToMany<std::vector<reco::PFJet>,std::vector<reco::PFCandidate>,unsigned int> > >*)o)->dynamicTypeInfo)();
  else   (((const ::edm::Wrapper<edm::AssociationMap<edm::OneToMany<std::vector<reco::PFJet>,std::vector<reco::PFCandidate>,unsigned int> > >*)o)->dynamicTypeInfo)();
}

static  void method_28706( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Wrapper<edm::AssociationMap<edm::OneToMany<std::vector<reco::PFJet>,std::vector<reco::PFCandidate>,unsigned int> > >*)o)->isPresent)());
  else   (((const ::edm::Wrapper<edm::AssociationMap<edm::OneToMany<std::vector<reco::PFJet>,std::vector<reco::PFCandidate>,unsigned int> > >*)o)->isPresent)();
}

static  void method_28707( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Wrapper<edm::AssociationMap<edm::OneToMany<std::vector<reco::PFJet>,std::vector<reco::PFCandidate>,unsigned int> > >*)o)->dynamicTypeInfo_)();
  else   (((const ::edm::Wrapper<edm::AssociationMap<edm::OneToMany<std::vector<reco::PFJet>,std::vector<reco::PFCandidate>,unsigned int> > >*)o)->dynamicTypeInfo_)();
}

static void method_newdel_5449( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<edm::AssociationMap<edm::OneToMany<std::vector<reco::PFJet>,std::vector<reco::PFCandidate>,unsigned int> > > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<edm::AssociationMap<edm::OneToMany<std::vector<reco::PFJet>,std::vector<reco::PFCandidate>,unsigned int> > > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<edm::AssociationMap<edm::OneToMany<std::vector<reco::PFJet>,std::vector<reco::PFCandidate>,unsigned int> > > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<edm::AssociationMap<edm::OneToMany<std::vector<reco::PFJet>,std::vector<reco::PFCandidate>,unsigned int> > > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<edm::AssociationMap<edm::OneToMany<std::vector<reco::PFJet>,std::vector<reco::PFCandidate>,unsigned int> > > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class Wrapper<edm::AssociationMap<edm::OneToMany<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, std::vector<reco::PFCandidate, std::allocator<reco::PFCandidate> >, unsigned int> > > -------------------------------
void __edm__Wrapper_edm__AssociationMap_edm__OneToMany_std__vector_reco__PFJet__std__vector_reco__PFCandidate__unsignedsint_s_s__db_datamem(Reflex::Class*);
void __edm__Wrapper_edm__AssociationMap_edm__OneToMany_std__vector_reco__PFJet__std__vector_reco__PFCandidate__unsignedsint_s_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__Wrapper_edm__AssociationMap_edm__OneToMany_std__vector_reco__PFJet__std__vector_reco__PFCandidate__unsignedsint_s_s__datamem_bld(&__edm__Wrapper_edm__AssociationMap_edm__OneToMany_std__vector_reco__PFJet__std__vector_reco__PFCandidate__unsignedsint_s_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__Wrapper_edm__AssociationMap_edm__OneToMany_std__vector_reco__PFJet__std__vector_reco__PFCandidate__unsignedsint_s_s__funcmem_bld(&__edm__Wrapper_edm__AssociationMap_edm__OneToMany_std__vector_reco__PFJet__std__vector_reco__PFCandidate__unsignedsint_s_s__db_funcmem);
void __edm__Wrapper_edm__AssociationMap_edm__OneToMany_std__vector_reco__PFJet__std__vector_reco__PFCandidate__unsignedsint_s_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::Wrapper<edm::AssociationMap<edm::OneToMany<std::vector<reco::PFJet>,std::vector<reco::PFCandidate>,unsigned int> > >"), typeid(::edm::Wrapper<edm::AssociationMap<edm::OneToMany<std::vector<reco::PFJet>,std::vector<reco::PFCandidate>,unsigned int> > >), sizeof(::edm::Wrapper<edm::AssociationMap<edm::OneToMany<std::vector<reco::PFJet>,std::vector<reco::PFCandidate>,unsigned int> > >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddTypedef(type_5478, Reflex::Literal("edm::Wrapper<edm::AssociationMap<edm::OneToMany<std::vector<reco::PFJet>,std::vector<reco::PFCandidate>,unsigned int> > >::value_type"))
  .AddTypedef(type_5478, Reflex::Literal("edm::Wrapper<edm::AssociationMap<edm::OneToMany<std::vector<reco::PFJet>,std::vector<reco::PFCandidate>,unsigned int> > >::wrapped_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("Wrapper"), constructor_28693, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_2870), Reflex::Literal("Wrapper"), constructor_28694, 0, "ptr", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~Wrapper"), destructor_28695, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_48202), Reflex::Literal("Wrapper"), constructor_28700, 0, "ptr", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_5449, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__Wrapper_edm__AssociationMap_edm__OneToMany_std__vector_reco__PFJet__std__vector_reco__PFCandidate__unsignedsint_s_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__Wrapper_edm__AssociationMap_edm__OneToMany_std__vector_reco__PFJet__std__vector_reco__PFCandidate__unsignedsint_s_s__funcmem_bld);
}

//------Delayed data member builder for class Wrapper<edm::AssociationMap<edm::OneToMany<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, std::vector<reco::PFCandidate, std::allocator<reco::PFCandidate> >, unsigned int> > > -------------------
void __edm__Wrapper_edm__AssociationMap_edm__OneToMany_std__vector_reco__PFJet__std__vector_reco__PFCandidate__unsignedsint_s_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_1593, Reflex::Literal("present"), OffsetOf(__shadow__::__edm__Wrapper_edm__AssociationMap_edm__OneToMany_std__vector_reco__PFJet__std__vector_reco__PFCandidate__unsignedsint_s_s_, present), ::Reflex::PRIVATE)
  .AddDataMember(type_5478, Reflex::Literal("obj"), OffsetOf(__shadow__::__edm__Wrapper_edm__AssociationMap_edm__OneToMany_std__vector_reco__PFJet__std__vector_reco__PFCandidate__unsignedsint_s_s_, obj), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class Wrapper<edm::AssociationMap<edm::OneToMany<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, std::vector<reco::PFCandidate, std::allocator<reco::PFCandidate> >, unsigned int> > > -------------------
void __edm__Wrapper_edm__AssociationMap_edm__OneToMany_std__vector_reco__PFJet__std__vector_reco__PFCandidate__unsignedsint_s_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_48201), Reflex::Literal("product"), method_28696, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_48201), Reflex::Literal("operator->"), operator_28697, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_25675), Reflex::Literal("productTypeInfo"), method_28698, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_25675), Reflex::Literal("typeInfo"), method_28699, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_48203), Reflex::Literal("getInterface"), method_28701, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_25503, type_25627, type_47348), Reflex::Literal("fillView"), method_28702, 0, "id;pointers;helpers", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_25675, type_53, type_13292), Reflex::Literal("setPtr"), method_28703, 0, "iToType;iIndex;oPtr", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_25675, type_32194, type_25627), Reflex::Literal("fillPtrVector"), method_28704, 0, "iToType;iIndices;oPtr", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_25675), Reflex::Literal("dynamicTypeInfo"), method_28705, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("isPresent"), method_28706, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_25675), Reflex::Literal("dynamicTypeInfo_"), method_28707, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST);
}
//------Stub functions for class FFTJetPileupSummary -------------------------------
static void destructor_34712(void*, void * o, const std::vector<void*>&, void *) {
(((::reco::FFTJetPileupSummary*)o)->::reco::FFTJetPileupSummary::~FFTJetPileupSummary)();
}
static  void operator_34713( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::reco::FFTJetPileupSummary*)o)->operator=)(*(const ::reco::FFTJetPileupSummary*)arg[0]);
  else   (((::reco::FFTJetPileupSummary*)o)->operator=)(*(const ::reco::FFTJetPileupSummary*)arg[0]);
}

static void constructor_34714( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::reco::FFTJetPileupSummary(*(const ::reco::FFTJetPileupSummary*)arg[0]);
  else ::new(mem) ::reco::FFTJetPileupSummary(*(const ::reco::FFTJetPileupSummary*)arg[0]);
}

static void constructor_34715( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::reco::FFTJetPileupSummary();
  else ::new(mem) ::reco::FFTJetPileupSummary();
}

static void constructor_34716( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if ( arg.size() == 2 ) {
    if (retaddr) *(void**)retaddr = ::new(mem) ::reco::FFTJetPileupSummary(*(const float*)arg[0],
      *(const float*)arg[1]);
  else ::new(mem) ::reco::FFTJetPileupSummary(*(const float*)arg[0],
      *(const float*)arg[1]);
  }
  else if ( arg.size() == 3 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::reco::FFTJetPileupSummary(*(const float*)arg[0],
      *(const float*)arg[1],
      *(const float*)arg[2]);
  else ::new(mem) ::reco::FFTJetPileupSummary(*(const float*)arg[0],
      *(const float*)arg[1],
      *(const float*)arg[2]);
  }
  else if ( arg.size() == 4 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::reco::FFTJetPileupSummary(*(const float*)arg[0],
      *(const float*)arg[1],
      *(const float*)arg[2],
      *(const int*)arg[3]);
  else ::new(mem) ::reco::FFTJetPileupSummary(*(const float*)arg[0],
      *(const float*)arg[1],
      *(const float*)arg[2],
      *(const int*)arg[3]);
  }
}

static  void method_34717( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (float)((((const ::reco::FFTJetPileupSummary*)o)->uncalibratedQuantile)());
  else   (((const ::reco::FFTJetPileupSummary*)o)->uncalibratedQuantile)();
}

static  void method_34718( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (float)((((const ::reco::FFTJetPileupSummary*)o)->pileupRho)());
  else   (((const ::reco::FFTJetPileupSummary*)o)->pileupRho)();
}

static  void method_34719( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (float)((((const ::reco::FFTJetPileupSummary*)o)->pileupRhoUncertainty)());
  else   (((const ::reco::FFTJetPileupSummary*)o)->pileupRhoUncertainty)();
}

static  void method_34720( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (int)((((const ::reco::FFTJetPileupSummary*)o)->uncertaintyCode)());
  else   (((const ::reco::FFTJetPileupSummary*)o)->uncertaintyCode)();
}

static void method_newdel_9014( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::reco::FFTJetPileupSummary >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::reco::FFTJetPileupSummary >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::reco::FFTJetPileupSummary >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::reco::FFTJetPileupSummary >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::reco::FFTJetPileupSummary >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class FFTJetPileupSummary -------------------------------
void __reco__FFTJetPileupSummary_db_datamem(Reflex::Class*);
void __reco__FFTJetPileupSummary_db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __reco__FFTJetPileupSummary_datamem_bld(&__reco__FFTJetPileupSummary_db_datamem);
Reflex::GenreflexMemberBuilder __reco__FFTJetPileupSummary_funcmem_bld(&__reco__FFTJetPileupSummary_db_funcmem);
void __reco__FFTJetPileupSummary_dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("reco::FFTJetPileupSummary"), typeid(::reco::FFTJetPileupSummary), sizeof(::reco::FFTJetPileupSummary), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("ClassVersion"), "10")
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~FFTJetPileupSummary"), destructor_34712, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::DESTRUCTOR )
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_50023, type_50024), Reflex::Literal("operator="), operator_34713, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_50024), Reflex::Literal("FFTJetPileupSummary"), constructor_34714, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("FFTJetPileupSummary"), constructor_34715, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_913c, type_913c, type_913c, type_65c), Reflex::Literal("FFTJetPileupSummary"), constructor_34716, 0, "uncalibrated;pileup;uncert=-1.0e+0f;code=-0x00000000000000001", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_9014, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__reco__FFTJetPileupSummary_datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__reco__FFTJetPileupSummary_funcmem_bld);
}

//------Delayed data member builder for class FFTJetPileupSummary -------------------
void __reco__FFTJetPileupSummary_db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_913, Reflex::Literal("uncalibratedQuantile_"), OffsetOf(__shadow__::__reco__FFTJetPileupSummary, uncalibratedQuantile_), ::Reflex::PRIVATE)
  .AddDataMember(type_913, Reflex::Literal("pileupRho_"), OffsetOf(__shadow__::__reco__FFTJetPileupSummary, pileupRho_), ::Reflex::PRIVATE)
  .AddDataMember(type_913, Reflex::Literal("pileupRhoUncert_"), OffsetOf(__shadow__::__reco__FFTJetPileupSummary, pileupRhoUncert_), ::Reflex::PRIVATE)
  .AddDataMember(type_65, Reflex::Literal("uncertaintyCode_"), OffsetOf(__shadow__::__reco__FFTJetPileupSummary, uncertaintyCode_), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class FFTJetPileupSummary -------------------
void __reco__FFTJetPileupSummary_db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_913), Reflex::Literal("uncalibratedQuantile"), method_34717, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_913), Reflex::Literal("pileupRho"), method_34718, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_913), Reflex::Literal("pileupRhoUncertainty"), method_34719, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_65), Reflex::Literal("uncertaintyCode"), method_34720, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST);
}
//------Stub functions for class Wrapper<reco::FFTJetPileupSummary> -------------------------------
static void constructor_28714( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<reco::FFTJetPileupSummary>();
  else ::new(mem) ::edm::Wrapper<reco::FFTJetPileupSummary>();
}

static void constructor_28715( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<reco::FFTJetPileupSummary>(*(::std::auto_ptr<reco::FFTJetPileupSummary>*)arg[0]);
  else ::new(mem) ::edm::Wrapper<reco::FFTJetPileupSummary>(*(::std::auto_ptr<reco::FFTJetPileupSummary>*)arg[0]);
}

static void destructor_28716(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::Wrapper<reco::FFTJetPileupSummary>*)o)->::edm::Wrapper<reco::FFTJetPileupSummary>::~Wrapper)();
}
static  void method_28717( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Wrapper<reco::FFTJetPileupSummary>*)o)->product)());
  else   (((const ::edm::Wrapper<reco::FFTJetPileupSummary>*)o)->product)();
}

static  void operator_28718( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Wrapper<reco::FFTJetPileupSummary>*)o)->operator->)());
  else   (((const ::edm::Wrapper<reco::FFTJetPileupSummary>*)o)->operator->)();
}

static  void method_28719( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::Wrapper<reco::FFTJetPileupSummary>*)o)->productTypeInfo)();
  else   (((::edm::Wrapper<reco::FFTJetPileupSummary>*)o)->productTypeInfo)();
}

static  void method_28720( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::Wrapper<reco::FFTJetPileupSummary>*)o)->typeInfo)();
  else   (((::edm::Wrapper<reco::FFTJetPileupSummary>*)o)->typeInfo)();
}

static void constructor_28721( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<reco::FFTJetPileupSummary>((::reco::FFTJetPileupSummary*)arg[0]);
  else ::new(mem) ::edm::Wrapper<reco::FFTJetPileupSummary>((::reco::FFTJetPileupSummary*)arg[0]);
}

static  void method_28722( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((::edm::Wrapper<reco::FFTJetPileupSummary>*)o)->getInterface)());
  else   (((::edm::Wrapper<reco::FFTJetPileupSummary>*)o)->getInterface)();
}

static  void method_28723( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<reco::FFTJetPileupSummary>*)o)->fillView)(*(const ::edm::ProductID*)arg[0],
    *(::std::vector<const void*>*)arg[1],
    *(::boost::shared_ptr<edm::reftobase::RefVectorHolderBase>*)arg[2]);
}

static  void method_28724( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<reco::FFTJetPileupSummary>*)o)->setPtr)(*(const ::std::type_info*)arg[0],
    *(unsigned long*)arg[1],
    *(const void**)arg[2]);
}

static  void method_28725( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<reco::FFTJetPileupSummary>*)o)->fillPtrVector)(*(const ::std::type_info*)arg[0],
    *(const ::std::vector<unsigned long>*)arg[1],
    *(::std::vector<const void*>*)arg[2]);
}

static  void method_28726( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Wrapper<reco::FFTJetPileupSummary>*)o)->dynamicTypeInfo)();
  else   (((const ::edm::Wrapper<reco::FFTJetPileupSummary>*)o)->dynamicTypeInfo)();
}

static  void method_28727( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Wrapper<reco::FFTJetPileupSummary>*)o)->isPresent)());
  else   (((const ::edm::Wrapper<reco::FFTJetPileupSummary>*)o)->isPresent)();
}

static  void method_28728( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Wrapper<reco::FFTJetPileupSummary>*)o)->dynamicTypeInfo_)();
  else   (((const ::edm::Wrapper<reco::FFTJetPileupSummary>*)o)->dynamicTypeInfo_)();
}

static void method_newdel_5450( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<reco::FFTJetPileupSummary> >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<reco::FFTJetPileupSummary> >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<reco::FFTJetPileupSummary> >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<reco::FFTJetPileupSummary> >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<reco::FFTJetPileupSummary> >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class Wrapper<reco::FFTJetPileupSummary> -------------------------------
void __edm__Wrapper_reco__FFTJetPileupSummary__db_datamem(Reflex::Class*);
void __edm__Wrapper_reco__FFTJetPileupSummary__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__Wrapper_reco__FFTJetPileupSummary__datamem_bld(&__edm__Wrapper_reco__FFTJetPileupSummary__db_datamem);
Reflex::GenreflexMemberBuilder __edm__Wrapper_reco__FFTJetPileupSummary__funcmem_bld(&__edm__Wrapper_reco__FFTJetPileupSummary__db_funcmem);
void __edm__Wrapper_reco__FFTJetPileupSummary__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::Wrapper<reco::FFTJetPileupSummary>"), typeid(::edm::Wrapper<reco::FFTJetPileupSummary>), sizeof(::edm::Wrapper<reco::FFTJetPileupSummary>), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddTypedef(type_9014, Reflex::Literal("edm::Wrapper<reco::FFTJetPileupSummary>::value_type"))
  .AddTypedef(type_9014, Reflex::Literal("edm::Wrapper<reco::FFTJetPileupSummary>::wrapped_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("Wrapper"), constructor_28714, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_2871), Reflex::Literal("Wrapper"), constructor_28715, 0, "ptr", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~Wrapper"), destructor_28716, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_48207), Reflex::Literal("Wrapper"), constructor_28721, 0, "ptr", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_5450, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__Wrapper_reco__FFTJetPileupSummary__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__Wrapper_reco__FFTJetPileupSummary__funcmem_bld);
}

//------Delayed data member builder for class Wrapper<reco::FFTJetPileupSummary> -------------------
void __edm__Wrapper_reco__FFTJetPileupSummary__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_1593, Reflex::Literal("present"), OffsetOf(__shadow__::__edm__Wrapper_reco__FFTJetPileupSummary_, present), ::Reflex::PRIVATE)
  .AddDataMember(type_9014, Reflex::Literal("obj"), OffsetOf(__shadow__::__edm__Wrapper_reco__FFTJetPileupSummary_, obj), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class Wrapper<reco::FFTJetPileupSummary> -------------------
void __edm__Wrapper_reco__FFTJetPileupSummary__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_48206), Reflex::Literal("product"), method_28717, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_48206), Reflex::Literal("operator->"), operator_28718, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_25675), Reflex::Literal("productTypeInfo"), method_28719, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_25675), Reflex::Literal("typeInfo"), method_28720, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_48208), Reflex::Literal("getInterface"), method_28722, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_25503, type_25627, type_47348), Reflex::Literal("fillView"), method_28723, 0, "id;pointers;helpers", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_25675, type_53, type_13292), Reflex::Literal("setPtr"), method_28724, 0, "iToType;iIndex;oPtr", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_25675, type_32194, type_25627), Reflex::Literal("fillPtrVector"), method_28725, 0, "iToType;iIndices;oPtr", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_25675), Reflex::Literal("dynamicTypeInfo"), method_28726, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("isPresent"), method_28727, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_25675), Reflex::Literal("dynamicTypeInfo_"), method_28728, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST);
}
//------Stub functions for class DiscretizedEnergyFlow -------------------------------
static void destructor_33952(void*, void * o, const std::vector<void*>&, void *) {
(((::reco::DiscretizedEnergyFlow*)o)->::reco::DiscretizedEnergyFlow::~DiscretizedEnergyFlow)();
}
static  void operator_33953( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::reco::DiscretizedEnergyFlow*)o)->operator=)(*(const ::reco::DiscretizedEnergyFlow*)arg[0]);
  else   (((::reco::DiscretizedEnergyFlow*)o)->operator=)(*(const ::reco::DiscretizedEnergyFlow*)arg[0]);
}

static void constructor_33954( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::reco::DiscretizedEnergyFlow(*(const ::reco::DiscretizedEnergyFlow*)arg[0]);
  else ::new(mem) ::reco::DiscretizedEnergyFlow(*(const ::reco::DiscretizedEnergyFlow*)arg[0]);
}

static void constructor_33955( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::reco::DiscretizedEnergyFlow();
  else ::new(mem) ::reco::DiscretizedEnergyFlow();
}

static void constructor_33956( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::reco::DiscretizedEnergyFlow((const double*)arg[0],
      (const char*)arg[1],
      *(double*)arg[2],
      *(double*)arg[3],
      *(double*)arg[4],
      *(unsigned int*)arg[5],
      *(unsigned int*)arg[6]);
  else ::new(mem) ::reco::DiscretizedEnergyFlow((const double*)arg[0],
      (const char*)arg[1],
      *(double*)arg[2],
      *(double*)arg[3],
      *(double*)arg[4],
      *(unsigned int*)arg[5],
      *(unsigned int*)arg[6]);
}

static  void method_33957( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::reco::DiscretizedEnergyFlow*)o)->data)());
  else   (((const ::reco::DiscretizedEnergyFlow*)o)->data)();
}

static  void method_33958( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::reco::DiscretizedEnergyFlow*)o)->title)());
  else   (((const ::reco::DiscretizedEnergyFlow*)o)->title)();
}

static  void method_33959( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (double)((((const ::reco::DiscretizedEnergyFlow*)o)->etaMin)());
  else   (((const ::reco::DiscretizedEnergyFlow*)o)->etaMin)();
}

static  void method_33960( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (double)((((const ::reco::DiscretizedEnergyFlow*)o)->etaMax)());
  else   (((const ::reco::DiscretizedEnergyFlow*)o)->etaMax)();
}

static  void method_33961( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (double)((((const ::reco::DiscretizedEnergyFlow*)o)->phiBin0Edge)());
  else   (((const ::reco::DiscretizedEnergyFlow*)o)->phiBin0Edge)();
}

static  void method_33962( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (unsigned int)((((const ::reco::DiscretizedEnergyFlow*)o)->nEtaBins)());
  else   (((const ::reco::DiscretizedEnergyFlow*)o)->nEtaBins)();
}

static  void method_33963( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (unsigned int)((((const ::reco::DiscretizedEnergyFlow*)o)->nPhiBins)());
  else   (((const ::reco::DiscretizedEnergyFlow*)o)->nPhiBins)();
}

static void method_newdel_8920( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::reco::DiscretizedEnergyFlow >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::reco::DiscretizedEnergyFlow >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::reco::DiscretizedEnergyFlow >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::reco::DiscretizedEnergyFlow >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::reco::DiscretizedEnergyFlow >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class DiscretizedEnergyFlow -------------------------------
void __reco__DiscretizedEnergyFlow_db_datamem(Reflex::Class*);
void __reco__DiscretizedEnergyFlow_db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __reco__DiscretizedEnergyFlow_datamem_bld(&__reco__DiscretizedEnergyFlow_db_datamem);
Reflex::GenreflexMemberBuilder __reco__DiscretizedEnergyFlow_funcmem_bld(&__reco__DiscretizedEnergyFlow_db_funcmem);
void __reco__DiscretizedEnergyFlow_dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("reco::DiscretizedEnergyFlow"), typeid(::reco::DiscretizedEnergyFlow), sizeof(::reco::DiscretizedEnergyFlow), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("ClassVersion"), "10")
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~DiscretizedEnergyFlow"), destructor_33952, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::DESTRUCTOR )
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_49863, type_49864), Reflex::Literal("operator="), operator_33953, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_49864), Reflex::Literal("DiscretizedEnergyFlow"), constructor_33954, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("DiscretizedEnergyFlow"), constructor_33955, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_4184, type_4044, type_101, type_101, type_101, type_211, type_211), Reflex::Literal("DiscretizedEnergyFlow"), constructor_33956, 0, "data;title;etaMin;etaMax;phiBin0Edge;nEtaBins;nPhiBins", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_8920, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__reco__DiscretizedEnergyFlow_datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__reco__DiscretizedEnergyFlow_funcmem_bld);
}

//------Delayed data member builder for class DiscretizedEnergyFlow -------------------
void __reco__DiscretizedEnergyFlow_db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_3176, Reflex::Literal("data_"), OffsetOf(__shadow__::__reco__DiscretizedEnergyFlow, data_), ::Reflex::PRIVATE)
  .AddDataMember(type_2638, Reflex::Literal("title_"), OffsetOf(__shadow__::__reco__DiscretizedEnergyFlow, title_), ::Reflex::PRIVATE)
  .AddDataMember(type_101, Reflex::Literal("etaMin_"), OffsetOf(__shadow__::__reco__DiscretizedEnergyFlow, etaMin_), ::Reflex::PRIVATE)
  .AddDataMember(type_101, Reflex::Literal("etaMax_"), OffsetOf(__shadow__::__reco__DiscretizedEnergyFlow, etaMax_), ::Reflex::PRIVATE)
  .AddDataMember(type_101, Reflex::Literal("phiBin0Edge_"), OffsetOf(__shadow__::__reco__DiscretizedEnergyFlow, phiBin0Edge_), ::Reflex::PRIVATE)
  .AddDataMember(type_211, Reflex::Literal("nEtaBins_"), OffsetOf(__shadow__::__reco__DiscretizedEnergyFlow, nEtaBins_), ::Reflex::PRIVATE)
  .AddDataMember(type_211, Reflex::Literal("nPhiBins_"), OffsetOf(__shadow__::__reco__DiscretizedEnergyFlow, nPhiBins_), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class DiscretizedEnergyFlow -------------------
void __reco__DiscretizedEnergyFlow_db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4184), Reflex::Literal("data"), method_33957, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4044), Reflex::Literal("title"), method_33958, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_101), Reflex::Literal("etaMin"), method_33959, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_101), Reflex::Literal("etaMax"), method_33960, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_101), Reflex::Literal("phiBin0Edge"), method_33961, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_211), Reflex::Literal("nEtaBins"), method_33962, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_211), Reflex::Literal("nPhiBins"), method_33963, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST);
}
//------Stub functions for class Wrapper<reco::DiscretizedEnergyFlow> -------------------------------
static void constructor_28735( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<reco::DiscretizedEnergyFlow>();
  else ::new(mem) ::edm::Wrapper<reco::DiscretizedEnergyFlow>();
}

static void constructor_28736( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<reco::DiscretizedEnergyFlow>(*(::std::auto_ptr<reco::DiscretizedEnergyFlow>*)arg[0]);
  else ::new(mem) ::edm::Wrapper<reco::DiscretizedEnergyFlow>(*(::std::auto_ptr<reco::DiscretizedEnergyFlow>*)arg[0]);
}

static void destructor_28737(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::Wrapper<reco::DiscretizedEnergyFlow>*)o)->::edm::Wrapper<reco::DiscretizedEnergyFlow>::~Wrapper)();
}
static  void method_28738( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Wrapper<reco::DiscretizedEnergyFlow>*)o)->product)());
  else   (((const ::edm::Wrapper<reco::DiscretizedEnergyFlow>*)o)->product)();
}

static  void operator_28739( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Wrapper<reco::DiscretizedEnergyFlow>*)o)->operator->)());
  else   (((const ::edm::Wrapper<reco::DiscretizedEnergyFlow>*)o)->operator->)();
}

static  void method_28740( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::Wrapper<reco::DiscretizedEnergyFlow>*)o)->productTypeInfo)();
  else   (((::edm::Wrapper<reco::DiscretizedEnergyFlow>*)o)->productTypeInfo)();
}

static  void method_28741( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::Wrapper<reco::DiscretizedEnergyFlow>*)o)->typeInfo)();
  else   (((::edm::Wrapper<reco::DiscretizedEnergyFlow>*)o)->typeInfo)();
}

static void constructor_28742( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<reco::DiscretizedEnergyFlow>((::reco::DiscretizedEnergyFlow*)arg[0]);
  else ::new(mem) ::edm::Wrapper<reco::DiscretizedEnergyFlow>((::reco::DiscretizedEnergyFlow*)arg[0]);
}

static  void method_28743( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((::edm::Wrapper<reco::DiscretizedEnergyFlow>*)o)->getInterface)());
  else   (((::edm::Wrapper<reco::DiscretizedEnergyFlow>*)o)->getInterface)();
}

static  void method_28744( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<reco::DiscretizedEnergyFlow>*)o)->fillView)(*(const ::edm::ProductID*)arg[0],
    *(::std::vector<const void*>*)arg[1],
    *(::boost::shared_ptr<edm::reftobase::RefVectorHolderBase>*)arg[2]);
}

static  void method_28745( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<reco::DiscretizedEnergyFlow>*)o)->setPtr)(*(const ::std::type_info*)arg[0],
    *(unsigned long*)arg[1],
    *(const void**)arg[2]);
}

static  void method_28746( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<reco::DiscretizedEnergyFlow>*)o)->fillPtrVector)(*(const ::std::type_info*)arg[0],
    *(const ::std::vector<unsigned long>*)arg[1],
    *(::std::vector<const void*>*)arg[2]);
}

static  void method_28747( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Wrapper<reco::DiscretizedEnergyFlow>*)o)->dynamicTypeInfo)();
  else   (((const ::edm::Wrapper<reco::DiscretizedEnergyFlow>*)o)->dynamicTypeInfo)();
}

static  void method_28748( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Wrapper<reco::DiscretizedEnergyFlow>*)o)->isPresent)());
  else   (((const ::edm::Wrapper<reco::DiscretizedEnergyFlow>*)o)->isPresent)();
}

static  void method_28749( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Wrapper<reco::DiscretizedEnergyFlow>*)o)->dynamicTypeInfo_)();
  else   (((const ::edm::Wrapper<reco::DiscretizedEnergyFlow>*)o)->dynamicTypeInfo_)();
}

static void method_newdel_5451( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<reco::DiscretizedEnergyFlow> >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<reco::DiscretizedEnergyFlow> >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<reco::DiscretizedEnergyFlow> >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<reco::DiscretizedEnergyFlow> >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<reco::DiscretizedEnergyFlow> >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class Wrapper<reco::DiscretizedEnergyFlow> -------------------------------
void __edm__Wrapper_reco__DiscretizedEnergyFlow__db_datamem(Reflex::Class*);
void __edm__Wrapper_reco__DiscretizedEnergyFlow__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__Wrapper_reco__DiscretizedEnergyFlow__datamem_bld(&__edm__Wrapper_reco__DiscretizedEnergyFlow__db_datamem);
Reflex::GenreflexMemberBuilder __edm__Wrapper_reco__DiscretizedEnergyFlow__funcmem_bld(&__edm__Wrapper_reco__DiscretizedEnergyFlow__db_funcmem);
void __edm__Wrapper_reco__DiscretizedEnergyFlow__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::Wrapper<reco::DiscretizedEnergyFlow>"), typeid(::edm::Wrapper<reco::DiscretizedEnergyFlow>), sizeof(::edm::Wrapper<reco::DiscretizedEnergyFlow>), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddTypedef(type_8920, Reflex::Literal("edm::Wrapper<reco::DiscretizedEnergyFlow>::value_type"))
  .AddTypedef(type_8920, Reflex::Literal("edm::Wrapper<reco::DiscretizedEnergyFlow>::wrapped_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("Wrapper"), constructor_28735, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_2872), Reflex::Literal("Wrapper"), constructor_28736, 0, "ptr", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~Wrapper"), destructor_28737, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_48212), Reflex::Literal("Wrapper"), constructor_28742, 0, "ptr", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_5451, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__Wrapper_reco__DiscretizedEnergyFlow__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__Wrapper_reco__DiscretizedEnergyFlow__funcmem_bld);
}

//------Delayed data member builder for class Wrapper<reco::DiscretizedEnergyFlow> -------------------
void __edm__Wrapper_reco__DiscretizedEnergyFlow__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_1593, Reflex::Literal("present"), OffsetOf(__shadow__::__edm__Wrapper_reco__DiscretizedEnergyFlow_, present), ::Reflex::PRIVATE)
  .AddDataMember(type_8920, Reflex::Literal("obj"), OffsetOf(__shadow__::__edm__Wrapper_reco__DiscretizedEnergyFlow_, obj), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class Wrapper<reco::DiscretizedEnergyFlow> -------------------
void __edm__Wrapper_reco__DiscretizedEnergyFlow__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_48211), Reflex::Literal("product"), method_28738, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_48211), Reflex::Literal("operator->"), operator_28739, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_25675), Reflex::Literal("productTypeInfo"), method_28740, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_25675), Reflex::Literal("typeInfo"), method_28741, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_48213), Reflex::Literal("getInterface"), method_28743, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_25503, type_25627, type_47348), Reflex::Literal("fillView"), method_28744, 0, "id;pointers;helpers", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_25675, type_53, type_13292), Reflex::Literal("setPtr"), method_28745, 0, "iToType;iIndex;oPtr", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_25675, type_32194, type_25627), Reflex::Literal("fillPtrVector"), method_28746, 0, "iToType;iIndices;oPtr", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_25675), Reflex::Literal("dynamicTypeInfo"), method_28747, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("isPresent"), method_28748, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_25675), Reflex::Literal("dynamicTypeInfo_"), method_28749, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST);
}
//------Stub functions for class KeyVal<edm::Ref<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet, edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate, std::allocator<reco::PFCandidate> >, reco::PFCandidate, edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate, std::allocator<reco::PFCandidate> >, reco::PFCandidate> > > -------------------------------
static void destructor_44488(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > >*)o)->::edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > >::~KeyVal)();
}
static  void operator_44489( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > >*)o)->operator=)(*(const ::edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > >*)arg[0]);
  else   (((::edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > >*)o)->operator=)(*(const ::edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > >*)arg[0]);
}

static void constructor_44490( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > >(*(const ::edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > >*)arg[0]);
  else ::new(mem) ::edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > >(*(const ::edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > >*)arg[0]);
}

static void constructor_44491( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > >();
  else ::new(mem) ::edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > >();
}

static void constructor_44492( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > >(*(const ::edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)arg[0],
      *(const ::edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> >*)arg[1]);
  else ::new(mem) ::edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > >(*(const ::edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)arg[0],
      *(const ::edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> >*)arg[1]);
}

static void method_newdel_21942( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class KeyVal<edm::Ref<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet, edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate, std::allocator<reco::PFCandidate> >, reco::PFCandidate, edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate, std::allocator<reco::PFCandidate> >, reco::PFCandidate> > > -------------------------------
void __edm__helpers__KeyVal_edm__Ref_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s__edm__RefVector_std__vector_reco__PFCandidate__reco__PFCandidate_edm__refhelper__FindUsingAdvance_std__vector_reco__PFCandidate__reco__PFCandidate_s_s__db_datamem(Reflex::Class*);
void __edm__helpers__KeyVal_edm__Ref_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s__edm__RefVector_std__vector_reco__PFCandidate__reco__PFCandidate_edm__refhelper__FindUsingAdvance_std__vector_reco__PFCandidate__reco__PFCandidate_s_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__helpers__KeyVal_edm__Ref_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s__edm__RefVector_std__vector_reco__PFCandidate__reco__PFCandidate_edm__refhelper__FindUsingAdvance_std__vector_reco__PFCandidate__reco__PFCandidate_s_s__datamem_bld(&__edm__helpers__KeyVal_edm__Ref_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s__edm__RefVector_std__vector_reco__PFCandidate__reco__PFCandidate_edm__refhelper__FindUsingAdvance_std__vector_reco__PFCandidate__reco__PFCandidate_s_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__helpers__KeyVal_edm__Ref_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s__edm__RefVector_std__vector_reco__PFCandidate__reco__PFCandidate_edm__refhelper__FindUsingAdvance_std__vector_reco__PFCandidate__reco__PFCandidate_s_s__funcmem_bld(&__edm__helpers__KeyVal_edm__Ref_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s__edm__RefVector_std__vector_reco__PFCandidate__reco__PFCandidate_edm__refhelper__FindUsingAdvance_std__vector_reco__PFCandidate__reco__PFCandidate_s_s__db_funcmem);
void __edm__helpers__KeyVal_edm__Ref_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s__edm__RefVector_std__vector_reco__PFCandidate__reco__PFCandidate_edm__refhelper__FindUsingAdvance_std__vector_reco__PFCandidate__reco__PFCandidate_s_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > >"), typeid(::edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > >), sizeof(::edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::STRUCT)
  .AddTypedef(type_5809, Reflex::Literal("edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > >::key_type"))
  .AddTypedef(type_5322, Reflex::Literal("edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > >::value_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~KeyVal"), destructor_44488, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::DESTRUCTOR )
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_44495, type_44496), Reflex::Literal("operator="), operator_44489, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_44496), Reflex::Literal("KeyVal"), constructor_44490, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("KeyVal"), constructor_44491, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_47461, type_47463), Reflex::Literal("KeyVal"), constructor_44492, 0, "k;v", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_21942, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__helpers__KeyVal_edm__Ref_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s__edm__RefVector_std__vector_reco__PFCandidate__reco__PFCandidate_edm__refhelper__FindUsingAdvance_std__vector_reco__PFCandidate__reco__PFCandidate_s_s__datamem_bld);
}

//------Delayed data member builder for class KeyVal<edm::Ref<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet, edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate, std::allocator<reco::PFCandidate> >, reco::PFCandidate, edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate, std::allocator<reco::PFCandidate> >, reco::PFCandidate> > > -------------------
void __edm__helpers__KeyVal_edm__Ref_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s__edm__RefVector_std__vector_reco__PFCandidate__reco__PFCandidate_edm__refhelper__FindUsingAdvance_std__vector_reco__PFCandidate__reco__PFCandidate_s_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_5809, Reflex::Literal("key"), OffsetOf(__shadow__::__edm__helpers__KeyVal_edm__Ref_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s__edm__RefVector_std__vector_reco__PFCandidate__reco__PFCandidate_edm__refhelper__FindUsingAdvance_std__vector_reco__PFCandidate__reco__PFCandidate_s_s_, key), ::Reflex::PUBLIC)
  .AddDataMember(type_5322, Reflex::Literal("val"), OffsetOf(__shadow__::__edm__helpers__KeyVal_edm__Ref_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s__edm__RefVector_std__vector_reco__PFCandidate__reco__PFCandidate_edm__refhelper__FindUsingAdvance_std__vector_reco__PFCandidate__reco__PFCandidate_s_s_, val), ::Reflex::PUBLIC);
}
//------Delayed function member builder for class KeyVal<edm::Ref<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet, edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate, std::allocator<reco::PFCandidate> >, reco::PFCandidate, edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate, std::allocator<reco::PFCandidate> >, reco::PFCandidate> > > -------------------
void __edm__helpers__KeyVal_edm__Ref_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s__edm__RefVector_std__vector_reco__PFCandidate__reco__PFCandidate_edm__refhelper__FindUsingAdvance_std__vector_reco__PFCandidate__reco__PFCandidate_s_s__db_funcmem(Reflex::Class*) {

}
//------Stub functions for class KeyVal<edm::RefProd<std::vector<reco::PFJet, std::allocator<reco::PFJet> > >,edm::RefProd<std::vector<reco::PFCandidate, std::allocator<reco::PFCandidate> > > > -------------------------------
static void destructor_47453(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::helpers::KeyVal<edm::RefProd<std::vector<reco::PFJet> >,edm::RefProd<std::vector<reco::PFCandidate> > >*)o)->::edm::helpers::KeyVal<edm::RefProd<std::vector<reco::PFJet> >,edm::RefProd<std::vector<reco::PFCandidate> > >::~KeyVal)();
}
static  void operator_47454( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::helpers::KeyVal<edm::RefProd<std::vector<reco::PFJet> >,edm::RefProd<std::vector<reco::PFCandidate> > >*)o)->operator=)(*(const ::edm::helpers::KeyVal<edm::RefProd<std::vector<reco::PFJet> >,edm::RefProd<std::vector<reco::PFCandidate> > >*)arg[0]);
  else   (((::edm::helpers::KeyVal<edm::RefProd<std::vector<reco::PFJet> >,edm::RefProd<std::vector<reco::PFCandidate> > >*)o)->operator=)(*(const ::edm::helpers::KeyVal<edm::RefProd<std::vector<reco::PFJet> >,edm::RefProd<std::vector<reco::PFCandidate> > >*)arg[0]);
}

static void constructor_47455( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::helpers::KeyVal<edm::RefProd<std::vector<reco::PFJet> >,edm::RefProd<std::vector<reco::PFCandidate> > >(*(const ::edm::helpers::KeyVal<edm::RefProd<std::vector<reco::PFJet> >,edm::RefProd<std::vector<reco::PFCandidate> > >*)arg[0]);
  else ::new(mem) ::edm::helpers::KeyVal<edm::RefProd<std::vector<reco::PFJet> >,edm::RefProd<std::vector<reco::PFCandidate> > >(*(const ::edm::helpers::KeyVal<edm::RefProd<std::vector<reco::PFJet> >,edm::RefProd<std::vector<reco::PFCandidate> > >*)arg[0]);
}

static void constructor_47456( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::helpers::KeyVal<edm::RefProd<std::vector<reco::PFJet> >,edm::RefProd<std::vector<reco::PFCandidate> > >();
  else ::new(mem) ::edm::helpers::KeyVal<edm::RefProd<std::vector<reco::PFJet> >,edm::RefProd<std::vector<reco::PFCandidate> > >();
}

static void constructor_47457( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::helpers::KeyVal<edm::RefProd<std::vector<reco::PFJet> >,edm::RefProd<std::vector<reco::PFCandidate> > >(*(const ::edm::RefProd<std::vector<reco::PFJet> >*)arg[0],
      *(const ::edm::RefProd<std::vector<reco::PFCandidate> >*)arg[1]);
  else ::new(mem) ::edm::helpers::KeyVal<edm::RefProd<std::vector<reco::PFJet> >,edm::RefProd<std::vector<reco::PFCandidate> > >(*(const ::edm::RefProd<std::vector<reco::PFJet> >*)arg[0],
      *(const ::edm::RefProd<std::vector<reco::PFCandidate> >*)arg[1]);
}

static void method_newdel_27350( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::helpers::KeyVal<edm::RefProd<std::vector<reco::PFJet> >,edm::RefProd<std::vector<reco::PFCandidate> > > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::helpers::KeyVal<edm::RefProd<std::vector<reco::PFJet> >,edm::RefProd<std::vector<reco::PFCandidate> > > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::helpers::KeyVal<edm::RefProd<std::vector<reco::PFJet> >,edm::RefProd<std::vector<reco::PFCandidate> > > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::helpers::KeyVal<edm::RefProd<std::vector<reco::PFJet> >,edm::RefProd<std::vector<reco::PFCandidate> > > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::helpers::KeyVal<edm::RefProd<std::vector<reco::PFJet> >,edm::RefProd<std::vector<reco::PFCandidate> > > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class KeyVal<edm::RefProd<std::vector<reco::PFJet, std::allocator<reco::PFJet> > >,edm::RefProd<std::vector<reco::PFCandidate, std::allocator<reco::PFCandidate> > > > -------------------------------
void __edm__helpers__KeyVal_edm__RefProd_std__vector_reco__PFJet_s__edm__RefProd_std__vector_reco__PFCandidate_s_s__db_datamem(Reflex::Class*);
void __edm__helpers__KeyVal_edm__RefProd_std__vector_reco__PFJet_s__edm__RefProd_std__vector_reco__PFCandidate_s_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__helpers__KeyVal_edm__RefProd_std__vector_reco__PFJet_s__edm__RefProd_std__vector_reco__PFCandidate_s_s__datamem_bld(&__edm__helpers__KeyVal_edm__RefProd_std__vector_reco__PFJet_s__edm__RefProd_std__vector_reco__PFCandidate_s_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__helpers__KeyVal_edm__RefProd_std__vector_reco__PFJet_s__edm__RefProd_std__vector_reco__PFCandidate_s_s__funcmem_bld(&__edm__helpers__KeyVal_edm__RefProd_std__vector_reco__PFJet_s__edm__RefProd_std__vector_reco__PFCandidate_s_s__db_funcmem);
void __edm__helpers__KeyVal_edm__RefProd_std__vector_reco__PFJet_s__edm__RefProd_std__vector_reco__PFCandidate_s_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::helpers::KeyVal<edm::RefProd<std::vector<reco::PFJet> >,edm::RefProd<std::vector<reco::PFCandidate> > >"), typeid(::edm::helpers::KeyVal<edm::RefProd<std::vector<reco::PFJet> >,edm::RefProd<std::vector<reco::PFCandidate> > >), sizeof(::edm::helpers::KeyVal<edm::RefProd<std::vector<reco::PFJet> >,edm::RefProd<std::vector<reco::PFCandidate> > >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::STRUCT)
  .AddTypedef(type_5728, Reflex::Literal("edm::helpers::KeyVal<edm::RefProd<std::vector<reco::PFJet> >,edm::RefProd<std::vector<reco::PFCandidate> > >::key_type"))
  .AddTypedef(type_5727, Reflex::Literal("edm::helpers::KeyVal<edm::RefProd<std::vector<reco::PFJet> >,edm::RefProd<std::vector<reco::PFCandidate> > >::value_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~KeyVal"), destructor_47453, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::DESTRUCTOR )
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_47460, type_47464), Reflex::Literal("operator="), operator_47454, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_47464), Reflex::Literal("KeyVal"), constructor_47455, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("KeyVal"), constructor_47456, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_48812, type_48807), Reflex::Literal("KeyVal"), constructor_47457, 0, "k;v", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_27350, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__helpers__KeyVal_edm__RefProd_std__vector_reco__PFJet_s__edm__RefProd_std__vector_reco__PFCandidate_s_s__datamem_bld);
}

//------Delayed data member builder for class KeyVal<edm::RefProd<std::vector<reco::PFJet, std::allocator<reco::PFJet> > >,edm::RefProd<std::vector<reco::PFCandidate, std::allocator<reco::PFCandidate> > > > -------------------
void __edm__helpers__KeyVal_edm__RefProd_std__vector_reco__PFJet_s__edm__RefProd_std__vector_reco__PFCandidate_s_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_5728, Reflex::Literal("key"), OffsetOf(__shadow__::__edm__helpers__KeyVal_edm__RefProd_std__vector_reco__PFJet_s__edm__RefProd_std__vector_reco__PFCandidate_s_s_, key), ::Reflex::PUBLIC)
  .AddDataMember(type_5727, Reflex::Literal("val"), OffsetOf(__shadow__::__edm__helpers__KeyVal_edm__RefProd_std__vector_reco__PFJet_s__edm__RefProd_std__vector_reco__PFCandidate_s_s_, val), ::Reflex::PUBLIC);
}
//------Delayed function member builder for class KeyVal<edm::RefProd<std::vector<reco::PFJet, std::allocator<reco::PFJet> > >,edm::RefProd<std::vector<reco::PFCandidate, std::allocator<reco::PFCandidate> > > > -------------------
void __edm__helpers__KeyVal_edm__RefProd_std__vector_reco__PFJet_s__edm__RefProd_std__vector_reco__PFCandidate_s_s__db_funcmem(Reflex::Class*) {

}
//------Stub functions for class FFTAnyJet<reco::TrackJet> -------------------------------
static  void operator_34117( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::reco::FFTAnyJet<reco::TrackJet>*)o)->operator=)(*(const ::reco::FFTAnyJet<reco::TrackJet>*)arg[0]);
  else   (((::reco::FFTAnyJet<reco::TrackJet>*)o)->operator=)(*(const ::reco::FFTAnyJet<reco::TrackJet>*)arg[0]);
}

static void constructor_34118( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::reco::FFTAnyJet<reco::TrackJet>(*(const ::reco::FFTAnyJet<reco::TrackJet>*)arg[0]);
  else ::new(mem) ::reco::FFTAnyJet<reco::TrackJet>(*(const ::reco::FFTAnyJet<reco::TrackJet>*)arg[0]);
}

static void constructor_34119( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::reco::FFTAnyJet<reco::TrackJet>();
  else ::new(mem) ::reco::FFTAnyJet<reco::TrackJet>();
}

static void destructor_34120(void*, void * o, const std::vector<void*>&, void *) {
(((::reco::FFTAnyJet<reco::TrackJet>*)o)->::reco::FFTAnyJet<reco::TrackJet>::~FFTAnyJet)();
}
static void constructor_34121( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::reco::FFTAnyJet<reco::TrackJet>(*(const ::reco::TrackJet*)arg[0],
      *(const ::reco::FFTJet<float>*)arg[1]);
  else ::new(mem) ::reco::FFTAnyJet<reco::TrackJet>(*(const ::reco::TrackJet*)arg[0],
      *(const ::reco::FFTJet<float>*)arg[1]);
}

static  void method_34122( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::reco::FFTAnyJet<reco::TrackJet>*)o)->clone)());
  else   (((const ::reco::FFTAnyJet<reco::TrackJet>*)o)->clone)();
}

static  void method_34123( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::reco::FFTAnyJet<reco::TrackJet>*)o)->getFFTSpecific)();
  else   (((const ::reco::FFTAnyJet<reco::TrackJet>*)o)->getFFTSpecific)();
}

static void method_newdel_8932( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::reco::FFTAnyJet<reco::TrackJet> >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::reco::FFTAnyJet<reco::TrackJet> >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::reco::FFTAnyJet<reco::TrackJet> >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::reco::FFTAnyJet<reco::TrackJet> >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::reco::FFTAnyJet<reco::TrackJet> >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

static void method_x11( void* retaddr, void*, const std::vector<void*>&, void*)
{
  typedef std::vector<std::pair< ::Reflex::Base, int> > Bases_t;
  static Bases_t s_bases;
  if ( !s_bases.size() ) {
    s_bases.push_back(std::make_pair(::Reflex::Base( ::Reflex::TypeBuilder(Reflex::Literal("reco::TrackJet")), ::Reflex::BaseOffset< ::reco::FFTAnyJet<reco::TrackJet>,::reco::TrackJet >::Get(),::Reflex::PUBLIC), 0));
    s_bases.push_back(std::make_pair(::Reflex::Base( ::Reflex::TypeBuilder(Reflex::Literal("reco::Jet")), ::Reflex::BaseOffset< ::reco::FFTAnyJet<reco::TrackJet>,::reco::Jet >::Get(),::Reflex::PUBLIC), 1));
    s_bases.push_back(std::make_pair(::Reflex::Base( ::Reflex::TypeBuilder(Reflex::Literal("reco::CompositePtrCandidate")), ::Reflex::BaseOffset< ::reco::FFTAnyJet<reco::TrackJet>,::reco::CompositePtrCandidate >::Get(),::Reflex::PUBLIC), 2));
    s_bases.push_back(std::make_pair(::Reflex::Base( ::Reflex::TypeBuilder(Reflex::Literal("reco::LeafCandidate")), ::Reflex::BaseOffset< ::reco::FFTAnyJet<reco::TrackJet>,::reco::LeafCandidate >::Get(),::Reflex::PUBLIC), 3));
    s_bases.push_back(std::make_pair(::Reflex::Base( ::Reflex::TypeBuilder(Reflex::Literal("reco::Candidate")), ::Reflex::BaseOffset< ::reco::FFTAnyJet<reco::TrackJet>,::reco::Candidate >::Get(),::Reflex::PUBLIC), 4));
  }
  if (retaddr) *(Bases_t**)retaddr = &s_bases;
}

//------Dictionary for class FFTAnyJet<reco::TrackJet> -------------------------------
void __reco__FFTAnyJet_reco__TrackJet__db_datamem(Reflex::Class*);
void __reco__FFTAnyJet_reco__TrackJet__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __reco__FFTAnyJet_reco__TrackJet__datamem_bld(&__reco__FFTAnyJet_reco__TrackJet__db_datamem);
Reflex::GenreflexMemberBuilder __reco__FFTAnyJet_reco__TrackJet__funcmem_bld(&__reco__FFTAnyJet_reco__TrackJet__db_funcmem);
void __reco__FFTAnyJet_reco__TrackJet__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("reco::FFTAnyJet<reco::TrackJet>"), typeid(::reco::FFTAnyJet<reco::TrackJet>), sizeof(::reco::FFTAnyJet<reco::TrackJet>), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::VIRTUAL, ::Reflex::CLASS)
  .AddBase(type_8938, ::Reflex::BaseOffset< ::reco::FFTAnyJet<reco::TrackJet>, ::reco::TrackJet >::Get(), ::Reflex::PUBLIC)
  .AddTypedef(type_8938, Reflex::Literal("reco::FFTAnyJet<reco::TrackJet>::Base"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_16617, type_16619), Reflex::Literal("operator="), operator_34117, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_16619), Reflex::Literal("FFTAnyJet"), constructor_34118, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("FFTAnyJet"), constructor_34119, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~FFTAnyJet"), destructor_34120, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::DESTRUCTOR )
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_20234, type_49965), Reflex::Literal("FFTAnyJet"), constructor_34121, 0, "jet;fftjet", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_8932, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getBasesTable"), method_x11, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__reco__FFTAnyJet_reco__TrackJet__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__reco__FFTAnyJet_reco__TrackJet__funcmem_bld);
}

//------Delayed data member builder for class FFTAnyJet<reco::TrackJet> -------------------
void __reco__FFTAnyJet_reco__TrackJet__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_9026, Reflex::Literal("fftJetSpecific_"), OffsetOf(__shadow__::__reco__FFTAnyJet_reco__TrackJet_, fftJetSpecific_), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class FFTAnyJet<reco::TrackJet> -------------------
void __reco__FFTAnyJet_reco__TrackJet__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_11659), Reflex::Literal("clone"), method_34122, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_49965), Reflex::Literal("getFFTSpecific"), method_34123, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST);
}
//------Stub functions for class FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet>, std::allocator<reco::FFTAnyJet<reco::TrackJet> > >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet>, std::allocator<reco::FFTAnyJet<reco::TrackJet> > >, reco::FFTAnyJet<reco::TrackJet> > > -------------------------------
static  void operator_29464( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)o)->operator=)(*(const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)arg[0]);
  else   (((::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)o)->operator=)(*(const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)arg[0]);
}

static void constructor_29465( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >(*(const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)arg[0]);
  else ::new(mem) ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >(*(const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)arg[0]);
}

static void constructor_29466( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >();
  else ::new(mem) ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >();
}

static void constructor_29467( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >(*(const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)arg[0],
      *(const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)arg[1]);
  else ::new(mem) ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >(*(const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)arg[0],
      *(const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)arg[1]);
}

static void destructor_29468(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)o)->::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >::~FwdRef)();
}
static  void operator_29469( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)o)->operator*)();
  else   (((const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)o)->operator*)();
}

static  void operator_29470( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)o)->operator->)());
  else   (((const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)o)->operator->)();
}

static  void method_29471( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)o)->get)());
  else   (((const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)o)->get)();
}

static  void method_29472( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)o)->isNull)());
  else   (((const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)o)->isNull)();
}

static  void method_29473( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)o)->isNonnull)());
  else   (((const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)o)->isNonnull)();
}

static  void operator_29474( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)o)->operator!)());
  else   (((const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)o)->operator!)();
}

static  void method_29475( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)o)->ref)();
  else   (((const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)o)->ref)();
}

static  void method_29476( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)o)->backRef)();
  else   (((const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)o)->backRef)();
}

static  void method_29477( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)o)->productGetter)());
  else   (((const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)o)->productGetter)();
}

static  void method_29478( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)o)->product)());
  else   (((const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)o)->product)();
}

static  void method_29479( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::ProductID)((((const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)o)->id)());
  else   (((const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)o)->id)();
}

static  void method_29480( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (unsigned int)((((const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)o)->key)());
  else   (((const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)o)->key)();
}

static  void method_29481( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)o)->hasProductCache)());
  else   (((const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)o)->hasProductCache)();
}

static  void method_29482( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)o)->isAvailable)());
  else   (((const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)o)->isAvailable)();
}

static  void method_29483( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)o)->isTransient)());
  else   (((const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)o)->isTransient)();
}

static  void method_29484( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (short)((((::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)o)->Class_Version)());
  else   (((::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)o)->Class_Version)();
}

static void method_newdel_5495( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet>, std::allocator<reco::FFTAnyJet<reco::TrackJet> > >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet>, std::allocator<reco::FFTAnyJet<reco::TrackJet> > >, reco::FFTAnyJet<reco::TrackJet> > > -------------------------------
void __edm__FwdRef_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s__db_datamem(Reflex::Class*);
void __edm__FwdRef_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__FwdRef_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s__datamem_bld(&__edm__FwdRef_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__FwdRef_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s__funcmem_bld(&__edm__FwdRef_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s__db_funcmem);
void __edm__FwdRef_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >"), typeid(::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >), sizeof(::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("ClassVersion"), ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >::Class_Version())
  .AddTypedef(type_3124, Reflex::Literal("edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >::product_type"))
  .AddTypedef(type_8932, Reflex::Literal("edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >::value_type"))
  .AddTypedef(type_8932c, Reflex::Literal("edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >::element_type"))
  .AddTypedef(type_25836, Reflex::Literal("edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >::finder_type"))
  .AddTypedef(type_211, Reflex::Literal("edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >::argument_type"))
  .AddTypedef(type_211, Reflex::Literal("edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >::key_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_16552, type_16554), Reflex::Literal("operator="), operator_29464, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_16554), Reflex::Literal("FwdRef"), constructor_29465, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("FwdRef"), constructor_29466, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_47491, type_47491), Reflex::Literal("FwdRef"), constructor_29467, 0, "ref;backRef", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~FwdRef"), destructor_29468, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_5495, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__FwdRef_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__FwdRef_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s__funcmem_bld);
}

//------Delayed data member builder for class FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet>, std::allocator<reco::FFTAnyJet<reco::TrackJet> > >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet>, std::allocator<reco::FFTAnyJet<reco::TrackJet> > >, reco::FFTAnyJet<reco::TrackJet> > > -------------------
void __edm__FwdRef_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_5813, Reflex::Literal("ref_"), OffsetOf(__shadow__::__edm__FwdRef_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s_, ref_), ::Reflex::PRIVATE)
  .AddDataMember(type_5813, Reflex::Literal("backRef_"), OffsetOf(__shadow__::__edm__FwdRef_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s_, backRef_), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet>, std::allocator<reco::FFTAnyJet<reco::TrackJet> > >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet>, std::allocator<reco::FFTAnyJet<reco::TrackJet> > >, reco::FFTAnyJet<reco::TrackJet> > > -------------------
void __edm__FwdRef_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_16619), Reflex::Literal("operator*"), operator_29469, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_16615), Reflex::Literal("operator->"), operator_29470, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_16615), Reflex::Literal("get"), method_29471, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("isNull"), method_29472, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("isNonnull"), method_29473, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("operator!"), operator_29474, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_47491), Reflex::Literal("ref"), method_29475, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_47491), Reflex::Literal("backRef"), method_29476, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_25623), Reflex::Literal("productGetter"), method_29477, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_48116), Reflex::Literal("product"), method_29478, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_5905), Reflex::Literal("id"), method_29479, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_211), Reflex::Literal("key"), method_29480, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("hasProductCache"), method_29481, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("isAvailable"), method_29482, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("isTransient"), method_29483, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_484), Reflex::Literal("Class_Version"), method_29484, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC);
}
//------Stub functions for class vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet>, std::allocator<reco::FFTAnyJet<reco::TrackJet> > >, reco::FFTAnyJet<reco::TrackJet>, edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet>, std::allocator<reco::FFTAnyJet<reco::TrackJet> > >, reco::FFTAnyJet<reco::TrackJet> > >,std::allocator<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet>, std::allocator<reco::FFTAnyJet<reco::TrackJet> > >, reco::FFTAnyJet<reco::TrackJet>, edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet>, std::allocator<reco::FFTAnyJet<reco::TrackJet> > >, reco::FFTAnyJet<reco::TrackJet> > > > > -------------------------------
static void constructor_16563( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >();
  else ::new(mem) ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >();
}

static void constructor_16564( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >(*(const ::std::allocator<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)arg[0]);
  else ::new(mem) ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >(*(const ::std::allocator<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)arg[0]);
}

static void constructor_16565( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if ( arg.size() == 1 ) {
    if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >(*(::std::size_t*)arg[0]);
  else ::new(mem) ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >(*(::std::size_t*)arg[0]);
  }
  else if ( arg.size() == 2 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >(*(::std::size_t*)arg[0],
      *(const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)arg[1]);
  else ::new(mem) ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >(*(::std::size_t*)arg[0],
      *(const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)arg[1]);
  }
  else if ( arg.size() == 3 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >(*(::std::size_t*)arg[0],
      *(const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)arg[1],
      *(const ::std::allocator<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)arg[2]);
  else ::new(mem) ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >(*(::std::size_t*)arg[0],
      *(const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)arg[1],
      *(const ::std::allocator<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)arg[2]);
  }
}

static void constructor_16566( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >(*(const ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)arg[0]);
  else ::new(mem) ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >(*(const ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)arg[0]);
}

static void destructor_16567(void*, void * o, const std::vector<void*>&, void *) {
(((::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >::~vector)();
}
static  void operator_16568( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->operator=)(*(const ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)arg[0]);
  else   (((::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->operator=)(*(const ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)arg[0]);
}

static  void method_16569( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->assign)(*(::std::size_t*)arg[0],
    *(const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)arg[1]);
}

static  void method_16570( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*,std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > > >)((((::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->begin)());
  else   (((::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->begin)();
}

static  void method_16571( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<const edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*,std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > > >)((((const ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->begin)());
  else   (((const ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->begin)();
}

static  void method_16572( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*,std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > > >)((((::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->end)());
  else   (((::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->end)();
}

static  void method_16573( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<const edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*,std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > > >)((((const ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->end)());
  else   (((const ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->end)();
}

static  void method_16578( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->size)());
  else   (((const ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->size)();
}

static  void method_16579( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->max_size)());
  else   (((const ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->max_size)();
}

static  void method_16580( void*, void* o, const std::vector<void*>& arg, void*)
{
  if ( arg.size() == 1 ) {
    (((::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->resize)(*(::std::size_t*)arg[0]);
  }
  else if ( arg.size() == 2 ) { 
    (((::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->resize)(*(::std::size_t*)arg[0],
      *(::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)arg[1]);
  }
}

static  void method_16581( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->capacity)());
  else   (((const ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->capacity)();
}

static  void method_16582( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->empty)());
  else   (((const ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->empty)();
}

static  void method_16583( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->reserve)(*(::std::size_t*)arg[0]);
}

static  void operator_16584( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->operator[])(*(::std::size_t*)arg[0]);
  else   (((::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->operator[])(*(::std::size_t*)arg[0]);
}

static  void operator_16585( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->operator[])(*(::std::size_t*)arg[0]);
  else   (((const ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->operator[])(*(::std::size_t*)arg[0]);
}

static  void method_16587( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->at)(*(::std::size_t*)arg[0]);
  else   (((::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->at)(*(::std::size_t*)arg[0]);
}

static  void method_16588( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->at)(*(::std::size_t*)arg[0]);
  else   (((const ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->at)(*(::std::size_t*)arg[0]);
}

static  void method_16589( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->front)();
  else   (((::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->front)();
}

static  void method_16590( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->front)();
  else   (((const ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->front)();
}

static  void method_16591( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->back)();
  else   (((::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->back)();
}

static  void method_16592( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->back)();
  else   (((const ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->back)();
}

static  void method_16593( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->data)());
  else   (((::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->data)();
}

static  void method_16594( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->data)());
  else   (((const ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->data)();
}

static  void method_16595( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->push_back)(*(const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)arg[0]);
}

static  void method_16596( void*, void* o, const std::vector<void*>&, void*)
{
  (((::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->pop_back)();
}

static  void method_16597( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*,std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > > >)((((::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->insert)(*(::__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*,std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > > >*)arg[0],
    *(const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)arg[1]));
  else   (((::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->insert)(*(::__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*,std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > > >*)arg[0],
    *(const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)arg[1]);
}

static  void method_16598( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->insert)(*(::__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*,std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > > >*)arg[0],
    *(::std::size_t*)arg[1],
    *(const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)arg[2]);
}

static  void method_16599( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*,std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > > >)((((::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->erase)(*(::__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*,std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > > >*)arg[0]));
  else   (((::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->erase)(*(::__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*,std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > > >*)arg[0]);
}

static  void method_16600( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*,std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > > >)((((::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->erase)(*(::__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*,std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > > >*)arg[0],
    *(::__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*,std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > > >*)arg[1]));
  else   (((::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->erase)(*(::__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*,std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > > >*)arg[0],
    *(::__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*,std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > > >*)arg[1]);
}

static  void method_16601( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->swap)(*(::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)arg[0]);
}

static  void method_16602( void*, void* o, const std::vector<void*>&, void*)
{
  (((::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->clear)();
}

static void method_newdel_3123( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

static void method_x14( void* retaddr, void*, const std::vector<void*>&, void*)
{
  typedef std::vector<std::pair< ::Reflex::Base, int> > Bases_t;
  static Bases_t s_bases;
  if ( !s_bases.size() ) {
    s_bases.push_back(std::make_pair(::Reflex::Base( ::Reflex::TypeBuilder(Reflex::Literal("std::_Vector_base<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >,std::allocator<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > > >")), ::Reflex::BaseOffset< ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >,::std::_Vector_base<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >,std::allocator<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > > > >::Get(),::Reflex::PROTECTED), 0));
  }
  if (retaddr) *(Bases_t**)retaddr = &s_bases;
}

static void method_x15( void* retaddr, void*, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**) retaddr = ::Reflex::Proxy< ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > > >::Generate();
  else ::Reflex::Proxy< ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > > >::Generate();
}

//------Dictionary for class vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet>, std::allocator<reco::FFTAnyJet<reco::TrackJet> > >, reco::FFTAnyJet<reco::TrackJet>, edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet>, std::allocator<reco::FFTAnyJet<reco::TrackJet> > >, reco::FFTAnyJet<reco::TrackJet> > >,std::allocator<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet>, std::allocator<reco::FFTAnyJet<reco::TrackJet> > >, reco::FFTAnyJet<reco::TrackJet>, edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet>, std::allocator<reco::FFTAnyJet<reco::TrackJet> > >, reco::FFTAnyJet<reco::TrackJet> > > > > -------------------------------
void __std__vector_edm__FwdRef_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s_s__db_datamem(Reflex::Class*);
void __std__vector_edm__FwdRef_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __std__vector_edm__FwdRef_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s_s__datamem_bld(&__std__vector_edm__FwdRef_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s_s__db_datamem);
Reflex::GenreflexMemberBuilder __std__vector_edm__FwdRef_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s_s__funcmem_bld(&__std__vector_edm__FwdRef_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s_s__db_funcmem);
void __std__vector_edm__FwdRef_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >"), typeid(::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >), sizeof(::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddBase(type_2544, ::Reflex::BaseOffset< ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >, ::std::_Vector_base<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >,std::allocator<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > > > >::Get(), ::Reflex::PROTECTED)
  .AddTypedef(type_5495, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >::_Alloc_value_type"))
  .AddTypedef(type_2544, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >::_Base"))
  .AddTypedef(type_3498, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >::_Tp_alloc_type"))
  .AddTypedef(type_9699, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >::_Alloc_traits"))
  .AddTypedef(type_5495, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >::value_type"))
  .AddTypedef(type_11090, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >::pointer"))
  .AddTypedef(type_16550, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >::const_pointer"))
  .AddTypedef(type_16552, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >::reference"))
  .AddTypedef(type_16554, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >::const_reference"))
  .AddTypedef(type_9498, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >::iterator"))
  .AddTypedef(type_9499, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >::const_iterator"))
  .AddTypedef(type_3800, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >::const_reverse_iterator"))
  .AddTypedef(type_3801, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >::reverse_iterator"))
  .AddTypedef(type_3455, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >::size_type"))
  .AddTypedef(type_3318, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >::difference_type"))
  .AddTypedef(type_3498, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >::allocator_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("vector"), constructor_16563, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_42451), Reflex::Literal("vector"), constructor_16564, 0, "__a", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_3455, type_16554, type_42451), Reflex::Literal("vector"), constructor_16565, 0, "__n;__value=_Tp();__a=_Alloc()", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_44160), Reflex::Literal("vector"), constructor_16566, 0, "__x", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~vector"), destructor_16567, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_3123, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getBasesTable"), method_x14, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddFunctionMember<void*(void)>(Reflex::Literal("createCollFuncTable"), method_x15, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandFunctionMemberBuilder(&__std__vector_edm__FwdRef_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s_s__funcmem_bld);
}

//------Delayed data member builder for class vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet>, std::allocator<reco::FFTAnyJet<reco::TrackJet> > >, reco::FFTAnyJet<reco::TrackJet>, edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet>, std::allocator<reco::FFTAnyJet<reco::TrackJet> > >, reco::FFTAnyJet<reco::TrackJet> > >,std::allocator<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet>, std::allocator<reco::FFTAnyJet<reco::TrackJet> > >, reco::FFTAnyJet<reco::TrackJet>, edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet>, std::allocator<reco::FFTAnyJet<reco::TrackJet> > >, reco::FFTAnyJet<reco::TrackJet> > > > > -------------------
void __std__vector_edm__FwdRef_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s_s__db_datamem(Reflex::Class*) {

}
//------Delayed function member builder for class vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet>, std::allocator<reco::FFTAnyJet<reco::TrackJet> > >, reco::FFTAnyJet<reco::TrackJet>, edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet>, std::allocator<reco::FFTAnyJet<reco::TrackJet> > >, reco::FFTAnyJet<reco::TrackJet> > >,std::allocator<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet>, std::allocator<reco::FFTAnyJet<reco::TrackJet> > >, reco::FFTAnyJet<reco::TrackJet>, edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet>, std::allocator<reco::FFTAnyJet<reco::TrackJet> > >, reco::FFTAnyJet<reco::TrackJet> > > > > -------------------
void __std__vector_edm__FwdRef_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_44161, type_44160), Reflex::Literal("operator="), operator_16568, 0, "__x", ::Reflex::PUBLIC | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_3455, type_16554), Reflex::Literal("assign"), method_16569, 0, "__n;__val", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_9498), Reflex::Literal("begin"), method_16570, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_9499), Reflex::Literal("begin"), method_16571, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_9498), Reflex::Literal("end"), method_16572, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_9499), Reflex::Literal("end"), method_16573, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3455), Reflex::Literal("size"), method_16578, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3455), Reflex::Literal("max_size"), method_16579, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_3455, type_5495), Reflex::Literal("resize"), method_16580, 0, "__new_size;__x=_Tp()", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3455), Reflex::Literal("capacity"), method_16581, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("empty"), method_16582, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_3455), Reflex::Literal("reserve"), method_16583, 0, "__n", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_16552, type_3455), Reflex::Literal("operator[]"), operator_16584, 0, "__n", ::Reflex::PUBLIC | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_16554, type_3455), Reflex::Literal("operator[]"), operator_16585, 0, "__n", ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_16552, type_3455), Reflex::Literal("at"), method_16587, 0, "__n", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_16554, type_3455), Reflex::Literal("at"), method_16588, 0, "__n", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_16552), Reflex::Literal("front"), method_16589, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_16554), Reflex::Literal("front"), method_16590, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_16552), Reflex::Literal("back"), method_16591, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_16554), Reflex::Literal("back"), method_16592, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_11090), Reflex::Literal("data"), method_16593, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_16550), Reflex::Literal("data"), method_16594, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_16554), Reflex::Literal("push_back"), method_16595, 0, "__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708), Reflex::Literal("pop_back"), method_16596, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_9498, type_9498, type_16554), Reflex::Literal("insert"), method_16597, 0, "__position;__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_9498, type_3455, type_16554), Reflex::Literal("insert"), method_16598, 0, "__position;__n;__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_9498, type_9498), Reflex::Literal("erase"), method_16599, 0, "__position", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_9498, type_9498, type_9498), Reflex::Literal("erase"), method_16600, 0, "__first;__last", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_44161), Reflex::Literal("swap"), method_16601, 0, "__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708), Reflex::Literal("clear"), method_16602, 0, 0, ::Reflex::PUBLIC);
}
//------Stub functions for class FFTAnyJet<reco::PFJet> -------------------------------
static  void operator_34126( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::reco::FFTAnyJet<reco::PFJet>*)o)->operator=)(*(const ::reco::FFTAnyJet<reco::PFJet>*)arg[0]);
  else   (((::reco::FFTAnyJet<reco::PFJet>*)o)->operator=)(*(const ::reco::FFTAnyJet<reco::PFJet>*)arg[0]);
}

static void constructor_34127( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::reco::FFTAnyJet<reco::PFJet>(*(const ::reco::FFTAnyJet<reco::PFJet>*)arg[0]);
  else ::new(mem) ::reco::FFTAnyJet<reco::PFJet>(*(const ::reco::FFTAnyJet<reco::PFJet>*)arg[0]);
}

static void constructor_34128( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::reco::FFTAnyJet<reco::PFJet>();
  else ::new(mem) ::reco::FFTAnyJet<reco::PFJet>();
}

static void destructor_34129(void*, void * o, const std::vector<void*>&, void *) {
(((::reco::FFTAnyJet<reco::PFJet>*)o)->::reco::FFTAnyJet<reco::PFJet>::~FFTAnyJet)();
}
static void constructor_34130( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::reco::FFTAnyJet<reco::PFJet>(*(const ::reco::PFJet*)arg[0],
      *(const ::reco::FFTJet<float>*)arg[1]);
  else ::new(mem) ::reco::FFTAnyJet<reco::PFJet>(*(const ::reco::PFJet*)arg[0],
      *(const ::reco::FFTJet<float>*)arg[1]);
}

static  void method_34131( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::reco::FFTAnyJet<reco::PFJet>*)o)->clone)());
  else   (((const ::reco::FFTAnyJet<reco::PFJet>*)o)->clone)();
}

static  void method_34132( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::reco::FFTAnyJet<reco::PFJet>*)o)->getFFTSpecific)();
  else   (((const ::reco::FFTAnyJet<reco::PFJet>*)o)->getFFTSpecific)();
}

static void method_newdel_8933( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::reco::FFTAnyJet<reco::PFJet> >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::reco::FFTAnyJet<reco::PFJet> >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::reco::FFTAnyJet<reco::PFJet> >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::reco::FFTAnyJet<reco::PFJet> >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::reco::FFTAnyJet<reco::PFJet> >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

static void method_x17( void* retaddr, void*, const std::vector<void*>&, void*)
{
  typedef std::vector<std::pair< ::Reflex::Base, int> > Bases_t;
  static Bases_t s_bases;
  if ( !s_bases.size() ) {
    s_bases.push_back(std::make_pair(::Reflex::Base( ::Reflex::TypeBuilder(Reflex::Literal("reco::PFJet")), ::Reflex::BaseOffset< ::reco::FFTAnyJet<reco::PFJet>,::reco::PFJet >::Get(),::Reflex::PUBLIC), 0));
    s_bases.push_back(std::make_pair(::Reflex::Base( ::Reflex::TypeBuilder(Reflex::Literal("reco::Jet")), ::Reflex::BaseOffset< ::reco::FFTAnyJet<reco::PFJet>,::reco::Jet >::Get(),::Reflex::PUBLIC), 1));
    s_bases.push_back(std::make_pair(::Reflex::Base( ::Reflex::TypeBuilder(Reflex::Literal("reco::CompositePtrCandidate")), ::Reflex::BaseOffset< ::reco::FFTAnyJet<reco::PFJet>,::reco::CompositePtrCandidate >::Get(),::Reflex::PUBLIC), 2));
    s_bases.push_back(std::make_pair(::Reflex::Base( ::Reflex::TypeBuilder(Reflex::Literal("reco::LeafCandidate")), ::Reflex::BaseOffset< ::reco::FFTAnyJet<reco::PFJet>,::reco::LeafCandidate >::Get(),::Reflex::PUBLIC), 3));
    s_bases.push_back(std::make_pair(::Reflex::Base( ::Reflex::TypeBuilder(Reflex::Literal("reco::Candidate")), ::Reflex::BaseOffset< ::reco::FFTAnyJet<reco::PFJet>,::reco::Candidate >::Get(),::Reflex::PUBLIC), 4));
  }
  if (retaddr) *(Bases_t**)retaddr = &s_bases;
}

//------Dictionary for class FFTAnyJet<reco::PFJet> -------------------------------
void __reco__FFTAnyJet_reco__PFJet__db_datamem(Reflex::Class*);
void __reco__FFTAnyJet_reco__PFJet__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __reco__FFTAnyJet_reco__PFJet__datamem_bld(&__reco__FFTAnyJet_reco__PFJet__db_datamem);
Reflex::GenreflexMemberBuilder __reco__FFTAnyJet_reco__PFJet__funcmem_bld(&__reco__FFTAnyJet_reco__PFJet__db_funcmem);
void __reco__FFTAnyJet_reco__PFJet__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("reco::FFTAnyJet<reco::PFJet>"), typeid(::reco::FFTAnyJet<reco::PFJet>), sizeof(::reco::FFTAnyJet<reco::PFJet>), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::VIRTUAL, ::Reflex::CLASS)
  .AddBase(type_8849, ::Reflex::BaseOffset< ::reco::FFTAnyJet<reco::PFJet>, ::reco::PFJet >::Get(), ::Reflex::PUBLIC)
  .AddTypedef(type_8849, Reflex::Literal("reco::FFTAnyJet<reco::PFJet>::Base"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_16812, type_16814), Reflex::Literal("operator="), operator_34126, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_16814), Reflex::Literal("FFTAnyJet"), constructor_34127, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("FFTAnyJet"), constructor_34128, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~FFTAnyJet"), destructor_34129, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::DESTRUCTOR )
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_15848, type_49965), Reflex::Literal("FFTAnyJet"), constructor_34130, 0, "jet;fftjet", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_8933, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getBasesTable"), method_x17, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__reco__FFTAnyJet_reco__PFJet__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__reco__FFTAnyJet_reco__PFJet__funcmem_bld);
}

//------Delayed data member builder for class FFTAnyJet<reco::PFJet> -------------------
void __reco__FFTAnyJet_reco__PFJet__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_9026, Reflex::Literal("fftJetSpecific_"), OffsetOf(__shadow__::__reco__FFTAnyJet_reco__PFJet_, fftJetSpecific_), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class FFTAnyJet<reco::PFJet> -------------------
void __reco__FFTAnyJet_reco__PFJet__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_11678), Reflex::Literal("clone"), method_34131, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_49965), Reflex::Literal("getFFTSpecific"), method_34132, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST);
}
//------Stub functions for class vector<reco::FFTAnyJet<reco::PFJet>,std::allocator<reco::FFTAnyJet<reco::PFJet> > > -------------------------------
static void constructor_16823( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<reco::FFTAnyJet<reco::PFJet> >();
  else ::new(mem) ::std::vector<reco::FFTAnyJet<reco::PFJet> >();
}

static void constructor_16824( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<reco::FFTAnyJet<reco::PFJet> >(*(const ::std::allocator<reco::FFTAnyJet<reco::PFJet> >*)arg[0]);
  else ::new(mem) ::std::vector<reco::FFTAnyJet<reco::PFJet> >(*(const ::std::allocator<reco::FFTAnyJet<reco::PFJet> >*)arg[0]);
}

static void constructor_16825( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if ( arg.size() == 1 ) {
    if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<reco::FFTAnyJet<reco::PFJet> >(*(::std::size_t*)arg[0]);
  else ::new(mem) ::std::vector<reco::FFTAnyJet<reco::PFJet> >(*(::std::size_t*)arg[0]);
  }
  else if ( arg.size() == 2 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<reco::FFTAnyJet<reco::PFJet> >(*(::std::size_t*)arg[0],
      *(const ::reco::FFTAnyJet<reco::PFJet>*)arg[1]);
  else ::new(mem) ::std::vector<reco::FFTAnyJet<reco::PFJet> >(*(::std::size_t*)arg[0],
      *(const ::reco::FFTAnyJet<reco::PFJet>*)arg[1]);
  }
  else if ( arg.size() == 3 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<reco::FFTAnyJet<reco::PFJet> >(*(::std::size_t*)arg[0],
      *(const ::reco::FFTAnyJet<reco::PFJet>*)arg[1],
      *(const ::std::allocator<reco::FFTAnyJet<reco::PFJet> >*)arg[2]);
  else ::new(mem) ::std::vector<reco::FFTAnyJet<reco::PFJet> >(*(::std::size_t*)arg[0],
      *(const ::reco::FFTAnyJet<reco::PFJet>*)arg[1],
      *(const ::std::allocator<reco::FFTAnyJet<reco::PFJet> >*)arg[2]);
  }
}

static void constructor_16826( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<reco::FFTAnyJet<reco::PFJet> >(*(const ::std::vector<reco::FFTAnyJet<reco::PFJet> >*)arg[0]);
  else ::new(mem) ::std::vector<reco::FFTAnyJet<reco::PFJet> >(*(const ::std::vector<reco::FFTAnyJet<reco::PFJet> >*)arg[0]);
}

static void destructor_16827(void*, void * o, const std::vector<void*>&, void *) {
(((::std::vector<reco::FFTAnyJet<reco::PFJet> >*)o)->::std::vector<reco::FFTAnyJet<reco::PFJet> >::~vector)();
}
static  void operator_16828( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<reco::FFTAnyJet<reco::PFJet> >*)o)->operator=)(*(const ::std::vector<reco::FFTAnyJet<reco::PFJet> >*)arg[0]);
  else   (((::std::vector<reco::FFTAnyJet<reco::PFJet> >*)o)->operator=)(*(const ::std::vector<reco::FFTAnyJet<reco::PFJet> >*)arg[0]);
}

static  void method_16829( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<reco::FFTAnyJet<reco::PFJet> >*)o)->assign)(*(::std::size_t*)arg[0],
    *(const ::reco::FFTAnyJet<reco::PFJet>*)arg[1]);
}

static  void method_16830( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<reco::FFTAnyJet<reco::PFJet>*,std::vector<reco::FFTAnyJet<reco::PFJet> > >)((((::std::vector<reco::FFTAnyJet<reco::PFJet> >*)o)->begin)());
  else   (((::std::vector<reco::FFTAnyJet<reco::PFJet> >*)o)->begin)();
}

static  void method_16831( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<const reco::FFTAnyJet<reco::PFJet>*,std::vector<reco::FFTAnyJet<reco::PFJet> > >)((((const ::std::vector<reco::FFTAnyJet<reco::PFJet> >*)o)->begin)());
  else   (((const ::std::vector<reco::FFTAnyJet<reco::PFJet> >*)o)->begin)();
}

static  void method_16832( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<reco::FFTAnyJet<reco::PFJet>*,std::vector<reco::FFTAnyJet<reco::PFJet> > >)((((::std::vector<reco::FFTAnyJet<reco::PFJet> >*)o)->end)());
  else   (((::std::vector<reco::FFTAnyJet<reco::PFJet> >*)o)->end)();
}

static  void method_16833( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<const reco::FFTAnyJet<reco::PFJet>*,std::vector<reco::FFTAnyJet<reco::PFJet> > >)((((const ::std::vector<reco::FFTAnyJet<reco::PFJet> >*)o)->end)());
  else   (((const ::std::vector<reco::FFTAnyJet<reco::PFJet> >*)o)->end)();
}

static  void method_16838( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::std::vector<reco::FFTAnyJet<reco::PFJet> >*)o)->size)());
  else   (((const ::std::vector<reco::FFTAnyJet<reco::PFJet> >*)o)->size)();
}

static  void method_16839( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::std::vector<reco::FFTAnyJet<reco::PFJet> >*)o)->max_size)());
  else   (((const ::std::vector<reco::FFTAnyJet<reco::PFJet> >*)o)->max_size)();
}

static  void method_16840( void*, void* o, const std::vector<void*>& arg, void*)
{
  if ( arg.size() == 1 ) {
    (((::std::vector<reco::FFTAnyJet<reco::PFJet> >*)o)->resize)(*(::std::size_t*)arg[0]);
  }
  else if ( arg.size() == 2 ) { 
    (((::std::vector<reco::FFTAnyJet<reco::PFJet> >*)o)->resize)(*(::std::size_t*)arg[0],
      *(::reco::FFTAnyJet<reco::PFJet>*)arg[1]);
  }
}

static  void method_16841( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::std::vector<reco::FFTAnyJet<reco::PFJet> >*)o)->capacity)());
  else   (((const ::std::vector<reco::FFTAnyJet<reco::PFJet> >*)o)->capacity)();
}

static  void method_16842( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::std::vector<reco::FFTAnyJet<reco::PFJet> >*)o)->empty)());
  else   (((const ::std::vector<reco::FFTAnyJet<reco::PFJet> >*)o)->empty)();
}

static  void method_16843( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<reco::FFTAnyJet<reco::PFJet> >*)o)->reserve)(*(::std::size_t*)arg[0]);
}

static  void operator_16844( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<reco::FFTAnyJet<reco::PFJet> >*)o)->operator[])(*(::std::size_t*)arg[0]);
  else   (((::std::vector<reco::FFTAnyJet<reco::PFJet> >*)o)->operator[])(*(::std::size_t*)arg[0]);
}

static  void operator_16845( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<reco::FFTAnyJet<reco::PFJet> >*)o)->operator[])(*(::std::size_t*)arg[0]);
  else   (((const ::std::vector<reco::FFTAnyJet<reco::PFJet> >*)o)->operator[])(*(::std::size_t*)arg[0]);
}

static  void method_16847( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<reco::FFTAnyJet<reco::PFJet> >*)o)->at)(*(::std::size_t*)arg[0]);
  else   (((::std::vector<reco::FFTAnyJet<reco::PFJet> >*)o)->at)(*(::std::size_t*)arg[0]);
}

static  void method_16848( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<reco::FFTAnyJet<reco::PFJet> >*)o)->at)(*(::std::size_t*)arg[0]);
  else   (((const ::std::vector<reco::FFTAnyJet<reco::PFJet> >*)o)->at)(*(::std::size_t*)arg[0]);
}

static  void method_16849( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<reco::FFTAnyJet<reco::PFJet> >*)o)->front)();
  else   (((::std::vector<reco::FFTAnyJet<reco::PFJet> >*)o)->front)();
}

static  void method_16850( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<reco::FFTAnyJet<reco::PFJet> >*)o)->front)();
  else   (((const ::std::vector<reco::FFTAnyJet<reco::PFJet> >*)o)->front)();
}

static  void method_16851( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<reco::FFTAnyJet<reco::PFJet> >*)o)->back)();
  else   (((::std::vector<reco::FFTAnyJet<reco::PFJet> >*)o)->back)();
}

static  void method_16852( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<reco::FFTAnyJet<reco::PFJet> >*)o)->back)();
  else   (((const ::std::vector<reco::FFTAnyJet<reco::PFJet> >*)o)->back)();
}

static  void method_16853( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((::std::vector<reco::FFTAnyJet<reco::PFJet> >*)o)->data)());
  else   (((::std::vector<reco::FFTAnyJet<reco::PFJet> >*)o)->data)();
}

static  void method_16854( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::std::vector<reco::FFTAnyJet<reco::PFJet> >*)o)->data)());
  else   (((const ::std::vector<reco::FFTAnyJet<reco::PFJet> >*)o)->data)();
}

static  void method_16855( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<reco::FFTAnyJet<reco::PFJet> >*)o)->push_back)(*(const ::reco::FFTAnyJet<reco::PFJet>*)arg[0]);
}

static  void method_16856( void*, void* o, const std::vector<void*>&, void*)
{
  (((::std::vector<reco::FFTAnyJet<reco::PFJet> >*)o)->pop_back)();
}

static  void method_16857( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<reco::FFTAnyJet<reco::PFJet>*,std::vector<reco::FFTAnyJet<reco::PFJet> > >)((((::std::vector<reco::FFTAnyJet<reco::PFJet> >*)o)->insert)(*(::__gnu_cxx::__normal_iterator<reco::FFTAnyJet<reco::PFJet>*,std::vector<reco::FFTAnyJet<reco::PFJet> > >*)arg[0],
    *(const ::reco::FFTAnyJet<reco::PFJet>*)arg[1]));
  else   (((::std::vector<reco::FFTAnyJet<reco::PFJet> >*)o)->insert)(*(::__gnu_cxx::__normal_iterator<reco::FFTAnyJet<reco::PFJet>*,std::vector<reco::FFTAnyJet<reco::PFJet> > >*)arg[0],
    *(const ::reco::FFTAnyJet<reco::PFJet>*)arg[1]);
}

static  void method_16858( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<reco::FFTAnyJet<reco::PFJet> >*)o)->insert)(*(::__gnu_cxx::__normal_iterator<reco::FFTAnyJet<reco::PFJet>*,std::vector<reco::FFTAnyJet<reco::PFJet> > >*)arg[0],
    *(::std::size_t*)arg[1],
    *(const ::reco::FFTAnyJet<reco::PFJet>*)arg[2]);
}

static  void method_16859( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<reco::FFTAnyJet<reco::PFJet>*,std::vector<reco::FFTAnyJet<reco::PFJet> > >)((((::std::vector<reco::FFTAnyJet<reco::PFJet> >*)o)->erase)(*(::__gnu_cxx::__normal_iterator<reco::FFTAnyJet<reco::PFJet>*,std::vector<reco::FFTAnyJet<reco::PFJet> > >*)arg[0]));
  else   (((::std::vector<reco::FFTAnyJet<reco::PFJet> >*)o)->erase)(*(::__gnu_cxx::__normal_iterator<reco::FFTAnyJet<reco::PFJet>*,std::vector<reco::FFTAnyJet<reco::PFJet> > >*)arg[0]);
}

static  void method_16860( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<reco::FFTAnyJet<reco::PFJet>*,std::vector<reco::FFTAnyJet<reco::PFJet> > >)((((::std::vector<reco::FFTAnyJet<reco::PFJet> >*)o)->erase)(*(::__gnu_cxx::__normal_iterator<reco::FFTAnyJet<reco::PFJet>*,std::vector<reco::FFTAnyJet<reco::PFJet> > >*)arg[0],
    *(::__gnu_cxx::__normal_iterator<reco::FFTAnyJet<reco::PFJet>*,std::vector<reco::FFTAnyJet<reco::PFJet> > >*)arg[1]));
  else   (((::std::vector<reco::FFTAnyJet<reco::PFJet> >*)o)->erase)(*(::__gnu_cxx::__normal_iterator<reco::FFTAnyJet<reco::PFJet>*,std::vector<reco::FFTAnyJet<reco::PFJet> > >*)arg[0],
    *(::__gnu_cxx::__normal_iterator<reco::FFTAnyJet<reco::PFJet>*,std::vector<reco::FFTAnyJet<reco::PFJet> > >*)arg[1]);
}

static  void method_16861( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<reco::FFTAnyJet<reco::PFJet> >*)o)->swap)(*(::std::vector<reco::FFTAnyJet<reco::PFJet> >*)arg[0]);
}

static  void method_16862( void*, void* o, const std::vector<void*>&, void*)
{
  (((::std::vector<reco::FFTAnyJet<reco::PFJet> >*)o)->clear)();
}

static void method_newdel_3129( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::std::vector<reco::FFTAnyJet<reco::PFJet> > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::std::vector<reco::FFTAnyJet<reco::PFJet> > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::std::vector<reco::FFTAnyJet<reco::PFJet> > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::std::vector<reco::FFTAnyJet<reco::PFJet> > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::std::vector<reco::FFTAnyJet<reco::PFJet> > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

static void method_x19( void* retaddr, void*, const std::vector<void*>&, void*)
{
  typedef std::vector<std::pair< ::Reflex::Base, int> > Bases_t;
  static Bases_t s_bases;
  if ( !s_bases.size() ) {
    s_bases.push_back(std::make_pair(::Reflex::Base( ::Reflex::TypeBuilder(Reflex::Literal("std::_Vector_base<reco::FFTAnyJet<reco::PFJet>,std::allocator<reco::FFTAnyJet<reco::PFJet> > >")), ::Reflex::BaseOffset< ::std::vector<reco::FFTAnyJet<reco::PFJet> >,::std::_Vector_base<reco::FFTAnyJet<reco::PFJet>,std::allocator<reco::FFTAnyJet<reco::PFJet> > > >::Get(),::Reflex::PROTECTED), 0));
  }
  if (retaddr) *(Bases_t**)retaddr = &s_bases;
}

static void method_x20( void* retaddr, void*, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**) retaddr = ::Reflex::Proxy< ::std::vector<reco::FFTAnyJet<reco::PFJet> > >::Generate();
  else ::Reflex::Proxy< ::std::vector<reco::FFTAnyJet<reco::PFJet> > >::Generate();
}

//------Dictionary for class vector<reco::FFTAnyJet<reco::PFJet>,std::allocator<reco::FFTAnyJet<reco::PFJet> > > -------------------------------
void __std__vector_reco__FFTAnyJet_reco__PFJet_s__db_datamem(Reflex::Class*);
void __std__vector_reco__FFTAnyJet_reco__PFJet_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __std__vector_reco__FFTAnyJet_reco__PFJet_s__datamem_bld(&__std__vector_reco__FFTAnyJet_reco__PFJet_s__db_datamem);
Reflex::GenreflexMemberBuilder __std__vector_reco__FFTAnyJet_reco__PFJet_s__funcmem_bld(&__std__vector_reco__FFTAnyJet_reco__PFJet_s__db_funcmem);
void __std__vector_reco__FFTAnyJet_reco__PFJet_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("std::vector<reco::FFTAnyJet<reco::PFJet> >"), typeid(::std::vector<reco::FFTAnyJet<reco::PFJet> >), sizeof(::std::vector<reco::FFTAnyJet<reco::PFJet> >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddBase(type_2575, ::Reflex::BaseOffset< ::std::vector<reco::FFTAnyJet<reco::PFJet> >, ::std::_Vector_base<reco::FFTAnyJet<reco::PFJet>,std::allocator<reco::FFTAnyJet<reco::PFJet> > > >::Get(), ::Reflex::PROTECTED)
  .AddTypedef(type_8933, Reflex::Literal("std::vector<reco::FFTAnyJet<reco::PFJet> >::_Alloc_value_type"))
  .AddTypedef(type_2575, Reflex::Literal("std::vector<reco::FFTAnyJet<reco::PFJet> >::_Base"))
  .AddTypedef(type_3507, Reflex::Literal("std::vector<reco::FFTAnyJet<reco::PFJet> >::_Tp_alloc_type"))
  .AddTypedef(type_9730, Reflex::Literal("std::vector<reco::FFTAnyJet<reco::PFJet> >::_Alloc_traits"))
  .AddTypedef(type_8933, Reflex::Literal("std::vector<reco::FFTAnyJet<reco::PFJet> >::value_type"))
  .AddTypedef(type_11678, Reflex::Literal("std::vector<reco::FFTAnyJet<reco::PFJet> >::pointer"))
  .AddTypedef(type_16810, Reflex::Literal("std::vector<reco::FFTAnyJet<reco::PFJet> >::const_pointer"))
  .AddTypedef(type_16812, Reflex::Literal("std::vector<reco::FFTAnyJet<reco::PFJet> >::reference"))
  .AddTypedef(type_16814, Reflex::Literal("std::vector<reco::FFTAnyJet<reco::PFJet> >::const_reference"))
  .AddTypedef(type_9557, Reflex::Literal("std::vector<reco::FFTAnyJet<reco::PFJet> >::iterator"))
  .AddTypedef(type_9558, Reflex::Literal("std::vector<reco::FFTAnyJet<reco::PFJet> >::const_iterator"))
  .AddTypedef(type_3874, Reflex::Literal("std::vector<reco::FFTAnyJet<reco::PFJet> >::const_reverse_iterator"))
  .AddTypedef(type_3875, Reflex::Literal("std::vector<reco::FFTAnyJet<reco::PFJet> >::reverse_iterator"))
  .AddTypedef(type_3455, Reflex::Literal("std::vector<reco::FFTAnyJet<reco::PFJet> >::size_type"))
  .AddTypedef(type_3318, Reflex::Literal("std::vector<reco::FFTAnyJet<reco::PFJet> >::difference_type"))
  .AddTypedef(type_3507, Reflex::Literal("std::vector<reco::FFTAnyJet<reco::PFJet> >::allocator_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("vector"), constructor_16823, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_42854), Reflex::Literal("vector"), constructor_16824, 0, "__a", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_3455, type_16814, type_42854), Reflex::Literal("vector"), constructor_16825, 0, "__n;__value=_Tp();__a=_Alloc()", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_25853), Reflex::Literal("vector"), constructor_16826, 0, "__x", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~vector"), destructor_16827, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_3129, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getBasesTable"), method_x19, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddFunctionMember<void*(void)>(Reflex::Literal("createCollFuncTable"), method_x20, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandFunctionMemberBuilder(&__std__vector_reco__FFTAnyJet_reco__PFJet_s__funcmem_bld);
}

//------Delayed data member builder for class vector<reco::FFTAnyJet<reco::PFJet>,std::allocator<reco::FFTAnyJet<reco::PFJet> > > -------------------
void __std__vector_reco__FFTAnyJet_reco__PFJet_s__db_datamem(Reflex::Class*) {

}
//------Delayed function member builder for class vector<reco::FFTAnyJet<reco::PFJet>,std::allocator<reco::FFTAnyJet<reco::PFJet> > > -------------------
void __std__vector_reco__FFTAnyJet_reco__PFJet_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_44171, type_25853), Reflex::Literal("operator="), operator_16828, 0, "__x", ::Reflex::PUBLIC | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_3455, type_16814), Reflex::Literal("assign"), method_16829, 0, "__n;__val", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_9557), Reflex::Literal("begin"), method_16830, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_9558), Reflex::Literal("begin"), method_16831, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_9557), Reflex::Literal("end"), method_16832, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_9558), Reflex::Literal("end"), method_16833, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3455), Reflex::Literal("size"), method_16838, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3455), Reflex::Literal("max_size"), method_16839, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_3455, type_8933), Reflex::Literal("resize"), method_16840, 0, "__new_size;__x=_Tp()", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3455), Reflex::Literal("capacity"), method_16841, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("empty"), method_16842, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_3455), Reflex::Literal("reserve"), method_16843, 0, "__n", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_16812, type_3455), Reflex::Literal("operator[]"), operator_16844, 0, "__n", ::Reflex::PUBLIC | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_16814, type_3455), Reflex::Literal("operator[]"), operator_16845, 0, "__n", ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_16812, type_3455), Reflex::Literal("at"), method_16847, 0, "__n", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_16814, type_3455), Reflex::Literal("at"), method_16848, 0, "__n", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_16812), Reflex::Literal("front"), method_16849, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_16814), Reflex::Literal("front"), method_16850, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_16812), Reflex::Literal("back"), method_16851, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_16814), Reflex::Literal("back"), method_16852, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_11678), Reflex::Literal("data"), method_16853, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_16810), Reflex::Literal("data"), method_16854, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_16814), Reflex::Literal("push_back"), method_16855, 0, "__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708), Reflex::Literal("pop_back"), method_16856, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_9557, type_9557, type_16814), Reflex::Literal("insert"), method_16857, 0, "__position;__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_9557, type_3455, type_16814), Reflex::Literal("insert"), method_16858, 0, "__position;__n;__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_9557, type_9557), Reflex::Literal("erase"), method_16859, 0, "__position", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_9557, type_9557, type_9557), Reflex::Literal("erase"), method_16860, 0, "__first;__last", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_44171), Reflex::Literal("swap"), method_16861, 0, "__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708), Reflex::Literal("clear"), method_16862, 0, 0, ::Reflex::PUBLIC);
}
//------Stub functions for class RefProd<std::vector<reco::FFTAnyJet<reco::PFJet>, std::allocator<reco::FFTAnyJet<reco::PFJet> > > > -------------------------------
static  void operator_30212( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::RefProd<std::vector<reco::FFTAnyJet<reco::PFJet> > >*)o)->operator=)(*(const ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::PFJet> > >*)arg[0]);
  else   (((::edm::RefProd<std::vector<reco::FFTAnyJet<reco::PFJet> > >*)o)->operator=)(*(const ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::PFJet> > >*)arg[0]);
}

static void constructor_30213( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::PFJet> > >(*(const ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::PFJet> > >*)arg[0]);
  else ::new(mem) ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::PFJet> > >(*(const ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::PFJet> > >*)arg[0]);
}

static void constructor_30214( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::PFJet> > >();
  else ::new(mem) ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::PFJet> > >();
}

static void constructor_30215( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::PFJet> > >(*(const ::edm::Handle<std::vector<reco::FFTAnyJet<reco::PFJet> > >*)arg[0]);
  else ::new(mem) ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::PFJet> > >(*(const ::edm::Handle<std::vector<reco::FFTAnyJet<reco::PFJet> > >*)arg[0]);
}

static void constructor_30216( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::PFJet> > >(*(const ::edm::OrphanHandle<std::vector<reco::FFTAnyJet<reco::PFJet> > >*)arg[0]);
  else ::new(mem) ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::PFJet> > >(*(const ::edm::OrphanHandle<std::vector<reco::FFTAnyJet<reco::PFJet> > >*)arg[0]);
}

static void constructor_30217( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::PFJet> > >((const ::std::vector<reco::FFTAnyJet<reco::PFJet> >*)arg[0]);
  else ::new(mem) ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::PFJet> > >((const ::std::vector<reco::FFTAnyJet<reco::PFJet> >*)arg[0]);
}

static void constructor_30218( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::PFJet> > >(*(const ::edm::TestHandle<std::vector<reco::FFTAnyJet<reco::PFJet> > >*)arg[0]);
  else ::new(mem) ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::PFJet> > >(*(const ::edm::TestHandle<std::vector<reco::FFTAnyJet<reco::PFJet> > >*)arg[0]);
}

static void constructor_30219( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::PFJet> > >(*(const ::edm::ProductID*)arg[0],
      (const ::edm::EDProductGetter*)arg[1]);
  else ::new(mem) ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::PFJet> > >(*(const ::edm::ProductID*)arg[0],
      (const ::edm::EDProductGetter*)arg[1]);
}

static void destructor_30220(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::RefProd<std::vector<reco::FFTAnyJet<reco::PFJet> > >*)o)->::edm::RefProd<std::vector<reco::FFTAnyJet<reco::PFJet> > >::~RefProd)();
}
static  void operator_30221( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::PFJet> > >*)o)->operator*)();
  else   (((const ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::PFJet> > >*)o)->operator*)();
}

static  void operator_30222( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::PFJet> > >*)o)->operator->)());
  else   (((const ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::PFJet> > >*)o)->operator->)();
}

static  void method_30223( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::PFJet> > >*)o)->get)());
  else   (((const ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::PFJet> > >*)o)->get)();
}

static  void method_30224( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::PFJet> > >*)o)->product)());
  else   (((const ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::PFJet> > >*)o)->product)();
}

static  void method_30225( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::PFJet> > >*)o)->refCore)();
  else   (((const ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::PFJet> > >*)o)->refCore)();
}

static  void method_30226( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::PFJet> > >*)o)->isNull)());
  else   (((const ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::PFJet> > >*)o)->isNull)();
}

static  void method_30227( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::PFJet> > >*)o)->isNonnull)());
  else   (((const ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::PFJet> > >*)o)->isNonnull)();
}

static  void operator_30228( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::PFJet> > >*)o)->operator!)());
  else   (((const ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::PFJet> > >*)o)->operator!)();
}

static  void method_30229( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::ProductID)((((const ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::PFJet> > >*)o)->id)());
  else   (((const ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::PFJet> > >*)o)->id)();
}

static  void method_30230( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::PFJet> > >*)o)->productGetter)());
  else   (((const ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::PFJet> > >*)o)->productGetter)();
}

static  void method_30231( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::PFJet> > >*)o)->hasCache)());
  else   (((const ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::PFJet> > >*)o)->hasCache)();
}

static  void method_30232( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::PFJet> > >*)o)->hasProductCache)());
  else   (((const ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::PFJet> > >*)o)->hasProductCache)();
}

static  void method_30233( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::PFJet> > >*)o)->isAvailable)());
  else   (((const ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::PFJet> > >*)o)->isAvailable)();
}

static  void method_30234( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::PFJet> > >*)o)->isTransient)());
  else   (((const ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::PFJet> > >*)o)->isTransient)();
}

static  void method_30235( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::edm::RefProd<std::vector<reco::FFTAnyJet<reco::PFJet> > >*)o)->swap)(*(::edm::RefProd<std::vector<reco::FFTAnyJet<reco::PFJet> > >*)arg[0]);
}

static  void method_30236( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (short)((((::edm::RefProd<std::vector<reco::FFTAnyJet<reco::PFJet> > >*)o)->Class_Version)());
  else   (((::edm::RefProd<std::vector<reco::FFTAnyJet<reco::PFJet> > >*)o)->Class_Version)();
}

static void method_newdel_5732( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::PFJet> > > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::PFJet> > > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::PFJet> > > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::PFJet> > > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::PFJet> > > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class RefProd<std::vector<reco::FFTAnyJet<reco::PFJet>, std::allocator<reco::FFTAnyJet<reco::PFJet> > > > -------------------------------
void __edm__RefProd_std__vector_reco__FFTAnyJet_reco__PFJet_s_s__db_datamem(Reflex::Class*);
void __edm__RefProd_std__vector_reco__FFTAnyJet_reco__PFJet_s_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__RefProd_std__vector_reco__FFTAnyJet_reco__PFJet_s_s__datamem_bld(&__edm__RefProd_std__vector_reco__FFTAnyJet_reco__PFJet_s_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__RefProd_std__vector_reco__FFTAnyJet_reco__PFJet_s_s__funcmem_bld(&__edm__RefProd_std__vector_reco__FFTAnyJet_reco__PFJet_s_s__db_funcmem);
void __edm__RefProd_std__vector_reco__FFTAnyJet_reco__PFJet_s_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::RefProd<std::vector<reco::FFTAnyJet<reco::PFJet> > >"), typeid(::edm::RefProd<std::vector<reco::FFTAnyJet<reco::PFJet> > >), sizeof(::edm::RefProd<std::vector<reco::FFTAnyJet<reco::PFJet> > >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("ClassVersion"), ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::PFJet> > >::Class_Version())
  .AddTypedef(type_3129, Reflex::Literal("edm::RefProd<std::vector<reco::FFTAnyJet<reco::PFJet> > >::product_type"))
  .AddTypedef(type_3129, Reflex::Literal("edm::RefProd<std::vector<reco::FFTAnyJet<reco::PFJet> > >::value_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_48832, type_48833), Reflex::Literal("operator="), operator_30212, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_48833), Reflex::Literal("RefProd"), constructor_30213, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("RefProd"), constructor_30214, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_48834), Reflex::Literal("RefProd"), constructor_30215, 0, "handle", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_48835), Reflex::Literal("RefProd"), constructor_30216, 0, "handle", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_48121), Reflex::Literal("RefProd"), constructor_30217, 0, "iProduct", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_48836), Reflex::Literal("RefProd"), constructor_30218, 0, "handle", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_25503, type_25623), Reflex::Literal("RefProd"), constructor_30219, 0, "productID;prodGetter", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~RefProd"), destructor_30220, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_5732, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__RefProd_std__vector_reco__FFTAnyJet_reco__PFJet_s_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__RefProd_std__vector_reco__FFTAnyJet_reco__PFJet_s_s__funcmem_bld);
}

//------Delayed data member builder for class RefProd<std::vector<reco::FFTAnyJet<reco::PFJet>, std::allocator<reco::FFTAnyJet<reco::PFJet> > > > -------------------
void __edm__RefProd_std__vector_reco__FFTAnyJet_reco__PFJet_s_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_5697, Reflex::Literal("product_"), OffsetOf(__shadow__::__edm__RefProd_std__vector_reco__FFTAnyJet_reco__PFJet_s_s_, product_), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class RefProd<std::vector<reco::FFTAnyJet<reco::PFJet>, std::allocator<reco::FFTAnyJet<reco::PFJet> > > > -------------------
void __edm__RefProd_std__vector_reco__FFTAnyJet_reco__PFJet_s_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_25853), Reflex::Literal("operator*"), operator_30221, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_48121), Reflex::Literal("operator->"), operator_30222, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_48121), Reflex::Literal("get"), method_30223, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_48121), Reflex::Literal("product"), method_30224, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_29672), Reflex::Literal("refCore"), method_30225, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("isNull"), method_30226, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("isNonnull"), method_30227, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("operator!"), operator_30228, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_5905), Reflex::Literal("id"), method_30229, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_25623), Reflex::Literal("productGetter"), method_30230, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("hasCache"), method_30231, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("hasProductCache"), method_30232, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("isAvailable"), method_30233, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("isTransient"), method_30234, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_48832), Reflex::Literal("swap"), method_30235, 0, "other", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_484), Reflex::Literal("Class_Version"), method_30236, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC);
}
//------Stub functions for class FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet>, std::allocator<reco::FFTAnyJet<reco::PFJet> > >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet>, std::allocator<reco::FFTAnyJet<reco::PFJet> > >, reco::FFTAnyJet<reco::PFJet> > > -------------------------------
static  void operator_29493( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)o)->operator=)(*(const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)arg[0]);
  else   (((::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)o)->operator=)(*(const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)arg[0]);
}

static void constructor_29494( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >(*(const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)arg[0]);
  else ::new(mem) ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >(*(const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)arg[0]);
}

static void constructor_29495( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >();
  else ::new(mem) ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >();
}

static void constructor_29496( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >(*(const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)arg[0],
      *(const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)arg[1]);
  else ::new(mem) ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >(*(const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)arg[0],
      *(const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)arg[1]);
}

static void destructor_29497(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)o)->::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >::~FwdRef)();
}
static  void operator_29498( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)o)->operator*)();
  else   (((const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)o)->operator*)();
}

static  void operator_29499( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)o)->operator->)());
  else   (((const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)o)->operator->)();
}

static  void method_29500( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)o)->get)());
  else   (((const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)o)->get)();
}

static  void method_29501( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)o)->isNull)());
  else   (((const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)o)->isNull)();
}

static  void method_29502( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)o)->isNonnull)());
  else   (((const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)o)->isNonnull)();
}

static  void operator_29503( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)o)->operator!)());
  else   (((const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)o)->operator!)();
}

static  void method_29504( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)o)->ref)();
  else   (((const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)o)->ref)();
}

static  void method_29505( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)o)->backRef)();
  else   (((const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)o)->backRef)();
}

static  void method_29506( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)o)->productGetter)());
  else   (((const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)o)->productGetter)();
}

static  void method_29507( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)o)->product)());
  else   (((const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)o)->product)();
}

static  void method_29508( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::ProductID)((((const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)o)->id)());
  else   (((const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)o)->id)();
}

static  void method_29509( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (unsigned int)((((const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)o)->key)());
  else   (((const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)o)->key)();
}

static  void method_29510( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)o)->hasProductCache)());
  else   (((const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)o)->hasProductCache)();
}

static  void method_29511( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)o)->isAvailable)());
  else   (((const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)o)->isAvailable)();
}

static  void method_29512( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)o)->isTransient)());
  else   (((const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)o)->isTransient)();
}

static  void method_29513( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (short)((((::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)o)->Class_Version)());
  else   (((::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)o)->Class_Version)();
}

static void method_newdel_5496( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet>, std::allocator<reco::FFTAnyJet<reco::PFJet> > >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet>, std::allocator<reco::FFTAnyJet<reco::PFJet> > >, reco::FFTAnyJet<reco::PFJet> > > -------------------------------
void __edm__FwdRef_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s__db_datamem(Reflex::Class*);
void __edm__FwdRef_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__FwdRef_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s__datamem_bld(&__edm__FwdRef_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__FwdRef_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s__funcmem_bld(&__edm__FwdRef_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s__db_funcmem);
void __edm__FwdRef_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >"), typeid(::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >), sizeof(::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("ClassVersion"), ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >::Class_Version())
  .AddTypedef(type_3129, Reflex::Literal("edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >::product_type"))
  .AddTypedef(type_8933, Reflex::Literal("edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >::value_type"))
  .AddTypedef(type_8933c, Reflex::Literal("edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >::element_type"))
  .AddTypedef(type_25848, Reflex::Literal("edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >::finder_type"))
  .AddTypedef(type_211, Reflex::Literal("edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >::argument_type"))
  .AddTypedef(type_211, Reflex::Literal("edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >::key_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_16747, type_16749), Reflex::Literal("operator="), operator_29493, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_16749), Reflex::Literal("FwdRef"), constructor_29494, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("FwdRef"), constructor_29495, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_47505, type_47505), Reflex::Literal("FwdRef"), constructor_29496, 0, "ref;backRef", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~FwdRef"), destructor_29497, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_5496, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__FwdRef_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__FwdRef_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s__funcmem_bld);
}

//------Delayed data member builder for class FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet>, std::allocator<reco::FFTAnyJet<reco::PFJet> > >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet>, std::allocator<reco::FFTAnyJet<reco::PFJet> > >, reco::FFTAnyJet<reco::PFJet> > > -------------------
void __edm__FwdRef_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_5814, Reflex::Literal("ref_"), OffsetOf(__shadow__::__edm__FwdRef_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s_, ref_), ::Reflex::PRIVATE)
  .AddDataMember(type_5814, Reflex::Literal("backRef_"), OffsetOf(__shadow__::__edm__FwdRef_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s_, backRef_), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet>, std::allocator<reco::FFTAnyJet<reco::PFJet> > >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet>, std::allocator<reco::FFTAnyJet<reco::PFJet> > >, reco::FFTAnyJet<reco::PFJet> > > -------------------
void __edm__FwdRef_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_16814), Reflex::Literal("operator*"), operator_29498, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_16810), Reflex::Literal("operator->"), operator_29499, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_16810), Reflex::Literal("get"), method_29500, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("isNull"), method_29501, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("isNonnull"), method_29502, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("operator!"), operator_29503, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_47505), Reflex::Literal("ref"), method_29504, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_47505), Reflex::Literal("backRef"), method_29505, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_25623), Reflex::Literal("productGetter"), method_29506, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_48121), Reflex::Literal("product"), method_29507, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_5905), Reflex::Literal("id"), method_29508, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_211), Reflex::Literal("key"), method_29509, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("hasProductCache"), method_29510, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("isAvailable"), method_29511, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("isTransient"), method_29512, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_484), Reflex::Literal("Class_Version"), method_29513, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC);
}
//------Stub functions for class FFTAnyJet<reco::BasicJet> -------------------------------
static  void operator_34135( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::reco::FFTAnyJet<reco::BasicJet>*)o)->operator=)(*(const ::reco::FFTAnyJet<reco::BasicJet>*)arg[0]);
  else   (((::reco::FFTAnyJet<reco::BasicJet>*)o)->operator=)(*(const ::reco::FFTAnyJet<reco::BasicJet>*)arg[0]);
}

static void constructor_34136( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::reco::FFTAnyJet<reco::BasicJet>(*(const ::reco::FFTAnyJet<reco::BasicJet>*)arg[0]);
  else ::new(mem) ::reco::FFTAnyJet<reco::BasicJet>(*(const ::reco::FFTAnyJet<reco::BasicJet>*)arg[0]);
}

static void constructor_34137( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::reco::FFTAnyJet<reco::BasicJet>();
  else ::new(mem) ::reco::FFTAnyJet<reco::BasicJet>();
}

static void destructor_34138(void*, void * o, const std::vector<void*>&, void *) {
(((::reco::FFTAnyJet<reco::BasicJet>*)o)->::reco::FFTAnyJet<reco::BasicJet>::~FFTAnyJet)();
}
static void constructor_34139( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::reco::FFTAnyJet<reco::BasicJet>(*(const ::reco::BasicJet*)arg[0],
      *(const ::reco::FFTJet<float>*)arg[1]);
  else ::new(mem) ::reco::FFTAnyJet<reco::BasicJet>(*(const ::reco::BasicJet*)arg[0],
      *(const ::reco::FFTJet<float>*)arg[1]);
}

static  void method_34140( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::reco::FFTAnyJet<reco::BasicJet>*)o)->clone)());
  else   (((const ::reco::FFTAnyJet<reco::BasicJet>*)o)->clone)();
}

static  void method_34141( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::reco::FFTAnyJet<reco::BasicJet>*)o)->getFFTSpecific)();
  else   (((const ::reco::FFTAnyJet<reco::BasicJet>*)o)->getFFTSpecific)();
}

static void method_newdel_8934( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::reco::FFTAnyJet<reco::BasicJet> >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::reco::FFTAnyJet<reco::BasicJet> >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::reco::FFTAnyJet<reco::BasicJet> >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::reco::FFTAnyJet<reco::BasicJet> >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::reco::FFTAnyJet<reco::BasicJet> >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

static void method_x24( void* retaddr, void*, const std::vector<void*>&, void*)
{
  typedef std::vector<std::pair< ::Reflex::Base, int> > Bases_t;
  static Bases_t s_bases;
  if ( !s_bases.size() ) {
    s_bases.push_back(std::make_pair(::Reflex::Base( ::Reflex::TypeBuilder(Reflex::Literal("reco::BasicJet")), ::Reflex::BaseOffset< ::reco::FFTAnyJet<reco::BasicJet>,::reco::BasicJet >::Get(),::Reflex::PUBLIC), 0));
    s_bases.push_back(std::make_pair(::Reflex::Base( ::Reflex::TypeBuilder(Reflex::Literal("reco::Jet")), ::Reflex::BaseOffset< ::reco::FFTAnyJet<reco::BasicJet>,::reco::Jet >::Get(),::Reflex::PUBLIC), 1));
    s_bases.push_back(std::make_pair(::Reflex::Base( ::Reflex::TypeBuilder(Reflex::Literal("reco::CompositePtrCandidate")), ::Reflex::BaseOffset< ::reco::FFTAnyJet<reco::BasicJet>,::reco::CompositePtrCandidate >::Get(),::Reflex::PUBLIC), 2));
    s_bases.push_back(std::make_pair(::Reflex::Base( ::Reflex::TypeBuilder(Reflex::Literal("reco::LeafCandidate")), ::Reflex::BaseOffset< ::reco::FFTAnyJet<reco::BasicJet>,::reco::LeafCandidate >::Get(),::Reflex::PUBLIC), 3));
    s_bases.push_back(std::make_pair(::Reflex::Base( ::Reflex::TypeBuilder(Reflex::Literal("reco::Candidate")), ::Reflex::BaseOffset< ::reco::FFTAnyJet<reco::BasicJet>,::reco::Candidate >::Get(),::Reflex::PUBLIC), 4));
  }
  if (retaddr) *(Bases_t**)retaddr = &s_bases;
}

//------Dictionary for class FFTAnyJet<reco::BasicJet> -------------------------------
void __reco__FFTAnyJet_reco__BasicJet__db_datamem(Reflex::Class*);
void __reco__FFTAnyJet_reco__BasicJet__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __reco__FFTAnyJet_reco__BasicJet__datamem_bld(&__reco__FFTAnyJet_reco__BasicJet__db_datamem);
Reflex::GenreflexMemberBuilder __reco__FFTAnyJet_reco__BasicJet__funcmem_bld(&__reco__FFTAnyJet_reco__BasicJet__db_funcmem);
void __reco__FFTAnyJet_reco__BasicJet__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("reco::FFTAnyJet<reco::BasicJet>"), typeid(::reco::FFTAnyJet<reco::BasicJet>), sizeof(::reco::FFTAnyJet<reco::BasicJet>), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::VIRTUAL, ::Reflex::CLASS)
  .AddBase(type_9176, ::Reflex::BaseOffset< ::reco::FFTAnyJet<reco::BasicJet>, ::reco::BasicJet >::Get(), ::Reflex::PUBLIC)
  .AddTypedef(type_9176, Reflex::Literal("reco::FFTAnyJet<reco::BasicJet>::Base"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_17007, type_17009), Reflex::Literal("operator="), operator_34135, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_17009), Reflex::Literal("FFTAnyJet"), constructor_34136, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("FFTAnyJet"), constructor_34137, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~FFTAnyJet"), destructor_34138, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::DESTRUCTOR )
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_20749, type_49965), Reflex::Literal("FFTAnyJet"), constructor_34139, 0, "jet;fftjet", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_8934, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getBasesTable"), method_x24, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__reco__FFTAnyJet_reco__BasicJet__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__reco__FFTAnyJet_reco__BasicJet__funcmem_bld);
}

//------Delayed data member builder for class FFTAnyJet<reco::BasicJet> -------------------
void __reco__FFTAnyJet_reco__BasicJet__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_9026, Reflex::Literal("fftJetSpecific_"), OffsetOf(__shadow__::__reco__FFTAnyJet_reco__BasicJet_, fftJetSpecific_), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class FFTAnyJet<reco::BasicJet> -------------------
void __reco__FFTAnyJet_reco__BasicJet__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_11640), Reflex::Literal("clone"), method_34140, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_49965), Reflex::Literal("getFFTSpecific"), method_34141, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST);
}
//------Stub functions for class Ref<std::vector<reco::FFTAnyJet<reco::BasicJet>, std::allocator<reco::FFTAnyJet<reco::BasicJet> > >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet>, std::allocator<reco::FFTAnyJet<reco::BasicJet> > >, reco::FFTAnyJet<reco::BasicJet> > > -------------------------------
static  void operator_31009( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)o)->operator=)(*(const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)arg[0]);
  else   (((::edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)o)->operator=)(*(const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)arg[0]);
}

static void constructor_31010( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >(*(const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)arg[0]);
  else ::new(mem) ::edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >(*(const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)arg[0]);
}

static void constructor_31011( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >();
  else ::new(mem) ::edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >();
}

static void constructor_31012( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if ( arg.size() == 2 ) {
    if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >(*(const ::edm::Handle<std::vector<reco::FFTAnyJet<reco::BasicJet> > >*)arg[0],
      *(unsigned int*)arg[1]);
  else ::new(mem) ::edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >(*(const ::edm::Handle<std::vector<reco::FFTAnyJet<reco::BasicJet> > >*)arg[0],
      *(unsigned int*)arg[1]);
  }
  else if ( arg.size() == 3 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >(*(const ::edm::Handle<std::vector<reco::FFTAnyJet<reco::BasicJet> > >*)arg[0],
      *(unsigned int*)arg[1],
      *(bool*)arg[2]);
  else ::new(mem) ::edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >(*(const ::edm::Handle<std::vector<reco::FFTAnyJet<reco::BasicJet> > >*)arg[0],
      *(unsigned int*)arg[1],
      *(bool*)arg[2]);
  }
}

static void constructor_31013( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if ( arg.size() == 2 ) {
    if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >(*(const ::edm::OrphanHandle<std::vector<reco::FFTAnyJet<reco::BasicJet> > >*)arg[0],
      *(unsigned int*)arg[1]);
  else ::new(mem) ::edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >(*(const ::edm::OrphanHandle<std::vector<reco::FFTAnyJet<reco::BasicJet> > >*)arg[0],
      *(unsigned int*)arg[1]);
  }
  else if ( arg.size() == 3 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >(*(const ::edm::OrphanHandle<std::vector<reco::FFTAnyJet<reco::BasicJet> > >*)arg[0],
      *(unsigned int*)arg[1],
      *(bool*)arg[2]);
  else ::new(mem) ::edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >(*(const ::edm::OrphanHandle<std::vector<reco::FFTAnyJet<reco::BasicJet> > >*)arg[0],
      *(unsigned int*)arg[1],
      *(bool*)arg[2]);
  }
}

static void constructor_31014( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if ( arg.size() == 2 ) {
    if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >(*(const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)arg[0],
      *(unsigned int*)arg[1]);
  else ::new(mem) ::edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >(*(const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)arg[0],
      *(unsigned int*)arg[1]);
  }
  else if ( arg.size() == 3 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >(*(const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)arg[0],
      *(unsigned int*)arg[1],
      *(bool*)arg[2]);
  else ::new(mem) ::edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >(*(const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)arg[0],
      *(unsigned int*)arg[1],
      *(bool*)arg[2]);
  }
}

static void constructor_31015( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if ( arg.size() == 2 ) {
    if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >((const ::std::vector<reco::FFTAnyJet<reco::BasicJet> >*)arg[0],
      *(unsigned int*)arg[1]);
  else ::new(mem) ::edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >((const ::std::vector<reco::FFTAnyJet<reco::BasicJet> >*)arg[0],
      *(unsigned int*)arg[1]);
  }
  else if ( arg.size() == 3 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >((const ::std::vector<reco::FFTAnyJet<reco::BasicJet> >*)arg[0],
      *(unsigned int*)arg[1],
      *(bool*)arg[2]);
  else ::new(mem) ::edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >((const ::std::vector<reco::FFTAnyJet<reco::BasicJet> >*)arg[0],
      *(unsigned int*)arg[1],
      *(bool*)arg[2]);
  }
}

static void constructor_31016( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if ( arg.size() == 2 ) {
    if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >(*(const ::edm::TestHandle<std::vector<reco::FFTAnyJet<reco::BasicJet> > >*)arg[0],
      *(unsigned int*)arg[1]);
  else ::new(mem) ::edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >(*(const ::edm::TestHandle<std::vector<reco::FFTAnyJet<reco::BasicJet> > >*)arg[0],
      *(unsigned int*)arg[1]);
  }
  else if ( arg.size() == 3 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >(*(const ::edm::TestHandle<std::vector<reco::FFTAnyJet<reco::BasicJet> > >*)arg[0],
      *(unsigned int*)arg[1],
      *(bool*)arg[2]);
  else ::new(mem) ::edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >(*(const ::edm::TestHandle<std::vector<reco::FFTAnyJet<reco::BasicJet> > >*)arg[0],
      *(unsigned int*)arg[1],
      *(bool*)arg[2]);
  }
}

static void constructor_31017( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >(*(const ::edm::ProductID*)arg[0],
      *(unsigned int*)arg[1],
      (const ::edm::EDProductGetter*)arg[2]);
  else ::new(mem) ::edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >(*(const ::edm::ProductID*)arg[0],
      *(unsigned int*)arg[1],
      (const ::edm::EDProductGetter*)arg[2]);
}

static void constructor_31018( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >(*(const ::edm::ProductID*)arg[0],
      (const ::reco::FFTAnyJet<reco::BasicJet>*)arg[1],
      *(unsigned int*)arg[2],
      (const ::std::vector<reco::FFTAnyJet<reco::BasicJet> >*)arg[3]);
  else ::new(mem) ::edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >(*(const ::edm::ProductID*)arg[0],
      (const ::reco::FFTAnyJet<reco::BasicJet>*)arg[1],
      *(unsigned int*)arg[2],
      (const ::std::vector<reco::FFTAnyJet<reco::BasicJet> >*)arg[3]);
}

static void constructor_31019( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >(*(const ::edm::ProductID*)arg[0]);
  else ::new(mem) ::edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >(*(const ::edm::ProductID*)arg[0]);
}

static void constructor_31020( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >(*(const ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::BasicJet> > >*)arg[0],
      *(unsigned int*)arg[1]);
  else ::new(mem) ::edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >(*(const ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::BasicJet> > >*)arg[0],
      *(unsigned int*)arg[1]);
}

static void destructor_31021(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)o)->::edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >::~Ref)();
}
static  void operator_31022( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)o)->operator*)();
  else   (((const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)o)->operator*)();
}

static  void operator_31023( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)o)->operator->)());
  else   (((const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)o)->operator->)();
}

static  void method_31024( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)o)->get)());
  else   (((const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)o)->get)();
}

static  void method_31025( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)o)->isNull)());
  else   (((const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)o)->isNull)();
}

static  void method_31026( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)o)->isNonnull)());
  else   (((const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)o)->isNonnull)();
}

static  void operator_31027( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)o)->operator!)());
  else   (((const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)o)->operator!)();
}

static  void method_31028( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::ProductID)((((const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)o)->id)());
  else   (((const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)o)->id)();
}

static  void method_31029( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)o)->productGetter)());
  else   (((const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)o)->productGetter)();
}

static  void method_31030( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)o)->product)());
  else   (((const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)o)->product)();
}

static  void method_31031( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (unsigned int)((((const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)o)->key)());
  else   (((const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)o)->key)();
}

static  void method_31032( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (unsigned int)((((const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)o)->index)());
  else   (((const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)o)->index)();
}

static  void method_31033( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)o)->hasProductCache)());
  else   (((const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)o)->hasProductCache)();
}

static  void method_31034( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)o)->isAvailable)());
  else   (((const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)o)->isAvailable)();
}

static  void method_31035( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)o)->isTransient)());
  else   (((const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)o)->isTransient)();
}

static  void method_31036( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)o)->refCore)();
  else   (((const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)o)->refCore)();
}

static  void method_31037( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (short)((((::edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)o)->Class_Version)());
  else   (((::edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)o)->Class_Version)();
}

static void constructor_31038( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >(*(const ::edm::RefCore*)arg[0],
      *(const unsigned int*)arg[1]);
  else ::new(mem) ::edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >(*(const ::edm::RefCore*)arg[0],
      *(const unsigned int*)arg[1]);
}

static void method_newdel_5815( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class Ref<std::vector<reco::FFTAnyJet<reco::BasicJet>, std::allocator<reco::FFTAnyJet<reco::BasicJet> > >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet>, std::allocator<reco::FFTAnyJet<reco::BasicJet> > >, reco::FFTAnyJet<reco::BasicJet> > > -------------------------------
void __edm__Ref_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s__db_datamem(Reflex::Class*);
void __edm__Ref_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__Ref_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s__datamem_bld(&__edm__Ref_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__Ref_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s__funcmem_bld(&__edm__Ref_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s__db_funcmem);
void __edm__Ref_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >"), typeid(::edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >), sizeof(::edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("ClassVersion"), ::edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >::Class_Version())
  .AddTypedef(type_8934, Reflex::Literal("edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >::T"))
  .AddTypedef(type_25860, Reflex::Literal("edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >::F"))
  .AddTypedef(type_27550, Reflex::Literal("edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >::VF"))
  .AddTypedef(type_27549, Reflex::Literal("edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >::VBF"))
  .AddTypedef(type_3134, Reflex::Literal("edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >::product_type"))
  .AddTypedef(type_8934, Reflex::Literal("edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >::value_type"))
  .AddTypedef(type_8934c, Reflex::Literal("edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >::element_type"))
  .AddTypedef(type_25860, Reflex::Literal("edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >::finder_type"))
  .AddTypedef(type_211, Reflex::Literal("edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >::argument_type"))
  .AddTypedef(type_211, Reflex::Literal("edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >::key_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_48910, type_47519), Reflex::Literal("operator="), operator_31009, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_47519), Reflex::Literal("Ref"), constructor_31010, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("Ref"), constructor_31011, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_48839, type_211, type_1593), Reflex::Literal("Ref"), constructor_31012, 0, "handle;itemKey;setNow=true", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_48840, type_211, type_1593), Reflex::Literal("Ref"), constructor_31013, 0, "handle;itemKey;setNow=true", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_48125, type_211, type_1593), Reflex::Literal("Ref"), constructor_31014, 0, "refvector;itemKey;setNow=true", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_48126, type_211, type_1593), Reflex::Literal("Ref"), constructor_31015, 0, "iProduct;iItemKey;iSetNow=true", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_48841, type_211, type_1593), Reflex::Literal("Ref"), constructor_31016, 0, "handle;itemKey;setNow=true", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_25503, type_211, type_25623), Reflex::Literal("Ref"), constructor_31017, 0, "productID;itemKey;prodGetter", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_25503, type_17005, type_211, type_48126), Reflex::Literal("Ref"), constructor_31018, 0, "iProductID;;iItemKey;iProduct", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_25503), Reflex::Literal("Ref"), constructor_31019, 0, "iId", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_48838, type_211), Reflex::Literal("Ref"), constructor_31020, 0, "refProd;itemKey", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~Ref"), destructor_31021, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_29672, type_13040), Reflex::Literal("Ref"), constructor_31038, 0, "iRefCore;iKey", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_5815, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__Ref_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__Ref_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s__funcmem_bld);
}

//------Delayed data member builder for class Ref<std::vector<reco::FFTAnyJet<reco::BasicJet>, std::allocator<reco::FFTAnyJet<reco::BasicJet> > >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet>, std::allocator<reco::FFTAnyJet<reco::BasicJet> > >, reco::FFTAnyJet<reco::BasicJet> > > -------------------
void __edm__Ref_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_5268, Reflex::Literal("product_"), OffsetOf(__shadow__::__edm__Ref_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s_, product_), ::Reflex::PRIVATE | ::Reflex::MUTABLE);
}
//------Delayed function member builder for class Ref<std::vector<reco::FFTAnyJet<reco::BasicJet>, std::allocator<reco::FFTAnyJet<reco::BasicJet> > >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet>, std::allocator<reco::FFTAnyJet<reco::BasicJet> > >, reco::FFTAnyJet<reco::BasicJet> > > -------------------
void __edm__Ref_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_17009), Reflex::Literal("operator*"), operator_31022, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_17005), Reflex::Literal("operator->"), operator_31023, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_17005), Reflex::Literal("get"), method_31024, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("isNull"), method_31025, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("isNonnull"), method_31026, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("operator!"), operator_31027, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_5905), Reflex::Literal("id"), method_31028, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_25623), Reflex::Literal("productGetter"), method_31029, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_48126), Reflex::Literal("product"), method_31030, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_211), Reflex::Literal("key"), method_31031, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_211), Reflex::Literal("index"), method_31032, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("hasProductCache"), method_31033, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("isAvailable"), method_31034, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("isTransient"), method_31035, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_29672), Reflex::Literal("refCore"), method_31036, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_484), Reflex::Literal("Class_Version"), method_31037, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC);
}
//------Stub functions for class RefVector<std::vector<reco::FFTAnyJet<reco::BasicJet>, std::allocator<reco::FFTAnyJet<reco::BasicJet> > >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet>, std::allocator<reco::FFTAnyJet<reco::BasicJet> > >, reco::FFTAnyJet<reco::BasicJet> > > -------------------------------
static void destructor_28149(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::RefVector<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)o)->::edm::RefVector<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >::~RefVector)();
}
static void constructor_28150( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >();
  else ::new(mem) ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >();
}

static void constructor_28151( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >(*(const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)arg[0]);
  else ::new(mem) ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >(*(const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)arg[0]);
}

static void constructor_28152( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >(*(const ::edm::ProductID*)arg[0]);
  else ::new(mem) ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >(*(const ::edm::ProductID*)arg[0]);
}

static  void method_28153( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::edm::RefVector<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)o)->push_back)(*(const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)arg[0]);
}

static  void operator_28154( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >)((((const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)o)->operator[])(*(::std::size_t*)arg[0]));
  else   (((const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)o)->operator[])(*(::std::size_t*)arg[0]);
}

static  void method_28155( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >)((((const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)o)->at)(*(::std::size_t*)arg[0]));
  else   (((const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)o)->at)(*(::std::size_t*)arg[0]);
}

static  void method_28156( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)o)->refVector)();
  else   (((const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)o)->refVector)();
}

static  void method_28157( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)o)->empty)());
  else   (((const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)o)->empty)();
}

static  void method_28158( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)o)->size)());
  else   (((const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)o)->size)();
}

static  void method_28159( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)o)->capacity)());
  else   (((const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)o)->capacity)();
}

static  void method_28160( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::edm::RefVector<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)o)->reserve)(*(::std::size_t*)arg[0]);
}

static  void method_28161( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::RefVectorIterator<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >)((((const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)o)->begin)());
  else   (((const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)o)->begin)();
}

static  void method_28162( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::RefVectorIterator<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >)((((const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)o)->end)());
  else   (((const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)o)->end)();
}

static  void method_28163( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::ProductID)((((const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)o)->id)());
  else   (((const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)o)->id)();
}

static  void method_28164( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)o)->productGetter)());
  else   (((const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)o)->productGetter)();
}

static  void method_28165( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)o)->isNull)());
  else   (((const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)o)->isNull)();
}

static  void method_28166( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)o)->isNonnull)());
  else   (((const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)o)->isNonnull)();
}

static  void operator_28167( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)o)->operator!)());
  else   (((const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)o)->operator!)();
}

static  void method_28168( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)o)->product)());
  else   (((const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)o)->product)();
}

static  void method_28169( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)o)->isAvailable)());
  else   (((const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)o)->isAvailable)();
}

static  void method_28170( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)o)->isTransient)());
  else   (((const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)o)->isTransient)();
}

static  void method_28171( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (edm::RefVectorIterator<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >)((((::edm::RefVector<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)o)->erase)(*(const ::edm::RefVectorIterator<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)arg[0]));
  else   (((::edm::RefVector<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)o)->erase)(*(const ::edm::RefVectorIterator<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)arg[0]);
}

static  void method_28172( void*, void* o, const std::vector<void*>&, void*)
{
  (((::edm::RefVector<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)o)->clear)();
}

static  void method_28173( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::edm::RefVector<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)o)->swap)(*(::edm::RefVector<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)arg[0]);
}

static  void operator_28174( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::RefVector<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)o)->operator=)(*(const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)arg[0]);
  else   (((::edm::RefVector<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)o)->operator=)(*(const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)arg[0]);
}

static  void method_28175( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)o)->hasProductCache)());
  else   (((const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)o)->hasProductCache)();
}

static  void method_28176( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)o)->fillView)(*(const ::edm::ProductID*)arg[0],
    *(::std::vector<const void*>*)arg[1],
    *(::edm::helper_vector*)arg[2]);
}

static  void method_28177( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (short)((((::edm::RefVector<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)o)->Class_Version)());
  else   (((::edm::RefVector<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)o)->Class_Version)();
}

static void method_newdel_5348( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class RefVector<std::vector<reco::FFTAnyJet<reco::BasicJet>, std::allocator<reco::FFTAnyJet<reco::BasicJet> > >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet>, std::allocator<reco::FFTAnyJet<reco::BasicJet> > >, reco::FFTAnyJet<reco::BasicJet> > > -------------------------------
void __edm__RefVector_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s__db_datamem(Reflex::Class*);
void __edm__RefVector_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__RefVector_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s__datamem_bld(&__edm__RefVector_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__RefVector_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s__funcmem_bld(&__edm__RefVector_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s__db_funcmem);
void __edm__RefVector_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::RefVector<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >"), typeid(::edm::RefVector<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >), sizeof(::edm::RefVector<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("ClassVersion"), ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >::Class_Version())
  .AddTypedef(type_3134, Reflex::Literal("edm::RefVector<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >::collection_type"))
  .AddTypedef(type_8934, Reflex::Literal("edm::RefVector<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >::member_type"))
  .AddTypedef(type_25860, Reflex::Literal("edm::RefVector<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >::finder_type"))
  .AddTypedef(type_5251, Reflex::Literal("edm::RefVector<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >::iterator"))
  .AddTypedef(type_5251, Reflex::Literal("edm::RefVector<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >::const_iterator"))
  .AddTypedef(type_5815, Reflex::Literal("edm::RefVector<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >::value_type"))
  .AddTypedef(type_5815c, Reflex::Literal("edm::RefVector<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >::const_reference"))
  .AddTypedef(type_5815c, Reflex::Literal("edm::RefVector<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >::reference"))
  .AddTypedef(type_211, Reflex::Literal("edm::RefVector<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >::key_type"))
  .AddTypedef(type_3106, Reflex::Literal("edm::RefVector<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >::KeyVec"))
  .AddTypedef(type_3455, Reflex::Literal("edm::RefVector<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >::size_type"))
  .AddTypedef(type_4392, Reflex::Literal("edm::RefVector<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >::contents_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~RefVector"), destructor_28149, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::DESTRUCTOR )
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("RefVector"), constructor_28150, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_48125), Reflex::Literal("RefVector"), constructor_28151, 0, "rh", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_25503), Reflex::Literal("RefVector"), constructor_28152, 0, "iId", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_5348, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__RefVector_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__RefVector_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s__funcmem_bld);
}

//------Delayed data member builder for class RefVector<std::vector<reco::FFTAnyJet<reco::BasicJet>, std::allocator<reco::FFTAnyJet<reco::BasicJet> > >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet>, std::allocator<reco::FFTAnyJet<reco::BasicJet> > >, reco::FFTAnyJet<reco::BasicJet> > > -------------------
void __edm__RefVector_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_4392, Reflex::Literal("refVector_"), OffsetOf(__shadow__::__edm__RefVector_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s_, refVector_), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class RefVector<std::vector<reco::FFTAnyJet<reco::BasicJet>, std::allocator<reco::FFTAnyJet<reco::BasicJet> > >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet>, std::allocator<reco::FFTAnyJet<reco::BasicJet> > >, reco::FFTAnyJet<reco::BasicJet> > > -------------------
void __edm__RefVector_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_47519), Reflex::Literal("push_back"), method_28153, 0, "ref", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_5815c, type_3455), Reflex::Literal("operator[]"), operator_28154, 0, "idx", ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_5815c, type_3455), Reflex::Literal("at"), method_28155, 0, "idx", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_25622), Reflex::Literal("refVector"), method_28156, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("empty"), method_28157, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3455), Reflex::Literal("size"), method_28158, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3455), Reflex::Literal("capacity"), method_28159, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_3455), Reflex::Literal("reserve"), method_28160, 0, "n", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_5251), Reflex::Literal("begin"), method_28161, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_5251), Reflex::Literal("end"), method_28162, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_5905), Reflex::Literal("id"), method_28163, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_25623), Reflex::Literal("productGetter"), method_28164, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("isNull"), method_28165, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("isNonnull"), method_28166, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("operator!"), operator_28167, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_48126), Reflex::Literal("product"), method_28168, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("isAvailable"), method_28169, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("isTransient"), method_28170, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_5251, type_48127), Reflex::Literal("erase"), method_28171, 0, "pos", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708), Reflex::Literal("clear"), method_28172, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_48128), Reflex::Literal("swap"), method_28173, 0, "other", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_48128, type_48125), Reflex::Literal("operator="), operator_28174, 0, "rhs", ::Reflex::PUBLIC | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("hasProductCache"), method_28175, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_25503, type_25627, type_25628), Reflex::Literal("fillView"), method_28176, 0, ";pointers;helpers", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_484), Reflex::Literal("Class_Version"), method_28177, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC);
}
//------Stub functions for class FwdPtr<reco::FFTAnyJet<reco::PFJet> > -------------------------------
static  void operator_27873( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> >*)o)->operator=)(*(const ::edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> >*)arg[0]);
  else   (((::edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> >*)o)->operator=)(*(const ::edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> >*)arg[0]);
}

static void constructor_27874( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> >(*(const ::edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> >*)arg[0]);
  else ::new(mem) ::edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> >(*(const ::edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> >*)arg[0]);
}

static void constructor_27875( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> >();
  else ::new(mem) ::edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> >();
}

static void destructor_27876(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> >*)o)->::edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> >::~FwdPtr)();
}
static  void operator_27877( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> >*)o)->operator*)();
  else   (((const ::edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> >*)o)->operator*)();
}

static  void operator_27878( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> >*)o)->operator->)());
  else   (((const ::edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> >*)o)->operator->)();
}

static  void method_27879( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> >*)o)->get)());
  else   (((const ::edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> >*)o)->get)();
}

static  void method_27880( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> >*)o)->isNull)());
  else   (((const ::edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> >*)o)->isNull)();
}

static  void method_27881( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> >*)o)->isNonnull)());
  else   (((const ::edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> >*)o)->isNonnull)();
}

static  void operator_27882( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> >*)o)->operator!)());
  else   (((const ::edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> >*)o)->operator!)();
}

static  void method_27883( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> >*)o)->isAvailable)());
  else   (((const ::edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> >*)o)->isAvailable)();
}

static  void method_27884( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> >*)o)->isTransient)());
  else   (((const ::edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> >*)o)->isTransient)();
}

static  void method_27885( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::ProductID)((((const ::edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> >*)o)->id)());
  else   (((const ::edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> >*)o)->id)();
}

static  void method_27886( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> >*)o)->productGetter)());
  else   (((const ::edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> >*)o)->productGetter)();
}

static  void method_27887( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (unsigned long)((((const ::edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> >*)o)->key)());
  else   (((const ::edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> >*)o)->key)();
}

static  void method_27888( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> >*)o)->hasProductCache)());
  else   (((const ::edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> >*)o)->hasProductCache)();
}

static  void method_27889( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> >*)o)->refCore)();
  else   (((const ::edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> >*)o)->refCore)();
}

static  void method_27890( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> >*)o)->product)());
  else   (((const ::edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> >*)o)->product)();
}

static  void method_27891( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> >*)o)->ptr)();
  else   (((const ::edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> >*)o)->ptr)();
}

static  void method_27892( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> >*)o)->backPtr)();
  else   (((const ::edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> >*)o)->backPtr)();
}

static  void method_27893( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (short)((((::edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> >*)o)->Class_Version)());
  else   (((::edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> >*)o)->Class_Version)();
}

static void method_newdel_5307( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class FwdPtr<reco::FFTAnyJet<reco::PFJet> > -------------------------------
void __edm__FwdPtr_reco__FFTAnyJet_reco__PFJet_s__db_datamem(Reflex::Class*);
void __edm__FwdPtr_reco__FFTAnyJet_reco__PFJet_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__FwdPtr_reco__FFTAnyJet_reco__PFJet_s__datamem_bld(&__edm__FwdPtr_reco__FFTAnyJet_reco__PFJet_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__FwdPtr_reco__FFTAnyJet_reco__PFJet_s__funcmem_bld(&__edm__FwdPtr_reco__FFTAnyJet_reco__PFJet_s__db_funcmem);
void __edm__FwdPtr_reco__FFTAnyJet_reco__PFJet_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> >"), typeid(::edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> >), sizeof(::edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("ClassVersion"), ::edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> >::Class_Version())
  .AddTypedef(type_53, Reflex::Literal("edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> >::key_type"))
  .AddTypedef(type_8933, Reflex::Literal("edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> >::value_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_16682, type_16684), Reflex::Literal("operator="), operator_27873, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_16684), Reflex::Literal("FwdPtr"), constructor_27874, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("FwdPtr"), constructor_27875, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~FwdPtr"), destructor_27876, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_5307, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__FwdPtr_reco__FFTAnyJet_reco__PFJet_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__FwdPtr_reco__FFTAnyJet_reco__PFJet_s__funcmem_bld);
}

//------Delayed data member builder for class FwdPtr<reco::FFTAnyJet<reco::PFJet> > -------------------
void __edm__FwdPtr_reco__FFTAnyJet_reco__PFJet_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_5781, Reflex::Literal("ptr_"), OffsetOf(__shadow__::__edm__FwdPtr_reco__FFTAnyJet_reco__PFJet_s_, ptr_), ::Reflex::PRIVATE)
  .AddDataMember(type_5781, Reflex::Literal("backPtr_"), OffsetOf(__shadow__::__edm__FwdPtr_reco__FFTAnyJet_reco__PFJet_s_, backPtr_), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class FwdPtr<reco::FFTAnyJet<reco::PFJet> > -------------------
void __edm__FwdPtr_reco__FFTAnyJet_reco__PFJet_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_16814), Reflex::Literal("operator*"), operator_27877, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_16810), Reflex::Literal("operator->"), operator_27878, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_16810), Reflex::Literal("get"), method_27879, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("isNull"), method_27880, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("isNonnull"), method_27881, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("operator!"), operator_27882, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("isAvailable"), method_27883, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("isTransient"), method_27884, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_5905), Reflex::Literal("id"), method_27885, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_25623), Reflex::Literal("productGetter"), method_27886, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_53), Reflex::Literal("key"), method_27887, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("hasProductCache"), method_27888, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_29672), Reflex::Literal("refCore"), method_27889, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4427), Reflex::Literal("product"), method_27890, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_48075), Reflex::Literal("ptr"), method_27891, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_48075), Reflex::Literal("backPtr"), method_27892, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_484), Reflex::Literal("Class_Version"), method_27893, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC);
}
//------Stub functions for class vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> >,std::allocator<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > > > -------------------------------
static void constructor_16693( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > >();
  else ::new(mem) ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > >();
}

static void constructor_16694( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > >(*(const ::std::allocator<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > >*)arg[0]);
  else ::new(mem) ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > >(*(const ::std::allocator<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > >*)arg[0]);
}

static void constructor_16695( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if ( arg.size() == 1 ) {
    if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > >(*(::std::size_t*)arg[0]);
  else ::new(mem) ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > >(*(::std::size_t*)arg[0]);
  }
  else if ( arg.size() == 2 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > >(*(::std::size_t*)arg[0],
      *(const ::edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> >*)arg[1]);
  else ::new(mem) ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > >(*(::std::size_t*)arg[0],
      *(const ::edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> >*)arg[1]);
  }
  else if ( arg.size() == 3 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > >(*(::std::size_t*)arg[0],
      *(const ::edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> >*)arg[1],
      *(const ::std::allocator<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > >*)arg[2]);
  else ::new(mem) ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > >(*(::std::size_t*)arg[0],
      *(const ::edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> >*)arg[1],
      *(const ::std::allocator<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > >*)arg[2]);
  }
}

static void constructor_16696( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > >(*(const ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > >*)arg[0]);
  else ::new(mem) ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > >(*(const ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > >*)arg[0]);
}

static void destructor_16697(void*, void * o, const std::vector<void*>&, void *) {
(((::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > >*)o)->::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > >::~vector)();
}
static  void operator_16698( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > >*)o)->operator=)(*(const ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > >*)arg[0]);
  else   (((::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > >*)o)->operator=)(*(const ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > >*)arg[0]);
}

static  void method_16699( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > >*)o)->assign)(*(::std::size_t*)arg[0],
    *(const ::edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> >*)arg[1]);
}

static  void method_16700( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> >*,std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > > >)((((::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > >*)o)->begin)());
  else   (((::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > >*)o)->begin)();
}

static  void method_16701( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<const edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> >*,std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > > >)((((const ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > >*)o)->begin)());
  else   (((const ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > >*)o)->begin)();
}

static  void method_16702( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> >*,std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > > >)((((::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > >*)o)->end)());
  else   (((::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > >*)o)->end)();
}

static  void method_16703( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<const edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> >*,std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > > >)((((const ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > >*)o)->end)());
  else   (((const ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > >*)o)->end)();
}

static  void method_16708( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > >*)o)->size)());
  else   (((const ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > >*)o)->size)();
}

static  void method_16709( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > >*)o)->max_size)());
  else   (((const ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > >*)o)->max_size)();
}

static  void method_16710( void*, void* o, const std::vector<void*>& arg, void*)
{
  if ( arg.size() == 1 ) {
    (((::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > >*)o)->resize)(*(::std::size_t*)arg[0]);
  }
  else if ( arg.size() == 2 ) { 
    (((::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > >*)o)->resize)(*(::std::size_t*)arg[0],
      *(::edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> >*)arg[1]);
  }
}

static  void method_16711( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > >*)o)->capacity)());
  else   (((const ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > >*)o)->capacity)();
}

static  void method_16712( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > >*)o)->empty)());
  else   (((const ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > >*)o)->empty)();
}

static  void method_16713( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > >*)o)->reserve)(*(::std::size_t*)arg[0]);
}

static  void operator_16714( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > >*)o)->operator[])(*(::std::size_t*)arg[0]);
  else   (((::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > >*)o)->operator[])(*(::std::size_t*)arg[0]);
}

static  void operator_16715( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > >*)o)->operator[])(*(::std::size_t*)arg[0]);
  else   (((const ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > >*)o)->operator[])(*(::std::size_t*)arg[0]);
}

static  void method_16717( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > >*)o)->at)(*(::std::size_t*)arg[0]);
  else   (((::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > >*)o)->at)(*(::std::size_t*)arg[0]);
}

static  void method_16718( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > >*)o)->at)(*(::std::size_t*)arg[0]);
  else   (((const ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > >*)o)->at)(*(::std::size_t*)arg[0]);
}

static  void method_16719( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > >*)o)->front)();
  else   (((::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > >*)o)->front)();
}

static  void method_16720( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > >*)o)->front)();
  else   (((const ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > >*)o)->front)();
}

static  void method_16721( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > >*)o)->back)();
  else   (((::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > >*)o)->back)();
}

static  void method_16722( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > >*)o)->back)();
  else   (((const ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > >*)o)->back)();
}

static  void method_16723( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > >*)o)->data)());
  else   (((::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > >*)o)->data)();
}

static  void method_16724( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > >*)o)->data)());
  else   (((const ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > >*)o)->data)();
}

static  void method_16725( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > >*)o)->push_back)(*(const ::edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> >*)arg[0]);
}

static  void method_16726( void*, void* o, const std::vector<void*>&, void*)
{
  (((::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > >*)o)->pop_back)();
}

static  void method_16727( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> >*,std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > > >)((((::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > >*)o)->insert)(*(::__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> >*,std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > > >*)arg[0],
    *(const ::edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> >*)arg[1]));
  else   (((::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > >*)o)->insert)(*(::__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> >*,std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > > >*)arg[0],
    *(const ::edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> >*)arg[1]);
}

static  void method_16728( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > >*)o)->insert)(*(::__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> >*,std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > > >*)arg[0],
    *(::std::size_t*)arg[1],
    *(const ::edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> >*)arg[2]);
}

static  void method_16729( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> >*,std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > > >)((((::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > >*)o)->erase)(*(::__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> >*,std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > > >*)arg[0]));
  else   (((::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > >*)o)->erase)(*(::__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> >*,std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > > >*)arg[0]);
}

static  void method_16730( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> >*,std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > > >)((((::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > >*)o)->erase)(*(::__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> >*,std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > > >*)arg[0],
    *(::__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> >*,std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > > >*)arg[1]));
  else   (((::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > >*)o)->erase)(*(::__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> >*,std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > > >*)arg[0],
    *(::__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> >*,std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > > >*)arg[1]);
}

static  void method_16731( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > >*)o)->swap)(*(::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > >*)arg[0]);
}

static  void method_16732( void*, void* o, const std::vector<void*>&, void*)
{
  (((::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > >*)o)->clear)();
}

static void method_newdel_3127( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

static void method_x29( void* retaddr, void*, const std::vector<void*>&, void*)
{
  typedef std::vector<std::pair< ::Reflex::Base, int> > Bases_t;
  static Bases_t s_bases;
  if ( !s_bases.size() ) {
    s_bases.push_back(std::make_pair(::Reflex::Base( ::Reflex::TypeBuilder(Reflex::Literal("std::_Vector_base<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> >,std::allocator<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > > >")), ::Reflex::BaseOffset< ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > >,::std::_Vector_base<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> >,std::allocator<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > > > >::Get(),::Reflex::PROTECTED), 0));
  }
  if (retaddr) *(Bases_t**)retaddr = &s_bases;
}

static void method_x30( void* retaddr, void*, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**) retaddr = ::Reflex::Proxy< ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > > >::Generate();
  else ::Reflex::Proxy< ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > > >::Generate();
}

//------Dictionary for class vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> >,std::allocator<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > > > -------------------------------
void __std__vector_edm__FwdPtr_reco__FFTAnyJet_reco__PFJet_s_s__db_datamem(Reflex::Class*);
void __std__vector_edm__FwdPtr_reco__FFTAnyJet_reco__PFJet_s_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __std__vector_edm__FwdPtr_reco__FFTAnyJet_reco__PFJet_s_s__datamem_bld(&__std__vector_edm__FwdPtr_reco__FFTAnyJet_reco__PFJet_s_s__db_datamem);
Reflex::GenreflexMemberBuilder __std__vector_edm__FwdPtr_reco__FFTAnyJet_reco__PFJet_s_s__funcmem_bld(&__std__vector_edm__FwdPtr_reco__FFTAnyJet_reco__PFJet_s_s__db_funcmem);
void __std__vector_edm__FwdPtr_reco__FFTAnyJet_reco__PFJet_s_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > >"), typeid(::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > >), sizeof(::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddBase(type_2545, ::Reflex::BaseOffset< ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > >, ::std::_Vector_base<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> >,std::allocator<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > > > >::Get(), ::Reflex::PROTECTED)
  .AddTypedef(type_5307, Reflex::Literal("std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > >::_Alloc_value_type"))
  .AddTypedef(type_2545, Reflex::Literal("std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > >::_Base"))
  .AddTypedef(type_3505, Reflex::Literal("std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > >::_Tp_alloc_type"))
  .AddTypedef(type_9700, Reflex::Literal("std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > >::_Alloc_traits"))
  .AddTypedef(type_5307, Reflex::Literal("std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > >::value_type"))
  .AddTypedef(type_11109, Reflex::Literal("std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > >::pointer"))
  .AddTypedef(type_16680, Reflex::Literal("std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > >::const_pointer"))
  .AddTypedef(type_16682, Reflex::Literal("std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > >::reference"))
  .AddTypedef(type_16684, Reflex::Literal("std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > >::const_reference"))
  .AddTypedef(type_9500, Reflex::Literal("std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > >::iterator"))
  .AddTypedef(type_9501, Reflex::Literal("std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > >::const_iterator"))
  .AddTypedef(type_3804, Reflex::Literal("std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > >::const_reverse_iterator"))
  .AddTypedef(type_3805, Reflex::Literal("std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > >::reverse_iterator"))
  .AddTypedef(type_3455, Reflex::Literal("std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > >::size_type"))
  .AddTypedef(type_3318, Reflex::Literal("std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > >::difference_type"))
  .AddTypedef(type_3505, Reflex::Literal("std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > >::allocator_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("vector"), constructor_16693, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_42464), Reflex::Literal("vector"), constructor_16694, 0, "__a", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_3455, type_16684, type_42464), Reflex::Literal("vector"), constructor_16695, 0, "__n;__value=_Tp();__a=_Alloc()", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_44165), Reflex::Literal("vector"), constructor_16696, 0, "__x", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~vector"), destructor_16697, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_3127, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getBasesTable"), method_x29, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddFunctionMember<void*(void)>(Reflex::Literal("createCollFuncTable"), method_x30, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandFunctionMemberBuilder(&__std__vector_edm__FwdPtr_reco__FFTAnyJet_reco__PFJet_s_s__funcmem_bld);
}

//------Delayed data member builder for class vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> >,std::allocator<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > > > -------------------
void __std__vector_edm__FwdPtr_reco__FFTAnyJet_reco__PFJet_s_s__db_datamem(Reflex::Class*) {

}
//------Delayed function member builder for class vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> >,std::allocator<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > > > -------------------
void __std__vector_edm__FwdPtr_reco__FFTAnyJet_reco__PFJet_s_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_44166, type_44165), Reflex::Literal("operator="), operator_16698, 0, "__x", ::Reflex::PUBLIC | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_3455, type_16684), Reflex::Literal("assign"), method_16699, 0, "__n;__val", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_9500), Reflex::Literal("begin"), method_16700, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_9501), Reflex::Literal("begin"), method_16701, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_9500), Reflex::Literal("end"), method_16702, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_9501), Reflex::Literal("end"), method_16703, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3455), Reflex::Literal("size"), method_16708, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3455), Reflex::Literal("max_size"), method_16709, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_3455, type_5307), Reflex::Literal("resize"), method_16710, 0, "__new_size;__x=_Tp()", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3455), Reflex::Literal("capacity"), method_16711, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("empty"), method_16712, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_3455), Reflex::Literal("reserve"), method_16713, 0, "__n", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_16682, type_3455), Reflex::Literal("operator[]"), operator_16714, 0, "__n", ::Reflex::PUBLIC | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_16684, type_3455), Reflex::Literal("operator[]"), operator_16715, 0, "__n", ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_16682, type_3455), Reflex::Literal("at"), method_16717, 0, "__n", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_16684, type_3455), Reflex::Literal("at"), method_16718, 0, "__n", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_16682), Reflex::Literal("front"), method_16719, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_16684), Reflex::Literal("front"), method_16720, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_16682), Reflex::Literal("back"), method_16721, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_16684), Reflex::Literal("back"), method_16722, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_11109), Reflex::Literal("data"), method_16723, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_16680), Reflex::Literal("data"), method_16724, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_16684), Reflex::Literal("push_back"), method_16725, 0, "__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708), Reflex::Literal("pop_back"), method_16726, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_9500, type_9500, type_16684), Reflex::Literal("insert"), method_16727, 0, "__position;__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_9500, type_3455, type_16684), Reflex::Literal("insert"), method_16728, 0, "__position;__n;__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_9500, type_9500), Reflex::Literal("erase"), method_16729, 0, "__position", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_9500, type_9500, type_9500), Reflex::Literal("erase"), method_16730, 0, "__first;__last", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_44166), Reflex::Literal("swap"), method_16731, 0, "__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708), Reflex::Literal("clear"), method_16732, 0, 0, ::Reflex::PUBLIC);
}
//------Stub functions for class RefVector<std::vector<reco::FFTAnyJet<reco::PFJet>, std::allocator<reco::FFTAnyJet<reco::PFJet> > >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet>, std::allocator<reco::FFTAnyJet<reco::PFJet> > >, reco::FFTAnyJet<reco::PFJet> > > -------------------------------
static void destructor_28107(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::RefVector<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)o)->::edm::RefVector<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >::~RefVector)();
}
static void constructor_28108( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >();
  else ::new(mem) ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >();
}

static void constructor_28109( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >(*(const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)arg[0]);
  else ::new(mem) ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >(*(const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)arg[0]);
}

static void constructor_28110( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >(*(const ::edm::ProductID*)arg[0]);
  else ::new(mem) ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >(*(const ::edm::ProductID*)arg[0]);
}

static  void method_28111( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::edm::RefVector<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)o)->push_back)(*(const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)arg[0]);
}

static  void operator_28112( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >)((((const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)o)->operator[])(*(::std::size_t*)arg[0]));
  else   (((const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)o)->operator[])(*(::std::size_t*)arg[0]);
}

static  void method_28113( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >)((((const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)o)->at)(*(::std::size_t*)arg[0]));
  else   (((const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)o)->at)(*(::std::size_t*)arg[0]);
}

static  void method_28114( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)o)->refVector)();
  else   (((const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)o)->refVector)();
}

static  void method_28115( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)o)->empty)());
  else   (((const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)o)->empty)();
}

static  void method_28116( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)o)->size)());
  else   (((const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)o)->size)();
}

static  void method_28117( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)o)->capacity)());
  else   (((const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)o)->capacity)();
}

static  void method_28118( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::edm::RefVector<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)o)->reserve)(*(::std::size_t*)arg[0]);
}

static  void method_28119( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::RefVectorIterator<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >)((((const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)o)->begin)());
  else   (((const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)o)->begin)();
}

static  void method_28120( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::RefVectorIterator<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >)((((const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)o)->end)());
  else   (((const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)o)->end)();
}

static  void method_28121( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::ProductID)((((const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)o)->id)());
  else   (((const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)o)->id)();
}

static  void method_28122( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)o)->productGetter)());
  else   (((const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)o)->productGetter)();
}

static  void method_28123( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)o)->isNull)());
  else   (((const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)o)->isNull)();
}

static  void method_28124( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)o)->isNonnull)());
  else   (((const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)o)->isNonnull)();
}

static  void operator_28125( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)o)->operator!)());
  else   (((const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)o)->operator!)();
}

static  void method_28126( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)o)->product)());
  else   (((const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)o)->product)();
}

static  void method_28127( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)o)->isAvailable)());
  else   (((const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)o)->isAvailable)();
}

static  void method_28128( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)o)->isTransient)());
  else   (((const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)o)->isTransient)();
}

static  void method_28129( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (edm::RefVectorIterator<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >)((((::edm::RefVector<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)o)->erase)(*(const ::edm::RefVectorIterator<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)arg[0]));
  else   (((::edm::RefVector<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)o)->erase)(*(const ::edm::RefVectorIterator<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)arg[0]);
}

static  void method_28130( void*, void* o, const std::vector<void*>&, void*)
{
  (((::edm::RefVector<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)o)->clear)();
}

static  void method_28131( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::edm::RefVector<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)o)->swap)(*(::edm::RefVector<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)arg[0]);
}

static  void operator_28132( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::RefVector<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)o)->operator=)(*(const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)arg[0]);
  else   (((::edm::RefVector<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)o)->operator=)(*(const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)arg[0]);
}

static  void method_28133( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)o)->hasProductCache)());
  else   (((const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)o)->hasProductCache)();
}

static  void method_28134( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)o)->fillView)(*(const ::edm::ProductID*)arg[0],
    *(::std::vector<const void*>*)arg[1],
    *(::edm::helper_vector*)arg[2]);
}

static  void method_28135( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (short)((((::edm::RefVector<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)o)->Class_Version)());
  else   (((::edm::RefVector<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)o)->Class_Version)();
}

static void method_newdel_5343( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class RefVector<std::vector<reco::FFTAnyJet<reco::PFJet>, std::allocator<reco::FFTAnyJet<reco::PFJet> > >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet>, std::allocator<reco::FFTAnyJet<reco::PFJet> > >, reco::FFTAnyJet<reco::PFJet> > > -------------------------------
void __edm__RefVector_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s__db_datamem(Reflex::Class*);
void __edm__RefVector_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__RefVector_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s__datamem_bld(&__edm__RefVector_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__RefVector_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s__funcmem_bld(&__edm__RefVector_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s__db_funcmem);
void __edm__RefVector_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::RefVector<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >"), typeid(::edm::RefVector<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >), sizeof(::edm::RefVector<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("ClassVersion"), ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >::Class_Version())
  .AddTypedef(type_3129, Reflex::Literal("edm::RefVector<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >::collection_type"))
  .AddTypedef(type_8933, Reflex::Literal("edm::RefVector<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >::member_type"))
  .AddTypedef(type_25848, Reflex::Literal("edm::RefVector<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >::finder_type"))
  .AddTypedef(type_5250, Reflex::Literal("edm::RefVector<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >::iterator"))
  .AddTypedef(type_5250, Reflex::Literal("edm::RefVector<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >::const_iterator"))
  .AddTypedef(type_5814, Reflex::Literal("edm::RefVector<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >::value_type"))
  .AddTypedef(type_5814c, Reflex::Literal("edm::RefVector<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >::const_reference"))
  .AddTypedef(type_5814c, Reflex::Literal("edm::RefVector<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >::reference"))
  .AddTypedef(type_211, Reflex::Literal("edm::RefVector<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >::key_type"))
  .AddTypedef(type_3106, Reflex::Literal("edm::RefVector<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >::KeyVec"))
  .AddTypedef(type_3455, Reflex::Literal("edm::RefVector<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >::size_type"))
  .AddTypedef(type_4392, Reflex::Literal("edm::RefVector<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >::contents_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~RefVector"), destructor_28107, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::DESTRUCTOR )
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("RefVector"), constructor_28108, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_48120), Reflex::Literal("RefVector"), constructor_28109, 0, "rh", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_25503), Reflex::Literal("RefVector"), constructor_28110, 0, "iId", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_5343, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__RefVector_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__RefVector_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s__funcmem_bld);
}

//------Delayed data member builder for class RefVector<std::vector<reco::FFTAnyJet<reco::PFJet>, std::allocator<reco::FFTAnyJet<reco::PFJet> > >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet>, std::allocator<reco::FFTAnyJet<reco::PFJet> > >, reco::FFTAnyJet<reco::PFJet> > > -------------------
void __edm__RefVector_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_4392, Reflex::Literal("refVector_"), OffsetOf(__shadow__::__edm__RefVector_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s_, refVector_), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class RefVector<std::vector<reco::FFTAnyJet<reco::PFJet>, std::allocator<reco::FFTAnyJet<reco::PFJet> > >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet>, std::allocator<reco::FFTAnyJet<reco::PFJet> > >, reco::FFTAnyJet<reco::PFJet> > > -------------------
void __edm__RefVector_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_47505), Reflex::Literal("push_back"), method_28111, 0, "ref", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_5814c, type_3455), Reflex::Literal("operator[]"), operator_28112, 0, "idx", ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_5814c, type_3455), Reflex::Literal("at"), method_28113, 0, "idx", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_25622), Reflex::Literal("refVector"), method_28114, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("empty"), method_28115, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3455), Reflex::Literal("size"), method_28116, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3455), Reflex::Literal("capacity"), method_28117, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_3455), Reflex::Literal("reserve"), method_28118, 0, "n", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_5250), Reflex::Literal("begin"), method_28119, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_5250), Reflex::Literal("end"), method_28120, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_5905), Reflex::Literal("id"), method_28121, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_25623), Reflex::Literal("productGetter"), method_28122, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("isNull"), method_28123, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("isNonnull"), method_28124, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("operator!"), operator_28125, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_48121), Reflex::Literal("product"), method_28126, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("isAvailable"), method_28127, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("isTransient"), method_28128, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_5250, type_48122), Reflex::Literal("erase"), method_28129, 0, "pos", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708), Reflex::Literal("clear"), method_28130, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_48123), Reflex::Literal("swap"), method_28131, 0, "other", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_48123, type_48120), Reflex::Literal("operator="), operator_28132, 0, "rhs", ::Reflex::PUBLIC | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("hasProductCache"), method_28133, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_25503, type_25627, type_25628), Reflex::Literal("fillView"), method_28134, 0, ";pointers;helpers", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_484), Reflex::Literal("Class_Version"), method_28135, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC);
}
//------Stub functions for class FFTAnyJet<reco::JPTJet> -------------------------------
static  void operator_34108( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::reco::FFTAnyJet<reco::JPTJet>*)o)->operator=)(*(const ::reco::FFTAnyJet<reco::JPTJet>*)arg[0]);
  else   (((::reco::FFTAnyJet<reco::JPTJet>*)o)->operator=)(*(const ::reco::FFTAnyJet<reco::JPTJet>*)arg[0]);
}

static void constructor_34109( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::reco::FFTAnyJet<reco::JPTJet>(*(const ::reco::FFTAnyJet<reco::JPTJet>*)arg[0]);
  else ::new(mem) ::reco::FFTAnyJet<reco::JPTJet>(*(const ::reco::FFTAnyJet<reco::JPTJet>*)arg[0]);
}

static void constructor_34110( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::reco::FFTAnyJet<reco::JPTJet>();
  else ::new(mem) ::reco::FFTAnyJet<reco::JPTJet>();
}

static void destructor_34111(void*, void * o, const std::vector<void*>&, void *) {
(((::reco::FFTAnyJet<reco::JPTJet>*)o)->::reco::FFTAnyJet<reco::JPTJet>::~FFTAnyJet)();
}
static void constructor_34112( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::reco::FFTAnyJet<reco::JPTJet>(*(const ::reco::JPTJet*)arg[0],
      *(const ::reco::FFTJet<float>*)arg[1]);
  else ::new(mem) ::reco::FFTAnyJet<reco::JPTJet>(*(const ::reco::JPTJet*)arg[0],
      *(const ::reco::FFTJet<float>*)arg[1]);
}

static  void method_34113( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::reco::FFTAnyJet<reco::JPTJet>*)o)->clone)());
  else   (((const ::reco::FFTAnyJet<reco::JPTJet>*)o)->clone)();
}

static  void method_34114( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::reco::FFTAnyJet<reco::JPTJet>*)o)->getFFTSpecific)();
  else   (((const ::reco::FFTAnyJet<reco::JPTJet>*)o)->getFFTSpecific)();
}

static void method_newdel_8931( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::reco::FFTAnyJet<reco::JPTJet> >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::reco::FFTAnyJet<reco::JPTJet> >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::reco::FFTAnyJet<reco::JPTJet> >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::reco::FFTAnyJet<reco::JPTJet> >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::reco::FFTAnyJet<reco::JPTJet> >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

static void method_x33( void* retaddr, void*, const std::vector<void*>&, void*)
{
  typedef std::vector<std::pair< ::Reflex::Base, int> > Bases_t;
  static Bases_t s_bases;
  if ( !s_bases.size() ) {
    s_bases.push_back(std::make_pair(::Reflex::Base( ::Reflex::TypeBuilder(Reflex::Literal("reco::JPTJet")), ::Reflex::BaseOffset< ::reco::FFTAnyJet<reco::JPTJet>,::reco::JPTJet >::Get(),::Reflex::PUBLIC), 0));
    s_bases.push_back(std::make_pair(::Reflex::Base( ::Reflex::TypeBuilder(Reflex::Literal("reco::Jet")), ::Reflex::BaseOffset< ::reco::FFTAnyJet<reco::JPTJet>,::reco::Jet >::Get(),::Reflex::PUBLIC), 1));
    s_bases.push_back(std::make_pair(::Reflex::Base( ::Reflex::TypeBuilder(Reflex::Literal("reco::CompositePtrCandidate")), ::Reflex::BaseOffset< ::reco::FFTAnyJet<reco::JPTJet>,::reco::CompositePtrCandidate >::Get(),::Reflex::PUBLIC), 2));
    s_bases.push_back(std::make_pair(::Reflex::Base( ::Reflex::TypeBuilder(Reflex::Literal("reco::LeafCandidate")), ::Reflex::BaseOffset< ::reco::FFTAnyJet<reco::JPTJet>,::reco::LeafCandidate >::Get(),::Reflex::PUBLIC), 3));
    s_bases.push_back(std::make_pair(::Reflex::Base( ::Reflex::TypeBuilder(Reflex::Literal("reco::Candidate")), ::Reflex::BaseOffset< ::reco::FFTAnyJet<reco::JPTJet>,::reco::Candidate >::Get(),::Reflex::PUBLIC), 4));
  }
  if (retaddr) *(Bases_t**)retaddr = &s_bases;
}

//------Dictionary for class FFTAnyJet<reco::JPTJet> -------------------------------
void __reco__FFTAnyJet_reco__JPTJet__db_datamem(Reflex::Class*);
void __reco__FFTAnyJet_reco__JPTJet__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __reco__FFTAnyJet_reco__JPTJet__datamem_bld(&__reco__FFTAnyJet_reco__JPTJet__db_datamem);
Reflex::GenreflexMemberBuilder __reco__FFTAnyJet_reco__JPTJet__funcmem_bld(&__reco__FFTAnyJet_reco__JPTJet__db_funcmem);
void __reco__FFTAnyJet_reco__JPTJet__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("reco::FFTAnyJet<reco::JPTJet>"), typeid(::reco::FFTAnyJet<reco::JPTJet>), sizeof(::reco::FFTAnyJet<reco::JPTJet>), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::VIRTUAL, ::Reflex::CLASS)
  .AddBase(type_9048, ::Reflex::BaseOffset< ::reco::FFTAnyJet<reco::JPTJet>, ::reco::JPTJet >::Get(), ::Reflex::PUBLIC)
  .AddTypedef(type_9048, Reflex::Literal("reco::FFTAnyJet<reco::JPTJet>::Base"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_16422, type_16424), Reflex::Literal("operator="), operator_34108, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_16424), Reflex::Literal("FFTAnyJet"), constructor_34109, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("FFTAnyJet"), constructor_34110, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~FFTAnyJet"), destructor_34111, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::DESTRUCTOR )
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_20491, type_49965), Reflex::Literal("FFTAnyJet"), constructor_34112, 0, "jet;fftjet", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_8931, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getBasesTable"), method_x33, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__reco__FFTAnyJet_reco__JPTJet__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__reco__FFTAnyJet_reco__JPTJet__funcmem_bld);
}

//------Delayed data member builder for class FFTAnyJet<reco::JPTJet> -------------------
void __reco__FFTAnyJet_reco__JPTJet__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_9026, Reflex::Literal("fftJetSpecific_"), OffsetOf(__shadow__::__reco__FFTAnyJet_reco__JPTJet_, fftJetSpecific_), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class FFTAnyJet<reco::JPTJet> -------------------
void __reco__FFTAnyJet_reco__JPTJet__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_11716), Reflex::Literal("clone"), method_34113, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_49965), Reflex::Literal("getFFTSpecific"), method_34114, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST);
}
//------Stub functions for class vector<reco::FFTAnyJet<reco::JPTJet>,std::allocator<reco::FFTAnyJet<reco::JPTJet> > > -------------------------------
static void constructor_16433( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<reco::FFTAnyJet<reco::JPTJet> >();
  else ::new(mem) ::std::vector<reco::FFTAnyJet<reco::JPTJet> >();
}

static void constructor_16434( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<reco::FFTAnyJet<reco::JPTJet> >(*(const ::std::allocator<reco::FFTAnyJet<reco::JPTJet> >*)arg[0]);
  else ::new(mem) ::std::vector<reco::FFTAnyJet<reco::JPTJet> >(*(const ::std::allocator<reco::FFTAnyJet<reco::JPTJet> >*)arg[0]);
}

static void constructor_16435( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if ( arg.size() == 1 ) {
    if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<reco::FFTAnyJet<reco::JPTJet> >(*(::std::size_t*)arg[0]);
  else ::new(mem) ::std::vector<reco::FFTAnyJet<reco::JPTJet> >(*(::std::size_t*)arg[0]);
  }
  else if ( arg.size() == 2 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<reco::FFTAnyJet<reco::JPTJet> >(*(::std::size_t*)arg[0],
      *(const ::reco::FFTAnyJet<reco::JPTJet>*)arg[1]);
  else ::new(mem) ::std::vector<reco::FFTAnyJet<reco::JPTJet> >(*(::std::size_t*)arg[0],
      *(const ::reco::FFTAnyJet<reco::JPTJet>*)arg[1]);
  }
  else if ( arg.size() == 3 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<reco::FFTAnyJet<reco::JPTJet> >(*(::std::size_t*)arg[0],
      *(const ::reco::FFTAnyJet<reco::JPTJet>*)arg[1],
      *(const ::std::allocator<reco::FFTAnyJet<reco::JPTJet> >*)arg[2]);
  else ::new(mem) ::std::vector<reco::FFTAnyJet<reco::JPTJet> >(*(::std::size_t*)arg[0],
      *(const ::reco::FFTAnyJet<reco::JPTJet>*)arg[1],
      *(const ::std::allocator<reco::FFTAnyJet<reco::JPTJet> >*)arg[2]);
  }
}

static void constructor_16436( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<reco::FFTAnyJet<reco::JPTJet> >(*(const ::std::vector<reco::FFTAnyJet<reco::JPTJet> >*)arg[0]);
  else ::new(mem) ::std::vector<reco::FFTAnyJet<reco::JPTJet> >(*(const ::std::vector<reco::FFTAnyJet<reco::JPTJet> >*)arg[0]);
}

static void destructor_16437(void*, void * o, const std::vector<void*>&, void *) {
(((::std::vector<reco::FFTAnyJet<reco::JPTJet> >*)o)->::std::vector<reco::FFTAnyJet<reco::JPTJet> >::~vector)();
}
static  void operator_16438( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<reco::FFTAnyJet<reco::JPTJet> >*)o)->operator=)(*(const ::std::vector<reco::FFTAnyJet<reco::JPTJet> >*)arg[0]);
  else   (((::std::vector<reco::FFTAnyJet<reco::JPTJet> >*)o)->operator=)(*(const ::std::vector<reco::FFTAnyJet<reco::JPTJet> >*)arg[0]);
}

static  void method_16439( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<reco::FFTAnyJet<reco::JPTJet> >*)o)->assign)(*(::std::size_t*)arg[0],
    *(const ::reco::FFTAnyJet<reco::JPTJet>*)arg[1]);
}

static  void method_16440( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<reco::FFTAnyJet<reco::JPTJet>*,std::vector<reco::FFTAnyJet<reco::JPTJet> > >)((((::std::vector<reco::FFTAnyJet<reco::JPTJet> >*)o)->begin)());
  else   (((::std::vector<reco::FFTAnyJet<reco::JPTJet> >*)o)->begin)();
}

static  void method_16441( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<const reco::FFTAnyJet<reco::JPTJet>*,std::vector<reco::FFTAnyJet<reco::JPTJet> > >)((((const ::std::vector<reco::FFTAnyJet<reco::JPTJet> >*)o)->begin)());
  else   (((const ::std::vector<reco::FFTAnyJet<reco::JPTJet> >*)o)->begin)();
}

static  void method_16442( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<reco::FFTAnyJet<reco::JPTJet>*,std::vector<reco::FFTAnyJet<reco::JPTJet> > >)((((::std::vector<reco::FFTAnyJet<reco::JPTJet> >*)o)->end)());
  else   (((::std::vector<reco::FFTAnyJet<reco::JPTJet> >*)o)->end)();
}

static  void method_16443( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<const reco::FFTAnyJet<reco::JPTJet>*,std::vector<reco::FFTAnyJet<reco::JPTJet> > >)((((const ::std::vector<reco::FFTAnyJet<reco::JPTJet> >*)o)->end)());
  else   (((const ::std::vector<reco::FFTAnyJet<reco::JPTJet> >*)o)->end)();
}

static  void method_16448( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::std::vector<reco::FFTAnyJet<reco::JPTJet> >*)o)->size)());
  else   (((const ::std::vector<reco::FFTAnyJet<reco::JPTJet> >*)o)->size)();
}

static  void method_16449( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::std::vector<reco::FFTAnyJet<reco::JPTJet> >*)o)->max_size)());
  else   (((const ::std::vector<reco::FFTAnyJet<reco::JPTJet> >*)o)->max_size)();
}

static  void method_16450( void*, void* o, const std::vector<void*>& arg, void*)
{
  if ( arg.size() == 1 ) {
    (((::std::vector<reco::FFTAnyJet<reco::JPTJet> >*)o)->resize)(*(::std::size_t*)arg[0]);
  }
  else if ( arg.size() == 2 ) { 
    (((::std::vector<reco::FFTAnyJet<reco::JPTJet> >*)o)->resize)(*(::std::size_t*)arg[0],
      *(::reco::FFTAnyJet<reco::JPTJet>*)arg[1]);
  }
}

static  void method_16451( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::std::vector<reco::FFTAnyJet<reco::JPTJet> >*)o)->capacity)());
  else   (((const ::std::vector<reco::FFTAnyJet<reco::JPTJet> >*)o)->capacity)();
}

static  void method_16452( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::std::vector<reco::FFTAnyJet<reco::JPTJet> >*)o)->empty)());
  else   (((const ::std::vector<reco::FFTAnyJet<reco::JPTJet> >*)o)->empty)();
}

static  void method_16453( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<reco::FFTAnyJet<reco::JPTJet> >*)o)->reserve)(*(::std::size_t*)arg[0]);
}

static  void operator_16454( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<reco::FFTAnyJet<reco::JPTJet> >*)o)->operator[])(*(::std::size_t*)arg[0]);
  else   (((::std::vector<reco::FFTAnyJet<reco::JPTJet> >*)o)->operator[])(*(::std::size_t*)arg[0]);
}

static  void operator_16455( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<reco::FFTAnyJet<reco::JPTJet> >*)o)->operator[])(*(::std::size_t*)arg[0]);
  else   (((const ::std::vector<reco::FFTAnyJet<reco::JPTJet> >*)o)->operator[])(*(::std::size_t*)arg[0]);
}

static  void method_16457( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<reco::FFTAnyJet<reco::JPTJet> >*)o)->at)(*(::std::size_t*)arg[0]);
  else   (((::std::vector<reco::FFTAnyJet<reco::JPTJet> >*)o)->at)(*(::std::size_t*)arg[0]);
}

static  void method_16458( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<reco::FFTAnyJet<reco::JPTJet> >*)o)->at)(*(::std::size_t*)arg[0]);
  else   (((const ::std::vector<reco::FFTAnyJet<reco::JPTJet> >*)o)->at)(*(::std::size_t*)arg[0]);
}

static  void method_16459( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<reco::FFTAnyJet<reco::JPTJet> >*)o)->front)();
  else   (((::std::vector<reco::FFTAnyJet<reco::JPTJet> >*)o)->front)();
}

static  void method_16460( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<reco::FFTAnyJet<reco::JPTJet> >*)o)->front)();
  else   (((const ::std::vector<reco::FFTAnyJet<reco::JPTJet> >*)o)->front)();
}

static  void method_16461( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<reco::FFTAnyJet<reco::JPTJet> >*)o)->back)();
  else   (((::std::vector<reco::FFTAnyJet<reco::JPTJet> >*)o)->back)();
}

static  void method_16462( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<reco::FFTAnyJet<reco::JPTJet> >*)o)->back)();
  else   (((const ::std::vector<reco::FFTAnyJet<reco::JPTJet> >*)o)->back)();
}

static  void method_16463( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((::std::vector<reco::FFTAnyJet<reco::JPTJet> >*)o)->data)());
  else   (((::std::vector<reco::FFTAnyJet<reco::JPTJet> >*)o)->data)();
}

static  void method_16464( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::std::vector<reco::FFTAnyJet<reco::JPTJet> >*)o)->data)());
  else   (((const ::std::vector<reco::FFTAnyJet<reco::JPTJet> >*)o)->data)();
}

static  void method_16465( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<reco::FFTAnyJet<reco::JPTJet> >*)o)->push_back)(*(const ::reco::FFTAnyJet<reco::JPTJet>*)arg[0]);
}

static  void method_16466( void*, void* o, const std::vector<void*>&, void*)
{
  (((::std::vector<reco::FFTAnyJet<reco::JPTJet> >*)o)->pop_back)();
}

static  void method_16467( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<reco::FFTAnyJet<reco::JPTJet>*,std::vector<reco::FFTAnyJet<reco::JPTJet> > >)((((::std::vector<reco::FFTAnyJet<reco::JPTJet> >*)o)->insert)(*(::__gnu_cxx::__normal_iterator<reco::FFTAnyJet<reco::JPTJet>*,std::vector<reco::FFTAnyJet<reco::JPTJet> > >*)arg[0],
    *(const ::reco::FFTAnyJet<reco::JPTJet>*)arg[1]));
  else   (((::std::vector<reco::FFTAnyJet<reco::JPTJet> >*)o)->insert)(*(::__gnu_cxx::__normal_iterator<reco::FFTAnyJet<reco::JPTJet>*,std::vector<reco::FFTAnyJet<reco::JPTJet> > >*)arg[0],
    *(const ::reco::FFTAnyJet<reco::JPTJet>*)arg[1]);
}

static  void method_16468( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<reco::FFTAnyJet<reco::JPTJet> >*)o)->insert)(*(::__gnu_cxx::__normal_iterator<reco::FFTAnyJet<reco::JPTJet>*,std::vector<reco::FFTAnyJet<reco::JPTJet> > >*)arg[0],
    *(::std::size_t*)arg[1],
    *(const ::reco::FFTAnyJet<reco::JPTJet>*)arg[2]);
}

static  void method_16469( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<reco::FFTAnyJet<reco::JPTJet>*,std::vector<reco::FFTAnyJet<reco::JPTJet> > >)((((::std::vector<reco::FFTAnyJet<reco::JPTJet> >*)o)->erase)(*(::__gnu_cxx::__normal_iterator<reco::FFTAnyJet<reco::JPTJet>*,std::vector<reco::FFTAnyJet<reco::JPTJet> > >*)arg[0]));
  else   (((::std::vector<reco::FFTAnyJet<reco::JPTJet> >*)o)->erase)(*(::__gnu_cxx::__normal_iterator<reco::FFTAnyJet<reco::JPTJet>*,std::vector<reco::FFTAnyJet<reco::JPTJet> > >*)arg[0]);
}

static  void method_16470( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<reco::FFTAnyJet<reco::JPTJet>*,std::vector<reco::FFTAnyJet<reco::JPTJet> > >)((((::std::vector<reco::FFTAnyJet<reco::JPTJet> >*)o)->erase)(*(::__gnu_cxx::__normal_iterator<reco::FFTAnyJet<reco::JPTJet>*,std::vector<reco::FFTAnyJet<reco::JPTJet> > >*)arg[0],
    *(::__gnu_cxx::__normal_iterator<reco::FFTAnyJet<reco::JPTJet>*,std::vector<reco::FFTAnyJet<reco::JPTJet> > >*)arg[1]));
  else   (((::std::vector<reco::FFTAnyJet<reco::JPTJet> >*)o)->erase)(*(::__gnu_cxx::__normal_iterator<reco::FFTAnyJet<reco::JPTJet>*,std::vector<reco::FFTAnyJet<reco::JPTJet> > >*)arg[0],
    *(::__gnu_cxx::__normal_iterator<reco::FFTAnyJet<reco::JPTJet>*,std::vector<reco::FFTAnyJet<reco::JPTJet> > >*)arg[1]);
}

static  void method_16471( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<reco::FFTAnyJet<reco::JPTJet> >*)o)->swap)(*(::std::vector<reco::FFTAnyJet<reco::JPTJet> >*)arg[0]);
}

static  void method_16472( void*, void* o, const std::vector<void*>&, void*)
{
  (((::std::vector<reco::FFTAnyJet<reco::JPTJet> >*)o)->clear)();
}

static void method_newdel_3119( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::std::vector<reco::FFTAnyJet<reco::JPTJet> > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::std::vector<reco::FFTAnyJet<reco::JPTJet> > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::std::vector<reco::FFTAnyJet<reco::JPTJet> > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::std::vector<reco::FFTAnyJet<reco::JPTJet> > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::std::vector<reco::FFTAnyJet<reco::JPTJet> > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

static void method_x35( void* retaddr, void*, const std::vector<void*>&, void*)
{
  typedef std::vector<std::pair< ::Reflex::Base, int> > Bases_t;
  static Bases_t s_bases;
  if ( !s_bases.size() ) {
    s_bases.push_back(std::make_pair(::Reflex::Base( ::Reflex::TypeBuilder(Reflex::Literal("std::_Vector_base<reco::FFTAnyJet<reco::JPTJet>,std::allocator<reco::FFTAnyJet<reco::JPTJet> > >")), ::Reflex::BaseOffset< ::std::vector<reco::FFTAnyJet<reco::JPTJet> >,::std::_Vector_base<reco::FFTAnyJet<reco::JPTJet>,std::allocator<reco::FFTAnyJet<reco::JPTJet> > > >::Get(),::Reflex::PROTECTED), 0));
  }
  if (retaddr) *(Bases_t**)retaddr = &s_bases;
}

static void method_x36( void* retaddr, void*, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**) retaddr = ::Reflex::Proxy< ::std::vector<reco::FFTAnyJet<reco::JPTJet> > >::Generate();
  else ::Reflex::Proxy< ::std::vector<reco::FFTAnyJet<reco::JPTJet> > >::Generate();
}

//------Dictionary for class vector<reco::FFTAnyJet<reco::JPTJet>,std::allocator<reco::FFTAnyJet<reco::JPTJet> > > -------------------------------
void __std__vector_reco__FFTAnyJet_reco__JPTJet_s__db_datamem(Reflex::Class*);
void __std__vector_reco__FFTAnyJet_reco__JPTJet_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __std__vector_reco__FFTAnyJet_reco__JPTJet_s__datamem_bld(&__std__vector_reco__FFTAnyJet_reco__JPTJet_s__db_datamem);
Reflex::GenreflexMemberBuilder __std__vector_reco__FFTAnyJet_reco__JPTJet_s__funcmem_bld(&__std__vector_reco__FFTAnyJet_reco__JPTJet_s__db_funcmem);
void __std__vector_reco__FFTAnyJet_reco__JPTJet_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("std::vector<reco::FFTAnyJet<reco::JPTJet> >"), typeid(::std::vector<reco::FFTAnyJet<reco::JPTJet> >), sizeof(::std::vector<reco::FFTAnyJet<reco::JPTJet> >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddBase(type_2577, ::Reflex::BaseOffset< ::std::vector<reco::FFTAnyJet<reco::JPTJet> >, ::std::_Vector_base<reco::FFTAnyJet<reco::JPTJet>,std::allocator<reco::FFTAnyJet<reco::JPTJet> > > >::Get(), ::Reflex::PROTECTED)
  .AddTypedef(type_8931, Reflex::Literal("std::vector<reco::FFTAnyJet<reco::JPTJet> >::_Alloc_value_type"))
  .AddTypedef(type_2577, Reflex::Literal("std::vector<reco::FFTAnyJet<reco::JPTJet> >::_Base"))
  .AddTypedef(type_3491, Reflex::Literal("std::vector<reco::FFTAnyJet<reco::JPTJet> >::_Tp_alloc_type"))
  .AddTypedef(type_9732, Reflex::Literal("std::vector<reco::FFTAnyJet<reco::JPTJet> >::_Alloc_traits"))
  .AddTypedef(type_8931, Reflex::Literal("std::vector<reco::FFTAnyJet<reco::JPTJet> >::value_type"))
  .AddTypedef(type_11716, Reflex::Literal("std::vector<reco::FFTAnyJet<reco::JPTJet> >::pointer"))
  .AddTypedef(type_16420, Reflex::Literal("std::vector<reco::FFTAnyJet<reco::JPTJet> >::const_pointer"))
  .AddTypedef(type_16422, Reflex::Literal("std::vector<reco::FFTAnyJet<reco::JPTJet> >::reference"))
  .AddTypedef(type_16424, Reflex::Literal("std::vector<reco::FFTAnyJet<reco::JPTJet> >::const_reference"))
  .AddTypedef(type_9561, Reflex::Literal("std::vector<reco::FFTAnyJet<reco::JPTJet> >::iterator"))
  .AddTypedef(type_9562, Reflex::Literal("std::vector<reco::FFTAnyJet<reco::JPTJet> >::const_iterator"))
  .AddTypedef(type_3878, Reflex::Literal("std::vector<reco::FFTAnyJet<reco::JPTJet> >::const_reverse_iterator"))
  .AddTypedef(type_3879, Reflex::Literal("std::vector<reco::FFTAnyJet<reco::JPTJet> >::reverse_iterator"))
  .AddTypedef(type_3455, Reflex::Literal("std::vector<reco::FFTAnyJet<reco::JPTJet> >::size_type"))
  .AddTypedef(type_3318, Reflex::Literal("std::vector<reco::FFTAnyJet<reco::JPTJet> >::difference_type"))
  .AddTypedef(type_3491, Reflex::Literal("std::vector<reco::FFTAnyJet<reco::JPTJet> >::allocator_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("vector"), constructor_16433, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_42880), Reflex::Literal("vector"), constructor_16434, 0, "__a", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_3455, type_16424, type_42880), Reflex::Literal("vector"), constructor_16435, 0, "__n;__value=_Tp();__a=_Alloc()", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_25829), Reflex::Literal("vector"), constructor_16436, 0, "__x", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~vector"), destructor_16437, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_3119, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getBasesTable"), method_x35, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddFunctionMember<void*(void)>(Reflex::Literal("createCollFuncTable"), method_x36, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandFunctionMemberBuilder(&__std__vector_reco__FFTAnyJet_reco__JPTJet_s__funcmem_bld);
}

//------Delayed data member builder for class vector<reco::FFTAnyJet<reco::JPTJet>,std::allocator<reco::FFTAnyJet<reco::JPTJet> > > -------------------
void __std__vector_reco__FFTAnyJet_reco__JPTJet_s__db_datamem(Reflex::Class*) {

}
//------Delayed function member builder for class vector<reco::FFTAnyJet<reco::JPTJet>,std::allocator<reco::FFTAnyJet<reco::JPTJet> > > -------------------
void __std__vector_reco__FFTAnyJet_reco__JPTJet_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_44155, type_25829), Reflex::Literal("operator="), operator_16438, 0, "__x", ::Reflex::PUBLIC | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_3455, type_16424), Reflex::Literal("assign"), method_16439, 0, "__n;__val", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_9561), Reflex::Literal("begin"), method_16440, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_9562), Reflex::Literal("begin"), method_16441, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_9561), Reflex::Literal("end"), method_16442, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_9562), Reflex::Literal("end"), method_16443, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3455), Reflex::Literal("size"), method_16448, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3455), Reflex::Literal("max_size"), method_16449, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_3455, type_8931), Reflex::Literal("resize"), method_16450, 0, "__new_size;__x=_Tp()", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3455), Reflex::Literal("capacity"), method_16451, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("empty"), method_16452, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_3455), Reflex::Literal("reserve"), method_16453, 0, "__n", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_16422, type_3455), Reflex::Literal("operator[]"), operator_16454, 0, "__n", ::Reflex::PUBLIC | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_16424, type_3455), Reflex::Literal("operator[]"), operator_16455, 0, "__n", ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_16422, type_3455), Reflex::Literal("at"), method_16457, 0, "__n", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_16424, type_3455), Reflex::Literal("at"), method_16458, 0, "__n", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_16422), Reflex::Literal("front"), method_16459, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_16424), Reflex::Literal("front"), method_16460, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_16422), Reflex::Literal("back"), method_16461, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_16424), Reflex::Literal("back"), method_16462, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_11716), Reflex::Literal("data"), method_16463, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_16420), Reflex::Literal("data"), method_16464, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_16424), Reflex::Literal("push_back"), method_16465, 0, "__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708), Reflex::Literal("pop_back"), method_16466, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_9561, type_9561, type_16424), Reflex::Literal("insert"), method_16467, 0, "__position;__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_9561, type_3455, type_16424), Reflex::Literal("insert"), method_16468, 0, "__position;__n;__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_9561, type_9561), Reflex::Literal("erase"), method_16469, 0, "__position", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_9561, type_9561, type_9561), Reflex::Literal("erase"), method_16470, 0, "__first;__last", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_44155), Reflex::Literal("swap"), method_16471, 0, "__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708), Reflex::Literal("clear"), method_16472, 0, 0, ::Reflex::PUBLIC);
}
//------Stub functions for class FwdPtr<reco::FFTAnyJet<reco::BasicJet> > -------------------------------
static  void operator_27898( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> >*)o)->operator=)(*(const ::edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> >*)arg[0]);
  else   (((::edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> >*)o)->operator=)(*(const ::edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> >*)arg[0]);
}

static void constructor_27899( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> >(*(const ::edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> >*)arg[0]);
  else ::new(mem) ::edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> >(*(const ::edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> >*)arg[0]);
}

static void constructor_27900( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> >();
  else ::new(mem) ::edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> >();
}

static void destructor_27901(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> >*)o)->::edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> >::~FwdPtr)();
}
static  void operator_27902( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> >*)o)->operator*)();
  else   (((const ::edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> >*)o)->operator*)();
}

static  void operator_27903( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> >*)o)->operator->)());
  else   (((const ::edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> >*)o)->operator->)();
}

static  void method_27904( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> >*)o)->get)());
  else   (((const ::edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> >*)o)->get)();
}

static  void method_27905( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> >*)o)->isNull)());
  else   (((const ::edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> >*)o)->isNull)();
}

static  void method_27906( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> >*)o)->isNonnull)());
  else   (((const ::edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> >*)o)->isNonnull)();
}

static  void operator_27907( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> >*)o)->operator!)());
  else   (((const ::edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> >*)o)->operator!)();
}

static  void method_27908( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> >*)o)->isAvailable)());
  else   (((const ::edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> >*)o)->isAvailable)();
}

static  void method_27909( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> >*)o)->isTransient)());
  else   (((const ::edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> >*)o)->isTransient)();
}

static  void method_27910( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::ProductID)((((const ::edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> >*)o)->id)());
  else   (((const ::edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> >*)o)->id)();
}

static  void method_27911( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> >*)o)->productGetter)());
  else   (((const ::edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> >*)o)->productGetter)();
}

static  void method_27912( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (unsigned long)((((const ::edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> >*)o)->key)());
  else   (((const ::edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> >*)o)->key)();
}

static  void method_27913( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> >*)o)->hasProductCache)());
  else   (((const ::edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> >*)o)->hasProductCache)();
}

static  void method_27914( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> >*)o)->refCore)();
  else   (((const ::edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> >*)o)->refCore)();
}

static  void method_27915( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> >*)o)->product)());
  else   (((const ::edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> >*)o)->product)();
}

static  void method_27916( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> >*)o)->ptr)();
  else   (((const ::edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> >*)o)->ptr)();
}

static  void method_27917( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> >*)o)->backPtr)();
  else   (((const ::edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> >*)o)->backPtr)();
}

static  void method_27918( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (short)((((::edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> >*)o)->Class_Version)());
  else   (((::edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> >*)o)->Class_Version)();
}

static void method_newdel_5308( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class FwdPtr<reco::FFTAnyJet<reco::BasicJet> > -------------------------------
void __edm__FwdPtr_reco__FFTAnyJet_reco__BasicJet_s__db_datamem(Reflex::Class*);
void __edm__FwdPtr_reco__FFTAnyJet_reco__BasicJet_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__FwdPtr_reco__FFTAnyJet_reco__BasicJet_s__datamem_bld(&__edm__FwdPtr_reco__FFTAnyJet_reco__BasicJet_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__FwdPtr_reco__FFTAnyJet_reco__BasicJet_s__funcmem_bld(&__edm__FwdPtr_reco__FFTAnyJet_reco__BasicJet_s__db_funcmem);
void __edm__FwdPtr_reco__FFTAnyJet_reco__BasicJet_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> >"), typeid(::edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> >), sizeof(::edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("ClassVersion"), ::edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> >::Class_Version())
  .AddTypedef(type_53, Reflex::Literal("edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> >::key_type"))
  .AddTypedef(type_8934, Reflex::Literal("edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> >::value_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_16877, type_16879), Reflex::Literal("operator="), operator_27898, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_16879), Reflex::Literal("FwdPtr"), constructor_27899, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("FwdPtr"), constructor_27900, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~FwdPtr"), destructor_27901, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_5308, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__FwdPtr_reco__FFTAnyJet_reco__BasicJet_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__FwdPtr_reco__FFTAnyJet_reco__BasicJet_s__funcmem_bld);
}

//------Delayed data member builder for class FwdPtr<reco::FFTAnyJet<reco::BasicJet> > -------------------
void __edm__FwdPtr_reco__FFTAnyJet_reco__BasicJet_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_5782, Reflex::Literal("ptr_"), OffsetOf(__shadow__::__edm__FwdPtr_reco__FFTAnyJet_reco__BasicJet_s_, ptr_), ::Reflex::PRIVATE)
  .AddDataMember(type_5782, Reflex::Literal("backPtr_"), OffsetOf(__shadow__::__edm__FwdPtr_reco__FFTAnyJet_reco__BasicJet_s_, backPtr_), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class FwdPtr<reco::FFTAnyJet<reco::BasicJet> > -------------------
void __edm__FwdPtr_reco__FFTAnyJet_reco__BasicJet_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_17009), Reflex::Literal("operator*"), operator_27902, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_17005), Reflex::Literal("operator->"), operator_27903, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_17005), Reflex::Literal("get"), method_27904, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("isNull"), method_27905, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("isNonnull"), method_27906, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("operator!"), operator_27907, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("isAvailable"), method_27908, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("isTransient"), method_27909, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_5905), Reflex::Literal("id"), method_27910, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_25623), Reflex::Literal("productGetter"), method_27911, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_53), Reflex::Literal("key"), method_27912, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("hasProductCache"), method_27913, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_29672), Reflex::Literal("refCore"), method_27914, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4427), Reflex::Literal("product"), method_27915, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_48078), Reflex::Literal("ptr"), method_27916, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_48078), Reflex::Literal("backPtr"), method_27917, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_484), Reflex::Literal("Class_Version"), method_27918, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC);
}
//------Stub functions for class vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> >,std::allocator<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > > > -------------------------------
static void constructor_16888( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > >();
  else ::new(mem) ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > >();
}

static void constructor_16889( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > >(*(const ::std::allocator<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > >*)arg[0]);
  else ::new(mem) ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > >(*(const ::std::allocator<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > >*)arg[0]);
}

static void constructor_16890( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if ( arg.size() == 1 ) {
    if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > >(*(::std::size_t*)arg[0]);
  else ::new(mem) ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > >(*(::std::size_t*)arg[0]);
  }
  else if ( arg.size() == 2 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > >(*(::std::size_t*)arg[0],
      *(const ::edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> >*)arg[1]);
  else ::new(mem) ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > >(*(::std::size_t*)arg[0],
      *(const ::edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> >*)arg[1]);
  }
  else if ( arg.size() == 3 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > >(*(::std::size_t*)arg[0],
      *(const ::edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> >*)arg[1],
      *(const ::std::allocator<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > >*)arg[2]);
  else ::new(mem) ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > >(*(::std::size_t*)arg[0],
      *(const ::edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> >*)arg[1],
      *(const ::std::allocator<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > >*)arg[2]);
  }
}

static void constructor_16891( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > >(*(const ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > >*)arg[0]);
  else ::new(mem) ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > >(*(const ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > >*)arg[0]);
}

static void destructor_16892(void*, void * o, const std::vector<void*>&, void *) {
(((::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > >*)o)->::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > >::~vector)();
}
static  void operator_16893( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > >*)o)->operator=)(*(const ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > >*)arg[0]);
  else   (((::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > >*)o)->operator=)(*(const ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > >*)arg[0]);
}

static  void method_16894( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > >*)o)->assign)(*(::std::size_t*)arg[0],
    *(const ::edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> >*)arg[1]);
}

static  void method_16895( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> >*,std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > > >)((((::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > >*)o)->begin)());
  else   (((::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > >*)o)->begin)();
}

static  void method_16896( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<const edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> >*,std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > > >)((((const ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > >*)o)->begin)());
  else   (((const ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > >*)o)->begin)();
}

static  void method_16897( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> >*,std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > > >)((((::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > >*)o)->end)());
  else   (((::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > >*)o)->end)();
}

static  void method_16898( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<const edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> >*,std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > > >)((((const ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > >*)o)->end)());
  else   (((const ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > >*)o)->end)();
}

static  void method_16903( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > >*)o)->size)());
  else   (((const ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > >*)o)->size)();
}

static  void method_16904( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > >*)o)->max_size)());
  else   (((const ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > >*)o)->max_size)();
}

static  void method_16905( void*, void* o, const std::vector<void*>& arg, void*)
{
  if ( arg.size() == 1 ) {
    (((::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > >*)o)->resize)(*(::std::size_t*)arg[0]);
  }
  else if ( arg.size() == 2 ) { 
    (((::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > >*)o)->resize)(*(::std::size_t*)arg[0],
      *(::edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> >*)arg[1]);
  }
}

static  void method_16906( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > >*)o)->capacity)());
  else   (((const ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > >*)o)->capacity)();
}

static  void method_16907( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > >*)o)->empty)());
  else   (((const ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > >*)o)->empty)();
}

static  void method_16908( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > >*)o)->reserve)(*(::std::size_t*)arg[0]);
}

static  void operator_16909( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > >*)o)->operator[])(*(::std::size_t*)arg[0]);
  else   (((::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > >*)o)->operator[])(*(::std::size_t*)arg[0]);
}

static  void operator_16910( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > >*)o)->operator[])(*(::std::size_t*)arg[0]);
  else   (((const ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > >*)o)->operator[])(*(::std::size_t*)arg[0]);
}

static  void method_16912( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > >*)o)->at)(*(::std::size_t*)arg[0]);
  else   (((::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > >*)o)->at)(*(::std::size_t*)arg[0]);
}

static  void method_16913( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > >*)o)->at)(*(::std::size_t*)arg[0]);
  else   (((const ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > >*)o)->at)(*(::std::size_t*)arg[0]);
}

static  void method_16914( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > >*)o)->front)();
  else   (((::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > >*)o)->front)();
}

static  void method_16915( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > >*)o)->front)();
  else   (((const ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > >*)o)->front)();
}

static  void method_16916( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > >*)o)->back)();
  else   (((::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > >*)o)->back)();
}

static  void method_16917( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > >*)o)->back)();
  else   (((const ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > >*)o)->back)();
}

static  void method_16918( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > >*)o)->data)());
  else   (((::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > >*)o)->data)();
}

static  void method_16919( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > >*)o)->data)());
  else   (((const ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > >*)o)->data)();
}

static  void method_16920( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > >*)o)->push_back)(*(const ::edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> >*)arg[0]);
}

static  void method_16921( void*, void* o, const std::vector<void*>&, void*)
{
  (((::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > >*)o)->pop_back)();
}

static  void method_16922( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> >*,std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > > >)((((::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > >*)o)->insert)(*(::__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> >*,std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > > >*)arg[0],
    *(const ::edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> >*)arg[1]));
  else   (((::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > >*)o)->insert)(*(::__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> >*,std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > > >*)arg[0],
    *(const ::edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> >*)arg[1]);
}

static  void method_16923( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > >*)o)->insert)(*(::__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> >*,std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > > >*)arg[0],
    *(::std::size_t*)arg[1],
    *(const ::edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> >*)arg[2]);
}

static  void method_16924( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> >*,std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > > >)((((::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > >*)o)->erase)(*(::__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> >*,std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > > >*)arg[0]));
  else   (((::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > >*)o)->erase)(*(::__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> >*,std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > > >*)arg[0]);
}

static  void method_16925( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> >*,std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > > >)((((::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > >*)o)->erase)(*(::__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> >*,std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > > >*)arg[0],
    *(::__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> >*,std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > > >*)arg[1]));
  else   (((::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > >*)o)->erase)(*(::__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> >*,std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > > >*)arg[0],
    *(::__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> >*,std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > > >*)arg[1]);
}

static  void method_16926( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > >*)o)->swap)(*(::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > >*)arg[0]);
}

static  void method_16927( void*, void* o, const std::vector<void*>&, void*)
{
  (((::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > >*)o)->clear)();
}

static void method_newdel_3132( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

static void method_x39( void* retaddr, void*, const std::vector<void*>&, void*)
{
  typedef std::vector<std::pair< ::Reflex::Base, int> > Bases_t;
  static Bases_t s_bases;
  if ( !s_bases.size() ) {
    s_bases.push_back(std::make_pair(::Reflex::Base( ::Reflex::TypeBuilder(Reflex::Literal("std::_Vector_base<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> >,std::allocator<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > > >")), ::Reflex::BaseOffset< ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > >,::std::_Vector_base<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> >,std::allocator<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > > > >::Get(),::Reflex::PROTECTED), 0));
  }
  if (retaddr) *(Bases_t**)retaddr = &s_bases;
}

static void method_x40( void* retaddr, void*, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**) retaddr = ::Reflex::Proxy< ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > > >::Generate();
  else ::Reflex::Proxy< ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > > >::Generate();
}

//------Dictionary for class vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> >,std::allocator<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > > > -------------------------------
void __std__vector_edm__FwdPtr_reco__FFTAnyJet_reco__BasicJet_s_s__db_datamem(Reflex::Class*);
void __std__vector_edm__FwdPtr_reco__FFTAnyJet_reco__BasicJet_s_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __std__vector_edm__FwdPtr_reco__FFTAnyJet_reco__BasicJet_s_s__datamem_bld(&__std__vector_edm__FwdPtr_reco__FFTAnyJet_reco__BasicJet_s_s__db_datamem);
Reflex::GenreflexMemberBuilder __std__vector_edm__FwdPtr_reco__FFTAnyJet_reco__BasicJet_s_s__funcmem_bld(&__std__vector_edm__FwdPtr_reco__FFTAnyJet_reco__BasicJet_s_s__db_funcmem);
void __std__vector_edm__FwdPtr_reco__FFTAnyJet_reco__BasicJet_s_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > >"), typeid(::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > >), sizeof(::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddBase(type_2547, ::Reflex::BaseOffset< ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > >, ::std::_Vector_base<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> >,std::allocator<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > > > >::Get(), ::Reflex::PROTECTED)
  .AddTypedef(type_5308, Reflex::Literal("std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > >::_Alloc_value_type"))
  .AddTypedef(type_2547, Reflex::Literal("std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > >::_Base"))
  .AddTypedef(type_3514, Reflex::Literal("std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > >::_Tp_alloc_type"))
  .AddTypedef(type_9702, Reflex::Literal("std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > >::_Alloc_traits"))
  .AddTypedef(type_5308, Reflex::Literal("std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > >::value_type"))
  .AddTypedef(type_11147, Reflex::Literal("std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > >::pointer"))
  .AddTypedef(type_16875, Reflex::Literal("std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > >::const_pointer"))
  .AddTypedef(type_16877, Reflex::Literal("std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > >::reference"))
  .AddTypedef(type_16879, Reflex::Literal("std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > >::const_reference"))
  .AddTypedef(type_9504, Reflex::Literal("std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > >::iterator"))
  .AddTypedef(type_9505, Reflex::Literal("std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > >::const_iterator"))
  .AddTypedef(type_3812, Reflex::Literal("std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > >::const_reverse_iterator"))
  .AddTypedef(type_3813, Reflex::Literal("std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > >::reverse_iterator"))
  .AddTypedef(type_3455, Reflex::Literal("std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > >::size_type"))
  .AddTypedef(type_3318, Reflex::Literal("std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > >::difference_type"))
  .AddTypedef(type_3514, Reflex::Literal("std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > >::allocator_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("vector"), constructor_16888, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_42490), Reflex::Literal("vector"), constructor_16889, 0, "__a", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_3455, type_16879, type_42490), Reflex::Literal("vector"), constructor_16890, 0, "__n;__value=_Tp();__a=_Alloc()", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_44173), Reflex::Literal("vector"), constructor_16891, 0, "__x", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~vector"), destructor_16892, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_3132, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getBasesTable"), method_x39, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddFunctionMember<void*(void)>(Reflex::Literal("createCollFuncTable"), method_x40, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandFunctionMemberBuilder(&__std__vector_edm__FwdPtr_reco__FFTAnyJet_reco__BasicJet_s_s__funcmem_bld);
}

//------Delayed data member builder for class vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> >,std::allocator<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > > > -------------------
void __std__vector_edm__FwdPtr_reco__FFTAnyJet_reco__BasicJet_s_s__db_datamem(Reflex::Class*) {

}
//------Delayed function member builder for class vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> >,std::allocator<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > > > -------------------
void __std__vector_edm__FwdPtr_reco__FFTAnyJet_reco__BasicJet_s_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_44174, type_44173), Reflex::Literal("operator="), operator_16893, 0, "__x", ::Reflex::PUBLIC | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_3455, type_16879), Reflex::Literal("assign"), method_16894, 0, "__n;__val", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_9504), Reflex::Literal("begin"), method_16895, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_9505), Reflex::Literal("begin"), method_16896, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_9504), Reflex::Literal("end"), method_16897, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_9505), Reflex::Literal("end"), method_16898, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3455), Reflex::Literal("size"), method_16903, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3455), Reflex::Literal("max_size"), method_16904, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_3455, type_5308), Reflex::Literal("resize"), method_16905, 0, "__new_size;__x=_Tp()", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3455), Reflex::Literal("capacity"), method_16906, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("empty"), method_16907, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_3455), Reflex::Literal("reserve"), method_16908, 0, "__n", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_16877, type_3455), Reflex::Literal("operator[]"), operator_16909, 0, "__n", ::Reflex::PUBLIC | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_16879, type_3455), Reflex::Literal("operator[]"), operator_16910, 0, "__n", ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_16877, type_3455), Reflex::Literal("at"), method_16912, 0, "__n", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_16879, type_3455), Reflex::Literal("at"), method_16913, 0, "__n", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_16877), Reflex::Literal("front"), method_16914, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_16879), Reflex::Literal("front"), method_16915, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_16877), Reflex::Literal("back"), method_16916, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_16879), Reflex::Literal("back"), method_16917, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_11147), Reflex::Literal("data"), method_16918, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_16875), Reflex::Literal("data"), method_16919, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_16879), Reflex::Literal("push_back"), method_16920, 0, "__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708), Reflex::Literal("pop_back"), method_16921, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_9504, type_9504, type_16879), Reflex::Literal("insert"), method_16922, 0, "__position;__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_9504, type_3455, type_16879), Reflex::Literal("insert"), method_16923, 0, "__position;__n;__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_9504, type_9504), Reflex::Literal("erase"), method_16924, 0, "__position", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_9504, type_9504, type_9504), Reflex::Literal("erase"), method_16925, 0, "__first;__last", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_44174), Reflex::Literal("swap"), method_16926, 0, "__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708), Reflex::Literal("clear"), method_16927, 0, 0, ::Reflex::PUBLIC);
}
//------Stub functions for class RefVector<std::vector<reco::FFTAnyJet<reco::TrackJet>, std::allocator<reco::FFTAnyJet<reco::TrackJet> > >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet>, std::allocator<reco::FFTAnyJet<reco::TrackJet> > >, reco::FFTAnyJet<reco::TrackJet> > > -------------------------------
static void destructor_28065(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::RefVector<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)o)->::edm::RefVector<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >::~RefVector)();
}
static void constructor_28066( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >();
  else ::new(mem) ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >();
}

static void constructor_28067( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >(*(const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)arg[0]);
  else ::new(mem) ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >(*(const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)arg[0]);
}

static void constructor_28068( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >(*(const ::edm::ProductID*)arg[0]);
  else ::new(mem) ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >(*(const ::edm::ProductID*)arg[0]);
}

static  void method_28069( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::edm::RefVector<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)o)->push_back)(*(const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)arg[0]);
}

static  void operator_28070( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >)((((const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)o)->operator[])(*(::std::size_t*)arg[0]));
  else   (((const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)o)->operator[])(*(::std::size_t*)arg[0]);
}

static  void method_28071( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >)((((const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)o)->at)(*(::std::size_t*)arg[0]));
  else   (((const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)o)->at)(*(::std::size_t*)arg[0]);
}

static  void method_28072( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)o)->refVector)();
  else   (((const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)o)->refVector)();
}

static  void method_28073( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)o)->empty)());
  else   (((const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)o)->empty)();
}

static  void method_28074( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)o)->size)());
  else   (((const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)o)->size)();
}

static  void method_28075( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)o)->capacity)());
  else   (((const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)o)->capacity)();
}

static  void method_28076( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::edm::RefVector<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)o)->reserve)(*(::std::size_t*)arg[0]);
}

static  void method_28077( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::RefVectorIterator<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >)((((const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)o)->begin)());
  else   (((const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)o)->begin)();
}

static  void method_28078( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::RefVectorIterator<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >)((((const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)o)->end)());
  else   (((const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)o)->end)();
}

static  void method_28079( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::ProductID)((((const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)o)->id)());
  else   (((const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)o)->id)();
}

static  void method_28080( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)o)->productGetter)());
  else   (((const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)o)->productGetter)();
}

static  void method_28081( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)o)->isNull)());
  else   (((const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)o)->isNull)();
}

static  void method_28082( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)o)->isNonnull)());
  else   (((const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)o)->isNonnull)();
}

static  void operator_28083( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)o)->operator!)());
  else   (((const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)o)->operator!)();
}

static  void method_28084( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)o)->product)());
  else   (((const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)o)->product)();
}

static  void method_28085( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)o)->isAvailable)());
  else   (((const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)o)->isAvailable)();
}

static  void method_28086( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)o)->isTransient)());
  else   (((const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)o)->isTransient)();
}

static  void method_28087( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (edm::RefVectorIterator<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >)((((::edm::RefVector<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)o)->erase)(*(const ::edm::RefVectorIterator<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)arg[0]));
  else   (((::edm::RefVector<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)o)->erase)(*(const ::edm::RefVectorIterator<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)arg[0]);
}

static  void method_28088( void*, void* o, const std::vector<void*>&, void*)
{
  (((::edm::RefVector<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)o)->clear)();
}

static  void method_28089( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::edm::RefVector<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)o)->swap)(*(::edm::RefVector<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)arg[0]);
}

static  void operator_28090( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::RefVector<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)o)->operator=)(*(const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)arg[0]);
  else   (((::edm::RefVector<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)o)->operator=)(*(const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)arg[0]);
}

static  void method_28091( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)o)->hasProductCache)());
  else   (((const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)o)->hasProductCache)();
}

static  void method_28092( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)o)->fillView)(*(const ::edm::ProductID*)arg[0],
    *(::std::vector<const void*>*)arg[1],
    *(::edm::helper_vector*)arg[2]);
}

static  void method_28093( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (short)((((::edm::RefVector<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)o)->Class_Version)());
  else   (((::edm::RefVector<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)o)->Class_Version)();
}

static void method_newdel_5338( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class RefVector<std::vector<reco::FFTAnyJet<reco::TrackJet>, std::allocator<reco::FFTAnyJet<reco::TrackJet> > >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet>, std::allocator<reco::FFTAnyJet<reco::TrackJet> > >, reco::FFTAnyJet<reco::TrackJet> > > -------------------------------
void __edm__RefVector_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s__db_datamem(Reflex::Class*);
void __edm__RefVector_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__RefVector_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s__datamem_bld(&__edm__RefVector_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__RefVector_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s__funcmem_bld(&__edm__RefVector_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s__db_funcmem);
void __edm__RefVector_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::RefVector<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >"), typeid(::edm::RefVector<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >), sizeof(::edm::RefVector<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("ClassVersion"), ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >::Class_Version())
  .AddTypedef(type_3124, Reflex::Literal("edm::RefVector<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >::collection_type"))
  .AddTypedef(type_8932, Reflex::Literal("edm::RefVector<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >::member_type"))
  .AddTypedef(type_25836, Reflex::Literal("edm::RefVector<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >::finder_type"))
  .AddTypedef(type_5249, Reflex::Literal("edm::RefVector<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >::iterator"))
  .AddTypedef(type_5249, Reflex::Literal("edm::RefVector<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >::const_iterator"))
  .AddTypedef(type_5813, Reflex::Literal("edm::RefVector<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >::value_type"))
  .AddTypedef(type_5813c, Reflex::Literal("edm::RefVector<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >::const_reference"))
  .AddTypedef(type_5813c, Reflex::Literal("edm::RefVector<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >::reference"))
  .AddTypedef(type_211, Reflex::Literal("edm::RefVector<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >::key_type"))
  .AddTypedef(type_3106, Reflex::Literal("edm::RefVector<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >::KeyVec"))
  .AddTypedef(type_3455, Reflex::Literal("edm::RefVector<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >::size_type"))
  .AddTypedef(type_4392, Reflex::Literal("edm::RefVector<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >::contents_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~RefVector"), destructor_28065, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::DESTRUCTOR )
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("RefVector"), constructor_28066, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_48115), Reflex::Literal("RefVector"), constructor_28067, 0, "rh", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_25503), Reflex::Literal("RefVector"), constructor_28068, 0, "iId", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_5338, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__RefVector_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__RefVector_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s__funcmem_bld);
}

//------Delayed data member builder for class RefVector<std::vector<reco::FFTAnyJet<reco::TrackJet>, std::allocator<reco::FFTAnyJet<reco::TrackJet> > >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet>, std::allocator<reco::FFTAnyJet<reco::TrackJet> > >, reco::FFTAnyJet<reco::TrackJet> > > -------------------
void __edm__RefVector_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_4392, Reflex::Literal("refVector_"), OffsetOf(__shadow__::__edm__RefVector_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s_, refVector_), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class RefVector<std::vector<reco::FFTAnyJet<reco::TrackJet>, std::allocator<reco::FFTAnyJet<reco::TrackJet> > >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet>, std::allocator<reco::FFTAnyJet<reco::TrackJet> > >, reco::FFTAnyJet<reco::TrackJet> > > -------------------
void __edm__RefVector_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_47491), Reflex::Literal("push_back"), method_28069, 0, "ref", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_5813c, type_3455), Reflex::Literal("operator[]"), operator_28070, 0, "idx", ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_5813c, type_3455), Reflex::Literal("at"), method_28071, 0, "idx", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_25622), Reflex::Literal("refVector"), method_28072, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("empty"), method_28073, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3455), Reflex::Literal("size"), method_28074, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3455), Reflex::Literal("capacity"), method_28075, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_3455), Reflex::Literal("reserve"), method_28076, 0, "n", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_5249), Reflex::Literal("begin"), method_28077, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_5249), Reflex::Literal("end"), method_28078, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_5905), Reflex::Literal("id"), method_28079, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_25623), Reflex::Literal("productGetter"), method_28080, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("isNull"), method_28081, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("isNonnull"), method_28082, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("operator!"), operator_28083, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_48116), Reflex::Literal("product"), method_28084, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("isAvailable"), method_28085, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("isTransient"), method_28086, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_5249, type_48117), Reflex::Literal("erase"), method_28087, 0, "pos", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708), Reflex::Literal("clear"), method_28088, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_48118), Reflex::Literal("swap"), method_28089, 0, "other", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_48118, type_48115), Reflex::Literal("operator="), operator_28090, 0, "rhs", ::Reflex::PUBLIC | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("hasProductCache"), method_28091, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_25503, type_25627, type_25628), Reflex::Literal("fillView"), method_28092, 0, ";pointers;helpers", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_484), Reflex::Literal("Class_Version"), method_28093, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC);
}
//------Stub functions for class Ref<std::vector<reco::FFTAnyJet<reco::TrackJet>, std::allocator<reco::FFTAnyJet<reco::TrackJet> > >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet>, std::allocator<reco::FFTAnyJet<reco::TrackJet> > >, reco::FFTAnyJet<reco::TrackJet> > > -------------------------------
static  void operator_30925( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)o)->operator=)(*(const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)arg[0]);
  else   (((::edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)o)->operator=)(*(const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)arg[0]);
}

static void constructor_30926( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >(*(const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)arg[0]);
  else ::new(mem) ::edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >(*(const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)arg[0]);
}

static void constructor_30927( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >();
  else ::new(mem) ::edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >();
}

static void constructor_30928( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if ( arg.size() == 2 ) {
    if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >(*(const ::edm::Handle<std::vector<reco::FFTAnyJet<reco::TrackJet> > >*)arg[0],
      *(unsigned int*)arg[1]);
  else ::new(mem) ::edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >(*(const ::edm::Handle<std::vector<reco::FFTAnyJet<reco::TrackJet> > >*)arg[0],
      *(unsigned int*)arg[1]);
  }
  else if ( arg.size() == 3 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >(*(const ::edm::Handle<std::vector<reco::FFTAnyJet<reco::TrackJet> > >*)arg[0],
      *(unsigned int*)arg[1],
      *(bool*)arg[2]);
  else ::new(mem) ::edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >(*(const ::edm::Handle<std::vector<reco::FFTAnyJet<reco::TrackJet> > >*)arg[0],
      *(unsigned int*)arg[1],
      *(bool*)arg[2]);
  }
}

static void constructor_30929( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if ( arg.size() == 2 ) {
    if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >(*(const ::edm::OrphanHandle<std::vector<reco::FFTAnyJet<reco::TrackJet> > >*)arg[0],
      *(unsigned int*)arg[1]);
  else ::new(mem) ::edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >(*(const ::edm::OrphanHandle<std::vector<reco::FFTAnyJet<reco::TrackJet> > >*)arg[0],
      *(unsigned int*)arg[1]);
  }
  else if ( arg.size() == 3 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >(*(const ::edm::OrphanHandle<std::vector<reco::FFTAnyJet<reco::TrackJet> > >*)arg[0],
      *(unsigned int*)arg[1],
      *(bool*)arg[2]);
  else ::new(mem) ::edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >(*(const ::edm::OrphanHandle<std::vector<reco::FFTAnyJet<reco::TrackJet> > >*)arg[0],
      *(unsigned int*)arg[1],
      *(bool*)arg[2]);
  }
}

static void constructor_30930( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if ( arg.size() == 2 ) {
    if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >(*(const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)arg[0],
      *(unsigned int*)arg[1]);
  else ::new(mem) ::edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >(*(const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)arg[0],
      *(unsigned int*)arg[1]);
  }
  else if ( arg.size() == 3 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >(*(const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)arg[0],
      *(unsigned int*)arg[1],
      *(bool*)arg[2]);
  else ::new(mem) ::edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >(*(const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)arg[0],
      *(unsigned int*)arg[1],
      *(bool*)arg[2]);
  }
}

static void constructor_30931( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if ( arg.size() == 2 ) {
    if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >((const ::std::vector<reco::FFTAnyJet<reco::TrackJet> >*)arg[0],
      *(unsigned int*)arg[1]);
  else ::new(mem) ::edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >((const ::std::vector<reco::FFTAnyJet<reco::TrackJet> >*)arg[0],
      *(unsigned int*)arg[1]);
  }
  else if ( arg.size() == 3 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >((const ::std::vector<reco::FFTAnyJet<reco::TrackJet> >*)arg[0],
      *(unsigned int*)arg[1],
      *(bool*)arg[2]);
  else ::new(mem) ::edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >((const ::std::vector<reco::FFTAnyJet<reco::TrackJet> >*)arg[0],
      *(unsigned int*)arg[1],
      *(bool*)arg[2]);
  }
}

static void constructor_30932( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if ( arg.size() == 2 ) {
    if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >(*(const ::edm::TestHandle<std::vector<reco::FFTAnyJet<reco::TrackJet> > >*)arg[0],
      *(unsigned int*)arg[1]);
  else ::new(mem) ::edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >(*(const ::edm::TestHandle<std::vector<reco::FFTAnyJet<reco::TrackJet> > >*)arg[0],
      *(unsigned int*)arg[1]);
  }
  else if ( arg.size() == 3 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >(*(const ::edm::TestHandle<std::vector<reco::FFTAnyJet<reco::TrackJet> > >*)arg[0],
      *(unsigned int*)arg[1],
      *(bool*)arg[2]);
  else ::new(mem) ::edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >(*(const ::edm::TestHandle<std::vector<reco::FFTAnyJet<reco::TrackJet> > >*)arg[0],
      *(unsigned int*)arg[1],
      *(bool*)arg[2]);
  }
}

static void constructor_30933( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >(*(const ::edm::ProductID*)arg[0],
      *(unsigned int*)arg[1],
      (const ::edm::EDProductGetter*)arg[2]);
  else ::new(mem) ::edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >(*(const ::edm::ProductID*)arg[0],
      *(unsigned int*)arg[1],
      (const ::edm::EDProductGetter*)arg[2]);
}

static void constructor_30934( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >(*(const ::edm::ProductID*)arg[0],
      (const ::reco::FFTAnyJet<reco::TrackJet>*)arg[1],
      *(unsigned int*)arg[2],
      (const ::std::vector<reco::FFTAnyJet<reco::TrackJet> >*)arg[3]);
  else ::new(mem) ::edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >(*(const ::edm::ProductID*)arg[0],
      (const ::reco::FFTAnyJet<reco::TrackJet>*)arg[1],
      *(unsigned int*)arg[2],
      (const ::std::vector<reco::FFTAnyJet<reco::TrackJet> >*)arg[3]);
}

static void constructor_30935( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >(*(const ::edm::ProductID*)arg[0]);
  else ::new(mem) ::edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >(*(const ::edm::ProductID*)arg[0]);
}

static void constructor_30936( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >(*(const ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::TrackJet> > >*)arg[0],
      *(unsigned int*)arg[1]);
  else ::new(mem) ::edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >(*(const ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::TrackJet> > >*)arg[0],
      *(unsigned int*)arg[1]);
}

static void destructor_30937(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)o)->::edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >::~Ref)();
}
static  void operator_30938( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)o)->operator*)();
  else   (((const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)o)->operator*)();
}

static  void operator_30939( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)o)->operator->)());
  else   (((const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)o)->operator->)();
}

static  void method_30940( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)o)->get)());
  else   (((const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)o)->get)();
}

static  void method_30941( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)o)->isNull)());
  else   (((const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)o)->isNull)();
}

static  void method_30942( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)o)->isNonnull)());
  else   (((const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)o)->isNonnull)();
}

static  void operator_30943( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)o)->operator!)());
  else   (((const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)o)->operator!)();
}

static  void method_30944( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::ProductID)((((const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)o)->id)());
  else   (((const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)o)->id)();
}

static  void method_30945( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)o)->productGetter)());
  else   (((const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)o)->productGetter)();
}

static  void method_30946( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)o)->product)());
  else   (((const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)o)->product)();
}

static  void method_30947( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (unsigned int)((((const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)o)->key)());
  else   (((const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)o)->key)();
}

static  void method_30948( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (unsigned int)((((const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)o)->index)());
  else   (((const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)o)->index)();
}

static  void method_30949( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)o)->hasProductCache)());
  else   (((const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)o)->hasProductCache)();
}

static  void method_30950( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)o)->isAvailable)());
  else   (((const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)o)->isAvailable)();
}

static  void method_30951( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)o)->isTransient)());
  else   (((const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)o)->isTransient)();
}

static  void method_30952( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)o)->refCore)();
  else   (((const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)o)->refCore)();
}

static  void method_30953( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (short)((((::edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)o)->Class_Version)());
  else   (((::edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)o)->Class_Version)();
}

static void constructor_30954( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >(*(const ::edm::RefCore*)arg[0],
      *(const unsigned int*)arg[1]);
  else ::new(mem) ::edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >(*(const ::edm::RefCore*)arg[0],
      *(const unsigned int*)arg[1]);
}

static void method_newdel_5813( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class Ref<std::vector<reco::FFTAnyJet<reco::TrackJet>, std::allocator<reco::FFTAnyJet<reco::TrackJet> > >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet>, std::allocator<reco::FFTAnyJet<reco::TrackJet> > >, reco::FFTAnyJet<reco::TrackJet> > > -------------------------------
void __edm__Ref_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s__db_datamem(Reflex::Class*);
void __edm__Ref_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__Ref_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s__datamem_bld(&__edm__Ref_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__Ref_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s__funcmem_bld(&__edm__Ref_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s__db_funcmem);
void __edm__Ref_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >"), typeid(::edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >), sizeof(::edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("ClassVersion"), ::edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >::Class_Version())
  .AddTypedef(type_8932, Reflex::Literal("edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >::T"))
  .AddTypedef(type_25836, Reflex::Literal("edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >::F"))
  .AddTypedef(type_27546, Reflex::Literal("edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >::VF"))
  .AddTypedef(type_27545, Reflex::Literal("edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >::VBF"))
  .AddTypedef(type_3124, Reflex::Literal("edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >::product_type"))
  .AddTypedef(type_8932, Reflex::Literal("edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >::value_type"))
  .AddTypedef(type_8932c, Reflex::Literal("edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >::element_type"))
  .AddTypedef(type_25836, Reflex::Literal("edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >::finder_type"))
  .AddTypedef(type_211, Reflex::Literal("edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >::argument_type"))
  .AddTypedef(type_211, Reflex::Literal("edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >::key_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_48908, type_47491), Reflex::Literal("operator="), operator_30925, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_47491), Reflex::Literal("Ref"), constructor_30926, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("Ref"), constructor_30927, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_48829, type_211, type_1593), Reflex::Literal("Ref"), constructor_30928, 0, "handle;itemKey;setNow=true", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_48830, type_211, type_1593), Reflex::Literal("Ref"), constructor_30929, 0, "handle;itemKey;setNow=true", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_48115, type_211, type_1593), Reflex::Literal("Ref"), constructor_30930, 0, "refvector;itemKey;setNow=true", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_48116, type_211, type_1593), Reflex::Literal("Ref"), constructor_30931, 0, "iProduct;iItemKey;iSetNow=true", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_48831, type_211, type_1593), Reflex::Literal("Ref"), constructor_30932, 0, "handle;itemKey;setNow=true", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_25503, type_211, type_25623), Reflex::Literal("Ref"), constructor_30933, 0, "productID;itemKey;prodGetter", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_25503, type_16615, type_211, type_48116), Reflex::Literal("Ref"), constructor_30934, 0, "iProductID;;iItemKey;iProduct", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_25503), Reflex::Literal("Ref"), constructor_30935, 0, "iId", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_48828, type_211), Reflex::Literal("Ref"), constructor_30936, 0, "refProd;itemKey", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~Ref"), destructor_30937, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_29672, type_13040), Reflex::Literal("Ref"), constructor_30954, 0, "iRefCore;iKey", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_5813, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__Ref_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__Ref_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s__funcmem_bld);
}

//------Delayed data member builder for class Ref<std::vector<reco::FFTAnyJet<reco::TrackJet>, std::allocator<reco::FFTAnyJet<reco::TrackJet> > >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet>, std::allocator<reco::FFTAnyJet<reco::TrackJet> > >, reco::FFTAnyJet<reco::TrackJet> > > -------------------
void __edm__Ref_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_5268, Reflex::Literal("product_"), OffsetOf(__shadow__::__edm__Ref_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s_, product_), ::Reflex::PRIVATE | ::Reflex::MUTABLE);
}
//------Delayed function member builder for class Ref<std::vector<reco::FFTAnyJet<reco::TrackJet>, std::allocator<reco::FFTAnyJet<reco::TrackJet> > >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet>, std::allocator<reco::FFTAnyJet<reco::TrackJet> > >, reco::FFTAnyJet<reco::TrackJet> > > -------------------
void __edm__Ref_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_16619), Reflex::Literal("operator*"), operator_30938, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_16615), Reflex::Literal("operator->"), operator_30939, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_16615), Reflex::Literal("get"), method_30940, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("isNull"), method_30941, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("isNonnull"), method_30942, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("operator!"), operator_30943, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_5905), Reflex::Literal("id"), method_30944, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_25623), Reflex::Literal("productGetter"), method_30945, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_48116), Reflex::Literal("product"), method_30946, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_211), Reflex::Literal("key"), method_30947, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_211), Reflex::Literal("index"), method_30948, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("hasProductCache"), method_30949, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("isAvailable"), method_30950, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("isTransient"), method_30951, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_29672), Reflex::Literal("refCore"), method_30952, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_484), Reflex::Literal("Class_Version"), method_30953, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC);
}
//------Stub functions for class FwdPtr<reco::FFTAnyJet<reco::TrackJet> > -------------------------------
static  void operator_27848( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> >*)o)->operator=)(*(const ::edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> >*)arg[0]);
  else   (((::edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> >*)o)->operator=)(*(const ::edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> >*)arg[0]);
}

static void constructor_27849( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> >(*(const ::edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> >*)arg[0]);
  else ::new(mem) ::edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> >(*(const ::edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> >*)arg[0]);
}

static void constructor_27850( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> >();
  else ::new(mem) ::edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> >();
}

static void destructor_27851(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> >*)o)->::edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> >::~FwdPtr)();
}
static  void operator_27852( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> >*)o)->operator*)();
  else   (((const ::edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> >*)o)->operator*)();
}

static  void operator_27853( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> >*)o)->operator->)());
  else   (((const ::edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> >*)o)->operator->)();
}

static  void method_27854( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> >*)o)->get)());
  else   (((const ::edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> >*)o)->get)();
}

static  void method_27855( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> >*)o)->isNull)());
  else   (((const ::edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> >*)o)->isNull)();
}

static  void method_27856( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> >*)o)->isNonnull)());
  else   (((const ::edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> >*)o)->isNonnull)();
}

static  void operator_27857( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> >*)o)->operator!)());
  else   (((const ::edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> >*)o)->operator!)();
}

static  void method_27858( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> >*)o)->isAvailable)());
  else   (((const ::edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> >*)o)->isAvailable)();
}

static  void method_27859( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> >*)o)->isTransient)());
  else   (((const ::edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> >*)o)->isTransient)();
}

static  void method_27860( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::ProductID)((((const ::edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> >*)o)->id)());
  else   (((const ::edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> >*)o)->id)();
}

static  void method_27861( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> >*)o)->productGetter)());
  else   (((const ::edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> >*)o)->productGetter)();
}

static  void method_27862( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (unsigned long)((((const ::edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> >*)o)->key)());
  else   (((const ::edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> >*)o)->key)();
}

static  void method_27863( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> >*)o)->hasProductCache)());
  else   (((const ::edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> >*)o)->hasProductCache)();
}

static  void method_27864( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> >*)o)->refCore)();
  else   (((const ::edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> >*)o)->refCore)();
}

static  void method_27865( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> >*)o)->product)());
  else   (((const ::edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> >*)o)->product)();
}

static  void method_27866( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> >*)o)->ptr)();
  else   (((const ::edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> >*)o)->ptr)();
}

static  void method_27867( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> >*)o)->backPtr)();
  else   (((const ::edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> >*)o)->backPtr)();
}

static  void method_27868( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (short)((((::edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> >*)o)->Class_Version)());
  else   (((::edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> >*)o)->Class_Version)();
}

static void method_newdel_5306( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class FwdPtr<reco::FFTAnyJet<reco::TrackJet> > -------------------------------
void __edm__FwdPtr_reco__FFTAnyJet_reco__TrackJet_s__db_datamem(Reflex::Class*);
void __edm__FwdPtr_reco__FFTAnyJet_reco__TrackJet_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__FwdPtr_reco__FFTAnyJet_reco__TrackJet_s__datamem_bld(&__edm__FwdPtr_reco__FFTAnyJet_reco__TrackJet_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__FwdPtr_reco__FFTAnyJet_reco__TrackJet_s__funcmem_bld(&__edm__FwdPtr_reco__FFTAnyJet_reco__TrackJet_s__db_funcmem);
void __edm__FwdPtr_reco__FFTAnyJet_reco__TrackJet_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> >"), typeid(::edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> >), sizeof(::edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("ClassVersion"), ::edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> >::Class_Version())
  .AddTypedef(type_53, Reflex::Literal("edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> >::key_type"))
  .AddTypedef(type_8932, Reflex::Literal("edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> >::value_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_16487, type_16489), Reflex::Literal("operator="), operator_27848, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_16489), Reflex::Literal("FwdPtr"), constructor_27849, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("FwdPtr"), constructor_27850, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~FwdPtr"), destructor_27851, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_5306, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__FwdPtr_reco__FFTAnyJet_reco__TrackJet_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__FwdPtr_reco__FFTAnyJet_reco__TrackJet_s__funcmem_bld);
}

//------Delayed data member builder for class FwdPtr<reco::FFTAnyJet<reco::TrackJet> > -------------------
void __edm__FwdPtr_reco__FFTAnyJet_reco__TrackJet_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_5780, Reflex::Literal("ptr_"), OffsetOf(__shadow__::__edm__FwdPtr_reco__FFTAnyJet_reco__TrackJet_s_, ptr_), ::Reflex::PRIVATE)
  .AddDataMember(type_5780, Reflex::Literal("backPtr_"), OffsetOf(__shadow__::__edm__FwdPtr_reco__FFTAnyJet_reco__TrackJet_s_, backPtr_), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class FwdPtr<reco::FFTAnyJet<reco::TrackJet> > -------------------
void __edm__FwdPtr_reco__FFTAnyJet_reco__TrackJet_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_16619), Reflex::Literal("operator*"), operator_27852, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_16615), Reflex::Literal("operator->"), operator_27853, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_16615), Reflex::Literal("get"), method_27854, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("isNull"), method_27855, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("isNonnull"), method_27856, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("operator!"), operator_27857, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("isAvailable"), method_27858, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("isTransient"), method_27859, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_5905), Reflex::Literal("id"), method_27860, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_25623), Reflex::Literal("productGetter"), method_27861, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_53), Reflex::Literal("key"), method_27862, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("hasProductCache"), method_27863, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_29672), Reflex::Literal("refCore"), method_27864, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4427), Reflex::Literal("product"), method_27865, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_48072), Reflex::Literal("ptr"), method_27866, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_48072), Reflex::Literal("backPtr"), method_27867, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_484), Reflex::Literal("Class_Version"), method_27868, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC);
}
//------Stub functions for class FwdPtr<reco::FFTAnyJet<reco::JPTJet> > -------------------------------
static  void operator_27823( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> >*)o)->operator=)(*(const ::edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> >*)arg[0]);
  else   (((::edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> >*)o)->operator=)(*(const ::edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> >*)arg[0]);
}

static void constructor_27824( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> >(*(const ::edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> >*)arg[0]);
  else ::new(mem) ::edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> >(*(const ::edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> >*)arg[0]);
}

static void constructor_27825( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> >();
  else ::new(mem) ::edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> >();
}

static void destructor_27826(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> >*)o)->::edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> >::~FwdPtr)();
}
static  void operator_27827( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> >*)o)->operator*)();
  else   (((const ::edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> >*)o)->operator*)();
}

static  void operator_27828( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> >*)o)->operator->)());
  else   (((const ::edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> >*)o)->operator->)();
}

static  void method_27829( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> >*)o)->get)());
  else   (((const ::edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> >*)o)->get)();
}

static  void method_27830( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> >*)o)->isNull)());
  else   (((const ::edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> >*)o)->isNull)();
}

static  void method_27831( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> >*)o)->isNonnull)());
  else   (((const ::edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> >*)o)->isNonnull)();
}

static  void operator_27832( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> >*)o)->operator!)());
  else   (((const ::edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> >*)o)->operator!)();
}

static  void method_27833( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> >*)o)->isAvailable)());
  else   (((const ::edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> >*)o)->isAvailable)();
}

static  void method_27834( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> >*)o)->isTransient)());
  else   (((const ::edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> >*)o)->isTransient)();
}

static  void method_27835( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::ProductID)((((const ::edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> >*)o)->id)());
  else   (((const ::edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> >*)o)->id)();
}

static  void method_27836( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> >*)o)->productGetter)());
  else   (((const ::edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> >*)o)->productGetter)();
}

static  void method_27837( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (unsigned long)((((const ::edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> >*)o)->key)());
  else   (((const ::edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> >*)o)->key)();
}

static  void method_27838( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> >*)o)->hasProductCache)());
  else   (((const ::edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> >*)o)->hasProductCache)();
}

static  void method_27839( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> >*)o)->refCore)();
  else   (((const ::edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> >*)o)->refCore)();
}

static  void method_27840( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> >*)o)->product)());
  else   (((const ::edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> >*)o)->product)();
}

static  void method_27841( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> >*)o)->ptr)();
  else   (((const ::edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> >*)o)->ptr)();
}

static  void method_27842( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> >*)o)->backPtr)();
  else   (((const ::edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> >*)o)->backPtr)();
}

static  void method_27843( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (short)((((::edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> >*)o)->Class_Version)());
  else   (((::edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> >*)o)->Class_Version)();
}

static void method_newdel_5305( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class FwdPtr<reco::FFTAnyJet<reco::JPTJet> > -------------------------------
void __edm__FwdPtr_reco__FFTAnyJet_reco__JPTJet_s__db_datamem(Reflex::Class*);
void __edm__FwdPtr_reco__FFTAnyJet_reco__JPTJet_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__FwdPtr_reco__FFTAnyJet_reco__JPTJet_s__datamem_bld(&__edm__FwdPtr_reco__FFTAnyJet_reco__JPTJet_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__FwdPtr_reco__FFTAnyJet_reco__JPTJet_s__funcmem_bld(&__edm__FwdPtr_reco__FFTAnyJet_reco__JPTJet_s__db_funcmem);
void __edm__FwdPtr_reco__FFTAnyJet_reco__JPTJet_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> >"), typeid(::edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> >), sizeof(::edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("ClassVersion"), ::edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> >::Class_Version())
  .AddTypedef(type_53, Reflex::Literal("edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> >::key_type"))
  .AddTypedef(type_8931, Reflex::Literal("edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> >::value_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_16292, type_16294), Reflex::Literal("operator="), operator_27823, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_16294), Reflex::Literal("FwdPtr"), constructor_27824, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("FwdPtr"), constructor_27825, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~FwdPtr"), destructor_27826, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_5305, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__FwdPtr_reco__FFTAnyJet_reco__JPTJet_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__FwdPtr_reco__FFTAnyJet_reco__JPTJet_s__funcmem_bld);
}

//------Delayed data member builder for class FwdPtr<reco::FFTAnyJet<reco::JPTJet> > -------------------
void __edm__FwdPtr_reco__FFTAnyJet_reco__JPTJet_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_5779, Reflex::Literal("ptr_"), OffsetOf(__shadow__::__edm__FwdPtr_reco__FFTAnyJet_reco__JPTJet_s_, ptr_), ::Reflex::PRIVATE)
  .AddDataMember(type_5779, Reflex::Literal("backPtr_"), OffsetOf(__shadow__::__edm__FwdPtr_reco__FFTAnyJet_reco__JPTJet_s_, backPtr_), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class FwdPtr<reco::FFTAnyJet<reco::JPTJet> > -------------------
void __edm__FwdPtr_reco__FFTAnyJet_reco__JPTJet_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_16424), Reflex::Literal("operator*"), operator_27827, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_16420), Reflex::Literal("operator->"), operator_27828, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_16420), Reflex::Literal("get"), method_27829, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("isNull"), method_27830, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("isNonnull"), method_27831, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("operator!"), operator_27832, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("isAvailable"), method_27833, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("isTransient"), method_27834, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_5905), Reflex::Literal("id"), method_27835, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_25623), Reflex::Literal("productGetter"), method_27836, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_53), Reflex::Literal("key"), method_27837, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("hasProductCache"), method_27838, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_29672), Reflex::Literal("refCore"), method_27839, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4427), Reflex::Literal("product"), method_27840, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_48069), Reflex::Literal("ptr"), method_27841, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_48069), Reflex::Literal("backPtr"), method_27842, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_484), Reflex::Literal("Class_Version"), method_27843, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC);
}
//------Stub functions for class vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> >,std::allocator<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > > > -------------------------------
static void constructor_16303( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > >();
  else ::new(mem) ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > >();
}

static void constructor_16304( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > >(*(const ::std::allocator<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > >*)arg[0]);
  else ::new(mem) ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > >(*(const ::std::allocator<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > >*)arg[0]);
}

static void constructor_16305( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if ( arg.size() == 1 ) {
    if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > >(*(::std::size_t*)arg[0]);
  else ::new(mem) ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > >(*(::std::size_t*)arg[0]);
  }
  else if ( arg.size() == 2 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > >(*(::std::size_t*)arg[0],
      *(const ::edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> >*)arg[1]);
  else ::new(mem) ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > >(*(::std::size_t*)arg[0],
      *(const ::edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> >*)arg[1]);
  }
  else if ( arg.size() == 3 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > >(*(::std::size_t*)arg[0],
      *(const ::edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> >*)arg[1],
      *(const ::std::allocator<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > >*)arg[2]);
  else ::new(mem) ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > >(*(::std::size_t*)arg[0],
      *(const ::edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> >*)arg[1],
      *(const ::std::allocator<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > >*)arg[2]);
  }
}

static void constructor_16306( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > >(*(const ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > >*)arg[0]);
  else ::new(mem) ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > >(*(const ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > >*)arg[0]);
}

static void destructor_16307(void*, void * o, const std::vector<void*>&, void *) {
(((::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > >*)o)->::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > >::~vector)();
}
static  void operator_16308( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > >*)o)->operator=)(*(const ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > >*)arg[0]);
  else   (((::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > >*)o)->operator=)(*(const ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > >*)arg[0]);
}

static  void method_16309( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > >*)o)->assign)(*(::std::size_t*)arg[0],
    *(const ::edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> >*)arg[1]);
}

static  void method_16310( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> >*,std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > > >)((((::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > >*)o)->begin)());
  else   (((::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > >*)o)->begin)();
}

static  void method_16311( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<const edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> >*,std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > > >)((((const ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > >*)o)->begin)());
  else   (((const ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > >*)o)->begin)();
}

static  void method_16312( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> >*,std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > > >)((((::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > >*)o)->end)());
  else   (((::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > >*)o)->end)();
}

static  void method_16313( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<const edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> >*,std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > > >)((((const ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > >*)o)->end)());
  else   (((const ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > >*)o)->end)();
}

static  void method_16318( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > >*)o)->size)());
  else   (((const ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > >*)o)->size)();
}

static  void method_16319( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > >*)o)->max_size)());
  else   (((const ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > >*)o)->max_size)();
}

static  void method_16320( void*, void* o, const std::vector<void*>& arg, void*)
{
  if ( arg.size() == 1 ) {
    (((::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > >*)o)->resize)(*(::std::size_t*)arg[0]);
  }
  else if ( arg.size() == 2 ) { 
    (((::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > >*)o)->resize)(*(::std::size_t*)arg[0],
      *(::edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> >*)arg[1]);
  }
}

static  void method_16321( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > >*)o)->capacity)());
  else   (((const ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > >*)o)->capacity)();
}

static  void method_16322( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > >*)o)->empty)());
  else   (((const ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > >*)o)->empty)();
}

static  void method_16323( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > >*)o)->reserve)(*(::std::size_t*)arg[0]);
}

static  void operator_16324( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > >*)o)->operator[])(*(::std::size_t*)arg[0]);
  else   (((::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > >*)o)->operator[])(*(::std::size_t*)arg[0]);
}

static  void operator_16325( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > >*)o)->operator[])(*(::std::size_t*)arg[0]);
  else   (((const ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > >*)o)->operator[])(*(::std::size_t*)arg[0]);
}

static  void method_16327( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > >*)o)->at)(*(::std::size_t*)arg[0]);
  else   (((::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > >*)o)->at)(*(::std::size_t*)arg[0]);
}

static  void method_16328( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > >*)o)->at)(*(::std::size_t*)arg[0]);
  else   (((const ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > >*)o)->at)(*(::std::size_t*)arg[0]);
}

static  void method_16329( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > >*)o)->front)();
  else   (((::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > >*)o)->front)();
}

static  void method_16330( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > >*)o)->front)();
  else   (((const ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > >*)o)->front)();
}

static  void method_16331( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > >*)o)->back)();
  else   (((::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > >*)o)->back)();
}

static  void method_16332( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > >*)o)->back)();
  else   (((const ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > >*)o)->back)();
}

static  void method_16333( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > >*)o)->data)());
  else   (((::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > >*)o)->data)();
}

static  void method_16334( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > >*)o)->data)());
  else   (((const ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > >*)o)->data)();
}

static  void method_16335( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > >*)o)->push_back)(*(const ::edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> >*)arg[0]);
}

static  void method_16336( void*, void* o, const std::vector<void*>&, void*)
{
  (((::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > >*)o)->pop_back)();
}

static  void method_16337( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> >*,std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > > >)((((::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > >*)o)->insert)(*(::__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> >*,std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > > >*)arg[0],
    *(const ::edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> >*)arg[1]));
  else   (((::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > >*)o)->insert)(*(::__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> >*,std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > > >*)arg[0],
    *(const ::edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> >*)arg[1]);
}

static  void method_16338( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > >*)o)->insert)(*(::__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> >*,std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > > >*)arg[0],
    *(::std::size_t*)arg[1],
    *(const ::edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> >*)arg[2]);
}

static  void method_16339( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> >*,std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > > >)((((::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > >*)o)->erase)(*(::__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> >*,std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > > >*)arg[0]));
  else   (((::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > >*)o)->erase)(*(::__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> >*,std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > > >*)arg[0]);
}

static  void method_16340( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> >*,std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > > >)((((::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > >*)o)->erase)(*(::__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> >*,std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > > >*)arg[0],
    *(::__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> >*,std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > > >*)arg[1]));
  else   (((::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > >*)o)->erase)(*(::__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> >*,std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > > >*)arg[0],
    *(::__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> >*,std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > > >*)arg[1]);
}

static  void method_16341( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > >*)o)->swap)(*(::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > >*)arg[0]);
}

static  void method_16342( void*, void* o, const std::vector<void*>&, void*)
{
  (((::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > >*)o)->clear)();
}

static void method_newdel_3117( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

static void method_x46( void* retaddr, void*, const std::vector<void*>&, void*)
{
  typedef std::vector<std::pair< ::Reflex::Base, int> > Bases_t;
  static Bases_t s_bases;
  if ( !s_bases.size() ) {
    s_bases.push_back(std::make_pair(::Reflex::Base( ::Reflex::TypeBuilder(Reflex::Literal("std::_Vector_base<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> >,std::allocator<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > > >")), ::Reflex::BaseOffset< ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > >,::std::_Vector_base<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> >,std::allocator<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > > > >::Get(),::Reflex::PROTECTED), 0));
  }
  if (retaddr) *(Bases_t**)retaddr = &s_bases;
}

static void method_x47( void* retaddr, void*, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**) retaddr = ::Reflex::Proxy< ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > > >::Generate();
  else ::Reflex::Proxy< ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > > >::Generate();
}

//------Dictionary for class vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> >,std::allocator<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > > > -------------------------------
void __std__vector_edm__FwdPtr_reco__FFTAnyJet_reco__JPTJet_s_s__db_datamem(Reflex::Class*);
void __std__vector_edm__FwdPtr_reco__FFTAnyJet_reco__JPTJet_s_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __std__vector_edm__FwdPtr_reco__FFTAnyJet_reco__JPTJet_s_s__datamem_bld(&__std__vector_edm__FwdPtr_reco__FFTAnyJet_reco__JPTJet_s_s__db_datamem);
Reflex::GenreflexMemberBuilder __std__vector_edm__FwdPtr_reco__FFTAnyJet_reco__JPTJet_s_s__funcmem_bld(&__std__vector_edm__FwdPtr_reco__FFTAnyJet_reco__JPTJet_s_s__db_funcmem);
void __std__vector_edm__FwdPtr_reco__FFTAnyJet_reco__JPTJet_s_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > >"), typeid(::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > >), sizeof(::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddBase(type_2541, ::Reflex::BaseOffset< ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > >, ::std::_Vector_base<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> >,std::allocator<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > > > >::Get(), ::Reflex::PROTECTED)
  .AddTypedef(type_5305, Reflex::Literal("std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > >::_Alloc_value_type"))
  .AddTypedef(type_2541, Reflex::Literal("std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > >::_Base"))
  .AddTypedef(type_3489, Reflex::Literal("std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > >::_Tp_alloc_type"))
  .AddTypedef(type_9696, Reflex::Literal("std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > >::_Alloc_traits"))
  .AddTypedef(type_5305, Reflex::Literal("std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > >::value_type"))
  .AddTypedef(type_11033, Reflex::Literal("std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > >::pointer"))
  .AddTypedef(type_16290, Reflex::Literal("std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > >::const_pointer"))
  .AddTypedef(type_16292, Reflex::Literal("std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > >::reference"))
  .AddTypedef(type_16294, Reflex::Literal("std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > >::const_reference"))
  .AddTypedef(type_9492, Reflex::Literal("std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > >::iterator"))
  .AddTypedef(type_9493, Reflex::Literal("std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > >::const_iterator"))
  .AddTypedef(type_3792, Reflex::Literal("std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > >::const_reverse_iterator"))
  .AddTypedef(type_3793, Reflex::Literal("std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > >::reverse_iterator"))
  .AddTypedef(type_3455, Reflex::Literal("std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > >::size_type"))
  .AddTypedef(type_3318, Reflex::Literal("std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > >::difference_type"))
  .AddTypedef(type_3489, Reflex::Literal("std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > >::allocator_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("vector"), constructor_16303, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_42412), Reflex::Literal("vector"), constructor_16304, 0, "__a", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_3455, type_16294, type_42412), Reflex::Literal("vector"), constructor_16305, 0, "__n;__value=_Tp();__a=_Alloc()", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_44149), Reflex::Literal("vector"), constructor_16306, 0, "__x", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~vector"), destructor_16307, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_3117, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getBasesTable"), method_x46, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddFunctionMember<void*(void)>(Reflex::Literal("createCollFuncTable"), method_x47, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandFunctionMemberBuilder(&__std__vector_edm__FwdPtr_reco__FFTAnyJet_reco__JPTJet_s_s__funcmem_bld);
}

//------Delayed data member builder for class vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> >,std::allocator<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > > > -------------------
void __std__vector_edm__FwdPtr_reco__FFTAnyJet_reco__JPTJet_s_s__db_datamem(Reflex::Class*) {

}
//------Delayed function member builder for class vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> >,std::allocator<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > > > -------------------
void __std__vector_edm__FwdPtr_reco__FFTAnyJet_reco__JPTJet_s_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_44150, type_44149), Reflex::Literal("operator="), operator_16308, 0, "__x", ::Reflex::PUBLIC | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_3455, type_16294), Reflex::Literal("assign"), method_16309, 0, "__n;__val", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_9492), Reflex::Literal("begin"), method_16310, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_9493), Reflex::Literal("begin"), method_16311, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_9492), Reflex::Literal("end"), method_16312, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_9493), Reflex::Literal("end"), method_16313, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3455), Reflex::Literal("size"), method_16318, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3455), Reflex::Literal("max_size"), method_16319, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_3455, type_5305), Reflex::Literal("resize"), method_16320, 0, "__new_size;__x=_Tp()", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3455), Reflex::Literal("capacity"), method_16321, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("empty"), method_16322, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_3455), Reflex::Literal("reserve"), method_16323, 0, "__n", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_16292, type_3455), Reflex::Literal("operator[]"), operator_16324, 0, "__n", ::Reflex::PUBLIC | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_16294, type_3455), Reflex::Literal("operator[]"), operator_16325, 0, "__n", ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_16292, type_3455), Reflex::Literal("at"), method_16327, 0, "__n", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_16294, type_3455), Reflex::Literal("at"), method_16328, 0, "__n", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_16292), Reflex::Literal("front"), method_16329, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_16294), Reflex::Literal("front"), method_16330, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_16292), Reflex::Literal("back"), method_16331, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_16294), Reflex::Literal("back"), method_16332, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_11033), Reflex::Literal("data"), method_16333, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_16290), Reflex::Literal("data"), method_16334, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_16294), Reflex::Literal("push_back"), method_16335, 0, "__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708), Reflex::Literal("pop_back"), method_16336, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_9492, type_9492, type_16294), Reflex::Literal("insert"), method_16337, 0, "__position;__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_9492, type_3455, type_16294), Reflex::Literal("insert"), method_16338, 0, "__position;__n;__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_9492, type_9492), Reflex::Literal("erase"), method_16339, 0, "__position", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_9492, type_9492, type_9492), Reflex::Literal("erase"), method_16340, 0, "__first;__last", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_44150), Reflex::Literal("swap"), method_16341, 0, "__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708), Reflex::Literal("clear"), method_16342, 0, 0, ::Reflex::PUBLIC);
}
//------Stub functions for class vector<reco::FFTAnyJet<reco::BasicJet>,std::allocator<reco::FFTAnyJet<reco::BasicJet> > > -------------------------------
static void constructor_17018( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<reco::FFTAnyJet<reco::BasicJet> >();
  else ::new(mem) ::std::vector<reco::FFTAnyJet<reco::BasicJet> >();
}

static void constructor_17019( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<reco::FFTAnyJet<reco::BasicJet> >(*(const ::std::allocator<reco::FFTAnyJet<reco::BasicJet> >*)arg[0]);
  else ::new(mem) ::std::vector<reco::FFTAnyJet<reco::BasicJet> >(*(const ::std::allocator<reco::FFTAnyJet<reco::BasicJet> >*)arg[0]);
}

static void constructor_17020( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if ( arg.size() == 1 ) {
    if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<reco::FFTAnyJet<reco::BasicJet> >(*(::std::size_t*)arg[0]);
  else ::new(mem) ::std::vector<reco::FFTAnyJet<reco::BasicJet> >(*(::std::size_t*)arg[0]);
  }
  else if ( arg.size() == 2 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<reco::FFTAnyJet<reco::BasicJet> >(*(::std::size_t*)arg[0],
      *(const ::reco::FFTAnyJet<reco::BasicJet>*)arg[1]);
  else ::new(mem) ::std::vector<reco::FFTAnyJet<reco::BasicJet> >(*(::std::size_t*)arg[0],
      *(const ::reco::FFTAnyJet<reco::BasicJet>*)arg[1]);
  }
  else if ( arg.size() == 3 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<reco::FFTAnyJet<reco::BasicJet> >(*(::std::size_t*)arg[0],
      *(const ::reco::FFTAnyJet<reco::BasicJet>*)arg[1],
      *(const ::std::allocator<reco::FFTAnyJet<reco::BasicJet> >*)arg[2]);
  else ::new(mem) ::std::vector<reco::FFTAnyJet<reco::BasicJet> >(*(::std::size_t*)arg[0],
      *(const ::reco::FFTAnyJet<reco::BasicJet>*)arg[1],
      *(const ::std::allocator<reco::FFTAnyJet<reco::BasicJet> >*)arg[2]);
  }
}

static void constructor_17021( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<reco::FFTAnyJet<reco::BasicJet> >(*(const ::std::vector<reco::FFTAnyJet<reco::BasicJet> >*)arg[0]);
  else ::new(mem) ::std::vector<reco::FFTAnyJet<reco::BasicJet> >(*(const ::std::vector<reco::FFTAnyJet<reco::BasicJet> >*)arg[0]);
}

static void destructor_17022(void*, void * o, const std::vector<void*>&, void *) {
(((::std::vector<reco::FFTAnyJet<reco::BasicJet> >*)o)->::std::vector<reco::FFTAnyJet<reco::BasicJet> >::~vector)();
}
static  void operator_17023( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<reco::FFTAnyJet<reco::BasicJet> >*)o)->operator=)(*(const ::std::vector<reco::FFTAnyJet<reco::BasicJet> >*)arg[0]);
  else   (((::std::vector<reco::FFTAnyJet<reco::BasicJet> >*)o)->operator=)(*(const ::std::vector<reco::FFTAnyJet<reco::BasicJet> >*)arg[0]);
}

static  void method_17024( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<reco::FFTAnyJet<reco::BasicJet> >*)o)->assign)(*(::std::size_t*)arg[0],
    *(const ::reco::FFTAnyJet<reco::BasicJet>*)arg[1]);
}

static  void method_17025( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<reco::FFTAnyJet<reco::BasicJet>*,std::vector<reco::FFTAnyJet<reco::BasicJet> > >)((((::std::vector<reco::FFTAnyJet<reco::BasicJet> >*)o)->begin)());
  else   (((::std::vector<reco::FFTAnyJet<reco::BasicJet> >*)o)->begin)();
}

static  void method_17026( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<const reco::FFTAnyJet<reco::BasicJet>*,std::vector<reco::FFTAnyJet<reco::BasicJet> > >)((((const ::std::vector<reco::FFTAnyJet<reco::BasicJet> >*)o)->begin)());
  else   (((const ::std::vector<reco::FFTAnyJet<reco::BasicJet> >*)o)->begin)();
}

static  void method_17027( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<reco::FFTAnyJet<reco::BasicJet>*,std::vector<reco::FFTAnyJet<reco::BasicJet> > >)((((::std::vector<reco::FFTAnyJet<reco::BasicJet> >*)o)->end)());
  else   (((::std::vector<reco::FFTAnyJet<reco::BasicJet> >*)o)->end)();
}

static  void method_17028( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<const reco::FFTAnyJet<reco::BasicJet>*,std::vector<reco::FFTAnyJet<reco::BasicJet> > >)((((const ::std::vector<reco::FFTAnyJet<reco::BasicJet> >*)o)->end)());
  else   (((const ::std::vector<reco::FFTAnyJet<reco::BasicJet> >*)o)->end)();
}

static  void method_17033( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::std::vector<reco::FFTAnyJet<reco::BasicJet> >*)o)->size)());
  else   (((const ::std::vector<reco::FFTAnyJet<reco::BasicJet> >*)o)->size)();
}

static  void method_17034( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::std::vector<reco::FFTAnyJet<reco::BasicJet> >*)o)->max_size)());
  else   (((const ::std::vector<reco::FFTAnyJet<reco::BasicJet> >*)o)->max_size)();
}

static  void method_17035( void*, void* o, const std::vector<void*>& arg, void*)
{
  if ( arg.size() == 1 ) {
    (((::std::vector<reco::FFTAnyJet<reco::BasicJet> >*)o)->resize)(*(::std::size_t*)arg[0]);
  }
  else if ( arg.size() == 2 ) { 
    (((::std::vector<reco::FFTAnyJet<reco::BasicJet> >*)o)->resize)(*(::std::size_t*)arg[0],
      *(::reco::FFTAnyJet<reco::BasicJet>*)arg[1]);
  }
}

static  void method_17036( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::std::vector<reco::FFTAnyJet<reco::BasicJet> >*)o)->capacity)());
  else   (((const ::std::vector<reco::FFTAnyJet<reco::BasicJet> >*)o)->capacity)();
}

static  void method_17037( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::std::vector<reco::FFTAnyJet<reco::BasicJet> >*)o)->empty)());
  else   (((const ::std::vector<reco::FFTAnyJet<reco::BasicJet> >*)o)->empty)();
}

static  void method_17038( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<reco::FFTAnyJet<reco::BasicJet> >*)o)->reserve)(*(::std::size_t*)arg[0]);
}

static  void operator_17039( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<reco::FFTAnyJet<reco::BasicJet> >*)o)->operator[])(*(::std::size_t*)arg[0]);
  else   (((::std::vector<reco::FFTAnyJet<reco::BasicJet> >*)o)->operator[])(*(::std::size_t*)arg[0]);
}

static  void operator_17040( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<reco::FFTAnyJet<reco::BasicJet> >*)o)->operator[])(*(::std::size_t*)arg[0]);
  else   (((const ::std::vector<reco::FFTAnyJet<reco::BasicJet> >*)o)->operator[])(*(::std::size_t*)arg[0]);
}

static  void method_17042( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<reco::FFTAnyJet<reco::BasicJet> >*)o)->at)(*(::std::size_t*)arg[0]);
  else   (((::std::vector<reco::FFTAnyJet<reco::BasicJet> >*)o)->at)(*(::std::size_t*)arg[0]);
}

static  void method_17043( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<reco::FFTAnyJet<reco::BasicJet> >*)o)->at)(*(::std::size_t*)arg[0]);
  else   (((const ::std::vector<reco::FFTAnyJet<reco::BasicJet> >*)o)->at)(*(::std::size_t*)arg[0]);
}

static  void method_17044( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<reco::FFTAnyJet<reco::BasicJet> >*)o)->front)();
  else   (((::std::vector<reco::FFTAnyJet<reco::BasicJet> >*)o)->front)();
}

static  void method_17045( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<reco::FFTAnyJet<reco::BasicJet> >*)o)->front)();
  else   (((const ::std::vector<reco::FFTAnyJet<reco::BasicJet> >*)o)->front)();
}

static  void method_17046( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<reco::FFTAnyJet<reco::BasicJet> >*)o)->back)();
  else   (((::std::vector<reco::FFTAnyJet<reco::BasicJet> >*)o)->back)();
}

static  void method_17047( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<reco::FFTAnyJet<reco::BasicJet> >*)o)->back)();
  else   (((const ::std::vector<reco::FFTAnyJet<reco::BasicJet> >*)o)->back)();
}

static  void method_17048( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((::std::vector<reco::FFTAnyJet<reco::BasicJet> >*)o)->data)());
  else   (((::std::vector<reco::FFTAnyJet<reco::BasicJet> >*)o)->data)();
}

static  void method_17049( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::std::vector<reco::FFTAnyJet<reco::BasicJet> >*)o)->data)());
  else   (((const ::std::vector<reco::FFTAnyJet<reco::BasicJet> >*)o)->data)();
}

static  void method_17050( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<reco::FFTAnyJet<reco::BasicJet> >*)o)->push_back)(*(const ::reco::FFTAnyJet<reco::BasicJet>*)arg[0]);
}

static  void method_17051( void*, void* o, const std::vector<void*>&, void*)
{
  (((::std::vector<reco::FFTAnyJet<reco::BasicJet> >*)o)->pop_back)();
}

static  void method_17052( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<reco::FFTAnyJet<reco::BasicJet>*,std::vector<reco::FFTAnyJet<reco::BasicJet> > >)((((::std::vector<reco::FFTAnyJet<reco::BasicJet> >*)o)->insert)(*(::__gnu_cxx::__normal_iterator<reco::FFTAnyJet<reco::BasicJet>*,std::vector<reco::FFTAnyJet<reco::BasicJet> > >*)arg[0],
    *(const ::reco::FFTAnyJet<reco::BasicJet>*)arg[1]));
  else   (((::std::vector<reco::FFTAnyJet<reco::BasicJet> >*)o)->insert)(*(::__gnu_cxx::__normal_iterator<reco::FFTAnyJet<reco::BasicJet>*,std::vector<reco::FFTAnyJet<reco::BasicJet> > >*)arg[0],
    *(const ::reco::FFTAnyJet<reco::BasicJet>*)arg[1]);
}

static  void method_17053( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<reco::FFTAnyJet<reco::BasicJet> >*)o)->insert)(*(::__gnu_cxx::__normal_iterator<reco::FFTAnyJet<reco::BasicJet>*,std::vector<reco::FFTAnyJet<reco::BasicJet> > >*)arg[0],
    *(::std::size_t*)arg[1],
    *(const ::reco::FFTAnyJet<reco::BasicJet>*)arg[2]);
}

static  void method_17054( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<reco::FFTAnyJet<reco::BasicJet>*,std::vector<reco::FFTAnyJet<reco::BasicJet> > >)((((::std::vector<reco::FFTAnyJet<reco::BasicJet> >*)o)->erase)(*(::__gnu_cxx::__normal_iterator<reco::FFTAnyJet<reco::BasicJet>*,std::vector<reco::FFTAnyJet<reco::BasicJet> > >*)arg[0]));
  else   (((::std::vector<reco::FFTAnyJet<reco::BasicJet> >*)o)->erase)(*(::__gnu_cxx::__normal_iterator<reco::FFTAnyJet<reco::BasicJet>*,std::vector<reco::FFTAnyJet<reco::BasicJet> > >*)arg[0]);
}

static  void method_17055( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<reco::FFTAnyJet<reco::BasicJet>*,std::vector<reco::FFTAnyJet<reco::BasicJet> > >)((((::std::vector<reco::FFTAnyJet<reco::BasicJet> >*)o)->erase)(*(::__gnu_cxx::__normal_iterator<reco::FFTAnyJet<reco::BasicJet>*,std::vector<reco::FFTAnyJet<reco::BasicJet> > >*)arg[0],
    *(::__gnu_cxx::__normal_iterator<reco::FFTAnyJet<reco::BasicJet>*,std::vector<reco::FFTAnyJet<reco::BasicJet> > >*)arg[1]));
  else   (((::std::vector<reco::FFTAnyJet<reco::BasicJet> >*)o)->erase)(*(::__gnu_cxx::__normal_iterator<reco::FFTAnyJet<reco::BasicJet>*,std::vector<reco::FFTAnyJet<reco::BasicJet> > >*)arg[0],
    *(::__gnu_cxx::__normal_iterator<reco::FFTAnyJet<reco::BasicJet>*,std::vector<reco::FFTAnyJet<reco::BasicJet> > >*)arg[1]);
}

static  void method_17056( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<reco::FFTAnyJet<reco::BasicJet> >*)o)->swap)(*(::std::vector<reco::FFTAnyJet<reco::BasicJet> >*)arg[0]);
}

static  void method_17057( void*, void* o, const std::vector<void*>&, void*)
{
  (((::std::vector<reco::FFTAnyJet<reco::BasicJet> >*)o)->clear)();
}

static void method_newdel_3134( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::std::vector<reco::FFTAnyJet<reco::BasicJet> > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::std::vector<reco::FFTAnyJet<reco::BasicJet> > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::std::vector<reco::FFTAnyJet<reco::BasicJet> > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::std::vector<reco::FFTAnyJet<reco::BasicJet> > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::std::vector<reco::FFTAnyJet<reco::BasicJet> > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

static void method_x49( void* retaddr, void*, const std::vector<void*>&, void*)
{
  typedef std::vector<std::pair< ::Reflex::Base, int> > Bases_t;
  static Bases_t s_bases;
  if ( !s_bases.size() ) {
    s_bases.push_back(std::make_pair(::Reflex::Base( ::Reflex::TypeBuilder(Reflex::Literal("std::_Vector_base<reco::FFTAnyJet<reco::BasicJet>,std::allocator<reco::FFTAnyJet<reco::BasicJet> > >")), ::Reflex::BaseOffset< ::std::vector<reco::FFTAnyJet<reco::BasicJet> >,::std::_Vector_base<reco::FFTAnyJet<reco::BasicJet>,std::allocator<reco::FFTAnyJet<reco::BasicJet> > > >::Get(),::Reflex::PROTECTED), 0));
  }
  if (retaddr) *(Bases_t**)retaddr = &s_bases;
}

static void method_x50( void* retaddr, void*, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**) retaddr = ::Reflex::Proxy< ::std::vector<reco::FFTAnyJet<reco::BasicJet> > >::Generate();
  else ::Reflex::Proxy< ::std::vector<reco::FFTAnyJet<reco::BasicJet> > >::Generate();
}

//------Dictionary for class vector<reco::FFTAnyJet<reco::BasicJet>,std::allocator<reco::FFTAnyJet<reco::BasicJet> > > -------------------------------
void __std__vector_reco__FFTAnyJet_reco__BasicJet_s__db_datamem(Reflex::Class*);
void __std__vector_reco__FFTAnyJet_reco__BasicJet_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __std__vector_reco__FFTAnyJet_reco__BasicJet_s__datamem_bld(&__std__vector_reco__FFTAnyJet_reco__BasicJet_s__db_datamem);
Reflex::GenreflexMemberBuilder __std__vector_reco__FFTAnyJet_reco__BasicJet_s__funcmem_bld(&__std__vector_reco__FFTAnyJet_reco__BasicJet_s__db_funcmem);
void __std__vector_reco__FFTAnyJet_reco__BasicJet_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("std::vector<reco::FFTAnyJet<reco::BasicJet> >"), typeid(::std::vector<reco::FFTAnyJet<reco::BasicJet> >), sizeof(::std::vector<reco::FFTAnyJet<reco::BasicJet> >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddBase(type_2573, ::Reflex::BaseOffset< ::std::vector<reco::FFTAnyJet<reco::BasicJet> >, ::std::_Vector_base<reco::FFTAnyJet<reco::BasicJet>,std::allocator<reco::FFTAnyJet<reco::BasicJet> > > >::Get(), ::Reflex::PROTECTED)
  .AddTypedef(type_8934, Reflex::Literal("std::vector<reco::FFTAnyJet<reco::BasicJet> >::_Alloc_value_type"))
  .AddTypedef(type_2573, Reflex::Literal("std::vector<reco::FFTAnyJet<reco::BasicJet> >::_Base"))
  .AddTypedef(type_3516, Reflex::Literal("std::vector<reco::FFTAnyJet<reco::BasicJet> >::_Tp_alloc_type"))
  .AddTypedef(type_9728, Reflex::Literal("std::vector<reco::FFTAnyJet<reco::BasicJet> >::_Alloc_traits"))
  .AddTypedef(type_8934, Reflex::Literal("std::vector<reco::FFTAnyJet<reco::BasicJet> >::value_type"))
  .AddTypedef(type_11640, Reflex::Literal("std::vector<reco::FFTAnyJet<reco::BasicJet> >::pointer"))
  .AddTypedef(type_17005, Reflex::Literal("std::vector<reco::FFTAnyJet<reco::BasicJet> >::const_pointer"))
  .AddTypedef(type_17007, Reflex::Literal("std::vector<reco::FFTAnyJet<reco::BasicJet> >::reference"))
  .AddTypedef(type_17009, Reflex::Literal("std::vector<reco::FFTAnyJet<reco::BasicJet> >::const_reference"))
  .AddTypedef(type_9553, Reflex::Literal("std::vector<reco::FFTAnyJet<reco::BasicJet> >::iterator"))
  .AddTypedef(type_9554, Reflex::Literal("std::vector<reco::FFTAnyJet<reco::BasicJet> >::const_iterator"))
  .AddTypedef(type_3870, Reflex::Literal("std::vector<reco::FFTAnyJet<reco::BasicJet> >::const_reverse_iterator"))
  .AddTypedef(type_3871, Reflex::Literal("std::vector<reco::FFTAnyJet<reco::BasicJet> >::reverse_iterator"))
  .AddTypedef(type_3455, Reflex::Literal("std::vector<reco::FFTAnyJet<reco::BasicJet> >::size_type"))
  .AddTypedef(type_3318, Reflex::Literal("std::vector<reco::FFTAnyJet<reco::BasicJet> >::difference_type"))
  .AddTypedef(type_3516, Reflex::Literal("std::vector<reco::FFTAnyJet<reco::BasicJet> >::allocator_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("vector"), constructor_17018, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_42828), Reflex::Literal("vector"), constructor_17019, 0, "__a", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_3455, type_17009, type_42828), Reflex::Literal("vector"), constructor_17020, 0, "__n;__value=_Tp();__a=_Alloc()", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_25865), Reflex::Literal("vector"), constructor_17021, 0, "__x", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~vector"), destructor_17022, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_3134, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getBasesTable"), method_x49, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddFunctionMember<void*(void)>(Reflex::Literal("createCollFuncTable"), method_x50, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandFunctionMemberBuilder(&__std__vector_reco__FFTAnyJet_reco__BasicJet_s__funcmem_bld);
}

//------Delayed data member builder for class vector<reco::FFTAnyJet<reco::BasicJet>,std::allocator<reco::FFTAnyJet<reco::BasicJet> > > -------------------
void __std__vector_reco__FFTAnyJet_reco__BasicJet_s__db_datamem(Reflex::Class*) {

}
//------Delayed function member builder for class vector<reco::FFTAnyJet<reco::BasicJet>,std::allocator<reco::FFTAnyJet<reco::BasicJet> > > -------------------
void __std__vector_reco__FFTAnyJet_reco__BasicJet_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_44179, type_25865), Reflex::Literal("operator="), operator_17023, 0, "__x", ::Reflex::PUBLIC | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_3455, type_17009), Reflex::Literal("assign"), method_17024, 0, "__n;__val", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_9553), Reflex::Literal("begin"), method_17025, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_9554), Reflex::Literal("begin"), method_17026, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_9553), Reflex::Literal("end"), method_17027, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_9554), Reflex::Literal("end"), method_17028, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3455), Reflex::Literal("size"), method_17033, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3455), Reflex::Literal("max_size"), method_17034, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_3455, type_8934), Reflex::Literal("resize"), method_17035, 0, "__new_size;__x=_Tp()", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3455), Reflex::Literal("capacity"), method_17036, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("empty"), method_17037, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_3455), Reflex::Literal("reserve"), method_17038, 0, "__n", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_17007, type_3455), Reflex::Literal("operator[]"), operator_17039, 0, "__n", ::Reflex::PUBLIC | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_17009, type_3455), Reflex::Literal("operator[]"), operator_17040, 0, "__n", ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_17007, type_3455), Reflex::Literal("at"), method_17042, 0, "__n", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_17009, type_3455), Reflex::Literal("at"), method_17043, 0, "__n", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_17007), Reflex::Literal("front"), method_17044, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_17009), Reflex::Literal("front"), method_17045, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_17007), Reflex::Literal("back"), method_17046, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_17009), Reflex::Literal("back"), method_17047, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_11640), Reflex::Literal("data"), method_17048, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_17005), Reflex::Literal("data"), method_17049, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_17009), Reflex::Literal("push_back"), method_17050, 0, "__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708), Reflex::Literal("pop_back"), method_17051, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_9553, type_9553, type_17009), Reflex::Literal("insert"), method_17052, 0, "__position;__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_9553, type_3455, type_17009), Reflex::Literal("insert"), method_17053, 0, "__position;__n;__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_9553, type_9553), Reflex::Literal("erase"), method_17054, 0, "__position", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_9553, type_9553, type_9553), Reflex::Literal("erase"), method_17055, 0, "__first;__last", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_44179), Reflex::Literal("swap"), method_17056, 0, "__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708), Reflex::Literal("clear"), method_17057, 0, 0, ::Reflex::PUBLIC);
}
//------Stub functions for class FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet>, std::allocator<reco::FFTAnyJet<reco::JPTJet> > >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet>, std::allocator<reco::FFTAnyJet<reco::JPTJet> > >, reco::FFTAnyJet<reco::JPTJet> > > -------------------------------
static  void operator_29435( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)o)->operator=)(*(const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)arg[0]);
  else   (((::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)o)->operator=)(*(const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)arg[0]);
}

static void constructor_29436( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >(*(const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)arg[0]);
  else ::new(mem) ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >(*(const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)arg[0]);
}

static void constructor_29437( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >();
  else ::new(mem) ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >();
}

static void constructor_29438( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >(*(const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)arg[0],
      *(const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)arg[1]);
  else ::new(mem) ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >(*(const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)arg[0],
      *(const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)arg[1]);
}

static void destructor_29439(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)o)->::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >::~FwdRef)();
}
static  void operator_29440( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)o)->operator*)();
  else   (((const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)o)->operator*)();
}

static  void operator_29441( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)o)->operator->)());
  else   (((const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)o)->operator->)();
}

static  void method_29442( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)o)->get)());
  else   (((const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)o)->get)();
}

static  void method_29443( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)o)->isNull)());
  else   (((const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)o)->isNull)();
}

static  void method_29444( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)o)->isNonnull)());
  else   (((const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)o)->isNonnull)();
}

static  void operator_29445( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)o)->operator!)());
  else   (((const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)o)->operator!)();
}

static  void method_29446( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)o)->ref)();
  else   (((const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)o)->ref)();
}

static  void method_29447( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)o)->backRef)();
  else   (((const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)o)->backRef)();
}

static  void method_29448( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)o)->productGetter)());
  else   (((const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)o)->productGetter)();
}

static  void method_29449( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)o)->product)());
  else   (((const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)o)->product)();
}

static  void method_29450( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::ProductID)((((const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)o)->id)());
  else   (((const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)o)->id)();
}

static  void method_29451( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (unsigned int)((((const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)o)->key)());
  else   (((const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)o)->key)();
}

static  void method_29452( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)o)->hasProductCache)());
  else   (((const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)o)->hasProductCache)();
}

static  void method_29453( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)o)->isAvailable)());
  else   (((const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)o)->isAvailable)();
}

static  void method_29454( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)o)->isTransient)());
  else   (((const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)o)->isTransient)();
}

static  void method_29455( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (short)((((::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)o)->Class_Version)());
  else   (((::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)o)->Class_Version)();
}

static void method_newdel_5494( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet>, std::allocator<reco::FFTAnyJet<reco::JPTJet> > >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet>, std::allocator<reco::FFTAnyJet<reco::JPTJet> > >, reco::FFTAnyJet<reco::JPTJet> > > -------------------------------
void __edm__FwdRef_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s__db_datamem(Reflex::Class*);
void __edm__FwdRef_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__FwdRef_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s__datamem_bld(&__edm__FwdRef_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__FwdRef_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s__funcmem_bld(&__edm__FwdRef_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s__db_funcmem);
void __edm__FwdRef_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >"), typeid(::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >), sizeof(::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("ClassVersion"), ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >::Class_Version())
  .AddTypedef(type_3119, Reflex::Literal("edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >::product_type"))
  .AddTypedef(type_8931, Reflex::Literal("edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >::value_type"))
  .AddTypedef(type_8931c, Reflex::Literal("edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >::element_type"))
  .AddTypedef(type_25824, Reflex::Literal("edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >::finder_type"))
  .AddTypedef(type_211, Reflex::Literal("edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >::argument_type"))
  .AddTypedef(type_211, Reflex::Literal("edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >::key_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_16357, type_16359), Reflex::Literal("operator="), operator_29435, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_16359), Reflex::Literal("FwdRef"), constructor_29436, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("FwdRef"), constructor_29437, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_47477, type_47477), Reflex::Literal("FwdRef"), constructor_29438, 0, "ref;backRef", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~FwdRef"), destructor_29439, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_5494, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__FwdRef_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__FwdRef_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s__funcmem_bld);
}

//------Delayed data member builder for class FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet>, std::allocator<reco::FFTAnyJet<reco::JPTJet> > >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet>, std::allocator<reco::FFTAnyJet<reco::JPTJet> > >, reco::FFTAnyJet<reco::JPTJet> > > -------------------
void __edm__FwdRef_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_5811, Reflex::Literal("ref_"), OffsetOf(__shadow__::__edm__FwdRef_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s_, ref_), ::Reflex::PRIVATE)
  .AddDataMember(type_5811, Reflex::Literal("backRef_"), OffsetOf(__shadow__::__edm__FwdRef_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s_, backRef_), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet>, std::allocator<reco::FFTAnyJet<reco::JPTJet> > >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet>, std::allocator<reco::FFTAnyJet<reco::JPTJet> > >, reco::FFTAnyJet<reco::JPTJet> > > -------------------
void __edm__FwdRef_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_16424), Reflex::Literal("operator*"), operator_29440, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_16420), Reflex::Literal("operator->"), operator_29441, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_16420), Reflex::Literal("get"), method_29442, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("isNull"), method_29443, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("isNonnull"), method_29444, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("operator!"), operator_29445, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_47477), Reflex::Literal("ref"), method_29446, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_47477), Reflex::Literal("backRef"), method_29447, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_25623), Reflex::Literal("productGetter"), method_29448, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_48111), Reflex::Literal("product"), method_29449, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_5905), Reflex::Literal("id"), method_29450, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_211), Reflex::Literal("key"), method_29451, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("hasProductCache"), method_29452, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("isAvailable"), method_29453, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("isTransient"), method_29454, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_484), Reflex::Literal("Class_Version"), method_29455, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC);
}
//------Stub functions for class vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet>, std::allocator<reco::FFTAnyJet<reco::JPTJet> > >, reco::FFTAnyJet<reco::JPTJet>, edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet>, std::allocator<reco::FFTAnyJet<reco::JPTJet> > >, reco::FFTAnyJet<reco::JPTJet> > >,std::allocator<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet>, std::allocator<reco::FFTAnyJet<reco::JPTJet> > >, reco::FFTAnyJet<reco::JPTJet>, edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet>, std::allocator<reco::FFTAnyJet<reco::JPTJet> > >, reco::FFTAnyJet<reco::JPTJet> > > > > -------------------------------
static void constructor_16368( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >();
  else ::new(mem) ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >();
}

static void constructor_16369( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >(*(const ::std::allocator<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)arg[0]);
  else ::new(mem) ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >(*(const ::std::allocator<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)arg[0]);
}

static void constructor_16370( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if ( arg.size() == 1 ) {
    if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >(*(::std::size_t*)arg[0]);
  else ::new(mem) ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >(*(::std::size_t*)arg[0]);
  }
  else if ( arg.size() == 2 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >(*(::std::size_t*)arg[0],
      *(const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)arg[1]);
  else ::new(mem) ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >(*(::std::size_t*)arg[0],
      *(const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)arg[1]);
  }
  else if ( arg.size() == 3 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >(*(::std::size_t*)arg[0],
      *(const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)arg[1],
      *(const ::std::allocator<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)arg[2]);
  else ::new(mem) ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >(*(::std::size_t*)arg[0],
      *(const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)arg[1],
      *(const ::std::allocator<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)arg[2]);
  }
}

static void constructor_16371( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >(*(const ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)arg[0]);
  else ::new(mem) ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >(*(const ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)arg[0]);
}

static void destructor_16372(void*, void * o, const std::vector<void*>&, void *) {
(((::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >::~vector)();
}
static  void operator_16373( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->operator=)(*(const ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)arg[0]);
  else   (((::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->operator=)(*(const ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)arg[0]);
}

static  void method_16374( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->assign)(*(::std::size_t*)arg[0],
    *(const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)arg[1]);
}

static  void method_16375( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*,std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > > >)((((::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->begin)());
  else   (((::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->begin)();
}

static  void method_16376( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<const edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*,std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > > >)((((const ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->begin)());
  else   (((const ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->begin)();
}

static  void method_16377( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*,std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > > >)((((::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->end)());
  else   (((::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->end)();
}

static  void method_16378( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<const edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*,std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > > >)((((const ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->end)());
  else   (((const ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->end)();
}

static  void method_16383( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->size)());
  else   (((const ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->size)();
}

static  void method_16384( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->max_size)());
  else   (((const ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->max_size)();
}

static  void method_16385( void*, void* o, const std::vector<void*>& arg, void*)
{
  if ( arg.size() == 1 ) {
    (((::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->resize)(*(::std::size_t*)arg[0]);
  }
  else if ( arg.size() == 2 ) { 
    (((::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->resize)(*(::std::size_t*)arg[0],
      *(::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)arg[1]);
  }
}

static  void method_16386( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->capacity)());
  else   (((const ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->capacity)();
}

static  void method_16387( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->empty)());
  else   (((const ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->empty)();
}

static  void method_16388( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->reserve)(*(::std::size_t*)arg[0]);
}

static  void operator_16389( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->operator[])(*(::std::size_t*)arg[0]);
  else   (((::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->operator[])(*(::std::size_t*)arg[0]);
}

static  void operator_16390( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->operator[])(*(::std::size_t*)arg[0]);
  else   (((const ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->operator[])(*(::std::size_t*)arg[0]);
}

static  void method_16392( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->at)(*(::std::size_t*)arg[0]);
  else   (((::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->at)(*(::std::size_t*)arg[0]);
}

static  void method_16393( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->at)(*(::std::size_t*)arg[0]);
  else   (((const ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->at)(*(::std::size_t*)arg[0]);
}

static  void method_16394( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->front)();
  else   (((::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->front)();
}

static  void method_16395( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->front)();
  else   (((const ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->front)();
}

static  void method_16396( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->back)();
  else   (((::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->back)();
}

static  void method_16397( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->back)();
  else   (((const ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->back)();
}

static  void method_16398( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->data)());
  else   (((::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->data)();
}

static  void method_16399( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->data)());
  else   (((const ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->data)();
}

static  void method_16400( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->push_back)(*(const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)arg[0]);
}

static  void method_16401( void*, void* o, const std::vector<void*>&, void*)
{
  (((::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->pop_back)();
}

static  void method_16402( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*,std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > > >)((((::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->insert)(*(::__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*,std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > > >*)arg[0],
    *(const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)arg[1]));
  else   (((::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->insert)(*(::__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*,std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > > >*)arg[0],
    *(const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)arg[1]);
}

static  void method_16403( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->insert)(*(::__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*,std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > > >*)arg[0],
    *(::std::size_t*)arg[1],
    *(const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)arg[2]);
}

static  void method_16404( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*,std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > > >)((((::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->erase)(*(::__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*,std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > > >*)arg[0]));
  else   (((::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->erase)(*(::__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*,std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > > >*)arg[0]);
}

static  void method_16405( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*,std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > > >)((((::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->erase)(*(::__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*,std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > > >*)arg[0],
    *(::__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*,std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > > >*)arg[1]));
  else   (((::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->erase)(*(::__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*,std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > > >*)arg[0],
    *(::__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*,std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > > >*)arg[1]);
}

static  void method_16406( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->swap)(*(::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)arg[0]);
}

static  void method_16407( void*, void* o, const std::vector<void*>&, void*)
{
  (((::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->clear)();
}

static void method_newdel_3118( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

static void method_x53( void* retaddr, void*, const std::vector<void*>&, void*)
{
  typedef std::vector<std::pair< ::Reflex::Base, int> > Bases_t;
  static Bases_t s_bases;
  if ( !s_bases.size() ) {
    s_bases.push_back(std::make_pair(::Reflex::Base( ::Reflex::TypeBuilder(Reflex::Literal("std::_Vector_base<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >,std::allocator<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > > >")), ::Reflex::BaseOffset< ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >,::std::_Vector_base<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >,std::allocator<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > > > >::Get(),::Reflex::PROTECTED), 0));
  }
  if (retaddr) *(Bases_t**)retaddr = &s_bases;
}

static void method_x54( void* retaddr, void*, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**) retaddr = ::Reflex::Proxy< ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > > >::Generate();
  else ::Reflex::Proxy< ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > > >::Generate();
}

//------Dictionary for class vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet>, std::allocator<reco::FFTAnyJet<reco::JPTJet> > >, reco::FFTAnyJet<reco::JPTJet>, edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet>, std::allocator<reco::FFTAnyJet<reco::JPTJet> > >, reco::FFTAnyJet<reco::JPTJet> > >,std::allocator<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet>, std::allocator<reco::FFTAnyJet<reco::JPTJet> > >, reco::FFTAnyJet<reco::JPTJet>, edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet>, std::allocator<reco::FFTAnyJet<reco::JPTJet> > >, reco::FFTAnyJet<reco::JPTJet> > > > > -------------------------------
void __std__vector_edm__FwdRef_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s_s__db_datamem(Reflex::Class*);
void __std__vector_edm__FwdRef_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __std__vector_edm__FwdRef_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s_s__datamem_bld(&__std__vector_edm__FwdRef_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s_s__db_datamem);
Reflex::GenreflexMemberBuilder __std__vector_edm__FwdRef_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s_s__funcmem_bld(&__std__vector_edm__FwdRef_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s_s__db_funcmem);
void __std__vector_edm__FwdRef_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >"), typeid(::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >), sizeof(::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddBase(type_2542, ::Reflex::BaseOffset< ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >, ::std::_Vector_base<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >,std::allocator<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > > > >::Get(), ::Reflex::PROTECTED)
  .AddTypedef(type_5494, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >::_Alloc_value_type"))
  .AddTypedef(type_2542, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >::_Base"))
  .AddTypedef(type_3490, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >::_Tp_alloc_type"))
  .AddTypedef(type_9697, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >::_Alloc_traits"))
  .AddTypedef(type_5494, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >::value_type"))
  .AddTypedef(type_11052, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >::pointer"))
  .AddTypedef(type_16355, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >::const_pointer"))
  .AddTypedef(type_16357, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >::reference"))
  .AddTypedef(type_16359, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >::const_reference"))
  .AddTypedef(type_9494, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >::iterator"))
  .AddTypedef(type_9495, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >::const_iterator"))
  .AddTypedef(type_3794, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >::const_reverse_iterator"))
  .AddTypedef(type_3795, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >::reverse_iterator"))
  .AddTypedef(type_3455, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >::size_type"))
  .AddTypedef(type_3318, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >::difference_type"))
  .AddTypedef(type_3490, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >::allocator_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("vector"), constructor_16368, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_42425), Reflex::Literal("vector"), constructor_16369, 0, "__a", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_3455, type_16359, type_42425), Reflex::Literal("vector"), constructor_16370, 0, "__n;__value=_Tp();__a=_Alloc()", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_44152), Reflex::Literal("vector"), constructor_16371, 0, "__x", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~vector"), destructor_16372, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_3118, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getBasesTable"), method_x53, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddFunctionMember<void*(void)>(Reflex::Literal("createCollFuncTable"), method_x54, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandFunctionMemberBuilder(&__std__vector_edm__FwdRef_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s_s__funcmem_bld);
}

//------Delayed data member builder for class vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet>, std::allocator<reco::FFTAnyJet<reco::JPTJet> > >, reco::FFTAnyJet<reco::JPTJet>, edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet>, std::allocator<reco::FFTAnyJet<reco::JPTJet> > >, reco::FFTAnyJet<reco::JPTJet> > >,std::allocator<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet>, std::allocator<reco::FFTAnyJet<reco::JPTJet> > >, reco::FFTAnyJet<reco::JPTJet>, edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet>, std::allocator<reco::FFTAnyJet<reco::JPTJet> > >, reco::FFTAnyJet<reco::JPTJet> > > > > -------------------
void __std__vector_edm__FwdRef_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s_s__db_datamem(Reflex::Class*) {

}
//------Delayed function member builder for class vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet>, std::allocator<reco::FFTAnyJet<reco::JPTJet> > >, reco::FFTAnyJet<reco::JPTJet>, edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet>, std::allocator<reco::FFTAnyJet<reco::JPTJet> > >, reco::FFTAnyJet<reco::JPTJet> > >,std::allocator<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet>, std::allocator<reco::FFTAnyJet<reco::JPTJet> > >, reco::FFTAnyJet<reco::JPTJet>, edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet>, std::allocator<reco::FFTAnyJet<reco::JPTJet> > >, reco::FFTAnyJet<reco::JPTJet> > > > > -------------------
void __std__vector_edm__FwdRef_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_44153, type_44152), Reflex::Literal("operator="), operator_16373, 0, "__x", ::Reflex::PUBLIC | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_3455, type_16359), Reflex::Literal("assign"), method_16374, 0, "__n;__val", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_9494), Reflex::Literal("begin"), method_16375, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_9495), Reflex::Literal("begin"), method_16376, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_9494), Reflex::Literal("end"), method_16377, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_9495), Reflex::Literal("end"), method_16378, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3455), Reflex::Literal("size"), method_16383, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3455), Reflex::Literal("max_size"), method_16384, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_3455, type_5494), Reflex::Literal("resize"), method_16385, 0, "__new_size;__x=_Tp()", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3455), Reflex::Literal("capacity"), method_16386, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("empty"), method_16387, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_3455), Reflex::Literal("reserve"), method_16388, 0, "__n", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_16357, type_3455), Reflex::Literal("operator[]"), operator_16389, 0, "__n", ::Reflex::PUBLIC | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_16359, type_3455), Reflex::Literal("operator[]"), operator_16390, 0, "__n", ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_16357, type_3455), Reflex::Literal("at"), method_16392, 0, "__n", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_16359, type_3455), Reflex::Literal("at"), method_16393, 0, "__n", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_16357), Reflex::Literal("front"), method_16394, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_16359), Reflex::Literal("front"), method_16395, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_16357), Reflex::Literal("back"), method_16396, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_16359), Reflex::Literal("back"), method_16397, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_11052), Reflex::Literal("data"), method_16398, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_16355), Reflex::Literal("data"), method_16399, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_16359), Reflex::Literal("push_back"), method_16400, 0, "__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708), Reflex::Literal("pop_back"), method_16401, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_9494, type_9494, type_16359), Reflex::Literal("insert"), method_16402, 0, "__position;__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_9494, type_3455, type_16359), Reflex::Literal("insert"), method_16403, 0, "__position;__n;__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_9494, type_9494), Reflex::Literal("erase"), method_16404, 0, "__position", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_9494, type_9494, type_9494), Reflex::Literal("erase"), method_16405, 0, "__first;__last", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_44153), Reflex::Literal("swap"), method_16406, 0, "__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708), Reflex::Literal("clear"), method_16407, 0, 0, ::Reflex::PUBLIC);
}
//------Stub functions for class Ref<std::vector<reco::FFTAnyJet<reco::JPTJet>, std::allocator<reco::FFTAnyJet<reco::JPTJet> > >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet>, std::allocator<reco::FFTAnyJet<reco::JPTJet> > >, reco::FFTAnyJet<reco::JPTJet> > > -------------------------------
static  void operator_30841( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)o)->operator=)(*(const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)arg[0]);
  else   (((::edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)o)->operator=)(*(const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)arg[0]);
}

static void constructor_30842( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >(*(const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)arg[0]);
  else ::new(mem) ::edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >(*(const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)arg[0]);
}

static void constructor_30843( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >();
  else ::new(mem) ::edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >();
}

static void constructor_30844( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if ( arg.size() == 2 ) {
    if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >(*(const ::edm::Handle<std::vector<reco::FFTAnyJet<reco::JPTJet> > >*)arg[0],
      *(unsigned int*)arg[1]);
  else ::new(mem) ::edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >(*(const ::edm::Handle<std::vector<reco::FFTAnyJet<reco::JPTJet> > >*)arg[0],
      *(unsigned int*)arg[1]);
  }
  else if ( arg.size() == 3 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >(*(const ::edm::Handle<std::vector<reco::FFTAnyJet<reco::JPTJet> > >*)arg[0],
      *(unsigned int*)arg[1],
      *(bool*)arg[2]);
  else ::new(mem) ::edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >(*(const ::edm::Handle<std::vector<reco::FFTAnyJet<reco::JPTJet> > >*)arg[0],
      *(unsigned int*)arg[1],
      *(bool*)arg[2]);
  }
}

static void constructor_30845( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if ( arg.size() == 2 ) {
    if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >(*(const ::edm::OrphanHandle<std::vector<reco::FFTAnyJet<reco::JPTJet> > >*)arg[0],
      *(unsigned int*)arg[1]);
  else ::new(mem) ::edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >(*(const ::edm::OrphanHandle<std::vector<reco::FFTAnyJet<reco::JPTJet> > >*)arg[0],
      *(unsigned int*)arg[1]);
  }
  else if ( arg.size() == 3 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >(*(const ::edm::OrphanHandle<std::vector<reco::FFTAnyJet<reco::JPTJet> > >*)arg[0],
      *(unsigned int*)arg[1],
      *(bool*)arg[2]);
  else ::new(mem) ::edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >(*(const ::edm::OrphanHandle<std::vector<reco::FFTAnyJet<reco::JPTJet> > >*)arg[0],
      *(unsigned int*)arg[1],
      *(bool*)arg[2]);
  }
}

static void constructor_30846( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if ( arg.size() == 2 ) {
    if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >(*(const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)arg[0],
      *(unsigned int*)arg[1]);
  else ::new(mem) ::edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >(*(const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)arg[0],
      *(unsigned int*)arg[1]);
  }
  else if ( arg.size() == 3 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >(*(const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)arg[0],
      *(unsigned int*)arg[1],
      *(bool*)arg[2]);
  else ::new(mem) ::edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >(*(const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)arg[0],
      *(unsigned int*)arg[1],
      *(bool*)arg[2]);
  }
}

static void constructor_30847( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if ( arg.size() == 2 ) {
    if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >((const ::std::vector<reco::FFTAnyJet<reco::JPTJet> >*)arg[0],
      *(unsigned int*)arg[1]);
  else ::new(mem) ::edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >((const ::std::vector<reco::FFTAnyJet<reco::JPTJet> >*)arg[0],
      *(unsigned int*)arg[1]);
  }
  else if ( arg.size() == 3 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >((const ::std::vector<reco::FFTAnyJet<reco::JPTJet> >*)arg[0],
      *(unsigned int*)arg[1],
      *(bool*)arg[2]);
  else ::new(mem) ::edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >((const ::std::vector<reco::FFTAnyJet<reco::JPTJet> >*)arg[0],
      *(unsigned int*)arg[1],
      *(bool*)arg[2]);
  }
}

static void constructor_30848( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if ( arg.size() == 2 ) {
    if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >(*(const ::edm::TestHandle<std::vector<reco::FFTAnyJet<reco::JPTJet> > >*)arg[0],
      *(unsigned int*)arg[1]);
  else ::new(mem) ::edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >(*(const ::edm::TestHandle<std::vector<reco::FFTAnyJet<reco::JPTJet> > >*)arg[0],
      *(unsigned int*)arg[1]);
  }
  else if ( arg.size() == 3 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >(*(const ::edm::TestHandle<std::vector<reco::FFTAnyJet<reco::JPTJet> > >*)arg[0],
      *(unsigned int*)arg[1],
      *(bool*)arg[2]);
  else ::new(mem) ::edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >(*(const ::edm::TestHandle<std::vector<reco::FFTAnyJet<reco::JPTJet> > >*)arg[0],
      *(unsigned int*)arg[1],
      *(bool*)arg[2]);
  }
}

static void constructor_30849( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >(*(const ::edm::ProductID*)arg[0],
      *(unsigned int*)arg[1],
      (const ::edm::EDProductGetter*)arg[2]);
  else ::new(mem) ::edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >(*(const ::edm::ProductID*)arg[0],
      *(unsigned int*)arg[1],
      (const ::edm::EDProductGetter*)arg[2]);
}

static void constructor_30850( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >(*(const ::edm::ProductID*)arg[0],
      (const ::reco::FFTAnyJet<reco::JPTJet>*)arg[1],
      *(unsigned int*)arg[2],
      (const ::std::vector<reco::FFTAnyJet<reco::JPTJet> >*)arg[3]);
  else ::new(mem) ::edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >(*(const ::edm::ProductID*)arg[0],
      (const ::reco::FFTAnyJet<reco::JPTJet>*)arg[1],
      *(unsigned int*)arg[2],
      (const ::std::vector<reco::FFTAnyJet<reco::JPTJet> >*)arg[3]);
}

static void constructor_30851( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >(*(const ::edm::ProductID*)arg[0]);
  else ::new(mem) ::edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >(*(const ::edm::ProductID*)arg[0]);
}

static void constructor_30852( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >(*(const ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::JPTJet> > >*)arg[0],
      *(unsigned int*)arg[1]);
  else ::new(mem) ::edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >(*(const ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::JPTJet> > >*)arg[0],
      *(unsigned int*)arg[1]);
}

static void destructor_30853(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)o)->::edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >::~Ref)();
}
static  void operator_30854( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)o)->operator*)();
  else   (((const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)o)->operator*)();
}

static  void operator_30855( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)o)->operator->)());
  else   (((const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)o)->operator->)();
}

static  void method_30856( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)o)->get)());
  else   (((const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)o)->get)();
}

static  void method_30857( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)o)->isNull)());
  else   (((const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)o)->isNull)();
}

static  void method_30858( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)o)->isNonnull)());
  else   (((const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)o)->isNonnull)();
}

static  void operator_30859( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)o)->operator!)());
  else   (((const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)o)->operator!)();
}

static  void method_30860( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::ProductID)((((const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)o)->id)());
  else   (((const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)o)->id)();
}

static  void method_30861( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)o)->productGetter)());
  else   (((const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)o)->productGetter)();
}

static  void method_30862( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)o)->product)());
  else   (((const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)o)->product)();
}

static  void method_30863( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (unsigned int)((((const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)o)->key)());
  else   (((const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)o)->key)();
}

static  void method_30864( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (unsigned int)((((const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)o)->index)());
  else   (((const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)o)->index)();
}

static  void method_30865( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)o)->hasProductCache)());
  else   (((const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)o)->hasProductCache)();
}

static  void method_30866( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)o)->isAvailable)());
  else   (((const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)o)->isAvailable)();
}

static  void method_30867( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)o)->isTransient)());
  else   (((const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)o)->isTransient)();
}

static  void method_30868( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)o)->refCore)();
  else   (((const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)o)->refCore)();
}

static  void method_30869( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (short)((((::edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)o)->Class_Version)());
  else   (((::edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)o)->Class_Version)();
}

static void constructor_30870( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >(*(const ::edm::RefCore*)arg[0],
      *(const unsigned int*)arg[1]);
  else ::new(mem) ::edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >(*(const ::edm::RefCore*)arg[0],
      *(const unsigned int*)arg[1]);
}

static void method_newdel_5811( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class Ref<std::vector<reco::FFTAnyJet<reco::JPTJet>, std::allocator<reco::FFTAnyJet<reco::JPTJet> > >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet>, std::allocator<reco::FFTAnyJet<reco::JPTJet> > >, reco::FFTAnyJet<reco::JPTJet> > > -------------------------------
void __edm__Ref_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s__db_datamem(Reflex::Class*);
void __edm__Ref_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__Ref_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s__datamem_bld(&__edm__Ref_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__Ref_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s__funcmem_bld(&__edm__Ref_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s__db_funcmem);
void __edm__Ref_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >"), typeid(::edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >), sizeof(::edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("ClassVersion"), ::edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >::Class_Version())
  .AddTypedef(type_8931, Reflex::Literal("edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >::T"))
  .AddTypedef(type_25824, Reflex::Literal("edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >::F"))
  .AddTypedef(type_27544, Reflex::Literal("edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >::VF"))
  .AddTypedef(type_27543, Reflex::Literal("edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >::VBF"))
  .AddTypedef(type_3119, Reflex::Literal("edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >::product_type"))
  .AddTypedef(type_8931, Reflex::Literal("edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >::value_type"))
  .AddTypedef(type_8931c, Reflex::Literal("edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >::element_type"))
  .AddTypedef(type_25824, Reflex::Literal("edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >::finder_type"))
  .AddTypedef(type_211, Reflex::Literal("edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >::argument_type"))
  .AddTypedef(type_211, Reflex::Literal("edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >::key_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_48907, type_47477), Reflex::Literal("operator="), operator_30841, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_47477), Reflex::Literal("Ref"), constructor_30842, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("Ref"), constructor_30843, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_48819, type_211, type_1593), Reflex::Literal("Ref"), constructor_30844, 0, "handle;itemKey;setNow=true", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_48820, type_211, type_1593), Reflex::Literal("Ref"), constructor_30845, 0, "handle;itemKey;setNow=true", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_48110, type_211, type_1593), Reflex::Literal("Ref"), constructor_30846, 0, "refvector;itemKey;setNow=true", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_48111, type_211, type_1593), Reflex::Literal("Ref"), constructor_30847, 0, "iProduct;iItemKey;iSetNow=true", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_48821, type_211, type_1593), Reflex::Literal("Ref"), constructor_30848, 0, "handle;itemKey;setNow=true", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_25503, type_211, type_25623), Reflex::Literal("Ref"), constructor_30849, 0, "productID;itemKey;prodGetter", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_25503, type_16420, type_211, type_48111), Reflex::Literal("Ref"), constructor_30850, 0, "iProductID;;iItemKey;iProduct", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_25503), Reflex::Literal("Ref"), constructor_30851, 0, "iId", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_48818, type_211), Reflex::Literal("Ref"), constructor_30852, 0, "refProd;itemKey", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~Ref"), destructor_30853, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_29672, type_13040), Reflex::Literal("Ref"), constructor_30870, 0, "iRefCore;iKey", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_5811, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__Ref_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__Ref_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s__funcmem_bld);
}

//------Delayed data member builder for class Ref<std::vector<reco::FFTAnyJet<reco::JPTJet>, std::allocator<reco::FFTAnyJet<reco::JPTJet> > >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet>, std::allocator<reco::FFTAnyJet<reco::JPTJet> > >, reco::FFTAnyJet<reco::JPTJet> > > -------------------
void __edm__Ref_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_5268, Reflex::Literal("product_"), OffsetOf(__shadow__::__edm__Ref_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s_, product_), ::Reflex::PRIVATE | ::Reflex::MUTABLE);
}
//------Delayed function member builder for class Ref<std::vector<reco::FFTAnyJet<reco::JPTJet>, std::allocator<reco::FFTAnyJet<reco::JPTJet> > >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet>, std::allocator<reco::FFTAnyJet<reco::JPTJet> > >, reco::FFTAnyJet<reco::JPTJet> > > -------------------
void __edm__Ref_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_16424), Reflex::Literal("operator*"), operator_30854, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_16420), Reflex::Literal("operator->"), operator_30855, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_16420), Reflex::Literal("get"), method_30856, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("isNull"), method_30857, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("isNonnull"), method_30858, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("operator!"), operator_30859, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_5905), Reflex::Literal("id"), method_30860, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_25623), Reflex::Literal("productGetter"), method_30861, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_48111), Reflex::Literal("product"), method_30862, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_211), Reflex::Literal("key"), method_30863, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_211), Reflex::Literal("index"), method_30864, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("hasProductCache"), method_30865, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("isAvailable"), method_30866, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("isTransient"), method_30867, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_29672), Reflex::Literal("refCore"), method_30868, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_484), Reflex::Literal("Class_Version"), method_30869, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC);
}
//------Stub functions for class FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet>, std::allocator<reco::FFTAnyJet<reco::BasicJet> > >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet>, std::allocator<reco::FFTAnyJet<reco::BasicJet> > >, reco::FFTAnyJet<reco::BasicJet> > > -------------------------------
static  void operator_29522( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)o)->operator=)(*(const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)arg[0]);
  else   (((::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)o)->operator=)(*(const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)arg[0]);
}

static void constructor_29523( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >(*(const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)arg[0]);
  else ::new(mem) ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >(*(const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)arg[0]);
}

static void constructor_29524( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >();
  else ::new(mem) ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >();
}

static void constructor_29525( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >(*(const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)arg[0],
      *(const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)arg[1]);
  else ::new(mem) ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >(*(const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)arg[0],
      *(const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)arg[1]);
}

static void destructor_29526(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)o)->::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >::~FwdRef)();
}
static  void operator_29527( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)o)->operator*)();
  else   (((const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)o)->operator*)();
}

static  void operator_29528( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)o)->operator->)());
  else   (((const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)o)->operator->)();
}

static  void method_29529( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)o)->get)());
  else   (((const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)o)->get)();
}

static  void method_29530( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)o)->isNull)());
  else   (((const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)o)->isNull)();
}

static  void method_29531( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)o)->isNonnull)());
  else   (((const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)o)->isNonnull)();
}

static  void operator_29532( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)o)->operator!)());
  else   (((const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)o)->operator!)();
}

static  void method_29533( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)o)->ref)();
  else   (((const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)o)->ref)();
}

static  void method_29534( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)o)->backRef)();
  else   (((const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)o)->backRef)();
}

static  void method_29535( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)o)->productGetter)());
  else   (((const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)o)->productGetter)();
}

static  void method_29536( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)o)->product)());
  else   (((const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)o)->product)();
}

static  void method_29537( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::ProductID)((((const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)o)->id)());
  else   (((const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)o)->id)();
}

static  void method_29538( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (unsigned int)((((const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)o)->key)());
  else   (((const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)o)->key)();
}

static  void method_29539( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)o)->hasProductCache)());
  else   (((const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)o)->hasProductCache)();
}

static  void method_29540( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)o)->isAvailable)());
  else   (((const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)o)->isAvailable)();
}

static  void method_29541( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)o)->isTransient)());
  else   (((const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)o)->isTransient)();
}

static  void method_29542( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (short)((((::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)o)->Class_Version)());
  else   (((::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)o)->Class_Version)();
}

static void method_newdel_5497( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet>, std::allocator<reco::FFTAnyJet<reco::BasicJet> > >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet>, std::allocator<reco::FFTAnyJet<reco::BasicJet> > >, reco::FFTAnyJet<reco::BasicJet> > > -------------------------------
void __edm__FwdRef_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s__db_datamem(Reflex::Class*);
void __edm__FwdRef_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__FwdRef_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s__datamem_bld(&__edm__FwdRef_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__FwdRef_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s__funcmem_bld(&__edm__FwdRef_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s__db_funcmem);
void __edm__FwdRef_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >"), typeid(::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >), sizeof(::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("ClassVersion"), ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >::Class_Version())
  .AddTypedef(type_3134, Reflex::Literal("edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >::product_type"))
  .AddTypedef(type_8934, Reflex::Literal("edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >::value_type"))
  .AddTypedef(type_8934c, Reflex::Literal("edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >::element_type"))
  .AddTypedef(type_25860, Reflex::Literal("edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >::finder_type"))
  .AddTypedef(type_211, Reflex::Literal("edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >::argument_type"))
  .AddTypedef(type_211, Reflex::Literal("edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >::key_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_16942, type_16944), Reflex::Literal("operator="), operator_29522, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_16944), Reflex::Literal("FwdRef"), constructor_29523, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("FwdRef"), constructor_29524, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_47519, type_47519), Reflex::Literal("FwdRef"), constructor_29525, 0, "ref;backRef", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~FwdRef"), destructor_29526, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_5497, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__FwdRef_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__FwdRef_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s__funcmem_bld);
}

//------Delayed data member builder for class FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet>, std::allocator<reco::FFTAnyJet<reco::BasicJet> > >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet>, std::allocator<reco::FFTAnyJet<reco::BasicJet> > >, reco::FFTAnyJet<reco::BasicJet> > > -------------------
void __edm__FwdRef_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_5815, Reflex::Literal("ref_"), OffsetOf(__shadow__::__edm__FwdRef_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s_, ref_), ::Reflex::PRIVATE)
  .AddDataMember(type_5815, Reflex::Literal("backRef_"), OffsetOf(__shadow__::__edm__FwdRef_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s_, backRef_), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet>, std::allocator<reco::FFTAnyJet<reco::BasicJet> > >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet>, std::allocator<reco::FFTAnyJet<reco::BasicJet> > >, reco::FFTAnyJet<reco::BasicJet> > > -------------------
void __edm__FwdRef_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_17009), Reflex::Literal("operator*"), operator_29527, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_17005), Reflex::Literal("operator->"), operator_29528, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_17005), Reflex::Literal("get"), method_29529, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("isNull"), method_29530, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("isNonnull"), method_29531, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("operator!"), operator_29532, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_47519), Reflex::Literal("ref"), method_29533, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_47519), Reflex::Literal("backRef"), method_29534, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_25623), Reflex::Literal("productGetter"), method_29535, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_48126), Reflex::Literal("product"), method_29536, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_5905), Reflex::Literal("id"), method_29537, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_211), Reflex::Literal("key"), method_29538, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("hasProductCache"), method_29539, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("isAvailable"), method_29540, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("isTransient"), method_29541, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_484), Reflex::Literal("Class_Version"), method_29542, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC);
}
//------Stub functions for class RefVector<std::vector<reco::FFTAnyJet<reco::JPTJet>, std::allocator<reco::FFTAnyJet<reco::JPTJet> > >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet>, std::allocator<reco::FFTAnyJet<reco::JPTJet> > >, reco::FFTAnyJet<reco::JPTJet> > > -------------------------------
static void destructor_28023(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::RefVector<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)o)->::edm::RefVector<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >::~RefVector)();
}
static void constructor_28024( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >();
  else ::new(mem) ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >();
}

static void constructor_28025( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >(*(const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)arg[0]);
  else ::new(mem) ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >(*(const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)arg[0]);
}

static void constructor_28026( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >(*(const ::edm::ProductID*)arg[0]);
  else ::new(mem) ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >(*(const ::edm::ProductID*)arg[0]);
}

static  void method_28027( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::edm::RefVector<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)o)->push_back)(*(const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)arg[0]);
}

static  void operator_28028( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >)((((const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)o)->operator[])(*(::std::size_t*)arg[0]));
  else   (((const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)o)->operator[])(*(::std::size_t*)arg[0]);
}

static  void method_28029( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >)((((const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)o)->at)(*(::std::size_t*)arg[0]));
  else   (((const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)o)->at)(*(::std::size_t*)arg[0]);
}

static  void method_28030( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)o)->refVector)();
  else   (((const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)o)->refVector)();
}

static  void method_28031( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)o)->empty)());
  else   (((const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)o)->empty)();
}

static  void method_28032( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)o)->size)());
  else   (((const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)o)->size)();
}

static  void method_28033( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)o)->capacity)());
  else   (((const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)o)->capacity)();
}

static  void method_28034( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::edm::RefVector<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)o)->reserve)(*(::std::size_t*)arg[0]);
}

static  void method_28035( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::RefVectorIterator<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >)((((const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)o)->begin)());
  else   (((const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)o)->begin)();
}

static  void method_28036( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::RefVectorIterator<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >)((((const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)o)->end)());
  else   (((const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)o)->end)();
}

static  void method_28037( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::ProductID)((((const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)o)->id)());
  else   (((const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)o)->id)();
}

static  void method_28038( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)o)->productGetter)());
  else   (((const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)o)->productGetter)();
}

static  void method_28039( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)o)->isNull)());
  else   (((const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)o)->isNull)();
}

static  void method_28040( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)o)->isNonnull)());
  else   (((const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)o)->isNonnull)();
}

static  void operator_28041( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)o)->operator!)());
  else   (((const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)o)->operator!)();
}

static  void method_28042( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)o)->product)());
  else   (((const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)o)->product)();
}

static  void method_28043( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)o)->isAvailable)());
  else   (((const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)o)->isAvailable)();
}

static  void method_28044( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)o)->isTransient)());
  else   (((const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)o)->isTransient)();
}

static  void method_28045( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (edm::RefVectorIterator<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >)((((::edm::RefVector<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)o)->erase)(*(const ::edm::RefVectorIterator<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)arg[0]));
  else   (((::edm::RefVector<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)o)->erase)(*(const ::edm::RefVectorIterator<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)arg[0]);
}

static  void method_28046( void*, void* o, const std::vector<void*>&, void*)
{
  (((::edm::RefVector<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)o)->clear)();
}

static  void method_28047( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::edm::RefVector<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)o)->swap)(*(::edm::RefVector<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)arg[0]);
}

static  void operator_28048( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::RefVector<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)o)->operator=)(*(const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)arg[0]);
  else   (((::edm::RefVector<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)o)->operator=)(*(const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)arg[0]);
}

static  void method_28049( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)o)->hasProductCache)());
  else   (((const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)o)->hasProductCache)();
}

static  void method_28050( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)o)->fillView)(*(const ::edm::ProductID*)arg[0],
    *(::std::vector<const void*>*)arg[1],
    *(::edm::helper_vector*)arg[2]);
}

static  void method_28051( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (short)((((::edm::RefVector<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)o)->Class_Version)());
  else   (((::edm::RefVector<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)o)->Class_Version)();
}

static void method_newdel_5333( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class RefVector<std::vector<reco::FFTAnyJet<reco::JPTJet>, std::allocator<reco::FFTAnyJet<reco::JPTJet> > >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet>, std::allocator<reco::FFTAnyJet<reco::JPTJet> > >, reco::FFTAnyJet<reco::JPTJet> > > -------------------------------
void __edm__RefVector_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s__db_datamem(Reflex::Class*);
void __edm__RefVector_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__RefVector_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s__datamem_bld(&__edm__RefVector_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__RefVector_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s__funcmem_bld(&__edm__RefVector_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s__db_funcmem);
void __edm__RefVector_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::RefVector<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >"), typeid(::edm::RefVector<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >), sizeof(::edm::RefVector<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("ClassVersion"), ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >::Class_Version())
  .AddTypedef(type_3119, Reflex::Literal("edm::RefVector<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >::collection_type"))
  .AddTypedef(type_8931, Reflex::Literal("edm::RefVector<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >::member_type"))
  .AddTypedef(type_25824, Reflex::Literal("edm::RefVector<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >::finder_type"))
  .AddTypedef(type_5248, Reflex::Literal("edm::RefVector<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >::iterator"))
  .AddTypedef(type_5248, Reflex::Literal("edm::RefVector<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >::const_iterator"))
  .AddTypedef(type_5811, Reflex::Literal("edm::RefVector<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >::value_type"))
  .AddTypedef(type_5811c, Reflex::Literal("edm::RefVector<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >::const_reference"))
  .AddTypedef(type_5811c, Reflex::Literal("edm::RefVector<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >::reference"))
  .AddTypedef(type_211, Reflex::Literal("edm::RefVector<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >::key_type"))
  .AddTypedef(type_3106, Reflex::Literal("edm::RefVector<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >::KeyVec"))
  .AddTypedef(type_3455, Reflex::Literal("edm::RefVector<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >::size_type"))
  .AddTypedef(type_4392, Reflex::Literal("edm::RefVector<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >::contents_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~RefVector"), destructor_28023, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::DESTRUCTOR )
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("RefVector"), constructor_28024, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_48110), Reflex::Literal("RefVector"), constructor_28025, 0, "rh", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_25503), Reflex::Literal("RefVector"), constructor_28026, 0, "iId", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_5333, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__RefVector_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__RefVector_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s__funcmem_bld);
}

//------Delayed data member builder for class RefVector<std::vector<reco::FFTAnyJet<reco::JPTJet>, std::allocator<reco::FFTAnyJet<reco::JPTJet> > >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet>, std::allocator<reco::FFTAnyJet<reco::JPTJet> > >, reco::FFTAnyJet<reco::JPTJet> > > -------------------
void __edm__RefVector_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_4392, Reflex::Literal("refVector_"), OffsetOf(__shadow__::__edm__RefVector_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s_, refVector_), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class RefVector<std::vector<reco::FFTAnyJet<reco::JPTJet>, std::allocator<reco::FFTAnyJet<reco::JPTJet> > >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet>, std::allocator<reco::FFTAnyJet<reco::JPTJet> > >, reco::FFTAnyJet<reco::JPTJet> > > -------------------
void __edm__RefVector_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_47477), Reflex::Literal("push_back"), method_28027, 0, "ref", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_5811c, type_3455), Reflex::Literal("operator[]"), operator_28028, 0, "idx", ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_5811c, type_3455), Reflex::Literal("at"), method_28029, 0, "idx", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_25622), Reflex::Literal("refVector"), method_28030, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("empty"), method_28031, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3455), Reflex::Literal("size"), method_28032, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3455), Reflex::Literal("capacity"), method_28033, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_3455), Reflex::Literal("reserve"), method_28034, 0, "n", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_5248), Reflex::Literal("begin"), method_28035, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_5248), Reflex::Literal("end"), method_28036, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_5905), Reflex::Literal("id"), method_28037, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_25623), Reflex::Literal("productGetter"), method_28038, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("isNull"), method_28039, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("isNonnull"), method_28040, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("operator!"), operator_28041, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_48111), Reflex::Literal("product"), method_28042, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("isAvailable"), method_28043, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("isTransient"), method_28044, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_5248, type_48112), Reflex::Literal("erase"), method_28045, 0, "pos", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708), Reflex::Literal("clear"), method_28046, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_48113), Reflex::Literal("swap"), method_28047, 0, "other", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_48113, type_48110), Reflex::Literal("operator="), operator_28048, 0, "rhs", ::Reflex::PUBLIC | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("hasProductCache"), method_28049, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_25503, type_25627, type_25628), Reflex::Literal("fillView"), method_28050, 0, ";pointers;helpers", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_484), Reflex::Literal("Class_Version"), method_28051, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC);
}
//------Stub functions for class Ref<std::vector<reco::FFTAnyJet<reco::PFJet>, std::allocator<reco::FFTAnyJet<reco::PFJet> > >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet>, std::allocator<reco::FFTAnyJet<reco::PFJet> > >, reco::FFTAnyJet<reco::PFJet> > > -------------------------------
static  void operator_30967( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)o)->operator=)(*(const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)arg[0]);
  else   (((::edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)o)->operator=)(*(const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)arg[0]);
}

static void constructor_30968( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >(*(const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)arg[0]);
  else ::new(mem) ::edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >(*(const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)arg[0]);
}

static void constructor_30969( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >();
  else ::new(mem) ::edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >();
}

static void constructor_30970( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if ( arg.size() == 2 ) {
    if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >(*(const ::edm::Handle<std::vector<reco::FFTAnyJet<reco::PFJet> > >*)arg[0],
      *(unsigned int*)arg[1]);
  else ::new(mem) ::edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >(*(const ::edm::Handle<std::vector<reco::FFTAnyJet<reco::PFJet> > >*)arg[0],
      *(unsigned int*)arg[1]);
  }
  else if ( arg.size() == 3 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >(*(const ::edm::Handle<std::vector<reco::FFTAnyJet<reco::PFJet> > >*)arg[0],
      *(unsigned int*)arg[1],
      *(bool*)arg[2]);
  else ::new(mem) ::edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >(*(const ::edm::Handle<std::vector<reco::FFTAnyJet<reco::PFJet> > >*)arg[0],
      *(unsigned int*)arg[1],
      *(bool*)arg[2]);
  }
}

static void constructor_30971( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if ( arg.size() == 2 ) {
    if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >(*(const ::edm::OrphanHandle<std::vector<reco::FFTAnyJet<reco::PFJet> > >*)arg[0],
      *(unsigned int*)arg[1]);
  else ::new(mem) ::edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >(*(const ::edm::OrphanHandle<std::vector<reco::FFTAnyJet<reco::PFJet> > >*)arg[0],
      *(unsigned int*)arg[1]);
  }
  else if ( arg.size() == 3 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >(*(const ::edm::OrphanHandle<std::vector<reco::FFTAnyJet<reco::PFJet> > >*)arg[0],
      *(unsigned int*)arg[1],
      *(bool*)arg[2]);
  else ::new(mem) ::edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >(*(const ::edm::OrphanHandle<std::vector<reco::FFTAnyJet<reco::PFJet> > >*)arg[0],
      *(unsigned int*)arg[1],
      *(bool*)arg[2]);
  }
}

static void constructor_30972( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if ( arg.size() == 2 ) {
    if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >(*(const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)arg[0],
      *(unsigned int*)arg[1]);
  else ::new(mem) ::edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >(*(const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)arg[0],
      *(unsigned int*)arg[1]);
  }
  else if ( arg.size() == 3 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >(*(const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)arg[0],
      *(unsigned int*)arg[1],
      *(bool*)arg[2]);
  else ::new(mem) ::edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >(*(const ::edm::RefVector<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)arg[0],
      *(unsigned int*)arg[1],
      *(bool*)arg[2]);
  }
}

static void constructor_30973( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if ( arg.size() == 2 ) {
    if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >((const ::std::vector<reco::FFTAnyJet<reco::PFJet> >*)arg[0],
      *(unsigned int*)arg[1]);
  else ::new(mem) ::edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >((const ::std::vector<reco::FFTAnyJet<reco::PFJet> >*)arg[0],
      *(unsigned int*)arg[1]);
  }
  else if ( arg.size() == 3 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >((const ::std::vector<reco::FFTAnyJet<reco::PFJet> >*)arg[0],
      *(unsigned int*)arg[1],
      *(bool*)arg[2]);
  else ::new(mem) ::edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >((const ::std::vector<reco::FFTAnyJet<reco::PFJet> >*)arg[0],
      *(unsigned int*)arg[1],
      *(bool*)arg[2]);
  }
}

static void constructor_30974( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if ( arg.size() == 2 ) {
    if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >(*(const ::edm::TestHandle<std::vector<reco::FFTAnyJet<reco::PFJet> > >*)arg[0],
      *(unsigned int*)arg[1]);
  else ::new(mem) ::edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >(*(const ::edm::TestHandle<std::vector<reco::FFTAnyJet<reco::PFJet> > >*)arg[0],
      *(unsigned int*)arg[1]);
  }
  else if ( arg.size() == 3 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >(*(const ::edm::TestHandle<std::vector<reco::FFTAnyJet<reco::PFJet> > >*)arg[0],
      *(unsigned int*)arg[1],
      *(bool*)arg[2]);
  else ::new(mem) ::edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >(*(const ::edm::TestHandle<std::vector<reco::FFTAnyJet<reco::PFJet> > >*)arg[0],
      *(unsigned int*)arg[1],
      *(bool*)arg[2]);
  }
}

static void constructor_30975( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >(*(const ::edm::ProductID*)arg[0],
      *(unsigned int*)arg[1],
      (const ::edm::EDProductGetter*)arg[2]);
  else ::new(mem) ::edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >(*(const ::edm::ProductID*)arg[0],
      *(unsigned int*)arg[1],
      (const ::edm::EDProductGetter*)arg[2]);
}

static void constructor_30976( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >(*(const ::edm::ProductID*)arg[0],
      (const ::reco::FFTAnyJet<reco::PFJet>*)arg[1],
      *(unsigned int*)arg[2],
      (const ::std::vector<reco::FFTAnyJet<reco::PFJet> >*)arg[3]);
  else ::new(mem) ::edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >(*(const ::edm::ProductID*)arg[0],
      (const ::reco::FFTAnyJet<reco::PFJet>*)arg[1],
      *(unsigned int*)arg[2],
      (const ::std::vector<reco::FFTAnyJet<reco::PFJet> >*)arg[3]);
}

static void constructor_30977( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >(*(const ::edm::ProductID*)arg[0]);
  else ::new(mem) ::edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >(*(const ::edm::ProductID*)arg[0]);
}

static void constructor_30978( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >(*(const ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::PFJet> > >*)arg[0],
      *(unsigned int*)arg[1]);
  else ::new(mem) ::edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >(*(const ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::PFJet> > >*)arg[0],
      *(unsigned int*)arg[1]);
}

static void destructor_30979(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)o)->::edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >::~Ref)();
}
static  void operator_30980( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)o)->operator*)();
  else   (((const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)o)->operator*)();
}

static  void operator_30981( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)o)->operator->)());
  else   (((const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)o)->operator->)();
}

static  void method_30982( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)o)->get)());
  else   (((const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)o)->get)();
}

static  void method_30983( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)o)->isNull)());
  else   (((const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)o)->isNull)();
}

static  void method_30984( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)o)->isNonnull)());
  else   (((const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)o)->isNonnull)();
}

static  void operator_30985( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)o)->operator!)());
  else   (((const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)o)->operator!)();
}

static  void method_30986( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::ProductID)((((const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)o)->id)());
  else   (((const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)o)->id)();
}

static  void method_30987( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)o)->productGetter)());
  else   (((const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)o)->productGetter)();
}

static  void method_30988( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)o)->product)());
  else   (((const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)o)->product)();
}

static  void method_30989( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (unsigned int)((((const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)o)->key)());
  else   (((const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)o)->key)();
}

static  void method_30990( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (unsigned int)((((const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)o)->index)());
  else   (((const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)o)->index)();
}

static  void method_30991( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)o)->hasProductCache)());
  else   (((const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)o)->hasProductCache)();
}

static  void method_30992( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)o)->isAvailable)());
  else   (((const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)o)->isAvailable)();
}

static  void method_30993( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)o)->isTransient)());
  else   (((const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)o)->isTransient)();
}

static  void method_30994( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)o)->refCore)();
  else   (((const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)o)->refCore)();
}

static  void method_30995( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (short)((((::edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)o)->Class_Version)());
  else   (((::edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)o)->Class_Version)();
}

static void constructor_30996( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >(*(const ::edm::RefCore*)arg[0],
      *(const unsigned int*)arg[1]);
  else ::new(mem) ::edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >(*(const ::edm::RefCore*)arg[0],
      *(const unsigned int*)arg[1]);
}

static void method_newdel_5814( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class Ref<std::vector<reco::FFTAnyJet<reco::PFJet>, std::allocator<reco::FFTAnyJet<reco::PFJet> > >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet>, std::allocator<reco::FFTAnyJet<reco::PFJet> > >, reco::FFTAnyJet<reco::PFJet> > > -------------------------------
void __edm__Ref_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s__db_datamem(Reflex::Class*);
void __edm__Ref_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__Ref_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s__datamem_bld(&__edm__Ref_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__Ref_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s__funcmem_bld(&__edm__Ref_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s__db_funcmem);
void __edm__Ref_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >"), typeid(::edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >), sizeof(::edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("ClassVersion"), ::edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >::Class_Version())
  .AddTypedef(type_8933, Reflex::Literal("edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >::T"))
  .AddTypedef(type_25848, Reflex::Literal("edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >::F"))
  .AddTypedef(type_27548, Reflex::Literal("edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >::VF"))
  .AddTypedef(type_27547, Reflex::Literal("edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >::VBF"))
  .AddTypedef(type_3129, Reflex::Literal("edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >::product_type"))
  .AddTypedef(type_8933, Reflex::Literal("edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >::value_type"))
  .AddTypedef(type_8933c, Reflex::Literal("edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >::element_type"))
  .AddTypedef(type_25848, Reflex::Literal("edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >::finder_type"))
  .AddTypedef(type_211, Reflex::Literal("edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >::argument_type"))
  .AddTypedef(type_211, Reflex::Literal("edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >::key_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_48909, type_47505), Reflex::Literal("operator="), operator_30967, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_47505), Reflex::Literal("Ref"), constructor_30968, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("Ref"), constructor_30969, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_48834, type_211, type_1593), Reflex::Literal("Ref"), constructor_30970, 0, "handle;itemKey;setNow=true", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_48835, type_211, type_1593), Reflex::Literal("Ref"), constructor_30971, 0, "handle;itemKey;setNow=true", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_48120, type_211, type_1593), Reflex::Literal("Ref"), constructor_30972, 0, "refvector;itemKey;setNow=true", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_48121, type_211, type_1593), Reflex::Literal("Ref"), constructor_30973, 0, "iProduct;iItemKey;iSetNow=true", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_48836, type_211, type_1593), Reflex::Literal("Ref"), constructor_30974, 0, "handle;itemKey;setNow=true", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_25503, type_211, type_25623), Reflex::Literal("Ref"), constructor_30975, 0, "productID;itemKey;prodGetter", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_25503, type_16810, type_211, type_48121), Reflex::Literal("Ref"), constructor_30976, 0, "iProductID;;iItemKey;iProduct", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_25503), Reflex::Literal("Ref"), constructor_30977, 0, "iId", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_48833, type_211), Reflex::Literal("Ref"), constructor_30978, 0, "refProd;itemKey", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~Ref"), destructor_30979, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_29672, type_13040), Reflex::Literal("Ref"), constructor_30996, 0, "iRefCore;iKey", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_5814, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__Ref_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__Ref_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s__funcmem_bld);
}

//------Delayed data member builder for class Ref<std::vector<reco::FFTAnyJet<reco::PFJet>, std::allocator<reco::FFTAnyJet<reco::PFJet> > >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet>, std::allocator<reco::FFTAnyJet<reco::PFJet> > >, reco::FFTAnyJet<reco::PFJet> > > -------------------
void __edm__Ref_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_5268, Reflex::Literal("product_"), OffsetOf(__shadow__::__edm__Ref_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s_, product_), ::Reflex::PRIVATE | ::Reflex::MUTABLE);
}
//------Delayed function member builder for class Ref<std::vector<reco::FFTAnyJet<reco::PFJet>, std::allocator<reco::FFTAnyJet<reco::PFJet> > >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet>, std::allocator<reco::FFTAnyJet<reco::PFJet> > >, reco::FFTAnyJet<reco::PFJet> > > -------------------
void __edm__Ref_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_16814), Reflex::Literal("operator*"), operator_30980, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_16810), Reflex::Literal("operator->"), operator_30981, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_16810), Reflex::Literal("get"), method_30982, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("isNull"), method_30983, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("isNonnull"), method_30984, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("operator!"), operator_30985, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_5905), Reflex::Literal("id"), method_30986, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_25623), Reflex::Literal("productGetter"), method_30987, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_48121), Reflex::Literal("product"), method_30988, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_211), Reflex::Literal("key"), method_30989, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_211), Reflex::Literal("index"), method_30990, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("hasProductCache"), method_30991, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("isAvailable"), method_30992, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("isTransient"), method_30993, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_29672), Reflex::Literal("refCore"), method_30994, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_484), Reflex::Literal("Class_Version"), method_30995, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC);
}
//------Stub functions for class vector<reco::FFTAnyJet<reco::TrackJet>,std::allocator<reco::FFTAnyJet<reco::TrackJet> > > -------------------------------
static void constructor_16628( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<reco::FFTAnyJet<reco::TrackJet> >();
  else ::new(mem) ::std::vector<reco::FFTAnyJet<reco::TrackJet> >();
}

static void constructor_16629( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<reco::FFTAnyJet<reco::TrackJet> >(*(const ::std::allocator<reco::FFTAnyJet<reco::TrackJet> >*)arg[0]);
  else ::new(mem) ::std::vector<reco::FFTAnyJet<reco::TrackJet> >(*(const ::std::allocator<reco::FFTAnyJet<reco::TrackJet> >*)arg[0]);
}

static void constructor_16630( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if ( arg.size() == 1 ) {
    if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<reco::FFTAnyJet<reco::TrackJet> >(*(::std::size_t*)arg[0]);
  else ::new(mem) ::std::vector<reco::FFTAnyJet<reco::TrackJet> >(*(::std::size_t*)arg[0]);
  }
  else if ( arg.size() == 2 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<reco::FFTAnyJet<reco::TrackJet> >(*(::std::size_t*)arg[0],
      *(const ::reco::FFTAnyJet<reco::TrackJet>*)arg[1]);
  else ::new(mem) ::std::vector<reco::FFTAnyJet<reco::TrackJet> >(*(::std::size_t*)arg[0],
      *(const ::reco::FFTAnyJet<reco::TrackJet>*)arg[1]);
  }
  else if ( arg.size() == 3 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<reco::FFTAnyJet<reco::TrackJet> >(*(::std::size_t*)arg[0],
      *(const ::reco::FFTAnyJet<reco::TrackJet>*)arg[1],
      *(const ::std::allocator<reco::FFTAnyJet<reco::TrackJet> >*)arg[2]);
  else ::new(mem) ::std::vector<reco::FFTAnyJet<reco::TrackJet> >(*(::std::size_t*)arg[0],
      *(const ::reco::FFTAnyJet<reco::TrackJet>*)arg[1],
      *(const ::std::allocator<reco::FFTAnyJet<reco::TrackJet> >*)arg[2]);
  }
}

static void constructor_16631( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<reco::FFTAnyJet<reco::TrackJet> >(*(const ::std::vector<reco::FFTAnyJet<reco::TrackJet> >*)arg[0]);
  else ::new(mem) ::std::vector<reco::FFTAnyJet<reco::TrackJet> >(*(const ::std::vector<reco::FFTAnyJet<reco::TrackJet> >*)arg[0]);
}

static void destructor_16632(void*, void * o, const std::vector<void*>&, void *) {
(((::std::vector<reco::FFTAnyJet<reco::TrackJet> >*)o)->::std::vector<reco::FFTAnyJet<reco::TrackJet> >::~vector)();
}
static  void operator_16633( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<reco::FFTAnyJet<reco::TrackJet> >*)o)->operator=)(*(const ::std::vector<reco::FFTAnyJet<reco::TrackJet> >*)arg[0]);
  else   (((::std::vector<reco::FFTAnyJet<reco::TrackJet> >*)o)->operator=)(*(const ::std::vector<reco::FFTAnyJet<reco::TrackJet> >*)arg[0]);
}

static  void method_16634( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<reco::FFTAnyJet<reco::TrackJet> >*)o)->assign)(*(::std::size_t*)arg[0],
    *(const ::reco::FFTAnyJet<reco::TrackJet>*)arg[1]);
}

static  void method_16635( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<reco::FFTAnyJet<reco::TrackJet>*,std::vector<reco::FFTAnyJet<reco::TrackJet> > >)((((::std::vector<reco::FFTAnyJet<reco::TrackJet> >*)o)->begin)());
  else   (((::std::vector<reco::FFTAnyJet<reco::TrackJet> >*)o)->begin)();
}

static  void method_16636( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<const reco::FFTAnyJet<reco::TrackJet>*,std::vector<reco::FFTAnyJet<reco::TrackJet> > >)((((const ::std::vector<reco::FFTAnyJet<reco::TrackJet> >*)o)->begin)());
  else   (((const ::std::vector<reco::FFTAnyJet<reco::TrackJet> >*)o)->begin)();
}

static  void method_16637( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<reco::FFTAnyJet<reco::TrackJet>*,std::vector<reco::FFTAnyJet<reco::TrackJet> > >)((((::std::vector<reco::FFTAnyJet<reco::TrackJet> >*)o)->end)());
  else   (((::std::vector<reco::FFTAnyJet<reco::TrackJet> >*)o)->end)();
}

static  void method_16638( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<const reco::FFTAnyJet<reco::TrackJet>*,std::vector<reco::FFTAnyJet<reco::TrackJet> > >)((((const ::std::vector<reco::FFTAnyJet<reco::TrackJet> >*)o)->end)());
  else   (((const ::std::vector<reco::FFTAnyJet<reco::TrackJet> >*)o)->end)();
}

static  void method_16643( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::std::vector<reco::FFTAnyJet<reco::TrackJet> >*)o)->size)());
  else   (((const ::std::vector<reco::FFTAnyJet<reco::TrackJet> >*)o)->size)();
}

static  void method_16644( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::std::vector<reco::FFTAnyJet<reco::TrackJet> >*)o)->max_size)());
  else   (((const ::std::vector<reco::FFTAnyJet<reco::TrackJet> >*)o)->max_size)();
}

static  void method_16645( void*, void* o, const std::vector<void*>& arg, void*)
{
  if ( arg.size() == 1 ) {
    (((::std::vector<reco::FFTAnyJet<reco::TrackJet> >*)o)->resize)(*(::std::size_t*)arg[0]);
  }
  else if ( arg.size() == 2 ) { 
    (((::std::vector<reco::FFTAnyJet<reco::TrackJet> >*)o)->resize)(*(::std::size_t*)arg[0],
      *(::reco::FFTAnyJet<reco::TrackJet>*)arg[1]);
  }
}

static  void method_16646( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::std::vector<reco::FFTAnyJet<reco::TrackJet> >*)o)->capacity)());
  else   (((const ::std::vector<reco::FFTAnyJet<reco::TrackJet> >*)o)->capacity)();
}

static  void method_16647( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::std::vector<reco::FFTAnyJet<reco::TrackJet> >*)o)->empty)());
  else   (((const ::std::vector<reco::FFTAnyJet<reco::TrackJet> >*)o)->empty)();
}

static  void method_16648( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<reco::FFTAnyJet<reco::TrackJet> >*)o)->reserve)(*(::std::size_t*)arg[0]);
}

static  void operator_16649( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<reco::FFTAnyJet<reco::TrackJet> >*)o)->operator[])(*(::std::size_t*)arg[0]);
  else   (((::std::vector<reco::FFTAnyJet<reco::TrackJet> >*)o)->operator[])(*(::std::size_t*)arg[0]);
}

static  void operator_16650( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<reco::FFTAnyJet<reco::TrackJet> >*)o)->operator[])(*(::std::size_t*)arg[0]);
  else   (((const ::std::vector<reco::FFTAnyJet<reco::TrackJet> >*)o)->operator[])(*(::std::size_t*)arg[0]);
}

static  void method_16652( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<reco::FFTAnyJet<reco::TrackJet> >*)o)->at)(*(::std::size_t*)arg[0]);
  else   (((::std::vector<reco::FFTAnyJet<reco::TrackJet> >*)o)->at)(*(::std::size_t*)arg[0]);
}

static  void method_16653( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<reco::FFTAnyJet<reco::TrackJet> >*)o)->at)(*(::std::size_t*)arg[0]);
  else   (((const ::std::vector<reco::FFTAnyJet<reco::TrackJet> >*)o)->at)(*(::std::size_t*)arg[0]);
}

static  void method_16654( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<reco::FFTAnyJet<reco::TrackJet> >*)o)->front)();
  else   (((::std::vector<reco::FFTAnyJet<reco::TrackJet> >*)o)->front)();
}

static  void method_16655( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<reco::FFTAnyJet<reco::TrackJet> >*)o)->front)();
  else   (((const ::std::vector<reco::FFTAnyJet<reco::TrackJet> >*)o)->front)();
}

static  void method_16656( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<reco::FFTAnyJet<reco::TrackJet> >*)o)->back)();
  else   (((::std::vector<reco::FFTAnyJet<reco::TrackJet> >*)o)->back)();
}

static  void method_16657( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<reco::FFTAnyJet<reco::TrackJet> >*)o)->back)();
  else   (((const ::std::vector<reco::FFTAnyJet<reco::TrackJet> >*)o)->back)();
}

static  void method_16658( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((::std::vector<reco::FFTAnyJet<reco::TrackJet> >*)o)->data)());
  else   (((::std::vector<reco::FFTAnyJet<reco::TrackJet> >*)o)->data)();
}

static  void method_16659( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::std::vector<reco::FFTAnyJet<reco::TrackJet> >*)o)->data)());
  else   (((const ::std::vector<reco::FFTAnyJet<reco::TrackJet> >*)o)->data)();
}

static  void method_16660( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<reco::FFTAnyJet<reco::TrackJet> >*)o)->push_back)(*(const ::reco::FFTAnyJet<reco::TrackJet>*)arg[0]);
}

static  void method_16661( void*, void* o, const std::vector<void*>&, void*)
{
  (((::std::vector<reco::FFTAnyJet<reco::TrackJet> >*)o)->pop_back)();
}

static  void method_16662( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<reco::FFTAnyJet<reco::TrackJet>*,std::vector<reco::FFTAnyJet<reco::TrackJet> > >)((((::std::vector<reco::FFTAnyJet<reco::TrackJet> >*)o)->insert)(*(::__gnu_cxx::__normal_iterator<reco::FFTAnyJet<reco::TrackJet>*,std::vector<reco::FFTAnyJet<reco::TrackJet> > >*)arg[0],
    *(const ::reco::FFTAnyJet<reco::TrackJet>*)arg[1]));
  else   (((::std::vector<reco::FFTAnyJet<reco::TrackJet> >*)o)->insert)(*(::__gnu_cxx::__normal_iterator<reco::FFTAnyJet<reco::TrackJet>*,std::vector<reco::FFTAnyJet<reco::TrackJet> > >*)arg[0],
    *(const ::reco::FFTAnyJet<reco::TrackJet>*)arg[1]);
}

static  void method_16663( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<reco::FFTAnyJet<reco::TrackJet> >*)o)->insert)(*(::__gnu_cxx::__normal_iterator<reco::FFTAnyJet<reco::TrackJet>*,std::vector<reco::FFTAnyJet<reco::TrackJet> > >*)arg[0],
    *(::std::size_t*)arg[1],
    *(const ::reco::FFTAnyJet<reco::TrackJet>*)arg[2]);
}

static  void method_16664( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<reco::FFTAnyJet<reco::TrackJet>*,std::vector<reco::FFTAnyJet<reco::TrackJet> > >)((((::std::vector<reco::FFTAnyJet<reco::TrackJet> >*)o)->erase)(*(::__gnu_cxx::__normal_iterator<reco::FFTAnyJet<reco::TrackJet>*,std::vector<reco::FFTAnyJet<reco::TrackJet> > >*)arg[0]));
  else   (((::std::vector<reco::FFTAnyJet<reco::TrackJet> >*)o)->erase)(*(::__gnu_cxx::__normal_iterator<reco::FFTAnyJet<reco::TrackJet>*,std::vector<reco::FFTAnyJet<reco::TrackJet> > >*)arg[0]);
}

static  void method_16665( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<reco::FFTAnyJet<reco::TrackJet>*,std::vector<reco::FFTAnyJet<reco::TrackJet> > >)((((::std::vector<reco::FFTAnyJet<reco::TrackJet> >*)o)->erase)(*(::__gnu_cxx::__normal_iterator<reco::FFTAnyJet<reco::TrackJet>*,std::vector<reco::FFTAnyJet<reco::TrackJet> > >*)arg[0],
    *(::__gnu_cxx::__normal_iterator<reco::FFTAnyJet<reco::TrackJet>*,std::vector<reco::FFTAnyJet<reco::TrackJet> > >*)arg[1]));
  else   (((::std::vector<reco::FFTAnyJet<reco::TrackJet> >*)o)->erase)(*(::__gnu_cxx::__normal_iterator<reco::FFTAnyJet<reco::TrackJet>*,std::vector<reco::FFTAnyJet<reco::TrackJet> > >*)arg[0],
    *(::__gnu_cxx::__normal_iterator<reco::FFTAnyJet<reco::TrackJet>*,std::vector<reco::FFTAnyJet<reco::TrackJet> > >*)arg[1]);
}

static  void method_16666( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<reco::FFTAnyJet<reco::TrackJet> >*)o)->swap)(*(::std::vector<reco::FFTAnyJet<reco::TrackJet> >*)arg[0]);
}

static  void method_16667( void*, void* o, const std::vector<void*>&, void*)
{
  (((::std::vector<reco::FFTAnyJet<reco::TrackJet> >*)o)->clear)();
}

static void method_newdel_3124( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::std::vector<reco::FFTAnyJet<reco::TrackJet> > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::std::vector<reco::FFTAnyJet<reco::TrackJet> > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::std::vector<reco::FFTAnyJet<reco::TrackJet> > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::std::vector<reco::FFTAnyJet<reco::TrackJet> > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::std::vector<reco::FFTAnyJet<reco::TrackJet> > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

static void method_x60( void* retaddr, void*, const std::vector<void*>&, void*)
{
  typedef std::vector<std::pair< ::Reflex::Base, int> > Bases_t;
  static Bases_t s_bases;
  if ( !s_bases.size() ) {
    s_bases.push_back(std::make_pair(::Reflex::Base( ::Reflex::TypeBuilder(Reflex::Literal("std::_Vector_base<reco::FFTAnyJet<reco::TrackJet>,std::allocator<reco::FFTAnyJet<reco::TrackJet> > >")), ::Reflex::BaseOffset< ::std::vector<reco::FFTAnyJet<reco::TrackJet> >,::std::_Vector_base<reco::FFTAnyJet<reco::TrackJet>,std::allocator<reco::FFTAnyJet<reco::TrackJet> > > >::Get(),::Reflex::PROTECTED), 0));
  }
  if (retaddr) *(Bases_t**)retaddr = &s_bases;
}

static void method_x61( void* retaddr, void*, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**) retaddr = ::Reflex::Proxy< ::std::vector<reco::FFTAnyJet<reco::TrackJet> > >::Generate();
  else ::Reflex::Proxy< ::std::vector<reco::FFTAnyJet<reco::TrackJet> > >::Generate();
}

//------Dictionary for class vector<reco::FFTAnyJet<reco::TrackJet>,std::allocator<reco::FFTAnyJet<reco::TrackJet> > > -------------------------------
void __std__vector_reco__FFTAnyJet_reco__TrackJet_s__db_datamem(Reflex::Class*);
void __std__vector_reco__FFTAnyJet_reco__TrackJet_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __std__vector_reco__FFTAnyJet_reco__TrackJet_s__datamem_bld(&__std__vector_reco__FFTAnyJet_reco__TrackJet_s__db_datamem);
Reflex::GenreflexMemberBuilder __std__vector_reco__FFTAnyJet_reco__TrackJet_s__funcmem_bld(&__std__vector_reco__FFTAnyJet_reco__TrackJet_s__db_funcmem);
void __std__vector_reco__FFTAnyJet_reco__TrackJet_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("std::vector<reco::FFTAnyJet<reco::TrackJet> >"), typeid(::std::vector<reco::FFTAnyJet<reco::TrackJet> >), sizeof(::std::vector<reco::FFTAnyJet<reco::TrackJet> >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddBase(type_2574, ::Reflex::BaseOffset< ::std::vector<reco::FFTAnyJet<reco::TrackJet> >, ::std::_Vector_base<reco::FFTAnyJet<reco::TrackJet>,std::allocator<reco::FFTAnyJet<reco::TrackJet> > > >::Get(), ::Reflex::PROTECTED)
  .AddTypedef(type_8932, Reflex::Literal("std::vector<reco::FFTAnyJet<reco::TrackJet> >::_Alloc_value_type"))
  .AddTypedef(type_2574, Reflex::Literal("std::vector<reco::FFTAnyJet<reco::TrackJet> >::_Base"))
  .AddTypedef(type_3499, Reflex::Literal("std::vector<reco::FFTAnyJet<reco::TrackJet> >::_Tp_alloc_type"))
  .AddTypedef(type_9729, Reflex::Literal("std::vector<reco::FFTAnyJet<reco::TrackJet> >::_Alloc_traits"))
  .AddTypedef(type_8932, Reflex::Literal("std::vector<reco::FFTAnyJet<reco::TrackJet> >::value_type"))
  .AddTypedef(type_11659, Reflex::Literal("std::vector<reco::FFTAnyJet<reco::TrackJet> >::pointer"))
  .AddTypedef(type_16615, Reflex::Literal("std::vector<reco::FFTAnyJet<reco::TrackJet> >::const_pointer"))
  .AddTypedef(type_16617, Reflex::Literal("std::vector<reco::FFTAnyJet<reco::TrackJet> >::reference"))
  .AddTypedef(type_16619, Reflex::Literal("std::vector<reco::FFTAnyJet<reco::TrackJet> >::const_reference"))
  .AddTypedef(type_9555, Reflex::Literal("std::vector<reco::FFTAnyJet<reco::TrackJet> >::iterator"))
  .AddTypedef(type_9556, Reflex::Literal("std::vector<reco::FFTAnyJet<reco::TrackJet> >::const_iterator"))
  .AddTypedef(type_3872, Reflex::Literal("std::vector<reco::FFTAnyJet<reco::TrackJet> >::const_reverse_iterator"))
  .AddTypedef(type_3873, Reflex::Literal("std::vector<reco::FFTAnyJet<reco::TrackJet> >::reverse_iterator"))
  .AddTypedef(type_3455, Reflex::Literal("std::vector<reco::FFTAnyJet<reco::TrackJet> >::size_type"))
  .AddTypedef(type_3318, Reflex::Literal("std::vector<reco::FFTAnyJet<reco::TrackJet> >::difference_type"))
  .AddTypedef(type_3499, Reflex::Literal("std::vector<reco::FFTAnyJet<reco::TrackJet> >::allocator_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("vector"), constructor_16628, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_42841), Reflex::Literal("vector"), constructor_16629, 0, "__a", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_3455, type_16619, type_42841), Reflex::Literal("vector"), constructor_16630, 0, "__n;__value=_Tp();__a=_Alloc()", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_25841), Reflex::Literal("vector"), constructor_16631, 0, "__x", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~vector"), destructor_16632, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_3124, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getBasesTable"), method_x60, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddFunctionMember<void*(void)>(Reflex::Literal("createCollFuncTable"), method_x61, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandFunctionMemberBuilder(&__std__vector_reco__FFTAnyJet_reco__TrackJet_s__funcmem_bld);
}

//------Delayed data member builder for class vector<reco::FFTAnyJet<reco::TrackJet>,std::allocator<reco::FFTAnyJet<reco::TrackJet> > > -------------------
void __std__vector_reco__FFTAnyJet_reco__TrackJet_s__db_datamem(Reflex::Class*) {

}
//------Delayed function member builder for class vector<reco::FFTAnyJet<reco::TrackJet>,std::allocator<reco::FFTAnyJet<reco::TrackJet> > > -------------------
void __std__vector_reco__FFTAnyJet_reco__TrackJet_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_44163, type_25841), Reflex::Literal("operator="), operator_16633, 0, "__x", ::Reflex::PUBLIC | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_3455, type_16619), Reflex::Literal("assign"), method_16634, 0, "__n;__val", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_9555), Reflex::Literal("begin"), method_16635, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_9556), Reflex::Literal("begin"), method_16636, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_9555), Reflex::Literal("end"), method_16637, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_9556), Reflex::Literal("end"), method_16638, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3455), Reflex::Literal("size"), method_16643, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3455), Reflex::Literal("max_size"), method_16644, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_3455, type_8932), Reflex::Literal("resize"), method_16645, 0, "__new_size;__x=_Tp()", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3455), Reflex::Literal("capacity"), method_16646, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("empty"), method_16647, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_3455), Reflex::Literal("reserve"), method_16648, 0, "__n", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_16617, type_3455), Reflex::Literal("operator[]"), operator_16649, 0, "__n", ::Reflex::PUBLIC | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_16619, type_3455), Reflex::Literal("operator[]"), operator_16650, 0, "__n", ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_16617, type_3455), Reflex::Literal("at"), method_16652, 0, "__n", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_16619, type_3455), Reflex::Literal("at"), method_16653, 0, "__n", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_16617), Reflex::Literal("front"), method_16654, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_16619), Reflex::Literal("front"), method_16655, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_16617), Reflex::Literal("back"), method_16656, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_16619), Reflex::Literal("back"), method_16657, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_11659), Reflex::Literal("data"), method_16658, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_16615), Reflex::Literal("data"), method_16659, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_16619), Reflex::Literal("push_back"), method_16660, 0, "__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708), Reflex::Literal("pop_back"), method_16661, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_9555, type_9555, type_16619), Reflex::Literal("insert"), method_16662, 0, "__position;__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_9555, type_3455, type_16619), Reflex::Literal("insert"), method_16663, 0, "__position;__n;__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_9555, type_9555), Reflex::Literal("erase"), method_16664, 0, "__position", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_9555, type_9555, type_9555), Reflex::Literal("erase"), method_16665, 0, "__first;__last", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_44163), Reflex::Literal("swap"), method_16666, 0, "__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708), Reflex::Literal("clear"), method_16667, 0, 0, ::Reflex::PUBLIC);
}
//------Stub functions for class RefProd<std::vector<reco::FFTAnyJet<reco::TrackJet>, std::allocator<reco::FFTAnyJet<reco::TrackJet> > > > -------------------------------
static  void operator_30183( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::RefProd<std::vector<reco::FFTAnyJet<reco::TrackJet> > >*)o)->operator=)(*(const ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::TrackJet> > >*)arg[0]);
  else   (((::edm::RefProd<std::vector<reco::FFTAnyJet<reco::TrackJet> > >*)o)->operator=)(*(const ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::TrackJet> > >*)arg[0]);
}

static void constructor_30184( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::TrackJet> > >(*(const ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::TrackJet> > >*)arg[0]);
  else ::new(mem) ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::TrackJet> > >(*(const ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::TrackJet> > >*)arg[0]);
}

static void constructor_30185( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::TrackJet> > >();
  else ::new(mem) ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::TrackJet> > >();
}

static void constructor_30186( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::TrackJet> > >(*(const ::edm::Handle<std::vector<reco::FFTAnyJet<reco::TrackJet> > >*)arg[0]);
  else ::new(mem) ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::TrackJet> > >(*(const ::edm::Handle<std::vector<reco::FFTAnyJet<reco::TrackJet> > >*)arg[0]);
}

static void constructor_30187( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::TrackJet> > >(*(const ::edm::OrphanHandle<std::vector<reco::FFTAnyJet<reco::TrackJet> > >*)arg[0]);
  else ::new(mem) ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::TrackJet> > >(*(const ::edm::OrphanHandle<std::vector<reco::FFTAnyJet<reco::TrackJet> > >*)arg[0]);
}

static void constructor_30188( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::TrackJet> > >((const ::std::vector<reco::FFTAnyJet<reco::TrackJet> >*)arg[0]);
  else ::new(mem) ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::TrackJet> > >((const ::std::vector<reco::FFTAnyJet<reco::TrackJet> >*)arg[0]);
}

static void constructor_30189( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::TrackJet> > >(*(const ::edm::TestHandle<std::vector<reco::FFTAnyJet<reco::TrackJet> > >*)arg[0]);
  else ::new(mem) ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::TrackJet> > >(*(const ::edm::TestHandle<std::vector<reco::FFTAnyJet<reco::TrackJet> > >*)arg[0]);
}

static void constructor_30190( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::TrackJet> > >(*(const ::edm::ProductID*)arg[0],
      (const ::edm::EDProductGetter*)arg[1]);
  else ::new(mem) ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::TrackJet> > >(*(const ::edm::ProductID*)arg[0],
      (const ::edm::EDProductGetter*)arg[1]);
}

static void destructor_30191(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::RefProd<std::vector<reco::FFTAnyJet<reco::TrackJet> > >*)o)->::edm::RefProd<std::vector<reco::FFTAnyJet<reco::TrackJet> > >::~RefProd)();
}
static  void operator_30192( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::TrackJet> > >*)o)->operator*)();
  else   (((const ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::TrackJet> > >*)o)->operator*)();
}

static  void operator_30193( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::TrackJet> > >*)o)->operator->)());
  else   (((const ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::TrackJet> > >*)o)->operator->)();
}

static  void method_30194( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::TrackJet> > >*)o)->get)());
  else   (((const ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::TrackJet> > >*)o)->get)();
}

static  void method_30195( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::TrackJet> > >*)o)->product)());
  else   (((const ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::TrackJet> > >*)o)->product)();
}

static  void method_30196( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::TrackJet> > >*)o)->refCore)();
  else   (((const ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::TrackJet> > >*)o)->refCore)();
}

static  void method_30197( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::TrackJet> > >*)o)->isNull)());
  else   (((const ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::TrackJet> > >*)o)->isNull)();
}

static  void method_30198( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::TrackJet> > >*)o)->isNonnull)());
  else   (((const ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::TrackJet> > >*)o)->isNonnull)();
}

static  void operator_30199( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::TrackJet> > >*)o)->operator!)());
  else   (((const ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::TrackJet> > >*)o)->operator!)();
}

static  void method_30200( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::ProductID)((((const ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::TrackJet> > >*)o)->id)());
  else   (((const ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::TrackJet> > >*)o)->id)();
}

static  void method_30201( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::TrackJet> > >*)o)->productGetter)());
  else   (((const ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::TrackJet> > >*)o)->productGetter)();
}

static  void method_30202( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::TrackJet> > >*)o)->hasCache)());
  else   (((const ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::TrackJet> > >*)o)->hasCache)();
}

static  void method_30203( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::TrackJet> > >*)o)->hasProductCache)());
  else   (((const ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::TrackJet> > >*)o)->hasProductCache)();
}

static  void method_30204( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::TrackJet> > >*)o)->isAvailable)());
  else   (((const ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::TrackJet> > >*)o)->isAvailable)();
}

static  void method_30205( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::TrackJet> > >*)o)->isTransient)());
  else   (((const ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::TrackJet> > >*)o)->isTransient)();
}

static  void method_30206( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::edm::RefProd<std::vector<reco::FFTAnyJet<reco::TrackJet> > >*)o)->swap)(*(::edm::RefProd<std::vector<reco::FFTAnyJet<reco::TrackJet> > >*)arg[0]);
}

static  void method_30207( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (short)((((::edm::RefProd<std::vector<reco::FFTAnyJet<reco::TrackJet> > >*)o)->Class_Version)());
  else   (((::edm::RefProd<std::vector<reco::FFTAnyJet<reco::TrackJet> > >*)o)->Class_Version)();
}

static void method_newdel_5731( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::TrackJet> > > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::TrackJet> > > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::TrackJet> > > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::TrackJet> > > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::TrackJet> > > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class RefProd<std::vector<reco::FFTAnyJet<reco::TrackJet>, std::allocator<reco::FFTAnyJet<reco::TrackJet> > > > -------------------------------
void __edm__RefProd_std__vector_reco__FFTAnyJet_reco__TrackJet_s_s__db_datamem(Reflex::Class*);
void __edm__RefProd_std__vector_reco__FFTAnyJet_reco__TrackJet_s_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__RefProd_std__vector_reco__FFTAnyJet_reco__TrackJet_s_s__datamem_bld(&__edm__RefProd_std__vector_reco__FFTAnyJet_reco__TrackJet_s_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__RefProd_std__vector_reco__FFTAnyJet_reco__TrackJet_s_s__funcmem_bld(&__edm__RefProd_std__vector_reco__FFTAnyJet_reco__TrackJet_s_s__db_funcmem);
void __edm__RefProd_std__vector_reco__FFTAnyJet_reco__TrackJet_s_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::RefProd<std::vector<reco::FFTAnyJet<reco::TrackJet> > >"), typeid(::edm::RefProd<std::vector<reco::FFTAnyJet<reco::TrackJet> > >), sizeof(::edm::RefProd<std::vector<reco::FFTAnyJet<reco::TrackJet> > >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("ClassVersion"), ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::TrackJet> > >::Class_Version())
  .AddTypedef(type_3124, Reflex::Literal("edm::RefProd<std::vector<reco::FFTAnyJet<reco::TrackJet> > >::product_type"))
  .AddTypedef(type_3124, Reflex::Literal("edm::RefProd<std::vector<reco::FFTAnyJet<reco::TrackJet> > >::value_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_48827, type_48828), Reflex::Literal("operator="), operator_30183, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_48828), Reflex::Literal("RefProd"), constructor_30184, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("RefProd"), constructor_30185, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_48829), Reflex::Literal("RefProd"), constructor_30186, 0, "handle", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_48830), Reflex::Literal("RefProd"), constructor_30187, 0, "handle", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_48116), Reflex::Literal("RefProd"), constructor_30188, 0, "iProduct", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_48831), Reflex::Literal("RefProd"), constructor_30189, 0, "handle", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_25503, type_25623), Reflex::Literal("RefProd"), constructor_30190, 0, "productID;prodGetter", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~RefProd"), destructor_30191, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_5731, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__RefProd_std__vector_reco__FFTAnyJet_reco__TrackJet_s_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__RefProd_std__vector_reco__FFTAnyJet_reco__TrackJet_s_s__funcmem_bld);
}

//------Delayed data member builder for class RefProd<std::vector<reco::FFTAnyJet<reco::TrackJet>, std::allocator<reco::FFTAnyJet<reco::TrackJet> > > > -------------------
void __edm__RefProd_std__vector_reco__FFTAnyJet_reco__TrackJet_s_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_5697, Reflex::Literal("product_"), OffsetOf(__shadow__::__edm__RefProd_std__vector_reco__FFTAnyJet_reco__TrackJet_s_s_, product_), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class RefProd<std::vector<reco::FFTAnyJet<reco::TrackJet>, std::allocator<reco::FFTAnyJet<reco::TrackJet> > > > -------------------
void __edm__RefProd_std__vector_reco__FFTAnyJet_reco__TrackJet_s_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_25841), Reflex::Literal("operator*"), operator_30192, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_48116), Reflex::Literal("operator->"), operator_30193, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_48116), Reflex::Literal("get"), method_30194, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_48116), Reflex::Literal("product"), method_30195, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_29672), Reflex::Literal("refCore"), method_30196, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("isNull"), method_30197, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("isNonnull"), method_30198, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("operator!"), operator_30199, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_5905), Reflex::Literal("id"), method_30200, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_25623), Reflex::Literal("productGetter"), method_30201, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("hasCache"), method_30202, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("hasProductCache"), method_30203, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("isAvailable"), method_30204, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("isTransient"), method_30205, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_48827), Reflex::Literal("swap"), method_30206, 0, "other", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_484), Reflex::Literal("Class_Version"), method_30207, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC);
}
//------Stub functions for class vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet>, std::allocator<reco::FFTAnyJet<reco::PFJet> > >, reco::FFTAnyJet<reco::PFJet>, edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet>, std::allocator<reco::FFTAnyJet<reco::PFJet> > >, reco::FFTAnyJet<reco::PFJet> > >,std::allocator<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet>, std::allocator<reco::FFTAnyJet<reco::PFJet> > >, reco::FFTAnyJet<reco::PFJet>, edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet>, std::allocator<reco::FFTAnyJet<reco::PFJet> > >, reco::FFTAnyJet<reco::PFJet> > > > > -------------------------------
static void constructor_16758( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >();
  else ::new(mem) ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >();
}

static void constructor_16759( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >(*(const ::std::allocator<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)arg[0]);
  else ::new(mem) ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >(*(const ::std::allocator<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)arg[0]);
}

static void constructor_16760( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if ( arg.size() == 1 ) {
    if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >(*(::std::size_t*)arg[0]);
  else ::new(mem) ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >(*(::std::size_t*)arg[0]);
  }
  else if ( arg.size() == 2 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >(*(::std::size_t*)arg[0],
      *(const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)arg[1]);
  else ::new(mem) ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >(*(::std::size_t*)arg[0],
      *(const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)arg[1]);
  }
  else if ( arg.size() == 3 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >(*(::std::size_t*)arg[0],
      *(const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)arg[1],
      *(const ::std::allocator<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)arg[2]);
  else ::new(mem) ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >(*(::std::size_t*)arg[0],
      *(const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)arg[1],
      *(const ::std::allocator<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)arg[2]);
  }
}

static void constructor_16761( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >(*(const ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)arg[0]);
  else ::new(mem) ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >(*(const ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)arg[0]);
}

static void destructor_16762(void*, void * o, const std::vector<void*>&, void *) {
(((::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >::~vector)();
}
static  void operator_16763( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->operator=)(*(const ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)arg[0]);
  else   (((::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->operator=)(*(const ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)arg[0]);
}

static  void method_16764( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->assign)(*(::std::size_t*)arg[0],
    *(const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)arg[1]);
}

static  void method_16765( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*,std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > > >)((((::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->begin)());
  else   (((::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->begin)();
}

static  void method_16766( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<const edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*,std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > > >)((((const ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->begin)());
  else   (((const ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->begin)();
}

static  void method_16767( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*,std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > > >)((((::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->end)());
  else   (((::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->end)();
}

static  void method_16768( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<const edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*,std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > > >)((((const ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->end)());
  else   (((const ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->end)();
}

static  void method_16773( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->size)());
  else   (((const ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->size)();
}

static  void method_16774( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->max_size)());
  else   (((const ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->max_size)();
}

static  void method_16775( void*, void* o, const std::vector<void*>& arg, void*)
{
  if ( arg.size() == 1 ) {
    (((::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->resize)(*(::std::size_t*)arg[0]);
  }
  else if ( arg.size() == 2 ) { 
    (((::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->resize)(*(::std::size_t*)arg[0],
      *(::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)arg[1]);
  }
}

static  void method_16776( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->capacity)());
  else   (((const ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->capacity)();
}

static  void method_16777( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->empty)());
  else   (((const ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->empty)();
}

static  void method_16778( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->reserve)(*(::std::size_t*)arg[0]);
}

static  void operator_16779( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->operator[])(*(::std::size_t*)arg[0]);
  else   (((::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->operator[])(*(::std::size_t*)arg[0]);
}

static  void operator_16780( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->operator[])(*(::std::size_t*)arg[0]);
  else   (((const ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->operator[])(*(::std::size_t*)arg[0]);
}

static  void method_16782( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->at)(*(::std::size_t*)arg[0]);
  else   (((::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->at)(*(::std::size_t*)arg[0]);
}

static  void method_16783( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->at)(*(::std::size_t*)arg[0]);
  else   (((const ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->at)(*(::std::size_t*)arg[0]);
}

static  void method_16784( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->front)();
  else   (((::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->front)();
}

static  void method_16785( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->front)();
  else   (((const ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->front)();
}

static  void method_16786( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->back)();
  else   (((::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->back)();
}

static  void method_16787( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->back)();
  else   (((const ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->back)();
}

static  void method_16788( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->data)());
  else   (((::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->data)();
}

static  void method_16789( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->data)());
  else   (((const ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->data)();
}

static  void method_16790( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->push_back)(*(const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)arg[0]);
}

static  void method_16791( void*, void* o, const std::vector<void*>&, void*)
{
  (((::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->pop_back)();
}

static  void method_16792( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*,std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > > >)((((::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->insert)(*(::__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*,std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > > >*)arg[0],
    *(const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)arg[1]));
  else   (((::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->insert)(*(::__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*,std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > > >*)arg[0],
    *(const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)arg[1]);
}

static  void method_16793( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->insert)(*(::__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*,std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > > >*)arg[0],
    *(::std::size_t*)arg[1],
    *(const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)arg[2]);
}

static  void method_16794( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*,std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > > >)((((::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->erase)(*(::__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*,std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > > >*)arg[0]));
  else   (((::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->erase)(*(::__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*,std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > > >*)arg[0]);
}

static  void method_16795( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*,std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > > >)((((::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->erase)(*(::__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*,std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > > >*)arg[0],
    *(::__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*,std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > > >*)arg[1]));
  else   (((::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->erase)(*(::__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*,std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > > >*)arg[0],
    *(::__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*,std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > > >*)arg[1]);
}

static  void method_16796( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->swap)(*(::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)arg[0]);
}

static  void method_16797( void*, void* o, const std::vector<void*>&, void*)
{
  (((::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->clear)();
}

static void method_newdel_3128( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

static void method_x64( void* retaddr, void*, const std::vector<void*>&, void*)
{
  typedef std::vector<std::pair< ::Reflex::Base, int> > Bases_t;
  static Bases_t s_bases;
  if ( !s_bases.size() ) {
    s_bases.push_back(std::make_pair(::Reflex::Base( ::Reflex::TypeBuilder(Reflex::Literal("std::_Vector_base<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >,std::allocator<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > > >")), ::Reflex::BaseOffset< ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >,::std::_Vector_base<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >,std::allocator<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > > > >::Get(),::Reflex::PROTECTED), 0));
  }
  if (retaddr) *(Bases_t**)retaddr = &s_bases;
}

static void method_x65( void* retaddr, void*, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**) retaddr = ::Reflex::Proxy< ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > > >::Generate();
  else ::Reflex::Proxy< ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > > >::Generate();
}

//------Dictionary for class vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet>, std::allocator<reco::FFTAnyJet<reco::PFJet> > >, reco::FFTAnyJet<reco::PFJet>, edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet>, std::allocator<reco::FFTAnyJet<reco::PFJet> > >, reco::FFTAnyJet<reco::PFJet> > >,std::allocator<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet>, std::allocator<reco::FFTAnyJet<reco::PFJet> > >, reco::FFTAnyJet<reco::PFJet>, edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet>, std::allocator<reco::FFTAnyJet<reco::PFJet> > >, reco::FFTAnyJet<reco::PFJet> > > > > -------------------------------
void __std__vector_edm__FwdRef_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s_s__db_datamem(Reflex::Class*);
void __std__vector_edm__FwdRef_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __std__vector_edm__FwdRef_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s_s__datamem_bld(&__std__vector_edm__FwdRef_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s_s__db_datamem);
Reflex::GenreflexMemberBuilder __std__vector_edm__FwdRef_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s_s__funcmem_bld(&__std__vector_edm__FwdRef_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s_s__db_funcmem);
void __std__vector_edm__FwdRef_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >"), typeid(::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >), sizeof(::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddBase(type_2546, ::Reflex::BaseOffset< ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >, ::std::_Vector_base<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >,std::allocator<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > > > >::Get(), ::Reflex::PROTECTED)
  .AddTypedef(type_5496, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >::_Alloc_value_type"))
  .AddTypedef(type_2546, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >::_Base"))
  .AddTypedef(type_3506, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >::_Tp_alloc_type"))
  .AddTypedef(type_9701, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >::_Alloc_traits"))
  .AddTypedef(type_5496, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >::value_type"))
  .AddTypedef(type_11128, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >::pointer"))
  .AddTypedef(type_16745, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >::const_pointer"))
  .AddTypedef(type_16747, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >::reference"))
  .AddTypedef(type_16749, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >::const_reference"))
  .AddTypedef(type_9502, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >::iterator"))
  .AddTypedef(type_9503, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >::const_iterator"))
  .AddTypedef(type_3806, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >::const_reverse_iterator"))
  .AddTypedef(type_3807, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >::reverse_iterator"))
  .AddTypedef(type_3455, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >::size_type"))
  .AddTypedef(type_3318, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >::difference_type"))
  .AddTypedef(type_3506, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >::allocator_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("vector"), constructor_16758, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_42477), Reflex::Literal("vector"), constructor_16759, 0, "__a", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_3455, type_16749, type_42477), Reflex::Literal("vector"), constructor_16760, 0, "__n;__value=_Tp();__a=_Alloc()", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_44168), Reflex::Literal("vector"), constructor_16761, 0, "__x", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~vector"), destructor_16762, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_3128, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getBasesTable"), method_x64, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddFunctionMember<void*(void)>(Reflex::Literal("createCollFuncTable"), method_x65, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandFunctionMemberBuilder(&__std__vector_edm__FwdRef_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s_s__funcmem_bld);
}

//------Delayed data member builder for class vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet>, std::allocator<reco::FFTAnyJet<reco::PFJet> > >, reco::FFTAnyJet<reco::PFJet>, edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet>, std::allocator<reco::FFTAnyJet<reco::PFJet> > >, reco::FFTAnyJet<reco::PFJet> > >,std::allocator<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet>, std::allocator<reco::FFTAnyJet<reco::PFJet> > >, reco::FFTAnyJet<reco::PFJet>, edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet>, std::allocator<reco::FFTAnyJet<reco::PFJet> > >, reco::FFTAnyJet<reco::PFJet> > > > > -------------------
void __std__vector_edm__FwdRef_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s_s__db_datamem(Reflex::Class*) {

}
//------Delayed function member builder for class vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet>, std::allocator<reco::FFTAnyJet<reco::PFJet> > >, reco::FFTAnyJet<reco::PFJet>, edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet>, std::allocator<reco::FFTAnyJet<reco::PFJet> > >, reco::FFTAnyJet<reco::PFJet> > >,std::allocator<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet>, std::allocator<reco::FFTAnyJet<reco::PFJet> > >, reco::FFTAnyJet<reco::PFJet>, edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet>, std::allocator<reco::FFTAnyJet<reco::PFJet> > >, reco::FFTAnyJet<reco::PFJet> > > > > -------------------
void __std__vector_edm__FwdRef_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_44169, type_44168), Reflex::Literal("operator="), operator_16763, 0, "__x", ::Reflex::PUBLIC | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_3455, type_16749), Reflex::Literal("assign"), method_16764, 0, "__n;__val", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_9502), Reflex::Literal("begin"), method_16765, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_9503), Reflex::Literal("begin"), method_16766, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_9502), Reflex::Literal("end"), method_16767, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_9503), Reflex::Literal("end"), method_16768, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3455), Reflex::Literal("size"), method_16773, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3455), Reflex::Literal("max_size"), method_16774, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_3455, type_5496), Reflex::Literal("resize"), method_16775, 0, "__new_size;__x=_Tp()", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3455), Reflex::Literal("capacity"), method_16776, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("empty"), method_16777, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_3455), Reflex::Literal("reserve"), method_16778, 0, "__n", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_16747, type_3455), Reflex::Literal("operator[]"), operator_16779, 0, "__n", ::Reflex::PUBLIC | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_16749, type_3455), Reflex::Literal("operator[]"), operator_16780, 0, "__n", ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_16747, type_3455), Reflex::Literal("at"), method_16782, 0, "__n", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_16749, type_3455), Reflex::Literal("at"), method_16783, 0, "__n", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_16747), Reflex::Literal("front"), method_16784, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_16749), Reflex::Literal("front"), method_16785, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_16747), Reflex::Literal("back"), method_16786, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_16749), Reflex::Literal("back"), method_16787, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_11128), Reflex::Literal("data"), method_16788, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_16745), Reflex::Literal("data"), method_16789, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_16749), Reflex::Literal("push_back"), method_16790, 0, "__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708), Reflex::Literal("pop_back"), method_16791, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_9502, type_9502, type_16749), Reflex::Literal("insert"), method_16792, 0, "__position;__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_9502, type_3455, type_16749), Reflex::Literal("insert"), method_16793, 0, "__position;__n;__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_9502, type_9502), Reflex::Literal("erase"), method_16794, 0, "__position", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_9502, type_9502, type_9502), Reflex::Literal("erase"), method_16795, 0, "__first;__last", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_44169), Reflex::Literal("swap"), method_16796, 0, "__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708), Reflex::Literal("clear"), method_16797, 0, 0, ::Reflex::PUBLIC);
}
//------Stub functions for class vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet>, std::allocator<reco::FFTAnyJet<reco::BasicJet> > >, reco::FFTAnyJet<reco::BasicJet>, edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet>, std::allocator<reco::FFTAnyJet<reco::BasicJet> > >, reco::FFTAnyJet<reco::BasicJet> > >,std::allocator<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet>, std::allocator<reco::FFTAnyJet<reco::BasicJet> > >, reco::FFTAnyJet<reco::BasicJet>, edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet>, std::allocator<reco::FFTAnyJet<reco::BasicJet> > >, reco::FFTAnyJet<reco::BasicJet> > > > > -------------------------------
static void constructor_16953( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >();
  else ::new(mem) ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >();
}

static void constructor_16954( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >(*(const ::std::allocator<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)arg[0]);
  else ::new(mem) ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >(*(const ::std::allocator<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)arg[0]);
}

static void constructor_16955( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if ( arg.size() == 1 ) {
    if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >(*(::std::size_t*)arg[0]);
  else ::new(mem) ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >(*(::std::size_t*)arg[0]);
  }
  else if ( arg.size() == 2 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >(*(::std::size_t*)arg[0],
      *(const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)arg[1]);
  else ::new(mem) ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >(*(::std::size_t*)arg[0],
      *(const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)arg[1]);
  }
  else if ( arg.size() == 3 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >(*(::std::size_t*)arg[0],
      *(const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)arg[1],
      *(const ::std::allocator<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)arg[2]);
  else ::new(mem) ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >(*(::std::size_t*)arg[0],
      *(const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)arg[1],
      *(const ::std::allocator<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)arg[2]);
  }
}

static void constructor_16956( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >(*(const ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)arg[0]);
  else ::new(mem) ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >(*(const ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)arg[0]);
}

static void destructor_16957(void*, void * o, const std::vector<void*>&, void *) {
(((::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >::~vector)();
}
static  void operator_16958( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->operator=)(*(const ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)arg[0]);
  else   (((::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->operator=)(*(const ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)arg[0]);
}

static  void method_16959( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->assign)(*(::std::size_t*)arg[0],
    *(const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)arg[1]);
}

static  void method_16960( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*,std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > > >)((((::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->begin)());
  else   (((::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->begin)();
}

static  void method_16961( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<const edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*,std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > > >)((((const ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->begin)());
  else   (((const ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->begin)();
}

static  void method_16962( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*,std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > > >)((((::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->end)());
  else   (((::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->end)();
}

static  void method_16963( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<const edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*,std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > > >)((((const ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->end)());
  else   (((const ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->end)();
}

static  void method_16968( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->size)());
  else   (((const ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->size)();
}

static  void method_16969( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->max_size)());
  else   (((const ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->max_size)();
}

static  void method_16970( void*, void* o, const std::vector<void*>& arg, void*)
{
  if ( arg.size() == 1 ) {
    (((::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->resize)(*(::std::size_t*)arg[0]);
  }
  else if ( arg.size() == 2 ) { 
    (((::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->resize)(*(::std::size_t*)arg[0],
      *(::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)arg[1]);
  }
}

static  void method_16971( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->capacity)());
  else   (((const ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->capacity)();
}

static  void method_16972( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->empty)());
  else   (((const ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->empty)();
}

static  void method_16973( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->reserve)(*(::std::size_t*)arg[0]);
}

static  void operator_16974( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->operator[])(*(::std::size_t*)arg[0]);
  else   (((::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->operator[])(*(::std::size_t*)arg[0]);
}

static  void operator_16975( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->operator[])(*(::std::size_t*)arg[0]);
  else   (((const ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->operator[])(*(::std::size_t*)arg[0]);
}

static  void method_16977( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->at)(*(::std::size_t*)arg[0]);
  else   (((::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->at)(*(::std::size_t*)arg[0]);
}

static  void method_16978( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->at)(*(::std::size_t*)arg[0]);
  else   (((const ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->at)(*(::std::size_t*)arg[0]);
}

static  void method_16979( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->front)();
  else   (((::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->front)();
}

static  void method_16980( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->front)();
  else   (((const ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->front)();
}

static  void method_16981( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->back)();
  else   (((::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->back)();
}

static  void method_16982( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->back)();
  else   (((const ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->back)();
}

static  void method_16983( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->data)());
  else   (((::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->data)();
}

static  void method_16984( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->data)());
  else   (((const ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->data)();
}

static  void method_16985( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->push_back)(*(const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)arg[0]);
}

static  void method_16986( void*, void* o, const std::vector<void*>&, void*)
{
  (((::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->pop_back)();
}

static  void method_16987( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*,std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > > >)((((::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->insert)(*(::__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*,std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > > >*)arg[0],
    *(const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)arg[1]));
  else   (((::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->insert)(*(::__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*,std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > > >*)arg[0],
    *(const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)arg[1]);
}

static  void method_16988( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->insert)(*(::__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*,std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > > >*)arg[0],
    *(::std::size_t*)arg[1],
    *(const ::edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)arg[2]);
}

static  void method_16989( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*,std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > > >)((((::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->erase)(*(::__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*,std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > > >*)arg[0]));
  else   (((::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->erase)(*(::__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*,std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > > >*)arg[0]);
}

static  void method_16990( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*,std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > > >)((((::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->erase)(*(::__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*,std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > > >*)arg[0],
    *(::__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*,std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > > >*)arg[1]));
  else   (((::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->erase)(*(::__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*,std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > > >*)arg[0],
    *(::__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*,std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > > >*)arg[1]);
}

static  void method_16991( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->swap)(*(::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)arg[0]);
}

static  void method_16992( void*, void* o, const std::vector<void*>&, void*)
{
  (((::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->clear)();
}

static void method_newdel_3133( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

static void method_x67( void* retaddr, void*, const std::vector<void*>&, void*)
{
  typedef std::vector<std::pair< ::Reflex::Base, int> > Bases_t;
  static Bases_t s_bases;
  if ( !s_bases.size() ) {
    s_bases.push_back(std::make_pair(::Reflex::Base( ::Reflex::TypeBuilder(Reflex::Literal("std::_Vector_base<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >,std::allocator<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > > >")), ::Reflex::BaseOffset< ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >,::std::_Vector_base<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >,std::allocator<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > > > >::Get(),::Reflex::PROTECTED), 0));
  }
  if (retaddr) *(Bases_t**)retaddr = &s_bases;
}

static void method_x68( void* retaddr, void*, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**) retaddr = ::Reflex::Proxy< ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > > >::Generate();
  else ::Reflex::Proxy< ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > > >::Generate();
}

//------Dictionary for class vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet>, std::allocator<reco::FFTAnyJet<reco::BasicJet> > >, reco::FFTAnyJet<reco::BasicJet>, edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet>, std::allocator<reco::FFTAnyJet<reco::BasicJet> > >, reco::FFTAnyJet<reco::BasicJet> > >,std::allocator<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet>, std::allocator<reco::FFTAnyJet<reco::BasicJet> > >, reco::FFTAnyJet<reco::BasicJet>, edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet>, std::allocator<reco::FFTAnyJet<reco::BasicJet> > >, reco::FFTAnyJet<reco::BasicJet> > > > > -------------------------------
void __std__vector_edm__FwdRef_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s_s__db_datamem(Reflex::Class*);
void __std__vector_edm__FwdRef_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __std__vector_edm__FwdRef_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s_s__datamem_bld(&__std__vector_edm__FwdRef_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s_s__db_datamem);
Reflex::GenreflexMemberBuilder __std__vector_edm__FwdRef_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s_s__funcmem_bld(&__std__vector_edm__FwdRef_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s_s__db_funcmem);
void __std__vector_edm__FwdRef_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >"), typeid(::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >), sizeof(::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddBase(type_2548, ::Reflex::BaseOffset< ::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >, ::std::_Vector_base<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >,std::allocator<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > > > >::Get(), ::Reflex::PROTECTED)
  .AddTypedef(type_5497, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >::_Alloc_value_type"))
  .AddTypedef(type_2548, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >::_Base"))
  .AddTypedef(type_3515, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >::_Tp_alloc_type"))
  .AddTypedef(type_9703, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >::_Alloc_traits"))
  .AddTypedef(type_5497, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >::value_type"))
  .AddTypedef(type_11166, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >::pointer"))
  .AddTypedef(type_16940, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >::const_pointer"))
  .AddTypedef(type_16942, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >::reference"))
  .AddTypedef(type_16944, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >::const_reference"))
  .AddTypedef(type_9506, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >::iterator"))
  .AddTypedef(type_9507, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >::const_iterator"))
  .AddTypedef(type_3814, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >::const_reverse_iterator"))
  .AddTypedef(type_3815, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >::reverse_iterator"))
  .AddTypedef(type_3455, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >::size_type"))
  .AddTypedef(type_3318, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >::difference_type"))
  .AddTypedef(type_3515, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >::allocator_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("vector"), constructor_16953, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_42503), Reflex::Literal("vector"), constructor_16954, 0, "__a", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_3455, type_16944, type_42503), Reflex::Literal("vector"), constructor_16955, 0, "__n;__value=_Tp();__a=_Alloc()", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_44176), Reflex::Literal("vector"), constructor_16956, 0, "__x", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~vector"), destructor_16957, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_3133, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getBasesTable"), method_x67, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddFunctionMember<void*(void)>(Reflex::Literal("createCollFuncTable"), method_x68, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandFunctionMemberBuilder(&__std__vector_edm__FwdRef_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s_s__funcmem_bld);
}

//------Delayed data member builder for class vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet>, std::allocator<reco::FFTAnyJet<reco::BasicJet> > >, reco::FFTAnyJet<reco::BasicJet>, edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet>, std::allocator<reco::FFTAnyJet<reco::BasicJet> > >, reco::FFTAnyJet<reco::BasicJet> > >,std::allocator<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet>, std::allocator<reco::FFTAnyJet<reco::BasicJet> > >, reco::FFTAnyJet<reco::BasicJet>, edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet>, std::allocator<reco::FFTAnyJet<reco::BasicJet> > >, reco::FFTAnyJet<reco::BasicJet> > > > > -------------------
void __std__vector_edm__FwdRef_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s_s__db_datamem(Reflex::Class*) {

}
//------Delayed function member builder for class vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet>, std::allocator<reco::FFTAnyJet<reco::BasicJet> > >, reco::FFTAnyJet<reco::BasicJet>, edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet>, std::allocator<reco::FFTAnyJet<reco::BasicJet> > >, reco::FFTAnyJet<reco::BasicJet> > >,std::allocator<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet>, std::allocator<reco::FFTAnyJet<reco::BasicJet> > >, reco::FFTAnyJet<reco::BasicJet>, edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet>, std::allocator<reco::FFTAnyJet<reco::BasicJet> > >, reco::FFTAnyJet<reco::BasicJet> > > > > -------------------
void __std__vector_edm__FwdRef_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_44177, type_44176), Reflex::Literal("operator="), operator_16958, 0, "__x", ::Reflex::PUBLIC | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_3455, type_16944), Reflex::Literal("assign"), method_16959, 0, "__n;__val", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_9506), Reflex::Literal("begin"), method_16960, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_9507), Reflex::Literal("begin"), method_16961, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_9506), Reflex::Literal("end"), method_16962, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_9507), Reflex::Literal("end"), method_16963, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3455), Reflex::Literal("size"), method_16968, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3455), Reflex::Literal("max_size"), method_16969, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_3455, type_5497), Reflex::Literal("resize"), method_16970, 0, "__new_size;__x=_Tp()", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3455), Reflex::Literal("capacity"), method_16971, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("empty"), method_16972, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_3455), Reflex::Literal("reserve"), method_16973, 0, "__n", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_16942, type_3455), Reflex::Literal("operator[]"), operator_16974, 0, "__n", ::Reflex::PUBLIC | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_16944, type_3455), Reflex::Literal("operator[]"), operator_16975, 0, "__n", ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_16942, type_3455), Reflex::Literal("at"), method_16977, 0, "__n", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_16944, type_3455), Reflex::Literal("at"), method_16978, 0, "__n", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_16942), Reflex::Literal("front"), method_16979, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_16944), Reflex::Literal("front"), method_16980, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_16942), Reflex::Literal("back"), method_16981, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_16944), Reflex::Literal("back"), method_16982, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_11166), Reflex::Literal("data"), method_16983, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_16940), Reflex::Literal("data"), method_16984, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_16944), Reflex::Literal("push_back"), method_16985, 0, "__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708), Reflex::Literal("pop_back"), method_16986, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_9506, type_9506, type_16944), Reflex::Literal("insert"), method_16987, 0, "__position;__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_9506, type_3455, type_16944), Reflex::Literal("insert"), method_16988, 0, "__position;__n;__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_9506, type_9506), Reflex::Literal("erase"), method_16989, 0, "__position", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_9506, type_9506, type_9506), Reflex::Literal("erase"), method_16990, 0, "__first;__last", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_44177), Reflex::Literal("swap"), method_16991, 0, "__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708), Reflex::Literal("clear"), method_16992, 0, 0, ::Reflex::PUBLIC);
}
//------Stub functions for class RefProd<std::vector<reco::FFTAnyJet<reco::BasicJet>, std::allocator<reco::FFTAnyJet<reco::BasicJet> > > > -------------------------------
static  void operator_30241( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::RefProd<std::vector<reco::FFTAnyJet<reco::BasicJet> > >*)o)->operator=)(*(const ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::BasicJet> > >*)arg[0]);
  else   (((::edm::RefProd<std::vector<reco::FFTAnyJet<reco::BasicJet> > >*)o)->operator=)(*(const ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::BasicJet> > >*)arg[0]);
}

static void constructor_30242( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::BasicJet> > >(*(const ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::BasicJet> > >*)arg[0]);
  else ::new(mem) ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::BasicJet> > >(*(const ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::BasicJet> > >*)arg[0]);
}

static void constructor_30243( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::BasicJet> > >();
  else ::new(mem) ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::BasicJet> > >();
}

static void constructor_30244( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::BasicJet> > >(*(const ::edm::Handle<std::vector<reco::FFTAnyJet<reco::BasicJet> > >*)arg[0]);
  else ::new(mem) ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::BasicJet> > >(*(const ::edm::Handle<std::vector<reco::FFTAnyJet<reco::BasicJet> > >*)arg[0]);
}

static void constructor_30245( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::BasicJet> > >(*(const ::edm::OrphanHandle<std::vector<reco::FFTAnyJet<reco::BasicJet> > >*)arg[0]);
  else ::new(mem) ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::BasicJet> > >(*(const ::edm::OrphanHandle<std::vector<reco::FFTAnyJet<reco::BasicJet> > >*)arg[0]);
}

static void constructor_30246( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::BasicJet> > >((const ::std::vector<reco::FFTAnyJet<reco::BasicJet> >*)arg[0]);
  else ::new(mem) ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::BasicJet> > >((const ::std::vector<reco::FFTAnyJet<reco::BasicJet> >*)arg[0]);
}

static void constructor_30247( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::BasicJet> > >(*(const ::edm::TestHandle<std::vector<reco::FFTAnyJet<reco::BasicJet> > >*)arg[0]);
  else ::new(mem) ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::BasicJet> > >(*(const ::edm::TestHandle<std::vector<reco::FFTAnyJet<reco::BasicJet> > >*)arg[0]);
}

static void constructor_30248( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::BasicJet> > >(*(const ::edm::ProductID*)arg[0],
      (const ::edm::EDProductGetter*)arg[1]);
  else ::new(mem) ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::BasicJet> > >(*(const ::edm::ProductID*)arg[0],
      (const ::edm::EDProductGetter*)arg[1]);
}

static void destructor_30249(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::RefProd<std::vector<reco::FFTAnyJet<reco::BasicJet> > >*)o)->::edm::RefProd<std::vector<reco::FFTAnyJet<reco::BasicJet> > >::~RefProd)();
}
static  void operator_30250( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::BasicJet> > >*)o)->operator*)();
  else   (((const ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::BasicJet> > >*)o)->operator*)();
}

static  void operator_30251( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::BasicJet> > >*)o)->operator->)());
  else   (((const ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::BasicJet> > >*)o)->operator->)();
}

static  void method_30252( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::BasicJet> > >*)o)->get)());
  else   (((const ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::BasicJet> > >*)o)->get)();
}

static  void method_30253( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::BasicJet> > >*)o)->product)());
  else   (((const ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::BasicJet> > >*)o)->product)();
}

static  void method_30254( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::BasicJet> > >*)o)->refCore)();
  else   (((const ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::BasicJet> > >*)o)->refCore)();
}

static  void method_30255( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::BasicJet> > >*)o)->isNull)());
  else   (((const ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::BasicJet> > >*)o)->isNull)();
}

static  void method_30256( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::BasicJet> > >*)o)->isNonnull)());
  else   (((const ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::BasicJet> > >*)o)->isNonnull)();
}

static  void operator_30257( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::BasicJet> > >*)o)->operator!)());
  else   (((const ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::BasicJet> > >*)o)->operator!)();
}

static  void method_30258( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::ProductID)((((const ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::BasicJet> > >*)o)->id)());
  else   (((const ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::BasicJet> > >*)o)->id)();
}

static  void method_30259( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::BasicJet> > >*)o)->productGetter)());
  else   (((const ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::BasicJet> > >*)o)->productGetter)();
}

static  void method_30260( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::BasicJet> > >*)o)->hasCache)());
  else   (((const ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::BasicJet> > >*)o)->hasCache)();
}

static  void method_30261( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::BasicJet> > >*)o)->hasProductCache)());
  else   (((const ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::BasicJet> > >*)o)->hasProductCache)();
}

static  void method_30262( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::BasicJet> > >*)o)->isAvailable)());
  else   (((const ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::BasicJet> > >*)o)->isAvailable)();
}

static  void method_30263( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::BasicJet> > >*)o)->isTransient)());
  else   (((const ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::BasicJet> > >*)o)->isTransient)();
}

static  void method_30264( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::edm::RefProd<std::vector<reco::FFTAnyJet<reco::BasicJet> > >*)o)->swap)(*(::edm::RefProd<std::vector<reco::FFTAnyJet<reco::BasicJet> > >*)arg[0]);
}

static  void method_30265( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (short)((((::edm::RefProd<std::vector<reco::FFTAnyJet<reco::BasicJet> > >*)o)->Class_Version)());
  else   (((::edm::RefProd<std::vector<reco::FFTAnyJet<reco::BasicJet> > >*)o)->Class_Version)();
}

static void method_newdel_5733( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::BasicJet> > > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::BasicJet> > > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::BasicJet> > > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::BasicJet> > > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::BasicJet> > > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class RefProd<std::vector<reco::FFTAnyJet<reco::BasicJet>, std::allocator<reco::FFTAnyJet<reco::BasicJet> > > > -------------------------------
void __edm__RefProd_std__vector_reco__FFTAnyJet_reco__BasicJet_s_s__db_datamem(Reflex::Class*);
void __edm__RefProd_std__vector_reco__FFTAnyJet_reco__BasicJet_s_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__RefProd_std__vector_reco__FFTAnyJet_reco__BasicJet_s_s__datamem_bld(&__edm__RefProd_std__vector_reco__FFTAnyJet_reco__BasicJet_s_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__RefProd_std__vector_reco__FFTAnyJet_reco__BasicJet_s_s__funcmem_bld(&__edm__RefProd_std__vector_reco__FFTAnyJet_reco__BasicJet_s_s__db_funcmem);
void __edm__RefProd_std__vector_reco__FFTAnyJet_reco__BasicJet_s_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::RefProd<std::vector<reco::FFTAnyJet<reco::BasicJet> > >"), typeid(::edm::RefProd<std::vector<reco::FFTAnyJet<reco::BasicJet> > >), sizeof(::edm::RefProd<std::vector<reco::FFTAnyJet<reco::BasicJet> > >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("ClassVersion"), ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::BasicJet> > >::Class_Version())
  .AddTypedef(type_3134, Reflex::Literal("edm::RefProd<std::vector<reco::FFTAnyJet<reco::BasicJet> > >::product_type"))
  .AddTypedef(type_3134, Reflex::Literal("edm::RefProd<std::vector<reco::FFTAnyJet<reco::BasicJet> > >::value_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_48837, type_48838), Reflex::Literal("operator="), operator_30241, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_48838), Reflex::Literal("RefProd"), constructor_30242, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("RefProd"), constructor_30243, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_48839), Reflex::Literal("RefProd"), constructor_30244, 0, "handle", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_48840), Reflex::Literal("RefProd"), constructor_30245, 0, "handle", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_48126), Reflex::Literal("RefProd"), constructor_30246, 0, "iProduct", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_48841), Reflex::Literal("RefProd"), constructor_30247, 0, "handle", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_25503, type_25623), Reflex::Literal("RefProd"), constructor_30248, 0, "productID;prodGetter", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~RefProd"), destructor_30249, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_5733, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__RefProd_std__vector_reco__FFTAnyJet_reco__BasicJet_s_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__RefProd_std__vector_reco__FFTAnyJet_reco__BasicJet_s_s__funcmem_bld);
}

//------Delayed data member builder for class RefProd<std::vector<reco::FFTAnyJet<reco::BasicJet>, std::allocator<reco::FFTAnyJet<reco::BasicJet> > > > -------------------
void __edm__RefProd_std__vector_reco__FFTAnyJet_reco__BasicJet_s_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_5697, Reflex::Literal("product_"), OffsetOf(__shadow__::__edm__RefProd_std__vector_reco__FFTAnyJet_reco__BasicJet_s_s_, product_), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class RefProd<std::vector<reco::FFTAnyJet<reco::BasicJet>, std::allocator<reco::FFTAnyJet<reco::BasicJet> > > > -------------------
void __edm__RefProd_std__vector_reco__FFTAnyJet_reco__BasicJet_s_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_25865), Reflex::Literal("operator*"), operator_30250, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_48126), Reflex::Literal("operator->"), operator_30251, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_48126), Reflex::Literal("get"), method_30252, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_48126), Reflex::Literal("product"), method_30253, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_29672), Reflex::Literal("refCore"), method_30254, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("isNull"), method_30255, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("isNonnull"), method_30256, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("operator!"), operator_30257, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_5905), Reflex::Literal("id"), method_30258, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_25623), Reflex::Literal("productGetter"), method_30259, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("hasCache"), method_30260, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("hasProductCache"), method_30261, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("isAvailable"), method_30262, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("isTransient"), method_30263, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_48837), Reflex::Literal("swap"), method_30264, 0, "other", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_484), Reflex::Literal("Class_Version"), method_30265, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC);
}
//------Stub functions for class RefProd<std::vector<reco::FFTAnyJet<reco::JPTJet>, std::allocator<reco::FFTAnyJet<reco::JPTJet> > > > -------------------------------
static  void operator_30125( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::RefProd<std::vector<reco::FFTAnyJet<reco::JPTJet> > >*)o)->operator=)(*(const ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::JPTJet> > >*)arg[0]);
  else   (((::edm::RefProd<std::vector<reco::FFTAnyJet<reco::JPTJet> > >*)o)->operator=)(*(const ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::JPTJet> > >*)arg[0]);
}

static void constructor_30126( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::JPTJet> > >(*(const ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::JPTJet> > >*)arg[0]);
  else ::new(mem) ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::JPTJet> > >(*(const ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::JPTJet> > >*)arg[0]);
}

static void constructor_30127( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::JPTJet> > >();
  else ::new(mem) ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::JPTJet> > >();
}

static void constructor_30128( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::JPTJet> > >(*(const ::edm::Handle<std::vector<reco::FFTAnyJet<reco::JPTJet> > >*)arg[0]);
  else ::new(mem) ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::JPTJet> > >(*(const ::edm::Handle<std::vector<reco::FFTAnyJet<reco::JPTJet> > >*)arg[0]);
}

static void constructor_30129( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::JPTJet> > >(*(const ::edm::OrphanHandle<std::vector<reco::FFTAnyJet<reco::JPTJet> > >*)arg[0]);
  else ::new(mem) ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::JPTJet> > >(*(const ::edm::OrphanHandle<std::vector<reco::FFTAnyJet<reco::JPTJet> > >*)arg[0]);
}

static void constructor_30130( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::JPTJet> > >((const ::std::vector<reco::FFTAnyJet<reco::JPTJet> >*)arg[0]);
  else ::new(mem) ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::JPTJet> > >((const ::std::vector<reco::FFTAnyJet<reco::JPTJet> >*)arg[0]);
}

static void constructor_30131( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::JPTJet> > >(*(const ::edm::TestHandle<std::vector<reco::FFTAnyJet<reco::JPTJet> > >*)arg[0]);
  else ::new(mem) ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::JPTJet> > >(*(const ::edm::TestHandle<std::vector<reco::FFTAnyJet<reco::JPTJet> > >*)arg[0]);
}

static void constructor_30132( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::JPTJet> > >(*(const ::edm::ProductID*)arg[0],
      (const ::edm::EDProductGetter*)arg[1]);
  else ::new(mem) ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::JPTJet> > >(*(const ::edm::ProductID*)arg[0],
      (const ::edm::EDProductGetter*)arg[1]);
}

static void destructor_30133(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::RefProd<std::vector<reco::FFTAnyJet<reco::JPTJet> > >*)o)->::edm::RefProd<std::vector<reco::FFTAnyJet<reco::JPTJet> > >::~RefProd)();
}
static  void operator_30134( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::JPTJet> > >*)o)->operator*)();
  else   (((const ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::JPTJet> > >*)o)->operator*)();
}

static  void operator_30135( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::JPTJet> > >*)o)->operator->)());
  else   (((const ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::JPTJet> > >*)o)->operator->)();
}

static  void method_30136( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::JPTJet> > >*)o)->get)());
  else   (((const ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::JPTJet> > >*)o)->get)();
}

static  void method_30137( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::JPTJet> > >*)o)->product)());
  else   (((const ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::JPTJet> > >*)o)->product)();
}

static  void method_30138( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::JPTJet> > >*)o)->refCore)();
  else   (((const ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::JPTJet> > >*)o)->refCore)();
}

static  void method_30139( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::JPTJet> > >*)o)->isNull)());
  else   (((const ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::JPTJet> > >*)o)->isNull)();
}

static  void method_30140( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::JPTJet> > >*)o)->isNonnull)());
  else   (((const ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::JPTJet> > >*)o)->isNonnull)();
}

static  void operator_30141( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::JPTJet> > >*)o)->operator!)());
  else   (((const ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::JPTJet> > >*)o)->operator!)();
}

static  void method_30142( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::ProductID)((((const ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::JPTJet> > >*)o)->id)());
  else   (((const ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::JPTJet> > >*)o)->id)();
}

static  void method_30143( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::JPTJet> > >*)o)->productGetter)());
  else   (((const ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::JPTJet> > >*)o)->productGetter)();
}

static  void method_30144( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::JPTJet> > >*)o)->hasCache)());
  else   (((const ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::JPTJet> > >*)o)->hasCache)();
}

static  void method_30145( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::JPTJet> > >*)o)->hasProductCache)());
  else   (((const ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::JPTJet> > >*)o)->hasProductCache)();
}

static  void method_30146( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::JPTJet> > >*)o)->isAvailable)());
  else   (((const ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::JPTJet> > >*)o)->isAvailable)();
}

static  void method_30147( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::JPTJet> > >*)o)->isTransient)());
  else   (((const ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::JPTJet> > >*)o)->isTransient)();
}

static  void method_30148( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::edm::RefProd<std::vector<reco::FFTAnyJet<reco::JPTJet> > >*)o)->swap)(*(::edm::RefProd<std::vector<reco::FFTAnyJet<reco::JPTJet> > >*)arg[0]);
}

static  void method_30149( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (short)((((::edm::RefProd<std::vector<reco::FFTAnyJet<reco::JPTJet> > >*)o)->Class_Version)());
  else   (((::edm::RefProd<std::vector<reco::FFTAnyJet<reco::JPTJet> > >*)o)->Class_Version)();
}

static void method_newdel_5729( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::JPTJet> > > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::JPTJet> > > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::JPTJet> > > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::JPTJet> > > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::JPTJet> > > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class RefProd<std::vector<reco::FFTAnyJet<reco::JPTJet>, std::allocator<reco::FFTAnyJet<reco::JPTJet> > > > -------------------------------
void __edm__RefProd_std__vector_reco__FFTAnyJet_reco__JPTJet_s_s__db_datamem(Reflex::Class*);
void __edm__RefProd_std__vector_reco__FFTAnyJet_reco__JPTJet_s_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__RefProd_std__vector_reco__FFTAnyJet_reco__JPTJet_s_s__datamem_bld(&__edm__RefProd_std__vector_reco__FFTAnyJet_reco__JPTJet_s_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__RefProd_std__vector_reco__FFTAnyJet_reco__JPTJet_s_s__funcmem_bld(&__edm__RefProd_std__vector_reco__FFTAnyJet_reco__JPTJet_s_s__db_funcmem);
void __edm__RefProd_std__vector_reco__FFTAnyJet_reco__JPTJet_s_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::RefProd<std::vector<reco::FFTAnyJet<reco::JPTJet> > >"), typeid(::edm::RefProd<std::vector<reco::FFTAnyJet<reco::JPTJet> > >), sizeof(::edm::RefProd<std::vector<reco::FFTAnyJet<reco::JPTJet> > >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("ClassVersion"), ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::JPTJet> > >::Class_Version())
  .AddTypedef(type_3119, Reflex::Literal("edm::RefProd<std::vector<reco::FFTAnyJet<reco::JPTJet> > >::product_type"))
  .AddTypedef(type_3119, Reflex::Literal("edm::RefProd<std::vector<reco::FFTAnyJet<reco::JPTJet> > >::value_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_48817, type_48818), Reflex::Literal("operator="), operator_30125, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_48818), Reflex::Literal("RefProd"), constructor_30126, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("RefProd"), constructor_30127, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_48819), Reflex::Literal("RefProd"), constructor_30128, 0, "handle", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_48820), Reflex::Literal("RefProd"), constructor_30129, 0, "handle", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_48111), Reflex::Literal("RefProd"), constructor_30130, 0, "iProduct", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_48821), Reflex::Literal("RefProd"), constructor_30131, 0, "handle", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_25503, type_25623), Reflex::Literal("RefProd"), constructor_30132, 0, "productID;prodGetter", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~RefProd"), destructor_30133, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_5729, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__RefProd_std__vector_reco__FFTAnyJet_reco__JPTJet_s_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__RefProd_std__vector_reco__FFTAnyJet_reco__JPTJet_s_s__funcmem_bld);
}

//------Delayed data member builder for class RefProd<std::vector<reco::FFTAnyJet<reco::JPTJet>, std::allocator<reco::FFTAnyJet<reco::JPTJet> > > > -------------------
void __edm__RefProd_std__vector_reco__FFTAnyJet_reco__JPTJet_s_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_5697, Reflex::Literal("product_"), OffsetOf(__shadow__::__edm__RefProd_std__vector_reco__FFTAnyJet_reco__JPTJet_s_s_, product_), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class RefProd<std::vector<reco::FFTAnyJet<reco::JPTJet>, std::allocator<reco::FFTAnyJet<reco::JPTJet> > > > -------------------
void __edm__RefProd_std__vector_reco__FFTAnyJet_reco__JPTJet_s_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_25829), Reflex::Literal("operator*"), operator_30134, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_48111), Reflex::Literal("operator->"), operator_30135, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_48111), Reflex::Literal("get"), method_30136, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_48111), Reflex::Literal("product"), method_30137, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_29672), Reflex::Literal("refCore"), method_30138, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("isNull"), method_30139, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("isNonnull"), method_30140, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("operator!"), operator_30141, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_5905), Reflex::Literal("id"), method_30142, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_25623), Reflex::Literal("productGetter"), method_30143, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("hasCache"), method_30144, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("hasProductCache"), method_30145, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("isAvailable"), method_30146, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("isTransient"), method_30147, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_48817), Reflex::Literal("swap"), method_30148, 0, "other", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_484), Reflex::Literal("Class_Version"), method_30149, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC);
}
//------Stub functions for class vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> >,std::allocator<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > > > -------------------------------
static void constructor_16498( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > >();
  else ::new(mem) ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > >();
}

static void constructor_16499( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > >(*(const ::std::allocator<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > >*)arg[0]);
  else ::new(mem) ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > >(*(const ::std::allocator<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > >*)arg[0]);
}

static void constructor_16500( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if ( arg.size() == 1 ) {
    if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > >(*(::std::size_t*)arg[0]);
  else ::new(mem) ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > >(*(::std::size_t*)arg[0]);
  }
  else if ( arg.size() == 2 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > >(*(::std::size_t*)arg[0],
      *(const ::edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> >*)arg[1]);
  else ::new(mem) ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > >(*(::std::size_t*)arg[0],
      *(const ::edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> >*)arg[1]);
  }
  else if ( arg.size() == 3 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > >(*(::std::size_t*)arg[0],
      *(const ::edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> >*)arg[1],
      *(const ::std::allocator<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > >*)arg[2]);
  else ::new(mem) ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > >(*(::std::size_t*)arg[0],
      *(const ::edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> >*)arg[1],
      *(const ::std::allocator<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > >*)arg[2]);
  }
}

static void constructor_16501( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > >(*(const ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > >*)arg[0]);
  else ::new(mem) ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > >(*(const ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > >*)arg[0]);
}

static void destructor_16502(void*, void * o, const std::vector<void*>&, void *) {
(((::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > >*)o)->::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > >::~vector)();
}
static  void operator_16503( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > >*)o)->operator=)(*(const ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > >*)arg[0]);
  else   (((::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > >*)o)->operator=)(*(const ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > >*)arg[0]);
}

static  void method_16504( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > >*)o)->assign)(*(::std::size_t*)arg[0],
    *(const ::edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> >*)arg[1]);
}

static  void method_16505( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> >*,std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > > >)((((::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > >*)o)->begin)());
  else   (((::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > >*)o)->begin)();
}

static  void method_16506( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<const edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> >*,std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > > >)((((const ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > >*)o)->begin)());
  else   (((const ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > >*)o)->begin)();
}

static  void method_16507( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> >*,std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > > >)((((::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > >*)o)->end)());
  else   (((::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > >*)o)->end)();
}

static  void method_16508( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<const edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> >*,std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > > >)((((const ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > >*)o)->end)());
  else   (((const ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > >*)o)->end)();
}

static  void method_16513( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > >*)o)->size)());
  else   (((const ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > >*)o)->size)();
}

static  void method_16514( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > >*)o)->max_size)());
  else   (((const ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > >*)o)->max_size)();
}

static  void method_16515( void*, void* o, const std::vector<void*>& arg, void*)
{
  if ( arg.size() == 1 ) {
    (((::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > >*)o)->resize)(*(::std::size_t*)arg[0]);
  }
  else if ( arg.size() == 2 ) { 
    (((::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > >*)o)->resize)(*(::std::size_t*)arg[0],
      *(::edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> >*)arg[1]);
  }
}

static  void method_16516( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > >*)o)->capacity)());
  else   (((const ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > >*)o)->capacity)();
}

static  void method_16517( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > >*)o)->empty)());
  else   (((const ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > >*)o)->empty)();
}

static  void method_16518( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > >*)o)->reserve)(*(::std::size_t*)arg[0]);
}

static  void operator_16519( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > >*)o)->operator[])(*(::std::size_t*)arg[0]);
  else   (((::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > >*)o)->operator[])(*(::std::size_t*)arg[0]);
}

static  void operator_16520( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > >*)o)->operator[])(*(::std::size_t*)arg[0]);
  else   (((const ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > >*)o)->operator[])(*(::std::size_t*)arg[0]);
}

static  void method_16522( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > >*)o)->at)(*(::std::size_t*)arg[0]);
  else   (((::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > >*)o)->at)(*(::std::size_t*)arg[0]);
}

static  void method_16523( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > >*)o)->at)(*(::std::size_t*)arg[0]);
  else   (((const ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > >*)o)->at)(*(::std::size_t*)arg[0]);
}

static  void method_16524( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > >*)o)->front)();
  else   (((::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > >*)o)->front)();
}

static  void method_16525( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > >*)o)->front)();
  else   (((const ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > >*)o)->front)();
}

static  void method_16526( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > >*)o)->back)();
  else   (((::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > >*)o)->back)();
}

static  void method_16527( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > >*)o)->back)();
  else   (((const ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > >*)o)->back)();
}

static  void method_16528( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > >*)o)->data)());
  else   (((::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > >*)o)->data)();
}

static  void method_16529( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > >*)o)->data)());
  else   (((const ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > >*)o)->data)();
}

static  void method_16530( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > >*)o)->push_back)(*(const ::edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> >*)arg[0]);
}

static  void method_16531( void*, void* o, const std::vector<void*>&, void*)
{
  (((::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > >*)o)->pop_back)();
}

static  void method_16532( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> >*,std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > > >)((((::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > >*)o)->insert)(*(::__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> >*,std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > > >*)arg[0],
    *(const ::edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> >*)arg[1]));
  else   (((::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > >*)o)->insert)(*(::__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> >*,std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > > >*)arg[0],
    *(const ::edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> >*)arg[1]);
}

static  void method_16533( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > >*)o)->insert)(*(::__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> >*,std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > > >*)arg[0],
    *(::std::size_t*)arg[1],
    *(const ::edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> >*)arg[2]);
}

static  void method_16534( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> >*,std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > > >)((((::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > >*)o)->erase)(*(::__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> >*,std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > > >*)arg[0]));
  else   (((::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > >*)o)->erase)(*(::__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> >*,std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > > >*)arg[0]);
}

static  void method_16535( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> >*,std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > > >)((((::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > >*)o)->erase)(*(::__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> >*,std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > > >*)arg[0],
    *(::__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> >*,std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > > >*)arg[1]));
  else   (((::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > >*)o)->erase)(*(::__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> >*,std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > > >*)arg[0],
    *(::__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> >*,std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > > >*)arg[1]);
}

static  void method_16536( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > >*)o)->swap)(*(::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > >*)arg[0]);
}

static  void method_16537( void*, void* o, const std::vector<void*>&, void*)
{
  (((::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > >*)o)->clear)();
}

static void method_newdel_3122( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

static void method_x72( void* retaddr, void*, const std::vector<void*>&, void*)
{
  typedef std::vector<std::pair< ::Reflex::Base, int> > Bases_t;
  static Bases_t s_bases;
  if ( !s_bases.size() ) {
    s_bases.push_back(std::make_pair(::Reflex::Base( ::Reflex::TypeBuilder(Reflex::Literal("std::_Vector_base<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> >,std::allocator<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > > >")), ::Reflex::BaseOffset< ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > >,::std::_Vector_base<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> >,std::allocator<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > > > >::Get(),::Reflex::PROTECTED), 0));
  }
  if (retaddr) *(Bases_t**)retaddr = &s_bases;
}

static void method_x73( void* retaddr, void*, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**) retaddr = ::Reflex::Proxy< ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > > >::Generate();
  else ::Reflex::Proxy< ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > > >::Generate();
}

//------Dictionary for class vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> >,std::allocator<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > > > -------------------------------
void __std__vector_edm__FwdPtr_reco__FFTAnyJet_reco__TrackJet_s_s__db_datamem(Reflex::Class*);
void __std__vector_edm__FwdPtr_reco__FFTAnyJet_reco__TrackJet_s_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __std__vector_edm__FwdPtr_reco__FFTAnyJet_reco__TrackJet_s_s__datamem_bld(&__std__vector_edm__FwdPtr_reco__FFTAnyJet_reco__TrackJet_s_s__db_datamem);
Reflex::GenreflexMemberBuilder __std__vector_edm__FwdPtr_reco__FFTAnyJet_reco__TrackJet_s_s__funcmem_bld(&__std__vector_edm__FwdPtr_reco__FFTAnyJet_reco__TrackJet_s_s__db_funcmem);
void __std__vector_edm__FwdPtr_reco__FFTAnyJet_reco__TrackJet_s_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > >"), typeid(::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > >), sizeof(::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddBase(type_2543, ::Reflex::BaseOffset< ::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > >, ::std::_Vector_base<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> >,std::allocator<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > > > >::Get(), ::Reflex::PROTECTED)
  .AddTypedef(type_5306, Reflex::Literal("std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > >::_Alloc_value_type"))
  .AddTypedef(type_2543, Reflex::Literal("std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > >::_Base"))
  .AddTypedef(type_3497, Reflex::Literal("std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > >::_Tp_alloc_type"))
  .AddTypedef(type_9698, Reflex::Literal("std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > >::_Alloc_traits"))
  .AddTypedef(type_5306, Reflex::Literal("std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > >::value_type"))
  .AddTypedef(type_11071, Reflex::Literal("std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > >::pointer"))
  .AddTypedef(type_16485, Reflex::Literal("std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > >::const_pointer"))
  .AddTypedef(type_16487, Reflex::Literal("std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > >::reference"))
  .AddTypedef(type_16489, Reflex::Literal("std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > >::const_reference"))
  .AddTypedef(type_9496, Reflex::Literal("std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > >::iterator"))
  .AddTypedef(type_9497, Reflex::Literal("std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > >::const_iterator"))
  .AddTypedef(type_3798, Reflex::Literal("std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > >::const_reverse_iterator"))
  .AddTypedef(type_3799, Reflex::Literal("std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > >::reverse_iterator"))
  .AddTypedef(type_3455, Reflex::Literal("std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > >::size_type"))
  .AddTypedef(type_3318, Reflex::Literal("std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > >::difference_type"))
  .AddTypedef(type_3497, Reflex::Literal("std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > >::allocator_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("vector"), constructor_16498, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_42438), Reflex::Literal("vector"), constructor_16499, 0, "__a", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_3455, type_16489, type_42438), Reflex::Literal("vector"), constructor_16500, 0, "__n;__value=_Tp();__a=_Alloc()", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_44157), Reflex::Literal("vector"), constructor_16501, 0, "__x", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~vector"), destructor_16502, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_3122, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getBasesTable"), method_x72, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddFunctionMember<void*(void)>(Reflex::Literal("createCollFuncTable"), method_x73, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandFunctionMemberBuilder(&__std__vector_edm__FwdPtr_reco__FFTAnyJet_reco__TrackJet_s_s__funcmem_bld);
}

//------Delayed data member builder for class vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> >,std::allocator<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > > > -------------------
void __std__vector_edm__FwdPtr_reco__FFTAnyJet_reco__TrackJet_s_s__db_datamem(Reflex::Class*) {

}
//------Delayed function member builder for class vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> >,std::allocator<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > > > -------------------
void __std__vector_edm__FwdPtr_reco__FFTAnyJet_reco__TrackJet_s_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_44158, type_44157), Reflex::Literal("operator="), operator_16503, 0, "__x", ::Reflex::PUBLIC | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_3455, type_16489), Reflex::Literal("assign"), method_16504, 0, "__n;__val", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_9496), Reflex::Literal("begin"), method_16505, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_9497), Reflex::Literal("begin"), method_16506, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_9496), Reflex::Literal("end"), method_16507, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_9497), Reflex::Literal("end"), method_16508, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3455), Reflex::Literal("size"), method_16513, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3455), Reflex::Literal("max_size"), method_16514, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_3455, type_5306), Reflex::Literal("resize"), method_16515, 0, "__new_size;__x=_Tp()", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3455), Reflex::Literal("capacity"), method_16516, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("empty"), method_16517, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_3455), Reflex::Literal("reserve"), method_16518, 0, "__n", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_16487, type_3455), Reflex::Literal("operator[]"), operator_16519, 0, "__n", ::Reflex::PUBLIC | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_16489, type_3455), Reflex::Literal("operator[]"), operator_16520, 0, "__n", ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_16487, type_3455), Reflex::Literal("at"), method_16522, 0, "__n", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_16489, type_3455), Reflex::Literal("at"), method_16523, 0, "__n", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_16487), Reflex::Literal("front"), method_16524, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_16489), Reflex::Literal("front"), method_16525, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_16487), Reflex::Literal("back"), method_16526, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_16489), Reflex::Literal("back"), method_16527, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_11071), Reflex::Literal("data"), method_16528, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_16485), Reflex::Literal("data"), method_16529, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_16489), Reflex::Literal("push_back"), method_16530, 0, "__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708), Reflex::Literal("pop_back"), method_16531, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_9496, type_9496, type_16489), Reflex::Literal("insert"), method_16532, 0, "__position;__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_9496, type_3455, type_16489), Reflex::Literal("insert"), method_16533, 0, "__position;__n;__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_9496, type_9496), Reflex::Literal("erase"), method_16534, 0, "__position", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_9496, type_9496, type_9496), Reflex::Literal("erase"), method_16535, 0, "__first;__last", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_44158), Reflex::Literal("swap"), method_16536, 0, "__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708), Reflex::Literal("clear"), method_16537, 0, 0, ::Reflex::PUBLIC);
}
//------Stub functions for class PtrVector<reco::FFTAnyJet<reco::JPTJet> > -------------------------------
static void constructor_27709( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::PtrVector<reco::FFTAnyJet<reco::JPTJet> >();
  else ::new(mem) ::edm::PtrVector<reco::FFTAnyJet<reco::JPTJet> >();
}

static void constructor_27710( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::PtrVector<reco::FFTAnyJet<reco::JPTJet> >(*(const ::edm::ProductID*)arg[0]);
  else ::new(mem) ::edm::PtrVector<reco::FFTAnyJet<reco::JPTJet> >(*(const ::edm::ProductID*)arg[0]);
}

static void constructor_27711( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::PtrVector<reco::FFTAnyJet<reco::JPTJet> >(*(const ::edm::PtrVector<reco::FFTAnyJet<reco::JPTJet> >*)arg[0]);
  else ::new(mem) ::edm::PtrVector<reco::FFTAnyJet<reco::JPTJet> >(*(const ::edm::PtrVector<reco::FFTAnyJet<reco::JPTJet> >*)arg[0]);
}

static  void operator_27712( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (edm::Ptr<reco::FFTAnyJet<reco::JPTJet> >)((((const ::edm::PtrVector<reco::FFTAnyJet<reco::JPTJet> >*)o)->operator[])(*(const unsigned long*)arg[0]));
  else   (((const ::edm::PtrVector<reco::FFTAnyJet<reco::JPTJet> >*)o)->operator[])(*(const unsigned long*)arg[0]);
}

static  void method_27713( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::PtrVectorItr<reco::FFTAnyJet<reco::JPTJet> >)((((const ::edm::PtrVector<reco::FFTAnyJet<reco::JPTJet> >*)o)->begin)());
  else   (((const ::edm::PtrVector<reco::FFTAnyJet<reco::JPTJet> >*)o)->begin)();
}

static  void method_27714( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::PtrVectorItr<reco::FFTAnyJet<reco::JPTJet> >)((((const ::edm::PtrVector<reco::FFTAnyJet<reco::JPTJet> >*)o)->end)());
  else   (((const ::edm::PtrVector<reco::FFTAnyJet<reco::JPTJet> >*)o)->end)();
}

static  void method_27715( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::edm::PtrVector<reco::FFTAnyJet<reco::JPTJet> >*)o)->push_back)(*(const ::edm::Ptr<reco::FFTAnyJet<reco::JPTJet> >*)arg[0]);
}

static  void method_27716( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::edm::PtrVector<reco::FFTAnyJet<reco::JPTJet> >*)o)->swap)(*(::edm::PtrVector<reco::FFTAnyJet<reco::JPTJet> >*)arg[0]);
}

static  void operator_27717( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::PtrVector<reco::FFTAnyJet<reco::JPTJet> >*)o)->operator=)(*(const ::edm::PtrVector<reco::FFTAnyJet<reco::JPTJet> >*)arg[0]);
  else   (((::edm::PtrVector<reco::FFTAnyJet<reco::JPTJet> >*)o)->operator=)(*(const ::edm::PtrVector<reco::FFTAnyJet<reco::JPTJet> >*)arg[0]);
}

static  void method_27718( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::PtrVector<reco::FFTAnyJet<reco::JPTJet> >*)o)->fillView)(*(::std::vector<const void*>*)arg[0]);
}

static  void method_27719( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (short)((((::edm::PtrVector<reco::FFTAnyJet<reco::JPTJet> >*)o)->Class_Version)());
  else   (((::edm::PtrVector<reco::FFTAnyJet<reco::JPTJet> >*)o)->Class_Version)();
}

static void destructor_27722(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::PtrVector<reco::FFTAnyJet<reco::JPTJet> >*)o)->::edm::PtrVector<reco::FFTAnyJet<reco::JPTJet> >::~PtrVector)();
}
static void method_newdel_5287( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::PtrVector<reco::FFTAnyJet<reco::JPTJet> > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::PtrVector<reco::FFTAnyJet<reco::JPTJet> > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::PtrVector<reco::FFTAnyJet<reco::JPTJet> > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::PtrVector<reco::FFTAnyJet<reco::JPTJet> > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::PtrVector<reco::FFTAnyJet<reco::JPTJet> > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

static void method_x75( void* retaddr, void*, const std::vector<void*>&, void*)
{
  typedef std::vector<std::pair< ::Reflex::Base, int> > Bases_t;
  static Bases_t s_bases;
  if ( !s_bases.size() ) {
    s_bases.push_back(std::make_pair(::Reflex::Base( ::Reflex::TypeBuilder(Reflex::Literal("edm::PtrVectorBase")), ::Reflex::BaseOffset< ::edm::PtrVector<reco::FFTAnyJet<reco::JPTJet> >,::edm::PtrVectorBase >::Get(),::Reflex::PUBLIC), 0));
  }
  if (retaddr) *(Bases_t**)retaddr = &s_bases;
}

//------Dictionary for class PtrVector<reco::FFTAnyJet<reco::JPTJet> > -------------------------------
void __edm__PtrVector_reco__FFTAnyJet_reco__JPTJet_s__db_datamem(Reflex::Class*);
void __edm__PtrVector_reco__FFTAnyJet_reco__JPTJet_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__PtrVector_reco__FFTAnyJet_reco__JPTJet_s__datamem_bld(&__edm__PtrVector_reco__FFTAnyJet_reco__JPTJet_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__PtrVector_reco__FFTAnyJet_reco__JPTJet_s__funcmem_bld(&__edm__PtrVector_reco__FFTAnyJet_reco__JPTJet_s__db_funcmem);
void __edm__PtrVector_reco__FFTAnyJet_reco__JPTJet_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::PtrVector<reco::FFTAnyJet<reco::JPTJet> >"), typeid(::edm::PtrVector<reco::FFTAnyJet<reco::JPTJet> >), sizeof(::edm::PtrVector<reco::FFTAnyJet<reco::JPTJet> >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::VIRTUAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("ClassVersion"), ::edm::PtrVector<reco::FFTAnyJet<reco::JPTJet> >::Class_Version())
  .AddProperty(Reflex::Literal("o_name"), "edm::PtrVector<reco::FFTJPTJet>")
  .AddBase(type_5637, ::Reflex::BaseOffset< ::edm::PtrVector<reco::FFTAnyJet<reco::JPTJet> >, ::edm::PtrVectorBase >::Get(), ::Reflex::PUBLIC)
  .AddTypedef(type_5526, Reflex::Literal("edm::PtrVector<reco::FFTAnyJet<reco::JPTJet> >::const_iterator"))
  .AddTypedef(type_5526, Reflex::Literal("edm::PtrVector<reco::FFTAnyJet<reco::JPTJet> >::iterator"))
  .AddTypedef(type_5779, Reflex::Literal("edm::PtrVector<reco::FFTAnyJet<reco::JPTJet> >::value_type"))
  .AddTypedef(type_708, Reflex::Literal("edm::PtrVector<reco::FFTAnyJet<reco::JPTJet> >::collection_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("PtrVector"), constructor_27709, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_25503), Reflex::Literal("PtrVector"), constructor_27710, 0, "iId", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_48068), Reflex::Literal("PtrVector"), constructor_27711, 0, "iOther", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~PtrVector"), destructor_27722, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::ARTIFICIAL | ::Reflex::DESTRUCTOR )
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_5287, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getBasesTable"), method_x75, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandFunctionMemberBuilder(&__edm__PtrVector_reco__FFTAnyJet_reco__JPTJet_s__funcmem_bld);
}

//------Delayed data member builder for class PtrVector<reco::FFTAnyJet<reco::JPTJet> > -------------------
void __edm__PtrVector_reco__FFTAnyJet_reco__JPTJet_s__db_datamem(Reflex::Class*) {

}
//------Delayed function member builder for class PtrVector<reco::FFTAnyJet<reco::JPTJet> > -------------------
void __edm__PtrVector_reco__FFTAnyJet_reco__JPTJet_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_5779, type_53c), Reflex::Literal("operator[]"), operator_27712, 0, "iIndex", ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_5526), Reflex::Literal("begin"), method_27713, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_5526), Reflex::Literal("end"), method_27714, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_48069), Reflex::Literal("push_back"), method_27715, 0, "iPtr", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_48070), Reflex::Literal("swap"), method_27716, 0, "other", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_48070, type_48068), Reflex::Literal("operator="), operator_27717, 0, "rhs", ::Reflex::PUBLIC | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_25627), Reflex::Literal("fillView"), method_27718, 0, "pointers", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_484), Reflex::Literal("Class_Version"), method_27719, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC);
}
//------Stub functions for class PtrVector<reco::FFTAnyJet<reco::TrackJet> > -------------------------------
static void constructor_27727( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::PtrVector<reco::FFTAnyJet<reco::TrackJet> >();
  else ::new(mem) ::edm::PtrVector<reco::FFTAnyJet<reco::TrackJet> >();
}

static void constructor_27728( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::PtrVector<reco::FFTAnyJet<reco::TrackJet> >(*(const ::edm::ProductID*)arg[0]);
  else ::new(mem) ::edm::PtrVector<reco::FFTAnyJet<reco::TrackJet> >(*(const ::edm::ProductID*)arg[0]);
}

static void constructor_27729( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::PtrVector<reco::FFTAnyJet<reco::TrackJet> >(*(const ::edm::PtrVector<reco::FFTAnyJet<reco::TrackJet> >*)arg[0]);
  else ::new(mem) ::edm::PtrVector<reco::FFTAnyJet<reco::TrackJet> >(*(const ::edm::PtrVector<reco::FFTAnyJet<reco::TrackJet> >*)arg[0]);
}

static  void operator_27730( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (edm::Ptr<reco::FFTAnyJet<reco::TrackJet> >)((((const ::edm::PtrVector<reco::FFTAnyJet<reco::TrackJet> >*)o)->operator[])(*(const unsigned long*)arg[0]));
  else   (((const ::edm::PtrVector<reco::FFTAnyJet<reco::TrackJet> >*)o)->operator[])(*(const unsigned long*)arg[0]);
}

static  void method_27731( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::PtrVectorItr<reco::FFTAnyJet<reco::TrackJet> >)((((const ::edm::PtrVector<reco::FFTAnyJet<reco::TrackJet> >*)o)->begin)());
  else   (((const ::edm::PtrVector<reco::FFTAnyJet<reco::TrackJet> >*)o)->begin)();
}

static  void method_27732( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::PtrVectorItr<reco::FFTAnyJet<reco::TrackJet> >)((((const ::edm::PtrVector<reco::FFTAnyJet<reco::TrackJet> >*)o)->end)());
  else   (((const ::edm::PtrVector<reco::FFTAnyJet<reco::TrackJet> >*)o)->end)();
}

static  void method_27733( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::edm::PtrVector<reco::FFTAnyJet<reco::TrackJet> >*)o)->push_back)(*(const ::edm::Ptr<reco::FFTAnyJet<reco::TrackJet> >*)arg[0]);
}

static  void method_27734( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::edm::PtrVector<reco::FFTAnyJet<reco::TrackJet> >*)o)->swap)(*(::edm::PtrVector<reco::FFTAnyJet<reco::TrackJet> >*)arg[0]);
}

static  void operator_27735( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::PtrVector<reco::FFTAnyJet<reco::TrackJet> >*)o)->operator=)(*(const ::edm::PtrVector<reco::FFTAnyJet<reco::TrackJet> >*)arg[0]);
  else   (((::edm::PtrVector<reco::FFTAnyJet<reco::TrackJet> >*)o)->operator=)(*(const ::edm::PtrVector<reco::FFTAnyJet<reco::TrackJet> >*)arg[0]);
}

static  void method_27736( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::PtrVector<reco::FFTAnyJet<reco::TrackJet> >*)o)->fillView)(*(::std::vector<const void*>*)arg[0]);
}

static  void method_27737( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (short)((((::edm::PtrVector<reco::FFTAnyJet<reco::TrackJet> >*)o)->Class_Version)());
  else   (((::edm::PtrVector<reco::FFTAnyJet<reco::TrackJet> >*)o)->Class_Version)();
}

static void destructor_27740(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::PtrVector<reco::FFTAnyJet<reco::TrackJet> >*)o)->::edm::PtrVector<reco::FFTAnyJet<reco::TrackJet> >::~PtrVector)();
}
static void method_newdel_5288( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::PtrVector<reco::FFTAnyJet<reco::TrackJet> > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::PtrVector<reco::FFTAnyJet<reco::TrackJet> > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::PtrVector<reco::FFTAnyJet<reco::TrackJet> > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::PtrVector<reco::FFTAnyJet<reco::TrackJet> > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::PtrVector<reco::FFTAnyJet<reco::TrackJet> > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

static void method_x77( void* retaddr, void*, const std::vector<void*>&, void*)
{
  typedef std::vector<std::pair< ::Reflex::Base, int> > Bases_t;
  static Bases_t s_bases;
  if ( !s_bases.size() ) {
    s_bases.push_back(std::make_pair(::Reflex::Base( ::Reflex::TypeBuilder(Reflex::Literal("edm::PtrVectorBase")), ::Reflex::BaseOffset< ::edm::PtrVector<reco::FFTAnyJet<reco::TrackJet> >,::edm::PtrVectorBase >::Get(),::Reflex::PUBLIC), 0));
  }
  if (retaddr) *(Bases_t**)retaddr = &s_bases;
}

//------Dictionary for class PtrVector<reco::FFTAnyJet<reco::TrackJet> > -------------------------------
void __edm__PtrVector_reco__FFTAnyJet_reco__TrackJet_s__db_datamem(Reflex::Class*);
void __edm__PtrVector_reco__FFTAnyJet_reco__TrackJet_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__PtrVector_reco__FFTAnyJet_reco__TrackJet_s__datamem_bld(&__edm__PtrVector_reco__FFTAnyJet_reco__TrackJet_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__PtrVector_reco__FFTAnyJet_reco__TrackJet_s__funcmem_bld(&__edm__PtrVector_reco__FFTAnyJet_reco__TrackJet_s__db_funcmem);
void __edm__PtrVector_reco__FFTAnyJet_reco__TrackJet_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::PtrVector<reco::FFTAnyJet<reco::TrackJet> >"), typeid(::edm::PtrVector<reco::FFTAnyJet<reco::TrackJet> >), sizeof(::edm::PtrVector<reco::FFTAnyJet<reco::TrackJet> >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::VIRTUAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("ClassVersion"), ::edm::PtrVector<reco::FFTAnyJet<reco::TrackJet> >::Class_Version())
  .AddProperty(Reflex::Literal("o_name"), "edm::PtrVector<reco::FFTTrackJet>")
  .AddBase(type_5637, ::Reflex::BaseOffset< ::edm::PtrVector<reco::FFTAnyJet<reco::TrackJet> >, ::edm::PtrVectorBase >::Get(), ::Reflex::PUBLIC)
  .AddTypedef(type_5527, Reflex::Literal("edm::PtrVector<reco::FFTAnyJet<reco::TrackJet> >::const_iterator"))
  .AddTypedef(type_5527, Reflex::Literal("edm::PtrVector<reco::FFTAnyJet<reco::TrackJet> >::iterator"))
  .AddTypedef(type_5780, Reflex::Literal("edm::PtrVector<reco::FFTAnyJet<reco::TrackJet> >::value_type"))
  .AddTypedef(type_708, Reflex::Literal("edm::PtrVector<reco::FFTAnyJet<reco::TrackJet> >::collection_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("PtrVector"), constructor_27727, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_25503), Reflex::Literal("PtrVector"), constructor_27728, 0, "iId", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_48071), Reflex::Literal("PtrVector"), constructor_27729, 0, "iOther", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~PtrVector"), destructor_27740, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::ARTIFICIAL | ::Reflex::DESTRUCTOR )
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_5288, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getBasesTable"), method_x77, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandFunctionMemberBuilder(&__edm__PtrVector_reco__FFTAnyJet_reco__TrackJet_s__funcmem_bld);
}

//------Delayed data member builder for class PtrVector<reco::FFTAnyJet<reco::TrackJet> > -------------------
void __edm__PtrVector_reco__FFTAnyJet_reco__TrackJet_s__db_datamem(Reflex::Class*) {

}
//------Delayed function member builder for class PtrVector<reco::FFTAnyJet<reco::TrackJet> > -------------------
void __edm__PtrVector_reco__FFTAnyJet_reco__TrackJet_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_5780, type_53c), Reflex::Literal("operator[]"), operator_27730, 0, "iIndex", ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_5527), Reflex::Literal("begin"), method_27731, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_5527), Reflex::Literal("end"), method_27732, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_48072), Reflex::Literal("push_back"), method_27733, 0, "iPtr", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_48073), Reflex::Literal("swap"), method_27734, 0, "other", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_48073, type_48071), Reflex::Literal("operator="), operator_27735, 0, "rhs", ::Reflex::PUBLIC | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_25627), Reflex::Literal("fillView"), method_27736, 0, "pointers", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_484), Reflex::Literal("Class_Version"), method_27737, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC);
}
//------Stub functions for class PtrVector<reco::FFTAnyJet<reco::PFJet> > -------------------------------
static void constructor_27745( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::PtrVector<reco::FFTAnyJet<reco::PFJet> >();
  else ::new(mem) ::edm::PtrVector<reco::FFTAnyJet<reco::PFJet> >();
}

static void constructor_27746( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::PtrVector<reco::FFTAnyJet<reco::PFJet> >(*(const ::edm::ProductID*)arg[0]);
  else ::new(mem) ::edm::PtrVector<reco::FFTAnyJet<reco::PFJet> >(*(const ::edm::ProductID*)arg[0]);
}

static void constructor_27747( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::PtrVector<reco::FFTAnyJet<reco::PFJet> >(*(const ::edm::PtrVector<reco::FFTAnyJet<reco::PFJet> >*)arg[0]);
  else ::new(mem) ::edm::PtrVector<reco::FFTAnyJet<reco::PFJet> >(*(const ::edm::PtrVector<reco::FFTAnyJet<reco::PFJet> >*)arg[0]);
}

static  void operator_27748( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (edm::Ptr<reco::FFTAnyJet<reco::PFJet> >)((((const ::edm::PtrVector<reco::FFTAnyJet<reco::PFJet> >*)o)->operator[])(*(const unsigned long*)arg[0]));
  else   (((const ::edm::PtrVector<reco::FFTAnyJet<reco::PFJet> >*)o)->operator[])(*(const unsigned long*)arg[0]);
}

static  void method_27749( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::PtrVectorItr<reco::FFTAnyJet<reco::PFJet> >)((((const ::edm::PtrVector<reco::FFTAnyJet<reco::PFJet> >*)o)->begin)());
  else   (((const ::edm::PtrVector<reco::FFTAnyJet<reco::PFJet> >*)o)->begin)();
}

static  void method_27750( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::PtrVectorItr<reco::FFTAnyJet<reco::PFJet> >)((((const ::edm::PtrVector<reco::FFTAnyJet<reco::PFJet> >*)o)->end)());
  else   (((const ::edm::PtrVector<reco::FFTAnyJet<reco::PFJet> >*)o)->end)();
}

static  void method_27751( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::edm::PtrVector<reco::FFTAnyJet<reco::PFJet> >*)o)->push_back)(*(const ::edm::Ptr<reco::FFTAnyJet<reco::PFJet> >*)arg[0]);
}

static  void method_27752( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::edm::PtrVector<reco::FFTAnyJet<reco::PFJet> >*)o)->swap)(*(::edm::PtrVector<reco::FFTAnyJet<reco::PFJet> >*)arg[0]);
}

static  void operator_27753( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::PtrVector<reco::FFTAnyJet<reco::PFJet> >*)o)->operator=)(*(const ::edm::PtrVector<reco::FFTAnyJet<reco::PFJet> >*)arg[0]);
  else   (((::edm::PtrVector<reco::FFTAnyJet<reco::PFJet> >*)o)->operator=)(*(const ::edm::PtrVector<reco::FFTAnyJet<reco::PFJet> >*)arg[0]);
}

static  void method_27754( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::PtrVector<reco::FFTAnyJet<reco::PFJet> >*)o)->fillView)(*(::std::vector<const void*>*)arg[0]);
}

static  void method_27755( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (short)((((::edm::PtrVector<reco::FFTAnyJet<reco::PFJet> >*)o)->Class_Version)());
  else   (((::edm::PtrVector<reco::FFTAnyJet<reco::PFJet> >*)o)->Class_Version)();
}

static void destructor_27758(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::PtrVector<reco::FFTAnyJet<reco::PFJet> >*)o)->::edm::PtrVector<reco::FFTAnyJet<reco::PFJet> >::~PtrVector)();
}
static void method_newdel_5289( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::PtrVector<reco::FFTAnyJet<reco::PFJet> > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::PtrVector<reco::FFTAnyJet<reco::PFJet> > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::PtrVector<reco::FFTAnyJet<reco::PFJet> > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::PtrVector<reco::FFTAnyJet<reco::PFJet> > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::PtrVector<reco::FFTAnyJet<reco::PFJet> > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

static void method_x79( void* retaddr, void*, const std::vector<void*>&, void*)
{
  typedef std::vector<std::pair< ::Reflex::Base, int> > Bases_t;
  static Bases_t s_bases;
  if ( !s_bases.size() ) {
    s_bases.push_back(std::make_pair(::Reflex::Base( ::Reflex::TypeBuilder(Reflex::Literal("edm::PtrVectorBase")), ::Reflex::BaseOffset< ::edm::PtrVector<reco::FFTAnyJet<reco::PFJet> >,::edm::PtrVectorBase >::Get(),::Reflex::PUBLIC), 0));
  }
  if (retaddr) *(Bases_t**)retaddr = &s_bases;
}

//------Dictionary for class PtrVector<reco::FFTAnyJet<reco::PFJet> > -------------------------------
void __edm__PtrVector_reco__FFTAnyJet_reco__PFJet_s__db_datamem(Reflex::Class*);
void __edm__PtrVector_reco__FFTAnyJet_reco__PFJet_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__PtrVector_reco__FFTAnyJet_reco__PFJet_s__datamem_bld(&__edm__PtrVector_reco__FFTAnyJet_reco__PFJet_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__PtrVector_reco__FFTAnyJet_reco__PFJet_s__funcmem_bld(&__edm__PtrVector_reco__FFTAnyJet_reco__PFJet_s__db_funcmem);
void __edm__PtrVector_reco__FFTAnyJet_reco__PFJet_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::PtrVector<reco::FFTAnyJet<reco::PFJet> >"), typeid(::edm::PtrVector<reco::FFTAnyJet<reco::PFJet> >), sizeof(::edm::PtrVector<reco::FFTAnyJet<reco::PFJet> >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::VIRTUAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("ClassVersion"), ::edm::PtrVector<reco::FFTAnyJet<reco::PFJet> >::Class_Version())
  .AddProperty(Reflex::Literal("o_name"), "edm::PtrVector<reco::FFTPFJet>")
  .AddBase(type_5637, ::Reflex::BaseOffset< ::edm::PtrVector<reco::FFTAnyJet<reco::PFJet> >, ::edm::PtrVectorBase >::Get(), ::Reflex::PUBLIC)
  .AddTypedef(type_5528, Reflex::Literal("edm::PtrVector<reco::FFTAnyJet<reco::PFJet> >::const_iterator"))
  .AddTypedef(type_5528, Reflex::Literal("edm::PtrVector<reco::FFTAnyJet<reco::PFJet> >::iterator"))
  .AddTypedef(type_5781, Reflex::Literal("edm::PtrVector<reco::FFTAnyJet<reco::PFJet> >::value_type"))
  .AddTypedef(type_708, Reflex::Literal("edm::PtrVector<reco::FFTAnyJet<reco::PFJet> >::collection_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("PtrVector"), constructor_27745, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_25503), Reflex::Literal("PtrVector"), constructor_27746, 0, "iId", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_48074), Reflex::Literal("PtrVector"), constructor_27747, 0, "iOther", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~PtrVector"), destructor_27758, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::ARTIFICIAL | ::Reflex::DESTRUCTOR )
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_5289, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getBasesTable"), method_x79, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandFunctionMemberBuilder(&__edm__PtrVector_reco__FFTAnyJet_reco__PFJet_s__funcmem_bld);
}

//------Delayed data member builder for class PtrVector<reco::FFTAnyJet<reco::PFJet> > -------------------
void __edm__PtrVector_reco__FFTAnyJet_reco__PFJet_s__db_datamem(Reflex::Class*) {

}
//------Delayed function member builder for class PtrVector<reco::FFTAnyJet<reco::PFJet> > -------------------
void __edm__PtrVector_reco__FFTAnyJet_reco__PFJet_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_5781, type_53c), Reflex::Literal("operator[]"), operator_27748, 0, "iIndex", ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_5528), Reflex::Literal("begin"), method_27749, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_5528), Reflex::Literal("end"), method_27750, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_48075), Reflex::Literal("push_back"), method_27751, 0, "iPtr", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_48076), Reflex::Literal("swap"), method_27752, 0, "other", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_48076, type_48074), Reflex::Literal("operator="), operator_27753, 0, "rhs", ::Reflex::PUBLIC | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_25627), Reflex::Literal("fillView"), method_27754, 0, "pointers", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_484), Reflex::Literal("Class_Version"), method_27755, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC);
}
//------Stub functions for class PtrVector<reco::FFTAnyJet<reco::BasicJet> > -------------------------------
static void constructor_27763( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::PtrVector<reco::FFTAnyJet<reco::BasicJet> >();
  else ::new(mem) ::edm::PtrVector<reco::FFTAnyJet<reco::BasicJet> >();
}

static void constructor_27764( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::PtrVector<reco::FFTAnyJet<reco::BasicJet> >(*(const ::edm::ProductID*)arg[0]);
  else ::new(mem) ::edm::PtrVector<reco::FFTAnyJet<reco::BasicJet> >(*(const ::edm::ProductID*)arg[0]);
}

static void constructor_27765( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::PtrVector<reco::FFTAnyJet<reco::BasicJet> >(*(const ::edm::PtrVector<reco::FFTAnyJet<reco::BasicJet> >*)arg[0]);
  else ::new(mem) ::edm::PtrVector<reco::FFTAnyJet<reco::BasicJet> >(*(const ::edm::PtrVector<reco::FFTAnyJet<reco::BasicJet> >*)arg[0]);
}

static  void operator_27766( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (edm::Ptr<reco::FFTAnyJet<reco::BasicJet> >)((((const ::edm::PtrVector<reco::FFTAnyJet<reco::BasicJet> >*)o)->operator[])(*(const unsigned long*)arg[0]));
  else   (((const ::edm::PtrVector<reco::FFTAnyJet<reco::BasicJet> >*)o)->operator[])(*(const unsigned long*)arg[0]);
}

static  void method_27767( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::PtrVectorItr<reco::FFTAnyJet<reco::BasicJet> >)((((const ::edm::PtrVector<reco::FFTAnyJet<reco::BasicJet> >*)o)->begin)());
  else   (((const ::edm::PtrVector<reco::FFTAnyJet<reco::BasicJet> >*)o)->begin)();
}

static  void method_27768( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::PtrVectorItr<reco::FFTAnyJet<reco::BasicJet> >)((((const ::edm::PtrVector<reco::FFTAnyJet<reco::BasicJet> >*)o)->end)());
  else   (((const ::edm::PtrVector<reco::FFTAnyJet<reco::BasicJet> >*)o)->end)();
}

static  void method_27769( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::edm::PtrVector<reco::FFTAnyJet<reco::BasicJet> >*)o)->push_back)(*(const ::edm::Ptr<reco::FFTAnyJet<reco::BasicJet> >*)arg[0]);
}

static  void method_27770( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::edm::PtrVector<reco::FFTAnyJet<reco::BasicJet> >*)o)->swap)(*(::edm::PtrVector<reco::FFTAnyJet<reco::BasicJet> >*)arg[0]);
}

static  void operator_27771( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::PtrVector<reco::FFTAnyJet<reco::BasicJet> >*)o)->operator=)(*(const ::edm::PtrVector<reco::FFTAnyJet<reco::BasicJet> >*)arg[0]);
  else   (((::edm::PtrVector<reco::FFTAnyJet<reco::BasicJet> >*)o)->operator=)(*(const ::edm::PtrVector<reco::FFTAnyJet<reco::BasicJet> >*)arg[0]);
}

static  void method_27772( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::PtrVector<reco::FFTAnyJet<reco::BasicJet> >*)o)->fillView)(*(::std::vector<const void*>*)arg[0]);
}

static  void method_27773( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (short)((((::edm::PtrVector<reco::FFTAnyJet<reco::BasicJet> >*)o)->Class_Version)());
  else   (((::edm::PtrVector<reco::FFTAnyJet<reco::BasicJet> >*)o)->Class_Version)();
}

static void destructor_27776(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::PtrVector<reco::FFTAnyJet<reco::BasicJet> >*)o)->::edm::PtrVector<reco::FFTAnyJet<reco::BasicJet> >::~PtrVector)();
}
static void method_newdel_5290( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::PtrVector<reco::FFTAnyJet<reco::BasicJet> > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::PtrVector<reco::FFTAnyJet<reco::BasicJet> > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::PtrVector<reco::FFTAnyJet<reco::BasicJet> > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::PtrVector<reco::FFTAnyJet<reco::BasicJet> > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::PtrVector<reco::FFTAnyJet<reco::BasicJet> > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

static void method_x81( void* retaddr, void*, const std::vector<void*>&, void*)
{
  typedef std::vector<std::pair< ::Reflex::Base, int> > Bases_t;
  static Bases_t s_bases;
  if ( !s_bases.size() ) {
    s_bases.push_back(std::make_pair(::Reflex::Base( ::Reflex::TypeBuilder(Reflex::Literal("edm::PtrVectorBase")), ::Reflex::BaseOffset< ::edm::PtrVector<reco::FFTAnyJet<reco::BasicJet> >,::edm::PtrVectorBase >::Get(),::Reflex::PUBLIC), 0));
  }
  if (retaddr) *(Bases_t**)retaddr = &s_bases;
}

//------Dictionary for class PtrVector<reco::FFTAnyJet<reco::BasicJet> > -------------------------------
void __edm__PtrVector_reco__FFTAnyJet_reco__BasicJet_s__db_datamem(Reflex::Class*);
void __edm__PtrVector_reco__FFTAnyJet_reco__BasicJet_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__PtrVector_reco__FFTAnyJet_reco__BasicJet_s__datamem_bld(&__edm__PtrVector_reco__FFTAnyJet_reco__BasicJet_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__PtrVector_reco__FFTAnyJet_reco__BasicJet_s__funcmem_bld(&__edm__PtrVector_reco__FFTAnyJet_reco__BasicJet_s__db_funcmem);
void __edm__PtrVector_reco__FFTAnyJet_reco__BasicJet_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::PtrVector<reco::FFTAnyJet<reco::BasicJet> >"), typeid(::edm::PtrVector<reco::FFTAnyJet<reco::BasicJet> >), sizeof(::edm::PtrVector<reco::FFTAnyJet<reco::BasicJet> >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::VIRTUAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("ClassVersion"), ::edm::PtrVector<reco::FFTAnyJet<reco::BasicJet> >::Class_Version())
  .AddProperty(Reflex::Literal("o_name"), "edm::PtrVector<reco::FFTBasicJet>")
  .AddBase(type_5637, ::Reflex::BaseOffset< ::edm::PtrVector<reco::FFTAnyJet<reco::BasicJet> >, ::edm::PtrVectorBase >::Get(), ::Reflex::PUBLIC)
  .AddTypedef(type_5529, Reflex::Literal("edm::PtrVector<reco::FFTAnyJet<reco::BasicJet> >::const_iterator"))
  .AddTypedef(type_5529, Reflex::Literal("edm::PtrVector<reco::FFTAnyJet<reco::BasicJet> >::iterator"))
  .AddTypedef(type_5782, Reflex::Literal("edm::PtrVector<reco::FFTAnyJet<reco::BasicJet> >::value_type"))
  .AddTypedef(type_708, Reflex::Literal("edm::PtrVector<reco::FFTAnyJet<reco::BasicJet> >::collection_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("PtrVector"), constructor_27763, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_25503), Reflex::Literal("PtrVector"), constructor_27764, 0, "iId", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_48077), Reflex::Literal("PtrVector"), constructor_27765, 0, "iOther", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~PtrVector"), destructor_27776, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::ARTIFICIAL | ::Reflex::DESTRUCTOR )
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_5290, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getBasesTable"), method_x81, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandFunctionMemberBuilder(&__edm__PtrVector_reco__FFTAnyJet_reco__BasicJet_s__funcmem_bld);
}

//------Delayed data member builder for class PtrVector<reco::FFTAnyJet<reco::BasicJet> > -------------------
void __edm__PtrVector_reco__FFTAnyJet_reco__BasicJet_s__db_datamem(Reflex::Class*) {

}
//------Delayed function member builder for class PtrVector<reco::FFTAnyJet<reco::BasicJet> > -------------------
void __edm__PtrVector_reco__FFTAnyJet_reco__BasicJet_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_5782, type_53c), Reflex::Literal("operator[]"), operator_27766, 0, "iIndex", ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_5529), Reflex::Literal("begin"), method_27767, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_5529), Reflex::Literal("end"), method_27768, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_48078), Reflex::Literal("push_back"), method_27769, 0, "iPtr", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_48079), Reflex::Literal("swap"), method_27770, 0, "other", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_48079, type_48077), Reflex::Literal("operator="), operator_27771, 0, "rhs", ::Reflex::PUBLIC | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_25627), Reflex::Literal("fillView"), method_27772, 0, "pointers", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_484), Reflex::Literal("Class_Version"), method_27773, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC);
}
//------Stub functions for class Association<std::vector<reco::FFTAnyJet<reco::JPTJet>, std::allocator<reco::FFTAnyJet<reco::JPTJet> > > > -------------------------------
static void destructor_30642(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::Association<std::vector<reco::FFTAnyJet<reco::JPTJet> > >*)o)->::edm::Association<std::vector<reco::FFTAnyJet<reco::JPTJet> > >::~Association)();
}
static void constructor_30643( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Association<std::vector<reco::FFTAnyJet<reco::JPTJet> > >(*(const ::edm::Association<std::vector<reco::FFTAnyJet<reco::JPTJet> > >*)arg[0]);
  else ::new(mem) ::edm::Association<std::vector<reco::FFTAnyJet<reco::JPTJet> > >(*(const ::edm::Association<std::vector<reco::FFTAnyJet<reco::JPTJet> > >*)arg[0]);
}

static void constructor_30644( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Association<std::vector<reco::FFTAnyJet<reco::JPTJet> > >();
  else ::new(mem) ::edm::Association<std::vector<reco::FFTAnyJet<reco::JPTJet> > >();
}

static  void method_30645( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >)((((const ::edm::Association<std::vector<reco::FFTAnyJet<reco::JPTJet> > >*)o)->get)(*(::size_t*)arg[0]));
  else   (((const ::edm::Association<std::vector<reco::FFTAnyJet<reco::JPTJet> > >*)o)->get)(*(::size_t*)arg[0]);
}

static  void method_30646( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >)((((const ::edm::Association<std::vector<reco::FFTAnyJet<reco::JPTJet> > >*)o)->get)(*(::edm::ProductID*)arg[0],
    *(::size_t*)arg[1]));
  else   (((const ::edm::Association<std::vector<reco::FFTAnyJet<reco::JPTJet> > >*)o)->get)(*(::edm::ProductID*)arg[0],
    *(::size_t*)arg[1]);
}

static  void operator_30647( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::Association<std::vector<reco::FFTAnyJet<reco::JPTJet> > >*)o)->operator+=)(*(const ::edm::Association<std::vector<reco::FFTAnyJet<reco::JPTJet> > >*)arg[0]);
  else   (((::edm::Association<std::vector<reco::FFTAnyJet<reco::JPTJet> > >*)o)->operator+=)(*(const ::edm::Association<std::vector<reco::FFTAnyJet<reco::JPTJet> > >*)arg[0]);
}

static  void method_30648( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::edm::Association<std::vector<reco::FFTAnyJet<reco::JPTJet> > >*)o)->setRef)(*(const ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::JPTJet> > >*)arg[0]);
}

static  void method_30649( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Association<std::vector<reco::FFTAnyJet<reco::JPTJet> > >*)o)->contains)(*(::edm::ProductID*)arg[0]));
  else   (((const ::edm::Association<std::vector<reco::FFTAnyJet<reco::JPTJet> > >*)o)->contains)(*(::edm::ProductID*)arg[0]);
}

static  void method_30650( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (size_t)((((const ::edm::Association<std::vector<reco::FFTAnyJet<reco::JPTJet> > >*)o)->size)());
  else   (((const ::edm::Association<std::vector<reco::FFTAnyJet<reco::JPTJet> > >*)o)->size)();
}

static  void method_30651( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Association<std::vector<reco::FFTAnyJet<reco::JPTJet> > >*)o)->empty)());
  else   (((const ::edm::Association<std::vector<reco::FFTAnyJet<reco::JPTJet> > >*)o)->empty)();
}

static  void method_30652( void*, void* o, const std::vector<void*>&, void*)
{
  (((::edm::Association<std::vector<reco::FFTAnyJet<reco::JPTJet> > >*)o)->clear)();
}

static  void method_30653( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::RefProd<std::vector<reco::FFTAnyJet<reco::JPTJet> > >)((((const ::edm::Association<std::vector<reco::FFTAnyJet<reco::JPTJet> > >*)o)->ref)());
  else   (((const ::edm::Association<std::vector<reco::FFTAnyJet<reco::JPTJet> > >*)o)->ref)();
}

static  void method_30654( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::edm::Association<std::vector<reco::FFTAnyJet<reco::JPTJet> > >*)o)->swap)(*(::edm::Association<std::vector<reco::FFTAnyJet<reco::JPTJet> > >*)arg[0]);
}

static  void operator_30655( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::Association<std::vector<reco::FFTAnyJet<reco::JPTJet> > >*)o)->operator=)(*(const ::edm::Association<std::vector<reco::FFTAnyJet<reco::JPTJet> > >*)arg[0]);
  else   (((::edm::Association<std::vector<reco::FFTAnyJet<reco::JPTJet> > >*)o)->operator=)(*(const ::edm::Association<std::vector<reco::FFTAnyJet<reco::JPTJet> > >*)arg[0]);
}

static  void method_30656( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Association<std::vector<reco::FFTAnyJet<reco::JPTJet> > >*)o)->ids)();
  else   (((const ::edm::Association<std::vector<reco::FFTAnyJet<reco::JPTJet> > >*)o)->ids)();
}

static  void method_30657( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (short)((((::edm::Association<std::vector<reco::FFTAnyJet<reco::JPTJet> > >*)o)->Class_Version)());
  else   (((::edm::Association<std::vector<reco::FFTAnyJet<reco::JPTJet> > >*)o)->Class_Version)();
}

static void method_newdel_5802( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::Association<std::vector<reco::FFTAnyJet<reco::JPTJet> > > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::Association<std::vector<reco::FFTAnyJet<reco::JPTJet> > > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::Association<std::vector<reco::FFTAnyJet<reco::JPTJet> > > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::Association<std::vector<reco::FFTAnyJet<reco::JPTJet> > > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::Association<std::vector<reco::FFTAnyJet<reco::JPTJet> > > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

static void method_x83( void* retaddr, void*, const std::vector<void*>&, void*)
{
  typedef std::vector<std::pair< ::Reflex::Base, int> > Bases_t;
  static Bases_t s_bases;
  if ( !s_bases.size() ) {
    s_bases.push_back(std::make_pair(::Reflex::Base( ::Reflex::TypeBuilder(Reflex::Literal("edm::ValueMap<int>")), ::Reflex::BaseOffset< ::edm::Association<std::vector<reco::FFTAnyJet<reco::JPTJet> > >,::edm::ValueMap<int> >::Get(),::Reflex::PRIVATE), 0));
  }
  if (retaddr) *(Bases_t**)retaddr = &s_bases;
}

//------Dictionary for class Association<std::vector<reco::FFTAnyJet<reco::JPTJet>, std::allocator<reco::FFTAnyJet<reco::JPTJet> > > > -------------------------------
void __edm__Association_std__vector_reco__FFTAnyJet_reco__JPTJet_s_s__db_datamem(Reflex::Class*);
void __edm__Association_std__vector_reco__FFTAnyJet_reco__JPTJet_s_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__Association_std__vector_reco__FFTAnyJet_reco__JPTJet_s_s__datamem_bld(&__edm__Association_std__vector_reco__FFTAnyJet_reco__JPTJet_s_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__Association_std__vector_reco__FFTAnyJet_reco__JPTJet_s_s__funcmem_bld(&__edm__Association_std__vector_reco__FFTAnyJet_reco__JPTJet_s_s__db_funcmem);
void __edm__Association_std__vector_reco__FFTAnyJet_reco__JPTJet_s_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::Association<std::vector<reco::FFTAnyJet<reco::JPTJet> > >"), typeid(::edm::Association<std::vector<reco::FFTAnyJet<reco::JPTJet> > >), sizeof(::edm::Association<std::vector<reco::FFTAnyJet<reco::JPTJet> > >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("ClassVersion"), ::edm::Association<std::vector<reco::FFTAnyJet<reco::JPTJet> > >::Class_Version())
  .AddProperty(Reflex::Literal("o_name"), "edm::Association<reco::FFTJPTJetCollection>")
  .AddBase(type_5487, ::Reflex::BaseOffset< ::edm::Association<std::vector<reco::FFTAnyJet<reco::JPTJet> > >, ::edm::ValueMap<int> >::Get(), ::Reflex::PRIVATE)
  .AddTypedef(type_65, Reflex::Literal("edm::Association<std::vector<reco::FFTAnyJet<reco::JPTJet> > >::index"))
  .AddTypedef(type_5487, Reflex::Literal("edm::Association<std::vector<reco::FFTAnyJet<reco::JPTJet> > >::base"))
  .AddTypedef(type_211, Reflex::Literal("edm::Association<std::vector<reco::FFTAnyJet<reco::JPTJet> > >::offset"))
  .AddTypedef(type_5729, Reflex::Literal("edm::Association<std::vector<reco::FFTAnyJet<reco::JPTJet> > >::refprod_type"))
  .AddTypedef(type_5811, Reflex::Literal("edm::Association<std::vector<reco::FFTAnyJet<reco::JPTJet> > >::reference_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~Association"), destructor_30642, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::DESTRUCTOR )
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_48895), Reflex::Literal("Association"), constructor_30643, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("Association"), constructor_30644, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_5802, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getBasesTable"), method_x83, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__Association_std__vector_reco__FFTAnyJet_reco__JPTJet_s_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__Association_std__vector_reco__FFTAnyJet_reco__JPTJet_s_s__funcmem_bld);
}

//------Delayed data member builder for class Association<std::vector<reco::FFTAnyJet<reco::JPTJet>, std::allocator<reco::FFTAnyJet<reco::JPTJet> > > > -------------------
void __edm__Association_std__vector_reco__FFTAnyJet_reco__JPTJet_s_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_5729, Reflex::Literal("ref_"), OffsetOf(__shadow__::__edm__Association_std__vector_reco__FFTAnyJet_reco__JPTJet_s_s_, ref_), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class Association<std::vector<reco::FFTAnyJet<reco::JPTJet>, std::allocator<reco::FFTAnyJet<reco::JPTJet> > > > -------------------
void __edm__Association_std__vector_reco__FFTAnyJet_reco__JPTJet_s_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_5811, type_2166), Reflex::Literal("get"), method_30645, 0, "rawIdx", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_5811, type_5905, type_2166), Reflex::Literal("get"), method_30646, 0, "id;idx", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_48896, type_48895), Reflex::Literal("operator+="), operator_30647, 0, "o", ::Reflex::PUBLIC | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_48818), Reflex::Literal("setRef"), method_30648, 0, "ref", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593, type_5905), Reflex::Literal("contains"), method_30649, 0, "id", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2166), Reflex::Literal("size"), method_30650, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("empty"), method_30651, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708), Reflex::Literal("clear"), method_30652, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_5729), Reflex::Literal("ref"), method_30653, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_48896), Reflex::Literal("swap"), method_30654, 0, "other", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_48896, type_48895), Reflex::Literal("operator="), operator_30655, 0, "rhs", ::Reflex::PUBLIC | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_44141), Reflex::Literal("ids"), method_30656, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_484), Reflex::Literal("Class_Version"), method_30657, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC);
}
//------Stub functions for class Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::JPTJet>, std::allocator<reco::FFTAnyJet<reco::JPTJet> > > > > -------------------------------
static void constructor_28756( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::JPTJet> > > >();
  else ::new(mem) ::edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::JPTJet> > > >();
}

static void constructor_28757( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::JPTJet> > > >(*(::std::auto_ptr<edm::Association<std::vector<reco::FFTAnyJet<reco::JPTJet> > > >*)arg[0]);
  else ::new(mem) ::edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::JPTJet> > > >(*(::std::auto_ptr<edm::Association<std::vector<reco::FFTAnyJet<reco::JPTJet> > > >*)arg[0]);
}

static void destructor_28758(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::JPTJet> > > >*)o)->::edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::JPTJet> > > >::~Wrapper)();
}
static  void method_28759( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::JPTJet> > > >*)o)->product)());
  else   (((const ::edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::JPTJet> > > >*)o)->product)();
}

static  void operator_28760( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::JPTJet> > > >*)o)->operator->)());
  else   (((const ::edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::JPTJet> > > >*)o)->operator->)();
}

static  void method_28761( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::JPTJet> > > >*)o)->productTypeInfo)();
  else   (((::edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::JPTJet> > > >*)o)->productTypeInfo)();
}

static  void method_28762( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::JPTJet> > > >*)o)->typeInfo)();
  else   (((::edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::JPTJet> > > >*)o)->typeInfo)();
}

static void constructor_28763( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::JPTJet> > > >((::edm::Association<std::vector<reco::FFTAnyJet<reco::JPTJet> > >*)arg[0]);
  else ::new(mem) ::edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::JPTJet> > > >((::edm::Association<std::vector<reco::FFTAnyJet<reco::JPTJet> > >*)arg[0]);
}

static  void method_28764( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((::edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::JPTJet> > > >*)o)->getInterface)());
  else   (((::edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::JPTJet> > > >*)o)->getInterface)();
}

static  void method_28765( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::JPTJet> > > >*)o)->fillView)(*(const ::edm::ProductID*)arg[0],
    *(::std::vector<const void*>*)arg[1],
    *(::boost::shared_ptr<edm::reftobase::RefVectorHolderBase>*)arg[2]);
}

static  void method_28766( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::JPTJet> > > >*)o)->setPtr)(*(const ::std::type_info*)arg[0],
    *(unsigned long*)arg[1],
    *(const void**)arg[2]);
}

static  void method_28767( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::JPTJet> > > >*)o)->fillPtrVector)(*(const ::std::type_info*)arg[0],
    *(const ::std::vector<unsigned long>*)arg[1],
    *(::std::vector<const void*>*)arg[2]);
}

static  void method_28768( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::JPTJet> > > >*)o)->dynamicTypeInfo)();
  else   (((const ::edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::JPTJet> > > >*)o)->dynamicTypeInfo)();
}

static  void method_28769( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::JPTJet> > > >*)o)->isPresent)());
  else   (((const ::edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::JPTJet> > > >*)o)->isPresent)();
}

static  void method_28770( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::JPTJet> > > >*)o)->dynamicTypeInfo_)();
  else   (((const ::edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::JPTJet> > > >*)o)->dynamicTypeInfo_)();
}

static void method_newdel_5452( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::JPTJet> > > > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::JPTJet> > > > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::JPTJet> > > > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::JPTJet> > > > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::JPTJet> > > > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::JPTJet>, std::allocator<reco::FFTAnyJet<reco::JPTJet> > > > > -------------------------------
void __edm__Wrapper_edm__Association_std__vector_reco__FFTAnyJet_reco__JPTJet_s_s_s__db_datamem(Reflex::Class*);
void __edm__Wrapper_edm__Association_std__vector_reco__FFTAnyJet_reco__JPTJet_s_s_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__Wrapper_edm__Association_std__vector_reco__FFTAnyJet_reco__JPTJet_s_s_s__datamem_bld(&__edm__Wrapper_edm__Association_std__vector_reco__FFTAnyJet_reco__JPTJet_s_s_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__Wrapper_edm__Association_std__vector_reco__FFTAnyJet_reco__JPTJet_s_s_s__funcmem_bld(&__edm__Wrapper_edm__Association_std__vector_reco__FFTAnyJet_reco__JPTJet_s_s_s__db_funcmem);
void __edm__Wrapper_edm__Association_std__vector_reco__FFTAnyJet_reco__JPTJet_s_s_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::JPTJet> > > >"), typeid(::edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::JPTJet> > > >), sizeof(::edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::JPTJet> > > >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("o_name"), "edm::Wrapper<edm::Association<reco::FFTJPTJetCollection> >")
  .AddTypedef(type_5802, Reflex::Literal("edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::JPTJet> > > >::value_type"))
  .AddTypedef(type_5802, Reflex::Literal("edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::JPTJet> > > >::wrapped_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("Wrapper"), constructor_28756, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_2873), Reflex::Literal("Wrapper"), constructor_28757, 0, "ptr", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~Wrapper"), destructor_28758, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_48217), Reflex::Literal("Wrapper"), constructor_28763, 0, "ptr", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_5452, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__Wrapper_edm__Association_std__vector_reco__FFTAnyJet_reco__JPTJet_s_s_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__Wrapper_edm__Association_std__vector_reco__FFTAnyJet_reco__JPTJet_s_s_s__funcmem_bld);
}

//------Delayed data member builder for class Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::JPTJet>, std::allocator<reco::FFTAnyJet<reco::JPTJet> > > > > -------------------
void __edm__Wrapper_edm__Association_std__vector_reco__FFTAnyJet_reco__JPTJet_s_s_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_1593, Reflex::Literal("present"), OffsetOf(__shadow__::__edm__Wrapper_edm__Association_std__vector_reco__FFTAnyJet_reco__JPTJet_s_s_s_, present), ::Reflex::PRIVATE)
  .AddDataMember(type_5802, Reflex::Literal("obj"), OffsetOf(__shadow__::__edm__Wrapper_edm__Association_std__vector_reco__FFTAnyJet_reco__JPTJet_s_s_s_, obj), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::JPTJet>, std::allocator<reco::FFTAnyJet<reco::JPTJet> > > > > -------------------
void __edm__Wrapper_edm__Association_std__vector_reco__FFTAnyJet_reco__JPTJet_s_s_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_48216), Reflex::Literal("product"), method_28759, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_48216), Reflex::Literal("operator->"), operator_28760, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_25675), Reflex::Literal("productTypeInfo"), method_28761, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_25675), Reflex::Literal("typeInfo"), method_28762, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_48218), Reflex::Literal("getInterface"), method_28764, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_25503, type_25627, type_47348), Reflex::Literal("fillView"), method_28765, 0, "id;pointers;helpers", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_25675, type_53, type_13292), Reflex::Literal("setPtr"), method_28766, 0, "iToType;iIndex;oPtr", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_25675, type_32194, type_25627), Reflex::Literal("fillPtrVector"), method_28767, 0, "iToType;iIndices;oPtr", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_25675), Reflex::Literal("dynamicTypeInfo"), method_28768, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("isPresent"), method_28769, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_25675), Reflex::Literal("dynamicTypeInfo_"), method_28770, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST);
}
//------Stub functions for class Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> >, std::allocator<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > > > > -------------------------------
static void constructor_28777( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > > >();
  else ::new(mem) ::edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > > >();
}

static void constructor_28778( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > > >(*(::std::auto_ptr<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > > >*)arg[0]);
  else ::new(mem) ::edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > > >(*(::std::auto_ptr<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > > >*)arg[0]);
}

static void destructor_28779(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > > >*)o)->::edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > > >::~Wrapper)();
}
static  void method_28780( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > > >*)o)->product)());
  else   (((const ::edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > > >*)o)->product)();
}

static  void operator_28781( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > > >*)o)->operator->)());
  else   (((const ::edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > > >*)o)->operator->)();
}

static  void method_28782( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > > >*)o)->productTypeInfo)();
  else   (((::edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > > >*)o)->productTypeInfo)();
}

static  void method_28783( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > > >*)o)->typeInfo)();
  else   (((::edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > > >*)o)->typeInfo)();
}

static void constructor_28784( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > > >((::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > >*)arg[0]);
  else ::new(mem) ::edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > > >((::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > >*)arg[0]);
}

static  void method_28785( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((::edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > > >*)o)->getInterface)());
  else   (((::edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > > >*)o)->getInterface)();
}

static  void method_28786( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > > >*)o)->fillView)(*(const ::edm::ProductID*)arg[0],
    *(::std::vector<const void*>*)arg[1],
    *(::boost::shared_ptr<edm::reftobase::RefVectorHolderBase>*)arg[2]);
}

static  void method_28787( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > > >*)o)->setPtr)(*(const ::std::type_info*)arg[0],
    *(unsigned long*)arg[1],
    *(const void**)arg[2]);
}

static  void method_28788( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > > >*)o)->fillPtrVector)(*(const ::std::type_info*)arg[0],
    *(const ::std::vector<unsigned long>*)arg[1],
    *(::std::vector<const void*>*)arg[2]);
}

static  void method_28789( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > > >*)o)->dynamicTypeInfo)();
  else   (((const ::edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > > >*)o)->dynamicTypeInfo)();
}

static  void method_28790( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > > >*)o)->isPresent)());
  else   (((const ::edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > > >*)o)->isPresent)();
}

static  void method_28791( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > > >*)o)->dynamicTypeInfo_)();
  else   (((const ::edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > > >*)o)->dynamicTypeInfo_)();
}

static void method_newdel_5453( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > > > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > > > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > > > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > > > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > > > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> >, std::allocator<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > > > > -------------------------------
void __edm__Wrapper_std__vector_edm__FwdPtr_reco__FFTAnyJet_reco__JPTJet_s_s_s__db_datamem(Reflex::Class*);
void __edm__Wrapper_std__vector_edm__FwdPtr_reco__FFTAnyJet_reco__JPTJet_s_s_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__Wrapper_std__vector_edm__FwdPtr_reco__FFTAnyJet_reco__JPTJet_s_s_s__datamem_bld(&__edm__Wrapper_std__vector_edm__FwdPtr_reco__FFTAnyJet_reco__JPTJet_s_s_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__Wrapper_std__vector_edm__FwdPtr_reco__FFTAnyJet_reco__JPTJet_s_s_s__funcmem_bld(&__edm__Wrapper_std__vector_edm__FwdPtr_reco__FFTAnyJet_reco__JPTJet_s_s_s__db_funcmem);
void __edm__Wrapper_std__vector_edm__FwdPtr_reco__FFTAnyJet_reco__JPTJet_s_s_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > > >"), typeid(::edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > > >), sizeof(::edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > > >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("o_name"), "edm::Wrapper<reco::FFTJPTJetFwdPtrVector>")
  .AddTypedef(type_3117, Reflex::Literal("edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > > >::value_type"))
  .AddTypedef(type_3117, Reflex::Literal("edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > > >::wrapped_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("Wrapper"), constructor_28777, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_2878), Reflex::Literal("Wrapper"), constructor_28778, 0, "ptr", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~Wrapper"), destructor_28779, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_48222), Reflex::Literal("Wrapper"), constructor_28784, 0, "ptr", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_5453, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__Wrapper_std__vector_edm__FwdPtr_reco__FFTAnyJet_reco__JPTJet_s_s_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__Wrapper_std__vector_edm__FwdPtr_reco__FFTAnyJet_reco__JPTJet_s_s_s__funcmem_bld);
}

//------Delayed data member builder for class Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> >, std::allocator<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > > > > -------------------
void __edm__Wrapper_std__vector_edm__FwdPtr_reco__FFTAnyJet_reco__JPTJet_s_s_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_1593, Reflex::Literal("present"), OffsetOf(__shadow__::__edm__Wrapper_std__vector_edm__FwdPtr_reco__FFTAnyJet_reco__JPTJet_s_s_s_, present), ::Reflex::PRIVATE)
  .AddDataMember(type_3117, Reflex::Literal("obj"), OffsetOf(__shadow__::__edm__Wrapper_std__vector_edm__FwdPtr_reco__FFTAnyJet_reco__JPTJet_s_s_s_, obj), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> >, std::allocator<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > > > > -------------------
void __edm__Wrapper_std__vector_edm__FwdPtr_reco__FFTAnyJet_reco__JPTJet_s_s_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_48221), Reflex::Literal("product"), method_28780, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_48221), Reflex::Literal("operator->"), operator_28781, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_25675), Reflex::Literal("productTypeInfo"), method_28782, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_25675), Reflex::Literal("typeInfo"), method_28783, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_48223), Reflex::Literal("getInterface"), method_28785, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_25503, type_25627, type_47348), Reflex::Literal("fillView"), method_28786, 0, "id;pointers;helpers", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_25675, type_53, type_13292), Reflex::Literal("setPtr"), method_28787, 0, "iToType;iIndex;oPtr", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_25675, type_32194, type_25627), Reflex::Literal("fillPtrVector"), method_28788, 0, "iToType;iIndices;oPtr", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_25675), Reflex::Literal("dynamicTypeInfo"), method_28789, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("isPresent"), method_28790, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_25675), Reflex::Literal("dynamicTypeInfo_"), method_28791, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST);
}
//------Stub functions for class Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet>, std::allocator<reco::FFTAnyJet<reco::JPTJet> > >, reco::FFTAnyJet<reco::JPTJet>, edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet>, std::allocator<reco::FFTAnyJet<reco::JPTJet> > >, reco::FFTAnyJet<reco::JPTJet> > >, std::allocator<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet>, std::allocator<reco::FFTAnyJet<reco::JPTJet> > >, reco::FFTAnyJet<reco::JPTJet>, edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet>, std::allocator<reco::FFTAnyJet<reco::JPTJet> > >, reco::FFTAnyJet<reco::JPTJet> > > > > > -------------------------------
static void constructor_28798( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > > >();
  else ::new(mem) ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > > >();
}

static void constructor_28799( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > > >(*(::std::auto_ptr<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > > >*)arg[0]);
  else ::new(mem) ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > > >(*(::std::auto_ptr<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > > >*)arg[0]);
}

static void destructor_28800(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > > >*)o)->::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > > >::~Wrapper)();
}
static  void method_28801( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > > >*)o)->product)());
  else   (((const ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > > >*)o)->product)();
}

static  void operator_28802( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > > >*)o)->operator->)());
  else   (((const ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > > >*)o)->operator->)();
}

static  void method_28803( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > > >*)o)->productTypeInfo)();
  else   (((::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > > >*)o)->productTypeInfo)();
}

static  void method_28804( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > > >*)o)->typeInfo)();
  else   (((::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > > >*)o)->typeInfo)();
}

static void constructor_28805( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > > >((::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)arg[0]);
  else ::new(mem) ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > > >((::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)arg[0]);
}

static  void method_28806( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > > >*)o)->getInterface)());
  else   (((::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > > >*)o)->getInterface)();
}

static  void method_28807( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > > >*)o)->fillView)(*(const ::edm::ProductID*)arg[0],
    *(::std::vector<const void*>*)arg[1],
    *(::boost::shared_ptr<edm::reftobase::RefVectorHolderBase>*)arg[2]);
}

static  void method_28808( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > > >*)o)->setPtr)(*(const ::std::type_info*)arg[0],
    *(unsigned long*)arg[1],
    *(const void**)arg[2]);
}

static  void method_28809( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > > >*)o)->fillPtrVector)(*(const ::std::type_info*)arg[0],
    *(const ::std::vector<unsigned long>*)arg[1],
    *(::std::vector<const void*>*)arg[2]);
}

static  void method_28810( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > > >*)o)->dynamicTypeInfo)();
  else   (((const ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > > >*)o)->dynamicTypeInfo)();
}

static  void method_28811( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > > >*)o)->isPresent)());
  else   (((const ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > > >*)o)->isPresent)();
}

static  void method_28812( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > > >*)o)->dynamicTypeInfo_)();
  else   (((const ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > > >*)o)->dynamicTypeInfo_)();
}

static void method_newdel_5454( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > > > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > > > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > > > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > > > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > > > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet>, std::allocator<reco::FFTAnyJet<reco::JPTJet> > >, reco::FFTAnyJet<reco::JPTJet>, edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet>, std::allocator<reco::FFTAnyJet<reco::JPTJet> > >, reco::FFTAnyJet<reco::JPTJet> > >, std::allocator<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet>, std::allocator<reco::FFTAnyJet<reco::JPTJet> > >, reco::FFTAnyJet<reco::JPTJet>, edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet>, std::allocator<reco::FFTAnyJet<reco::JPTJet> > >, reco::FFTAnyJet<reco::JPTJet> > > > > > -------------------------------
void __edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s_s_s__db_datamem(Reflex::Class*);
void __edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s_s_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s_s_s__datamem_bld(&__edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s_s_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s_s_s__funcmem_bld(&__edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s_s_s__db_funcmem);
void __edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s_s_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > > >"), typeid(::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > > >), sizeof(::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > > >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("o_name"), "edm::Wrapper<reco::FFTJPTJetFwdRefVector>")
  .AddTypedef(type_3118, Reflex::Literal("edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > > >::value_type"))
  .AddTypedef(type_3118, Reflex::Literal("edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > > >::wrapped_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("Wrapper"), constructor_28798, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_2879), Reflex::Literal("Wrapper"), constructor_28799, 0, "ptr", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~Wrapper"), destructor_28800, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_48227), Reflex::Literal("Wrapper"), constructor_28805, 0, "ptr", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_5454, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s_s_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s_s_s__funcmem_bld);
}

//------Delayed data member builder for class Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet>, std::allocator<reco::FFTAnyJet<reco::JPTJet> > >, reco::FFTAnyJet<reco::JPTJet>, edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet>, std::allocator<reco::FFTAnyJet<reco::JPTJet> > >, reco::FFTAnyJet<reco::JPTJet> > >, std::allocator<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet>, std::allocator<reco::FFTAnyJet<reco::JPTJet> > >, reco::FFTAnyJet<reco::JPTJet>, edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet>, std::allocator<reco::FFTAnyJet<reco::JPTJet> > >, reco::FFTAnyJet<reco::JPTJet> > > > > > -------------------
void __edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s_s_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_1593, Reflex::Literal("present"), OffsetOf(__shadow__::__edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s_s_s_, present), ::Reflex::PRIVATE)
  .AddDataMember(type_3118, Reflex::Literal("obj"), OffsetOf(__shadow__::__edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s_s_s_, obj), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet>, std::allocator<reco::FFTAnyJet<reco::JPTJet> > >, reco::FFTAnyJet<reco::JPTJet>, edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet>, std::allocator<reco::FFTAnyJet<reco::JPTJet> > >, reco::FFTAnyJet<reco::JPTJet> > >, std::allocator<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet>, std::allocator<reco::FFTAnyJet<reco::JPTJet> > >, reco::FFTAnyJet<reco::JPTJet>, edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet>, std::allocator<reco::FFTAnyJet<reco::JPTJet> > >, reco::FFTAnyJet<reco::JPTJet> > > > > > -------------------
void __edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s_s_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_48226), Reflex::Literal("product"), method_28801, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_48226), Reflex::Literal("operator->"), operator_28802, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_25675), Reflex::Literal("productTypeInfo"), method_28803, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_25675), Reflex::Literal("typeInfo"), method_28804, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_48228), Reflex::Literal("getInterface"), method_28806, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_25503, type_25627, type_47348), Reflex::Literal("fillView"), method_28807, 0, "id;pointers;helpers", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_25675, type_53, type_13292), Reflex::Literal("setPtr"), method_28808, 0, "iToType;iIndex;oPtr", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_25675, type_32194, type_25627), Reflex::Literal("fillPtrVector"), method_28809, 0, "iToType;iIndices;oPtr", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_25675), Reflex::Literal("dynamicTypeInfo"), method_28810, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("isPresent"), method_28811, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_25675), Reflex::Literal("dynamicTypeInfo_"), method_28812, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST);
}
//------Stub functions for class Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::JPTJet>, std::allocator<reco::FFTAnyJet<reco::JPTJet> > >, reco::FFTAnyJet<reco::JPTJet>, edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet>, std::allocator<reco::FFTAnyJet<reco::JPTJet> > >, reco::FFTAnyJet<reco::JPTJet> > > > -------------------------------
static void constructor_28819( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >();
  else ::new(mem) ::edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >();
}

static void constructor_28820( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >(*(::std::auto_ptr<edm::RefVector<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)arg[0]);
  else ::new(mem) ::edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >(*(::std::auto_ptr<edm::RefVector<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)arg[0]);
}

static void destructor_28821(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->::edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >::~Wrapper)();
}
static  void method_28822( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->product)());
  else   (((const ::edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->product)();
}

static  void operator_28823( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->operator->)());
  else   (((const ::edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->operator->)();
}

static  void method_28824( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->productTypeInfo)();
  else   (((::edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->productTypeInfo)();
}

static  void method_28825( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->typeInfo)();
  else   (((::edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->typeInfo)();
}

static void constructor_28826( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >((::edm::RefVector<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)arg[0]);
  else ::new(mem) ::edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >((::edm::RefVector<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)arg[0]);
}

static  void method_28827( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((::edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->getInterface)());
  else   (((::edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->getInterface)();
}

static  void method_28828( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->fillView)(*(const ::edm::ProductID*)arg[0],
    *(::std::vector<const void*>*)arg[1],
    *(::boost::shared_ptr<edm::reftobase::RefVectorHolderBase>*)arg[2]);
}

static  void method_28829( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->setPtr)(*(const ::std::type_info*)arg[0],
    *(unsigned long*)arg[1],
    *(const void**)arg[2]);
}

static  void method_28830( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->fillPtrVector)(*(const ::std::type_info*)arg[0],
    *(const ::std::vector<unsigned long>*)arg[1],
    *(::std::vector<const void*>*)arg[2]);
}

static  void method_28831( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->dynamicTypeInfo)();
  else   (((const ::edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->dynamicTypeInfo)();
}

static  void method_28832( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->isPresent)());
  else   (((const ::edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->isPresent)();
}

static  void method_28833( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->dynamicTypeInfo_)();
  else   (((const ::edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->dynamicTypeInfo_)();
}

static void method_newdel_5455( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::JPTJet>, std::allocator<reco::FFTAnyJet<reco::JPTJet> > >, reco::FFTAnyJet<reco::JPTJet>, edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet>, std::allocator<reco::FFTAnyJet<reco::JPTJet> > >, reco::FFTAnyJet<reco::JPTJet> > > > -------------------------------
void __edm__Wrapper_edm__RefVector_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s_s__db_datamem(Reflex::Class*);
void __edm__Wrapper_edm__RefVector_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__Wrapper_edm__RefVector_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s_s__datamem_bld(&__edm__Wrapper_edm__RefVector_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__Wrapper_edm__RefVector_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s_s__funcmem_bld(&__edm__Wrapper_edm__RefVector_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s_s__db_funcmem);
void __edm__Wrapper_edm__RefVector_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >"), typeid(::edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >), sizeof(::edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("o_name"), "edm::Wrapper<reco::FFTJPTJetRefVector>")
  .AddTypedef(type_5333, Reflex::Literal("edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >::value_type"))
  .AddTypedef(type_5333, Reflex::Literal("edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >::wrapped_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("Wrapper"), constructor_28819, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_2880), Reflex::Literal("Wrapper"), constructor_28820, 0, "ptr", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~Wrapper"), destructor_28821, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_48232), Reflex::Literal("Wrapper"), constructor_28826, 0, "ptr", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_5455, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__Wrapper_edm__RefVector_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__Wrapper_edm__RefVector_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s_s__funcmem_bld);
}

//------Delayed data member builder for class Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::JPTJet>, std::allocator<reco::FFTAnyJet<reco::JPTJet> > >, reco::FFTAnyJet<reco::JPTJet>, edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet>, std::allocator<reco::FFTAnyJet<reco::JPTJet> > >, reco::FFTAnyJet<reco::JPTJet> > > > -------------------
void __edm__Wrapper_edm__RefVector_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_1593, Reflex::Literal("present"), OffsetOf(__shadow__::__edm__Wrapper_edm__RefVector_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s_s_, present), ::Reflex::PRIVATE)
  .AddDataMember(type_5333, Reflex::Literal("obj"), OffsetOf(__shadow__::__edm__Wrapper_edm__RefVector_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s_s_, obj), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::JPTJet>, std::allocator<reco::FFTAnyJet<reco::JPTJet> > >, reco::FFTAnyJet<reco::JPTJet>, edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet>, std::allocator<reco::FFTAnyJet<reco::JPTJet> > >, reco::FFTAnyJet<reco::JPTJet> > > > -------------------
void __edm__Wrapper_edm__RefVector_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_48231), Reflex::Literal("product"), method_28822, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_48231), Reflex::Literal("operator->"), operator_28823, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_25675), Reflex::Literal("productTypeInfo"), method_28824, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_25675), Reflex::Literal("typeInfo"), method_28825, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_48233), Reflex::Literal("getInterface"), method_28827, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_25503, type_25627, type_47348), Reflex::Literal("fillView"), method_28828, 0, "id;pointers;helpers", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_25675, type_53, type_13292), Reflex::Literal("setPtr"), method_28829, 0, "iToType;iIndex;oPtr", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_25675, type_32194, type_25627), Reflex::Literal("fillPtrVector"), method_28830, 0, "iToType;iIndices;oPtr", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_25675), Reflex::Literal("dynamicTypeInfo"), method_28831, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("isPresent"), method_28832, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_25675), Reflex::Literal("dynamicTypeInfo_"), method_28833, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST);
}
//------Stub functions for class Wrapper<std::vector<reco::FFTAnyJet<reco::JPTJet>, std::allocator<reco::FFTAnyJet<reco::JPTJet> > > > -------------------------------
static void constructor_28840( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<std::vector<reco::FFTAnyJet<reco::JPTJet> > >();
  else ::new(mem) ::edm::Wrapper<std::vector<reco::FFTAnyJet<reco::JPTJet> > >();
}

static void constructor_28841( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<std::vector<reco::FFTAnyJet<reco::JPTJet> > >(*(::std::auto_ptr<std::vector<reco::FFTAnyJet<reco::JPTJet> > >*)arg[0]);
  else ::new(mem) ::edm::Wrapper<std::vector<reco::FFTAnyJet<reco::JPTJet> > >(*(::std::auto_ptr<std::vector<reco::FFTAnyJet<reco::JPTJet> > >*)arg[0]);
}

static void destructor_28842(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::Wrapper<std::vector<reco::FFTAnyJet<reco::JPTJet> > >*)o)->::edm::Wrapper<std::vector<reco::FFTAnyJet<reco::JPTJet> > >::~Wrapper)();
}
static  void method_28843( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Wrapper<std::vector<reco::FFTAnyJet<reco::JPTJet> > >*)o)->product)());
  else   (((const ::edm::Wrapper<std::vector<reco::FFTAnyJet<reco::JPTJet> > >*)o)->product)();
}

static  void operator_28844( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Wrapper<std::vector<reco::FFTAnyJet<reco::JPTJet> > >*)o)->operator->)());
  else   (((const ::edm::Wrapper<std::vector<reco::FFTAnyJet<reco::JPTJet> > >*)o)->operator->)();
}

static  void method_28845( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::Wrapper<std::vector<reco::FFTAnyJet<reco::JPTJet> > >*)o)->productTypeInfo)();
  else   (((::edm::Wrapper<std::vector<reco::FFTAnyJet<reco::JPTJet> > >*)o)->productTypeInfo)();
}

static  void method_28846( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::Wrapper<std::vector<reco::FFTAnyJet<reco::JPTJet> > >*)o)->typeInfo)();
  else   (((::edm::Wrapper<std::vector<reco::FFTAnyJet<reco::JPTJet> > >*)o)->typeInfo)();
}

static void constructor_28847( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<std::vector<reco::FFTAnyJet<reco::JPTJet> > >((::std::vector<reco::FFTAnyJet<reco::JPTJet> >*)arg[0]);
  else ::new(mem) ::edm::Wrapper<std::vector<reco::FFTAnyJet<reco::JPTJet> > >((::std::vector<reco::FFTAnyJet<reco::JPTJet> >*)arg[0]);
}

static  void method_28848( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((::edm::Wrapper<std::vector<reco::FFTAnyJet<reco::JPTJet> > >*)o)->getInterface)());
  else   (((::edm::Wrapper<std::vector<reco::FFTAnyJet<reco::JPTJet> > >*)o)->getInterface)();
}

static  void method_28849( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<std::vector<reco::FFTAnyJet<reco::JPTJet> > >*)o)->fillView)(*(const ::edm::ProductID*)arg[0],
    *(::std::vector<const void*>*)arg[1],
    *(::boost::shared_ptr<edm::reftobase::RefVectorHolderBase>*)arg[2]);
}

static  void method_28850( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<std::vector<reco::FFTAnyJet<reco::JPTJet> > >*)o)->setPtr)(*(const ::std::type_info*)arg[0],
    *(unsigned long*)arg[1],
    *(const void**)arg[2]);
}

static  void method_28851( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<std::vector<reco::FFTAnyJet<reco::JPTJet> > >*)o)->fillPtrVector)(*(const ::std::type_info*)arg[0],
    *(const ::std::vector<unsigned long>*)arg[1],
    *(::std::vector<const void*>*)arg[2]);
}

static  void method_28852( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Wrapper<std::vector<reco::FFTAnyJet<reco::JPTJet> > >*)o)->dynamicTypeInfo)();
  else   (((const ::edm::Wrapper<std::vector<reco::FFTAnyJet<reco::JPTJet> > >*)o)->dynamicTypeInfo)();
}

static  void method_28853( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Wrapper<std::vector<reco::FFTAnyJet<reco::JPTJet> > >*)o)->isPresent)());
  else   (((const ::edm::Wrapper<std::vector<reco::FFTAnyJet<reco::JPTJet> > >*)o)->isPresent)();
}

static  void method_28854( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Wrapper<std::vector<reco::FFTAnyJet<reco::JPTJet> > >*)o)->dynamicTypeInfo_)();
  else   (((const ::edm::Wrapper<std::vector<reco::FFTAnyJet<reco::JPTJet> > >*)o)->dynamicTypeInfo_)();
}

static void method_newdel_5456( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<reco::FFTAnyJet<reco::JPTJet> > > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<reco::FFTAnyJet<reco::JPTJet> > > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<reco::FFTAnyJet<reco::JPTJet> > > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<reco::FFTAnyJet<reco::JPTJet> > > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<reco::FFTAnyJet<reco::JPTJet> > > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class Wrapper<std::vector<reco::FFTAnyJet<reco::JPTJet>, std::allocator<reco::FFTAnyJet<reco::JPTJet> > > > -------------------------------
void __edm__Wrapper_std__vector_reco__FFTAnyJet_reco__JPTJet_s_s__db_datamem(Reflex::Class*);
void __edm__Wrapper_std__vector_reco__FFTAnyJet_reco__JPTJet_s_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__Wrapper_std__vector_reco__FFTAnyJet_reco__JPTJet_s_s__datamem_bld(&__edm__Wrapper_std__vector_reco__FFTAnyJet_reco__JPTJet_s_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__Wrapper_std__vector_reco__FFTAnyJet_reco__JPTJet_s_s__funcmem_bld(&__edm__Wrapper_std__vector_reco__FFTAnyJet_reco__JPTJet_s_s__db_funcmem);
void __edm__Wrapper_std__vector_reco__FFTAnyJet_reco__JPTJet_s_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::Wrapper<std::vector<reco::FFTAnyJet<reco::JPTJet> > >"), typeid(::edm::Wrapper<std::vector<reco::FFTAnyJet<reco::JPTJet> > >), sizeof(::edm::Wrapper<std::vector<reco::FFTAnyJet<reco::JPTJet> > >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("o_name"), "edm::Wrapper<reco::FFTJPTJetCollection>")
  .AddTypedef(type_3119, Reflex::Literal("edm::Wrapper<std::vector<reco::FFTAnyJet<reco::JPTJet> > >::value_type"))
  .AddTypedef(type_3119, Reflex::Literal("edm::Wrapper<std::vector<reco::FFTAnyJet<reco::JPTJet> > >::wrapped_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("Wrapper"), constructor_28840, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_2881), Reflex::Literal("Wrapper"), constructor_28841, 0, "ptr", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~Wrapper"), destructor_28842, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_48236), Reflex::Literal("Wrapper"), constructor_28847, 0, "ptr", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_5456, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__Wrapper_std__vector_reco__FFTAnyJet_reco__JPTJet_s_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__Wrapper_std__vector_reco__FFTAnyJet_reco__JPTJet_s_s__funcmem_bld);
}

//------Delayed data member builder for class Wrapper<std::vector<reco::FFTAnyJet<reco::JPTJet>, std::allocator<reco::FFTAnyJet<reco::JPTJet> > > > -------------------
void __edm__Wrapper_std__vector_reco__FFTAnyJet_reco__JPTJet_s_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_1593, Reflex::Literal("present"), OffsetOf(__shadow__::__edm__Wrapper_std__vector_reco__FFTAnyJet_reco__JPTJet_s_s_, present), ::Reflex::PRIVATE)
  .AddDataMember(type_3119, Reflex::Literal("obj"), OffsetOf(__shadow__::__edm__Wrapper_std__vector_reco__FFTAnyJet_reco__JPTJet_s_s_, obj), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class Wrapper<std::vector<reco::FFTAnyJet<reco::JPTJet>, std::allocator<reco::FFTAnyJet<reco::JPTJet> > > > -------------------
void __edm__Wrapper_std__vector_reco__FFTAnyJet_reco__JPTJet_s_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_48111), Reflex::Literal("product"), method_28843, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_48111), Reflex::Literal("operator->"), operator_28844, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_25675), Reflex::Literal("productTypeInfo"), method_28845, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_25675), Reflex::Literal("typeInfo"), method_28846, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_48237), Reflex::Literal("getInterface"), method_28848, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_25503, type_25627, type_47348), Reflex::Literal("fillView"), method_28849, 0, "id;pointers;helpers", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_25675, type_53, type_13292), Reflex::Literal("setPtr"), method_28850, 0, "iToType;iIndex;oPtr", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_25675, type_32194, type_25627), Reflex::Literal("fillPtrVector"), method_28851, 0, "iToType;iIndices;oPtr", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_25675), Reflex::Literal("dynamicTypeInfo"), method_28852, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("isPresent"), method_28853, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_25675), Reflex::Literal("dynamicTypeInfo_"), method_28854, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST);
}
//------Stub functions for class Association<std::vector<reco::FFTAnyJet<reco::TrackJet>, std::allocator<reco::FFTAnyJet<reco::TrackJet> > > > -------------------------------
static void destructor_30668(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::Association<std::vector<reco::FFTAnyJet<reco::TrackJet> > >*)o)->::edm::Association<std::vector<reco::FFTAnyJet<reco::TrackJet> > >::~Association)();
}
static void constructor_30669( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Association<std::vector<reco::FFTAnyJet<reco::TrackJet> > >(*(const ::edm::Association<std::vector<reco::FFTAnyJet<reco::TrackJet> > >*)arg[0]);
  else ::new(mem) ::edm::Association<std::vector<reco::FFTAnyJet<reco::TrackJet> > >(*(const ::edm::Association<std::vector<reco::FFTAnyJet<reco::TrackJet> > >*)arg[0]);
}

static void constructor_30670( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Association<std::vector<reco::FFTAnyJet<reco::TrackJet> > >();
  else ::new(mem) ::edm::Association<std::vector<reco::FFTAnyJet<reco::TrackJet> > >();
}

static  void method_30671( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >)((((const ::edm::Association<std::vector<reco::FFTAnyJet<reco::TrackJet> > >*)o)->get)(*(::size_t*)arg[0]));
  else   (((const ::edm::Association<std::vector<reco::FFTAnyJet<reco::TrackJet> > >*)o)->get)(*(::size_t*)arg[0]);
}

static  void method_30672( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >)((((const ::edm::Association<std::vector<reco::FFTAnyJet<reco::TrackJet> > >*)o)->get)(*(::edm::ProductID*)arg[0],
    *(::size_t*)arg[1]));
  else   (((const ::edm::Association<std::vector<reco::FFTAnyJet<reco::TrackJet> > >*)o)->get)(*(::edm::ProductID*)arg[0],
    *(::size_t*)arg[1]);
}

static  void operator_30673( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::Association<std::vector<reco::FFTAnyJet<reco::TrackJet> > >*)o)->operator+=)(*(const ::edm::Association<std::vector<reco::FFTAnyJet<reco::TrackJet> > >*)arg[0]);
  else   (((::edm::Association<std::vector<reco::FFTAnyJet<reco::TrackJet> > >*)o)->operator+=)(*(const ::edm::Association<std::vector<reco::FFTAnyJet<reco::TrackJet> > >*)arg[0]);
}

static  void method_30674( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::edm::Association<std::vector<reco::FFTAnyJet<reco::TrackJet> > >*)o)->setRef)(*(const ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::TrackJet> > >*)arg[0]);
}

static  void method_30675( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Association<std::vector<reco::FFTAnyJet<reco::TrackJet> > >*)o)->contains)(*(::edm::ProductID*)arg[0]));
  else   (((const ::edm::Association<std::vector<reco::FFTAnyJet<reco::TrackJet> > >*)o)->contains)(*(::edm::ProductID*)arg[0]);
}

static  void method_30676( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (size_t)((((const ::edm::Association<std::vector<reco::FFTAnyJet<reco::TrackJet> > >*)o)->size)());
  else   (((const ::edm::Association<std::vector<reco::FFTAnyJet<reco::TrackJet> > >*)o)->size)();
}

static  void method_30677( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Association<std::vector<reco::FFTAnyJet<reco::TrackJet> > >*)o)->empty)());
  else   (((const ::edm::Association<std::vector<reco::FFTAnyJet<reco::TrackJet> > >*)o)->empty)();
}

static  void method_30678( void*, void* o, const std::vector<void*>&, void*)
{
  (((::edm::Association<std::vector<reco::FFTAnyJet<reco::TrackJet> > >*)o)->clear)();
}

static  void method_30679( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::RefProd<std::vector<reco::FFTAnyJet<reco::TrackJet> > >)((((const ::edm::Association<std::vector<reco::FFTAnyJet<reco::TrackJet> > >*)o)->ref)());
  else   (((const ::edm::Association<std::vector<reco::FFTAnyJet<reco::TrackJet> > >*)o)->ref)();
}

static  void method_30680( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::edm::Association<std::vector<reco::FFTAnyJet<reco::TrackJet> > >*)o)->swap)(*(::edm::Association<std::vector<reco::FFTAnyJet<reco::TrackJet> > >*)arg[0]);
}

static  void operator_30681( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::Association<std::vector<reco::FFTAnyJet<reco::TrackJet> > >*)o)->operator=)(*(const ::edm::Association<std::vector<reco::FFTAnyJet<reco::TrackJet> > >*)arg[0]);
  else   (((::edm::Association<std::vector<reco::FFTAnyJet<reco::TrackJet> > >*)o)->operator=)(*(const ::edm::Association<std::vector<reco::FFTAnyJet<reco::TrackJet> > >*)arg[0]);
}

static  void method_30682( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Association<std::vector<reco::FFTAnyJet<reco::TrackJet> > >*)o)->ids)();
  else   (((const ::edm::Association<std::vector<reco::FFTAnyJet<reco::TrackJet> > >*)o)->ids)();
}

static  void method_30683( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (short)((((::edm::Association<std::vector<reco::FFTAnyJet<reco::TrackJet> > >*)o)->Class_Version)());
  else   (((::edm::Association<std::vector<reco::FFTAnyJet<reco::TrackJet> > >*)o)->Class_Version)();
}

static void method_newdel_5803( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::Association<std::vector<reco::FFTAnyJet<reco::TrackJet> > > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::Association<std::vector<reco::FFTAnyJet<reco::TrackJet> > > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::Association<std::vector<reco::FFTAnyJet<reco::TrackJet> > > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::Association<std::vector<reco::FFTAnyJet<reco::TrackJet> > > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::Association<std::vector<reco::FFTAnyJet<reco::TrackJet> > > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

static void method_x90( void* retaddr, void*, const std::vector<void*>&, void*)
{
  typedef std::vector<std::pair< ::Reflex::Base, int> > Bases_t;
  static Bases_t s_bases;
  if ( !s_bases.size() ) {
    s_bases.push_back(std::make_pair(::Reflex::Base( ::Reflex::TypeBuilder(Reflex::Literal("edm::ValueMap<int>")), ::Reflex::BaseOffset< ::edm::Association<std::vector<reco::FFTAnyJet<reco::TrackJet> > >,::edm::ValueMap<int> >::Get(),::Reflex::PRIVATE), 0));
  }
  if (retaddr) *(Bases_t**)retaddr = &s_bases;
}

//------Dictionary for class Association<std::vector<reco::FFTAnyJet<reco::TrackJet>, std::allocator<reco::FFTAnyJet<reco::TrackJet> > > > -------------------------------
void __edm__Association_std__vector_reco__FFTAnyJet_reco__TrackJet_s_s__db_datamem(Reflex::Class*);
void __edm__Association_std__vector_reco__FFTAnyJet_reco__TrackJet_s_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__Association_std__vector_reco__FFTAnyJet_reco__TrackJet_s_s__datamem_bld(&__edm__Association_std__vector_reco__FFTAnyJet_reco__TrackJet_s_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__Association_std__vector_reco__FFTAnyJet_reco__TrackJet_s_s__funcmem_bld(&__edm__Association_std__vector_reco__FFTAnyJet_reco__TrackJet_s_s__db_funcmem);
void __edm__Association_std__vector_reco__FFTAnyJet_reco__TrackJet_s_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::Association<std::vector<reco::FFTAnyJet<reco::TrackJet> > >"), typeid(::edm::Association<std::vector<reco::FFTAnyJet<reco::TrackJet> > >), sizeof(::edm::Association<std::vector<reco::FFTAnyJet<reco::TrackJet> > >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("ClassVersion"), ::edm::Association<std::vector<reco::FFTAnyJet<reco::TrackJet> > >::Class_Version())
  .AddProperty(Reflex::Literal("o_name"), "edm::Association<reco::FFTTrackJetCollection>")
  .AddBase(type_5487, ::Reflex::BaseOffset< ::edm::Association<std::vector<reco::FFTAnyJet<reco::TrackJet> > >, ::edm::ValueMap<int> >::Get(), ::Reflex::PRIVATE)
  .AddTypedef(type_65, Reflex::Literal("edm::Association<std::vector<reco::FFTAnyJet<reco::TrackJet> > >::index"))
  .AddTypedef(type_5487, Reflex::Literal("edm::Association<std::vector<reco::FFTAnyJet<reco::TrackJet> > >::base"))
  .AddTypedef(type_211, Reflex::Literal("edm::Association<std::vector<reco::FFTAnyJet<reco::TrackJet> > >::offset"))
  .AddTypedef(type_5731, Reflex::Literal("edm::Association<std::vector<reco::FFTAnyJet<reco::TrackJet> > >::refprod_type"))
  .AddTypedef(type_5813, Reflex::Literal("edm::Association<std::vector<reco::FFTAnyJet<reco::TrackJet> > >::reference_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~Association"), destructor_30668, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::DESTRUCTOR )
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_48897), Reflex::Literal("Association"), constructor_30669, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("Association"), constructor_30670, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_5803, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getBasesTable"), method_x90, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__Association_std__vector_reco__FFTAnyJet_reco__TrackJet_s_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__Association_std__vector_reco__FFTAnyJet_reco__TrackJet_s_s__funcmem_bld);
}

//------Delayed data member builder for class Association<std::vector<reco::FFTAnyJet<reco::TrackJet>, std::allocator<reco::FFTAnyJet<reco::TrackJet> > > > -------------------
void __edm__Association_std__vector_reco__FFTAnyJet_reco__TrackJet_s_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_5731, Reflex::Literal("ref_"), OffsetOf(__shadow__::__edm__Association_std__vector_reco__FFTAnyJet_reco__TrackJet_s_s_, ref_), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class Association<std::vector<reco::FFTAnyJet<reco::TrackJet>, std::allocator<reco::FFTAnyJet<reco::TrackJet> > > > -------------------
void __edm__Association_std__vector_reco__FFTAnyJet_reco__TrackJet_s_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_5813, type_2166), Reflex::Literal("get"), method_30671, 0, "rawIdx", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_5813, type_5905, type_2166), Reflex::Literal("get"), method_30672, 0, "id;idx", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_48898, type_48897), Reflex::Literal("operator+="), operator_30673, 0, "o", ::Reflex::PUBLIC | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_48828), Reflex::Literal("setRef"), method_30674, 0, "ref", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593, type_5905), Reflex::Literal("contains"), method_30675, 0, "id", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2166), Reflex::Literal("size"), method_30676, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("empty"), method_30677, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708), Reflex::Literal("clear"), method_30678, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_5731), Reflex::Literal("ref"), method_30679, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_48898), Reflex::Literal("swap"), method_30680, 0, "other", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_48898, type_48897), Reflex::Literal("operator="), operator_30681, 0, "rhs", ::Reflex::PUBLIC | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_44141), Reflex::Literal("ids"), method_30682, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_484), Reflex::Literal("Class_Version"), method_30683, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC);
}
//------Stub functions for class Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::TrackJet>, std::allocator<reco::FFTAnyJet<reco::TrackJet> > > > > -------------------------------
static void constructor_28861( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::TrackJet> > > >();
  else ::new(mem) ::edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::TrackJet> > > >();
}

static void constructor_28862( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::TrackJet> > > >(*(::std::auto_ptr<edm::Association<std::vector<reco::FFTAnyJet<reco::TrackJet> > > >*)arg[0]);
  else ::new(mem) ::edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::TrackJet> > > >(*(::std::auto_ptr<edm::Association<std::vector<reco::FFTAnyJet<reco::TrackJet> > > >*)arg[0]);
}

static void destructor_28863(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::TrackJet> > > >*)o)->::edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::TrackJet> > > >::~Wrapper)();
}
static  void method_28864( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::TrackJet> > > >*)o)->product)());
  else   (((const ::edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::TrackJet> > > >*)o)->product)();
}

static  void operator_28865( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::TrackJet> > > >*)o)->operator->)());
  else   (((const ::edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::TrackJet> > > >*)o)->operator->)();
}

static  void method_28866( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::TrackJet> > > >*)o)->productTypeInfo)();
  else   (((::edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::TrackJet> > > >*)o)->productTypeInfo)();
}

static  void method_28867( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::TrackJet> > > >*)o)->typeInfo)();
  else   (((::edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::TrackJet> > > >*)o)->typeInfo)();
}

static void constructor_28868( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::TrackJet> > > >((::edm::Association<std::vector<reco::FFTAnyJet<reco::TrackJet> > >*)arg[0]);
  else ::new(mem) ::edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::TrackJet> > > >((::edm::Association<std::vector<reco::FFTAnyJet<reco::TrackJet> > >*)arg[0]);
}

static  void method_28869( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((::edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::TrackJet> > > >*)o)->getInterface)());
  else   (((::edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::TrackJet> > > >*)o)->getInterface)();
}

static  void method_28870( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::TrackJet> > > >*)o)->fillView)(*(const ::edm::ProductID*)arg[0],
    *(::std::vector<const void*>*)arg[1],
    *(::boost::shared_ptr<edm::reftobase::RefVectorHolderBase>*)arg[2]);
}

static  void method_28871( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::TrackJet> > > >*)o)->setPtr)(*(const ::std::type_info*)arg[0],
    *(unsigned long*)arg[1],
    *(const void**)arg[2]);
}

static  void method_28872( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::TrackJet> > > >*)o)->fillPtrVector)(*(const ::std::type_info*)arg[0],
    *(const ::std::vector<unsigned long>*)arg[1],
    *(::std::vector<const void*>*)arg[2]);
}

static  void method_28873( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::TrackJet> > > >*)o)->dynamicTypeInfo)();
  else   (((const ::edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::TrackJet> > > >*)o)->dynamicTypeInfo)();
}

static  void method_28874( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::TrackJet> > > >*)o)->isPresent)());
  else   (((const ::edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::TrackJet> > > >*)o)->isPresent)();
}

static  void method_28875( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::TrackJet> > > >*)o)->dynamicTypeInfo_)();
  else   (((const ::edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::TrackJet> > > >*)o)->dynamicTypeInfo_)();
}

static void method_newdel_5457( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::TrackJet> > > > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::TrackJet> > > > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::TrackJet> > > > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::TrackJet> > > > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::TrackJet> > > > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::TrackJet>, std::allocator<reco::FFTAnyJet<reco::TrackJet> > > > > -------------------------------
void __edm__Wrapper_edm__Association_std__vector_reco__FFTAnyJet_reco__TrackJet_s_s_s__db_datamem(Reflex::Class*);
void __edm__Wrapper_edm__Association_std__vector_reco__FFTAnyJet_reco__TrackJet_s_s_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__Wrapper_edm__Association_std__vector_reco__FFTAnyJet_reco__TrackJet_s_s_s__datamem_bld(&__edm__Wrapper_edm__Association_std__vector_reco__FFTAnyJet_reco__TrackJet_s_s_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__Wrapper_edm__Association_std__vector_reco__FFTAnyJet_reco__TrackJet_s_s_s__funcmem_bld(&__edm__Wrapper_edm__Association_std__vector_reco__FFTAnyJet_reco__TrackJet_s_s_s__db_funcmem);
void __edm__Wrapper_edm__Association_std__vector_reco__FFTAnyJet_reco__TrackJet_s_s_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::TrackJet> > > >"), typeid(::edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::TrackJet> > > >), sizeof(::edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::TrackJet> > > >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("o_name"), "edm::Wrapper<edm::Association<reco::FFTTrackJetCollection> >")
  .AddTypedef(type_5803, Reflex::Literal("edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::TrackJet> > > >::value_type"))
  .AddTypedef(type_5803, Reflex::Literal("edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::TrackJet> > > >::wrapped_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("Wrapper"), constructor_28861, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_2882), Reflex::Literal("Wrapper"), constructor_28862, 0, "ptr", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~Wrapper"), destructor_28863, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_48241), Reflex::Literal("Wrapper"), constructor_28868, 0, "ptr", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_5457, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__Wrapper_edm__Association_std__vector_reco__FFTAnyJet_reco__TrackJet_s_s_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__Wrapper_edm__Association_std__vector_reco__FFTAnyJet_reco__TrackJet_s_s_s__funcmem_bld);
}

//------Delayed data member builder for class Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::TrackJet>, std::allocator<reco::FFTAnyJet<reco::TrackJet> > > > > -------------------
void __edm__Wrapper_edm__Association_std__vector_reco__FFTAnyJet_reco__TrackJet_s_s_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_1593, Reflex::Literal("present"), OffsetOf(__shadow__::__edm__Wrapper_edm__Association_std__vector_reco__FFTAnyJet_reco__TrackJet_s_s_s_, present), ::Reflex::PRIVATE)
  .AddDataMember(type_5803, Reflex::Literal("obj"), OffsetOf(__shadow__::__edm__Wrapper_edm__Association_std__vector_reco__FFTAnyJet_reco__TrackJet_s_s_s_, obj), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::TrackJet>, std::allocator<reco::FFTAnyJet<reco::TrackJet> > > > > -------------------
void __edm__Wrapper_edm__Association_std__vector_reco__FFTAnyJet_reco__TrackJet_s_s_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_48240), Reflex::Literal("product"), method_28864, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_48240), Reflex::Literal("operator->"), operator_28865, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_25675), Reflex::Literal("productTypeInfo"), method_28866, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_25675), Reflex::Literal("typeInfo"), method_28867, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_48242), Reflex::Literal("getInterface"), method_28869, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_25503, type_25627, type_47348), Reflex::Literal("fillView"), method_28870, 0, "id;pointers;helpers", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_25675, type_53, type_13292), Reflex::Literal("setPtr"), method_28871, 0, "iToType;iIndex;oPtr", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_25675, type_32194, type_25627), Reflex::Literal("fillPtrVector"), method_28872, 0, "iToType;iIndices;oPtr", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_25675), Reflex::Literal("dynamicTypeInfo"), method_28873, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("isPresent"), method_28874, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_25675), Reflex::Literal("dynamicTypeInfo_"), method_28875, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST);
}
//------Stub functions for class Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> >, std::allocator<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > > > > -------------------------------
static void constructor_28882( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > > >();
  else ::new(mem) ::edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > > >();
}

static void constructor_28883( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > > >(*(::std::auto_ptr<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > > >*)arg[0]);
  else ::new(mem) ::edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > > >(*(::std::auto_ptr<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > > >*)arg[0]);
}

static void destructor_28884(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > > >*)o)->::edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > > >::~Wrapper)();
}
static  void method_28885( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > > >*)o)->product)());
  else   (((const ::edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > > >*)o)->product)();
}

static  void operator_28886( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > > >*)o)->operator->)());
  else   (((const ::edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > > >*)o)->operator->)();
}

static  void method_28887( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > > >*)o)->productTypeInfo)();
  else   (((::edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > > >*)o)->productTypeInfo)();
}

static  void method_28888( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > > >*)o)->typeInfo)();
  else   (((::edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > > >*)o)->typeInfo)();
}

static void constructor_28889( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > > >((::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > >*)arg[0]);
  else ::new(mem) ::edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > > >((::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > >*)arg[0]);
}

static  void method_28890( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((::edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > > >*)o)->getInterface)());
  else   (((::edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > > >*)o)->getInterface)();
}

static  void method_28891( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > > >*)o)->fillView)(*(const ::edm::ProductID*)arg[0],
    *(::std::vector<const void*>*)arg[1],
    *(::boost::shared_ptr<edm::reftobase::RefVectorHolderBase>*)arg[2]);
}

static  void method_28892( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > > >*)o)->setPtr)(*(const ::std::type_info*)arg[0],
    *(unsigned long*)arg[1],
    *(const void**)arg[2]);
}

static  void method_28893( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > > >*)o)->fillPtrVector)(*(const ::std::type_info*)arg[0],
    *(const ::std::vector<unsigned long>*)arg[1],
    *(::std::vector<const void*>*)arg[2]);
}

static  void method_28894( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > > >*)o)->dynamicTypeInfo)();
  else   (((const ::edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > > >*)o)->dynamicTypeInfo)();
}

static  void method_28895( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > > >*)o)->isPresent)());
  else   (((const ::edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > > >*)o)->isPresent)();
}

static  void method_28896( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > > >*)o)->dynamicTypeInfo_)();
  else   (((const ::edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > > >*)o)->dynamicTypeInfo_)();
}

static void method_newdel_5458( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > > > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > > > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > > > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > > > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > > > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> >, std::allocator<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > > > > -------------------------------
void __edm__Wrapper_std__vector_edm__FwdPtr_reco__FFTAnyJet_reco__TrackJet_s_s_s__db_datamem(Reflex::Class*);
void __edm__Wrapper_std__vector_edm__FwdPtr_reco__FFTAnyJet_reco__TrackJet_s_s_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__Wrapper_std__vector_edm__FwdPtr_reco__FFTAnyJet_reco__TrackJet_s_s_s__datamem_bld(&__edm__Wrapper_std__vector_edm__FwdPtr_reco__FFTAnyJet_reco__TrackJet_s_s_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__Wrapper_std__vector_edm__FwdPtr_reco__FFTAnyJet_reco__TrackJet_s_s_s__funcmem_bld(&__edm__Wrapper_std__vector_edm__FwdPtr_reco__FFTAnyJet_reco__TrackJet_s_s_s__db_funcmem);
void __edm__Wrapper_std__vector_edm__FwdPtr_reco__FFTAnyJet_reco__TrackJet_s_s_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > > >"), typeid(::edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > > >), sizeof(::edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > > >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("o_name"), "edm::Wrapper<reco::FFTTrackJetFwdPtrVector>")
  .AddTypedef(type_3122, Reflex::Literal("edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > > >::value_type"))
  .AddTypedef(type_3122, Reflex::Literal("edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > > >::wrapped_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("Wrapper"), constructor_28882, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_2883), Reflex::Literal("Wrapper"), constructor_28883, 0, "ptr", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~Wrapper"), destructor_28884, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_48246), Reflex::Literal("Wrapper"), constructor_28889, 0, "ptr", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_5458, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__Wrapper_std__vector_edm__FwdPtr_reco__FFTAnyJet_reco__TrackJet_s_s_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__Wrapper_std__vector_edm__FwdPtr_reco__FFTAnyJet_reco__TrackJet_s_s_s__funcmem_bld);
}

//------Delayed data member builder for class Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> >, std::allocator<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > > > > -------------------
void __edm__Wrapper_std__vector_edm__FwdPtr_reco__FFTAnyJet_reco__TrackJet_s_s_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_1593, Reflex::Literal("present"), OffsetOf(__shadow__::__edm__Wrapper_std__vector_edm__FwdPtr_reco__FFTAnyJet_reco__TrackJet_s_s_s_, present), ::Reflex::PRIVATE)
  .AddDataMember(type_3122, Reflex::Literal("obj"), OffsetOf(__shadow__::__edm__Wrapper_std__vector_edm__FwdPtr_reco__FFTAnyJet_reco__TrackJet_s_s_s_, obj), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> >, std::allocator<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > > > > -------------------
void __edm__Wrapper_std__vector_edm__FwdPtr_reco__FFTAnyJet_reco__TrackJet_s_s_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_48245), Reflex::Literal("product"), method_28885, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_48245), Reflex::Literal("operator->"), operator_28886, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_25675), Reflex::Literal("productTypeInfo"), method_28887, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_25675), Reflex::Literal("typeInfo"), method_28888, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_48247), Reflex::Literal("getInterface"), method_28890, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_25503, type_25627, type_47348), Reflex::Literal("fillView"), method_28891, 0, "id;pointers;helpers", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_25675, type_53, type_13292), Reflex::Literal("setPtr"), method_28892, 0, "iToType;iIndex;oPtr", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_25675, type_32194, type_25627), Reflex::Literal("fillPtrVector"), method_28893, 0, "iToType;iIndices;oPtr", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_25675), Reflex::Literal("dynamicTypeInfo"), method_28894, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("isPresent"), method_28895, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_25675), Reflex::Literal("dynamicTypeInfo_"), method_28896, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST);
}
//------Stub functions for class Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet>, std::allocator<reco::FFTAnyJet<reco::TrackJet> > >, reco::FFTAnyJet<reco::TrackJet>, edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet>, std::allocator<reco::FFTAnyJet<reco::TrackJet> > >, reco::FFTAnyJet<reco::TrackJet> > >, std::allocator<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet>, std::allocator<reco::FFTAnyJet<reco::TrackJet> > >, reco::FFTAnyJet<reco::TrackJet>, edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet>, std::allocator<reco::FFTAnyJet<reco::TrackJet> > >, reco::FFTAnyJet<reco::TrackJet> > > > > > -------------------------------
static void constructor_28903( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > > >();
  else ::new(mem) ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > > >();
}

static void constructor_28904( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > > >(*(::std::auto_ptr<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > > >*)arg[0]);
  else ::new(mem) ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > > >(*(::std::auto_ptr<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > > >*)arg[0]);
}

static void destructor_28905(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > > >*)o)->::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > > >::~Wrapper)();
}
static  void method_28906( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > > >*)o)->product)());
  else   (((const ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > > >*)o)->product)();
}

static  void operator_28907( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > > >*)o)->operator->)());
  else   (((const ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > > >*)o)->operator->)();
}

static  void method_28908( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > > >*)o)->productTypeInfo)();
  else   (((::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > > >*)o)->productTypeInfo)();
}

static  void method_28909( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > > >*)o)->typeInfo)();
  else   (((::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > > >*)o)->typeInfo)();
}

static void constructor_28910( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > > >((::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)arg[0]);
  else ::new(mem) ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > > >((::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)arg[0]);
}

static  void method_28911( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > > >*)o)->getInterface)());
  else   (((::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > > >*)o)->getInterface)();
}

static  void method_28912( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > > >*)o)->fillView)(*(const ::edm::ProductID*)arg[0],
    *(::std::vector<const void*>*)arg[1],
    *(::boost::shared_ptr<edm::reftobase::RefVectorHolderBase>*)arg[2]);
}

static  void method_28913( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > > >*)o)->setPtr)(*(const ::std::type_info*)arg[0],
    *(unsigned long*)arg[1],
    *(const void**)arg[2]);
}

static  void method_28914( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > > >*)o)->fillPtrVector)(*(const ::std::type_info*)arg[0],
    *(const ::std::vector<unsigned long>*)arg[1],
    *(::std::vector<const void*>*)arg[2]);
}

static  void method_28915( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > > >*)o)->dynamicTypeInfo)();
  else   (((const ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > > >*)o)->dynamicTypeInfo)();
}

static  void method_28916( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > > >*)o)->isPresent)());
  else   (((const ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > > >*)o)->isPresent)();
}

static  void method_28917( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > > >*)o)->dynamicTypeInfo_)();
  else   (((const ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > > >*)o)->dynamicTypeInfo_)();
}

static void method_newdel_5459( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > > > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > > > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > > > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > > > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > > > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet>, std::allocator<reco::FFTAnyJet<reco::TrackJet> > >, reco::FFTAnyJet<reco::TrackJet>, edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet>, std::allocator<reco::FFTAnyJet<reco::TrackJet> > >, reco::FFTAnyJet<reco::TrackJet> > >, std::allocator<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet>, std::allocator<reco::FFTAnyJet<reco::TrackJet> > >, reco::FFTAnyJet<reco::TrackJet>, edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet>, std::allocator<reco::FFTAnyJet<reco::TrackJet> > >, reco::FFTAnyJet<reco::TrackJet> > > > > > -------------------------------
void __edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s_s_s__db_datamem(Reflex::Class*);
void __edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s_s_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s_s_s__datamem_bld(&__edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s_s_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s_s_s__funcmem_bld(&__edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s_s_s__db_funcmem);
void __edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s_s_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > > >"), typeid(::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > > >), sizeof(::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > > >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("o_name"), "edm::Wrapper<reco::FFTTrackJetFwdRefVector>")
  .AddTypedef(type_3123, Reflex::Literal("edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > > >::value_type"))
  .AddTypedef(type_3123, Reflex::Literal("edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > > >::wrapped_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("Wrapper"), constructor_28903, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_2884), Reflex::Literal("Wrapper"), constructor_28904, 0, "ptr", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~Wrapper"), destructor_28905, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_48251), Reflex::Literal("Wrapper"), constructor_28910, 0, "ptr", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_5459, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s_s_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s_s_s__funcmem_bld);
}

//------Delayed data member builder for class Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet>, std::allocator<reco::FFTAnyJet<reco::TrackJet> > >, reco::FFTAnyJet<reco::TrackJet>, edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet>, std::allocator<reco::FFTAnyJet<reco::TrackJet> > >, reco::FFTAnyJet<reco::TrackJet> > >, std::allocator<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet>, std::allocator<reco::FFTAnyJet<reco::TrackJet> > >, reco::FFTAnyJet<reco::TrackJet>, edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet>, std::allocator<reco::FFTAnyJet<reco::TrackJet> > >, reco::FFTAnyJet<reco::TrackJet> > > > > > -------------------
void __edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s_s_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_1593, Reflex::Literal("present"), OffsetOf(__shadow__::__edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s_s_s_, present), ::Reflex::PRIVATE)
  .AddDataMember(type_3123, Reflex::Literal("obj"), OffsetOf(__shadow__::__edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s_s_s_, obj), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet>, std::allocator<reco::FFTAnyJet<reco::TrackJet> > >, reco::FFTAnyJet<reco::TrackJet>, edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet>, std::allocator<reco::FFTAnyJet<reco::TrackJet> > >, reco::FFTAnyJet<reco::TrackJet> > >, std::allocator<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet>, std::allocator<reco::FFTAnyJet<reco::TrackJet> > >, reco::FFTAnyJet<reco::TrackJet>, edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet>, std::allocator<reco::FFTAnyJet<reco::TrackJet> > >, reco::FFTAnyJet<reco::TrackJet> > > > > > -------------------
void __edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s_s_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_48250), Reflex::Literal("product"), method_28906, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_48250), Reflex::Literal("operator->"), operator_28907, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_25675), Reflex::Literal("productTypeInfo"), method_28908, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_25675), Reflex::Literal("typeInfo"), method_28909, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_48252), Reflex::Literal("getInterface"), method_28911, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_25503, type_25627, type_47348), Reflex::Literal("fillView"), method_28912, 0, "id;pointers;helpers", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_25675, type_53, type_13292), Reflex::Literal("setPtr"), method_28913, 0, "iToType;iIndex;oPtr", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_25675, type_32194, type_25627), Reflex::Literal("fillPtrVector"), method_28914, 0, "iToType;iIndices;oPtr", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_25675), Reflex::Literal("dynamicTypeInfo"), method_28915, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("isPresent"), method_28916, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_25675), Reflex::Literal("dynamicTypeInfo_"), method_28917, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST);
}
//------Stub functions for class Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::TrackJet>, std::allocator<reco::FFTAnyJet<reco::TrackJet> > >, reco::FFTAnyJet<reco::TrackJet>, edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet>, std::allocator<reco::FFTAnyJet<reco::TrackJet> > >, reco::FFTAnyJet<reco::TrackJet> > > > -------------------------------
static void constructor_28924( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >();
  else ::new(mem) ::edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >();
}

static void constructor_28925( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >(*(::std::auto_ptr<edm::RefVector<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)arg[0]);
  else ::new(mem) ::edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >(*(::std::auto_ptr<edm::RefVector<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)arg[0]);
}

static void destructor_28926(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->::edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >::~Wrapper)();
}
static  void method_28927( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->product)());
  else   (((const ::edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->product)();
}

static  void operator_28928( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->operator->)());
  else   (((const ::edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->operator->)();
}

static  void method_28929( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->productTypeInfo)();
  else   (((::edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->productTypeInfo)();
}

static  void method_28930( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->typeInfo)();
  else   (((::edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->typeInfo)();
}

static void constructor_28931( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >((::edm::RefVector<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)arg[0]);
  else ::new(mem) ::edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >((::edm::RefVector<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)arg[0]);
}

static  void method_28932( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((::edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->getInterface)());
  else   (((::edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->getInterface)();
}

static  void method_28933( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->fillView)(*(const ::edm::ProductID*)arg[0],
    *(::std::vector<const void*>*)arg[1],
    *(::boost::shared_ptr<edm::reftobase::RefVectorHolderBase>*)arg[2]);
}

static  void method_28934( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->setPtr)(*(const ::std::type_info*)arg[0],
    *(unsigned long*)arg[1],
    *(const void**)arg[2]);
}

static  void method_28935( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->fillPtrVector)(*(const ::std::type_info*)arg[0],
    *(const ::std::vector<unsigned long>*)arg[1],
    *(::std::vector<const void*>*)arg[2]);
}

static  void method_28936( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->dynamicTypeInfo)();
  else   (((const ::edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->dynamicTypeInfo)();
}

static  void method_28937( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->isPresent)());
  else   (((const ::edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->isPresent)();
}

static  void method_28938( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->dynamicTypeInfo_)();
  else   (((const ::edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->dynamicTypeInfo_)();
}

static void method_newdel_5460( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::TrackJet>, std::allocator<reco::FFTAnyJet<reco::TrackJet> > >, reco::FFTAnyJet<reco::TrackJet>, edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet>, std::allocator<reco::FFTAnyJet<reco::TrackJet> > >, reco::FFTAnyJet<reco::TrackJet> > > > -------------------------------
void __edm__Wrapper_edm__RefVector_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s_s__db_datamem(Reflex::Class*);
void __edm__Wrapper_edm__RefVector_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__Wrapper_edm__RefVector_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s_s__datamem_bld(&__edm__Wrapper_edm__RefVector_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__Wrapper_edm__RefVector_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s_s__funcmem_bld(&__edm__Wrapper_edm__RefVector_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s_s__db_funcmem);
void __edm__Wrapper_edm__RefVector_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >"), typeid(::edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >), sizeof(::edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("o_name"), "edm::Wrapper<reco::FFTTrackJetRefVector>")
  .AddTypedef(type_5338, Reflex::Literal("edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >::value_type"))
  .AddTypedef(type_5338, Reflex::Literal("edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >::wrapped_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("Wrapper"), constructor_28924, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_2885), Reflex::Literal("Wrapper"), constructor_28925, 0, "ptr", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~Wrapper"), destructor_28926, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_48256), Reflex::Literal("Wrapper"), constructor_28931, 0, "ptr", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_5460, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__Wrapper_edm__RefVector_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__Wrapper_edm__RefVector_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s_s__funcmem_bld);
}

//------Delayed data member builder for class Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::TrackJet>, std::allocator<reco::FFTAnyJet<reco::TrackJet> > >, reco::FFTAnyJet<reco::TrackJet>, edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet>, std::allocator<reco::FFTAnyJet<reco::TrackJet> > >, reco::FFTAnyJet<reco::TrackJet> > > > -------------------
void __edm__Wrapper_edm__RefVector_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_1593, Reflex::Literal("present"), OffsetOf(__shadow__::__edm__Wrapper_edm__RefVector_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s_s_, present), ::Reflex::PRIVATE)
  .AddDataMember(type_5338, Reflex::Literal("obj"), OffsetOf(__shadow__::__edm__Wrapper_edm__RefVector_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s_s_, obj), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::TrackJet>, std::allocator<reco::FFTAnyJet<reco::TrackJet> > >, reco::FFTAnyJet<reco::TrackJet>, edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet>, std::allocator<reco::FFTAnyJet<reco::TrackJet> > >, reco::FFTAnyJet<reco::TrackJet> > > > -------------------
void __edm__Wrapper_edm__RefVector_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_48255), Reflex::Literal("product"), method_28927, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_48255), Reflex::Literal("operator->"), operator_28928, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_25675), Reflex::Literal("productTypeInfo"), method_28929, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_25675), Reflex::Literal("typeInfo"), method_28930, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_48257), Reflex::Literal("getInterface"), method_28932, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_25503, type_25627, type_47348), Reflex::Literal("fillView"), method_28933, 0, "id;pointers;helpers", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_25675, type_53, type_13292), Reflex::Literal("setPtr"), method_28934, 0, "iToType;iIndex;oPtr", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_25675, type_32194, type_25627), Reflex::Literal("fillPtrVector"), method_28935, 0, "iToType;iIndices;oPtr", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_25675), Reflex::Literal("dynamicTypeInfo"), method_28936, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("isPresent"), method_28937, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_25675), Reflex::Literal("dynamicTypeInfo_"), method_28938, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST);
}
//------Stub functions for class Wrapper<std::vector<reco::FFTAnyJet<reco::TrackJet>, std::allocator<reco::FFTAnyJet<reco::TrackJet> > > > -------------------------------
static void constructor_28945( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<std::vector<reco::FFTAnyJet<reco::TrackJet> > >();
  else ::new(mem) ::edm::Wrapper<std::vector<reco::FFTAnyJet<reco::TrackJet> > >();
}

static void constructor_28946( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<std::vector<reco::FFTAnyJet<reco::TrackJet> > >(*(::std::auto_ptr<std::vector<reco::FFTAnyJet<reco::TrackJet> > >*)arg[0]);
  else ::new(mem) ::edm::Wrapper<std::vector<reco::FFTAnyJet<reco::TrackJet> > >(*(::std::auto_ptr<std::vector<reco::FFTAnyJet<reco::TrackJet> > >*)arg[0]);
}

static void destructor_28947(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::Wrapper<std::vector<reco::FFTAnyJet<reco::TrackJet> > >*)o)->::edm::Wrapper<std::vector<reco::FFTAnyJet<reco::TrackJet> > >::~Wrapper)();
}
static  void method_28948( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Wrapper<std::vector<reco::FFTAnyJet<reco::TrackJet> > >*)o)->product)());
  else   (((const ::edm::Wrapper<std::vector<reco::FFTAnyJet<reco::TrackJet> > >*)o)->product)();
}

static  void operator_28949( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Wrapper<std::vector<reco::FFTAnyJet<reco::TrackJet> > >*)o)->operator->)());
  else   (((const ::edm::Wrapper<std::vector<reco::FFTAnyJet<reco::TrackJet> > >*)o)->operator->)();
}

static  void method_28950( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::Wrapper<std::vector<reco::FFTAnyJet<reco::TrackJet> > >*)o)->productTypeInfo)();
  else   (((::edm::Wrapper<std::vector<reco::FFTAnyJet<reco::TrackJet> > >*)o)->productTypeInfo)();
}

static  void method_28951( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::Wrapper<std::vector<reco::FFTAnyJet<reco::TrackJet> > >*)o)->typeInfo)();
  else   (((::edm::Wrapper<std::vector<reco::FFTAnyJet<reco::TrackJet> > >*)o)->typeInfo)();
}

static void constructor_28952( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<std::vector<reco::FFTAnyJet<reco::TrackJet> > >((::std::vector<reco::FFTAnyJet<reco::TrackJet> >*)arg[0]);
  else ::new(mem) ::edm::Wrapper<std::vector<reco::FFTAnyJet<reco::TrackJet> > >((::std::vector<reco::FFTAnyJet<reco::TrackJet> >*)arg[0]);
}

static  void method_28953( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((::edm::Wrapper<std::vector<reco::FFTAnyJet<reco::TrackJet> > >*)o)->getInterface)());
  else   (((::edm::Wrapper<std::vector<reco::FFTAnyJet<reco::TrackJet> > >*)o)->getInterface)();
}

static  void method_28954( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<std::vector<reco::FFTAnyJet<reco::TrackJet> > >*)o)->fillView)(*(const ::edm::ProductID*)arg[0],
    *(::std::vector<const void*>*)arg[1],
    *(::boost::shared_ptr<edm::reftobase::RefVectorHolderBase>*)arg[2]);
}

static  void method_28955( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<std::vector<reco::FFTAnyJet<reco::TrackJet> > >*)o)->setPtr)(*(const ::std::type_info*)arg[0],
    *(unsigned long*)arg[1],
    *(const void**)arg[2]);
}

static  void method_28956( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<std::vector<reco::FFTAnyJet<reco::TrackJet> > >*)o)->fillPtrVector)(*(const ::std::type_info*)arg[0],
    *(const ::std::vector<unsigned long>*)arg[1],
    *(::std::vector<const void*>*)arg[2]);
}

static  void method_28957( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Wrapper<std::vector<reco::FFTAnyJet<reco::TrackJet> > >*)o)->dynamicTypeInfo)();
  else   (((const ::edm::Wrapper<std::vector<reco::FFTAnyJet<reco::TrackJet> > >*)o)->dynamicTypeInfo)();
}

static  void method_28958( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Wrapper<std::vector<reco::FFTAnyJet<reco::TrackJet> > >*)o)->isPresent)());
  else   (((const ::edm::Wrapper<std::vector<reco::FFTAnyJet<reco::TrackJet> > >*)o)->isPresent)();
}

static  void method_28959( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Wrapper<std::vector<reco::FFTAnyJet<reco::TrackJet> > >*)o)->dynamicTypeInfo_)();
  else   (((const ::edm::Wrapper<std::vector<reco::FFTAnyJet<reco::TrackJet> > >*)o)->dynamicTypeInfo_)();
}

static void method_newdel_5461( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<reco::FFTAnyJet<reco::TrackJet> > > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<reco::FFTAnyJet<reco::TrackJet> > > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<reco::FFTAnyJet<reco::TrackJet> > > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<reco::FFTAnyJet<reco::TrackJet> > > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<reco::FFTAnyJet<reco::TrackJet> > > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class Wrapper<std::vector<reco::FFTAnyJet<reco::TrackJet>, std::allocator<reco::FFTAnyJet<reco::TrackJet> > > > -------------------------------
void __edm__Wrapper_std__vector_reco__FFTAnyJet_reco__TrackJet_s_s__db_datamem(Reflex::Class*);
void __edm__Wrapper_std__vector_reco__FFTAnyJet_reco__TrackJet_s_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__Wrapper_std__vector_reco__FFTAnyJet_reco__TrackJet_s_s__datamem_bld(&__edm__Wrapper_std__vector_reco__FFTAnyJet_reco__TrackJet_s_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__Wrapper_std__vector_reco__FFTAnyJet_reco__TrackJet_s_s__funcmem_bld(&__edm__Wrapper_std__vector_reco__FFTAnyJet_reco__TrackJet_s_s__db_funcmem);
void __edm__Wrapper_std__vector_reco__FFTAnyJet_reco__TrackJet_s_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::Wrapper<std::vector<reco::FFTAnyJet<reco::TrackJet> > >"), typeid(::edm::Wrapper<std::vector<reco::FFTAnyJet<reco::TrackJet> > >), sizeof(::edm::Wrapper<std::vector<reco::FFTAnyJet<reco::TrackJet> > >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("o_name"), "edm::Wrapper<reco::FFTTrackJetCollection>")
  .AddTypedef(type_3124, Reflex::Literal("edm::Wrapper<std::vector<reco::FFTAnyJet<reco::TrackJet> > >::value_type"))
  .AddTypedef(type_3124, Reflex::Literal("edm::Wrapper<std::vector<reco::FFTAnyJet<reco::TrackJet> > >::wrapped_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("Wrapper"), constructor_28945, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_2886), Reflex::Literal("Wrapper"), constructor_28946, 0, "ptr", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~Wrapper"), destructor_28947, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_48260), Reflex::Literal("Wrapper"), constructor_28952, 0, "ptr", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_5461, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__Wrapper_std__vector_reco__FFTAnyJet_reco__TrackJet_s_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__Wrapper_std__vector_reco__FFTAnyJet_reco__TrackJet_s_s__funcmem_bld);
}

//------Delayed data member builder for class Wrapper<std::vector<reco::FFTAnyJet<reco::TrackJet>, std::allocator<reco::FFTAnyJet<reco::TrackJet> > > > -------------------
void __edm__Wrapper_std__vector_reco__FFTAnyJet_reco__TrackJet_s_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_1593, Reflex::Literal("present"), OffsetOf(__shadow__::__edm__Wrapper_std__vector_reco__FFTAnyJet_reco__TrackJet_s_s_, present), ::Reflex::PRIVATE)
  .AddDataMember(type_3124, Reflex::Literal("obj"), OffsetOf(__shadow__::__edm__Wrapper_std__vector_reco__FFTAnyJet_reco__TrackJet_s_s_, obj), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class Wrapper<std::vector<reco::FFTAnyJet<reco::TrackJet>, std::allocator<reco::FFTAnyJet<reco::TrackJet> > > > -------------------
void __edm__Wrapper_std__vector_reco__FFTAnyJet_reco__TrackJet_s_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_48116), Reflex::Literal("product"), method_28948, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_48116), Reflex::Literal("operator->"), operator_28949, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_25675), Reflex::Literal("productTypeInfo"), method_28950, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_25675), Reflex::Literal("typeInfo"), method_28951, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_48261), Reflex::Literal("getInterface"), method_28953, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_25503, type_25627, type_47348), Reflex::Literal("fillView"), method_28954, 0, "id;pointers;helpers", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_25675, type_53, type_13292), Reflex::Literal("setPtr"), method_28955, 0, "iToType;iIndex;oPtr", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_25675, type_32194, type_25627), Reflex::Literal("fillPtrVector"), method_28956, 0, "iToType;iIndices;oPtr", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_25675), Reflex::Literal("dynamicTypeInfo"), method_28957, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("isPresent"), method_28958, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_25675), Reflex::Literal("dynamicTypeInfo_"), method_28959, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST);
}
//------Stub functions for class Association<std::vector<reco::FFTAnyJet<reco::PFJet>, std::allocator<reco::FFTAnyJet<reco::PFJet> > > > -------------------------------
static void destructor_30694(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::Association<std::vector<reco::FFTAnyJet<reco::PFJet> > >*)o)->::edm::Association<std::vector<reco::FFTAnyJet<reco::PFJet> > >::~Association)();
}
static void constructor_30695( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Association<std::vector<reco::FFTAnyJet<reco::PFJet> > >(*(const ::edm::Association<std::vector<reco::FFTAnyJet<reco::PFJet> > >*)arg[0]);
  else ::new(mem) ::edm::Association<std::vector<reco::FFTAnyJet<reco::PFJet> > >(*(const ::edm::Association<std::vector<reco::FFTAnyJet<reco::PFJet> > >*)arg[0]);
}

static void constructor_30696( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Association<std::vector<reco::FFTAnyJet<reco::PFJet> > >();
  else ::new(mem) ::edm::Association<std::vector<reco::FFTAnyJet<reco::PFJet> > >();
}

static  void method_30697( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >)((((const ::edm::Association<std::vector<reco::FFTAnyJet<reco::PFJet> > >*)o)->get)(*(::size_t*)arg[0]));
  else   (((const ::edm::Association<std::vector<reco::FFTAnyJet<reco::PFJet> > >*)o)->get)(*(::size_t*)arg[0]);
}

static  void method_30698( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >)((((const ::edm::Association<std::vector<reco::FFTAnyJet<reco::PFJet> > >*)o)->get)(*(::edm::ProductID*)arg[0],
    *(::size_t*)arg[1]));
  else   (((const ::edm::Association<std::vector<reco::FFTAnyJet<reco::PFJet> > >*)o)->get)(*(::edm::ProductID*)arg[0],
    *(::size_t*)arg[1]);
}

static  void operator_30699( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::Association<std::vector<reco::FFTAnyJet<reco::PFJet> > >*)o)->operator+=)(*(const ::edm::Association<std::vector<reco::FFTAnyJet<reco::PFJet> > >*)arg[0]);
  else   (((::edm::Association<std::vector<reco::FFTAnyJet<reco::PFJet> > >*)o)->operator+=)(*(const ::edm::Association<std::vector<reco::FFTAnyJet<reco::PFJet> > >*)arg[0]);
}

static  void method_30700( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::edm::Association<std::vector<reco::FFTAnyJet<reco::PFJet> > >*)o)->setRef)(*(const ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::PFJet> > >*)arg[0]);
}

static  void method_30701( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Association<std::vector<reco::FFTAnyJet<reco::PFJet> > >*)o)->contains)(*(::edm::ProductID*)arg[0]));
  else   (((const ::edm::Association<std::vector<reco::FFTAnyJet<reco::PFJet> > >*)o)->contains)(*(::edm::ProductID*)arg[0]);
}

static  void method_30702( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (size_t)((((const ::edm::Association<std::vector<reco::FFTAnyJet<reco::PFJet> > >*)o)->size)());
  else   (((const ::edm::Association<std::vector<reco::FFTAnyJet<reco::PFJet> > >*)o)->size)();
}

static  void method_30703( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Association<std::vector<reco::FFTAnyJet<reco::PFJet> > >*)o)->empty)());
  else   (((const ::edm::Association<std::vector<reco::FFTAnyJet<reco::PFJet> > >*)o)->empty)();
}

static  void method_30704( void*, void* o, const std::vector<void*>&, void*)
{
  (((::edm::Association<std::vector<reco::FFTAnyJet<reco::PFJet> > >*)o)->clear)();
}

static  void method_30705( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::RefProd<std::vector<reco::FFTAnyJet<reco::PFJet> > >)((((const ::edm::Association<std::vector<reco::FFTAnyJet<reco::PFJet> > >*)o)->ref)());
  else   (((const ::edm::Association<std::vector<reco::FFTAnyJet<reco::PFJet> > >*)o)->ref)();
}

static  void method_30706( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::edm::Association<std::vector<reco::FFTAnyJet<reco::PFJet> > >*)o)->swap)(*(::edm::Association<std::vector<reco::FFTAnyJet<reco::PFJet> > >*)arg[0]);
}

static  void operator_30707( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::Association<std::vector<reco::FFTAnyJet<reco::PFJet> > >*)o)->operator=)(*(const ::edm::Association<std::vector<reco::FFTAnyJet<reco::PFJet> > >*)arg[0]);
  else   (((::edm::Association<std::vector<reco::FFTAnyJet<reco::PFJet> > >*)o)->operator=)(*(const ::edm::Association<std::vector<reco::FFTAnyJet<reco::PFJet> > >*)arg[0]);
}

static  void method_30708( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Association<std::vector<reco::FFTAnyJet<reco::PFJet> > >*)o)->ids)();
  else   (((const ::edm::Association<std::vector<reco::FFTAnyJet<reco::PFJet> > >*)o)->ids)();
}

static  void method_30709( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (short)((((::edm::Association<std::vector<reco::FFTAnyJet<reco::PFJet> > >*)o)->Class_Version)());
  else   (((::edm::Association<std::vector<reco::FFTAnyJet<reco::PFJet> > >*)o)->Class_Version)();
}

static void method_newdel_5804( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::Association<std::vector<reco::FFTAnyJet<reco::PFJet> > > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::Association<std::vector<reco::FFTAnyJet<reco::PFJet> > > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::Association<std::vector<reco::FFTAnyJet<reco::PFJet> > > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::Association<std::vector<reco::FFTAnyJet<reco::PFJet> > > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::Association<std::vector<reco::FFTAnyJet<reco::PFJet> > > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

static void method_x97( void* retaddr, void*, const std::vector<void*>&, void*)
{
  typedef std::vector<std::pair< ::Reflex::Base, int> > Bases_t;
  static Bases_t s_bases;
  if ( !s_bases.size() ) {
    s_bases.push_back(std::make_pair(::Reflex::Base( ::Reflex::TypeBuilder(Reflex::Literal("edm::ValueMap<int>")), ::Reflex::BaseOffset< ::edm::Association<std::vector<reco::FFTAnyJet<reco::PFJet> > >,::edm::ValueMap<int> >::Get(),::Reflex::PRIVATE), 0));
  }
  if (retaddr) *(Bases_t**)retaddr = &s_bases;
}

//------Dictionary for class Association<std::vector<reco::FFTAnyJet<reco::PFJet>, std::allocator<reco::FFTAnyJet<reco::PFJet> > > > -------------------------------
void __edm__Association_std__vector_reco__FFTAnyJet_reco__PFJet_s_s__db_datamem(Reflex::Class*);
void __edm__Association_std__vector_reco__FFTAnyJet_reco__PFJet_s_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__Association_std__vector_reco__FFTAnyJet_reco__PFJet_s_s__datamem_bld(&__edm__Association_std__vector_reco__FFTAnyJet_reco__PFJet_s_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__Association_std__vector_reco__FFTAnyJet_reco__PFJet_s_s__funcmem_bld(&__edm__Association_std__vector_reco__FFTAnyJet_reco__PFJet_s_s__db_funcmem);
void __edm__Association_std__vector_reco__FFTAnyJet_reco__PFJet_s_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::Association<std::vector<reco::FFTAnyJet<reco::PFJet> > >"), typeid(::edm::Association<std::vector<reco::FFTAnyJet<reco::PFJet> > >), sizeof(::edm::Association<std::vector<reco::FFTAnyJet<reco::PFJet> > >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("ClassVersion"), ::edm::Association<std::vector<reco::FFTAnyJet<reco::PFJet> > >::Class_Version())
  .AddProperty(Reflex::Literal("o_name"), "edm::Association<reco::FFTPFJetCollection>")
  .AddBase(type_5487, ::Reflex::BaseOffset< ::edm::Association<std::vector<reco::FFTAnyJet<reco::PFJet> > >, ::edm::ValueMap<int> >::Get(), ::Reflex::PRIVATE)
  .AddTypedef(type_65, Reflex::Literal("edm::Association<std::vector<reco::FFTAnyJet<reco::PFJet> > >::index"))
  .AddTypedef(type_5487, Reflex::Literal("edm::Association<std::vector<reco::FFTAnyJet<reco::PFJet> > >::base"))
  .AddTypedef(type_211, Reflex::Literal("edm::Association<std::vector<reco::FFTAnyJet<reco::PFJet> > >::offset"))
  .AddTypedef(type_5732, Reflex::Literal("edm::Association<std::vector<reco::FFTAnyJet<reco::PFJet> > >::refprod_type"))
  .AddTypedef(type_5814, Reflex::Literal("edm::Association<std::vector<reco::FFTAnyJet<reco::PFJet> > >::reference_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~Association"), destructor_30694, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::DESTRUCTOR )
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_48899), Reflex::Literal("Association"), constructor_30695, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("Association"), constructor_30696, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_5804, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getBasesTable"), method_x97, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__Association_std__vector_reco__FFTAnyJet_reco__PFJet_s_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__Association_std__vector_reco__FFTAnyJet_reco__PFJet_s_s__funcmem_bld);
}

//------Delayed data member builder for class Association<std::vector<reco::FFTAnyJet<reco::PFJet>, std::allocator<reco::FFTAnyJet<reco::PFJet> > > > -------------------
void __edm__Association_std__vector_reco__FFTAnyJet_reco__PFJet_s_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_5732, Reflex::Literal("ref_"), OffsetOf(__shadow__::__edm__Association_std__vector_reco__FFTAnyJet_reco__PFJet_s_s_, ref_), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class Association<std::vector<reco::FFTAnyJet<reco::PFJet>, std::allocator<reco::FFTAnyJet<reco::PFJet> > > > -------------------
void __edm__Association_std__vector_reco__FFTAnyJet_reco__PFJet_s_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_5814, type_2166), Reflex::Literal("get"), method_30697, 0, "rawIdx", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_5814, type_5905, type_2166), Reflex::Literal("get"), method_30698, 0, "id;idx", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_48900, type_48899), Reflex::Literal("operator+="), operator_30699, 0, "o", ::Reflex::PUBLIC | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_48833), Reflex::Literal("setRef"), method_30700, 0, "ref", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593, type_5905), Reflex::Literal("contains"), method_30701, 0, "id", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2166), Reflex::Literal("size"), method_30702, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("empty"), method_30703, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708), Reflex::Literal("clear"), method_30704, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_5732), Reflex::Literal("ref"), method_30705, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_48900), Reflex::Literal("swap"), method_30706, 0, "other", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_48900, type_48899), Reflex::Literal("operator="), operator_30707, 0, "rhs", ::Reflex::PUBLIC | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_44141), Reflex::Literal("ids"), method_30708, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_484), Reflex::Literal("Class_Version"), method_30709, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC);
}
//------Stub functions for class Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::PFJet>, std::allocator<reco::FFTAnyJet<reco::PFJet> > > > > -------------------------------
static void constructor_28966( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::PFJet> > > >();
  else ::new(mem) ::edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::PFJet> > > >();
}

static void constructor_28967( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::PFJet> > > >(*(::std::auto_ptr<edm::Association<std::vector<reco::FFTAnyJet<reco::PFJet> > > >*)arg[0]);
  else ::new(mem) ::edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::PFJet> > > >(*(::std::auto_ptr<edm::Association<std::vector<reco::FFTAnyJet<reco::PFJet> > > >*)arg[0]);
}

static void destructor_28968(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::PFJet> > > >*)o)->::edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::PFJet> > > >::~Wrapper)();
}
static  void method_28969( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::PFJet> > > >*)o)->product)());
  else   (((const ::edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::PFJet> > > >*)o)->product)();
}

static  void operator_28970( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::PFJet> > > >*)o)->operator->)());
  else   (((const ::edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::PFJet> > > >*)o)->operator->)();
}

static  void method_28971( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::PFJet> > > >*)o)->productTypeInfo)();
  else   (((::edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::PFJet> > > >*)o)->productTypeInfo)();
}

static  void method_28972( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::PFJet> > > >*)o)->typeInfo)();
  else   (((::edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::PFJet> > > >*)o)->typeInfo)();
}

static void constructor_28973( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::PFJet> > > >((::edm::Association<std::vector<reco::FFTAnyJet<reco::PFJet> > >*)arg[0]);
  else ::new(mem) ::edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::PFJet> > > >((::edm::Association<std::vector<reco::FFTAnyJet<reco::PFJet> > >*)arg[0]);
}

static  void method_28974( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((::edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::PFJet> > > >*)o)->getInterface)());
  else   (((::edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::PFJet> > > >*)o)->getInterface)();
}

static  void method_28975( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::PFJet> > > >*)o)->fillView)(*(const ::edm::ProductID*)arg[0],
    *(::std::vector<const void*>*)arg[1],
    *(::boost::shared_ptr<edm::reftobase::RefVectorHolderBase>*)arg[2]);
}

static  void method_28976( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::PFJet> > > >*)o)->setPtr)(*(const ::std::type_info*)arg[0],
    *(unsigned long*)arg[1],
    *(const void**)arg[2]);
}

static  void method_28977( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::PFJet> > > >*)o)->fillPtrVector)(*(const ::std::type_info*)arg[0],
    *(const ::std::vector<unsigned long>*)arg[1],
    *(::std::vector<const void*>*)arg[2]);
}

static  void method_28978( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::PFJet> > > >*)o)->dynamicTypeInfo)();
  else   (((const ::edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::PFJet> > > >*)o)->dynamicTypeInfo)();
}

static  void method_28979( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::PFJet> > > >*)o)->isPresent)());
  else   (((const ::edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::PFJet> > > >*)o)->isPresent)();
}

static  void method_28980( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::PFJet> > > >*)o)->dynamicTypeInfo_)();
  else   (((const ::edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::PFJet> > > >*)o)->dynamicTypeInfo_)();
}

static void method_newdel_5462( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::PFJet> > > > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::PFJet> > > > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::PFJet> > > > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::PFJet> > > > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::PFJet> > > > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::PFJet>, std::allocator<reco::FFTAnyJet<reco::PFJet> > > > > -------------------------------
void __edm__Wrapper_edm__Association_std__vector_reco__FFTAnyJet_reco__PFJet_s_s_s__db_datamem(Reflex::Class*);
void __edm__Wrapper_edm__Association_std__vector_reco__FFTAnyJet_reco__PFJet_s_s_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__Wrapper_edm__Association_std__vector_reco__FFTAnyJet_reco__PFJet_s_s_s__datamem_bld(&__edm__Wrapper_edm__Association_std__vector_reco__FFTAnyJet_reco__PFJet_s_s_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__Wrapper_edm__Association_std__vector_reco__FFTAnyJet_reco__PFJet_s_s_s__funcmem_bld(&__edm__Wrapper_edm__Association_std__vector_reco__FFTAnyJet_reco__PFJet_s_s_s__db_funcmem);
void __edm__Wrapper_edm__Association_std__vector_reco__FFTAnyJet_reco__PFJet_s_s_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::PFJet> > > >"), typeid(::edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::PFJet> > > >), sizeof(::edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::PFJet> > > >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("o_name"), "edm::Wrapper<edm::Association<reco::FFTPFJetCollection> >")
  .AddTypedef(type_5804, Reflex::Literal("edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::PFJet> > > >::value_type"))
  .AddTypedef(type_5804, Reflex::Literal("edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::PFJet> > > >::wrapped_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("Wrapper"), constructor_28966, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_2887), Reflex::Literal("Wrapper"), constructor_28967, 0, "ptr", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~Wrapper"), destructor_28968, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_48265), Reflex::Literal("Wrapper"), constructor_28973, 0, "ptr", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_5462, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__Wrapper_edm__Association_std__vector_reco__FFTAnyJet_reco__PFJet_s_s_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__Wrapper_edm__Association_std__vector_reco__FFTAnyJet_reco__PFJet_s_s_s__funcmem_bld);
}

//------Delayed data member builder for class Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::PFJet>, std::allocator<reco::FFTAnyJet<reco::PFJet> > > > > -------------------
void __edm__Wrapper_edm__Association_std__vector_reco__FFTAnyJet_reco__PFJet_s_s_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_1593, Reflex::Literal("present"), OffsetOf(__shadow__::__edm__Wrapper_edm__Association_std__vector_reco__FFTAnyJet_reco__PFJet_s_s_s_, present), ::Reflex::PRIVATE)
  .AddDataMember(type_5804, Reflex::Literal("obj"), OffsetOf(__shadow__::__edm__Wrapper_edm__Association_std__vector_reco__FFTAnyJet_reco__PFJet_s_s_s_, obj), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::PFJet>, std::allocator<reco::FFTAnyJet<reco::PFJet> > > > > -------------------
void __edm__Wrapper_edm__Association_std__vector_reco__FFTAnyJet_reco__PFJet_s_s_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_48264), Reflex::Literal("product"), method_28969, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_48264), Reflex::Literal("operator->"), operator_28970, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_25675), Reflex::Literal("productTypeInfo"), method_28971, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_25675), Reflex::Literal("typeInfo"), method_28972, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_48266), Reflex::Literal("getInterface"), method_28974, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_25503, type_25627, type_47348), Reflex::Literal("fillView"), method_28975, 0, "id;pointers;helpers", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_25675, type_53, type_13292), Reflex::Literal("setPtr"), method_28976, 0, "iToType;iIndex;oPtr", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_25675, type_32194, type_25627), Reflex::Literal("fillPtrVector"), method_28977, 0, "iToType;iIndices;oPtr", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_25675), Reflex::Literal("dynamicTypeInfo"), method_28978, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("isPresent"), method_28979, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_25675), Reflex::Literal("dynamicTypeInfo_"), method_28980, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST);
}
//------Stub functions for class Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> >, std::allocator<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > > > > -------------------------------
static void constructor_28987( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > > >();
  else ::new(mem) ::edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > > >();
}

static void constructor_28988( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > > >(*(::std::auto_ptr<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > > >*)arg[0]);
  else ::new(mem) ::edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > > >(*(::std::auto_ptr<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > > >*)arg[0]);
}

static void destructor_28989(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > > >*)o)->::edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > > >::~Wrapper)();
}
static  void method_28990( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > > >*)o)->product)());
  else   (((const ::edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > > >*)o)->product)();
}

static  void operator_28991( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > > >*)o)->operator->)());
  else   (((const ::edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > > >*)o)->operator->)();
}

static  void method_28992( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > > >*)o)->productTypeInfo)();
  else   (((::edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > > >*)o)->productTypeInfo)();
}

static  void method_28993( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > > >*)o)->typeInfo)();
  else   (((::edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > > >*)o)->typeInfo)();
}

static void constructor_28994( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > > >((::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > >*)arg[0]);
  else ::new(mem) ::edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > > >((::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > >*)arg[0]);
}

static  void method_28995( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((::edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > > >*)o)->getInterface)());
  else   (((::edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > > >*)o)->getInterface)();
}

static  void method_28996( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > > >*)o)->fillView)(*(const ::edm::ProductID*)arg[0],
    *(::std::vector<const void*>*)arg[1],
    *(::boost::shared_ptr<edm::reftobase::RefVectorHolderBase>*)arg[2]);
}

static  void method_28997( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > > >*)o)->setPtr)(*(const ::std::type_info*)arg[0],
    *(unsigned long*)arg[1],
    *(const void**)arg[2]);
}

static  void method_28998( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > > >*)o)->fillPtrVector)(*(const ::std::type_info*)arg[0],
    *(const ::std::vector<unsigned long>*)arg[1],
    *(::std::vector<const void*>*)arg[2]);
}

static  void method_28999( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > > >*)o)->dynamicTypeInfo)();
  else   (((const ::edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > > >*)o)->dynamicTypeInfo)();
}

static  void method_29000( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > > >*)o)->isPresent)());
  else   (((const ::edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > > >*)o)->isPresent)();
}

static  void method_29001( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > > >*)o)->dynamicTypeInfo_)();
  else   (((const ::edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > > >*)o)->dynamicTypeInfo_)();
}

static void method_newdel_5463( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > > > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > > > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > > > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > > > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > > > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> >, std::allocator<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > > > > -------------------------------
void __edm__Wrapper_std__vector_edm__FwdPtr_reco__FFTAnyJet_reco__PFJet_s_s_s__db_datamem(Reflex::Class*);
void __edm__Wrapper_std__vector_edm__FwdPtr_reco__FFTAnyJet_reco__PFJet_s_s_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__Wrapper_std__vector_edm__FwdPtr_reco__FFTAnyJet_reco__PFJet_s_s_s__datamem_bld(&__edm__Wrapper_std__vector_edm__FwdPtr_reco__FFTAnyJet_reco__PFJet_s_s_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__Wrapper_std__vector_edm__FwdPtr_reco__FFTAnyJet_reco__PFJet_s_s_s__funcmem_bld(&__edm__Wrapper_std__vector_edm__FwdPtr_reco__FFTAnyJet_reco__PFJet_s_s_s__db_funcmem);
void __edm__Wrapper_std__vector_edm__FwdPtr_reco__FFTAnyJet_reco__PFJet_s_s_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > > >"), typeid(::edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > > >), sizeof(::edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > > >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("o_name"), "edm::Wrapper<reco::FFTPFJetFwdPtrVector>")
  .AddTypedef(type_3127, Reflex::Literal("edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > > >::value_type"))
  .AddTypedef(type_3127, Reflex::Literal("edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > > >::wrapped_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("Wrapper"), constructor_28987, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_2888), Reflex::Literal("Wrapper"), constructor_28988, 0, "ptr", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~Wrapper"), destructor_28989, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_48270), Reflex::Literal("Wrapper"), constructor_28994, 0, "ptr", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_5463, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__Wrapper_std__vector_edm__FwdPtr_reco__FFTAnyJet_reco__PFJet_s_s_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__Wrapper_std__vector_edm__FwdPtr_reco__FFTAnyJet_reco__PFJet_s_s_s__funcmem_bld);
}

//------Delayed data member builder for class Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> >, std::allocator<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > > > > -------------------
void __edm__Wrapper_std__vector_edm__FwdPtr_reco__FFTAnyJet_reco__PFJet_s_s_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_1593, Reflex::Literal("present"), OffsetOf(__shadow__::__edm__Wrapper_std__vector_edm__FwdPtr_reco__FFTAnyJet_reco__PFJet_s_s_s_, present), ::Reflex::PRIVATE)
  .AddDataMember(type_3127, Reflex::Literal("obj"), OffsetOf(__shadow__::__edm__Wrapper_std__vector_edm__FwdPtr_reco__FFTAnyJet_reco__PFJet_s_s_s_, obj), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> >, std::allocator<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > > > > -------------------
void __edm__Wrapper_std__vector_edm__FwdPtr_reco__FFTAnyJet_reco__PFJet_s_s_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_48269), Reflex::Literal("product"), method_28990, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_48269), Reflex::Literal("operator->"), operator_28991, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_25675), Reflex::Literal("productTypeInfo"), method_28992, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_25675), Reflex::Literal("typeInfo"), method_28993, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_48271), Reflex::Literal("getInterface"), method_28995, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_25503, type_25627, type_47348), Reflex::Literal("fillView"), method_28996, 0, "id;pointers;helpers", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_25675, type_53, type_13292), Reflex::Literal("setPtr"), method_28997, 0, "iToType;iIndex;oPtr", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_25675, type_32194, type_25627), Reflex::Literal("fillPtrVector"), method_28998, 0, "iToType;iIndices;oPtr", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_25675), Reflex::Literal("dynamicTypeInfo"), method_28999, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("isPresent"), method_29000, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_25675), Reflex::Literal("dynamicTypeInfo_"), method_29001, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST);
}
//------Stub functions for class Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet>, std::allocator<reco::FFTAnyJet<reco::PFJet> > >, reco::FFTAnyJet<reco::PFJet>, edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet>, std::allocator<reco::FFTAnyJet<reco::PFJet> > >, reco::FFTAnyJet<reco::PFJet> > >, std::allocator<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet>, std::allocator<reco::FFTAnyJet<reco::PFJet> > >, reco::FFTAnyJet<reco::PFJet>, edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet>, std::allocator<reco::FFTAnyJet<reco::PFJet> > >, reco::FFTAnyJet<reco::PFJet> > > > > > -------------------------------
static void constructor_29008( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > > >();
  else ::new(mem) ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > > >();
}

static void constructor_29009( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > > >(*(::std::auto_ptr<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > > >*)arg[0]);
  else ::new(mem) ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > > >(*(::std::auto_ptr<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > > >*)arg[0]);
}

static void destructor_29010(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > > >*)o)->::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > > >::~Wrapper)();
}
static  void method_29011( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > > >*)o)->product)());
  else   (((const ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > > >*)o)->product)();
}

static  void operator_29012( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > > >*)o)->operator->)());
  else   (((const ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > > >*)o)->operator->)();
}

static  void method_29013( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > > >*)o)->productTypeInfo)();
  else   (((::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > > >*)o)->productTypeInfo)();
}

static  void method_29014( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > > >*)o)->typeInfo)();
  else   (((::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > > >*)o)->typeInfo)();
}

static void constructor_29015( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > > >((::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)arg[0]);
  else ::new(mem) ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > > >((::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)arg[0]);
}

static  void method_29016( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > > >*)o)->getInterface)());
  else   (((::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > > >*)o)->getInterface)();
}

static  void method_29017( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > > >*)o)->fillView)(*(const ::edm::ProductID*)arg[0],
    *(::std::vector<const void*>*)arg[1],
    *(::boost::shared_ptr<edm::reftobase::RefVectorHolderBase>*)arg[2]);
}

static  void method_29018( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > > >*)o)->setPtr)(*(const ::std::type_info*)arg[0],
    *(unsigned long*)arg[1],
    *(const void**)arg[2]);
}

static  void method_29019( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > > >*)o)->fillPtrVector)(*(const ::std::type_info*)arg[0],
    *(const ::std::vector<unsigned long>*)arg[1],
    *(::std::vector<const void*>*)arg[2]);
}

static  void method_29020( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > > >*)o)->dynamicTypeInfo)();
  else   (((const ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > > >*)o)->dynamicTypeInfo)();
}

static  void method_29021( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > > >*)o)->isPresent)());
  else   (((const ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > > >*)o)->isPresent)();
}

static  void method_29022( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > > >*)o)->dynamicTypeInfo_)();
  else   (((const ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > > >*)o)->dynamicTypeInfo_)();
}

static void method_newdel_5464( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > > > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > > > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > > > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > > > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > > > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet>, std::allocator<reco::FFTAnyJet<reco::PFJet> > >, reco::FFTAnyJet<reco::PFJet>, edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet>, std::allocator<reco::FFTAnyJet<reco::PFJet> > >, reco::FFTAnyJet<reco::PFJet> > >, std::allocator<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet>, std::allocator<reco::FFTAnyJet<reco::PFJet> > >, reco::FFTAnyJet<reco::PFJet>, edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet>, std::allocator<reco::FFTAnyJet<reco::PFJet> > >, reco::FFTAnyJet<reco::PFJet> > > > > > -------------------------------
void __edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s_s_s__db_datamem(Reflex::Class*);
void __edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s_s_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s_s_s__datamem_bld(&__edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s_s_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s_s_s__funcmem_bld(&__edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s_s_s__db_funcmem);
void __edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s_s_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > > >"), typeid(::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > > >), sizeof(::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > > >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("o_name"), "edm::Wrapper<reco::FFTPFJetFwdRefVector>")
  .AddTypedef(type_3128, Reflex::Literal("edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > > >::value_type"))
  .AddTypedef(type_3128, Reflex::Literal("edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > > >::wrapped_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("Wrapper"), constructor_29008, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_2889), Reflex::Literal("Wrapper"), constructor_29009, 0, "ptr", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~Wrapper"), destructor_29010, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_48275), Reflex::Literal("Wrapper"), constructor_29015, 0, "ptr", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_5464, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s_s_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s_s_s__funcmem_bld);
}

//------Delayed data member builder for class Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet>, std::allocator<reco::FFTAnyJet<reco::PFJet> > >, reco::FFTAnyJet<reco::PFJet>, edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet>, std::allocator<reco::FFTAnyJet<reco::PFJet> > >, reco::FFTAnyJet<reco::PFJet> > >, std::allocator<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet>, std::allocator<reco::FFTAnyJet<reco::PFJet> > >, reco::FFTAnyJet<reco::PFJet>, edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet>, std::allocator<reco::FFTAnyJet<reco::PFJet> > >, reco::FFTAnyJet<reco::PFJet> > > > > > -------------------
void __edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s_s_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_1593, Reflex::Literal("present"), OffsetOf(__shadow__::__edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s_s_s_, present), ::Reflex::PRIVATE)
  .AddDataMember(type_3128, Reflex::Literal("obj"), OffsetOf(__shadow__::__edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s_s_s_, obj), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet>, std::allocator<reco::FFTAnyJet<reco::PFJet> > >, reco::FFTAnyJet<reco::PFJet>, edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet>, std::allocator<reco::FFTAnyJet<reco::PFJet> > >, reco::FFTAnyJet<reco::PFJet> > >, std::allocator<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet>, std::allocator<reco::FFTAnyJet<reco::PFJet> > >, reco::FFTAnyJet<reco::PFJet>, edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet>, std::allocator<reco::FFTAnyJet<reco::PFJet> > >, reco::FFTAnyJet<reco::PFJet> > > > > > -------------------
void __edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s_s_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_48274), Reflex::Literal("product"), method_29011, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_48274), Reflex::Literal("operator->"), operator_29012, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_25675), Reflex::Literal("productTypeInfo"), method_29013, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_25675), Reflex::Literal("typeInfo"), method_29014, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_48276), Reflex::Literal("getInterface"), method_29016, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_25503, type_25627, type_47348), Reflex::Literal("fillView"), method_29017, 0, "id;pointers;helpers", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_25675, type_53, type_13292), Reflex::Literal("setPtr"), method_29018, 0, "iToType;iIndex;oPtr", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_25675, type_32194, type_25627), Reflex::Literal("fillPtrVector"), method_29019, 0, "iToType;iIndices;oPtr", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_25675), Reflex::Literal("dynamicTypeInfo"), method_29020, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("isPresent"), method_29021, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_25675), Reflex::Literal("dynamicTypeInfo_"), method_29022, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST);
}
//------Stub functions for class Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::PFJet>, std::allocator<reco::FFTAnyJet<reco::PFJet> > >, reco::FFTAnyJet<reco::PFJet>, edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet>, std::allocator<reco::FFTAnyJet<reco::PFJet> > >, reco::FFTAnyJet<reco::PFJet> > > > -------------------------------
static void constructor_29029( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >();
  else ::new(mem) ::edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >();
}

static void constructor_29030( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >(*(::std::auto_ptr<edm::RefVector<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)arg[0]);
  else ::new(mem) ::edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >(*(::std::auto_ptr<edm::RefVector<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)arg[0]);
}

static void destructor_29031(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->::edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >::~Wrapper)();
}
static  void method_29032( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->product)());
  else   (((const ::edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->product)();
}

static  void operator_29033( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->operator->)());
  else   (((const ::edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->operator->)();
}

static  void method_29034( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->productTypeInfo)();
  else   (((::edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->productTypeInfo)();
}

static  void method_29035( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->typeInfo)();
  else   (((::edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->typeInfo)();
}

static void constructor_29036( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >((::edm::RefVector<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)arg[0]);
  else ::new(mem) ::edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >((::edm::RefVector<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)arg[0]);
}

static  void method_29037( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((::edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->getInterface)());
  else   (((::edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->getInterface)();
}

static  void method_29038( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->fillView)(*(const ::edm::ProductID*)arg[0],
    *(::std::vector<const void*>*)arg[1],
    *(::boost::shared_ptr<edm::reftobase::RefVectorHolderBase>*)arg[2]);
}

static  void method_29039( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->setPtr)(*(const ::std::type_info*)arg[0],
    *(unsigned long*)arg[1],
    *(const void**)arg[2]);
}

static  void method_29040( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->fillPtrVector)(*(const ::std::type_info*)arg[0],
    *(const ::std::vector<unsigned long>*)arg[1],
    *(::std::vector<const void*>*)arg[2]);
}

static  void method_29041( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->dynamicTypeInfo)();
  else   (((const ::edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->dynamicTypeInfo)();
}

static  void method_29042( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->isPresent)());
  else   (((const ::edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->isPresent)();
}

static  void method_29043( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->dynamicTypeInfo_)();
  else   (((const ::edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->dynamicTypeInfo_)();
}

static void method_newdel_5465( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::PFJet>, std::allocator<reco::FFTAnyJet<reco::PFJet> > >, reco::FFTAnyJet<reco::PFJet>, edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet>, std::allocator<reco::FFTAnyJet<reco::PFJet> > >, reco::FFTAnyJet<reco::PFJet> > > > -------------------------------
void __edm__Wrapper_edm__RefVector_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s_s__db_datamem(Reflex::Class*);
void __edm__Wrapper_edm__RefVector_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__Wrapper_edm__RefVector_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s_s__datamem_bld(&__edm__Wrapper_edm__RefVector_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__Wrapper_edm__RefVector_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s_s__funcmem_bld(&__edm__Wrapper_edm__RefVector_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s_s__db_funcmem);
void __edm__Wrapper_edm__RefVector_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >"), typeid(::edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >), sizeof(::edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("o_name"), "edm::Wrapper<reco::FFTPFJetRefVector>")
  .AddTypedef(type_5343, Reflex::Literal("edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >::value_type"))
  .AddTypedef(type_5343, Reflex::Literal("edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >::wrapped_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("Wrapper"), constructor_29029, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_2890), Reflex::Literal("Wrapper"), constructor_29030, 0, "ptr", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~Wrapper"), destructor_29031, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_48280), Reflex::Literal("Wrapper"), constructor_29036, 0, "ptr", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_5465, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__Wrapper_edm__RefVector_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__Wrapper_edm__RefVector_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s_s__funcmem_bld);
}

//------Delayed data member builder for class Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::PFJet>, std::allocator<reco::FFTAnyJet<reco::PFJet> > >, reco::FFTAnyJet<reco::PFJet>, edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet>, std::allocator<reco::FFTAnyJet<reco::PFJet> > >, reco::FFTAnyJet<reco::PFJet> > > > -------------------
void __edm__Wrapper_edm__RefVector_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_1593, Reflex::Literal("present"), OffsetOf(__shadow__::__edm__Wrapper_edm__RefVector_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s_s_, present), ::Reflex::PRIVATE)
  .AddDataMember(type_5343, Reflex::Literal("obj"), OffsetOf(__shadow__::__edm__Wrapper_edm__RefVector_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s_s_, obj), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::PFJet>, std::allocator<reco::FFTAnyJet<reco::PFJet> > >, reco::FFTAnyJet<reco::PFJet>, edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet>, std::allocator<reco::FFTAnyJet<reco::PFJet> > >, reco::FFTAnyJet<reco::PFJet> > > > -------------------
void __edm__Wrapper_edm__RefVector_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_48279), Reflex::Literal("product"), method_29032, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_48279), Reflex::Literal("operator->"), operator_29033, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_25675), Reflex::Literal("productTypeInfo"), method_29034, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_25675), Reflex::Literal("typeInfo"), method_29035, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_48281), Reflex::Literal("getInterface"), method_29037, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_25503, type_25627, type_47348), Reflex::Literal("fillView"), method_29038, 0, "id;pointers;helpers", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_25675, type_53, type_13292), Reflex::Literal("setPtr"), method_29039, 0, "iToType;iIndex;oPtr", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_25675, type_32194, type_25627), Reflex::Literal("fillPtrVector"), method_29040, 0, "iToType;iIndices;oPtr", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_25675), Reflex::Literal("dynamicTypeInfo"), method_29041, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("isPresent"), method_29042, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_25675), Reflex::Literal("dynamicTypeInfo_"), method_29043, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST);
}
//------Stub functions for class Wrapper<std::vector<reco::FFTAnyJet<reco::PFJet>, std::allocator<reco::FFTAnyJet<reco::PFJet> > > > -------------------------------
static void constructor_29050( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<std::vector<reco::FFTAnyJet<reco::PFJet> > >();
  else ::new(mem) ::edm::Wrapper<std::vector<reco::FFTAnyJet<reco::PFJet> > >();
}

static void constructor_29051( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<std::vector<reco::FFTAnyJet<reco::PFJet> > >(*(::std::auto_ptr<std::vector<reco::FFTAnyJet<reco::PFJet> > >*)arg[0]);
  else ::new(mem) ::edm::Wrapper<std::vector<reco::FFTAnyJet<reco::PFJet> > >(*(::std::auto_ptr<std::vector<reco::FFTAnyJet<reco::PFJet> > >*)arg[0]);
}

static void destructor_29052(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::Wrapper<std::vector<reco::FFTAnyJet<reco::PFJet> > >*)o)->::edm::Wrapper<std::vector<reco::FFTAnyJet<reco::PFJet> > >::~Wrapper)();
}
static  void method_29053( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Wrapper<std::vector<reco::FFTAnyJet<reco::PFJet> > >*)o)->product)());
  else   (((const ::edm::Wrapper<std::vector<reco::FFTAnyJet<reco::PFJet> > >*)o)->product)();
}

static  void operator_29054( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Wrapper<std::vector<reco::FFTAnyJet<reco::PFJet> > >*)o)->operator->)());
  else   (((const ::edm::Wrapper<std::vector<reco::FFTAnyJet<reco::PFJet> > >*)o)->operator->)();
}

static  void method_29055( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::Wrapper<std::vector<reco::FFTAnyJet<reco::PFJet> > >*)o)->productTypeInfo)();
  else   (((::edm::Wrapper<std::vector<reco::FFTAnyJet<reco::PFJet> > >*)o)->productTypeInfo)();
}

static  void method_29056( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::Wrapper<std::vector<reco::FFTAnyJet<reco::PFJet> > >*)o)->typeInfo)();
  else   (((::edm::Wrapper<std::vector<reco::FFTAnyJet<reco::PFJet> > >*)o)->typeInfo)();
}

static void constructor_29057( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<std::vector<reco::FFTAnyJet<reco::PFJet> > >((::std::vector<reco::FFTAnyJet<reco::PFJet> >*)arg[0]);
  else ::new(mem) ::edm::Wrapper<std::vector<reco::FFTAnyJet<reco::PFJet> > >((::std::vector<reco::FFTAnyJet<reco::PFJet> >*)arg[0]);
}

static  void method_29058( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((::edm::Wrapper<std::vector<reco::FFTAnyJet<reco::PFJet> > >*)o)->getInterface)());
  else   (((::edm::Wrapper<std::vector<reco::FFTAnyJet<reco::PFJet> > >*)o)->getInterface)();
}

static  void method_29059( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<std::vector<reco::FFTAnyJet<reco::PFJet> > >*)o)->fillView)(*(const ::edm::ProductID*)arg[0],
    *(::std::vector<const void*>*)arg[1],
    *(::boost::shared_ptr<edm::reftobase::RefVectorHolderBase>*)arg[2]);
}

static  void method_29060( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<std::vector<reco::FFTAnyJet<reco::PFJet> > >*)o)->setPtr)(*(const ::std::type_info*)arg[0],
    *(unsigned long*)arg[1],
    *(const void**)arg[2]);
}

static  void method_29061( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<std::vector<reco::FFTAnyJet<reco::PFJet> > >*)o)->fillPtrVector)(*(const ::std::type_info*)arg[0],
    *(const ::std::vector<unsigned long>*)arg[1],
    *(::std::vector<const void*>*)arg[2]);
}

static  void method_29062( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Wrapper<std::vector<reco::FFTAnyJet<reco::PFJet> > >*)o)->dynamicTypeInfo)();
  else   (((const ::edm::Wrapper<std::vector<reco::FFTAnyJet<reco::PFJet> > >*)o)->dynamicTypeInfo)();
}

static  void method_29063( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Wrapper<std::vector<reco::FFTAnyJet<reco::PFJet> > >*)o)->isPresent)());
  else   (((const ::edm::Wrapper<std::vector<reco::FFTAnyJet<reco::PFJet> > >*)o)->isPresent)();
}

static  void method_29064( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Wrapper<std::vector<reco::FFTAnyJet<reco::PFJet> > >*)o)->dynamicTypeInfo_)();
  else   (((const ::edm::Wrapper<std::vector<reco::FFTAnyJet<reco::PFJet> > >*)o)->dynamicTypeInfo_)();
}

static void method_newdel_5466( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<reco::FFTAnyJet<reco::PFJet> > > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<reco::FFTAnyJet<reco::PFJet> > > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<reco::FFTAnyJet<reco::PFJet> > > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<reco::FFTAnyJet<reco::PFJet> > > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<reco::FFTAnyJet<reco::PFJet> > > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class Wrapper<std::vector<reco::FFTAnyJet<reco::PFJet>, std::allocator<reco::FFTAnyJet<reco::PFJet> > > > -------------------------------
void __edm__Wrapper_std__vector_reco__FFTAnyJet_reco__PFJet_s_s__db_datamem(Reflex::Class*);
void __edm__Wrapper_std__vector_reco__FFTAnyJet_reco__PFJet_s_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__Wrapper_std__vector_reco__FFTAnyJet_reco__PFJet_s_s__datamem_bld(&__edm__Wrapper_std__vector_reco__FFTAnyJet_reco__PFJet_s_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__Wrapper_std__vector_reco__FFTAnyJet_reco__PFJet_s_s__funcmem_bld(&__edm__Wrapper_std__vector_reco__FFTAnyJet_reco__PFJet_s_s__db_funcmem);
void __edm__Wrapper_std__vector_reco__FFTAnyJet_reco__PFJet_s_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::Wrapper<std::vector<reco::FFTAnyJet<reco::PFJet> > >"), typeid(::edm::Wrapper<std::vector<reco::FFTAnyJet<reco::PFJet> > >), sizeof(::edm::Wrapper<std::vector<reco::FFTAnyJet<reco::PFJet> > >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("o_name"), "edm::Wrapper<reco::FFTPFJetCollection>")
  .AddTypedef(type_3129, Reflex::Literal("edm::Wrapper<std::vector<reco::FFTAnyJet<reco::PFJet> > >::value_type"))
  .AddTypedef(type_3129, Reflex::Literal("edm::Wrapper<std::vector<reco::FFTAnyJet<reco::PFJet> > >::wrapped_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("Wrapper"), constructor_29050, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_2891), Reflex::Literal("Wrapper"), constructor_29051, 0, "ptr", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~Wrapper"), destructor_29052, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_48284), Reflex::Literal("Wrapper"), constructor_29057, 0, "ptr", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_5466, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__Wrapper_std__vector_reco__FFTAnyJet_reco__PFJet_s_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__Wrapper_std__vector_reco__FFTAnyJet_reco__PFJet_s_s__funcmem_bld);
}

//------Delayed data member builder for class Wrapper<std::vector<reco::FFTAnyJet<reco::PFJet>, std::allocator<reco::FFTAnyJet<reco::PFJet> > > > -------------------
void __edm__Wrapper_std__vector_reco__FFTAnyJet_reco__PFJet_s_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_1593, Reflex::Literal("present"), OffsetOf(__shadow__::__edm__Wrapper_std__vector_reco__FFTAnyJet_reco__PFJet_s_s_, present), ::Reflex::PRIVATE)
  .AddDataMember(type_3129, Reflex::Literal("obj"), OffsetOf(__shadow__::__edm__Wrapper_std__vector_reco__FFTAnyJet_reco__PFJet_s_s_, obj), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class Wrapper<std::vector<reco::FFTAnyJet<reco::PFJet>, std::allocator<reco::FFTAnyJet<reco::PFJet> > > > -------------------
void __edm__Wrapper_std__vector_reco__FFTAnyJet_reco__PFJet_s_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_48121), Reflex::Literal("product"), method_29053, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_48121), Reflex::Literal("operator->"), operator_29054, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_25675), Reflex::Literal("productTypeInfo"), method_29055, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_25675), Reflex::Literal("typeInfo"), method_29056, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_48285), Reflex::Literal("getInterface"), method_29058, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_25503, type_25627, type_47348), Reflex::Literal("fillView"), method_29059, 0, "id;pointers;helpers", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_25675, type_53, type_13292), Reflex::Literal("setPtr"), method_29060, 0, "iToType;iIndex;oPtr", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_25675, type_32194, type_25627), Reflex::Literal("fillPtrVector"), method_29061, 0, "iToType;iIndices;oPtr", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_25675), Reflex::Literal("dynamicTypeInfo"), method_29062, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("isPresent"), method_29063, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_25675), Reflex::Literal("dynamicTypeInfo_"), method_29064, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST);
}
//------Stub functions for class Association<std::vector<reco::FFTAnyJet<reco::BasicJet>, std::allocator<reco::FFTAnyJet<reco::BasicJet> > > > -------------------------------
static void destructor_30720(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::Association<std::vector<reco::FFTAnyJet<reco::BasicJet> > >*)o)->::edm::Association<std::vector<reco::FFTAnyJet<reco::BasicJet> > >::~Association)();
}
static void constructor_30721( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Association<std::vector<reco::FFTAnyJet<reco::BasicJet> > >(*(const ::edm::Association<std::vector<reco::FFTAnyJet<reco::BasicJet> > >*)arg[0]);
  else ::new(mem) ::edm::Association<std::vector<reco::FFTAnyJet<reco::BasicJet> > >(*(const ::edm::Association<std::vector<reco::FFTAnyJet<reco::BasicJet> > >*)arg[0]);
}

static void constructor_30722( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Association<std::vector<reco::FFTAnyJet<reco::BasicJet> > >();
  else ::new(mem) ::edm::Association<std::vector<reco::FFTAnyJet<reco::BasicJet> > >();
}

static  void method_30723( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >)((((const ::edm::Association<std::vector<reco::FFTAnyJet<reco::BasicJet> > >*)o)->get)(*(::size_t*)arg[0]));
  else   (((const ::edm::Association<std::vector<reco::FFTAnyJet<reco::BasicJet> > >*)o)->get)(*(::size_t*)arg[0]);
}

static  void method_30724( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >)((((const ::edm::Association<std::vector<reco::FFTAnyJet<reco::BasicJet> > >*)o)->get)(*(::edm::ProductID*)arg[0],
    *(::size_t*)arg[1]));
  else   (((const ::edm::Association<std::vector<reco::FFTAnyJet<reco::BasicJet> > >*)o)->get)(*(::edm::ProductID*)arg[0],
    *(::size_t*)arg[1]);
}

static  void operator_30725( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::Association<std::vector<reco::FFTAnyJet<reco::BasicJet> > >*)o)->operator+=)(*(const ::edm::Association<std::vector<reco::FFTAnyJet<reco::BasicJet> > >*)arg[0]);
  else   (((::edm::Association<std::vector<reco::FFTAnyJet<reco::BasicJet> > >*)o)->operator+=)(*(const ::edm::Association<std::vector<reco::FFTAnyJet<reco::BasicJet> > >*)arg[0]);
}

static  void method_30726( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::edm::Association<std::vector<reco::FFTAnyJet<reco::BasicJet> > >*)o)->setRef)(*(const ::edm::RefProd<std::vector<reco::FFTAnyJet<reco::BasicJet> > >*)arg[0]);
}

static  void method_30727( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Association<std::vector<reco::FFTAnyJet<reco::BasicJet> > >*)o)->contains)(*(::edm::ProductID*)arg[0]));
  else   (((const ::edm::Association<std::vector<reco::FFTAnyJet<reco::BasicJet> > >*)o)->contains)(*(::edm::ProductID*)arg[0]);
}

static  void method_30728( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (size_t)((((const ::edm::Association<std::vector<reco::FFTAnyJet<reco::BasicJet> > >*)o)->size)());
  else   (((const ::edm::Association<std::vector<reco::FFTAnyJet<reco::BasicJet> > >*)o)->size)();
}

static  void method_30729( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Association<std::vector<reco::FFTAnyJet<reco::BasicJet> > >*)o)->empty)());
  else   (((const ::edm::Association<std::vector<reco::FFTAnyJet<reco::BasicJet> > >*)o)->empty)();
}

static  void method_30730( void*, void* o, const std::vector<void*>&, void*)
{
  (((::edm::Association<std::vector<reco::FFTAnyJet<reco::BasicJet> > >*)o)->clear)();
}

static  void method_30731( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::RefProd<std::vector<reco::FFTAnyJet<reco::BasicJet> > >)((((const ::edm::Association<std::vector<reco::FFTAnyJet<reco::BasicJet> > >*)o)->ref)());
  else   (((const ::edm::Association<std::vector<reco::FFTAnyJet<reco::BasicJet> > >*)o)->ref)();
}

static  void method_30732( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::edm::Association<std::vector<reco::FFTAnyJet<reco::BasicJet> > >*)o)->swap)(*(::edm::Association<std::vector<reco::FFTAnyJet<reco::BasicJet> > >*)arg[0]);
}

static  void operator_30733( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::Association<std::vector<reco::FFTAnyJet<reco::BasicJet> > >*)o)->operator=)(*(const ::edm::Association<std::vector<reco::FFTAnyJet<reco::BasicJet> > >*)arg[0]);
  else   (((::edm::Association<std::vector<reco::FFTAnyJet<reco::BasicJet> > >*)o)->operator=)(*(const ::edm::Association<std::vector<reco::FFTAnyJet<reco::BasicJet> > >*)arg[0]);
}

static  void method_30734( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Association<std::vector<reco::FFTAnyJet<reco::BasicJet> > >*)o)->ids)();
  else   (((const ::edm::Association<std::vector<reco::FFTAnyJet<reco::BasicJet> > >*)o)->ids)();
}

static  void method_30735( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (short)((((::edm::Association<std::vector<reco::FFTAnyJet<reco::BasicJet> > >*)o)->Class_Version)());
  else   (((::edm::Association<std::vector<reco::FFTAnyJet<reco::BasicJet> > >*)o)->Class_Version)();
}

static void method_newdel_5805( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::Association<std::vector<reco::FFTAnyJet<reco::BasicJet> > > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::Association<std::vector<reco::FFTAnyJet<reco::BasicJet> > > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::Association<std::vector<reco::FFTAnyJet<reco::BasicJet> > > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::Association<std::vector<reco::FFTAnyJet<reco::BasicJet> > > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::Association<std::vector<reco::FFTAnyJet<reco::BasicJet> > > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

static void method_x104( void* retaddr, void*, const std::vector<void*>&, void*)
{
  typedef std::vector<std::pair< ::Reflex::Base, int> > Bases_t;
  static Bases_t s_bases;
  if ( !s_bases.size() ) {
    s_bases.push_back(std::make_pair(::Reflex::Base( ::Reflex::TypeBuilder(Reflex::Literal("edm::ValueMap<int>")), ::Reflex::BaseOffset< ::edm::Association<std::vector<reco::FFTAnyJet<reco::BasicJet> > >,::edm::ValueMap<int> >::Get(),::Reflex::PRIVATE), 0));
  }
  if (retaddr) *(Bases_t**)retaddr = &s_bases;
}

//------Dictionary for class Association<std::vector<reco::FFTAnyJet<reco::BasicJet>, std::allocator<reco::FFTAnyJet<reco::BasicJet> > > > -------------------------------
void __edm__Association_std__vector_reco__FFTAnyJet_reco__BasicJet_s_s__db_datamem(Reflex::Class*);
void __edm__Association_std__vector_reco__FFTAnyJet_reco__BasicJet_s_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__Association_std__vector_reco__FFTAnyJet_reco__BasicJet_s_s__datamem_bld(&__edm__Association_std__vector_reco__FFTAnyJet_reco__BasicJet_s_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__Association_std__vector_reco__FFTAnyJet_reco__BasicJet_s_s__funcmem_bld(&__edm__Association_std__vector_reco__FFTAnyJet_reco__BasicJet_s_s__db_funcmem);
void __edm__Association_std__vector_reco__FFTAnyJet_reco__BasicJet_s_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::Association<std::vector<reco::FFTAnyJet<reco::BasicJet> > >"), typeid(::edm::Association<std::vector<reco::FFTAnyJet<reco::BasicJet> > >), sizeof(::edm::Association<std::vector<reco::FFTAnyJet<reco::BasicJet> > >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("ClassVersion"), ::edm::Association<std::vector<reco::FFTAnyJet<reco::BasicJet> > >::Class_Version())
  .AddProperty(Reflex::Literal("o_name"), "edm::Association<reco::FFTBasicJetCollection>")
  .AddBase(type_5487, ::Reflex::BaseOffset< ::edm::Association<std::vector<reco::FFTAnyJet<reco::BasicJet> > >, ::edm::ValueMap<int> >::Get(), ::Reflex::PRIVATE)
  .AddTypedef(type_65, Reflex::Literal("edm::Association<std::vector<reco::FFTAnyJet<reco::BasicJet> > >::index"))
  .AddTypedef(type_5487, Reflex::Literal("edm::Association<std::vector<reco::FFTAnyJet<reco::BasicJet> > >::base"))
  .AddTypedef(type_211, Reflex::Literal("edm::Association<std::vector<reco::FFTAnyJet<reco::BasicJet> > >::offset"))
  .AddTypedef(type_5733, Reflex::Literal("edm::Association<std::vector<reco::FFTAnyJet<reco::BasicJet> > >::refprod_type"))
  .AddTypedef(type_5815, Reflex::Literal("edm::Association<std::vector<reco::FFTAnyJet<reco::BasicJet> > >::reference_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~Association"), destructor_30720, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::DESTRUCTOR )
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_48901), Reflex::Literal("Association"), constructor_30721, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("Association"), constructor_30722, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_5805, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getBasesTable"), method_x104, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__Association_std__vector_reco__FFTAnyJet_reco__BasicJet_s_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__Association_std__vector_reco__FFTAnyJet_reco__BasicJet_s_s__funcmem_bld);
}

//------Delayed data member builder for class Association<std::vector<reco::FFTAnyJet<reco::BasicJet>, std::allocator<reco::FFTAnyJet<reco::BasicJet> > > > -------------------
void __edm__Association_std__vector_reco__FFTAnyJet_reco__BasicJet_s_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_5733, Reflex::Literal("ref_"), OffsetOf(__shadow__::__edm__Association_std__vector_reco__FFTAnyJet_reco__BasicJet_s_s_, ref_), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class Association<std::vector<reco::FFTAnyJet<reco::BasicJet>, std::allocator<reco::FFTAnyJet<reco::BasicJet> > > > -------------------
void __edm__Association_std__vector_reco__FFTAnyJet_reco__BasicJet_s_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_5815, type_2166), Reflex::Literal("get"), method_30723, 0, "rawIdx", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_5815, type_5905, type_2166), Reflex::Literal("get"), method_30724, 0, "id;idx", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_48902, type_48901), Reflex::Literal("operator+="), operator_30725, 0, "o", ::Reflex::PUBLIC | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_48838), Reflex::Literal("setRef"), method_30726, 0, "ref", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593, type_5905), Reflex::Literal("contains"), method_30727, 0, "id", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2166), Reflex::Literal("size"), method_30728, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("empty"), method_30729, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708), Reflex::Literal("clear"), method_30730, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_5733), Reflex::Literal("ref"), method_30731, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_48902), Reflex::Literal("swap"), method_30732, 0, "other", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_48902, type_48901), Reflex::Literal("operator="), operator_30733, 0, "rhs", ::Reflex::PUBLIC | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_44141), Reflex::Literal("ids"), method_30734, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_484), Reflex::Literal("Class_Version"), method_30735, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC);
}
//------Stub functions for class Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::BasicJet>, std::allocator<reco::FFTAnyJet<reco::BasicJet> > > > > -------------------------------
static void constructor_29071( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::BasicJet> > > >();
  else ::new(mem) ::edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::BasicJet> > > >();
}

static void constructor_29072( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::BasicJet> > > >(*(::std::auto_ptr<edm::Association<std::vector<reco::FFTAnyJet<reco::BasicJet> > > >*)arg[0]);
  else ::new(mem) ::edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::BasicJet> > > >(*(::std::auto_ptr<edm::Association<std::vector<reco::FFTAnyJet<reco::BasicJet> > > >*)arg[0]);
}

static void destructor_29073(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::BasicJet> > > >*)o)->::edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::BasicJet> > > >::~Wrapper)();
}
static  void method_29074( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::BasicJet> > > >*)o)->product)());
  else   (((const ::edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::BasicJet> > > >*)o)->product)();
}

static  void operator_29075( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::BasicJet> > > >*)o)->operator->)());
  else   (((const ::edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::BasicJet> > > >*)o)->operator->)();
}

static  void method_29076( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::BasicJet> > > >*)o)->productTypeInfo)();
  else   (((::edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::BasicJet> > > >*)o)->productTypeInfo)();
}

static  void method_29077( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::BasicJet> > > >*)o)->typeInfo)();
  else   (((::edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::BasicJet> > > >*)o)->typeInfo)();
}

static void constructor_29078( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::BasicJet> > > >((::edm::Association<std::vector<reco::FFTAnyJet<reco::BasicJet> > >*)arg[0]);
  else ::new(mem) ::edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::BasicJet> > > >((::edm::Association<std::vector<reco::FFTAnyJet<reco::BasicJet> > >*)arg[0]);
}

static  void method_29079( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((::edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::BasicJet> > > >*)o)->getInterface)());
  else   (((::edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::BasicJet> > > >*)o)->getInterface)();
}

static  void method_29080( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::BasicJet> > > >*)o)->fillView)(*(const ::edm::ProductID*)arg[0],
    *(::std::vector<const void*>*)arg[1],
    *(::boost::shared_ptr<edm::reftobase::RefVectorHolderBase>*)arg[2]);
}

static  void method_29081( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::BasicJet> > > >*)o)->setPtr)(*(const ::std::type_info*)arg[0],
    *(unsigned long*)arg[1],
    *(const void**)arg[2]);
}

static  void method_29082( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::BasicJet> > > >*)o)->fillPtrVector)(*(const ::std::type_info*)arg[0],
    *(const ::std::vector<unsigned long>*)arg[1],
    *(::std::vector<const void*>*)arg[2]);
}

static  void method_29083( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::BasicJet> > > >*)o)->dynamicTypeInfo)();
  else   (((const ::edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::BasicJet> > > >*)o)->dynamicTypeInfo)();
}

static  void method_29084( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::BasicJet> > > >*)o)->isPresent)());
  else   (((const ::edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::BasicJet> > > >*)o)->isPresent)();
}

static  void method_29085( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::BasicJet> > > >*)o)->dynamicTypeInfo_)();
  else   (((const ::edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::BasicJet> > > >*)o)->dynamicTypeInfo_)();
}

static void method_newdel_5467( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::BasicJet> > > > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::BasicJet> > > > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::BasicJet> > > > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::BasicJet> > > > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::BasicJet> > > > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::BasicJet>, std::allocator<reco::FFTAnyJet<reco::BasicJet> > > > > -------------------------------
void __edm__Wrapper_edm__Association_std__vector_reco__FFTAnyJet_reco__BasicJet_s_s_s__db_datamem(Reflex::Class*);
void __edm__Wrapper_edm__Association_std__vector_reco__FFTAnyJet_reco__BasicJet_s_s_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__Wrapper_edm__Association_std__vector_reco__FFTAnyJet_reco__BasicJet_s_s_s__datamem_bld(&__edm__Wrapper_edm__Association_std__vector_reco__FFTAnyJet_reco__BasicJet_s_s_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__Wrapper_edm__Association_std__vector_reco__FFTAnyJet_reco__BasicJet_s_s_s__funcmem_bld(&__edm__Wrapper_edm__Association_std__vector_reco__FFTAnyJet_reco__BasicJet_s_s_s__db_funcmem);
void __edm__Wrapper_edm__Association_std__vector_reco__FFTAnyJet_reco__BasicJet_s_s_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::BasicJet> > > >"), typeid(::edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::BasicJet> > > >), sizeof(::edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::BasicJet> > > >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("o_name"), "edm::Wrapper<edm::Association<reco::FFTBasicJetCollection> >")
  .AddTypedef(type_5805, Reflex::Literal("edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::BasicJet> > > >::value_type"))
  .AddTypedef(type_5805, Reflex::Literal("edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::BasicJet> > > >::wrapped_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("Wrapper"), constructor_29071, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_2892), Reflex::Literal("Wrapper"), constructor_29072, 0, "ptr", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~Wrapper"), destructor_29073, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_48289), Reflex::Literal("Wrapper"), constructor_29078, 0, "ptr", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_5467, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__Wrapper_edm__Association_std__vector_reco__FFTAnyJet_reco__BasicJet_s_s_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__Wrapper_edm__Association_std__vector_reco__FFTAnyJet_reco__BasicJet_s_s_s__funcmem_bld);
}

//------Delayed data member builder for class Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::BasicJet>, std::allocator<reco::FFTAnyJet<reco::BasicJet> > > > > -------------------
void __edm__Wrapper_edm__Association_std__vector_reco__FFTAnyJet_reco__BasicJet_s_s_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_1593, Reflex::Literal("present"), OffsetOf(__shadow__::__edm__Wrapper_edm__Association_std__vector_reco__FFTAnyJet_reco__BasicJet_s_s_s_, present), ::Reflex::PRIVATE)
  .AddDataMember(type_5805, Reflex::Literal("obj"), OffsetOf(__shadow__::__edm__Wrapper_edm__Association_std__vector_reco__FFTAnyJet_reco__BasicJet_s_s_s_, obj), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::BasicJet>, std::allocator<reco::FFTAnyJet<reco::BasicJet> > > > > -------------------
void __edm__Wrapper_edm__Association_std__vector_reco__FFTAnyJet_reco__BasicJet_s_s_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_48288), Reflex::Literal("product"), method_29074, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_48288), Reflex::Literal("operator->"), operator_29075, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_25675), Reflex::Literal("productTypeInfo"), method_29076, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_25675), Reflex::Literal("typeInfo"), method_29077, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_48290), Reflex::Literal("getInterface"), method_29079, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_25503, type_25627, type_47348), Reflex::Literal("fillView"), method_29080, 0, "id;pointers;helpers", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_25675, type_53, type_13292), Reflex::Literal("setPtr"), method_29081, 0, "iToType;iIndex;oPtr", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_25675, type_32194, type_25627), Reflex::Literal("fillPtrVector"), method_29082, 0, "iToType;iIndices;oPtr", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_25675), Reflex::Literal("dynamicTypeInfo"), method_29083, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("isPresent"), method_29084, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_25675), Reflex::Literal("dynamicTypeInfo_"), method_29085, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST);
}
//------Stub functions for class Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> >, std::allocator<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > > > > -------------------------------
static void constructor_29092( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > > >();
  else ::new(mem) ::edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > > >();
}

static void constructor_29093( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > > >(*(::std::auto_ptr<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > > >*)arg[0]);
  else ::new(mem) ::edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > > >(*(::std::auto_ptr<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > > >*)arg[0]);
}

static void destructor_29094(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > > >*)o)->::edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > > >::~Wrapper)();
}
static  void method_29095( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > > >*)o)->product)());
  else   (((const ::edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > > >*)o)->product)();
}

static  void operator_29096( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > > >*)o)->operator->)());
  else   (((const ::edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > > >*)o)->operator->)();
}

static  void method_29097( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > > >*)o)->productTypeInfo)();
  else   (((::edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > > >*)o)->productTypeInfo)();
}

static  void method_29098( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > > >*)o)->typeInfo)();
  else   (((::edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > > >*)o)->typeInfo)();
}

static void constructor_29099( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > > >((::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > >*)arg[0]);
  else ::new(mem) ::edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > > >((::std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > >*)arg[0]);
}

static  void method_29100( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((::edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > > >*)o)->getInterface)());
  else   (((::edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > > >*)o)->getInterface)();
}

static  void method_29101( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > > >*)o)->fillView)(*(const ::edm::ProductID*)arg[0],
    *(::std::vector<const void*>*)arg[1],
    *(::boost::shared_ptr<edm::reftobase::RefVectorHolderBase>*)arg[2]);
}

static  void method_29102( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > > >*)o)->setPtr)(*(const ::std::type_info*)arg[0],
    *(unsigned long*)arg[1],
    *(const void**)arg[2]);
}

static  void method_29103( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > > >*)o)->fillPtrVector)(*(const ::std::type_info*)arg[0],
    *(const ::std::vector<unsigned long>*)arg[1],
    *(::std::vector<const void*>*)arg[2]);
}

static  void method_29104( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > > >*)o)->dynamicTypeInfo)();
  else   (((const ::edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > > >*)o)->dynamicTypeInfo)();
}

static  void method_29105( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > > >*)o)->isPresent)());
  else   (((const ::edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > > >*)o)->isPresent)();
}

static  void method_29106( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > > >*)o)->dynamicTypeInfo_)();
  else   (((const ::edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > > >*)o)->dynamicTypeInfo_)();
}

static void method_newdel_5468( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > > > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > > > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > > > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > > > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > > > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> >, std::allocator<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > > > > -------------------------------
void __edm__Wrapper_std__vector_edm__FwdPtr_reco__FFTAnyJet_reco__BasicJet_s_s_s__db_datamem(Reflex::Class*);
void __edm__Wrapper_std__vector_edm__FwdPtr_reco__FFTAnyJet_reco__BasicJet_s_s_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__Wrapper_std__vector_edm__FwdPtr_reco__FFTAnyJet_reco__BasicJet_s_s_s__datamem_bld(&__edm__Wrapper_std__vector_edm__FwdPtr_reco__FFTAnyJet_reco__BasicJet_s_s_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__Wrapper_std__vector_edm__FwdPtr_reco__FFTAnyJet_reco__BasicJet_s_s_s__funcmem_bld(&__edm__Wrapper_std__vector_edm__FwdPtr_reco__FFTAnyJet_reco__BasicJet_s_s_s__db_funcmem);
void __edm__Wrapper_std__vector_edm__FwdPtr_reco__FFTAnyJet_reco__BasicJet_s_s_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > > >"), typeid(::edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > > >), sizeof(::edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > > >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("o_name"), "edm::Wrapper<reco::FFTBasicJetFwdPtrVector>")
  .AddTypedef(type_3132, Reflex::Literal("edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > > >::value_type"))
  .AddTypedef(type_3132, Reflex::Literal("edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > > >::wrapped_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("Wrapper"), constructor_29092, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_2893), Reflex::Literal("Wrapper"), constructor_29093, 0, "ptr", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~Wrapper"), destructor_29094, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_48294), Reflex::Literal("Wrapper"), constructor_29099, 0, "ptr", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_5468, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__Wrapper_std__vector_edm__FwdPtr_reco__FFTAnyJet_reco__BasicJet_s_s_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__Wrapper_std__vector_edm__FwdPtr_reco__FFTAnyJet_reco__BasicJet_s_s_s__funcmem_bld);
}

//------Delayed data member builder for class Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> >, std::allocator<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > > > > -------------------
void __edm__Wrapper_std__vector_edm__FwdPtr_reco__FFTAnyJet_reco__BasicJet_s_s_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_1593, Reflex::Literal("present"), OffsetOf(__shadow__::__edm__Wrapper_std__vector_edm__FwdPtr_reco__FFTAnyJet_reco__BasicJet_s_s_s_, present), ::Reflex::PRIVATE)
  .AddDataMember(type_3132, Reflex::Literal("obj"), OffsetOf(__shadow__::__edm__Wrapper_std__vector_edm__FwdPtr_reco__FFTAnyJet_reco__BasicJet_s_s_s_, obj), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> >, std::allocator<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > > > > -------------------
void __edm__Wrapper_std__vector_edm__FwdPtr_reco__FFTAnyJet_reco__BasicJet_s_s_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_48293), Reflex::Literal("product"), method_29095, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_48293), Reflex::Literal("operator->"), operator_29096, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_25675), Reflex::Literal("productTypeInfo"), method_29097, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_25675), Reflex::Literal("typeInfo"), method_29098, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_48295), Reflex::Literal("getInterface"), method_29100, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_25503, type_25627, type_47348), Reflex::Literal("fillView"), method_29101, 0, "id;pointers;helpers", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_25675, type_53, type_13292), Reflex::Literal("setPtr"), method_29102, 0, "iToType;iIndex;oPtr", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_25675, type_32194, type_25627), Reflex::Literal("fillPtrVector"), method_29103, 0, "iToType;iIndices;oPtr", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_25675), Reflex::Literal("dynamicTypeInfo"), method_29104, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("isPresent"), method_29105, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_25675), Reflex::Literal("dynamicTypeInfo_"), method_29106, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST);
}
//------Stub functions for class Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet>, std::allocator<reco::FFTAnyJet<reco::BasicJet> > >, reco::FFTAnyJet<reco::BasicJet>, edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet>, std::allocator<reco::FFTAnyJet<reco::BasicJet> > >, reco::FFTAnyJet<reco::BasicJet> > >, std::allocator<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet>, std::allocator<reco::FFTAnyJet<reco::BasicJet> > >, reco::FFTAnyJet<reco::BasicJet>, edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet>, std::allocator<reco::FFTAnyJet<reco::BasicJet> > >, reco::FFTAnyJet<reco::BasicJet> > > > > > -------------------------------
static void constructor_29113( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > > >();
  else ::new(mem) ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > > >();
}

static void constructor_29114( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > > >(*(::std::auto_ptr<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > > >*)arg[0]);
  else ::new(mem) ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > > >(*(::std::auto_ptr<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > > >*)arg[0]);
}

static void destructor_29115(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > > >*)o)->::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > > >::~Wrapper)();
}
static  void method_29116( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > > >*)o)->product)());
  else   (((const ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > > >*)o)->product)();
}

static  void operator_29117( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > > >*)o)->operator->)());
  else   (((const ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > > >*)o)->operator->)();
}

static  void method_29118( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > > >*)o)->productTypeInfo)();
  else   (((::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > > >*)o)->productTypeInfo)();
}

static  void method_29119( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > > >*)o)->typeInfo)();
  else   (((::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > > >*)o)->typeInfo)();
}

static void constructor_29120( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > > >((::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)arg[0]);
  else ::new(mem) ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > > >((::std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)arg[0]);
}

static  void method_29121( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > > >*)o)->getInterface)());
  else   (((::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > > >*)o)->getInterface)();
}

static  void method_29122( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > > >*)o)->fillView)(*(const ::edm::ProductID*)arg[0],
    *(::std::vector<const void*>*)arg[1],
    *(::boost::shared_ptr<edm::reftobase::RefVectorHolderBase>*)arg[2]);
}

static  void method_29123( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > > >*)o)->setPtr)(*(const ::std::type_info*)arg[0],
    *(unsigned long*)arg[1],
    *(const void**)arg[2]);
}

static  void method_29124( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > > >*)o)->fillPtrVector)(*(const ::std::type_info*)arg[0],
    *(const ::std::vector<unsigned long>*)arg[1],
    *(::std::vector<const void*>*)arg[2]);
}

static  void method_29125( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > > >*)o)->dynamicTypeInfo)();
  else   (((const ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > > >*)o)->dynamicTypeInfo)();
}

static  void method_29126( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > > >*)o)->isPresent)());
  else   (((const ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > > >*)o)->isPresent)();
}

static  void method_29127( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > > >*)o)->dynamicTypeInfo_)();
  else   (((const ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > > >*)o)->dynamicTypeInfo_)();
}

static void method_newdel_5469( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > > > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > > > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > > > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > > > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > > > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet>, std::allocator<reco::FFTAnyJet<reco::BasicJet> > >, reco::FFTAnyJet<reco::BasicJet>, edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet>, std::allocator<reco::FFTAnyJet<reco::BasicJet> > >, reco::FFTAnyJet<reco::BasicJet> > >, std::allocator<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet>, std::allocator<reco::FFTAnyJet<reco::BasicJet> > >, reco::FFTAnyJet<reco::BasicJet>, edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet>, std::allocator<reco::FFTAnyJet<reco::BasicJet> > >, reco::FFTAnyJet<reco::BasicJet> > > > > > -------------------------------
void __edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s_s_s__db_datamem(Reflex::Class*);
void __edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s_s_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s_s_s__datamem_bld(&__edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s_s_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s_s_s__funcmem_bld(&__edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s_s_s__db_funcmem);
void __edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s_s_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > > >"), typeid(::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > > >), sizeof(::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > > >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("o_name"), "edm::Wrapper<reco::FFTBasicJetFwdRefVector>")
  .AddTypedef(type_3133, Reflex::Literal("edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > > >::value_type"))
  .AddTypedef(type_3133, Reflex::Literal("edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > > >::wrapped_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("Wrapper"), constructor_29113, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_2894), Reflex::Literal("Wrapper"), constructor_29114, 0, "ptr", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~Wrapper"), destructor_29115, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_48299), Reflex::Literal("Wrapper"), constructor_29120, 0, "ptr", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_5469, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s_s_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s_s_s__funcmem_bld);
}

//------Delayed data member builder for class Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet>, std::allocator<reco::FFTAnyJet<reco::BasicJet> > >, reco::FFTAnyJet<reco::BasicJet>, edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet>, std::allocator<reco::FFTAnyJet<reco::BasicJet> > >, reco::FFTAnyJet<reco::BasicJet> > >, std::allocator<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet>, std::allocator<reco::FFTAnyJet<reco::BasicJet> > >, reco::FFTAnyJet<reco::BasicJet>, edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet>, std::allocator<reco::FFTAnyJet<reco::BasicJet> > >, reco::FFTAnyJet<reco::BasicJet> > > > > > -------------------
void __edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s_s_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_1593, Reflex::Literal("present"), OffsetOf(__shadow__::__edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s_s_s_, present), ::Reflex::PRIVATE)
  .AddDataMember(type_3133, Reflex::Literal("obj"), OffsetOf(__shadow__::__edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s_s_s_, obj), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet>, std::allocator<reco::FFTAnyJet<reco::BasicJet> > >, reco::FFTAnyJet<reco::BasicJet>, edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet>, std::allocator<reco::FFTAnyJet<reco::BasicJet> > >, reco::FFTAnyJet<reco::BasicJet> > >, std::allocator<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet>, std::allocator<reco::FFTAnyJet<reco::BasicJet> > >, reco::FFTAnyJet<reco::BasicJet>, edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet>, std::allocator<reco::FFTAnyJet<reco::BasicJet> > >, reco::FFTAnyJet<reco::BasicJet> > > > > > -------------------
void __edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s_s_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_48298), Reflex::Literal("product"), method_29116, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_48298), Reflex::Literal("operator->"), operator_29117, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_25675), Reflex::Literal("productTypeInfo"), method_29118, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_25675), Reflex::Literal("typeInfo"), method_29119, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_48300), Reflex::Literal("getInterface"), method_29121, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_25503, type_25627, type_47348), Reflex::Literal("fillView"), method_29122, 0, "id;pointers;helpers", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_25675, type_53, type_13292), Reflex::Literal("setPtr"), method_29123, 0, "iToType;iIndex;oPtr", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_25675, type_32194, type_25627), Reflex::Literal("fillPtrVector"), method_29124, 0, "iToType;iIndices;oPtr", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_25675), Reflex::Literal("dynamicTypeInfo"), method_29125, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("isPresent"), method_29126, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_25675), Reflex::Literal("dynamicTypeInfo_"), method_29127, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST);
}
//------Stub functions for class Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::BasicJet>, std::allocator<reco::FFTAnyJet<reco::BasicJet> > >, reco::FFTAnyJet<reco::BasicJet>, edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet>, std::allocator<reco::FFTAnyJet<reco::BasicJet> > >, reco::FFTAnyJet<reco::BasicJet> > > > -------------------------------
static void constructor_29134( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >();
  else ::new(mem) ::edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >();
}

static void constructor_29135( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >(*(::std::auto_ptr<edm::RefVector<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)arg[0]);
  else ::new(mem) ::edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >(*(::std::auto_ptr<edm::RefVector<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)arg[0]);
}

static void destructor_29136(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->::edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >::~Wrapper)();
}
static  void method_29137( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->product)());
  else   (((const ::edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->product)();
}

static  void operator_29138( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->operator->)());
  else   (((const ::edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->operator->)();
}

static  void method_29139( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->productTypeInfo)();
  else   (((::edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->productTypeInfo)();
}

static  void method_29140( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->typeInfo)();
  else   (((::edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->typeInfo)();
}

static void constructor_29141( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >((::edm::RefVector<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)arg[0]);
  else ::new(mem) ::edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >((::edm::RefVector<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)arg[0]);
}

static  void method_29142( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((::edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->getInterface)());
  else   (((::edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->getInterface)();
}

static  void method_29143( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->fillView)(*(const ::edm::ProductID*)arg[0],
    *(::std::vector<const void*>*)arg[1],
    *(::boost::shared_ptr<edm::reftobase::RefVectorHolderBase>*)arg[2]);
}

static  void method_29144( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->setPtr)(*(const ::std::type_info*)arg[0],
    *(unsigned long*)arg[1],
    *(const void**)arg[2]);
}

static  void method_29145( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->fillPtrVector)(*(const ::std::type_info*)arg[0],
    *(const ::std::vector<unsigned long>*)arg[1],
    *(::std::vector<const void*>*)arg[2]);
}

static  void method_29146( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->dynamicTypeInfo)();
  else   (((const ::edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->dynamicTypeInfo)();
}

static  void method_29147( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->isPresent)());
  else   (((const ::edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->isPresent)();
}

static  void method_29148( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->dynamicTypeInfo_)();
  else   (((const ::edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->dynamicTypeInfo_)();
}

static void method_newdel_5470( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::BasicJet>, std::allocator<reco::FFTAnyJet<reco::BasicJet> > >, reco::FFTAnyJet<reco::BasicJet>, edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet>, std::allocator<reco::FFTAnyJet<reco::BasicJet> > >, reco::FFTAnyJet<reco::BasicJet> > > > -------------------------------
void __edm__Wrapper_edm__RefVector_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s_s__db_datamem(Reflex::Class*);
void __edm__Wrapper_edm__RefVector_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__Wrapper_edm__RefVector_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s_s__datamem_bld(&__edm__Wrapper_edm__RefVector_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__Wrapper_edm__RefVector_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s_s__funcmem_bld(&__edm__Wrapper_edm__RefVector_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s_s__db_funcmem);
void __edm__Wrapper_edm__RefVector_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >"), typeid(::edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >), sizeof(::edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("o_name"), "edm::Wrapper<reco::FFTBasicJetRefVector>")
  .AddTypedef(type_5348, Reflex::Literal("edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >::value_type"))
  .AddTypedef(type_5348, Reflex::Literal("edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >::wrapped_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("Wrapper"), constructor_29134, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_2895), Reflex::Literal("Wrapper"), constructor_29135, 0, "ptr", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~Wrapper"), destructor_29136, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_48304), Reflex::Literal("Wrapper"), constructor_29141, 0, "ptr", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_5470, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__Wrapper_edm__RefVector_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__Wrapper_edm__RefVector_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s_s__funcmem_bld);
}

//------Delayed data member builder for class Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::BasicJet>, std::allocator<reco::FFTAnyJet<reco::BasicJet> > >, reco::FFTAnyJet<reco::BasicJet>, edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet>, std::allocator<reco::FFTAnyJet<reco::BasicJet> > >, reco::FFTAnyJet<reco::BasicJet> > > > -------------------
void __edm__Wrapper_edm__RefVector_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_1593, Reflex::Literal("present"), OffsetOf(__shadow__::__edm__Wrapper_edm__RefVector_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s_s_, present), ::Reflex::PRIVATE)
  .AddDataMember(type_5348, Reflex::Literal("obj"), OffsetOf(__shadow__::__edm__Wrapper_edm__RefVector_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s_s_, obj), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::BasicJet>, std::allocator<reco::FFTAnyJet<reco::BasicJet> > >, reco::FFTAnyJet<reco::BasicJet>, edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet>, std::allocator<reco::FFTAnyJet<reco::BasicJet> > >, reco::FFTAnyJet<reco::BasicJet> > > > -------------------
void __edm__Wrapper_edm__RefVector_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_48303), Reflex::Literal("product"), method_29137, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_48303), Reflex::Literal("operator->"), operator_29138, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_25675), Reflex::Literal("productTypeInfo"), method_29139, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_25675), Reflex::Literal("typeInfo"), method_29140, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_48305), Reflex::Literal("getInterface"), method_29142, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_25503, type_25627, type_47348), Reflex::Literal("fillView"), method_29143, 0, "id;pointers;helpers", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_25675, type_53, type_13292), Reflex::Literal("setPtr"), method_29144, 0, "iToType;iIndex;oPtr", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_25675, type_32194, type_25627), Reflex::Literal("fillPtrVector"), method_29145, 0, "iToType;iIndices;oPtr", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_25675), Reflex::Literal("dynamicTypeInfo"), method_29146, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("isPresent"), method_29147, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_25675), Reflex::Literal("dynamicTypeInfo_"), method_29148, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST);
}
//------Stub functions for class Wrapper<std::vector<reco::FFTAnyJet<reco::BasicJet>, std::allocator<reco::FFTAnyJet<reco::BasicJet> > > > -------------------------------
static void constructor_29155( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<std::vector<reco::FFTAnyJet<reco::BasicJet> > >();
  else ::new(mem) ::edm::Wrapper<std::vector<reco::FFTAnyJet<reco::BasicJet> > >();
}

static void constructor_29156( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<std::vector<reco::FFTAnyJet<reco::BasicJet> > >(*(::std::auto_ptr<std::vector<reco::FFTAnyJet<reco::BasicJet> > >*)arg[0]);
  else ::new(mem) ::edm::Wrapper<std::vector<reco::FFTAnyJet<reco::BasicJet> > >(*(::std::auto_ptr<std::vector<reco::FFTAnyJet<reco::BasicJet> > >*)arg[0]);
}

static void destructor_29157(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::Wrapper<std::vector<reco::FFTAnyJet<reco::BasicJet> > >*)o)->::edm::Wrapper<std::vector<reco::FFTAnyJet<reco::BasicJet> > >::~Wrapper)();
}
static  void method_29158( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Wrapper<std::vector<reco::FFTAnyJet<reco::BasicJet> > >*)o)->product)());
  else   (((const ::edm::Wrapper<std::vector<reco::FFTAnyJet<reco::BasicJet> > >*)o)->product)();
}

static  void operator_29159( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Wrapper<std::vector<reco::FFTAnyJet<reco::BasicJet> > >*)o)->operator->)());
  else   (((const ::edm::Wrapper<std::vector<reco::FFTAnyJet<reco::BasicJet> > >*)o)->operator->)();
}

static  void method_29160( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::Wrapper<std::vector<reco::FFTAnyJet<reco::BasicJet> > >*)o)->productTypeInfo)();
  else   (((::edm::Wrapper<std::vector<reco::FFTAnyJet<reco::BasicJet> > >*)o)->productTypeInfo)();
}

static  void method_29161( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::Wrapper<std::vector<reco::FFTAnyJet<reco::BasicJet> > >*)o)->typeInfo)();
  else   (((::edm::Wrapper<std::vector<reco::FFTAnyJet<reco::BasicJet> > >*)o)->typeInfo)();
}

static void constructor_29162( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<std::vector<reco::FFTAnyJet<reco::BasicJet> > >((::std::vector<reco::FFTAnyJet<reco::BasicJet> >*)arg[0]);
  else ::new(mem) ::edm::Wrapper<std::vector<reco::FFTAnyJet<reco::BasicJet> > >((::std::vector<reco::FFTAnyJet<reco::BasicJet> >*)arg[0]);
}

static  void method_29163( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((::edm::Wrapper<std::vector<reco::FFTAnyJet<reco::BasicJet> > >*)o)->getInterface)());
  else   (((::edm::Wrapper<std::vector<reco::FFTAnyJet<reco::BasicJet> > >*)o)->getInterface)();
}

static  void method_29164( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<std::vector<reco::FFTAnyJet<reco::BasicJet> > >*)o)->fillView)(*(const ::edm::ProductID*)arg[0],
    *(::std::vector<const void*>*)arg[1],
    *(::boost::shared_ptr<edm::reftobase::RefVectorHolderBase>*)arg[2]);
}

static  void method_29165( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<std::vector<reco::FFTAnyJet<reco::BasicJet> > >*)o)->setPtr)(*(const ::std::type_info*)arg[0],
    *(unsigned long*)arg[1],
    *(const void**)arg[2]);
}

static  void method_29166( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<std::vector<reco::FFTAnyJet<reco::BasicJet> > >*)o)->fillPtrVector)(*(const ::std::type_info*)arg[0],
    *(const ::std::vector<unsigned long>*)arg[1],
    *(::std::vector<const void*>*)arg[2]);
}

static  void method_29167( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Wrapper<std::vector<reco::FFTAnyJet<reco::BasicJet> > >*)o)->dynamicTypeInfo)();
  else   (((const ::edm::Wrapper<std::vector<reco::FFTAnyJet<reco::BasicJet> > >*)o)->dynamicTypeInfo)();
}

static  void method_29168( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Wrapper<std::vector<reco::FFTAnyJet<reco::BasicJet> > >*)o)->isPresent)());
  else   (((const ::edm::Wrapper<std::vector<reco::FFTAnyJet<reco::BasicJet> > >*)o)->isPresent)();
}

static  void method_29169( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Wrapper<std::vector<reco::FFTAnyJet<reco::BasicJet> > >*)o)->dynamicTypeInfo_)();
  else   (((const ::edm::Wrapper<std::vector<reco::FFTAnyJet<reco::BasicJet> > >*)o)->dynamicTypeInfo_)();
}

static void method_newdel_5471( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<reco::FFTAnyJet<reco::BasicJet> > > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<reco::FFTAnyJet<reco::BasicJet> > > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<reco::FFTAnyJet<reco::BasicJet> > > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<reco::FFTAnyJet<reco::BasicJet> > > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<reco::FFTAnyJet<reco::BasicJet> > > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class Wrapper<std::vector<reco::FFTAnyJet<reco::BasicJet>, std::allocator<reco::FFTAnyJet<reco::BasicJet> > > > -------------------------------
void __edm__Wrapper_std__vector_reco__FFTAnyJet_reco__BasicJet_s_s__db_datamem(Reflex::Class*);
void __edm__Wrapper_std__vector_reco__FFTAnyJet_reco__BasicJet_s_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__Wrapper_std__vector_reco__FFTAnyJet_reco__BasicJet_s_s__datamem_bld(&__edm__Wrapper_std__vector_reco__FFTAnyJet_reco__BasicJet_s_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__Wrapper_std__vector_reco__FFTAnyJet_reco__BasicJet_s_s__funcmem_bld(&__edm__Wrapper_std__vector_reco__FFTAnyJet_reco__BasicJet_s_s__db_funcmem);
void __edm__Wrapper_std__vector_reco__FFTAnyJet_reco__BasicJet_s_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::Wrapper<std::vector<reco::FFTAnyJet<reco::BasicJet> > >"), typeid(::edm::Wrapper<std::vector<reco::FFTAnyJet<reco::BasicJet> > >), sizeof(::edm::Wrapper<std::vector<reco::FFTAnyJet<reco::BasicJet> > >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("o_name"), "edm::Wrapper<reco::FFTBasicJetCollection>")
  .AddTypedef(type_3134, Reflex::Literal("edm::Wrapper<std::vector<reco::FFTAnyJet<reco::BasicJet> > >::value_type"))
  .AddTypedef(type_3134, Reflex::Literal("edm::Wrapper<std::vector<reco::FFTAnyJet<reco::BasicJet> > >::wrapped_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("Wrapper"), constructor_29155, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_2896), Reflex::Literal("Wrapper"), constructor_29156, 0, "ptr", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~Wrapper"), destructor_29157, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_48308), Reflex::Literal("Wrapper"), constructor_29162, 0, "ptr", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_5471, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__Wrapper_std__vector_reco__FFTAnyJet_reco__BasicJet_s_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__Wrapper_std__vector_reco__FFTAnyJet_reco__BasicJet_s_s__funcmem_bld);
}

//------Delayed data member builder for class Wrapper<std::vector<reco::FFTAnyJet<reco::BasicJet>, std::allocator<reco::FFTAnyJet<reco::BasicJet> > > > -------------------
void __edm__Wrapper_std__vector_reco__FFTAnyJet_reco__BasicJet_s_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_1593, Reflex::Literal("present"), OffsetOf(__shadow__::__edm__Wrapper_std__vector_reco__FFTAnyJet_reco__BasicJet_s_s_, present), ::Reflex::PRIVATE)
  .AddDataMember(type_3134, Reflex::Literal("obj"), OffsetOf(__shadow__::__edm__Wrapper_std__vector_reco__FFTAnyJet_reco__BasicJet_s_s_, obj), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class Wrapper<std::vector<reco::FFTAnyJet<reco::BasicJet>, std::allocator<reco::FFTAnyJet<reco::BasicJet> > > > -------------------
void __edm__Wrapper_std__vector_reco__FFTAnyJet_reco__BasicJet_s_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_48126), Reflex::Literal("product"), method_29158, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_48126), Reflex::Literal("operator->"), operator_29159, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_25675), Reflex::Literal("productTypeInfo"), method_29160, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_25675), Reflex::Literal("typeInfo"), method_29161, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_48309), Reflex::Literal("getInterface"), method_29163, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_25503, type_25627, type_47348), Reflex::Literal("fillView"), method_29164, 0, "id;pointers;helpers", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_25675, type_53, type_13292), Reflex::Literal("setPtr"), method_29165, 0, "iToType;iIndex;oPtr", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_25675, type_32194, type_25627), Reflex::Literal("fillPtrVector"), method_29166, 0, "iToType;iIndices;oPtr", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_25675), Reflex::Literal("dynamicTypeInfo"), method_29167, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("isPresent"), method_29168, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_25675), Reflex::Literal("dynamicTypeInfo_"), method_29169, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST);
}
//------Stub functions for class Ptr<reco::FFTAnyJet<reco::JPTJet> > -------------------------------
static  void operator_30426( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::Ptr<reco::FFTAnyJet<reco::JPTJet> >*)o)->operator=)(*(const ::edm::Ptr<reco::FFTAnyJet<reco::JPTJet> >*)arg[0]);
  else   (((::edm::Ptr<reco::FFTAnyJet<reco::JPTJet> >*)o)->operator=)(*(const ::edm::Ptr<reco::FFTAnyJet<reco::JPTJet> >*)arg[0]);
}

static void constructor_30427( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ptr<reco::FFTAnyJet<reco::JPTJet> >(*(const ::edm::Ptr<reco::FFTAnyJet<reco::JPTJet> >*)arg[0]);
  else ::new(mem) ::edm::Ptr<reco::FFTAnyJet<reco::JPTJet> >(*(const ::edm::Ptr<reco::FFTAnyJet<reco::JPTJet> >*)arg[0]);
}

static void constructor_30428( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ptr<reco::FFTAnyJet<reco::JPTJet> >(*(const ::edm::ProductID*)arg[0],
      *(unsigned long*)arg[1],
      (const ::edm::EDProductGetter*)arg[2]);
  else ::new(mem) ::edm::Ptr<reco::FFTAnyJet<reco::JPTJet> >(*(const ::edm::ProductID*)arg[0],
      *(unsigned long*)arg[1],
      (const ::edm::EDProductGetter*)arg[2]);
}

static void constructor_30429( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ptr<reco::FFTAnyJet<reco::JPTJet> >(*(const ::edm::ProductID*)arg[0],
      (const ::reco::FFTAnyJet<reco::JPTJet>*)arg[1],
      *(unsigned long*)arg[2]);
  else ::new(mem) ::edm::Ptr<reco::FFTAnyJet<reco::JPTJet> >(*(const ::edm::ProductID*)arg[0],
      (const ::reco::FFTAnyJet<reco::JPTJet>*)arg[1],
      *(unsigned long*)arg[2]);
}

static void constructor_30430( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ptr<reco::FFTAnyJet<reco::JPTJet> >(*(const ::edm::ProductID*)arg[0]);
  else ::new(mem) ::edm::Ptr<reco::FFTAnyJet<reco::JPTJet> >(*(const ::edm::ProductID*)arg[0]);
}

static void constructor_30431( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ptr<reco::FFTAnyJet<reco::JPTJet> >();
  else ::new(mem) ::edm::Ptr<reco::FFTAnyJet<reco::JPTJet> >();
}

static void destructor_30432(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::Ptr<reco::FFTAnyJet<reco::JPTJet> >*)o)->::edm::Ptr<reco::FFTAnyJet<reco::JPTJet> >::~Ptr)();
}
static  void operator_30433( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Ptr<reco::FFTAnyJet<reco::JPTJet> >*)o)->operator*)();
  else   (((const ::edm::Ptr<reco::FFTAnyJet<reco::JPTJet> >*)o)->operator*)();
}

static  void operator_30434( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Ptr<reco::FFTAnyJet<reco::JPTJet> >*)o)->operator->)());
  else   (((const ::edm::Ptr<reco::FFTAnyJet<reco::JPTJet> >*)o)->operator->)();
}

static  void method_30435( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Ptr<reco::FFTAnyJet<reco::JPTJet> >*)o)->get)());
  else   (((const ::edm::Ptr<reco::FFTAnyJet<reco::JPTJet> >*)o)->get)();
}

static  void method_30436( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Ptr<reco::FFTAnyJet<reco::JPTJet> >*)o)->isNull)());
  else   (((const ::edm::Ptr<reco::FFTAnyJet<reco::JPTJet> >*)o)->isNull)();
}

static  void method_30437( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Ptr<reco::FFTAnyJet<reco::JPTJet> >*)o)->isNonnull)());
  else   (((const ::edm::Ptr<reco::FFTAnyJet<reco::JPTJet> >*)o)->isNonnull)();
}

static  void operator_30438( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Ptr<reco::FFTAnyJet<reco::JPTJet> >*)o)->operator!)());
  else   (((const ::edm::Ptr<reco::FFTAnyJet<reco::JPTJet> >*)o)->operator!)();
}

static  void method_30439( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Ptr<reco::FFTAnyJet<reco::JPTJet> >*)o)->isAvailable)());
  else   (((const ::edm::Ptr<reco::FFTAnyJet<reco::JPTJet> >*)o)->isAvailable)();
}

static  void method_30440( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Ptr<reco::FFTAnyJet<reco::JPTJet> >*)o)->isTransient)());
  else   (((const ::edm::Ptr<reco::FFTAnyJet<reco::JPTJet> >*)o)->isTransient)();
}

static  void method_30441( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::ProductID)((((const ::edm::Ptr<reco::FFTAnyJet<reco::JPTJet> >*)o)->id)());
  else   (((const ::edm::Ptr<reco::FFTAnyJet<reco::JPTJet> >*)o)->id)();
}

static  void method_30442( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Ptr<reco::FFTAnyJet<reco::JPTJet> >*)o)->productGetter)());
  else   (((const ::edm::Ptr<reco::FFTAnyJet<reco::JPTJet> >*)o)->productGetter)();
}

static  void method_30443( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (unsigned long)((((const ::edm::Ptr<reco::FFTAnyJet<reco::JPTJet> >*)o)->key)());
  else   (((const ::edm::Ptr<reco::FFTAnyJet<reco::JPTJet> >*)o)->key)();
}

static  void method_30444( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Ptr<reco::FFTAnyJet<reco::JPTJet> >*)o)->hasProductCache)());
  else   (((const ::edm::Ptr<reco::FFTAnyJet<reco::JPTJet> >*)o)->hasProductCache)();
}

static  void method_30445( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Ptr<reco::FFTAnyJet<reco::JPTJet> >*)o)->refCore)();
  else   (((const ::edm::Ptr<reco::FFTAnyJet<reco::JPTJet> >*)o)->refCore)();
}

static  void method_30446( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Ptr<reco::FFTAnyJet<reco::JPTJet> >*)o)->product)());
  else   (((const ::edm::Ptr<reco::FFTAnyJet<reco::JPTJet> >*)o)->product)();
}

static  void method_30447( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (short)((((::edm::Ptr<reco::FFTAnyJet<reco::JPTJet> >*)o)->Class_Version)());
  else   (((::edm::Ptr<reco::FFTAnyJet<reco::JPTJet> >*)o)->Class_Version)();
}

static void method_newdel_5779( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::Ptr<reco::FFTAnyJet<reco::JPTJet> > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::Ptr<reco::FFTAnyJet<reco::JPTJet> > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::Ptr<reco::FFTAnyJet<reco::JPTJet> > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::Ptr<reco::FFTAnyJet<reco::JPTJet> > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::Ptr<reco::FFTAnyJet<reco::JPTJet> > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class Ptr<reco::FFTAnyJet<reco::JPTJet> > -------------------------------
void __edm__Ptr_reco__FFTAnyJet_reco__JPTJet_s__db_datamem(Reflex::Class*);
void __edm__Ptr_reco__FFTAnyJet_reco__JPTJet_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__Ptr_reco__FFTAnyJet_reco__JPTJet_s__datamem_bld(&__edm__Ptr_reco__FFTAnyJet_reco__JPTJet_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__Ptr_reco__FFTAnyJet_reco__JPTJet_s__funcmem_bld(&__edm__Ptr_reco__FFTAnyJet_reco__JPTJet_s__db_funcmem);
void __edm__Ptr_reco__FFTAnyJet_reco__JPTJet_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::Ptr<reco::FFTAnyJet<reco::JPTJet> >"), typeid(::edm::Ptr<reco::FFTAnyJet<reco::JPTJet> >), sizeof(::edm::Ptr<reco::FFTAnyJet<reco::JPTJet> >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("ClassVersion"), ::edm::Ptr<reco::FFTAnyJet<reco::JPTJet> >::Class_Version())
  .AddProperty(Reflex::Literal("o_name"), "edm::Ptr<reco::FFTJPTJet>")
  .AddTypedef(type_53, Reflex::Literal("edm::Ptr<reco::FFTAnyJet<reco::JPTJet> >::key_type"))
  .AddTypedef(type_8931, Reflex::Literal("edm::Ptr<reco::FFTAnyJet<reco::JPTJet> >::value_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_48883, type_48069), Reflex::Literal("operator="), operator_30426, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_48069), Reflex::Literal("Ptr"), constructor_30427, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_25503, type_53, type_25623), Reflex::Literal("Ptr"), constructor_30428, 0, "productID;itemKey;prodGetter", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_25503, type_16420, type_53), Reflex::Literal("Ptr"), constructor_30429, 0, "productID;item;item_key", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_25503), Reflex::Literal("Ptr"), constructor_30430, 0, "iId", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("Ptr"), constructor_30431, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~Ptr"), destructor_30432, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_5779, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__Ptr_reco__FFTAnyJet_reco__JPTJet_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__Ptr_reco__FFTAnyJet_reco__JPTJet_s__funcmem_bld);
}

//------Delayed data member builder for class Ptr<reco::FFTAnyJet<reco::JPTJet> > -------------------
void __edm__Ptr_reco__FFTAnyJet_reco__JPTJet_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_5697, Reflex::Literal("core_"), OffsetOf(__shadow__::__edm__Ptr_reco__FFTAnyJet_reco__JPTJet_s_, core_), ::Reflex::PRIVATE)
  .AddDataMember(type_53, Reflex::Literal("key_"), OffsetOf(__shadow__::__edm__Ptr_reco__FFTAnyJet_reco__JPTJet_s_, key_), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class Ptr<reco::FFTAnyJet<reco::JPTJet> > -------------------
void __edm__Ptr_reco__FFTAnyJet_reco__JPTJet_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_16424), Reflex::Literal("operator*"), operator_30433, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_16420), Reflex::Literal("operator->"), operator_30434, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_16420), Reflex::Literal("get"), method_30435, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("isNull"), method_30436, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("isNonnull"), method_30437, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("operator!"), operator_30438, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("isAvailable"), method_30439, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("isTransient"), method_30440, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_5905), Reflex::Literal("id"), method_30441, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_25623), Reflex::Literal("productGetter"), method_30442, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_53), Reflex::Literal("key"), method_30443, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("hasProductCache"), method_30444, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_29672), Reflex::Literal("refCore"), method_30445, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4427), Reflex::Literal("product"), method_30446, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_484), Reflex::Literal("Class_Version"), method_30447, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC);
}
//------Stub functions for class Ptr<reco::FFTAnyJet<reco::TrackJet> > -------------------------------
static  void operator_30454( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::Ptr<reco::FFTAnyJet<reco::TrackJet> >*)o)->operator=)(*(const ::edm::Ptr<reco::FFTAnyJet<reco::TrackJet> >*)arg[0]);
  else   (((::edm::Ptr<reco::FFTAnyJet<reco::TrackJet> >*)o)->operator=)(*(const ::edm::Ptr<reco::FFTAnyJet<reco::TrackJet> >*)arg[0]);
}

static void constructor_30455( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ptr<reco::FFTAnyJet<reco::TrackJet> >(*(const ::edm::Ptr<reco::FFTAnyJet<reco::TrackJet> >*)arg[0]);
  else ::new(mem) ::edm::Ptr<reco::FFTAnyJet<reco::TrackJet> >(*(const ::edm::Ptr<reco::FFTAnyJet<reco::TrackJet> >*)arg[0]);
}

static void constructor_30456( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ptr<reco::FFTAnyJet<reco::TrackJet> >(*(const ::edm::ProductID*)arg[0],
      *(unsigned long*)arg[1],
      (const ::edm::EDProductGetter*)arg[2]);
  else ::new(mem) ::edm::Ptr<reco::FFTAnyJet<reco::TrackJet> >(*(const ::edm::ProductID*)arg[0],
      *(unsigned long*)arg[1],
      (const ::edm::EDProductGetter*)arg[2]);
}

static void constructor_30457( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ptr<reco::FFTAnyJet<reco::TrackJet> >(*(const ::edm::ProductID*)arg[0],
      (const ::reco::FFTAnyJet<reco::TrackJet>*)arg[1],
      *(unsigned long*)arg[2]);
  else ::new(mem) ::edm::Ptr<reco::FFTAnyJet<reco::TrackJet> >(*(const ::edm::ProductID*)arg[0],
      (const ::reco::FFTAnyJet<reco::TrackJet>*)arg[1],
      *(unsigned long*)arg[2]);
}

static void constructor_30458( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ptr<reco::FFTAnyJet<reco::TrackJet> >(*(const ::edm::ProductID*)arg[0]);
  else ::new(mem) ::edm::Ptr<reco::FFTAnyJet<reco::TrackJet> >(*(const ::edm::ProductID*)arg[0]);
}

static void constructor_30459( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ptr<reco::FFTAnyJet<reco::TrackJet> >();
  else ::new(mem) ::edm::Ptr<reco::FFTAnyJet<reco::TrackJet> >();
}

static void destructor_30460(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::Ptr<reco::FFTAnyJet<reco::TrackJet> >*)o)->::edm::Ptr<reco::FFTAnyJet<reco::TrackJet> >::~Ptr)();
}
static  void operator_30461( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Ptr<reco::FFTAnyJet<reco::TrackJet> >*)o)->operator*)();
  else   (((const ::edm::Ptr<reco::FFTAnyJet<reco::TrackJet> >*)o)->operator*)();
}

static  void operator_30462( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Ptr<reco::FFTAnyJet<reco::TrackJet> >*)o)->operator->)());
  else   (((const ::edm::Ptr<reco::FFTAnyJet<reco::TrackJet> >*)o)->operator->)();
}

static  void method_30463( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Ptr<reco::FFTAnyJet<reco::TrackJet> >*)o)->get)());
  else   (((const ::edm::Ptr<reco::FFTAnyJet<reco::TrackJet> >*)o)->get)();
}

static  void method_30464( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Ptr<reco::FFTAnyJet<reco::TrackJet> >*)o)->isNull)());
  else   (((const ::edm::Ptr<reco::FFTAnyJet<reco::TrackJet> >*)o)->isNull)();
}

static  void method_30465( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Ptr<reco::FFTAnyJet<reco::TrackJet> >*)o)->isNonnull)());
  else   (((const ::edm::Ptr<reco::FFTAnyJet<reco::TrackJet> >*)o)->isNonnull)();
}

static  void operator_30466( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Ptr<reco::FFTAnyJet<reco::TrackJet> >*)o)->operator!)());
  else   (((const ::edm::Ptr<reco::FFTAnyJet<reco::TrackJet> >*)o)->operator!)();
}

static  void method_30467( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Ptr<reco::FFTAnyJet<reco::TrackJet> >*)o)->isAvailable)());
  else   (((const ::edm::Ptr<reco::FFTAnyJet<reco::TrackJet> >*)o)->isAvailable)();
}

static  void method_30468( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Ptr<reco::FFTAnyJet<reco::TrackJet> >*)o)->isTransient)());
  else   (((const ::edm::Ptr<reco::FFTAnyJet<reco::TrackJet> >*)o)->isTransient)();
}

static  void method_30469( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::ProductID)((((const ::edm::Ptr<reco::FFTAnyJet<reco::TrackJet> >*)o)->id)());
  else   (((const ::edm::Ptr<reco::FFTAnyJet<reco::TrackJet> >*)o)->id)();
}

static  void method_30470( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Ptr<reco::FFTAnyJet<reco::TrackJet> >*)o)->productGetter)());
  else   (((const ::edm::Ptr<reco::FFTAnyJet<reco::TrackJet> >*)o)->productGetter)();
}

static  void method_30471( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (unsigned long)((((const ::edm::Ptr<reco::FFTAnyJet<reco::TrackJet> >*)o)->key)());
  else   (((const ::edm::Ptr<reco::FFTAnyJet<reco::TrackJet> >*)o)->key)();
}

static  void method_30472( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Ptr<reco::FFTAnyJet<reco::TrackJet> >*)o)->hasProductCache)());
  else   (((const ::edm::Ptr<reco::FFTAnyJet<reco::TrackJet> >*)o)->hasProductCache)();
}

static  void method_30473( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Ptr<reco::FFTAnyJet<reco::TrackJet> >*)o)->refCore)();
  else   (((const ::edm::Ptr<reco::FFTAnyJet<reco::TrackJet> >*)o)->refCore)();
}

static  void method_30474( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Ptr<reco::FFTAnyJet<reco::TrackJet> >*)o)->product)());
  else   (((const ::edm::Ptr<reco::FFTAnyJet<reco::TrackJet> >*)o)->product)();
}

static  void method_30475( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (short)((((::edm::Ptr<reco::FFTAnyJet<reco::TrackJet> >*)o)->Class_Version)());
  else   (((::edm::Ptr<reco::FFTAnyJet<reco::TrackJet> >*)o)->Class_Version)();
}

static void method_newdel_5780( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::Ptr<reco::FFTAnyJet<reco::TrackJet> > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::Ptr<reco::FFTAnyJet<reco::TrackJet> > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::Ptr<reco::FFTAnyJet<reco::TrackJet> > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::Ptr<reco::FFTAnyJet<reco::TrackJet> > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::Ptr<reco::FFTAnyJet<reco::TrackJet> > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class Ptr<reco::FFTAnyJet<reco::TrackJet> > -------------------------------
void __edm__Ptr_reco__FFTAnyJet_reco__TrackJet_s__db_datamem(Reflex::Class*);
void __edm__Ptr_reco__FFTAnyJet_reco__TrackJet_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__Ptr_reco__FFTAnyJet_reco__TrackJet_s__datamem_bld(&__edm__Ptr_reco__FFTAnyJet_reco__TrackJet_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__Ptr_reco__FFTAnyJet_reco__TrackJet_s__funcmem_bld(&__edm__Ptr_reco__FFTAnyJet_reco__TrackJet_s__db_funcmem);
void __edm__Ptr_reco__FFTAnyJet_reco__TrackJet_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::Ptr<reco::FFTAnyJet<reco::TrackJet> >"), typeid(::edm::Ptr<reco::FFTAnyJet<reco::TrackJet> >), sizeof(::edm::Ptr<reco::FFTAnyJet<reco::TrackJet> >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("ClassVersion"), ::edm::Ptr<reco::FFTAnyJet<reco::TrackJet> >::Class_Version())
  .AddProperty(Reflex::Literal("o_name"), "edm::Ptr<reco::FFTTrackJet>")
  .AddTypedef(type_53, Reflex::Literal("edm::Ptr<reco::FFTAnyJet<reco::TrackJet> >::key_type"))
  .AddTypedef(type_8932, Reflex::Literal("edm::Ptr<reco::FFTAnyJet<reco::TrackJet> >::value_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_48884, type_48072), Reflex::Literal("operator="), operator_30454, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_48072), Reflex::Literal("Ptr"), constructor_30455, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_25503, type_53, type_25623), Reflex::Literal("Ptr"), constructor_30456, 0, "productID;itemKey;prodGetter", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_25503, type_16615, type_53), Reflex::Literal("Ptr"), constructor_30457, 0, "productID;item;item_key", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_25503), Reflex::Literal("Ptr"), constructor_30458, 0, "iId", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("Ptr"), constructor_30459, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~Ptr"), destructor_30460, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_5780, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__Ptr_reco__FFTAnyJet_reco__TrackJet_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__Ptr_reco__FFTAnyJet_reco__TrackJet_s__funcmem_bld);
}

//------Delayed data member builder for class Ptr<reco::FFTAnyJet<reco::TrackJet> > -------------------
void __edm__Ptr_reco__FFTAnyJet_reco__TrackJet_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_5697, Reflex::Literal("core_"), OffsetOf(__shadow__::__edm__Ptr_reco__FFTAnyJet_reco__TrackJet_s_, core_), ::Reflex::PRIVATE)
  .AddDataMember(type_53, Reflex::Literal("key_"), OffsetOf(__shadow__::__edm__Ptr_reco__FFTAnyJet_reco__TrackJet_s_, key_), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class Ptr<reco::FFTAnyJet<reco::TrackJet> > -------------------
void __edm__Ptr_reco__FFTAnyJet_reco__TrackJet_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_16619), Reflex::Literal("operator*"), operator_30461, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_16615), Reflex::Literal("operator->"), operator_30462, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_16615), Reflex::Literal("get"), method_30463, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("isNull"), method_30464, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("isNonnull"), method_30465, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("operator!"), operator_30466, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("isAvailable"), method_30467, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("isTransient"), method_30468, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_5905), Reflex::Literal("id"), method_30469, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_25623), Reflex::Literal("productGetter"), method_30470, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_53), Reflex::Literal("key"), method_30471, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("hasProductCache"), method_30472, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_29672), Reflex::Literal("refCore"), method_30473, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4427), Reflex::Literal("product"), method_30474, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_484), Reflex::Literal("Class_Version"), method_30475, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC);
}
//------Stub functions for class Ptr<reco::FFTAnyJet<reco::PFJet> > -------------------------------
static  void operator_30482( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::Ptr<reco::FFTAnyJet<reco::PFJet> >*)o)->operator=)(*(const ::edm::Ptr<reco::FFTAnyJet<reco::PFJet> >*)arg[0]);
  else   (((::edm::Ptr<reco::FFTAnyJet<reco::PFJet> >*)o)->operator=)(*(const ::edm::Ptr<reco::FFTAnyJet<reco::PFJet> >*)arg[0]);
}

static void constructor_30483( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ptr<reco::FFTAnyJet<reco::PFJet> >(*(const ::edm::Ptr<reco::FFTAnyJet<reco::PFJet> >*)arg[0]);
  else ::new(mem) ::edm::Ptr<reco::FFTAnyJet<reco::PFJet> >(*(const ::edm::Ptr<reco::FFTAnyJet<reco::PFJet> >*)arg[0]);
}

static void constructor_30484( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ptr<reco::FFTAnyJet<reco::PFJet> >(*(const ::edm::ProductID*)arg[0],
      *(unsigned long*)arg[1],
      (const ::edm::EDProductGetter*)arg[2]);
  else ::new(mem) ::edm::Ptr<reco::FFTAnyJet<reco::PFJet> >(*(const ::edm::ProductID*)arg[0],
      *(unsigned long*)arg[1],
      (const ::edm::EDProductGetter*)arg[2]);
}

static void constructor_30485( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ptr<reco::FFTAnyJet<reco::PFJet> >(*(const ::edm::ProductID*)arg[0],
      (const ::reco::FFTAnyJet<reco::PFJet>*)arg[1],
      *(unsigned long*)arg[2]);
  else ::new(mem) ::edm::Ptr<reco::FFTAnyJet<reco::PFJet> >(*(const ::edm::ProductID*)arg[0],
      (const ::reco::FFTAnyJet<reco::PFJet>*)arg[1],
      *(unsigned long*)arg[2]);
}

static void constructor_30486( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ptr<reco::FFTAnyJet<reco::PFJet> >(*(const ::edm::ProductID*)arg[0]);
  else ::new(mem) ::edm::Ptr<reco::FFTAnyJet<reco::PFJet> >(*(const ::edm::ProductID*)arg[0]);
}

static void constructor_30487( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ptr<reco::FFTAnyJet<reco::PFJet> >();
  else ::new(mem) ::edm::Ptr<reco::FFTAnyJet<reco::PFJet> >();
}

static void destructor_30488(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::Ptr<reco::FFTAnyJet<reco::PFJet> >*)o)->::edm::Ptr<reco::FFTAnyJet<reco::PFJet> >::~Ptr)();
}
static  void operator_30489( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Ptr<reco::FFTAnyJet<reco::PFJet> >*)o)->operator*)();
  else   (((const ::edm::Ptr<reco::FFTAnyJet<reco::PFJet> >*)o)->operator*)();
}

static  void operator_30490( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Ptr<reco::FFTAnyJet<reco::PFJet> >*)o)->operator->)());
  else   (((const ::edm::Ptr<reco::FFTAnyJet<reco::PFJet> >*)o)->operator->)();
}

static  void method_30491( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Ptr<reco::FFTAnyJet<reco::PFJet> >*)o)->get)());
  else   (((const ::edm::Ptr<reco::FFTAnyJet<reco::PFJet> >*)o)->get)();
}

static  void method_30492( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Ptr<reco::FFTAnyJet<reco::PFJet> >*)o)->isNull)());
  else   (((const ::edm::Ptr<reco::FFTAnyJet<reco::PFJet> >*)o)->isNull)();
}

static  void method_30493( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Ptr<reco::FFTAnyJet<reco::PFJet> >*)o)->isNonnull)());
  else   (((const ::edm::Ptr<reco::FFTAnyJet<reco::PFJet> >*)o)->isNonnull)();
}

static  void operator_30494( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Ptr<reco::FFTAnyJet<reco::PFJet> >*)o)->operator!)());
  else   (((const ::edm::Ptr<reco::FFTAnyJet<reco::PFJet> >*)o)->operator!)();
}

static  void method_30495( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Ptr<reco::FFTAnyJet<reco::PFJet> >*)o)->isAvailable)());
  else   (((const ::edm::Ptr<reco::FFTAnyJet<reco::PFJet> >*)o)->isAvailable)();
}

static  void method_30496( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Ptr<reco::FFTAnyJet<reco::PFJet> >*)o)->isTransient)());
  else   (((const ::edm::Ptr<reco::FFTAnyJet<reco::PFJet> >*)o)->isTransient)();
}

static  void method_30497( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::ProductID)((((const ::edm::Ptr<reco::FFTAnyJet<reco::PFJet> >*)o)->id)());
  else   (((const ::edm::Ptr<reco::FFTAnyJet<reco::PFJet> >*)o)->id)();
}

static  void method_30498( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Ptr<reco::FFTAnyJet<reco::PFJet> >*)o)->productGetter)());
  else   (((const ::edm::Ptr<reco::FFTAnyJet<reco::PFJet> >*)o)->productGetter)();
}

static  void method_30499( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (unsigned long)((((const ::edm::Ptr<reco::FFTAnyJet<reco::PFJet> >*)o)->key)());
  else   (((const ::edm::Ptr<reco::FFTAnyJet<reco::PFJet> >*)o)->key)();
}

static  void method_30500( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Ptr<reco::FFTAnyJet<reco::PFJet> >*)o)->hasProductCache)());
  else   (((const ::edm::Ptr<reco::FFTAnyJet<reco::PFJet> >*)o)->hasProductCache)();
}

static  void method_30501( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Ptr<reco::FFTAnyJet<reco::PFJet> >*)o)->refCore)();
  else   (((const ::edm::Ptr<reco::FFTAnyJet<reco::PFJet> >*)o)->refCore)();
}

static  void method_30502( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Ptr<reco::FFTAnyJet<reco::PFJet> >*)o)->product)());
  else   (((const ::edm::Ptr<reco::FFTAnyJet<reco::PFJet> >*)o)->product)();
}

static  void method_30503( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (short)((((::edm::Ptr<reco::FFTAnyJet<reco::PFJet> >*)o)->Class_Version)());
  else   (((::edm::Ptr<reco::FFTAnyJet<reco::PFJet> >*)o)->Class_Version)();
}

static void method_newdel_5781( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::Ptr<reco::FFTAnyJet<reco::PFJet> > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::Ptr<reco::FFTAnyJet<reco::PFJet> > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::Ptr<reco::FFTAnyJet<reco::PFJet> > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::Ptr<reco::FFTAnyJet<reco::PFJet> > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::Ptr<reco::FFTAnyJet<reco::PFJet> > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class Ptr<reco::FFTAnyJet<reco::PFJet> > -------------------------------
void __edm__Ptr_reco__FFTAnyJet_reco__PFJet_s__db_datamem(Reflex::Class*);
void __edm__Ptr_reco__FFTAnyJet_reco__PFJet_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__Ptr_reco__FFTAnyJet_reco__PFJet_s__datamem_bld(&__edm__Ptr_reco__FFTAnyJet_reco__PFJet_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__Ptr_reco__FFTAnyJet_reco__PFJet_s__funcmem_bld(&__edm__Ptr_reco__FFTAnyJet_reco__PFJet_s__db_funcmem);
void __edm__Ptr_reco__FFTAnyJet_reco__PFJet_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::Ptr<reco::FFTAnyJet<reco::PFJet> >"), typeid(::edm::Ptr<reco::FFTAnyJet<reco::PFJet> >), sizeof(::edm::Ptr<reco::FFTAnyJet<reco::PFJet> >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("ClassVersion"), ::edm::Ptr<reco::FFTAnyJet<reco::PFJet> >::Class_Version())
  .AddProperty(Reflex::Literal("o_name"), "edm::Ptr<reco::FFTPFJet>")
  .AddTypedef(type_53, Reflex::Literal("edm::Ptr<reco::FFTAnyJet<reco::PFJet> >::key_type"))
  .AddTypedef(type_8933, Reflex::Literal("edm::Ptr<reco::FFTAnyJet<reco::PFJet> >::value_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_48885, type_48075), Reflex::Literal("operator="), operator_30482, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_48075), Reflex::Literal("Ptr"), constructor_30483, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_25503, type_53, type_25623), Reflex::Literal("Ptr"), constructor_30484, 0, "productID;itemKey;prodGetter", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_25503, type_16810, type_53), Reflex::Literal("Ptr"), constructor_30485, 0, "productID;item;item_key", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_25503), Reflex::Literal("Ptr"), constructor_30486, 0, "iId", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("Ptr"), constructor_30487, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~Ptr"), destructor_30488, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_5781, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__Ptr_reco__FFTAnyJet_reco__PFJet_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__Ptr_reco__FFTAnyJet_reco__PFJet_s__funcmem_bld);
}

//------Delayed data member builder for class Ptr<reco::FFTAnyJet<reco::PFJet> > -------------------
void __edm__Ptr_reco__FFTAnyJet_reco__PFJet_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_5697, Reflex::Literal("core_"), OffsetOf(__shadow__::__edm__Ptr_reco__FFTAnyJet_reco__PFJet_s_, core_), ::Reflex::PRIVATE)
  .AddDataMember(type_53, Reflex::Literal("key_"), OffsetOf(__shadow__::__edm__Ptr_reco__FFTAnyJet_reco__PFJet_s_, key_), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class Ptr<reco::FFTAnyJet<reco::PFJet> > -------------------
void __edm__Ptr_reco__FFTAnyJet_reco__PFJet_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_16814), Reflex::Literal("operator*"), operator_30489, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_16810), Reflex::Literal("operator->"), operator_30490, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_16810), Reflex::Literal("get"), method_30491, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("isNull"), method_30492, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("isNonnull"), method_30493, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("operator!"), operator_30494, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("isAvailable"), method_30495, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("isTransient"), method_30496, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_5905), Reflex::Literal("id"), method_30497, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_25623), Reflex::Literal("productGetter"), method_30498, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_53), Reflex::Literal("key"), method_30499, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("hasProductCache"), method_30500, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_29672), Reflex::Literal("refCore"), method_30501, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4427), Reflex::Literal("product"), method_30502, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_484), Reflex::Literal("Class_Version"), method_30503, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC);
}
//------Stub functions for class Ptr<reco::FFTAnyJet<reco::BasicJet> > -------------------------------
static  void operator_30510( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::Ptr<reco::FFTAnyJet<reco::BasicJet> >*)o)->operator=)(*(const ::edm::Ptr<reco::FFTAnyJet<reco::BasicJet> >*)arg[0]);
  else   (((::edm::Ptr<reco::FFTAnyJet<reco::BasicJet> >*)o)->operator=)(*(const ::edm::Ptr<reco::FFTAnyJet<reco::BasicJet> >*)arg[0]);
}

static void constructor_30511( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ptr<reco::FFTAnyJet<reco::BasicJet> >(*(const ::edm::Ptr<reco::FFTAnyJet<reco::BasicJet> >*)arg[0]);
  else ::new(mem) ::edm::Ptr<reco::FFTAnyJet<reco::BasicJet> >(*(const ::edm::Ptr<reco::FFTAnyJet<reco::BasicJet> >*)arg[0]);
}

static void constructor_30512( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ptr<reco::FFTAnyJet<reco::BasicJet> >(*(const ::edm::ProductID*)arg[0],
      *(unsigned long*)arg[1],
      (const ::edm::EDProductGetter*)arg[2]);
  else ::new(mem) ::edm::Ptr<reco::FFTAnyJet<reco::BasicJet> >(*(const ::edm::ProductID*)arg[0],
      *(unsigned long*)arg[1],
      (const ::edm::EDProductGetter*)arg[2]);
}

static void constructor_30513( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ptr<reco::FFTAnyJet<reco::BasicJet> >(*(const ::edm::ProductID*)arg[0],
      (const ::reco::FFTAnyJet<reco::BasicJet>*)arg[1],
      *(unsigned long*)arg[2]);
  else ::new(mem) ::edm::Ptr<reco::FFTAnyJet<reco::BasicJet> >(*(const ::edm::ProductID*)arg[0],
      (const ::reco::FFTAnyJet<reco::BasicJet>*)arg[1],
      *(unsigned long*)arg[2]);
}

static void constructor_30514( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ptr<reco::FFTAnyJet<reco::BasicJet> >(*(const ::edm::ProductID*)arg[0]);
  else ::new(mem) ::edm::Ptr<reco::FFTAnyJet<reco::BasicJet> >(*(const ::edm::ProductID*)arg[0]);
}

static void constructor_30515( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ptr<reco::FFTAnyJet<reco::BasicJet> >();
  else ::new(mem) ::edm::Ptr<reco::FFTAnyJet<reco::BasicJet> >();
}

static void destructor_30516(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::Ptr<reco::FFTAnyJet<reco::BasicJet> >*)o)->::edm::Ptr<reco::FFTAnyJet<reco::BasicJet> >::~Ptr)();
}
static  void operator_30517( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Ptr<reco::FFTAnyJet<reco::BasicJet> >*)o)->operator*)();
  else   (((const ::edm::Ptr<reco::FFTAnyJet<reco::BasicJet> >*)o)->operator*)();
}

static  void operator_30518( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Ptr<reco::FFTAnyJet<reco::BasicJet> >*)o)->operator->)());
  else   (((const ::edm::Ptr<reco::FFTAnyJet<reco::BasicJet> >*)o)->operator->)();
}

static  void method_30519( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Ptr<reco::FFTAnyJet<reco::BasicJet> >*)o)->get)());
  else   (((const ::edm::Ptr<reco::FFTAnyJet<reco::BasicJet> >*)o)->get)();
}

static  void method_30520( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Ptr<reco::FFTAnyJet<reco::BasicJet> >*)o)->isNull)());
  else   (((const ::edm::Ptr<reco::FFTAnyJet<reco::BasicJet> >*)o)->isNull)();
}

static  void method_30521( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Ptr<reco::FFTAnyJet<reco::BasicJet> >*)o)->isNonnull)());
  else   (((const ::edm::Ptr<reco::FFTAnyJet<reco::BasicJet> >*)o)->isNonnull)();
}

static  void operator_30522( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Ptr<reco::FFTAnyJet<reco::BasicJet> >*)o)->operator!)());
  else   (((const ::edm::Ptr<reco::FFTAnyJet<reco::BasicJet> >*)o)->operator!)();
}

static  void method_30523( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Ptr<reco::FFTAnyJet<reco::BasicJet> >*)o)->isAvailable)());
  else   (((const ::edm::Ptr<reco::FFTAnyJet<reco::BasicJet> >*)o)->isAvailable)();
}

static  void method_30524( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Ptr<reco::FFTAnyJet<reco::BasicJet> >*)o)->isTransient)());
  else   (((const ::edm::Ptr<reco::FFTAnyJet<reco::BasicJet> >*)o)->isTransient)();
}

static  void method_30525( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::ProductID)((((const ::edm::Ptr<reco::FFTAnyJet<reco::BasicJet> >*)o)->id)());
  else   (((const ::edm::Ptr<reco::FFTAnyJet<reco::BasicJet> >*)o)->id)();
}

static  void method_30526( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Ptr<reco::FFTAnyJet<reco::BasicJet> >*)o)->productGetter)());
  else   (((const ::edm::Ptr<reco::FFTAnyJet<reco::BasicJet> >*)o)->productGetter)();
}

static  void method_30527( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (unsigned long)((((const ::edm::Ptr<reco::FFTAnyJet<reco::BasicJet> >*)o)->key)());
  else   (((const ::edm::Ptr<reco::FFTAnyJet<reco::BasicJet> >*)o)->key)();
}

static  void method_30528( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Ptr<reco::FFTAnyJet<reco::BasicJet> >*)o)->hasProductCache)());
  else   (((const ::edm::Ptr<reco::FFTAnyJet<reco::BasicJet> >*)o)->hasProductCache)();
}

static  void method_30529( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Ptr<reco::FFTAnyJet<reco::BasicJet> >*)o)->refCore)();
  else   (((const ::edm::Ptr<reco::FFTAnyJet<reco::BasicJet> >*)o)->refCore)();
}

static  void method_30530( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Ptr<reco::FFTAnyJet<reco::BasicJet> >*)o)->product)());
  else   (((const ::edm::Ptr<reco::FFTAnyJet<reco::BasicJet> >*)o)->product)();
}

static  void method_30531( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (short)((((::edm::Ptr<reco::FFTAnyJet<reco::BasicJet> >*)o)->Class_Version)());
  else   (((::edm::Ptr<reco::FFTAnyJet<reco::BasicJet> >*)o)->Class_Version)();
}

static void method_newdel_5782( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::Ptr<reco::FFTAnyJet<reco::BasicJet> > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::Ptr<reco::FFTAnyJet<reco::BasicJet> > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::Ptr<reco::FFTAnyJet<reco::BasicJet> > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::Ptr<reco::FFTAnyJet<reco::BasicJet> > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::Ptr<reco::FFTAnyJet<reco::BasicJet> > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class Ptr<reco::FFTAnyJet<reco::BasicJet> > -------------------------------
void __edm__Ptr_reco__FFTAnyJet_reco__BasicJet_s__db_datamem(Reflex::Class*);
void __edm__Ptr_reco__FFTAnyJet_reco__BasicJet_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__Ptr_reco__FFTAnyJet_reco__BasicJet_s__datamem_bld(&__edm__Ptr_reco__FFTAnyJet_reco__BasicJet_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__Ptr_reco__FFTAnyJet_reco__BasicJet_s__funcmem_bld(&__edm__Ptr_reco__FFTAnyJet_reco__BasicJet_s__db_funcmem);
void __edm__Ptr_reco__FFTAnyJet_reco__BasicJet_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::Ptr<reco::FFTAnyJet<reco::BasicJet> >"), typeid(::edm::Ptr<reco::FFTAnyJet<reco::BasicJet> >), sizeof(::edm::Ptr<reco::FFTAnyJet<reco::BasicJet> >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("ClassVersion"), ::edm::Ptr<reco::FFTAnyJet<reco::BasicJet> >::Class_Version())
  .AddProperty(Reflex::Literal("o_name"), "edm::Ptr<reco::FFTBasicJet>")
  .AddTypedef(type_53, Reflex::Literal("edm::Ptr<reco::FFTAnyJet<reco::BasicJet> >::key_type"))
  .AddTypedef(type_8934, Reflex::Literal("edm::Ptr<reco::FFTAnyJet<reco::BasicJet> >::value_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_48886, type_48078), Reflex::Literal("operator="), operator_30510, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_48078), Reflex::Literal("Ptr"), constructor_30511, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_25503, type_53, type_25623), Reflex::Literal("Ptr"), constructor_30512, 0, "productID;itemKey;prodGetter", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_25503, type_17005, type_53), Reflex::Literal("Ptr"), constructor_30513, 0, "productID;item;item_key", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_25503), Reflex::Literal("Ptr"), constructor_30514, 0, "iId", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("Ptr"), constructor_30515, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~Ptr"), destructor_30516, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_5782, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__Ptr_reco__FFTAnyJet_reco__BasicJet_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__Ptr_reco__FFTAnyJet_reco__BasicJet_s__funcmem_bld);
}

//------Delayed data member builder for class Ptr<reco::FFTAnyJet<reco::BasicJet> > -------------------
void __edm__Ptr_reco__FFTAnyJet_reco__BasicJet_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_5697, Reflex::Literal("core_"), OffsetOf(__shadow__::__edm__Ptr_reco__FFTAnyJet_reco__BasicJet_s_, core_), ::Reflex::PRIVATE)
  .AddDataMember(type_53, Reflex::Literal("key_"), OffsetOf(__shadow__::__edm__Ptr_reco__FFTAnyJet_reco__BasicJet_s_, key_), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class Ptr<reco::FFTAnyJet<reco::BasicJet> > -------------------
void __edm__Ptr_reco__FFTAnyJet_reco__BasicJet_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_17009), Reflex::Literal("operator*"), operator_30517, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_17005), Reflex::Literal("operator->"), operator_30518, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_17005), Reflex::Literal("get"), method_30519, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("isNull"), method_30520, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("isNonnull"), method_30521, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("operator!"), operator_30522, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("isAvailable"), method_30523, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("isTransient"), method_30524, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_5905), Reflex::Literal("id"), method_30525, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_25623), Reflex::Literal("productGetter"), method_30526, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_53), Reflex::Literal("key"), method_30527, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("hasProductCache"), method_30528, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_29672), Reflex::Literal("refCore"), method_30529, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4427), Reflex::Literal("product"), method_30530, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_484), Reflex::Literal("Class_Version"), method_30531, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC);
}
//------Stub functions for class JetTrackMatch<std::vector<reco::FFTAnyJet<reco::JPTJet>, std::allocator<reco::FFTAnyJet<reco::JPTJet> > > > -------------------------------
static  void operator_34502( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::reco::JetTrackMatch<std::vector<reco::FFTAnyJet<reco::JPTJet> > >*)o)->operator=)(*(const ::reco::JetTrackMatch<std::vector<reco::FFTAnyJet<reco::JPTJet> > >*)arg[0]);
  else   (((::reco::JetTrackMatch<std::vector<reco::FFTAnyJet<reco::JPTJet> > >*)o)->operator=)(*(const ::reco::JetTrackMatch<std::vector<reco::FFTAnyJet<reco::JPTJet> > >*)arg[0]);
}

static void constructor_34503( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::reco::JetTrackMatch<std::vector<reco::FFTAnyJet<reco::JPTJet> > >(*(const ::reco::JetTrackMatch<std::vector<reco::FFTAnyJet<reco::JPTJet> > >*)arg[0]);
  else ::new(mem) ::reco::JetTrackMatch<std::vector<reco::FFTAnyJet<reco::JPTJet> > >(*(const ::reco::JetTrackMatch<std::vector<reco::FFTAnyJet<reco::JPTJet> > >*)arg[0]);
}

static void constructor_34504( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::reco::JetTrackMatch<std::vector<reco::FFTAnyJet<reco::JPTJet> > >();
  else ::new(mem) ::reco::JetTrackMatch<std::vector<reco::FFTAnyJet<reco::JPTJet> > >();
}

static void destructor_34505(void*, void * o, const std::vector<void*>&, void *) {
(((::reco::JetTrackMatch<std::vector<reco::FFTAnyJet<reco::JPTJet> > >*)o)->::reco::JetTrackMatch<std::vector<reco::FFTAnyJet<reco::JPTJet> > >::~JetTrackMatch)();
}
static  void method_34506( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::reco::JetTrackMatch<std::vector<reco::FFTAnyJet<reco::JPTJet> > >*)o)->insert)(*(const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)arg[0]);
}

static  void method_34507( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::reco::JetTrackMatch<std::vector<reco::FFTAnyJet<reco::JPTJet> > >*)o)->insert)(*(const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)arg[0],
    *(const ::edm::Ref<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> >*)arg[1]);
}

static  void method_34508( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::vector<edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >)((((const ::reco::JetTrackMatch<std::vector<reco::FFTAnyJet<reco::JPTJet> > >*)o)->allJets)());
  else   (((const ::reco::JetTrackMatch<std::vector<reco::FFTAnyJet<reco::JPTJet> > >*)o)->allJets)();
}

static  void method_34509( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (std::vector<edm::Ref<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >)((((const ::reco::JetTrackMatch<std::vector<reco::FFTAnyJet<reco::JPTJet> > >*)o)->getTracks)(*(const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)arg[0]));
  else   (((const ::reco::JetTrackMatch<std::vector<reco::FFTAnyJet<reco::JPTJet> > >*)o)->getTracks)(*(const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)arg[0]);
}

static void method_newdel_8968( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::reco::JetTrackMatch<std::vector<reco::FFTAnyJet<reco::JPTJet> > > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::reco::JetTrackMatch<std::vector<reco::FFTAnyJet<reco::JPTJet> > > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::reco::JetTrackMatch<std::vector<reco::FFTAnyJet<reco::JPTJet> > > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::reco::JetTrackMatch<std::vector<reco::FFTAnyJet<reco::JPTJet> > > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::reco::JetTrackMatch<std::vector<reco::FFTAnyJet<reco::JPTJet> > > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class JetTrackMatch<std::vector<reco::FFTAnyJet<reco::JPTJet>, std::allocator<reco::FFTAnyJet<reco::JPTJet> > > > -------------------------------
void __reco__JetTrackMatch_std__vector_reco__FFTAnyJet_reco__JPTJet_s_s__db_datamem(Reflex::Class*);
void __reco__JetTrackMatch_std__vector_reco__FFTAnyJet_reco__JPTJet_s_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __reco__JetTrackMatch_std__vector_reco__FFTAnyJet_reco__JPTJet_s_s__datamem_bld(&__reco__JetTrackMatch_std__vector_reco__FFTAnyJet_reco__JPTJet_s_s__db_datamem);
Reflex::GenreflexMemberBuilder __reco__JetTrackMatch_std__vector_reco__FFTAnyJet_reco__JPTJet_s_s__funcmem_bld(&__reco__JetTrackMatch_std__vector_reco__FFTAnyJet_reco__JPTJet_s_s__db_funcmem);
void __reco__JetTrackMatch_std__vector_reco__FFTAnyJet_reco__JPTJet_s_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("reco::JetTrackMatch<std::vector<reco::FFTAnyJet<reco::JPTJet> > >"), typeid(::reco::JetTrackMatch<std::vector<reco::FFTAnyJet<reco::JPTJet> > >), sizeof(::reco::JetTrackMatch<std::vector<reco::FFTAnyJet<reco::JPTJet> > >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("o_name"), "reco::JetTrackMatch<reco::FFTJPTJetCollection>")
  .AddTypedef(type_5811, Reflex::Literal("reco::JetTrackMatch<std::vector<reco::FFTAnyJet<reco::JPTJet> > >::JetRef"))
  .AddTypedef(type_5812, Reflex::Literal("reco::JetTrackMatch<std::vector<reco::FFTAnyJet<reco::JPTJet> > >::TrackRef"))
  .AddTypedef(type_5479, Reflex::Literal("reco::JetTrackMatch<std::vector<reco::FFTAnyJet<reco::JPTJet> > >::Map"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_49987, type_49988), Reflex::Literal("operator="), operator_34502, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_49988), Reflex::Literal("JetTrackMatch"), constructor_34503, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("JetTrackMatch"), constructor_34504, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~JetTrackMatch"), destructor_34505, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_8968, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__reco__JetTrackMatch_std__vector_reco__FFTAnyJet_reco__JPTJet_s_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__reco__JetTrackMatch_std__vector_reco__FFTAnyJet_reco__JPTJet_s_s__funcmem_bld);
}

//------Delayed data member builder for class JetTrackMatch<std::vector<reco::FFTAnyJet<reco::JPTJet>, std::allocator<reco::FFTAnyJet<reco::JPTJet> > > > -------------------
void __reco__JetTrackMatch_std__vector_reco__FFTAnyJet_reco__JPTJet_s_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_5479, Reflex::Literal("mMap"), OffsetOf(__shadow__::__reco__JetTrackMatch_std__vector_reco__FFTAnyJet_reco__JPTJet_s_s_, mMap), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class JetTrackMatch<std::vector<reco::FFTAnyJet<reco::JPTJet>, std::allocator<reco::FFTAnyJet<reco::JPTJet> > > > -------------------
void __reco__JetTrackMatch_std__vector_reco__FFTAnyJet_reco__JPTJet_s_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_47477), Reflex::Literal("insert"), method_34506, 0, "fJet", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_47477, type_16164), Reflex::Literal("insert"), method_34507, 0, "fJet;fTrack", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3113), Reflex::Literal("allJets"), method_34508, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3111, type_47477), Reflex::Literal("getTracks"), method_34509, 0, "mJet", ::Reflex::PUBLIC | ::Reflex::CONST);
}
//------Stub functions for class JetTrackMatch<std::vector<reco::FFTAnyJet<reco::TrackJet>, std::allocator<reco::FFTAnyJet<reco::TrackJet> > > > -------------------------------
static  void operator_34514( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::reco::JetTrackMatch<std::vector<reco::FFTAnyJet<reco::TrackJet> > >*)o)->operator=)(*(const ::reco::JetTrackMatch<std::vector<reco::FFTAnyJet<reco::TrackJet> > >*)arg[0]);
  else   (((::reco::JetTrackMatch<std::vector<reco::FFTAnyJet<reco::TrackJet> > >*)o)->operator=)(*(const ::reco::JetTrackMatch<std::vector<reco::FFTAnyJet<reco::TrackJet> > >*)arg[0]);
}

static void constructor_34515( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::reco::JetTrackMatch<std::vector<reco::FFTAnyJet<reco::TrackJet> > >(*(const ::reco::JetTrackMatch<std::vector<reco::FFTAnyJet<reco::TrackJet> > >*)arg[0]);
  else ::new(mem) ::reco::JetTrackMatch<std::vector<reco::FFTAnyJet<reco::TrackJet> > >(*(const ::reco::JetTrackMatch<std::vector<reco::FFTAnyJet<reco::TrackJet> > >*)arg[0]);
}

static void constructor_34516( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::reco::JetTrackMatch<std::vector<reco::FFTAnyJet<reco::TrackJet> > >();
  else ::new(mem) ::reco::JetTrackMatch<std::vector<reco::FFTAnyJet<reco::TrackJet> > >();
}

static void destructor_34517(void*, void * o, const std::vector<void*>&, void *) {
(((::reco::JetTrackMatch<std::vector<reco::FFTAnyJet<reco::TrackJet> > >*)o)->::reco::JetTrackMatch<std::vector<reco::FFTAnyJet<reco::TrackJet> > >::~JetTrackMatch)();
}
static  void method_34518( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::reco::JetTrackMatch<std::vector<reco::FFTAnyJet<reco::TrackJet> > >*)o)->insert)(*(const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)arg[0]);
}

static  void method_34519( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::reco::JetTrackMatch<std::vector<reco::FFTAnyJet<reco::TrackJet> > >*)o)->insert)(*(const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)arg[0],
    *(const ::edm::Ref<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> >*)arg[1]);
}

static  void method_34520( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::vector<edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >)((((const ::reco::JetTrackMatch<std::vector<reco::FFTAnyJet<reco::TrackJet> > >*)o)->allJets)());
  else   (((const ::reco::JetTrackMatch<std::vector<reco::FFTAnyJet<reco::TrackJet> > >*)o)->allJets)();
}

static  void method_34521( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (std::vector<edm::Ref<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >)((((const ::reco::JetTrackMatch<std::vector<reco::FFTAnyJet<reco::TrackJet> > >*)o)->getTracks)(*(const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)arg[0]));
  else   (((const ::reco::JetTrackMatch<std::vector<reco::FFTAnyJet<reco::TrackJet> > >*)o)->getTracks)(*(const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)arg[0]);
}

static void method_newdel_8969( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::reco::JetTrackMatch<std::vector<reco::FFTAnyJet<reco::TrackJet> > > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::reco::JetTrackMatch<std::vector<reco::FFTAnyJet<reco::TrackJet> > > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::reco::JetTrackMatch<std::vector<reco::FFTAnyJet<reco::TrackJet> > > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::reco::JetTrackMatch<std::vector<reco::FFTAnyJet<reco::TrackJet> > > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::reco::JetTrackMatch<std::vector<reco::FFTAnyJet<reco::TrackJet> > > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class JetTrackMatch<std::vector<reco::FFTAnyJet<reco::TrackJet>, std::allocator<reco::FFTAnyJet<reco::TrackJet> > > > -------------------------------
void __reco__JetTrackMatch_std__vector_reco__FFTAnyJet_reco__TrackJet_s_s__db_datamem(Reflex::Class*);
void __reco__JetTrackMatch_std__vector_reco__FFTAnyJet_reco__TrackJet_s_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __reco__JetTrackMatch_std__vector_reco__FFTAnyJet_reco__TrackJet_s_s__datamem_bld(&__reco__JetTrackMatch_std__vector_reco__FFTAnyJet_reco__TrackJet_s_s__db_datamem);
Reflex::GenreflexMemberBuilder __reco__JetTrackMatch_std__vector_reco__FFTAnyJet_reco__TrackJet_s_s__funcmem_bld(&__reco__JetTrackMatch_std__vector_reco__FFTAnyJet_reco__TrackJet_s_s__db_funcmem);
void __reco__JetTrackMatch_std__vector_reco__FFTAnyJet_reco__TrackJet_s_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("reco::JetTrackMatch<std::vector<reco::FFTAnyJet<reco::TrackJet> > >"), typeid(::reco::JetTrackMatch<std::vector<reco::FFTAnyJet<reco::TrackJet> > >), sizeof(::reco::JetTrackMatch<std::vector<reco::FFTAnyJet<reco::TrackJet> > >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("o_name"), "reco::JetTrackMatch<reco::FFTTrackJetCollection>")
  .AddTypedef(type_5813, Reflex::Literal("reco::JetTrackMatch<std::vector<reco::FFTAnyJet<reco::TrackJet> > >::JetRef"))
  .AddTypedef(type_5812, Reflex::Literal("reco::JetTrackMatch<std::vector<reco::FFTAnyJet<reco::TrackJet> > >::TrackRef"))
  .AddTypedef(type_5480, Reflex::Literal("reco::JetTrackMatch<std::vector<reco::FFTAnyJet<reco::TrackJet> > >::Map"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_49989, type_49990), Reflex::Literal("operator="), operator_34514, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_49990), Reflex::Literal("JetTrackMatch"), constructor_34515, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("JetTrackMatch"), constructor_34516, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~JetTrackMatch"), destructor_34517, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_8969, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__reco__JetTrackMatch_std__vector_reco__FFTAnyJet_reco__TrackJet_s_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__reco__JetTrackMatch_std__vector_reco__FFTAnyJet_reco__TrackJet_s_s__funcmem_bld);
}

//------Delayed data member builder for class JetTrackMatch<std::vector<reco::FFTAnyJet<reco::TrackJet>, std::allocator<reco::FFTAnyJet<reco::TrackJet> > > > -------------------
void __reco__JetTrackMatch_std__vector_reco__FFTAnyJet_reco__TrackJet_s_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_5480, Reflex::Literal("mMap"), OffsetOf(__shadow__::__reco__JetTrackMatch_std__vector_reco__FFTAnyJet_reco__TrackJet_s_s_, mMap), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class JetTrackMatch<std::vector<reco::FFTAnyJet<reco::TrackJet>, std::allocator<reco::FFTAnyJet<reco::TrackJet> > > > -------------------
void __reco__JetTrackMatch_std__vector_reco__FFTAnyJet_reco__TrackJet_s_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_47491), Reflex::Literal("insert"), method_34518, 0, "fJet", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_47491, type_16164), Reflex::Literal("insert"), method_34519, 0, "fJet;fTrack", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3120), Reflex::Literal("allJets"), method_34520, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3111, type_47491), Reflex::Literal("getTracks"), method_34521, 0, "mJet", ::Reflex::PUBLIC | ::Reflex::CONST);
}
//------Stub functions for class JetTrackMatch<std::vector<reco::FFTAnyJet<reco::PFJet>, std::allocator<reco::FFTAnyJet<reco::PFJet> > > > -------------------------------
static  void operator_34526( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::reco::JetTrackMatch<std::vector<reco::FFTAnyJet<reco::PFJet> > >*)o)->operator=)(*(const ::reco::JetTrackMatch<std::vector<reco::FFTAnyJet<reco::PFJet> > >*)arg[0]);
  else   (((::reco::JetTrackMatch<std::vector<reco::FFTAnyJet<reco::PFJet> > >*)o)->operator=)(*(const ::reco::JetTrackMatch<std::vector<reco::FFTAnyJet<reco::PFJet> > >*)arg[0]);
}

static void constructor_34527( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::reco::JetTrackMatch<std::vector<reco::FFTAnyJet<reco::PFJet> > >(*(const ::reco::JetTrackMatch<std::vector<reco::FFTAnyJet<reco::PFJet> > >*)arg[0]);
  else ::new(mem) ::reco::JetTrackMatch<std::vector<reco::FFTAnyJet<reco::PFJet> > >(*(const ::reco::JetTrackMatch<std::vector<reco::FFTAnyJet<reco::PFJet> > >*)arg[0]);
}

static void constructor_34528( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::reco::JetTrackMatch<std::vector<reco::FFTAnyJet<reco::PFJet> > >();
  else ::new(mem) ::reco::JetTrackMatch<std::vector<reco::FFTAnyJet<reco::PFJet> > >();
}

static void destructor_34529(void*, void * o, const std::vector<void*>&, void *) {
(((::reco::JetTrackMatch<std::vector<reco::FFTAnyJet<reco::PFJet> > >*)o)->::reco::JetTrackMatch<std::vector<reco::FFTAnyJet<reco::PFJet> > >::~JetTrackMatch)();
}
static  void method_34530( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::reco::JetTrackMatch<std::vector<reco::FFTAnyJet<reco::PFJet> > >*)o)->insert)(*(const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)arg[0]);
}

static  void method_34531( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::reco::JetTrackMatch<std::vector<reco::FFTAnyJet<reco::PFJet> > >*)o)->insert)(*(const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)arg[0],
    *(const ::edm::Ref<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> >*)arg[1]);
}

static  void method_34532( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::vector<edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >)((((const ::reco::JetTrackMatch<std::vector<reco::FFTAnyJet<reco::PFJet> > >*)o)->allJets)());
  else   (((const ::reco::JetTrackMatch<std::vector<reco::FFTAnyJet<reco::PFJet> > >*)o)->allJets)();
}

static  void method_34533( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (std::vector<edm::Ref<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >)((((const ::reco::JetTrackMatch<std::vector<reco::FFTAnyJet<reco::PFJet> > >*)o)->getTracks)(*(const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)arg[0]));
  else   (((const ::reco::JetTrackMatch<std::vector<reco::FFTAnyJet<reco::PFJet> > >*)o)->getTracks)(*(const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)arg[0]);
}

static void method_newdel_8970( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::reco::JetTrackMatch<std::vector<reco::FFTAnyJet<reco::PFJet> > > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::reco::JetTrackMatch<std::vector<reco::FFTAnyJet<reco::PFJet> > > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::reco::JetTrackMatch<std::vector<reco::FFTAnyJet<reco::PFJet> > > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::reco::JetTrackMatch<std::vector<reco::FFTAnyJet<reco::PFJet> > > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::reco::JetTrackMatch<std::vector<reco::FFTAnyJet<reco::PFJet> > > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class JetTrackMatch<std::vector<reco::FFTAnyJet<reco::PFJet>, std::allocator<reco::FFTAnyJet<reco::PFJet> > > > -------------------------------
void __reco__JetTrackMatch_std__vector_reco__FFTAnyJet_reco__PFJet_s_s__db_datamem(Reflex::Class*);
void __reco__JetTrackMatch_std__vector_reco__FFTAnyJet_reco__PFJet_s_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __reco__JetTrackMatch_std__vector_reco__FFTAnyJet_reco__PFJet_s_s__datamem_bld(&__reco__JetTrackMatch_std__vector_reco__FFTAnyJet_reco__PFJet_s_s__db_datamem);
Reflex::GenreflexMemberBuilder __reco__JetTrackMatch_std__vector_reco__FFTAnyJet_reco__PFJet_s_s__funcmem_bld(&__reco__JetTrackMatch_std__vector_reco__FFTAnyJet_reco__PFJet_s_s__db_funcmem);
void __reco__JetTrackMatch_std__vector_reco__FFTAnyJet_reco__PFJet_s_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("reco::JetTrackMatch<std::vector<reco::FFTAnyJet<reco::PFJet> > >"), typeid(::reco::JetTrackMatch<std::vector<reco::FFTAnyJet<reco::PFJet> > >), sizeof(::reco::JetTrackMatch<std::vector<reco::FFTAnyJet<reco::PFJet> > >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("o_name"), "reco::JetTrackMatch<reco::FFTPFJetCollection>")
  .AddTypedef(type_5814, Reflex::Literal("reco::JetTrackMatch<std::vector<reco::FFTAnyJet<reco::PFJet> > >::JetRef"))
  .AddTypedef(type_5812, Reflex::Literal("reco::JetTrackMatch<std::vector<reco::FFTAnyJet<reco::PFJet> > >::TrackRef"))
  .AddTypedef(type_5481, Reflex::Literal("reco::JetTrackMatch<std::vector<reco::FFTAnyJet<reco::PFJet> > >::Map"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_49991, type_49992), Reflex::Literal("operator="), operator_34526, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_49992), Reflex::Literal("JetTrackMatch"), constructor_34527, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("JetTrackMatch"), constructor_34528, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~JetTrackMatch"), destructor_34529, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_8970, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__reco__JetTrackMatch_std__vector_reco__FFTAnyJet_reco__PFJet_s_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__reco__JetTrackMatch_std__vector_reco__FFTAnyJet_reco__PFJet_s_s__funcmem_bld);
}

//------Delayed data member builder for class JetTrackMatch<std::vector<reco::FFTAnyJet<reco::PFJet>, std::allocator<reco::FFTAnyJet<reco::PFJet> > > > -------------------
void __reco__JetTrackMatch_std__vector_reco__FFTAnyJet_reco__PFJet_s_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_5481, Reflex::Literal("mMap"), OffsetOf(__shadow__::__reco__JetTrackMatch_std__vector_reco__FFTAnyJet_reco__PFJet_s_s_, mMap), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class JetTrackMatch<std::vector<reco::FFTAnyJet<reco::PFJet>, std::allocator<reco::FFTAnyJet<reco::PFJet> > > > -------------------
void __reco__JetTrackMatch_std__vector_reco__FFTAnyJet_reco__PFJet_s_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_47505), Reflex::Literal("insert"), method_34530, 0, "fJet", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_47505, type_16164), Reflex::Literal("insert"), method_34531, 0, "fJet;fTrack", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3125), Reflex::Literal("allJets"), method_34532, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3111, type_47505), Reflex::Literal("getTracks"), method_34533, 0, "mJet", ::Reflex::PUBLIC | ::Reflex::CONST);
}
//------Stub functions for class JetTrackMatch<std::vector<reco::FFTAnyJet<reco::BasicJet>, std::allocator<reco::FFTAnyJet<reco::BasicJet> > > > -------------------------------
static  void operator_34538( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::reco::JetTrackMatch<std::vector<reco::FFTAnyJet<reco::BasicJet> > >*)o)->operator=)(*(const ::reco::JetTrackMatch<std::vector<reco::FFTAnyJet<reco::BasicJet> > >*)arg[0]);
  else   (((::reco::JetTrackMatch<std::vector<reco::FFTAnyJet<reco::BasicJet> > >*)o)->operator=)(*(const ::reco::JetTrackMatch<std::vector<reco::FFTAnyJet<reco::BasicJet> > >*)arg[0]);
}

static void constructor_34539( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::reco::JetTrackMatch<std::vector<reco::FFTAnyJet<reco::BasicJet> > >(*(const ::reco::JetTrackMatch<std::vector<reco::FFTAnyJet<reco::BasicJet> > >*)arg[0]);
  else ::new(mem) ::reco::JetTrackMatch<std::vector<reco::FFTAnyJet<reco::BasicJet> > >(*(const ::reco::JetTrackMatch<std::vector<reco::FFTAnyJet<reco::BasicJet> > >*)arg[0]);
}

static void constructor_34540( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::reco::JetTrackMatch<std::vector<reco::FFTAnyJet<reco::BasicJet> > >();
  else ::new(mem) ::reco::JetTrackMatch<std::vector<reco::FFTAnyJet<reco::BasicJet> > >();
}

static void destructor_34541(void*, void * o, const std::vector<void*>&, void *) {
(((::reco::JetTrackMatch<std::vector<reco::FFTAnyJet<reco::BasicJet> > >*)o)->::reco::JetTrackMatch<std::vector<reco::FFTAnyJet<reco::BasicJet> > >::~JetTrackMatch)();
}
static  void method_34542( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::reco::JetTrackMatch<std::vector<reco::FFTAnyJet<reco::BasicJet> > >*)o)->insert)(*(const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)arg[0]);
}

static  void method_34543( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::reco::JetTrackMatch<std::vector<reco::FFTAnyJet<reco::BasicJet> > >*)o)->insert)(*(const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)arg[0],
    *(const ::edm::Ref<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> >*)arg[1]);
}

static  void method_34544( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::vector<edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >)((((const ::reco::JetTrackMatch<std::vector<reco::FFTAnyJet<reco::BasicJet> > >*)o)->allJets)());
  else   (((const ::reco::JetTrackMatch<std::vector<reco::FFTAnyJet<reco::BasicJet> > >*)o)->allJets)();
}

static  void method_34545( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (std::vector<edm::Ref<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >)((((const ::reco::JetTrackMatch<std::vector<reco::FFTAnyJet<reco::BasicJet> > >*)o)->getTracks)(*(const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)arg[0]));
  else   (((const ::reco::JetTrackMatch<std::vector<reco::FFTAnyJet<reco::BasicJet> > >*)o)->getTracks)(*(const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)arg[0]);
}

static void method_newdel_8971( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::reco::JetTrackMatch<std::vector<reco::FFTAnyJet<reco::BasicJet> > > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::reco::JetTrackMatch<std::vector<reco::FFTAnyJet<reco::BasicJet> > > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::reco::JetTrackMatch<std::vector<reco::FFTAnyJet<reco::BasicJet> > > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::reco::JetTrackMatch<std::vector<reco::FFTAnyJet<reco::BasicJet> > > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::reco::JetTrackMatch<std::vector<reco::FFTAnyJet<reco::BasicJet> > > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class JetTrackMatch<std::vector<reco::FFTAnyJet<reco::BasicJet>, std::allocator<reco::FFTAnyJet<reco::BasicJet> > > > -------------------------------
void __reco__JetTrackMatch_std__vector_reco__FFTAnyJet_reco__BasicJet_s_s__db_datamem(Reflex::Class*);
void __reco__JetTrackMatch_std__vector_reco__FFTAnyJet_reco__BasicJet_s_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __reco__JetTrackMatch_std__vector_reco__FFTAnyJet_reco__BasicJet_s_s__datamem_bld(&__reco__JetTrackMatch_std__vector_reco__FFTAnyJet_reco__BasicJet_s_s__db_datamem);
Reflex::GenreflexMemberBuilder __reco__JetTrackMatch_std__vector_reco__FFTAnyJet_reco__BasicJet_s_s__funcmem_bld(&__reco__JetTrackMatch_std__vector_reco__FFTAnyJet_reco__BasicJet_s_s__db_funcmem);
void __reco__JetTrackMatch_std__vector_reco__FFTAnyJet_reco__BasicJet_s_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("reco::JetTrackMatch<std::vector<reco::FFTAnyJet<reco::BasicJet> > >"), typeid(::reco::JetTrackMatch<std::vector<reco::FFTAnyJet<reco::BasicJet> > >), sizeof(::reco::JetTrackMatch<std::vector<reco::FFTAnyJet<reco::BasicJet> > >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("o_name"), "reco::JetTrackMatch<reco::FFTBasicJetCollection>")
  .AddTypedef(type_5815, Reflex::Literal("reco::JetTrackMatch<std::vector<reco::FFTAnyJet<reco::BasicJet> > >::JetRef"))
  .AddTypedef(type_5812, Reflex::Literal("reco::JetTrackMatch<std::vector<reco::FFTAnyJet<reco::BasicJet> > >::TrackRef"))
  .AddTypedef(type_5482, Reflex::Literal("reco::JetTrackMatch<std::vector<reco::FFTAnyJet<reco::BasicJet> > >::Map"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_49993, type_49994), Reflex::Literal("operator="), operator_34538, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_49994), Reflex::Literal("JetTrackMatch"), constructor_34539, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("JetTrackMatch"), constructor_34540, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~JetTrackMatch"), destructor_34541, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_8971, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__reco__JetTrackMatch_std__vector_reco__FFTAnyJet_reco__BasicJet_s_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__reco__JetTrackMatch_std__vector_reco__FFTAnyJet_reco__BasicJet_s_s__funcmem_bld);
}

//------Delayed data member builder for class JetTrackMatch<std::vector<reco::FFTAnyJet<reco::BasicJet>, std::allocator<reco::FFTAnyJet<reco::BasicJet> > > > -------------------
void __reco__JetTrackMatch_std__vector_reco__FFTAnyJet_reco__BasicJet_s_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_5482, Reflex::Literal("mMap"), OffsetOf(__shadow__::__reco__JetTrackMatch_std__vector_reco__FFTAnyJet_reco__BasicJet_s_s_, mMap), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class JetTrackMatch<std::vector<reco::FFTAnyJet<reco::BasicJet>, std::allocator<reco::FFTAnyJet<reco::BasicJet> > > > -------------------
void __reco__JetTrackMatch_std__vector_reco__FFTAnyJet_reco__BasicJet_s_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_47519), Reflex::Literal("insert"), method_34542, 0, "fJet", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_47519, type_16164), Reflex::Literal("insert"), method_34543, 0, "fJet;fTrack", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3130), Reflex::Literal("allJets"), method_34544, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3111, type_47519), Reflex::Literal("getTracks"), method_34545, 0, "mJet", ::Reflex::PUBLIC | ::Reflex::CONST);
}
//------Stub functions for class RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet>, std::allocator<reco::FFTAnyJet<reco::JPTJet> > >, reco::FFTAnyJet<reco::JPTJet>, edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet>, std::allocator<reco::FFTAnyJet<reco::JPTJet> > >, reco::FFTAnyJet<reco::JPTJet> > > > -------------------------------
static  void operator_48382( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->operator=)(*(const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)arg[0]);
  else   (((::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->operator=)(*(const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)arg[0]);
}

static void constructor_48383( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >(*(const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)arg[0]);
  else ::new(mem) ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >(*(const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)arg[0]);
}

static void constructor_48384( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >();
  else ::new(mem) ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >();
}

static void constructor_48385( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >(*(const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)arg[0]);
  else ::new(mem) ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >(*(const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)arg[0]);
}

static  void method_48386( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->swap)(*(::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)arg[0]);
}

static void destructor_48387(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >::~RefHolder)();
}
static  void method_48388( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->clone)());
  else   (((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->clone)();
}

static  void method_48389( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::ProductID)((((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->id)());
  else   (((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->id)();
}

static  void method_48390( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (size_t)((((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->key)());
  else   (((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->key)();
}

static  void method_48391( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->isEqualTo)(*(const ::edm::reftobase::RefHolderBase*)arg[0]));
  else   (((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->isEqualTo)(*(const ::edm::reftobase::RefHolderBase*)arg[0]);
}

static  void method_48392( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->fillRefIfMyTypeMatches)(*(::edm::reftobase::RefHolderBase*)arg[0],
    *(::std::basic_string<char>*)arg[1]));
  else   (((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->fillRefIfMyTypeMatches)(*(::edm::reftobase::RefHolderBase*)arg[0],
    *(::std::basic_string<char>*)arg[1]);
}

static  void method_48393( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->getRef)();
  else   (((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->getRef)();
}

static  void method_48394( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->setRef)(*(const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)arg[0]);
}

static  void method_48395( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::auto_ptr<edm::reftobase::RefVectorHolderBase>)((((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->makeVectorHolder)());
  else   (((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->makeVectorHolder)();
}

static  void method_48396( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->productGetter)());
  else   (((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->productGetter)();
}

static  void method_48397( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->hasProductCache)());
  else   (((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->hasProductCache)();
}

static  void method_48398( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->product)());
  else   (((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->product)();
}

static  void method_48399( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->isAvailable)());
  else   (((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->isAvailable)();
}

static  void method_48400( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (short)((((::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->Class_Version)());
  else   (((::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->Class_Version)();
}

static void method_newdel_29587( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

static void method_x119( void* retaddr, void*, const std::vector<void*>&, void*)
{
  typedef std::vector<std::pair< ::Reflex::Base, int> > Bases_t;
  static Bases_t s_bases;
  if ( !s_bases.size() ) {
    s_bases.push_back(std::make_pair(::Reflex::Base( ::Reflex::TypeBuilder(Reflex::Literal("edm::reftobase::RefHolderBase")), ::Reflex::BaseOffset< ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >,::edm::reftobase::RefHolderBase >::Get(),::Reflex::PUBLIC), 0));
  }
  if (retaddr) *(Bases_t**)retaddr = &s_bases;
}

//------Dictionary for class RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet>, std::allocator<reco::FFTAnyJet<reco::JPTJet> > >, reco::FFTAnyJet<reco::JPTJet>, edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet>, std::allocator<reco::FFTAnyJet<reco::JPTJet> > >, reco::FFTAnyJet<reco::JPTJet> > > > -------------------------------
void __edm__reftobase__RefHolder_edm__Ref_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s_s__db_datamem(Reflex::Class*);
void __edm__reftobase__RefHolder_edm__Ref_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__reftobase__RefHolder_edm__Ref_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s_s__datamem_bld(&__edm__reftobase__RefHolder_edm__Ref_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__reftobase__RefHolder_edm__Ref_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s_s__funcmem_bld(&__edm__reftobase__RefHolder_edm__Ref_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s_s__db_funcmem);
void __edm__reftobase__RefHolder_edm__Ref_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >"), typeid(::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >), sizeof(::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::VIRTUAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("ClassVersion"), ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >::Class_Version())
  .AddProperty(Reflex::Literal("o_name"), "edm::reftobase::RefHolder<reco::FFTJPTJetRef>")
  .AddBase(type_15132, ::Reflex::BaseOffset< ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >, ::edm::reftobase::RefHolderBase >::Get(), ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_54424, type_54425), Reflex::Literal("operator="), operator_48382, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_54425), Reflex::Literal("RefHolder"), constructor_48383, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("RefHolder"), constructor_48384, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_47477), Reflex::Literal("RefHolder"), constructor_48385, 0, "ref", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~RefHolder"), destructor_48387, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::DESTRUCTOR )
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_29587, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getBasesTable"), method_x119, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__reftobase__RefHolder_edm__Ref_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__reftobase__RefHolder_edm__Ref_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s_s__funcmem_bld);
}

//------Delayed data member builder for class RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet>, std::allocator<reco::FFTAnyJet<reco::JPTJet> > >, reco::FFTAnyJet<reco::JPTJet>, edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet>, std::allocator<reco::FFTAnyJet<reco::JPTJet> > >, reco::FFTAnyJet<reco::JPTJet> > > > -------------------
void __edm__reftobase__RefHolder_edm__Ref_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_5811, Reflex::Literal("ref_"), OffsetOf(__shadow__::__edm__reftobase__RefHolder_edm__Ref_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s_s_, ref_), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet>, std::allocator<reco::FFTAnyJet<reco::JPTJet> > >, reco::FFTAnyJet<reco::JPTJet>, edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet>, std::allocator<reco::FFTAnyJet<reco::JPTJet> > >, reco::FFTAnyJet<reco::JPTJet> > > > -------------------
void __edm__reftobase__RefHolder_edm__Ref_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_54424), Reflex::Literal("swap"), method_48386, 0, "other", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_27062), Reflex::Literal("clone"), method_48388, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_5905), Reflex::Literal("id"), method_48389, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2166), Reflex::Literal("key"), method_48390, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593, type_51756), Reflex::Literal("isEqualTo"), method_48391, 0, "rhs", ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593, type_27064, type_13113), Reflex::Literal("fillRefIfMyTypeMatches"), method_48392, 0, "fillme;msg", ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_47477), Reflex::Literal("getRef"), method_48393, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_47477), Reflex::Literal("setRef"), method_48394, 0, "r", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2874), Reflex::Literal("makeVectorHolder"), method_48395, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_25623), Reflex::Literal("productGetter"), method_48396, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("hasProductCache"), method_48397, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4427), Reflex::Literal("product"), method_48398, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("isAvailable"), method_48399, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_484), Reflex::Literal("Class_Version"), method_48400, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC);
}
//------Stub functions for class RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet>, std::allocator<reco::FFTAnyJet<reco::TrackJet> > >, reco::FFTAnyJet<reco::TrackJet>, edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet>, std::allocator<reco::FFTAnyJet<reco::TrackJet> > >, reco::FFTAnyJet<reco::TrackJet> > > > -------------------------------
static  void operator_48403( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->operator=)(*(const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)arg[0]);
  else   (((::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->operator=)(*(const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)arg[0]);
}

static void constructor_48404( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >(*(const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)arg[0]);
  else ::new(mem) ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >(*(const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)arg[0]);
}

static void constructor_48405( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >();
  else ::new(mem) ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >();
}

static void constructor_48406( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >(*(const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)arg[0]);
  else ::new(mem) ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >(*(const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)arg[0]);
}

static  void method_48407( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->swap)(*(::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)arg[0]);
}

static void destructor_48408(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >::~RefHolder)();
}
static  void method_48409( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->clone)());
  else   (((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->clone)();
}

static  void method_48410( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::ProductID)((((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->id)());
  else   (((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->id)();
}

static  void method_48411( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (size_t)((((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->key)());
  else   (((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->key)();
}

static  void method_48412( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->isEqualTo)(*(const ::edm::reftobase::RefHolderBase*)arg[0]));
  else   (((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->isEqualTo)(*(const ::edm::reftobase::RefHolderBase*)arg[0]);
}

static  void method_48413( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->fillRefIfMyTypeMatches)(*(::edm::reftobase::RefHolderBase*)arg[0],
    *(::std::basic_string<char>*)arg[1]));
  else   (((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->fillRefIfMyTypeMatches)(*(::edm::reftobase::RefHolderBase*)arg[0],
    *(::std::basic_string<char>*)arg[1]);
}

static  void method_48414( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->getRef)();
  else   (((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->getRef)();
}

static  void method_48415( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->setRef)(*(const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)arg[0]);
}

static  void method_48416( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::auto_ptr<edm::reftobase::RefVectorHolderBase>)((((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->makeVectorHolder)());
  else   (((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->makeVectorHolder)();
}

static  void method_48417( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->productGetter)());
  else   (((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->productGetter)();
}

static  void method_48418( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->hasProductCache)());
  else   (((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->hasProductCache)();
}

static  void method_48419( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->product)());
  else   (((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->product)();
}

static  void method_48420( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->isAvailable)());
  else   (((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->isAvailable)();
}

static  void method_48421( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (short)((((::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->Class_Version)());
  else   (((::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->Class_Version)();
}

static void method_newdel_29588( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

static void method_x121( void* retaddr, void*, const std::vector<void*>&, void*)
{
  typedef std::vector<std::pair< ::Reflex::Base, int> > Bases_t;
  static Bases_t s_bases;
  if ( !s_bases.size() ) {
    s_bases.push_back(std::make_pair(::Reflex::Base( ::Reflex::TypeBuilder(Reflex::Literal("edm::reftobase::RefHolderBase")), ::Reflex::BaseOffset< ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >,::edm::reftobase::RefHolderBase >::Get(),::Reflex::PUBLIC), 0));
  }
  if (retaddr) *(Bases_t**)retaddr = &s_bases;
}

//------Dictionary for class RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet>, std::allocator<reco::FFTAnyJet<reco::TrackJet> > >, reco::FFTAnyJet<reco::TrackJet>, edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet>, std::allocator<reco::FFTAnyJet<reco::TrackJet> > >, reco::FFTAnyJet<reco::TrackJet> > > > -------------------------------
void __edm__reftobase__RefHolder_edm__Ref_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s_s__db_datamem(Reflex::Class*);
void __edm__reftobase__RefHolder_edm__Ref_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__reftobase__RefHolder_edm__Ref_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s_s__datamem_bld(&__edm__reftobase__RefHolder_edm__Ref_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__reftobase__RefHolder_edm__Ref_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s_s__funcmem_bld(&__edm__reftobase__RefHolder_edm__Ref_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s_s__db_funcmem);
void __edm__reftobase__RefHolder_edm__Ref_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >"), typeid(::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >), sizeof(::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::VIRTUAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("ClassVersion"), ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >::Class_Version())
  .AddProperty(Reflex::Literal("o_name"), "edm::reftobase::RefHolder<reco::FFTTrackJetRef>")
  .AddBase(type_15132, ::Reflex::BaseOffset< ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >, ::edm::reftobase::RefHolderBase >::Get(), ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_54426, type_54427), Reflex::Literal("operator="), operator_48403, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_54427), Reflex::Literal("RefHolder"), constructor_48404, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("RefHolder"), constructor_48405, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_47491), Reflex::Literal("RefHolder"), constructor_48406, 0, "ref", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~RefHolder"), destructor_48408, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::DESTRUCTOR )
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_29588, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getBasesTable"), method_x121, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__reftobase__RefHolder_edm__Ref_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__reftobase__RefHolder_edm__Ref_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s_s__funcmem_bld);
}

//------Delayed data member builder for class RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet>, std::allocator<reco::FFTAnyJet<reco::TrackJet> > >, reco::FFTAnyJet<reco::TrackJet>, edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet>, std::allocator<reco::FFTAnyJet<reco::TrackJet> > >, reco::FFTAnyJet<reco::TrackJet> > > > -------------------
void __edm__reftobase__RefHolder_edm__Ref_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_5813, Reflex::Literal("ref_"), OffsetOf(__shadow__::__edm__reftobase__RefHolder_edm__Ref_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s_s_, ref_), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet>, std::allocator<reco::FFTAnyJet<reco::TrackJet> > >, reco::FFTAnyJet<reco::TrackJet>, edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet>, std::allocator<reco::FFTAnyJet<reco::TrackJet> > >, reco::FFTAnyJet<reco::TrackJet> > > > -------------------
void __edm__reftobase__RefHolder_edm__Ref_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_54426), Reflex::Literal("swap"), method_48407, 0, "other", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_27062), Reflex::Literal("clone"), method_48409, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_5905), Reflex::Literal("id"), method_48410, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2166), Reflex::Literal("key"), method_48411, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593, type_51756), Reflex::Literal("isEqualTo"), method_48412, 0, "rhs", ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593, type_27064, type_13113), Reflex::Literal("fillRefIfMyTypeMatches"), method_48413, 0, "fillme;msg", ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_47491), Reflex::Literal("getRef"), method_48414, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_47491), Reflex::Literal("setRef"), method_48415, 0, "r", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2874), Reflex::Literal("makeVectorHolder"), method_48416, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_25623), Reflex::Literal("productGetter"), method_48417, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("hasProductCache"), method_48418, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4427), Reflex::Literal("product"), method_48419, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("isAvailable"), method_48420, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_484), Reflex::Literal("Class_Version"), method_48421, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC);
}
//------Stub functions for class RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet>, std::allocator<reco::FFTAnyJet<reco::PFJet> > >, reco::FFTAnyJet<reco::PFJet>, edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet>, std::allocator<reco::FFTAnyJet<reco::PFJet> > >, reco::FFTAnyJet<reco::PFJet> > > > -------------------------------
static  void operator_48424( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->operator=)(*(const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)arg[0]);
  else   (((::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->operator=)(*(const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)arg[0]);
}

static void constructor_48425( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >(*(const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)arg[0]);
  else ::new(mem) ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >(*(const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)arg[0]);
}

static void constructor_48426( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >();
  else ::new(mem) ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >();
}

static void constructor_48427( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >(*(const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)arg[0]);
  else ::new(mem) ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >(*(const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)arg[0]);
}

static  void method_48428( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->swap)(*(::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)arg[0]);
}

static void destructor_48429(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >::~RefHolder)();
}
static  void method_48430( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->clone)());
  else   (((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->clone)();
}

static  void method_48431( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::ProductID)((((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->id)());
  else   (((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->id)();
}

static  void method_48432( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (size_t)((((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->key)());
  else   (((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->key)();
}

static  void method_48433( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->isEqualTo)(*(const ::edm::reftobase::RefHolderBase*)arg[0]));
  else   (((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->isEqualTo)(*(const ::edm::reftobase::RefHolderBase*)arg[0]);
}

static  void method_48434( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->fillRefIfMyTypeMatches)(*(::edm::reftobase::RefHolderBase*)arg[0],
    *(::std::basic_string<char>*)arg[1]));
  else   (((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->fillRefIfMyTypeMatches)(*(::edm::reftobase::RefHolderBase*)arg[0],
    *(::std::basic_string<char>*)arg[1]);
}

static  void method_48435( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->getRef)();
  else   (((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->getRef)();
}

static  void method_48436( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->setRef)(*(const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)arg[0]);
}

static  void method_48437( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::auto_ptr<edm::reftobase::RefVectorHolderBase>)((((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->makeVectorHolder)());
  else   (((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->makeVectorHolder)();
}

static  void method_48438( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->productGetter)());
  else   (((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->productGetter)();
}

static  void method_48439( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->hasProductCache)());
  else   (((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->hasProductCache)();
}

static  void method_48440( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->product)());
  else   (((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->product)();
}

static  void method_48441( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->isAvailable)());
  else   (((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->isAvailable)();
}

static  void method_48442( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (short)((((::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->Class_Version)());
  else   (((::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->Class_Version)();
}

static void method_newdel_29589( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

static void method_x123( void* retaddr, void*, const std::vector<void*>&, void*)
{
  typedef std::vector<std::pair< ::Reflex::Base, int> > Bases_t;
  static Bases_t s_bases;
  if ( !s_bases.size() ) {
    s_bases.push_back(std::make_pair(::Reflex::Base( ::Reflex::TypeBuilder(Reflex::Literal("edm::reftobase::RefHolderBase")), ::Reflex::BaseOffset< ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >,::edm::reftobase::RefHolderBase >::Get(),::Reflex::PUBLIC), 0));
  }
  if (retaddr) *(Bases_t**)retaddr = &s_bases;
}

//------Dictionary for class RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet>, std::allocator<reco::FFTAnyJet<reco::PFJet> > >, reco::FFTAnyJet<reco::PFJet>, edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet>, std::allocator<reco::FFTAnyJet<reco::PFJet> > >, reco::FFTAnyJet<reco::PFJet> > > > -------------------------------
void __edm__reftobase__RefHolder_edm__Ref_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s_s__db_datamem(Reflex::Class*);
void __edm__reftobase__RefHolder_edm__Ref_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__reftobase__RefHolder_edm__Ref_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s_s__datamem_bld(&__edm__reftobase__RefHolder_edm__Ref_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__reftobase__RefHolder_edm__Ref_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s_s__funcmem_bld(&__edm__reftobase__RefHolder_edm__Ref_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s_s__db_funcmem);
void __edm__reftobase__RefHolder_edm__Ref_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >"), typeid(::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >), sizeof(::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::VIRTUAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("ClassVersion"), ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >::Class_Version())
  .AddProperty(Reflex::Literal("o_name"), "edm::reftobase::RefHolder<reco::FFTPFJetRef>")
  .AddBase(type_15132, ::Reflex::BaseOffset< ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >, ::edm::reftobase::RefHolderBase >::Get(), ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_54428, type_54429), Reflex::Literal("operator="), operator_48424, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_54429), Reflex::Literal("RefHolder"), constructor_48425, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("RefHolder"), constructor_48426, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_47505), Reflex::Literal("RefHolder"), constructor_48427, 0, "ref", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~RefHolder"), destructor_48429, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::DESTRUCTOR )
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_29589, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getBasesTable"), method_x123, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__reftobase__RefHolder_edm__Ref_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__reftobase__RefHolder_edm__Ref_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s_s__funcmem_bld);
}

//------Delayed data member builder for class RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet>, std::allocator<reco::FFTAnyJet<reco::PFJet> > >, reco::FFTAnyJet<reco::PFJet>, edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet>, std::allocator<reco::FFTAnyJet<reco::PFJet> > >, reco::FFTAnyJet<reco::PFJet> > > > -------------------
void __edm__reftobase__RefHolder_edm__Ref_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_5814, Reflex::Literal("ref_"), OffsetOf(__shadow__::__edm__reftobase__RefHolder_edm__Ref_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s_s_, ref_), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet>, std::allocator<reco::FFTAnyJet<reco::PFJet> > >, reco::FFTAnyJet<reco::PFJet>, edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet>, std::allocator<reco::FFTAnyJet<reco::PFJet> > >, reco::FFTAnyJet<reco::PFJet> > > > -------------------
void __edm__reftobase__RefHolder_edm__Ref_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_54428), Reflex::Literal("swap"), method_48428, 0, "other", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_27062), Reflex::Literal("clone"), method_48430, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_5905), Reflex::Literal("id"), method_48431, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2166), Reflex::Literal("key"), method_48432, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593, type_51756), Reflex::Literal("isEqualTo"), method_48433, 0, "rhs", ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593, type_27064, type_13113), Reflex::Literal("fillRefIfMyTypeMatches"), method_48434, 0, "fillme;msg", ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_47505), Reflex::Literal("getRef"), method_48435, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_47505), Reflex::Literal("setRef"), method_48436, 0, "r", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2874), Reflex::Literal("makeVectorHolder"), method_48437, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_25623), Reflex::Literal("productGetter"), method_48438, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("hasProductCache"), method_48439, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4427), Reflex::Literal("product"), method_48440, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("isAvailable"), method_48441, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_484), Reflex::Literal("Class_Version"), method_48442, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC);
}
//------Stub functions for class RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet>, std::allocator<reco::FFTAnyJet<reco::BasicJet> > >, reco::FFTAnyJet<reco::BasicJet>, edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet>, std::allocator<reco::FFTAnyJet<reco::BasicJet> > >, reco::FFTAnyJet<reco::BasicJet> > > > -------------------------------
static  void operator_48445( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->operator=)(*(const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)arg[0]);
  else   (((::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->operator=)(*(const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)arg[0]);
}

static void constructor_48446( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >(*(const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)arg[0]);
  else ::new(mem) ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >(*(const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)arg[0]);
}

static void constructor_48447( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >();
  else ::new(mem) ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >();
}

static void constructor_48448( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >(*(const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)arg[0]);
  else ::new(mem) ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >(*(const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)arg[0]);
}

static  void method_48449( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->swap)(*(::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)arg[0]);
}

static void destructor_48450(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >::~RefHolder)();
}
static  void method_48451( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->clone)());
  else   (((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->clone)();
}

static  void method_48452( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::ProductID)((((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->id)());
  else   (((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->id)();
}

static  void method_48453( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (size_t)((((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->key)());
  else   (((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->key)();
}

static  void method_48454( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->isEqualTo)(*(const ::edm::reftobase::RefHolderBase*)arg[0]));
  else   (((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->isEqualTo)(*(const ::edm::reftobase::RefHolderBase*)arg[0]);
}

static  void method_48455( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->fillRefIfMyTypeMatches)(*(::edm::reftobase::RefHolderBase*)arg[0],
    *(::std::basic_string<char>*)arg[1]));
  else   (((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->fillRefIfMyTypeMatches)(*(::edm::reftobase::RefHolderBase*)arg[0],
    *(::std::basic_string<char>*)arg[1]);
}

static  void method_48456( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->getRef)();
  else   (((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->getRef)();
}

static  void method_48457( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->setRef)(*(const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)arg[0]);
}

static  void method_48458( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::auto_ptr<edm::reftobase::RefVectorHolderBase>)((((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->makeVectorHolder)());
  else   (((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->makeVectorHolder)();
}

static  void method_48459( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->productGetter)());
  else   (((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->productGetter)();
}

static  void method_48460( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->hasProductCache)());
  else   (((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->hasProductCache)();
}

static  void method_48461( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->product)());
  else   (((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->product)();
}

static  void method_48462( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->isAvailable)());
  else   (((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->isAvailable)();
}

static  void method_48463( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (short)((((::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->Class_Version)());
  else   (((::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->Class_Version)();
}

static void method_newdel_29590( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

static void method_x125( void* retaddr, void*, const std::vector<void*>&, void*)
{
  typedef std::vector<std::pair< ::Reflex::Base, int> > Bases_t;
  static Bases_t s_bases;
  if ( !s_bases.size() ) {
    s_bases.push_back(std::make_pair(::Reflex::Base( ::Reflex::TypeBuilder(Reflex::Literal("edm::reftobase::RefHolderBase")), ::Reflex::BaseOffset< ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >,::edm::reftobase::RefHolderBase >::Get(),::Reflex::PUBLIC), 0));
  }
  if (retaddr) *(Bases_t**)retaddr = &s_bases;
}

//------Dictionary for class RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet>, std::allocator<reco::FFTAnyJet<reco::BasicJet> > >, reco::FFTAnyJet<reco::BasicJet>, edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet>, std::allocator<reco::FFTAnyJet<reco::BasicJet> > >, reco::FFTAnyJet<reco::BasicJet> > > > -------------------------------
void __edm__reftobase__RefHolder_edm__Ref_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s_s__db_datamem(Reflex::Class*);
void __edm__reftobase__RefHolder_edm__Ref_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__reftobase__RefHolder_edm__Ref_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s_s__datamem_bld(&__edm__reftobase__RefHolder_edm__Ref_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__reftobase__RefHolder_edm__Ref_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s_s__funcmem_bld(&__edm__reftobase__RefHolder_edm__Ref_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s_s__db_funcmem);
void __edm__reftobase__RefHolder_edm__Ref_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >"), typeid(::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >), sizeof(::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::VIRTUAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("ClassVersion"), ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >::Class_Version())
  .AddProperty(Reflex::Literal("o_name"), "edm::reftobase::RefHolder<reco::FFTBasicJetRef>")
  .AddBase(type_15132, ::Reflex::BaseOffset< ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >, ::edm::reftobase::RefHolderBase >::Get(), ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_54430, type_54431), Reflex::Literal("operator="), operator_48445, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_54431), Reflex::Literal("RefHolder"), constructor_48446, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("RefHolder"), constructor_48447, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_47519), Reflex::Literal("RefHolder"), constructor_48448, 0, "ref", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~RefHolder"), destructor_48450, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::DESTRUCTOR )
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_29590, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getBasesTable"), method_x125, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__reftobase__RefHolder_edm__Ref_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__reftobase__RefHolder_edm__Ref_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s_s__funcmem_bld);
}

//------Delayed data member builder for class RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet>, std::allocator<reco::FFTAnyJet<reco::BasicJet> > >, reco::FFTAnyJet<reco::BasicJet>, edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet>, std::allocator<reco::FFTAnyJet<reco::BasicJet> > >, reco::FFTAnyJet<reco::BasicJet> > > > -------------------
void __edm__reftobase__RefHolder_edm__Ref_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_5815, Reflex::Literal("ref_"), OffsetOf(__shadow__::__edm__reftobase__RefHolder_edm__Ref_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s_s_, ref_), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet>, std::allocator<reco::FFTAnyJet<reco::BasicJet> > >, reco::FFTAnyJet<reco::BasicJet>, edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet>, std::allocator<reco::FFTAnyJet<reco::BasicJet> > >, reco::FFTAnyJet<reco::BasicJet> > > > -------------------
void __edm__reftobase__RefHolder_edm__Ref_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_54430), Reflex::Literal("swap"), method_48449, 0, "other", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_27062), Reflex::Literal("clone"), method_48451, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_5905), Reflex::Literal("id"), method_48452, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2166), Reflex::Literal("key"), method_48453, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593, type_51756), Reflex::Literal("isEqualTo"), method_48454, 0, "rhs", ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593, type_27064, type_13113), Reflex::Literal("fillRefIfMyTypeMatches"), method_48455, 0, "fillme;msg", ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_47519), Reflex::Literal("getRef"), method_48456, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_47519), Reflex::Literal("setRef"), method_48457, 0, "r", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2874), Reflex::Literal("makeVectorHolder"), method_48458, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_25623), Reflex::Literal("productGetter"), method_48459, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("hasProductCache"), method_48460, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4427), Reflex::Literal("product"), method_48461, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("isAvailable"), method_48462, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_484), Reflex::Literal("Class_Version"), method_48463, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC);
}
//------Stub functions for class Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet>, std::allocator<reco::FFTAnyJet<reco::JPTJet> > >, reco::FFTAnyJet<reco::JPTJet>, edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet>, std::allocator<reco::FFTAnyJet<reco::JPTJet> > >, reco::FFTAnyJet<reco::JPTJet> > > > -------------------------------
static void constructor_48476( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >();
  else ::new(mem) ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >();
}

static void constructor_48477( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >(*(const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)arg[0]);
  else ::new(mem) ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >(*(const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)arg[0]);
}

static void constructor_48478( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >(*(const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)arg[0]);
  else ::new(mem) ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >(*(const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)arg[0]);
}

static  void operator_48479( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->operator=)(*(const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)arg[0]);
  else   (((::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->operator=)(*(const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)arg[0]);
}

static  void method_48480( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->swap)(*(::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)arg[0]);
}

static void destructor_48481(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >::~Holder)();
}
static  void method_48482( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->clone)());
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->clone)();
}

static  void method_48483( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->getPtr)());
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->getPtr)();
}

static  void method_48484( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::ProductID)((((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->id)());
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->id)();
}

static  void method_48485( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (size_t)((((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->key)());
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->key)();
}

static  void method_48486( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->isEqualTo)(*(const ::edm::reftobase::BaseHolder<reco::Jet>*)arg[0]));
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->isEqualTo)(*(const ::edm::reftobase::BaseHolder<reco::Jet>*)arg[0]);
}

static  void method_48487( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->getRef)();
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->getRef)();
}

static  void method_48488( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->fillRefIfMyTypeMatches)(*(::edm::reftobase::RefHolderBase*)arg[0],
    *(::std::basic_string<char>*)arg[1]));
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->fillRefIfMyTypeMatches)(*(::edm::reftobase::RefHolderBase*)arg[0],
    *(::std::basic_string<char>*)arg[1]);
}

static  void method_48489( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::auto_ptr<edm::reftobase::RefHolderBase>)((((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->holder)());
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->holder)();
}

static  void method_48490( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::auto_ptr<edm::reftobase::BaseVectorHolder<reco::Jet> >)((((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->makeVectorHolder)());
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->makeVectorHolder)();
}

static  void method_48491( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::auto_ptr<edm::reftobase::RefVectorHolderBase>)((((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->makeVectorBaseHolder)());
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->makeVectorBaseHolder)();
}

static  void method_48492( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->productGetter)());
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->productGetter)();
}

static  void method_48493( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->hasProductCache)());
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->hasProductCache)();
}

static  void method_48494( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->product)());
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->product)();
}

static  void method_48495( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->isAvailable)());
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->isAvailable)();
}

static  void method_48496( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (short)((((::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->Class_Version)());
  else   (((::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->Class_Version)();
}

static void method_newdel_29596( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

static void method_x127( void* retaddr, void*, const std::vector<void*>&, void*)
{
  typedef std::vector<std::pair< ::Reflex::Base, int> > Bases_t;
  static Bases_t s_bases;
  if ( !s_bases.size() ) {
    s_bases.push_back(std::make_pair(::Reflex::Base( ::Reflex::TypeBuilder(Reflex::Literal("edm::reftobase::BaseHolder<reco::Jet>")), ::Reflex::BaseOffset< ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >,::edm::reftobase::BaseHolder<reco::Jet> >::Get(),::Reflex::PUBLIC), 0));
  }
  if (retaddr) *(Bases_t**)retaddr = &s_bases;
}

//------Dictionary for class Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet>, std::allocator<reco::FFTAnyJet<reco::JPTJet> > >, reco::FFTAnyJet<reco::JPTJet>, edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet>, std::allocator<reco::FFTAnyJet<reco::JPTJet> > >, reco::FFTAnyJet<reco::JPTJet> > > > -------------------------------
void __edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s_s__db_datamem(Reflex::Class*);
void __edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s_s__datamem_bld(&__edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s_s__funcmem_bld(&__edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s_s__db_funcmem);
void __edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >"), typeid(::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >), sizeof(::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::VIRTUAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("ClassVersion"), ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >::Class_Version())
  .AddProperty(Reflex::Literal("o_name"), "edm::reftobase::Holder<reco::Jet, reco::FFTJPTJetRef>")
  .AddBase(type_29582, ::Reflex::BaseOffset< ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >, ::edm::reftobase::BaseHolder<reco::Jet> >::Get(), ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("Holder"), constructor_48476, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_54436), Reflex::Literal("Holder"), constructor_48477, 0, "other", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_47477), Reflex::Literal("Holder"), constructor_48478, 0, "r", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~Holder"), destructor_48481, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::DESTRUCTOR )
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_29596, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getBasesTable"), method_x127, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s_s__funcmem_bld);
}

//------Delayed data member builder for class Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet>, std::allocator<reco::FFTAnyJet<reco::JPTJet> > >, reco::FFTAnyJet<reco::JPTJet>, edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet>, std::allocator<reco::FFTAnyJet<reco::JPTJet> > >, reco::FFTAnyJet<reco::JPTJet> > > > -------------------
void __edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_5811, Reflex::Literal("ref_"), OffsetOf(__shadow__::__edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s_s_, ref_), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet>, std::allocator<reco::FFTAnyJet<reco::JPTJet> > >, reco::FFTAnyJet<reco::JPTJet>, edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet>, std::allocator<reco::FFTAnyJet<reco::JPTJet> > >, reco::FFTAnyJet<reco::JPTJet> > > > -------------------
void __edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_54437, type_54436), Reflex::Literal("operator="), operator_48479, 0, "rhs", ::Reflex::PUBLIC | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_54437), Reflex::Literal("swap"), method_48480, 0, "other", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_48847), Reflex::Literal("clone"), method_48482, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_48850), Reflex::Literal("getPtr"), method_48483, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_5905), Reflex::Literal("id"), method_48484, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2166), Reflex::Literal("key"), method_48485, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593, type_54421), Reflex::Literal("isEqualTo"), method_48486, 0, "rhs", ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_47477), Reflex::Literal("getRef"), method_48487, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593, type_27064, type_13113), Reflex::Literal("fillRefIfMyTypeMatches"), method_48488, 0, "fillme;msg", ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2876), Reflex::Literal("holder"), method_48489, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2875), Reflex::Literal("makeVectorHolder"), method_48490, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2874), Reflex::Literal("makeVectorBaseHolder"), method_48491, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_25623), Reflex::Literal("productGetter"), method_48492, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("hasProductCache"), method_48493, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4427), Reflex::Literal("product"), method_48494, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("isAvailable"), method_48495, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_484), Reflex::Literal("Class_Version"), method_48496, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC);
}
//------Stub functions for class Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet>, std::allocator<reco::FFTAnyJet<reco::JPTJet> > >, reco::FFTAnyJet<reco::JPTJet>, edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet>, std::allocator<reco::FFTAnyJet<reco::JPTJet> > >, reco::FFTAnyJet<reco::JPTJet> > > > -------------------------------
static void constructor_48498( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >();
  else ::new(mem) ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >();
}

static void constructor_48499( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >(*(const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)arg[0]);
  else ::new(mem) ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >(*(const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)arg[0]);
}

static void constructor_48500( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >(*(const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)arg[0]);
  else ::new(mem) ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >(*(const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > >*)arg[0]);
}

static  void operator_48501( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->operator=)(*(const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)arg[0]);
  else   (((::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->operator=)(*(const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)arg[0]);
}

static  void method_48502( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->swap)(*(::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)arg[0]);
}

static void destructor_48503(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >::~Holder)();
}
static  void method_48504( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->clone)());
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->clone)();
}

static  void method_48505( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->getPtr)());
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->getPtr)();
}

static  void method_48506( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::ProductID)((((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->id)());
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->id)();
}

static  void method_48507( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (size_t)((((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->key)());
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->key)();
}

static  void method_48508( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->isEqualTo)(*(const ::edm::reftobase::BaseHolder<reco::Candidate>*)arg[0]));
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->isEqualTo)(*(const ::edm::reftobase::BaseHolder<reco::Candidate>*)arg[0]);
}

static  void method_48509( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->getRef)();
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->getRef)();
}

static  void method_48510( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->fillRefIfMyTypeMatches)(*(::edm::reftobase::RefHolderBase*)arg[0],
    *(::std::basic_string<char>*)arg[1]));
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->fillRefIfMyTypeMatches)(*(::edm::reftobase::RefHolderBase*)arg[0],
    *(::std::basic_string<char>*)arg[1]);
}

static  void method_48511( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::auto_ptr<edm::reftobase::RefHolderBase>)((((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->holder)());
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->holder)();
}

static  void method_48512( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::auto_ptr<edm::reftobase::BaseVectorHolder<reco::Candidate> >)((((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->makeVectorHolder)());
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->makeVectorHolder)();
}

static  void method_48513( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::auto_ptr<edm::reftobase::RefVectorHolderBase>)((((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->makeVectorBaseHolder)());
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->makeVectorBaseHolder)();
}

static  void method_48514( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->productGetter)());
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->productGetter)();
}

static  void method_48515( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->hasProductCache)());
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->hasProductCache)();
}

static  void method_48516( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->product)());
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->product)();
}

static  void method_48517( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->isAvailable)());
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->isAvailable)();
}

static  void method_48518( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (short)((((::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->Class_Version)());
  else   (((::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >*)o)->Class_Version)();
}

static void method_newdel_29597( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

static void method_x129( void* retaddr, void*, const std::vector<void*>&, void*)
{
  typedef std::vector<std::pair< ::Reflex::Base, int> > Bases_t;
  static Bases_t s_bases;
  if ( !s_bases.size() ) {
    s_bases.push_back(std::make_pair(::Reflex::Base( ::Reflex::TypeBuilder(Reflex::Literal("edm::reftobase::BaseHolder<reco::Candidate>")), ::Reflex::BaseOffset< ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >,::edm::reftobase::BaseHolder<reco::Candidate> >::Get(),::Reflex::PUBLIC), 0));
  }
  if (retaddr) *(Bases_t**)retaddr = &s_bases;
}

//------Dictionary for class Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet>, std::allocator<reco::FFTAnyJet<reco::JPTJet> > >, reco::FFTAnyJet<reco::JPTJet>, edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet>, std::allocator<reco::FFTAnyJet<reco::JPTJet> > >, reco::FFTAnyJet<reco::JPTJet> > > > -------------------------------
void __edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s_s__db_datamem(Reflex::Class*);
void __edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s_s__datamem_bld(&__edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s_s__funcmem_bld(&__edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s_s__db_funcmem);
void __edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >"), typeid(::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >), sizeof(::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::VIRTUAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("ClassVersion"), ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >::Class_Version())
  .AddProperty(Reflex::Literal("o_name"), "edm::reftobase::Holder<reco::Candidate, reco::FFTJPTJetRef>")
  .AddBase(type_29583, ::Reflex::BaseOffset< ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > >, ::edm::reftobase::BaseHolder<reco::Candidate> >::Get(), ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("Holder"), constructor_48498, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_54438), Reflex::Literal("Holder"), constructor_48499, 0, "other", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_47477), Reflex::Literal("Holder"), constructor_48500, 0, "r", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~Holder"), destructor_48503, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::DESTRUCTOR )
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_29597, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getBasesTable"), method_x129, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s_s__funcmem_bld);
}

//------Delayed data member builder for class Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet>, std::allocator<reco::FFTAnyJet<reco::JPTJet> > >, reco::FFTAnyJet<reco::JPTJet>, edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet>, std::allocator<reco::FFTAnyJet<reco::JPTJet> > >, reco::FFTAnyJet<reco::JPTJet> > > > -------------------
void __edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_5811, Reflex::Literal("ref_"), OffsetOf(__shadow__::__edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s_s_, ref_), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet>, std::allocator<reco::FFTAnyJet<reco::JPTJet> > >, reco::FFTAnyJet<reco::JPTJet>, edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet>, std::allocator<reco::FFTAnyJet<reco::JPTJet> > >, reco::FFTAnyJet<reco::JPTJet> > > > -------------------
void __edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_54439, type_54438), Reflex::Literal("operator="), operator_48501, 0, "rhs", ::Reflex::PUBLIC | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_54439), Reflex::Literal("swap"), method_48502, 0, "other", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_48851), Reflex::Literal("clone"), method_48504, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_48854), Reflex::Literal("getPtr"), method_48505, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_5905), Reflex::Literal("id"), method_48506, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2166), Reflex::Literal("key"), method_48507, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593, type_54423), Reflex::Literal("isEqualTo"), method_48508, 0, "rhs", ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_47477), Reflex::Literal("getRef"), method_48509, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593, type_27064, type_13113), Reflex::Literal("fillRefIfMyTypeMatches"), method_48510, 0, "fillme;msg", ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2876), Reflex::Literal("holder"), method_48511, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2877), Reflex::Literal("makeVectorHolder"), method_48512, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2874), Reflex::Literal("makeVectorBaseHolder"), method_48513, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_25623), Reflex::Literal("productGetter"), method_48514, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("hasProductCache"), method_48515, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4427), Reflex::Literal("product"), method_48516, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("isAvailable"), method_48517, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_484), Reflex::Literal("Class_Version"), method_48518, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC);
}
//------Stub functions for class Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet>, std::allocator<reco::FFTAnyJet<reco::TrackJet> > >, reco::FFTAnyJet<reco::TrackJet>, edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet>, std::allocator<reco::FFTAnyJet<reco::TrackJet> > >, reco::FFTAnyJet<reco::TrackJet> > > > -------------------------------
static void constructor_48520( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >();
  else ::new(mem) ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >();
}

static void constructor_48521( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >(*(const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)arg[0]);
  else ::new(mem) ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >(*(const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)arg[0]);
}

static void constructor_48522( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >(*(const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)arg[0]);
  else ::new(mem) ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >(*(const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)arg[0]);
}

static  void operator_48523( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->operator=)(*(const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)arg[0]);
  else   (((::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->operator=)(*(const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)arg[0]);
}

static  void method_48524( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->swap)(*(::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)arg[0]);
}

static void destructor_48525(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >::~Holder)();
}
static  void method_48526( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->clone)());
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->clone)();
}

static  void method_48527( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->getPtr)());
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->getPtr)();
}

static  void method_48528( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::ProductID)((((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->id)());
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->id)();
}

static  void method_48529( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (size_t)((((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->key)());
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->key)();
}

static  void method_48530( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->isEqualTo)(*(const ::edm::reftobase::BaseHolder<reco::Jet>*)arg[0]));
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->isEqualTo)(*(const ::edm::reftobase::BaseHolder<reco::Jet>*)arg[0]);
}

static  void method_48531( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->getRef)();
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->getRef)();
}

static  void method_48532( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->fillRefIfMyTypeMatches)(*(::edm::reftobase::RefHolderBase*)arg[0],
    *(::std::basic_string<char>*)arg[1]));
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->fillRefIfMyTypeMatches)(*(::edm::reftobase::RefHolderBase*)arg[0],
    *(::std::basic_string<char>*)arg[1]);
}

static  void method_48533( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::auto_ptr<edm::reftobase::RefHolderBase>)((((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->holder)());
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->holder)();
}

static  void method_48534( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::auto_ptr<edm::reftobase::BaseVectorHolder<reco::Jet> >)((((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->makeVectorHolder)());
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->makeVectorHolder)();
}

static  void method_48535( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::auto_ptr<edm::reftobase::RefVectorHolderBase>)((((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->makeVectorBaseHolder)());
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->makeVectorBaseHolder)();
}

static  void method_48536( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->productGetter)());
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->productGetter)();
}

static  void method_48537( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->hasProductCache)());
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->hasProductCache)();
}

static  void method_48538( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->product)());
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->product)();
}

static  void method_48539( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->isAvailable)());
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->isAvailable)();
}

static  void method_48540( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (short)((((::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->Class_Version)());
  else   (((::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->Class_Version)();
}

static void method_newdel_29598( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

static void method_x131( void* retaddr, void*, const std::vector<void*>&, void*)
{
  typedef std::vector<std::pair< ::Reflex::Base, int> > Bases_t;
  static Bases_t s_bases;
  if ( !s_bases.size() ) {
    s_bases.push_back(std::make_pair(::Reflex::Base( ::Reflex::TypeBuilder(Reflex::Literal("edm::reftobase::BaseHolder<reco::Jet>")), ::Reflex::BaseOffset< ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >,::edm::reftobase::BaseHolder<reco::Jet> >::Get(),::Reflex::PUBLIC), 0));
  }
  if (retaddr) *(Bases_t**)retaddr = &s_bases;
}

//------Dictionary for class Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet>, std::allocator<reco::FFTAnyJet<reco::TrackJet> > >, reco::FFTAnyJet<reco::TrackJet>, edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet>, std::allocator<reco::FFTAnyJet<reco::TrackJet> > >, reco::FFTAnyJet<reco::TrackJet> > > > -------------------------------
void __edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s_s__db_datamem(Reflex::Class*);
void __edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s_s__datamem_bld(&__edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s_s__funcmem_bld(&__edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s_s__db_funcmem);
void __edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >"), typeid(::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >), sizeof(::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::VIRTUAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("ClassVersion"), ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >::Class_Version())
  .AddProperty(Reflex::Literal("o_name"), "edm::reftobase::Holder<reco::Jet, reco::FFTTrackJetRef>")
  .AddBase(type_29582, ::Reflex::BaseOffset< ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >, ::edm::reftobase::BaseHolder<reco::Jet> >::Get(), ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("Holder"), constructor_48520, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_54440), Reflex::Literal("Holder"), constructor_48521, 0, "other", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_47491), Reflex::Literal("Holder"), constructor_48522, 0, "r", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~Holder"), destructor_48525, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::DESTRUCTOR )
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_29598, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getBasesTable"), method_x131, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s_s__funcmem_bld);
}

//------Delayed data member builder for class Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet>, std::allocator<reco::FFTAnyJet<reco::TrackJet> > >, reco::FFTAnyJet<reco::TrackJet>, edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet>, std::allocator<reco::FFTAnyJet<reco::TrackJet> > >, reco::FFTAnyJet<reco::TrackJet> > > > -------------------
void __edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_5813, Reflex::Literal("ref_"), OffsetOf(__shadow__::__edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s_s_, ref_), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet>, std::allocator<reco::FFTAnyJet<reco::TrackJet> > >, reco::FFTAnyJet<reco::TrackJet>, edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet>, std::allocator<reco::FFTAnyJet<reco::TrackJet> > >, reco::FFTAnyJet<reco::TrackJet> > > > -------------------
void __edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_54441, type_54440), Reflex::Literal("operator="), operator_48523, 0, "rhs", ::Reflex::PUBLIC | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_54441), Reflex::Literal("swap"), method_48524, 0, "other", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_48847), Reflex::Literal("clone"), method_48526, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_48850), Reflex::Literal("getPtr"), method_48527, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_5905), Reflex::Literal("id"), method_48528, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2166), Reflex::Literal("key"), method_48529, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593, type_54421), Reflex::Literal("isEqualTo"), method_48530, 0, "rhs", ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_47491), Reflex::Literal("getRef"), method_48531, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593, type_27064, type_13113), Reflex::Literal("fillRefIfMyTypeMatches"), method_48532, 0, "fillme;msg", ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2876), Reflex::Literal("holder"), method_48533, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2875), Reflex::Literal("makeVectorHolder"), method_48534, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2874), Reflex::Literal("makeVectorBaseHolder"), method_48535, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_25623), Reflex::Literal("productGetter"), method_48536, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("hasProductCache"), method_48537, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4427), Reflex::Literal("product"), method_48538, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("isAvailable"), method_48539, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_484), Reflex::Literal("Class_Version"), method_48540, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC);
}
//------Stub functions for class Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet>, std::allocator<reco::FFTAnyJet<reco::TrackJet> > >, reco::FFTAnyJet<reco::TrackJet>, edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet>, std::allocator<reco::FFTAnyJet<reco::TrackJet> > >, reco::FFTAnyJet<reco::TrackJet> > > > -------------------------------
static void constructor_48542( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >();
  else ::new(mem) ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >();
}

static void constructor_48543( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >(*(const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)arg[0]);
  else ::new(mem) ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >(*(const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)arg[0]);
}

static void constructor_48544( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >(*(const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)arg[0]);
  else ::new(mem) ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >(*(const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > >*)arg[0]);
}

static  void operator_48545( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->operator=)(*(const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)arg[0]);
  else   (((::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->operator=)(*(const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)arg[0]);
}

static  void method_48546( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->swap)(*(::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)arg[0]);
}

static void destructor_48547(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >::~Holder)();
}
static  void method_48548( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->clone)());
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->clone)();
}

static  void method_48549( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->getPtr)());
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->getPtr)();
}

static  void method_48550( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::ProductID)((((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->id)());
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->id)();
}

static  void method_48551( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (size_t)((((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->key)());
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->key)();
}

static  void method_48552( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->isEqualTo)(*(const ::edm::reftobase::BaseHolder<reco::Candidate>*)arg[0]));
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->isEqualTo)(*(const ::edm::reftobase::BaseHolder<reco::Candidate>*)arg[0]);
}

static  void method_48553( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->getRef)();
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->getRef)();
}

static  void method_48554( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->fillRefIfMyTypeMatches)(*(::edm::reftobase::RefHolderBase*)arg[0],
    *(::std::basic_string<char>*)arg[1]));
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->fillRefIfMyTypeMatches)(*(::edm::reftobase::RefHolderBase*)arg[0],
    *(::std::basic_string<char>*)arg[1]);
}

static  void method_48555( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::auto_ptr<edm::reftobase::RefHolderBase>)((((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->holder)());
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->holder)();
}

static  void method_48556( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::auto_ptr<edm::reftobase::BaseVectorHolder<reco::Candidate> >)((((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->makeVectorHolder)());
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->makeVectorHolder)();
}

static  void method_48557( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::auto_ptr<edm::reftobase::RefVectorHolderBase>)((((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->makeVectorBaseHolder)());
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->makeVectorBaseHolder)();
}

static  void method_48558( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->productGetter)());
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->productGetter)();
}

static  void method_48559( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->hasProductCache)());
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->hasProductCache)();
}

static  void method_48560( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->product)());
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->product)();
}

static  void method_48561( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->isAvailable)());
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->isAvailable)();
}

static  void method_48562( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (short)((((::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->Class_Version)());
  else   (((::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >*)o)->Class_Version)();
}

static void method_newdel_29599( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

static void method_x133( void* retaddr, void*, const std::vector<void*>&, void*)
{
  typedef std::vector<std::pair< ::Reflex::Base, int> > Bases_t;
  static Bases_t s_bases;
  if ( !s_bases.size() ) {
    s_bases.push_back(std::make_pair(::Reflex::Base( ::Reflex::TypeBuilder(Reflex::Literal("edm::reftobase::BaseHolder<reco::Candidate>")), ::Reflex::BaseOffset< ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >,::edm::reftobase::BaseHolder<reco::Candidate> >::Get(),::Reflex::PUBLIC), 0));
  }
  if (retaddr) *(Bases_t**)retaddr = &s_bases;
}

//------Dictionary for class Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet>, std::allocator<reco::FFTAnyJet<reco::TrackJet> > >, reco::FFTAnyJet<reco::TrackJet>, edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet>, std::allocator<reco::FFTAnyJet<reco::TrackJet> > >, reco::FFTAnyJet<reco::TrackJet> > > > -------------------------------
void __edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s_s__db_datamem(Reflex::Class*);
void __edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s_s__datamem_bld(&__edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s_s__funcmem_bld(&__edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s_s__db_funcmem);
void __edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >"), typeid(::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >), sizeof(::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::VIRTUAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("ClassVersion"), ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >::Class_Version())
  .AddProperty(Reflex::Literal("o_name"), "edm::reftobase::Holder<reco::Candidate, reco::FFTTrackJetRef>")
  .AddBase(type_29583, ::Reflex::BaseOffset< ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > >, ::edm::reftobase::BaseHolder<reco::Candidate> >::Get(), ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("Holder"), constructor_48542, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_54442), Reflex::Literal("Holder"), constructor_48543, 0, "other", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_47491), Reflex::Literal("Holder"), constructor_48544, 0, "r", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~Holder"), destructor_48547, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::DESTRUCTOR )
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_29599, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getBasesTable"), method_x133, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s_s__funcmem_bld);
}

//------Delayed data member builder for class Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet>, std::allocator<reco::FFTAnyJet<reco::TrackJet> > >, reco::FFTAnyJet<reco::TrackJet>, edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet>, std::allocator<reco::FFTAnyJet<reco::TrackJet> > >, reco::FFTAnyJet<reco::TrackJet> > > > -------------------
void __edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_5813, Reflex::Literal("ref_"), OffsetOf(__shadow__::__edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s_s_, ref_), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet>, std::allocator<reco::FFTAnyJet<reco::TrackJet> > >, reco::FFTAnyJet<reco::TrackJet>, edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet>, std::allocator<reco::FFTAnyJet<reco::TrackJet> > >, reco::FFTAnyJet<reco::TrackJet> > > > -------------------
void __edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_54443, type_54442), Reflex::Literal("operator="), operator_48545, 0, "rhs", ::Reflex::PUBLIC | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_54443), Reflex::Literal("swap"), method_48546, 0, "other", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_48851), Reflex::Literal("clone"), method_48548, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_48854), Reflex::Literal("getPtr"), method_48549, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_5905), Reflex::Literal("id"), method_48550, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2166), Reflex::Literal("key"), method_48551, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593, type_54423), Reflex::Literal("isEqualTo"), method_48552, 0, "rhs", ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_47491), Reflex::Literal("getRef"), method_48553, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593, type_27064, type_13113), Reflex::Literal("fillRefIfMyTypeMatches"), method_48554, 0, "fillme;msg", ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2876), Reflex::Literal("holder"), method_48555, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2877), Reflex::Literal("makeVectorHolder"), method_48556, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2874), Reflex::Literal("makeVectorBaseHolder"), method_48557, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_25623), Reflex::Literal("productGetter"), method_48558, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("hasProductCache"), method_48559, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4427), Reflex::Literal("product"), method_48560, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("isAvailable"), method_48561, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_484), Reflex::Literal("Class_Version"), method_48562, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC);
}
//------Stub functions for class Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet>, std::allocator<reco::FFTAnyJet<reco::PFJet> > >, reco::FFTAnyJet<reco::PFJet>, edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet>, std::allocator<reco::FFTAnyJet<reco::PFJet> > >, reco::FFTAnyJet<reco::PFJet> > > > -------------------------------
static void constructor_48564( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >();
  else ::new(mem) ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >();
}

static void constructor_48565( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >(*(const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)arg[0]);
  else ::new(mem) ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >(*(const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)arg[0]);
}

static void constructor_48566( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >(*(const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)arg[0]);
  else ::new(mem) ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >(*(const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)arg[0]);
}

static  void operator_48567( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->operator=)(*(const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)arg[0]);
  else   (((::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->operator=)(*(const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)arg[0]);
}

static  void method_48568( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->swap)(*(::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)arg[0]);
}

static void destructor_48569(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >::~Holder)();
}
static  void method_48570( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->clone)());
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->clone)();
}

static  void method_48571( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->getPtr)());
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->getPtr)();
}

static  void method_48572( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::ProductID)((((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->id)());
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->id)();
}

static  void method_48573( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (size_t)((((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->key)());
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->key)();
}

static  void method_48574( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->isEqualTo)(*(const ::edm::reftobase::BaseHolder<reco::Jet>*)arg[0]));
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->isEqualTo)(*(const ::edm::reftobase::BaseHolder<reco::Jet>*)arg[0]);
}

static  void method_48575( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->getRef)();
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->getRef)();
}

static  void method_48576( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->fillRefIfMyTypeMatches)(*(::edm::reftobase::RefHolderBase*)arg[0],
    *(::std::basic_string<char>*)arg[1]));
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->fillRefIfMyTypeMatches)(*(::edm::reftobase::RefHolderBase*)arg[0],
    *(::std::basic_string<char>*)arg[1]);
}

static  void method_48577( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::auto_ptr<edm::reftobase::RefHolderBase>)((((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->holder)());
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->holder)();
}

static  void method_48578( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::auto_ptr<edm::reftobase::BaseVectorHolder<reco::Jet> >)((((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->makeVectorHolder)());
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->makeVectorHolder)();
}

static  void method_48579( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::auto_ptr<edm::reftobase::RefVectorHolderBase>)((((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->makeVectorBaseHolder)());
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->makeVectorBaseHolder)();
}

static  void method_48580( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->productGetter)());
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->productGetter)();
}

static  void method_48581( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->hasProductCache)());
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->hasProductCache)();
}

static  void method_48582( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->product)());
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->product)();
}

static  void method_48583( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->isAvailable)());
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->isAvailable)();
}

static  void method_48584( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (short)((((::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->Class_Version)());
  else   (((::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->Class_Version)();
}

static void method_newdel_29600( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

static void method_x135( void* retaddr, void*, const std::vector<void*>&, void*)
{
  typedef std::vector<std::pair< ::Reflex::Base, int> > Bases_t;
  static Bases_t s_bases;
  if ( !s_bases.size() ) {
    s_bases.push_back(std::make_pair(::Reflex::Base( ::Reflex::TypeBuilder(Reflex::Literal("edm::reftobase::BaseHolder<reco::Jet>")), ::Reflex::BaseOffset< ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >,::edm::reftobase::BaseHolder<reco::Jet> >::Get(),::Reflex::PUBLIC), 0));
  }
  if (retaddr) *(Bases_t**)retaddr = &s_bases;
}

//------Dictionary for class Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet>, std::allocator<reco::FFTAnyJet<reco::PFJet> > >, reco::FFTAnyJet<reco::PFJet>, edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet>, std::allocator<reco::FFTAnyJet<reco::PFJet> > >, reco::FFTAnyJet<reco::PFJet> > > > -------------------------------
void __edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s_s__db_datamem(Reflex::Class*);
void __edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s_s__datamem_bld(&__edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s_s__funcmem_bld(&__edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s_s__db_funcmem);
void __edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >"), typeid(::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >), sizeof(::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::VIRTUAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("ClassVersion"), ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >::Class_Version())
  .AddProperty(Reflex::Literal("o_name"), "edm::reftobase::Holder<reco::Jet, reco::FFTPFJetRef>")
  .AddBase(type_29582, ::Reflex::BaseOffset< ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >, ::edm::reftobase::BaseHolder<reco::Jet> >::Get(), ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("Holder"), constructor_48564, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_54444), Reflex::Literal("Holder"), constructor_48565, 0, "other", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_47505), Reflex::Literal("Holder"), constructor_48566, 0, "r", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~Holder"), destructor_48569, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::DESTRUCTOR )
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_29600, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getBasesTable"), method_x135, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s_s__funcmem_bld);
}

//------Delayed data member builder for class Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet>, std::allocator<reco::FFTAnyJet<reco::PFJet> > >, reco::FFTAnyJet<reco::PFJet>, edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet>, std::allocator<reco::FFTAnyJet<reco::PFJet> > >, reco::FFTAnyJet<reco::PFJet> > > > -------------------
void __edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_5814, Reflex::Literal("ref_"), OffsetOf(__shadow__::__edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s_s_, ref_), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet>, std::allocator<reco::FFTAnyJet<reco::PFJet> > >, reco::FFTAnyJet<reco::PFJet>, edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet>, std::allocator<reco::FFTAnyJet<reco::PFJet> > >, reco::FFTAnyJet<reco::PFJet> > > > -------------------
void __edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_54445, type_54444), Reflex::Literal("operator="), operator_48567, 0, "rhs", ::Reflex::PUBLIC | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_54445), Reflex::Literal("swap"), method_48568, 0, "other", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_48847), Reflex::Literal("clone"), method_48570, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_48850), Reflex::Literal("getPtr"), method_48571, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_5905), Reflex::Literal("id"), method_48572, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2166), Reflex::Literal("key"), method_48573, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593, type_54421), Reflex::Literal("isEqualTo"), method_48574, 0, "rhs", ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_47505), Reflex::Literal("getRef"), method_48575, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593, type_27064, type_13113), Reflex::Literal("fillRefIfMyTypeMatches"), method_48576, 0, "fillme;msg", ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2876), Reflex::Literal("holder"), method_48577, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2875), Reflex::Literal("makeVectorHolder"), method_48578, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2874), Reflex::Literal("makeVectorBaseHolder"), method_48579, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_25623), Reflex::Literal("productGetter"), method_48580, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("hasProductCache"), method_48581, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4427), Reflex::Literal("product"), method_48582, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("isAvailable"), method_48583, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_484), Reflex::Literal("Class_Version"), method_48584, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC);
}
//------Stub functions for class Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet>, std::allocator<reco::FFTAnyJet<reco::PFJet> > >, reco::FFTAnyJet<reco::PFJet>, edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet>, std::allocator<reco::FFTAnyJet<reco::PFJet> > >, reco::FFTAnyJet<reco::PFJet> > > > -------------------------------
static void constructor_48586( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >();
  else ::new(mem) ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >();
}

static void constructor_48587( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >(*(const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)arg[0]);
  else ::new(mem) ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >(*(const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)arg[0]);
}

static void constructor_48588( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >(*(const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)arg[0]);
  else ::new(mem) ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >(*(const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > >*)arg[0]);
}

static  void operator_48589( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->operator=)(*(const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)arg[0]);
  else   (((::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->operator=)(*(const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)arg[0]);
}

static  void method_48590( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->swap)(*(::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)arg[0]);
}

static void destructor_48591(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >::~Holder)();
}
static  void method_48592( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->clone)());
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->clone)();
}

static  void method_48593( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->getPtr)());
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->getPtr)();
}

static  void method_48594( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::ProductID)((((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->id)());
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->id)();
}

static  void method_48595( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (size_t)((((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->key)());
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->key)();
}

static  void method_48596( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->isEqualTo)(*(const ::edm::reftobase::BaseHolder<reco::Candidate>*)arg[0]));
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->isEqualTo)(*(const ::edm::reftobase::BaseHolder<reco::Candidate>*)arg[0]);
}

static  void method_48597( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->getRef)();
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->getRef)();
}

static  void method_48598( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->fillRefIfMyTypeMatches)(*(::edm::reftobase::RefHolderBase*)arg[0],
    *(::std::basic_string<char>*)arg[1]));
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->fillRefIfMyTypeMatches)(*(::edm::reftobase::RefHolderBase*)arg[0],
    *(::std::basic_string<char>*)arg[1]);
}

static  void method_48599( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::auto_ptr<edm::reftobase::RefHolderBase>)((((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->holder)());
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->holder)();
}

static  void method_48600( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::auto_ptr<edm::reftobase::BaseVectorHolder<reco::Candidate> >)((((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->makeVectorHolder)());
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->makeVectorHolder)();
}

static  void method_48601( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::auto_ptr<edm::reftobase::RefVectorHolderBase>)((((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->makeVectorBaseHolder)());
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->makeVectorBaseHolder)();
}

static  void method_48602( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->productGetter)());
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->productGetter)();
}

static  void method_48603( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->hasProductCache)());
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->hasProductCache)();
}

static  void method_48604( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->product)());
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->product)();
}

static  void method_48605( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->isAvailable)());
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->isAvailable)();
}

static  void method_48606( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (short)((((::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->Class_Version)());
  else   (((::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >*)o)->Class_Version)();
}

static void method_newdel_29601( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

static void method_x137( void* retaddr, void*, const std::vector<void*>&, void*)
{
  typedef std::vector<std::pair< ::Reflex::Base, int> > Bases_t;
  static Bases_t s_bases;
  if ( !s_bases.size() ) {
    s_bases.push_back(std::make_pair(::Reflex::Base( ::Reflex::TypeBuilder(Reflex::Literal("edm::reftobase::BaseHolder<reco::Candidate>")), ::Reflex::BaseOffset< ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >,::edm::reftobase::BaseHolder<reco::Candidate> >::Get(),::Reflex::PUBLIC), 0));
  }
  if (retaddr) *(Bases_t**)retaddr = &s_bases;
}

//------Dictionary for class Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet>, std::allocator<reco::FFTAnyJet<reco::PFJet> > >, reco::FFTAnyJet<reco::PFJet>, edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet>, std::allocator<reco::FFTAnyJet<reco::PFJet> > >, reco::FFTAnyJet<reco::PFJet> > > > -------------------------------
void __edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s_s__db_datamem(Reflex::Class*);
void __edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s_s__datamem_bld(&__edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s_s__funcmem_bld(&__edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s_s__db_funcmem);
void __edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >"), typeid(::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >), sizeof(::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::VIRTUAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("ClassVersion"), ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >::Class_Version())
  .AddProperty(Reflex::Literal("o_name"), "edm::reftobase::Holder<reco::Candidate, reco::FFTPFJetRef>")
  .AddBase(type_29583, ::Reflex::BaseOffset< ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > >, ::edm::reftobase::BaseHolder<reco::Candidate> >::Get(), ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("Holder"), constructor_48586, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_54446), Reflex::Literal("Holder"), constructor_48587, 0, "other", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_47505), Reflex::Literal("Holder"), constructor_48588, 0, "r", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~Holder"), destructor_48591, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::DESTRUCTOR )
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_29601, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getBasesTable"), method_x137, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s_s__funcmem_bld);
}

//------Delayed data member builder for class Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet>, std::allocator<reco::FFTAnyJet<reco::PFJet> > >, reco::FFTAnyJet<reco::PFJet>, edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet>, std::allocator<reco::FFTAnyJet<reco::PFJet> > >, reco::FFTAnyJet<reco::PFJet> > > > -------------------
void __edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_5814, Reflex::Literal("ref_"), OffsetOf(__shadow__::__edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s_s_, ref_), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet>, std::allocator<reco::FFTAnyJet<reco::PFJet> > >, reco::FFTAnyJet<reco::PFJet>, edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet>, std::allocator<reco::FFTAnyJet<reco::PFJet> > >, reco::FFTAnyJet<reco::PFJet> > > > -------------------
void __edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_54447, type_54446), Reflex::Literal("operator="), operator_48589, 0, "rhs", ::Reflex::PUBLIC | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_54447), Reflex::Literal("swap"), method_48590, 0, "other", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_48851), Reflex::Literal("clone"), method_48592, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_48854), Reflex::Literal("getPtr"), method_48593, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_5905), Reflex::Literal("id"), method_48594, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2166), Reflex::Literal("key"), method_48595, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593, type_54423), Reflex::Literal("isEqualTo"), method_48596, 0, "rhs", ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_47505), Reflex::Literal("getRef"), method_48597, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593, type_27064, type_13113), Reflex::Literal("fillRefIfMyTypeMatches"), method_48598, 0, "fillme;msg", ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2876), Reflex::Literal("holder"), method_48599, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2877), Reflex::Literal("makeVectorHolder"), method_48600, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2874), Reflex::Literal("makeVectorBaseHolder"), method_48601, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_25623), Reflex::Literal("productGetter"), method_48602, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("hasProductCache"), method_48603, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4427), Reflex::Literal("product"), method_48604, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("isAvailable"), method_48605, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_484), Reflex::Literal("Class_Version"), method_48606, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC);
}
//------Stub functions for class Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet>, std::allocator<reco::FFTAnyJet<reco::BasicJet> > >, reco::FFTAnyJet<reco::BasicJet>, edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet>, std::allocator<reco::FFTAnyJet<reco::BasicJet> > >, reco::FFTAnyJet<reco::BasicJet> > > > -------------------------------
static void constructor_48608( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >();
  else ::new(mem) ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >();
}

static void constructor_48609( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >(*(const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)arg[0]);
  else ::new(mem) ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >(*(const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)arg[0]);
}

static void constructor_48610( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >(*(const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)arg[0]);
  else ::new(mem) ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >(*(const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)arg[0]);
}

static  void operator_48611( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->operator=)(*(const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)arg[0]);
  else   (((::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->operator=)(*(const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)arg[0]);
}

static  void method_48612( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->swap)(*(::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)arg[0]);
}

static void destructor_48613(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >::~Holder)();
}
static  void method_48614( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->clone)());
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->clone)();
}

static  void method_48615( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->getPtr)());
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->getPtr)();
}

static  void method_48616( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::ProductID)((((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->id)());
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->id)();
}

static  void method_48617( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (size_t)((((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->key)());
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->key)();
}

static  void method_48618( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->isEqualTo)(*(const ::edm::reftobase::BaseHolder<reco::Jet>*)arg[0]));
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->isEqualTo)(*(const ::edm::reftobase::BaseHolder<reco::Jet>*)arg[0]);
}

static  void method_48619( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->getRef)();
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->getRef)();
}

static  void method_48620( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->fillRefIfMyTypeMatches)(*(::edm::reftobase::RefHolderBase*)arg[0],
    *(::std::basic_string<char>*)arg[1]));
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->fillRefIfMyTypeMatches)(*(::edm::reftobase::RefHolderBase*)arg[0],
    *(::std::basic_string<char>*)arg[1]);
}

static  void method_48621( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::auto_ptr<edm::reftobase::RefHolderBase>)((((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->holder)());
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->holder)();
}

static  void method_48622( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::auto_ptr<edm::reftobase::BaseVectorHolder<reco::Jet> >)((((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->makeVectorHolder)());
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->makeVectorHolder)();
}

static  void method_48623( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::auto_ptr<edm::reftobase::RefVectorHolderBase>)((((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->makeVectorBaseHolder)());
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->makeVectorBaseHolder)();
}

static  void method_48624( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->productGetter)());
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->productGetter)();
}

static  void method_48625( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->hasProductCache)());
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->hasProductCache)();
}

static  void method_48626( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->product)());
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->product)();
}

static  void method_48627( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->isAvailable)());
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->isAvailable)();
}

static  void method_48628( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (short)((((::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->Class_Version)());
  else   (((::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->Class_Version)();
}

static void method_newdel_29602( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

static void method_x139( void* retaddr, void*, const std::vector<void*>&, void*)
{
  typedef std::vector<std::pair< ::Reflex::Base, int> > Bases_t;
  static Bases_t s_bases;
  if ( !s_bases.size() ) {
    s_bases.push_back(std::make_pair(::Reflex::Base( ::Reflex::TypeBuilder(Reflex::Literal("edm::reftobase::BaseHolder<reco::Jet>")), ::Reflex::BaseOffset< ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >,::edm::reftobase::BaseHolder<reco::Jet> >::Get(),::Reflex::PUBLIC), 0));
  }
  if (retaddr) *(Bases_t**)retaddr = &s_bases;
}

//------Dictionary for class Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet>, std::allocator<reco::FFTAnyJet<reco::BasicJet> > >, reco::FFTAnyJet<reco::BasicJet>, edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet>, std::allocator<reco::FFTAnyJet<reco::BasicJet> > >, reco::FFTAnyJet<reco::BasicJet> > > > -------------------------------
void __edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s_s__db_datamem(Reflex::Class*);
void __edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s_s__datamem_bld(&__edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s_s__funcmem_bld(&__edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s_s__db_funcmem);
void __edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >"), typeid(::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >), sizeof(::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::VIRTUAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("ClassVersion"), ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >::Class_Version())
  .AddProperty(Reflex::Literal("o_name"), "edm::reftobase::Holder<reco::Jet, reco::FFTBasicJetRef>")
  .AddBase(type_29582, ::Reflex::BaseOffset< ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >, ::edm::reftobase::BaseHolder<reco::Jet> >::Get(), ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("Holder"), constructor_48608, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_54448), Reflex::Literal("Holder"), constructor_48609, 0, "other", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_47519), Reflex::Literal("Holder"), constructor_48610, 0, "r", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~Holder"), destructor_48613, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::DESTRUCTOR )
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_29602, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getBasesTable"), method_x139, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s_s__funcmem_bld);
}

//------Delayed data member builder for class Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet>, std::allocator<reco::FFTAnyJet<reco::BasicJet> > >, reco::FFTAnyJet<reco::BasicJet>, edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet>, std::allocator<reco::FFTAnyJet<reco::BasicJet> > >, reco::FFTAnyJet<reco::BasicJet> > > > -------------------
void __edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_5815, Reflex::Literal("ref_"), OffsetOf(__shadow__::__edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s_s_, ref_), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet>, std::allocator<reco::FFTAnyJet<reco::BasicJet> > >, reco::FFTAnyJet<reco::BasicJet>, edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet>, std::allocator<reco::FFTAnyJet<reco::BasicJet> > >, reco::FFTAnyJet<reco::BasicJet> > > > -------------------
void __edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_54449, type_54448), Reflex::Literal("operator="), operator_48611, 0, "rhs", ::Reflex::PUBLIC | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_54449), Reflex::Literal("swap"), method_48612, 0, "other", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_48847), Reflex::Literal("clone"), method_48614, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_48850), Reflex::Literal("getPtr"), method_48615, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_5905), Reflex::Literal("id"), method_48616, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2166), Reflex::Literal("key"), method_48617, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593, type_54421), Reflex::Literal("isEqualTo"), method_48618, 0, "rhs", ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_47519), Reflex::Literal("getRef"), method_48619, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593, type_27064, type_13113), Reflex::Literal("fillRefIfMyTypeMatches"), method_48620, 0, "fillme;msg", ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2876), Reflex::Literal("holder"), method_48621, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2875), Reflex::Literal("makeVectorHolder"), method_48622, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2874), Reflex::Literal("makeVectorBaseHolder"), method_48623, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_25623), Reflex::Literal("productGetter"), method_48624, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("hasProductCache"), method_48625, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4427), Reflex::Literal("product"), method_48626, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("isAvailable"), method_48627, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_484), Reflex::Literal("Class_Version"), method_48628, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC);
}
//------Stub functions for class Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet>, std::allocator<reco::FFTAnyJet<reco::BasicJet> > >, reco::FFTAnyJet<reco::BasicJet>, edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet>, std::allocator<reco::FFTAnyJet<reco::BasicJet> > >, reco::FFTAnyJet<reco::BasicJet> > > > -------------------------------
static void constructor_48630( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >();
  else ::new(mem) ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >();
}

static void constructor_48631( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >(*(const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)arg[0]);
  else ::new(mem) ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >(*(const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)arg[0]);
}

static void constructor_48632( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >(*(const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)arg[0]);
  else ::new(mem) ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >(*(const ::edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > >*)arg[0]);
}

static  void operator_48633( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->operator=)(*(const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)arg[0]);
  else   (((::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->operator=)(*(const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)arg[0]);
}

static  void method_48634( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->swap)(*(::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)arg[0]);
}

static void destructor_48635(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >::~Holder)();
}
static  void method_48636( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->clone)());
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->clone)();
}

static  void method_48637( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->getPtr)());
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->getPtr)();
}

static  void method_48638( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::ProductID)((((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->id)());
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->id)();
}

static  void method_48639( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (size_t)((((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->key)());
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->key)();
}

static  void method_48640( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->isEqualTo)(*(const ::edm::reftobase::BaseHolder<reco::Candidate>*)arg[0]));
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->isEqualTo)(*(const ::edm::reftobase::BaseHolder<reco::Candidate>*)arg[0]);
}

static  void method_48641( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->getRef)();
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->getRef)();
}

static  void method_48642( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->fillRefIfMyTypeMatches)(*(::edm::reftobase::RefHolderBase*)arg[0],
    *(::std::basic_string<char>*)arg[1]));
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->fillRefIfMyTypeMatches)(*(::edm::reftobase::RefHolderBase*)arg[0],
    *(::std::basic_string<char>*)arg[1]);
}

static  void method_48643( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::auto_ptr<edm::reftobase::RefHolderBase>)((((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->holder)());
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->holder)();
}

static  void method_48644( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::auto_ptr<edm::reftobase::BaseVectorHolder<reco::Candidate> >)((((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->makeVectorHolder)());
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->makeVectorHolder)();
}

static  void method_48645( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::auto_ptr<edm::reftobase::RefVectorHolderBase>)((((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->makeVectorBaseHolder)());
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->makeVectorBaseHolder)();
}

static  void method_48646( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->productGetter)());
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->productGetter)();
}

static  void method_48647( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->hasProductCache)());
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->hasProductCache)();
}

static  void method_48648( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->product)());
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->product)();
}

static  void method_48649( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->isAvailable)());
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->isAvailable)();
}

static  void method_48650( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (short)((((::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->Class_Version)());
  else   (((::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >*)o)->Class_Version)();
}

static void method_newdel_29603( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

static void method_x141( void* retaddr, void*, const std::vector<void*>&, void*)
{
  typedef std::vector<std::pair< ::Reflex::Base, int> > Bases_t;
  static Bases_t s_bases;
  if ( !s_bases.size() ) {
    s_bases.push_back(std::make_pair(::Reflex::Base( ::Reflex::TypeBuilder(Reflex::Literal("edm::reftobase::BaseHolder<reco::Candidate>")), ::Reflex::BaseOffset< ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >,::edm::reftobase::BaseHolder<reco::Candidate> >::Get(),::Reflex::PUBLIC), 0));
  }
  if (retaddr) *(Bases_t**)retaddr = &s_bases;
}

//------Dictionary for class Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet>, std::allocator<reco::FFTAnyJet<reco::BasicJet> > >, reco::FFTAnyJet<reco::BasicJet>, edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet>, std::allocator<reco::FFTAnyJet<reco::BasicJet> > >, reco::FFTAnyJet<reco::BasicJet> > > > -------------------------------
void __edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s_s__db_datamem(Reflex::Class*);
void __edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s_s__datamem_bld(&__edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s_s__funcmem_bld(&__edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s_s__db_funcmem);
void __edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >"), typeid(::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >), sizeof(::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::VIRTUAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("ClassVersion"), ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >::Class_Version())
  .AddProperty(Reflex::Literal("o_name"), "edm::reftobase::Holder<reco::Candidate, reco::FFTBasicJetRef>")
  .AddBase(type_29583, ::Reflex::BaseOffset< ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > >, ::edm::reftobase::BaseHolder<reco::Candidate> >::Get(), ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("Holder"), constructor_48630, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_54450), Reflex::Literal("Holder"), constructor_48631, 0, "other", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_47519), Reflex::Literal("Holder"), constructor_48632, 0, "r", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~Holder"), destructor_48635, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::DESTRUCTOR )
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_29603, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getBasesTable"), method_x141, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s_s__funcmem_bld);
}

//------Delayed data member builder for class Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet>, std::allocator<reco::FFTAnyJet<reco::BasicJet> > >, reco::FFTAnyJet<reco::BasicJet>, edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet>, std::allocator<reco::FFTAnyJet<reco::BasicJet> > >, reco::FFTAnyJet<reco::BasicJet> > > > -------------------
void __edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_5815, Reflex::Literal("ref_"), OffsetOf(__shadow__::__edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s_s_, ref_), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet>, std::allocator<reco::FFTAnyJet<reco::BasicJet> > >, reco::FFTAnyJet<reco::BasicJet>, edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet>, std::allocator<reco::FFTAnyJet<reco::BasicJet> > >, reco::FFTAnyJet<reco::BasicJet> > > > -------------------
void __edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_54451, type_54450), Reflex::Literal("operator="), operator_48633, 0, "rhs", ::Reflex::PUBLIC | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_708, type_54451), Reflex::Literal("swap"), method_48634, 0, "other", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_48851), Reflex::Literal("clone"), method_48636, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_48854), Reflex::Literal("getPtr"), method_48637, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_5905), Reflex::Literal("id"), method_48638, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2166), Reflex::Literal("key"), method_48639, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593, type_54423), Reflex::Literal("isEqualTo"), method_48640, 0, "rhs", ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_47519), Reflex::Literal("getRef"), method_48641, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593, type_27064, type_13113), Reflex::Literal("fillRefIfMyTypeMatches"), method_48642, 0, "fillme;msg", ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2876), Reflex::Literal("holder"), method_48643, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2877), Reflex::Literal("makeVectorHolder"), method_48644, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2874), Reflex::Literal("makeVectorBaseHolder"), method_48645, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_25623), Reflex::Literal("productGetter"), method_48646, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("hasProductCache"), method_48647, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4427), Reflex::Literal("product"), method_48648, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1593), Reflex::Literal("isAvailable"), method_48649, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_484), Reflex::Literal("Class_Version"), method_48650, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC);
}
namespace {
  struct Dictionaries {
    Dictionaries() {
      Reflex::Instance initialize_reflex;
      __std__map_unsignedsint_edm__helpers__KeyVal_edm__Ref_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s__edm__RefVector_std__vector_reco__PFCandidate__reco__PFCandidate_edm__refhelper__FindUsingAdvance_std__vector_reco__PFCandidate__reco__PFCandidate_s_s_s__dict(); 
      __edm__AssociationMap_edm__OneToMany_std__vector_reco__PFJet__std__vector_reco__PFCandidate__unsignedsint_s__dict(); 
      __edm__Wrapper_edm__AssociationMap_edm__OneToMany_std__vector_reco__PFJet__std__vector_reco__PFCandidate__unsignedsint_s_s__dict(); 
      __reco__FFTJetPileupSummary_dict(); 
      __edm__Wrapper_reco__FFTJetPileupSummary__dict(); 
      __reco__DiscretizedEnergyFlow_dict(); 
      __edm__Wrapper_reco__DiscretizedEnergyFlow__dict(); 
      __edm__helpers__KeyVal_edm__Ref_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s__edm__RefVector_std__vector_reco__PFCandidate__reco__PFCandidate_edm__refhelper__FindUsingAdvance_std__vector_reco__PFCandidate__reco__PFCandidate_s_s__dict(); 
      __edm__helpers__KeyVal_edm__RefProd_std__vector_reco__PFJet_s__edm__RefProd_std__vector_reco__PFCandidate_s_s__dict(); 
      __reco__FFTAnyJet_reco__TrackJet__dict(); 
      __edm__FwdRef_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s__dict(); 
      __std__vector_edm__FwdRef_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s_s__dict(); 
      __reco__FFTAnyJet_reco__PFJet__dict(); 
      __std__vector_reco__FFTAnyJet_reco__PFJet_s__dict(); 
      __edm__RefProd_std__vector_reco__FFTAnyJet_reco__PFJet_s_s__dict(); 
      __edm__FwdRef_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s__dict(); 
      __reco__FFTAnyJet_reco__BasicJet__dict(); 
      __edm__Ref_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s__dict(); 
      __edm__RefVector_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s__dict(); 
      __edm__FwdPtr_reco__FFTAnyJet_reco__PFJet_s__dict(); 
      __std__vector_edm__FwdPtr_reco__FFTAnyJet_reco__PFJet_s_s__dict(); 
      __edm__RefVector_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s__dict(); 
      __reco__FFTAnyJet_reco__JPTJet__dict(); 
      __std__vector_reco__FFTAnyJet_reco__JPTJet_s__dict(); 
      __edm__FwdPtr_reco__FFTAnyJet_reco__BasicJet_s__dict(); 
      __std__vector_edm__FwdPtr_reco__FFTAnyJet_reco__BasicJet_s_s__dict(); 
      __edm__RefVector_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s__dict(); 
      __edm__Ref_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s__dict(); 
      __edm__FwdPtr_reco__FFTAnyJet_reco__TrackJet_s__dict(); 
      __edm__FwdPtr_reco__FFTAnyJet_reco__JPTJet_s__dict(); 
      __std__vector_edm__FwdPtr_reco__FFTAnyJet_reco__JPTJet_s_s__dict(); 
      __std__vector_reco__FFTAnyJet_reco__BasicJet_s__dict(); 
      __edm__FwdRef_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s__dict(); 
      __std__vector_edm__FwdRef_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s_s__dict(); 
      __edm__Ref_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s__dict(); 
      __edm__FwdRef_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s__dict(); 
      __edm__RefVector_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s__dict(); 
      __edm__Ref_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s__dict(); 
      __std__vector_reco__FFTAnyJet_reco__TrackJet_s__dict(); 
      __edm__RefProd_std__vector_reco__FFTAnyJet_reco__TrackJet_s_s__dict(); 
      __std__vector_edm__FwdRef_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s_s__dict(); 
      __std__vector_edm__FwdRef_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s_s__dict(); 
      __edm__RefProd_std__vector_reco__FFTAnyJet_reco__BasicJet_s_s__dict(); 
      __edm__RefProd_std__vector_reco__FFTAnyJet_reco__JPTJet_s_s__dict(); 
      __std__vector_edm__FwdPtr_reco__FFTAnyJet_reco__TrackJet_s_s__dict(); 
      __edm__PtrVector_reco__FFTAnyJet_reco__JPTJet_s__dict(); 
      __edm__PtrVector_reco__FFTAnyJet_reco__TrackJet_s__dict(); 
      __edm__PtrVector_reco__FFTAnyJet_reco__PFJet_s__dict(); 
      __edm__PtrVector_reco__FFTAnyJet_reco__BasicJet_s__dict(); 
      __edm__Association_std__vector_reco__FFTAnyJet_reco__JPTJet_s_s__dict(); 
      __edm__Wrapper_edm__Association_std__vector_reco__FFTAnyJet_reco__JPTJet_s_s_s__dict(); 
      __edm__Wrapper_std__vector_edm__FwdPtr_reco__FFTAnyJet_reco__JPTJet_s_s_s__dict(); 
      __edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s_s_s__dict(); 
      __edm__Wrapper_edm__RefVector_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s_s__dict(); 
      __edm__Wrapper_std__vector_reco__FFTAnyJet_reco__JPTJet_s_s__dict(); 
      __edm__Association_std__vector_reco__FFTAnyJet_reco__TrackJet_s_s__dict(); 
      __edm__Wrapper_edm__Association_std__vector_reco__FFTAnyJet_reco__TrackJet_s_s_s__dict(); 
      __edm__Wrapper_std__vector_edm__FwdPtr_reco__FFTAnyJet_reco__TrackJet_s_s_s__dict(); 
      __edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s_s_s__dict(); 
      __edm__Wrapper_edm__RefVector_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s_s__dict(); 
      __edm__Wrapper_std__vector_reco__FFTAnyJet_reco__TrackJet_s_s__dict(); 
      __edm__Association_std__vector_reco__FFTAnyJet_reco__PFJet_s_s__dict(); 
      __edm__Wrapper_edm__Association_std__vector_reco__FFTAnyJet_reco__PFJet_s_s_s__dict(); 
      __edm__Wrapper_std__vector_edm__FwdPtr_reco__FFTAnyJet_reco__PFJet_s_s_s__dict(); 
      __edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s_s_s__dict(); 
      __edm__Wrapper_edm__RefVector_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s_s__dict(); 
      __edm__Wrapper_std__vector_reco__FFTAnyJet_reco__PFJet_s_s__dict(); 
      __edm__Association_std__vector_reco__FFTAnyJet_reco__BasicJet_s_s__dict(); 
      __edm__Wrapper_edm__Association_std__vector_reco__FFTAnyJet_reco__BasicJet_s_s_s__dict(); 
      __edm__Wrapper_std__vector_edm__FwdPtr_reco__FFTAnyJet_reco__BasicJet_s_s_s__dict(); 
      __edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s_s_s__dict(); 
      __edm__Wrapper_edm__RefVector_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s_s__dict(); 
      __edm__Wrapper_std__vector_reco__FFTAnyJet_reco__BasicJet_s_s__dict(); 
      __edm__Ptr_reco__FFTAnyJet_reco__JPTJet_s__dict(); 
      __edm__Ptr_reco__FFTAnyJet_reco__TrackJet_s__dict(); 
      __edm__Ptr_reco__FFTAnyJet_reco__PFJet_s__dict(); 
      __edm__Ptr_reco__FFTAnyJet_reco__BasicJet_s__dict(); 
      __reco__JetTrackMatch_std__vector_reco__FFTAnyJet_reco__JPTJet_s_s__dict(); 
      __reco__JetTrackMatch_std__vector_reco__FFTAnyJet_reco__TrackJet_s_s__dict(); 
      __reco__JetTrackMatch_std__vector_reco__FFTAnyJet_reco__PFJet_s_s__dict(); 
      __reco__JetTrackMatch_std__vector_reco__FFTAnyJet_reco__BasicJet_s_s__dict(); 
      __edm__reftobase__RefHolder_edm__Ref_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s_s__dict(); 
      __edm__reftobase__RefHolder_edm__Ref_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s_s__dict(); 
      __edm__reftobase__RefHolder_edm__Ref_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s_s__dict(); 
      __edm__reftobase__RefHolder_edm__Ref_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s_s__dict(); 
      __edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s_s__dict(); 
      __edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__JPTJet_s__reco__FFTAnyJet_reco__JPTJet_s_s_s__dict(); 
      __edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s_s__dict(); 
      __edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__TrackJet_s__reco__FFTAnyJet_reco__TrackJet_s_s_s__dict(); 
      __edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s_s__dict(); 
      __edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__PFJet_s__reco__FFTAnyJet_reco__PFJet_s_s_s__dict(); 
      __edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s_s__dict(); 
      __edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet__edm__refhelper__FindUsingAdvance_std__vector_reco__FFTAnyJet_reco__BasicJet_s__reco__FFTAnyJet_reco__BasicJet_s_s_s__dict(); 
    }
    ~Dictionaries() {
      type_3376.Unload(); // class std::map<unsigned int,edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > > > 
      type_5478.Unload(); // class edm::AssociationMap<edm::OneToMany<std::vector<reco::PFJet>,std::vector<reco::PFCandidate>,unsigned int> > 
      type_5449.Unload(); // class edm::Wrapper<edm::AssociationMap<edm::OneToMany<std::vector<reco::PFJet>,std::vector<reco::PFCandidate>,unsigned int> > > 
      type_9014.Unload(); // class reco::FFTJetPileupSummary 
      type_5450.Unload(); // class edm::Wrapper<reco::FFTJetPileupSummary> 
      type_8920.Unload(); // class reco::DiscretizedEnergyFlow 
      type_5451.Unload(); // class edm::Wrapper<reco::DiscretizedEnergyFlow> 
      type_21942.Unload(); // class edm::helpers::KeyVal<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >,edm::RefVector<std::vector<reco::PFCandidate>,reco::PFCandidate,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCandidate>,reco::PFCandidate> > > 
      type_27350.Unload(); // class edm::helpers::KeyVal<edm::RefProd<std::vector<reco::PFJet> >,edm::RefProd<std::vector<reco::PFCandidate> > > 
      type_8932.Unload(); // class reco::FFTAnyJet<reco::TrackJet> 
      type_5495.Unload(); // class edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > 
      type_3123.Unload(); // class std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > > 
      type_8933.Unload(); // class reco::FFTAnyJet<reco::PFJet> 
      type_3129.Unload(); // class std::vector<reco::FFTAnyJet<reco::PFJet> > 
      type_5732.Unload(); // class edm::RefProd<std::vector<reco::FFTAnyJet<reco::PFJet> > > 
      type_5496.Unload(); // class edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > 
      type_8934.Unload(); // class reco::FFTAnyJet<reco::BasicJet> 
      type_5815.Unload(); // class edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > 
      type_5348.Unload(); // class edm::RefVector<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > 
      type_5307.Unload(); // class edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > 
      type_3127.Unload(); // class std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > > 
      type_5343.Unload(); // class edm::RefVector<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > 
      type_8931.Unload(); // class reco::FFTAnyJet<reco::JPTJet> 
      type_3119.Unload(); // class std::vector<reco::FFTAnyJet<reco::JPTJet> > 
      type_5308.Unload(); // class edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > 
      type_3132.Unload(); // class std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > > 
      type_5338.Unload(); // class edm::RefVector<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > 
      type_5813.Unload(); // class edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > 
      type_5306.Unload(); // class edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > 
      type_5305.Unload(); // class edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > 
      type_3117.Unload(); // class std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > > 
      type_3134.Unload(); // class std::vector<reco::FFTAnyJet<reco::BasicJet> > 
      type_5494.Unload(); // class edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > 
      type_3118.Unload(); // class std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > > 
      type_5811.Unload(); // class edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > 
      type_5497.Unload(); // class edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > 
      type_5333.Unload(); // class edm::RefVector<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > 
      type_5814.Unload(); // class edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > 
      type_3124.Unload(); // class std::vector<reco::FFTAnyJet<reco::TrackJet> > 
      type_5731.Unload(); // class edm::RefProd<std::vector<reco::FFTAnyJet<reco::TrackJet> > > 
      type_3128.Unload(); // class std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > > 
      type_3133.Unload(); // class std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > > 
      type_5733.Unload(); // class edm::RefProd<std::vector<reco::FFTAnyJet<reco::BasicJet> > > 
      type_5729.Unload(); // class edm::RefProd<std::vector<reco::FFTAnyJet<reco::JPTJet> > > 
      type_3122.Unload(); // class std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > > 
      type_5287.Unload(); // class edm::PtrVector<reco::FFTAnyJet<reco::JPTJet> > 
      type_5288.Unload(); // class edm::PtrVector<reco::FFTAnyJet<reco::TrackJet> > 
      type_5289.Unload(); // class edm::PtrVector<reco::FFTAnyJet<reco::PFJet> > 
      type_5290.Unload(); // class edm::PtrVector<reco::FFTAnyJet<reco::BasicJet> > 
      type_5802.Unload(); // class edm::Association<std::vector<reco::FFTAnyJet<reco::JPTJet> > > 
      type_5452.Unload(); // class edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::JPTJet> > > > 
      type_5453.Unload(); // class edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::JPTJet> > > > 
      type_5454.Unload(); // class edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > > > 
      type_5455.Unload(); // class edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > > 
      type_5456.Unload(); // class edm::Wrapper<std::vector<reco::FFTAnyJet<reco::JPTJet> > > 
      type_5803.Unload(); // class edm::Association<std::vector<reco::FFTAnyJet<reco::TrackJet> > > 
      type_5457.Unload(); // class edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::TrackJet> > > > 
      type_5458.Unload(); // class edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::TrackJet> > > > 
      type_5459.Unload(); // class edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > > > 
      type_5460.Unload(); // class edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > > 
      type_5461.Unload(); // class edm::Wrapper<std::vector<reco::FFTAnyJet<reco::TrackJet> > > 
      type_5804.Unload(); // class edm::Association<std::vector<reco::FFTAnyJet<reco::PFJet> > > 
      type_5462.Unload(); // class edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::PFJet> > > > 
      type_5463.Unload(); // class edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::PFJet> > > > 
      type_5464.Unload(); // class edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > > > 
      type_5465.Unload(); // class edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > > 
      type_5466.Unload(); // class edm::Wrapper<std::vector<reco::FFTAnyJet<reco::PFJet> > > 
      type_5805.Unload(); // class edm::Association<std::vector<reco::FFTAnyJet<reco::BasicJet> > > 
      type_5467.Unload(); // class edm::Wrapper<edm::Association<std::vector<reco::FFTAnyJet<reco::BasicJet> > > > 
      type_5468.Unload(); // class edm::Wrapper<std::vector<edm::FwdPtr<reco::FFTAnyJet<reco::BasicJet> > > > 
      type_5469.Unload(); // class edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > > > 
      type_5470.Unload(); // class edm::Wrapper<edm::RefVector<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > > 
      type_5471.Unload(); // class edm::Wrapper<std::vector<reco::FFTAnyJet<reco::BasicJet> > > 
      type_5779.Unload(); // class edm::Ptr<reco::FFTAnyJet<reco::JPTJet> > 
      type_5780.Unload(); // class edm::Ptr<reco::FFTAnyJet<reco::TrackJet> > 
      type_5781.Unload(); // class edm::Ptr<reco::FFTAnyJet<reco::PFJet> > 
      type_5782.Unload(); // class edm::Ptr<reco::FFTAnyJet<reco::BasicJet> > 
      type_8968.Unload(); // class reco::JetTrackMatch<std::vector<reco::FFTAnyJet<reco::JPTJet> > > 
      type_8969.Unload(); // class reco::JetTrackMatch<std::vector<reco::FFTAnyJet<reco::TrackJet> > > 
      type_8970.Unload(); // class reco::JetTrackMatch<std::vector<reco::FFTAnyJet<reco::PFJet> > > 
      type_8971.Unload(); // class reco::JetTrackMatch<std::vector<reco::FFTAnyJet<reco::BasicJet> > > 
      type_29587.Unload(); // class edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > > 
      type_29588.Unload(); // class edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > > 
      type_29589.Unload(); // class edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > > 
      type_29590.Unload(); // class edm::reftobase::RefHolder<edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > > 
      type_29596.Unload(); // class edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > > 
      type_29597.Unload(); // class edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::JPTJet> >,reco::FFTAnyJet<reco::JPTJet> > > > 
      type_29598.Unload(); // class edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > > 
      type_29599.Unload(); // class edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::TrackJet> >,reco::FFTAnyJet<reco::TrackJet> > > > 
      type_29600.Unload(); // class edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > > 
      type_29601.Unload(); // class edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::PFJet> >,reco::FFTAnyJet<reco::PFJet> > > > 
      type_29602.Unload(); // class edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > > 
      type_29603.Unload(); // class edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet>,edm::refhelper::FindUsingAdvance<std::vector<reco::FFTAnyJet<reco::BasicJet> >,reco::FFTAnyJet<reco::BasicJet> > > > 
    }
  };
  static Dictionaries instance;
}
} // unnamed namespace
