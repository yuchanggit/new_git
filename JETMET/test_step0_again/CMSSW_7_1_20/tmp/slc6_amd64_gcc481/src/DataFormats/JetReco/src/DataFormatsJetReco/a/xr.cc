// Generated at Tue Dec 20 22:57:04 2016. Do not modify it

/*
GCC-XML version 0.9.0
Configuration settings:
  GCCXML_CONFIG="/afs/cern.ch/cms/slc6_amd64_gcc481/external/gccxml/0.9.0-20140124-0/share/gccxml-0.9/gccxml_config"
  GCCXML_COMPILER="/afs/cern.ch/cms/slc6_amd64_gcc481/external/gcc/4.8.1/bin/c++"
  GCCXML_CXXFLAGS=""
  GCCXML_EXECUTABLE="/afs/cern.ch/cms/slc6_amd64_gcc481/external/gccxml/0.9.0-20140124-0/bin/gccxml_cc1plus"
  GCCXML_CPP="/afs/cern.ch/cms/slc6_amd64_gcc481/external/gccxml/0.9.0-20140124-0/bin/gccxml_cc1plus"
  GCCXML_FLAGS="-D__DBL_MIN_EXP__='(-1021)' -D__UINT_LEAST16_MAX__='65535' -D__ATOMIC_ACQUIRE='2' -D__FLT_MIN__='1.17549435082228750797e-38F' -D__UINT_LEAST8_TYPE__='unsigned char' -D__INTMAX_C(c)='c ## L' -D__CHAR_BIT__='8' -D__UINT8_MAX__='255' -D__WINT_MAX__='4294967295U' -D__ORDER_LITTLE_ENDIAN__='1234' -D__SIZE_MAX__='18446744073709551615UL' -D__WCHAR_MAX__='2147483647' -D__GCC_HAVE_SYNC_COMPARE_AND_SWAP_1='1' -D__GCC_HAVE_SYNC_COMPARE_AND_SWAP_2='1' -D__GCC_HAVE_SYNC_COMPARE_AND_SWAP_4='1' -D__DBL_DENORM_MIN__='double(4.94065645841246544177e-324L)' -D__GCC_HAVE_SYNC_COMPARE_AND_SWAP_8='1' -D__GCC_ATOMIC_CHAR_LOCK_FREE='2' -D__FLT_EVAL_METHOD__='0' -D__unix__='1' -D__GCC_ATOMIC_CHAR32_T_LOCK_FREE='2' -D__x86_64='1' -D__UINT_FAST64_MAX__='18446744073709551615UL' -D__SIG_ATOMIC_TYPE__='int' -D__DBL_MIN_10_EXP__='(-307)' -D__FINITE_MATH_ONLY__='0' -D__GNUC_PATCHLEVEL__='1' -D__UINT_FAST8_MAX__='255' -D__DEC64_MAX_EXP__='385' -D__INT8_C(c)='c' -D__UINT_LEAST64_MAX__='18446744073709551615UL' -D__SHRT_MAX__='32767' -D__LDBL_MAX__='1.18973149535723176502e+4932L' -D__UINT_LEAST8_MAX__='255' -D__GCC_ATOMIC_BOOL_LOCK_FREE='2' -D__UINTMAX_TYPE__='long unsigned int' -D__linux='1' -D__DEC32_EPSILON__='1E-6DF' -D__unix='1' -D__UINT32_MAX__='4294967295U' -D__LDBL_MAX_EXP__='16384' -D__WINT_MIN__='0U' -D__linux__='1' -D__SCHAR_MAX__='127' -D__WCHAR_MIN__='(-__WCHAR_MAX__ - 1)' -D__INT64_C(c)='c ## L' -D__DBL_DIG__='15' -D__GCC_ATOMIC_POINTER_LOCK_FREE='2' -D__SIZEOF_INT__='4' -D__SIZEOF_POINTER__='8' -D__GCC_ATOMIC_CHAR16_T_LOCK_FREE='2' -D__USER_LABEL_PREFIX__='' -D__STDC_HOSTED__='1' -D__LDBL_HAS_INFINITY__='1' -D__FLT_EPSILON__='1.19209289550781250000e-7F' -D__GXX_WEAK__='1' -D__LDBL_MIN__='3.36210314311209350626e-4932L' -D__DEC32_MAX__='9.999999E96DF' -D__INT32_MAX__='2147483647' -D__SIZEOF_LONG__='8' -D__UINT16_C(c)='c' -D__DECIMAL_DIG__='21' -D__gnu_linux__='1' -D__LDBL_HAS_QUIET_NAN__='1' -D__GNUC__='4' -D__GXX_RTTI='1' -D__MMX__='1' -D__FLT_HAS_DENORM__='1' -D__SIZEOF_LONG_DOUBLE__='16' -D__BIGGEST_ALIGNMENT__='16' -D__DBL_MAX__='double(1.79769313486231570815e+308L)' -D__INT_FAST32_MAX__='9223372036854775807L' -D__DBL_HAS_INFINITY__='1' -D__INT64_MAX__='9223372036854775807L' -D__DEC32_MIN_EXP__='(-94)' -D__INT_FAST16_TYPE__='long int' -D__LDBL_HAS_DENORM__='1' -D__cplusplus='199711L' -D__DEC128_MAX__='9.999999999999999999999999999999999E6144DL' -D__INT_LEAST32_MAX__='2147483647' -D__DEC32_MIN__='1E-95DF' -D__DEPRECATED='1' -D__DBL_MAX_EXP__='1024' -D__DEC128_EPSILON__='1E-33DL' -D__SSE2_MATH__='1' -D__ATOMIC_HLE_RELEASE='131072' -D__PTRDIFF_MAX__='9223372036854775807L' -D__amd64='1' -D__ATOMIC_HLE_ACQUIRE='65536' -D__GNUG__='4' -D__LONG_LONG_MAX__='9223372036854775807LL' -D__SIZEOF_SIZE_T__='8' -D__SIZEOF_WINT_T__='4' -D__GCC_HAVE_DWARF2_CFI_ASM='1' -D__GXX_ABI_VERSION='999999' -D__FLT_MIN_EXP__='(-125)' -D__INT_FAST64_TYPE__='long int' -D__DBL_MIN__='double(2.22507385850720138309e-308L)' -D__LP64__='1' -D__DECIMAL_BID_FORMAT__='1' -D__DEC128_MIN__='1E-6143DL' -D__REGISTER_PREFIX__='' -D__UINT16_MAX__='65535' -D__DBL_HAS_DENORM__='1' -D__UINT8_TYPE__='unsigned char' -D__NO_INLINE__='1' -D__FLT_MANT_DIG__='24' -D__VERSION__='"4.8.1"' -D__UINT64_C(c)='c ## UL' -D__GCC_ATOMIC_INT_LOCK_FREE='2' -D__FLOAT_WORD_ORDER__='__ORDER_LITTLE_ENDIAN__' -D__INT32_C(c)='c' -D__DEC64_EPSILON__='1E-15DD' -D__ORDER_PDP_ENDIAN__='3412' -D__DEC128_MIN_EXP__='(-6142)' -D__INT_FAST32_TYPE__='long int' -D__UINT_LEAST16_TYPE__='short unsigned int' -Dunix='1' -D__INT16_MAX__='32767' -D__SIZE_TYPE__='long unsigned int' -D__UINT64_MAX__='18446744073709551615UL' -D__INT8_TYPE__='signed char' -D__ELF__='1' -D__FLT_RADIX__='2' -D__INT_LEAST16_TYPE__='short int' -D__LDBL_EPSILON__='1.08420217248550443401e-19L' -D__UINTMAX_C(c)='c ## UL' -D__k8='1' -D__SIG_ATOMIC_MAX__='2147483647' -D__GCC_ATOMIC_WCHAR_T_LOCK_FREE='2' -D__SIZEOF_PTRDIFF_T__='8' -D__x86_64__='1' -D__DEC32_SUBNORMAL_MIN__='0.000001E-95DF' -D__INT_FAST16_MAX__='9223372036854775807L' -D__UINT_FAST32_MAX__='18446744073709551615UL' -D__UINT_LEAST64_TYPE__='long unsigned int' -D__FLT_HAS_QUIET_NAN__='1' -D__FLT_MAX_10_EXP__='38' -D__LONG_MAX__='9223372036854775807L' -D__DEC128_SUBNORMAL_MIN__='0.000000000000000000000000000000001E-6143DL' -D__FLT_HAS_INFINITY__='1' -D__UINT_FAST16_TYPE__='long unsigned int' -D__DEC64_MAX__='9.999999999999999E384DD' -D__CHAR16_TYPE__='short unsigned int' -D__PRAGMA_REDEFINE_EXTNAME='1' -D__INT_LEAST16_MAX__='32767' -D__DEC64_MANT_DIG__='16' -D__UINT_LEAST32_MAX__='4294967295U' -D__GCC_ATOMIC_LONG_LOCK_FREE='2' -D__INT_LEAST64_TYPE__='long int' -D__INT16_TYPE__='short int' -D__INT_LEAST8_TYPE__='signed char' -D__DEC32_MAX_EXP__='97' -D__INT_FAST8_MAX__='127' -D__INTPTR_MAX__='9223372036854775807L' -Dlinux='1' -D__SSE2__='1' -D__EXCEPTIONS='1' -D__LDBL_MANT_DIG__='64' -D__DBL_HAS_QUIET_NAN__='1' -D__SIG_ATOMIC_MIN__='(-__SIG_ATOMIC_MAX__ - 1)' -D__code_model_small__='1' -D__k8__='1' -D__INTPTR_TYPE__='long int' -D__UINT16_TYPE__='short unsigned int' -D__WCHAR_TYPE__='int' -D__SIZEOF_FLOAT__='4' -D__UINTPTR_MAX__='18446744073709551615UL' -D__DEC64_MIN_EXP__='(-382)' -D__INT_FAST64_MAX__='9223372036854775807L' -D__GCC_ATOMIC_TEST_AND_SET_TRUEVAL='1' -D__FLT_DIG__='6' -D__UINT_FAST64_TYPE__='long unsigned int' -D__INT_MAX__='2147483647' -D__amd64__='1' -D__INT64_TYPE__='long int' -D__FLT_MAX_EXP__='128' -D__ORDER_BIG_ENDIAN__='4321' -D__DBL_MANT_DIG__='53' -D__INT_LEAST64_MAX__='9223372036854775807L' -D__DEC64_MIN__='1E-383DD' -D__WINT_TYPE__='unsigned int' -D__UINT_LEAST32_TYPE__='unsigned int' -D__SIZEOF_SHORT__='2' -D__SSE__='1' -D__LDBL_MIN_EXP__='(-16381)' -D__INT_LEAST8_MAX__='127' -D__SIZEOF_INT128__='16' -D__LDBL_MAX_10_EXP__='4932' -D__ATOMIC_RELAXED='0' -D__DBL_EPSILON__='double(2.22044604925031308085e-16L)' -D_LP64='1' -D__UINT8_C(c)='c' -D__INT_LEAST32_TYPE__='int' -D__SIZEOF_WCHAR_T__='4' -D__UINT64_TYPE__='long unsigned int' -D__INT_FAST8_TYPE__='signed char' -D__DBL_DECIMAL_DIG__='17' -D__FXSR__='1' -D__DEC_EVAL_METHOD__='2' -D__UINT32_C(c)='c ## U' -D__INTMAX_MAX__='9223372036854775807L' -D__BYTE_ORDER__='__ORDER_LITTLE_ENDIAN__' -D__FLT_DENORM_MIN__='1.40129846432481707092e-45F' -D__INT8_MAX__='127' -D__UINT_FAST32_TYPE__='long unsigned int' -D__CHAR32_TYPE__='unsigned int' -D__FLT_MAX__='3.40282346638528859812e+38F' -D__INT32_TYPE__='int' -D__SIZEOF_DOUBLE__='8' -D__INTMAX_TYPE__='long int' -D__DEC128_MAX_EXP__='6145' -D__ATOMIC_CONSUME='1' -D__GNUC_MINOR__='8' -D__UINTMAX_MAX__='18446744073709551615UL' -D__DEC32_MANT_DIG__='7' -D__DBL_MAX_10_EXP__='308' -D__LDBL_DENORM_MIN__='3.64519953188247460253e-4951L' -D__INT16_C(c)='c' -D__STDC__='1' -D__PTRDIFF_TYPE__='long int' -D__ATOMIC_SEQ_CST='5' -D__UINT32_TYPE__='unsigned int' -D__UINTPTR_TYPE__='long unsigned int' -D__DEC64_SUBNORMAL_MIN__='0.000000000000001E-383DD' -D__DEC128_MANT_DIG__='34' -D__LDBL_MIN_10_EXP__='(-4931)' -D__SSE_MATH__='1' -D__SIZEOF_LONG_LONG__='8' -D__GCC_ATOMIC_LLONG_LOCK_FREE='2' -D__LDBL_DIG__='18' -D__FLT_DECIMAL_DIG__='9' -D__UINT_FAST16_MAX__='18446744073709551615UL' -D__GNUC_GNU_INLINE__='1' -D__FLT_MIN_10_EXP__='(-37)' -D__GCC_ATOMIC_SHORT_LOCK_FREE='2' -D__UINT_FAST8_TYPE__='unsigned char' -D_GNU_SOURCE='1' -D__ATOMIC_ACQ_REL='4' -D__ATOMIC_RELEASE='3' -iwrapper"/afs/cern.ch/cms/slc6_amd64_gcc481/external/gccxml/0.9.0-20140124-0/share/gccxml-0.9/GCC/4.8" -isystem"/afs/cern.ch/cms/slc6_amd64_gcc481/external/gcc/4.8.1/bin/../lib/gcc/x86_64-redhat-linux-gnu/4.8.1/../../../../include/c++/4.8.1" -isystem"/afs/cern.ch/cms/slc6_amd64_gcc481/external/gcc/4.8.1/bin/../lib/gcc/x86_64-redhat-linux-gnu/4.8.1/../../../../include/c++/4.8.1/x86_64-redhat-linux-gnu" -isystem"/afs/cern.ch/cms/slc6_amd64_gcc481/external/gcc/4.8.1/bin/../lib/gcc/x86_64-redhat-linux-gnu/4.8.1/../../../../include/c++/4.8.1/backward" -isystem"/afs/cern.ch/cms/slc6_amd64_gcc481/external/gcc/4.8.1/bin/../lib/gcc/x86_64-redhat-linux-gnu/4.8.1/include" -isystem"/afs/cern.ch/cms/slc6_amd64_gcc481/external/gcc/4.8.1/bin/../lib/gcc/x86_64-redhat-linux-gnu/4.8.1/include-fixed" -isystem"/usr/local/include" -isystem"/afs/cern.ch/cms/slc6_amd64_gcc481/external/gcc/4.8.1/bin/../lib/gcc/../../include" -isystem"/usr/include" -include "gccxml_builtins.h""
  GCCXML_USER_FLAGS=""
  GCCXML_ROOT="/afs/cern.ch/cms/slc6_amd64_gcc481/external/gccxml/0.9.0-20140124-0/share/gccxml-0.9"

Compiler info:
c++ (GCC) 4.8.1
Copyright (C) 2013 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

*/

#ifdef _WIN32
#pragma warning ( disable : 4786 )
#pragma warning ( disable : 4345 )
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3)) && !defined(__INTEL_COMPILER) 
# pragma GCC diagnostic ignored "-Warray-bounds"
#endif
#include "src/DataFormats/JetReco/src/classes_3.h"
#ifdef CONST
# undef CONST
#endif
#include "Reflex/Builder/ReflexBuilder.h"
#include <typeinfo>

namespace {
  ::Reflex::NamespaceBuilder nsb0( Reflex::Literal("std") );
  ::Reflex::NamespaceBuilder nsb1( Reflex::Literal("edm") );
  ::Reflex::NamespaceBuilder nsb2( Reflex::Literal("reco") );
  ::Reflex::NamespaceBuilder nsb3( Reflex::Literal("edm::reftobase") );
  ::Reflex::NamespaceBuilder nsb4( Reflex::Literal("reco::JetTracksAssociation") );
  ::Reflex::NamespaceBuilder nsb5( Reflex::Literal("reco::JetFloatAssociation") );
  ::Reflex::NamespaceBuilder nsb6( Reflex::Literal("reco::JetExtendedAssociation") );
  ::Reflex::Type type_68 = ::Reflex::TypeBuilder(Reflex::Literal("int"));
  ::Reflex::Type type_61 = ::Reflex::TypeBuilder(Reflex::Literal("long"));
  ::Reflex::Type type_698 = ::Reflex::TypeBuilder(Reflex::Literal("void"));
  ::Reflex::Type type_89 = ::Reflex::TypeBuilder(Reflex::Literal("short"));
  ::Reflex::Type type_void = ::Reflex::TypeBuilder(Reflex::Literal("void"));
  ::Reflex::Type type_902 = ::Reflex::TypeBuilder(Reflex::Literal("float"));
  ::Reflex::Type type_1569 = ::Reflex::TypeBuilder(Reflex::Literal("bool"));
  ::Reflex::Type type_7762 = ::Reflex::TypeBuilder(Reflex::Literal("reco::Jet"));
  ::Reflex::Type type_219 = ::Reflex::TypeBuilder(Reflex::Literal("unsigned int"));
  ::Reflex::Type type_362 = ::Reflex::TypeBuilder(Reflex::Literal("unsigned long"));
  ::Reflex::Type type_4847 = ::Reflex::TypeBuilder(Reflex::Literal("edm::RefCore"));
  ::Reflex::Type type_502 = ::Reflex::TypeBuilder(Reflex::Literal("std::type_info"));
  ::Reflex::Type type_7775 = ::Reflex::TypeBuilder(Reflex::Literal("reco::TrackJet"));
  ::Reflex::Type type_4974 = ::Reflex::TypeBuilder(Reflex::Literal("edm::ProductID"));
  ::Reflex::Type type_6334 = ::Reflex::TypeBuilder(Reflex::Literal("reco::Candidate"));
  ::Reflex::Type type_7932 = ::Reflex::TypeBuilder(Reflex::Literal("reco::PFClusterJet"));
  ::Reflex::Type type_2991 = ::Reflex::TypeBuilder(Reflex::Literal("std::vector<float>"));
  ::Reflex::Type type_4914 = ::Reflex::TypeBuilder(Reflex::Literal("edm::EDProductGetter"));
  ::Reflex::Type type_4815 = ::Reflex::TypeBuilder(Reflex::Literal("edm::View<reco::Jet>"));
  ::Reflex::Type type_4904 = ::Reflex::TypeBuilder(Reflex::Literal("edm::Ptr<reco::Track>"));
  ::Reflex::Type type_4563 = ::Reflex::TypeBuilder(Reflex::Literal("edm::RefCoreWithIndex"));
  ::Reflex::Type type_2550 = ::Reflex::TypeBuilder(Reflex::Literal("std::basic_string<char>"));
  ::Reflex::Type type_4900 = ::Reflex::TypeBuilder(Reflex::Literal("edm::Ptr<reco::TrackJet>"));
  ::Reflex::Type type_2946 = ::Reflex::TypeBuilder(Reflex::Literal("std::vector<const void*>"));
  ::Reflex::Type type_1675 = ::Reflex::TypeBuilder(Reflex::Literal("StoredPileupJetIdentifier"));
  ::Reflex::Type type_2951 = ::Reflex::TypeBuilder(Reflex::Literal("std::vector<unsigned int>"));
  ::Reflex::Type type_4891 = ::Reflex::TypeBuilder(Reflex::Literal("edm::RefToBase<reco::Jet>"));
  ::Reflex::Type type_2947 = ::Reflex::TypeBuilder(Reflex::Literal("std::vector<unsigned long>"));
  ::Reflex::Type type_2970 = ::Reflex::TypeBuilder(Reflex::Literal("std::vector<reco::TrackJet>"));
  ::Reflex::Type type_4585 = ::Reflex::TypeBuilder(Reflex::Literal("edm::FwdPtr<reco::TrackJet>"));
  ::Reflex::Type type_4899 = ::Reflex::TypeBuilder(Reflex::Literal("edm::Ptr<reco::PFClusterJet>"));
  ::Reflex::Type type_4215 = ::Reflex::TypeBuilder(Reflex::Literal("boost::static_assert_test<1>"));
  ::Reflex::Type type_4721 = ::Reflex::TypeBuilder(Reflex::Literal("edm::RefToBaseProd<reco::Jet>"));
  ::Reflex::Type type_3281 = ::Reflex::TypeBuilder(Reflex::Literal("std::allocator<reco::TrackJet>"));
  ::Reflex::Type type_12419 = ::Reflex::TypeBuilder(Reflex::Literal("edm::reftobase::RefHolderBase"));
  ::Reflex::Type type_2962 = ::Reflex::TypeBuilder(Reflex::Literal("std::vector<reco::PFClusterJet>"));
  ::Reflex::Type type_4584 = ::Reflex::TypeBuilder(Reflex::Literal("edm::FwdPtr<reco::PFClusterJet>"));
  ::Reflex::Type type_4736 = ::Reflex::TypeBuilder(Reflex::Literal("edm::RefToBaseVector<reco::Jet>"));
  ::Reflex::Type type_4004 = ::Reflex::TypeBuilder(Reflex::Literal("edm::RefVectorBase<unsigned int>"));
  ::Reflex::Type type_3266 = ::Reflex::TypeBuilder(Reflex::Literal("std::allocator<reco::PFClusterJet>"));
  ::Reflex::Type type_4960 = ::Reflex::TypeBuilder(Reflex::Literal("edm::Handle<edm::View<reco::Jet> >"));
  ::Reflex::Type type_3012 = ::Reflex::TypeBuilder(Reflex::Literal("std::vector<edm::Ptr<reco::Track> >"));
  ::Reflex::Type type_4848 = ::Reflex::TypeBuilder(Reflex::Literal("edm::reftobase::RefVectorHolderBase"));
  ::Reflex::Type type_2953 = ::Reflex::TypeBuilder(Reflex::Literal("std::vector<StoredPileupJetIdentifier>"));
  ::Reflex::Type type_22938 = ::Reflex::TypeBuilder(Reflex::Literal("edm::reftobase::BaseHolder<reco::Jet>"));
  ::Reflex::Type type_2992 = ::Reflex::TypeBuilder(Reflex::Literal("std::vector<edm::Ptr<reco::Candidate> >"));
  ::Reflex::Type type_2993 = ::Reflex::TypeBuilder(Reflex::Literal("std::vector<edm::RefToBase<reco::Jet> >"));
  ::Reflex::Type type_4864 = ::Reflex::TypeBuilder(Reflex::Literal("edm::ValueMap<StoredPileupJetIdentifier>"));
  ::Reflex::Type type_2968 = ::Reflex::TypeBuilder(Reflex::Literal("std::vector<edm::FwdPtr<reco::TrackJet> >"));
  ::Reflex::Type type_3253 = ::Reflex::TypeBuilder(Reflex::Literal("std::allocator<StoredPileupJetIdentifier>"));
  ::Reflex::Type type_4959 = ::Reflex::TypeBuilder(Reflex::Literal("edm::Handle<std::vector<reco::TrackJet> >"));
  ::Reflex::Type type_2911 = ::Reflex::TypeBuilder(Reflex::Literal("std::pair<edm::RefToBase<reco::Jet>,float>"));
  ::Reflex::Type type_4876 = ::Reflex::TypeBuilder(Reflex::Literal("edm::RefProd<std::vector<reco::TrackJet> >"));
  ::Reflex::Type type_22948 = ::Reflex::TypeBuilder(Reflex::Literal("edm::reftobase::IndirectHolder<reco::Jet>"));
  ::Reflex::Type type_4696 = ::Reflex::TypeBuilder(Reflex::Literal("edm::Wrapper<std::vector<reco::TrackJet> >"));
  ::Reflex::Type type_2777 = ::Reflex::TypeBuilder(Reflex::Literal("std::auto_ptr<std::vector<reco::TrackJet> >"));
  ::Reflex::Type type_22952 = ::Reflex::TypeBuilder(Reflex::Literal("edm::reftobase::BaseVectorHolder<reco::Jet>"));
  ::Reflex::Type type_2762 = ::Reflex::TypeBuilder(Reflex::Literal("std::auto_ptr<edm::reftobase::RefHolderBase>"));
  ::Reflex::Type type_22939 = ::Reflex::TypeBuilder(Reflex::Literal("edm::reftobase::BaseHolder<reco::Candidate>"));
  ::Reflex::Type type_3279 = ::Reflex::TypeBuilder(Reflex::Literal("std::allocator<edm::FwdPtr<reco::TrackJet> >"));
  ::Reflex::Type type_2960 = ::Reflex::TypeBuilder(Reflex::Literal("std::vector<edm::FwdPtr<reco::PFClusterJet> >"));
  ::Reflex::Type type_4956 = ::Reflex::TypeBuilder(Reflex::Literal("edm::Handle<std::vector<reco::PFClusterJet> >"));
  ::Reflex::Type type_4776 = ::Reflex::TypeBuilder(Reflex::Literal("edm::TestHandle<std::vector<reco::TrackJet> >"));
  ::Reflex::Type type_12876 = ::Reflex::TypeBuilder(Reflex::Literal("reco::JetExtendedAssociation::JetExtendedData"));
  ::Reflex::Type type_4874 = ::Reflex::TypeBuilder(Reflex::Literal("edm::RefProd<std::vector<reco::PFClusterJet> >"));
  ::Reflex::Type type_4682 = ::Reflex::TypeBuilder(Reflex::Literal("edm::Wrapper<edm::RefToBaseVector<reco::Jet> >"));
  ::Reflex::Type type_4690 = ::Reflex::TypeBuilder(Reflex::Literal("edm::Wrapper<std::vector<reco::PFClusterJet> >"));
  ::Reflex::Type type_2759 = ::Reflex::TypeBuilder(Reflex::Literal("std::auto_ptr<edm::RefToBaseVector<reco::Jet> >"));
  ::Reflex::Type type_2771 = ::Reflex::TypeBuilder(Reflex::Literal("std::auto_ptr<std::vector<reco::PFClusterJet> >"));
  ::Reflex::Type type_4829 = ::Reflex::TypeBuilder(Reflex::Literal("edm::OrphanHandle<std::vector<reco::TrackJet> >"));
  ::Reflex::Type type_4378 = ::Reflex::TypeBuilder(Reflex::Literal("boost::shared_ptr<edm::reftobase::RefHolderBase>"));
  ::Reflex::Type type_22951 = ::Reflex::TypeBuilder(Reflex::Literal("edm::reftobase::IndirectVectorHolder<reco::Jet>"));
  ::Reflex::Type type_3264 = ::Reflex::TypeBuilder(Reflex::Literal("std::allocator<edm::FwdPtr<reco::PFClusterJet> >"));
  ::Reflex::Type type_4773 = ::Reflex::TypeBuilder(Reflex::Literal("edm::TestHandle<std::vector<reco::PFClusterJet> >"));
  ::Reflex::Type type_7741 = ::Reflex::TypeBuilder(Reflex::Literal("reco::JetTrackMatch<std::vector<reco::TrackJet> >"));
  ::Reflex::Type type_2760 = ::Reflex::TypeBuilder(Reflex::Literal("std::auto_ptr<edm::reftobase::RefVectorHolderBase>"));
  ::Reflex::Type type_4798 = ::Reflex::TypeBuilder(Reflex::Literal("edm::WrapperInterface<std::vector<reco::TrackJet> >"));
  ::Reflex::Type type_4826 = ::Reflex::TypeBuilder(Reflex::Literal("edm::OrphanHandle<std::vector<reco::PFClusterJet> >"));
  ::Reflex::Type type_2952 = ::Reflex::TypeBuilder(Reflex::Literal("std::vector<std::pair<edm::ProductID,unsigned int> >"));
  ::Reflex::Type type_7739 = ::Reflex::TypeBuilder(Reflex::Literal("reco::JetTrackMatch<std::vector<reco::PFClusterJet> >"));
  ::Reflex::Type type_4377 = ::Reflex::TypeBuilder(Reflex::Literal("boost::shared_ptr<edm::reftobase::RefVectorHolderBase>"));
  ::Reflex::Type type_4784 = ::Reflex::TypeBuilder(Reflex::Literal("edm::WrapperInterface<edm::RefToBaseVector<reco::Jet> >"));
  ::Reflex::Type type_4792 = ::Reflex::TypeBuilder(Reflex::Literal("edm::WrapperInterface<std::vector<reco::PFClusterJet> >"));
  ::Reflex::Type type_4686 = ::Reflex::TypeBuilder(Reflex::Literal("edm::Wrapper<edm::ValueMap<StoredPileupJetIdentifier> >"));
  ::Reflex::Type type_2998 = ::Reflex::TypeBuilder(Reflex::Literal("std::vector<std::pair<edm::RefToBase<reco::Jet>,float> >"));
  ::Reflex::Type type_2767 = ::Reflex::TypeBuilder(Reflex::Literal("std::auto_ptr<edm::ValueMap<StoredPileupJetIdentifier> >"));
  ::Reflex::Type type_4693 = ::Reflex::TypeBuilder(Reflex::Literal("edm::Wrapper<std::vector<edm::FwdPtr<reco::TrackJet> > >"));
  ::Reflex::Type type_6949 = ::Reflex::TypeBuilder(Reflex::Literal("ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >"));
  ::Reflex::Type type_23373 = ::Reflex::TypeBuilder(Reflex::Literal("edm::ValueMap<StoredPileupJetIdentifier>::const_iterator"));
  ::Reflex::Type type_2774 = ::Reflex::TypeBuilder(Reflex::Literal("std::auto_ptr<std::vector<edm::FwdPtr<reco::TrackJet> > >"));
  ::Reflex::Type type_2995 = ::Reflex::TypeBuilder(Reflex::Literal("std::vector<reco::JetExtendedAssociation::JetExtendedData>"));
  ::Reflex::Type type_8392 = ::Reflex::TypeBuilder(Reflex::Literal("__gnu_cxx::__alloc_traits<std::allocator<reco::TrackJet> >"));
  ::Reflex::Type type_6988 = ::Reflex::TypeBuilder(Reflex::Literal("ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<float> >"));
  ::Reflex::Type type_2761 = ::Reflex::TypeBuilder(Reflex::Literal("std::auto_ptr<edm::reftobase::BaseVectorHolder<reco::Jet> >"));
  ::Reflex::Type type_3309 = ::Reflex::TypeBuilder(Reflex::Literal("std::allocator<std::pair<edm::RefToBase<reco::Jet>,float> >"));
  ::Reflex::Type type_22995 = ::Reflex::TypeBuilder(Reflex::Literal("edm::reftobase::BaseVectorHolder<reco::Jet>::const_iterator"));
  ::Reflex::Type type_4687 = ::Reflex::TypeBuilder(Reflex::Literal("edm::Wrapper<std::vector<edm::FwdPtr<reco::PFClusterJet> > >"));
  ::Reflex::Type type_3306 = ::Reflex::TypeBuilder(Reflex::Literal("std::allocator<reco::JetExtendedAssociation::JetExtendedData>"));
  ::Reflex::Type type_2768 = ::Reflex::TypeBuilder(Reflex::Literal("std::auto_ptr<std::vector<edm::FwdPtr<reco::PFClusterJet> > >"));
  ::Reflex::Type type_8384 = ::Reflex::TypeBuilder(Reflex::Literal("__gnu_cxx::__alloc_traits<std::allocator<reco::PFClusterJet> >"));
  ::Reflex::Type type_23371 = ::Reflex::TypeBuilder(Reflex::Literal("edm::helper::Filler<edm::ValueMap<StoredPileupJetIdentifier> >"));
  ::Reflex::Type type_4788 = ::Reflex::TypeBuilder(Reflex::Literal("edm::WrapperInterface<edm::ValueMap<StoredPileupJetIdentifier> >"));
  ::Reflex::Type type_37340 = ::Reflex::TypeBuilder(Reflex::Literal("edm::reftobase::BaseVectorHolder<reco::Jet>::const_iterator_imp"));
  ::Reflex::Type type_2509 = ::Reflex::TypeBuilder(Reflex::Literal("std::_Vector_base<reco::TrackJet,std::allocator<reco::TrackJet> >"));
  ::Reflex::Type type_2766 = ::Reflex::TypeBuilder(Reflex::Literal("std::auto_ptr<edm::reftobase::BaseVectorHolder<reco::Candidate> >"));
  ::Reflex::Type type_4795 = ::Reflex::TypeBuilder(Reflex::Literal("edm::WrapperInterface<std::vector<edm::FwdPtr<reco::TrackJet> > >"));
  ::Reflex::Type type_22961 = ::Reflex::TypeBuilder(Reflex::Literal("edm::reftobase::Holder<reco::Candidate,edm::RefToBase<reco::Jet> >"));
  ::Reflex::Type type_8363 = ::Reflex::TypeBuilder(Reflex::Literal("__gnu_cxx::__alloc_traits<std::allocator<StoredPileupJetIdentifier> >"));
  ::Reflex::Type type_4789 = ::Reflex::TypeBuilder(Reflex::Literal("edm::WrapperInterface<std::vector<edm::FwdPtr<reco::PFClusterJet> > >"));
  ::Reflex::Type type_8366 = ::Reflex::TypeBuilder(Reflex::Literal("__gnu_cxx::__alloc_traits<std::allocator<edm::FwdPtr<reco::TrackJet> > >"));
  ::Reflex::Type type_2501 = ::Reflex::TypeBuilder(Reflex::Literal("std::_Vector_base<reco::PFClusterJet,std::allocator<reco::PFClusterJet> >"));
  ::Reflex::Type type_8269 = ::Reflex::TypeBuilder(Reflex::Literal("__gnu_cxx::__normal_iterator<reco::TrackJet*,std::vector<reco::TrackJet> >"));
  ::Reflex::Type type_8364 = ::Reflex::TypeBuilder(Reflex::Literal("__gnu_cxx::__alloc_traits<std::allocator<edm::FwdPtr<reco::PFClusterJet> > >"));
  ::Reflex::Type type_20371 = ::Reflex::TypeBuilder(Reflex::Literal("edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet>"));
  ::Reflex::Type type_8270 = ::Reflex::TypeBuilder(Reflex::Literal("__gnu_cxx::__normal_iterator<const reco::TrackJet*,std::vector<reco::TrackJet> >"));
  ::Reflex::Type type_21789 = ::Reflex::TypeBuilder(Reflex::Literal("edm::refhelper::FindRefVectorUsingAdvance<edm::RefToBaseVector<reco::TrackJet> >"));
  ::Reflex::Type type_2888 = ::Reflex::TypeBuilder(Reflex::Literal("std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>"));
  ::Reflex::Type type_8252 = ::Reflex::TypeBuilder(Reflex::Literal("__gnu_cxx::__normal_iterator<reco::PFClusterJet*,std::vector<reco::PFClusterJet> >"));
  ::Reflex::Type type_20347 = ::Reflex::TypeBuilder(Reflex::Literal("edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet>"));
  ::Reflex::Type type_21785 = ::Reflex::TypeBuilder(Reflex::Literal("edm::refhelper::FindRefVectorUsingAdvance<edm::RefToBaseVector<reco::PFClusterJet> >"));
  ::Reflex::Type type_2480 = ::Reflex::TypeBuilder(Reflex::Literal("std::_Vector_base<StoredPileupJetIdentifier,std::allocator<StoredPileupJetIdentifier> >"));
  ::Reflex::Type type_8379 = ::Reflex::TypeBuilder(Reflex::Literal("__gnu_cxx::__alloc_traits<std::allocator<std::pair<edm::RefToBase<reco::Jet>,float> > >"));
  ::Reflex::Type type_8253 = ::Reflex::TypeBuilder(Reflex::Literal("__gnu_cxx::__normal_iterator<const reco::PFClusterJet*,std::vector<reco::PFClusterJet> >"));
  ::Reflex::Type type_8376 = ::Reflex::TypeBuilder(Reflex::Literal("__gnu_cxx::__alloc_traits<std::allocator<reco::JetExtendedAssociation::JetExtendedData> >"));
  ::Reflex::Type type_2483 = ::Reflex::TypeBuilder(Reflex::Literal("std::_Vector_base<edm::FwdPtr<reco::TrackJet>,std::allocator<edm::FwdPtr<reco::TrackJet> > >"));
  ::Reflex::Type type_2994 = ::Reflex::TypeBuilder(Reflex::Literal("std::vector<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> >"));
  ::Reflex::Type type_8211 = ::Reflex::TypeBuilder(Reflex::Literal("__gnu_cxx::__normal_iterator<StoredPileupJetIdentifier*,std::vector<StoredPileupJetIdentifier> >"));
  ::Reflex::Type type_3542 = ::Reflex::TypeBuilder(Reflex::Literal("std::reverse_iterator<__gnu_cxx::__normal_iterator<reco::TrackJet*,std::vector<reco::TrackJet> > >"));
  ::Reflex::Type type_3305 = ::Reflex::TypeBuilder(Reflex::Literal("std::allocator<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> >"));
  ::Reflex::Type type_6957 = ::Reflex::TypeBuilder(Reflex::Literal("ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>"));
  ::Reflex::Type type_2481 = ::Reflex::TypeBuilder(Reflex::Literal("std::_Vector_base<edm::FwdPtr<reco::PFClusterJet>,std::allocator<edm::FwdPtr<reco::PFClusterJet> > >"));
  ::Reflex::Type type_8217 = ::Reflex::TypeBuilder(Reflex::Literal("__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::TrackJet>*,std::vector<edm::FwdPtr<reco::TrackJet> > >"));
  ::Reflex::Type type_8212 = ::Reflex::TypeBuilder(Reflex::Literal("__gnu_cxx::__normal_iterator<const StoredPileupJetIdentifier*,std::vector<StoredPileupJetIdentifier> >"));
  ::Reflex::Type type_4703 = ::Reflex::TypeBuilder(Reflex::Literal("edm::AssociationMap<edm::OneToMany<std::vector<reco::TrackJet>,std::vector<reco::Track>,unsigned int> >"));
  ::Reflex::Type type_3541 = ::Reflex::TypeBuilder(Reflex::Literal("std::reverse_iterator<__gnu_cxx::__normal_iterator<const reco::TrackJet*,std::vector<reco::TrackJet> > >"));
  ::Reflex::Type type_3526 = ::Reflex::TypeBuilder(Reflex::Literal("std::reverse_iterator<__gnu_cxx::__normal_iterator<reco::PFClusterJet*,std::vector<reco::PFClusterJet> > >"));
  ::Reflex::Type type_4701 = ::Reflex::TypeBuilder(Reflex::Literal("edm::AssociationMap<edm::OneToMany<std::vector<reco::PFClusterJet>,std::vector<reco::Track>,unsigned int> >"));
  ::Reflex::Type type_8218 = ::Reflex::TypeBuilder(Reflex::Literal("__gnu_cxx::__normal_iterator<const edm::FwdPtr<reco::TrackJet>*,std::vector<edm::FwdPtr<reco::TrackJet> > >"));
  ::Reflex::Type type_8213 = ::Reflex::TypeBuilder(Reflex::Literal("__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::PFClusterJet>*,std::vector<edm::FwdPtr<reco::PFClusterJet> > >"));
  ::Reflex::Type type_21783 = ::Reflex::TypeBuilder(Reflex::Literal("edm::refhelper::FindRefVectorUsingAdvance<edm::RefToBaseVector<std::pair<edm::RefToBase<reco::Jet>,float> > >"));
  ::Reflex::Type type_3525 = ::Reflex::TypeBuilder(Reflex::Literal("std::reverse_iterator<__gnu_cxx::__normal_iterator<const reco::PFClusterJet*,std::vector<reco::PFClusterJet> > >"));
  ::Reflex::Type type_8214 = ::Reflex::TypeBuilder(Reflex::Literal("__gnu_cxx::__normal_iterator<const edm::FwdPtr<reco::PFClusterJet>*,std::vector<edm::FwdPtr<reco::PFClusterJet> > >"));
  ::Reflex::Type type_4922 = ::Reflex::TypeBuilder(Reflex::Literal("edm::Ref<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> >"));
  ::Reflex::Type type_4915 = ::Reflex::TypeBuilder(Reflex::Literal("edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >"));
  ::Reflex::Type type_3476 = ::Reflex::TypeBuilder(Reflex::Literal("std::reverse_iterator<__gnu_cxx::__normal_iterator<StoredPileupJetIdentifier*,std::vector<StoredPileupJetIdentifier> > >"));
  ::Reflex::Type type_4934 = ::Reflex::TypeBuilder(Reflex::Literal("edm::Ref<std::vector<reco::Vertex>,reco::Vertex,edm::refhelper::FindUsingAdvance<std::vector<reco::Vertex>,reco::Vertex> >"));
  ::Reflex::Type type_2496 = ::Reflex::TypeBuilder(Reflex::Literal("std::_Vector_base<std::pair<edm::RefToBase<reco::Jet>,float>,std::allocator<std::pair<edm::RefToBase<reco::Jet>,float> > >"));
  ::Reflex::Type type_4916 = ::Reflex::TypeBuilder(Reflex::Literal("edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >"));
  ::Reflex::Type type_4923 = ::Reflex::TypeBuilder(Reflex::Literal("edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >"));
  ::Reflex::Type type_4628 = ::Reflex::TypeBuilder(Reflex::Literal("edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> >"));
  ::Reflex::Type type_3490 = ::Reflex::TypeBuilder(Reflex::Literal("std::reverse_iterator<__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::TrackJet>*,std::vector<edm::FwdPtr<reco::TrackJet> > > >"));
  ::Reflex::Type type_3475 = ::Reflex::TypeBuilder(Reflex::Literal("std::reverse_iterator<__gnu_cxx::__normal_iterator<const StoredPileupJetIdentifier*,std::vector<StoredPileupJetIdentifier> > >"));
  ::Reflex::Type type_4917 = ::Reflex::TypeBuilder(Reflex::Literal("edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >"));
  ::Reflex::Type type_2493 = ::Reflex::TypeBuilder(Reflex::Literal("std::_Vector_base<reco::JetExtendedAssociation::JetExtendedData,std::allocator<reco::JetExtendedAssociation::JetExtendedData> >"));
  ::Reflex::Type type_8375 = ::Reflex::TypeBuilder(Reflex::Literal("__gnu_cxx::__alloc_traits<std::allocator<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >"));
  ::Reflex::Type type_4924 = ::Reflex::TypeBuilder(Reflex::Literal("edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >"));
  ::Reflex::Type type_3489 = ::Reflex::TypeBuilder(Reflex::Literal("std::reverse_iterator<__gnu_cxx::__normal_iterator<const edm::FwdPtr<reco::TrackJet>*,std::vector<edm::FwdPtr<reco::TrackJet> > > >"));
  ::Reflex::Type type_8242 = ::Reflex::TypeBuilder(Reflex::Literal("__gnu_cxx::__normal_iterator<std::pair<edm::RefToBase<reco::Jet>,float>*,std::vector<std::pair<edm::RefToBase<reco::Jet>,float> > >"));
  ::Reflex::Type type_2954 = ::Reflex::TypeBuilder(Reflex::Literal("std::vector<edm::Ref<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >"));
  ::Reflex::Type type_4707 = ::Reflex::TypeBuilder(Reflex::Literal("edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >"));
  ::Reflex::Type type_3480 = ::Reflex::TypeBuilder(Reflex::Literal("std::reverse_iterator<__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::PFClusterJet>*,std::vector<edm::FwdPtr<reco::PFClusterJet> > > >"));
  ::Reflex::Type type_4933 = ::Reflex::TypeBuilder(Reflex::Literal("edm::Ref<std::vector<reco::PFCluster>,reco::PFCluster,edm::refhelper::FindUsingAdvance<std::vector<reco::PFCluster>,reco::PFCluster> >"));
  ::Reflex::Type type_4639 = ::Reflex::TypeBuilder(Reflex::Literal("edm::RefVector<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >"));
  ::Reflex::Type type_8236 = ::Reflex::TypeBuilder(Reflex::Literal("__gnu_cxx::__normal_iterator<reco::JetExtendedAssociation::JetExtendedData*,std::vector<reco::JetExtendedAssociation::JetExtendedData> >"));
  ::Reflex::Type type_8243 = ::Reflex::TypeBuilder(Reflex::Literal("__gnu_cxx::__normal_iterator<const std::pair<edm::RefToBase<reco::Jet>,float>*,std::vector<std::pair<edm::RefToBase<reco::Jet>,float> > >"));
  ::Reflex::Type type_2997 = ::Reflex::TypeBuilder(Reflex::Literal("std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >"));
  ::Reflex::Type type_3479 = ::Reflex::TypeBuilder(Reflex::Literal("std::reverse_iterator<__gnu_cxx::__normal_iterator<const edm::FwdPtr<reco::PFClusterJet>*,std::vector<edm::FwdPtr<reco::PFClusterJet> > > >"));
  ::Reflex::Type type_8237 = ::Reflex::TypeBuilder(Reflex::Literal("__gnu_cxx::__normal_iterator<const reco::JetExtendedAssociation::JetExtendedData*,std::vector<reco::JetExtendedAssociation::JetExtendedData> >"));
  ::Reflex::Type type_4556 = ::Reflex::TypeBuilder(Reflex::Literal("edm::RefVectorIterator<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >"));
  ::Reflex::Type type_2966 = ::Reflex::TypeBuilder(Reflex::Literal("std::vector<edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >"));
  ::Reflex::Type type_4921 = ::Reflex::TypeBuilder(Reflex::Literal("edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >"));
  ::Reflex::Type type_2969 = ::Reflex::TypeBuilder(Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >"));
  ::Reflex::Type type_22944 = ::Reflex::TypeBuilder(Reflex::Literal("edm::reftobase::RefHolder<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >"));
  ::Reflex::Type type_4706 = ::Reflex::TypeBuilder(Reflex::Literal("edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >"));
  ::Reflex::Type type_3280 = ::Reflex::TypeBuilder(Reflex::Literal("std::allocator<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >"));
  ::Reflex::Type type_21779 = ::Reflex::TypeBuilder(Reflex::Literal("edm::refhelper::FindRefVectorUsingAdvance<edm::RefToBaseVector<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >"));
  ::Reflex::Type type_22945 = ::Reflex::TypeBuilder(Reflex::Literal("edm::reftobase::RefHolder<edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >"));
  ::Reflex::Type type_22946 = ::Reflex::TypeBuilder(Reflex::Literal("edm::reftobase::RefHolder<edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >"));
  ::Reflex::Type type_4695 = ::Reflex::TypeBuilder(Reflex::Literal("edm::Wrapper<edm::RefVector<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >"));
  ::Reflex::Type type_4629 = ::Reflex::TypeBuilder(Reflex::Literal("edm::RefVector<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >"));
  ::Reflex::Type type_2776 = ::Reflex::TypeBuilder(Reflex::Literal("std::auto_ptr<edm::RefVector<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >"));
  ::Reflex::Type type_22957 = ::Reflex::TypeBuilder(Reflex::Literal("edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >"));
  ::Reflex::Type type_3516 = ::Reflex::TypeBuilder(Reflex::Literal("std::reverse_iterator<__gnu_cxx::__normal_iterator<std::pair<edm::RefToBase<reco::Jet>,float>*,std::vector<std::pair<edm::RefToBase<reco::Jet>,float> > > >"));
  ::Reflex::Type type_22947 = ::Reflex::TypeBuilder(Reflex::Literal("edm::reftobase::RefHolder<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >"));
  ::Reflex::Type type_4860 = ::Reflex::TypeBuilder(Reflex::Literal("edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>"));
  ::Reflex::Type type_22958 = ::Reflex::TypeBuilder(Reflex::Literal("edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >"));
  ::Reflex::Type type_22959 = ::Reflex::TypeBuilder(Reflex::Literal("edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >"));
  ::Reflex::Type type_22943 = ::Reflex::TypeBuilder(Reflex::Literal("edm::reftobase::RefHolder<edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >"));
  ::Reflex::Type type_4554 = ::Reflex::TypeBuilder(Reflex::Literal("edm::RefVectorIterator<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >"));
  ::Reflex::Type type_2956 = ::Reflex::TypeBuilder(Reflex::Literal("std::vector<edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >"));
  ::Reflex::Type type_3510 = ::Reflex::TypeBuilder(Reflex::Literal("std::reverse_iterator<__gnu_cxx::__normal_iterator<reco::JetExtendedAssociation::JetExtendedData*,std::vector<reco::JetExtendedAssociation::JetExtendedData> > >"));
  ::Reflex::Type type_4797 = ::Reflex::TypeBuilder(Reflex::Literal("edm::WrapperInterface<edm::RefVector<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >"));
  ::Reflex::Type type_3515 = ::Reflex::TypeBuilder(Reflex::Literal("std::reverse_iterator<__gnu_cxx::__normal_iterator<const std::pair<edm::RefToBase<reco::Jet>,float>*,std::vector<std::pair<edm::RefToBase<reco::Jet>,float> > > >"));
  ::Reflex::Type type_2889 = ::Reflex::TypeBuilder(Reflex::Literal("std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >"));
  ::Reflex::Type type_22960 = ::Reflex::TypeBuilder(Reflex::Literal("edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >"));
  ::Reflex::Type type_4694 = ::Reflex::TypeBuilder(Reflex::Literal("edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > > >"));
  ::Reflex::Type type_2961 = ::Reflex::TypeBuilder(Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >"));
  ::Reflex::Type type_2775 = ::Reflex::TypeBuilder(Reflex::Literal("std::auto_ptr<std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > > >"));
  ::Reflex::Type type_3265 = ::Reflex::TypeBuilder(Reflex::Literal("std::allocator<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >"));
  ::Reflex::Type type_3509 = ::Reflex::TypeBuilder(Reflex::Literal("std::reverse_iterator<__gnu_cxx::__normal_iterator<const reco::JetExtendedAssociation::JetExtendedData*,std::vector<reco::JetExtendedAssociation::JetExtendedData> > >"));
  ::Reflex::Type type_22956 = ::Reflex::TypeBuilder(Reflex::Literal("edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >"));
  ::Reflex::Type type_4689 = ::Reflex::TypeBuilder(Reflex::Literal("edm::Wrapper<edm::RefVector<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >"));
  ::Reflex::Type type_2770 = ::Reflex::TypeBuilder(Reflex::Literal("std::auto_ptr<edm::RefVector<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >"));
  ::Reflex::Type type_4955 = ::Reflex::TypeBuilder(Reflex::Literal("edm::Handle<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >"));
  ::Reflex::Type type_4796 = ::Reflex::TypeBuilder(Reflex::Literal("edm::WrapperInterface<std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > > >"));
  ::Reflex::Type type_4872 = ::Reflex::TypeBuilder(Reflex::Literal("edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >"));
  ::Reflex::Type type_22964 = ::Reflex::TypeBuilder(Reflex::Literal("edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >"));
  ::Reflex::Type type_4685 = ::Reflex::TypeBuilder(Reflex::Literal("edm::Wrapper<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >"));
  ::Reflex::Type type_2765 = ::Reflex::TypeBuilder(Reflex::Literal("std::auto_ptr<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >"));
  ::Reflex::Type type_4772 = ::Reflex::TypeBuilder(Reflex::Literal("edm::TestHandle<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >"));
  ::Reflex::Type type_22942 = ::Reflex::TypeBuilder(Reflex::Literal("edm::reftobase::RefHolder<edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >"));
  ::Reflex::Type type_2996 = ::Reflex::TypeBuilder(Reflex::Literal("std::vector<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > >"));
  ::Reflex::Type type_4791 = ::Reflex::TypeBuilder(Reflex::Literal("edm::WrapperInterface<edm::RefVector<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >"));
  ::Reflex::Type type_4825 = ::Reflex::TypeBuilder(Reflex::Literal("edm::OrphanHandle<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >"));
  ::Reflex::Type type_8367 = ::Reflex::TypeBuilder(Reflex::Literal("__gnu_cxx::__alloc_traits<std::allocator<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > > >"));
  ::Reflex::Type type_4688 = ::Reflex::TypeBuilder(Reflex::Literal("edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > > >"));
  ::Reflex::Type type_3307 = ::Reflex::TypeBuilder(Reflex::Literal("std::allocator<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > >"));
  ::Reflex::Type type_2769 = ::Reflex::TypeBuilder(Reflex::Literal("std::auto_ptr<std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > > >"));
  ::Reflex::Type type_21790 = ::Reflex::TypeBuilder(Reflex::Literal("edm::refhelper::FindRefVectorUsingAdvance<edm::RefVector<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >"));
  ::Reflex::Type type_4787 = ::Reflex::TypeBuilder(Reflex::Literal("edm::WrapperInterface<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >"));
  ::Reflex::Type type_22955 = ::Reflex::TypeBuilder(Reflex::Literal("edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >"));
  ::Reflex::Type type_4790 = ::Reflex::TypeBuilder(Reflex::Literal("edm::WrapperInterface<std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > > >"));
  ::Reflex::Type type_22962 = ::Reflex::TypeBuilder(Reflex::Literal("edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >"));
  ::Reflex::Type type_8365 = ::Reflex::TypeBuilder(Reflex::Literal("__gnu_cxx::__alloc_traits<std::allocator<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > > >"));
  ::Reflex::Type type_4858 = ::Reflex::TypeBuilder(Reflex::Literal("edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>"));
  ::Reflex::Type type_21786 = ::Reflex::TypeBuilder(Reflex::Literal("edm::refhelper::FindRefVectorUsingAdvance<edm::RefVector<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >"));
  ::Reflex::Type type_2492 = ::Reflex::TypeBuilder(Reflex::Literal("std::_Vector_base<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,std::allocator<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >"));
  ::Reflex::Type type_8377 = ::Reflex::TypeBuilder(Reflex::Literal("__gnu_cxx::__alloc_traits<std::allocator<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >"));
  ::Reflex::Type type_8234 = ::Reflex::TypeBuilder(Reflex::Literal("__gnu_cxx::__normal_iterator<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>*,std::vector<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >"));
  ::Reflex::Type type_4953 = ::Reflex::TypeBuilder(Reflex::Literal("edm::Handle<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >"));
  ::Reflex::Type type_4870 = ::Reflex::TypeBuilder(Reflex::Literal("edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >"));
  ::Reflex::Type type_4683 = ::Reflex::TypeBuilder(Reflex::Literal("edm::Wrapper<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >"));
  ::Reflex::Type type_2763 = ::Reflex::TypeBuilder(Reflex::Literal("std::auto_ptr<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >"));
  ::Reflex::Type type_4770 = ::Reflex::TypeBuilder(Reflex::Literal("edm::TestHandle<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >"));
  ::Reflex::Type type_8235 = ::Reflex::TypeBuilder(Reflex::Literal("__gnu_cxx::__normal_iterator<const std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>*,std::vector<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >"));
  ::Reflex::Type type_4823 = ::Reflex::TypeBuilder(Reflex::Literal("edm::OrphanHandle<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >"));
  ::Reflex::Type type_4785 = ::Reflex::TypeBuilder(Reflex::Literal("edm::WrapperInterface<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >"));
  ::Reflex::Type type_21781 = ::Reflex::TypeBuilder(Reflex::Literal("edm::refhelper::FindRefVectorUsingAdvance<edm::RefToBaseVector<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >"));
  ::Reflex::Type type_3508 = ::Reflex::TypeBuilder(Reflex::Literal("std::reverse_iterator<__gnu_cxx::__normal_iterator<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>*,std::vector<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > > >"));
  ::Reflex::Type type_20335 = ::Reflex::TypeBuilder(Reflex::Literal("edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> >"));
  ::Reflex::Type type_3507 = ::Reflex::TypeBuilder(Reflex::Literal("std::reverse_iterator<__gnu_cxx::__normal_iterator<const std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>*,std::vector<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > > >"));
  ::Reflex::Type type_4859 = ::Reflex::TypeBuilder(Reflex::Literal("edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>"));
  ::Reflex::Type type_4954 = ::Reflex::TypeBuilder(Reflex::Literal("edm::Handle<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >"));
  ::Reflex::Type type_4871 = ::Reflex::TypeBuilder(Reflex::Literal("edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >"));
  ::Reflex::Type type_4684 = ::Reflex::TypeBuilder(Reflex::Literal("edm::Wrapper<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >"));
  ::Reflex::Type type_2764 = ::Reflex::TypeBuilder(Reflex::Literal("std::auto_ptr<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >"));
  ::Reflex::Type type_4771 = ::Reflex::TypeBuilder(Reflex::Literal("edm::TestHandle<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >"));
  ::Reflex::Type type_4824 = ::Reflex::TypeBuilder(Reflex::Literal("edm::OrphanHandle<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >"));
  ::Reflex::Type type_4786 = ::Reflex::TypeBuilder(Reflex::Literal("edm::WrapperInterface<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >"));
  ::Reflex::Type type_2484 = ::Reflex::TypeBuilder(Reflex::Literal("std::_Vector_base<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >,std::allocator<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > > >"));
  ::Reflex::Type type_8219 = ::Reflex::TypeBuilder(Reflex::Literal("__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*,std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > > >"));
  ::Reflex::Type type_20311 = ::Reflex::TypeBuilder(Reflex::Literal("edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> >"));
  ::Reflex::Type type_8220 = ::Reflex::TypeBuilder(Reflex::Literal("__gnu_cxx::__normal_iterator<const edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*,std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > > >"));
  ::Reflex::Type type_2482 = ::Reflex::TypeBuilder(Reflex::Literal("std::_Vector_base<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >,std::allocator<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > > >"));
  ::Reflex::Type type_3492 = ::Reflex::TypeBuilder(Reflex::Literal("std::reverse_iterator<__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*,std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > > > >"));
  ::Reflex::Type type_3491 = ::Reflex::TypeBuilder(Reflex::Literal("std::reverse_iterator<__gnu_cxx::__normal_iterator<const edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*,std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > > > >"));
  ::Reflex::Type type_8215 = ::Reflex::TypeBuilder(Reflex::Literal("__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*,std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > > >"));
  ::Reflex::Type type_8216 = ::Reflex::TypeBuilder(Reflex::Literal("__gnu_cxx::__normal_iterator<const edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*,std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > > >"));
  ::Reflex::Type type_2494 = ::Reflex::TypeBuilder(Reflex::Literal("std::_Vector_base<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,std::allocator<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >"));
  ::Reflex::Type type_3482 = ::Reflex::TypeBuilder(Reflex::Literal("std::reverse_iterator<__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*,std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > > > >"));
  ::Reflex::Type type_8238 = ::Reflex::TypeBuilder(Reflex::Literal("__gnu_cxx::__normal_iterator<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >*,std::vector<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >"));
  ::Reflex::Type type_3481 = ::Reflex::TypeBuilder(Reflex::Literal("std::reverse_iterator<__gnu_cxx::__normal_iterator<const edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*,std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > > > >"));
  ::Reflex::Type type_8239 = ::Reflex::TypeBuilder(Reflex::Literal("__gnu_cxx::__normal_iterator<const std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >*,std::vector<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >"));
  ::Reflex::Type type_3512 = ::Reflex::TypeBuilder(Reflex::Literal("std::reverse_iterator<__gnu_cxx::__normal_iterator<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >*,std::vector<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > > >"));
  ::Reflex::Type type_3511 = ::Reflex::TypeBuilder(Reflex::Literal("std::reverse_iterator<__gnu_cxx::__normal_iterator<const std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >*,std::vector<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > > >"));
  ::Reflex::Type type_4920 = ::Reflex::TypeBuilder(Reflex::Literal("edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >"));
  ::Reflex::Type type_4623 = ::Reflex::TypeBuilder(Reflex::Literal("edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >"));
  ::Reflex::Type type_4553 = ::Reflex::TypeBuilder(Reflex::Literal("edm::RefVectorIterator<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >"));
  ::Reflex::Type type_20323 = ::Reflex::TypeBuilder(Reflex::Literal("edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > >"));
  ::Reflex::Type type_21784 = ::Reflex::TypeBuilder(Reflex::Literal("edm::refhelper::FindRefVectorUsingAdvance<edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > > >"));
  ::Reflex::Type type_4918 = ::Reflex::TypeBuilder(Reflex::Literal("edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >"));
  ::Reflex::Type type_4613 = ::Reflex::TypeBuilder(Reflex::Literal("edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >"));
  ::Reflex::Type type_4551 = ::Reflex::TypeBuilder(Reflex::Literal("edm::RefVectorIterator<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >"));
  ::Reflex::Type type_21780 = ::Reflex::TypeBuilder(Reflex::Literal("edm::refhelper::FindRefVectorUsingAdvance<edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > > >"));
  ::Reflex::Type type_4919 = ::Reflex::TypeBuilder(Reflex::Literal("edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >"));
  ::Reflex::Type type_4618 = ::Reflex::TypeBuilder(Reflex::Literal("edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >"));
  ::Reflex::Type type_4552 = ::Reflex::TypeBuilder(Reflex::Literal("edm::RefVectorIterator<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >"));
  ::Reflex::Type type_21782 = ::Reflex::TypeBuilder(Reflex::Literal("edm::refhelper::FindRefVectorUsingAdvance<edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > > >"));
  ::Reflex::Type type_7704 = ::Reflex::TypedefTypeBuilder(Reflex::Literal("reco::PFClusterJetFwdPtrVector"), type_2960);
  ::Reflex::Type type_7810 = ::Reflex::TypedefTypeBuilder(Reflex::Literal("reco::TrackJetFwdPtrVector"), type_2968);
  ::Reflex::Type type_7861 = ::Reflex::TypedefTypeBuilder(Reflex::Literal("reco::PFClusterJetFwdRefVector"), type_2961);
  ::Reflex::Type type_7891 = ::Reflex::TypedefTypeBuilder(Reflex::Literal("reco::TrackJetFwdRefVector"), type_2969);
  ::Reflex::Type type_25989 = ::Reflex::TypedefTypeBuilder(Reflex::Literal("reco::JetTracksAssociation::Ref"), type_4919);
  ::Reflex::Type type_26122 = ::Reflex::TypedefTypeBuilder(Reflex::Literal("reco::JetTracksAssociation::RefVector"), type_4618);
  ::Reflex::Type type_26129 = ::Reflex::TypedefTypeBuilder(Reflex::Literal("reco::JetTracksAssociation::transient_vector_type"), type_2996);
  ::Reflex::Type type_26132 = ::Reflex::TypedefTypeBuilder(Reflex::Literal("reco::JetTracksAssociation::value_type"), type_2889);
  ::Reflex::Type type_26133 = ::Reflex::TypedefTypeBuilder(Reflex::Literal("reco::JetTracksAssociation::RefProd"), type_4871);
  ::Reflex::Type type_26916 = ::Reflex::TypedefTypeBuilder(Reflex::Literal("reco::JetFloatAssociation::RefVector"), type_4623);
  ::Reflex::Type type_26923 = ::Reflex::TypedefTypeBuilder(Reflex::Literal("reco::JetFloatAssociation::transient_vector_type"), type_2998);
  ::Reflex::Type type_26924 = ::Reflex::TypedefTypeBuilder(Reflex::Literal("reco::JetFloatAssociation::value_type"), type_2911);
  ::Reflex::Type type_26925 = ::Reflex::TypedefTypeBuilder(Reflex::Literal("reco::JetFloatAssociation::RefProd"), type_4872);
  ::Reflex::Type type_26926 = ::Reflex::TypedefTypeBuilder(Reflex::Literal("reco::JetFloatAssociation::Ref"), type_4920);
  ::Reflex::Type type_27480 = ::Reflex::TypedefTypeBuilder(Reflex::Literal("reco::JetExtendedAssociation::RefVector"), type_4613);
  ::Reflex::Type type_27481 = ::Reflex::TypedefTypeBuilder(Reflex::Literal("reco::JetExtendedAssociation::Values"), type_2995);
  ::Reflex::Type type_27489 = ::Reflex::TypedefTypeBuilder(Reflex::Literal("reco::JetExtendedAssociation::transient_vector_type"), type_2994);
  ::Reflex::Type type_27494 = ::Reflex::TypedefTypeBuilder(Reflex::Literal("reco::JetExtendedAssociation::value_type"), type_2888);
  ::Reflex::Type type_27495 = ::Reflex::TypedefTypeBuilder(Reflex::Literal("reco::JetExtendedAssociation::RefProd"), type_4870);
  ::Reflex::Type type_27498 = ::Reflex::TypedefTypeBuilder(Reflex::Literal("reco::JetExtendedAssociation::Ref"), type_4918);
  ::Reflex::Type type_13452 = ::Reflex::ReferenceBuilder(type_1675);
  ::Reflex::Type type_1675c = ::Reflex::ConstBuilder(type_1675);
  ::Reflex::Type type_13454 = ::Reflex::ReferenceBuilder(type_1675c);
  ::Reflex::Type type_902c = ::Reflex::ConstBuilder(type_902);
  ::Reflex::Type type_14618 = ::Reflex::ReferenceBuilder(type_902c);
  ::Reflex::Type type_9542 = ::Reflex::PointerBuilder(type_1675);
  ::Reflex::Type type_13450 = ::Reflex::PointerBuilder(type_1675c);
  ::Reflex::Type type_3234 = ::Reflex::TypedefTypeBuilder(Reflex::Literal("std::size_t"), type_362);
  ::Reflex::Type type_3113 = ::Reflex::TypedefTypeBuilder(Reflex::Literal("std::ptrdiff_t"), type_61);
  ::Reflex::Type type_3253c = ::Reflex::ConstBuilder(type_3253);
  ::Reflex::Type type_32466 = ::Reflex::ReferenceBuilder(type_3253c);
  ::Reflex::Type type_2953c = ::Reflex::ConstBuilder(type_2953);
  ::Reflex::Type type_33758 = ::Reflex::ReferenceBuilder(type_2953c);
  ::Reflex::Type type_33759 = ::Reflex::ReferenceBuilder(type_2953);
  ::Reflex::Type type_13777 = ::Reflex::ReferenceBuilder(type_7932);
  ::Reflex::Type type_7932c = ::Reflex::ConstBuilder(type_7932);
  ::Reflex::Type type_13779 = ::Reflex::ReferenceBuilder(type_7932c);
  ::Reflex::Type type_6950 = ::Reflex::TypedefTypeBuilder(Reflex::Literal("math::XYZTLorentzVectorD"), type_6949);
  ::Reflex::Type type_6999 = ::Reflex::TypedefTypeBuilder(Reflex::Literal("math::XYZTLorentzVector"), type_6950);
  ::Reflex::Type type_6999c = ::Reflex::ConstBuilder(type_6999);
  ::Reflex::Type type_25131 = ::Reflex::ReferenceBuilder(type_6999c);
  ::Reflex::Type type_6958 = ::Reflex::TypedefTypeBuilder(Reflex::Literal("math::XYZPointD"), type_6957);
  ::Reflex::Type type_6967 = ::Reflex::TypedefTypeBuilder(Reflex::Literal("math::XYZPoint"), type_6958);
  ::Reflex::Type type_6967c = ::Reflex::ConstBuilder(type_6967);
  ::Reflex::Type type_25133 = ::Reflex::ReferenceBuilder(type_6967c);
  ::Reflex::Type type_2992c = ::Reflex::ConstBuilder(type_2992);
  ::Reflex::Type type_33808 = ::Reflex::ReferenceBuilder(type_2992c);
  ::Reflex::Type type_9940 = ::Reflex::PointerBuilder(type_7932);
  ::Reflex::Type type_2551 = ::Reflex::TypedefTypeBuilder(Reflex::Literal("std::string"), type_2550);
  ::Reflex::Type type_7818 = ::Reflex::TypedefTypeBuilder(Reflex::Literal("reco::PFClusterRef"), type_4933);
  ::Reflex::Type type_2125 = ::Reflex::TypedefTypeBuilder(Reflex::Literal("size_t"), type_362);
  ::Reflex::Type type_13775 = ::Reflex::PointerBuilder(type_7932c);
  ::Reflex::Type type_3266c = ::Reflex::ConstBuilder(type_3266);
  ::Reflex::Type type_32739 = ::Reflex::ReferenceBuilder(type_3266c);
  ::Reflex::Type type_2962c = ::Reflex::ConstBuilder(type_2962);
  ::Reflex::Type type_20352 = ::Reflex::ReferenceBuilder(type_2962c);
  ::Reflex::Type type_33772 = ::Reflex::ReferenceBuilder(type_2962);
  ::Reflex::Type type_7859 = ::Reflex::TypedefTypeBuilder(Reflex::Literal("reco::VertexRef"), type_4934);
  ::Reflex::Type type_14037 = ::Reflex::ReferenceBuilder(type_7775);
  ::Reflex::Type type_7775c = ::Reflex::ConstBuilder(type_7775);
  ::Reflex::Type type_14039 = ::Reflex::ReferenceBuilder(type_7775c);
  ::Reflex::Type type_10091 = ::Reflex::PointerBuilder(type_7775);
  ::Reflex::Type type_7859c = ::Reflex::ConstBuilder(type_7859);
  ::Reflex::Type type_38768 = ::Reflex::ReferenceBuilder(type_7859c);
  ::Reflex::Type type_14035 = ::Reflex::PointerBuilder(type_7775c);
  ::Reflex::Type type_3281c = ::Reflex::ConstBuilder(type_3281);
  ::Reflex::Type type_32843 = ::Reflex::ReferenceBuilder(type_3281c);
  ::Reflex::Type type_2970c = ::Reflex::ConstBuilder(type_2970);
  ::Reflex::Type type_20376 = ::Reflex::ReferenceBuilder(type_2970c);
  ::Reflex::Type type_33782 = ::Reflex::ReferenceBuilder(type_2970);
  ::Reflex::Type type_13647 = ::Reflex::ReferenceBuilder(type_4584);
  ::Reflex::Type type_4584c = ::Reflex::ConstBuilder(type_4584);
  ::Reflex::Type type_13649 = ::Reflex::ReferenceBuilder(type_4584c);
  ::Reflex::Type type_4914c = ::Reflex::ConstBuilder(type_4914);
  ::Reflex::Type type_20128 = ::Reflex::PointerBuilder(type_4914c);
  ::Reflex::Type type_4847c = ::Reflex::ConstBuilder(type_4847);
  ::Reflex::Type type_23020 = ::Reflex::ReferenceBuilder(type_4847c);
  ::Reflex::Type type_698c = ::Reflex::ConstBuilder(type_698);
  ::Reflex::Type type_4040 = ::Reflex::PointerBuilder(type_698c);
  ::Reflex::Type type_4899c = ::Reflex::ConstBuilder(type_4899);
  ::Reflex::Type type_36999 = ::Reflex::ReferenceBuilder(type_4899c);
  ::Reflex::Type type_13907 = ::Reflex::ReferenceBuilder(type_4585);
  ::Reflex::Type type_4585c = ::Reflex::ConstBuilder(type_4585);
  ::Reflex::Type type_13909 = ::Reflex::ReferenceBuilder(type_4585c);
  ::Reflex::Type type_4900c = ::Reflex::ConstBuilder(type_4900);
  ::Reflex::Type type_37000 = ::Reflex::ReferenceBuilder(type_4900c);
  ::Reflex::Type type_4921c = ::Reflex::ConstBuilder(type_4921);
  ::Reflex::Type type_4629c = ::Reflex::ConstBuilder(type_4629);
  ::Reflex::Type type_37022 = ::Reflex::ReferenceBuilder(type_4629c);
  ::Reflex::Type type_4974c = ::Reflex::ConstBuilder(type_4974);
  ::Reflex::Type type_20008 = ::Reflex::ReferenceBuilder(type_4974c);
  ::Reflex::Type type_36619 = ::Reflex::ReferenceBuilder(type_4921c);
  ::Reflex::Type type_4004c = ::Reflex::ConstBuilder(type_4004);
  ::Reflex::Type type_20127 = ::Reflex::ReferenceBuilder(type_4004c);
  ::Reflex::Type type_37023 = ::Reflex::PointerBuilder(type_2962c);
  ::Reflex::Type type_4554c = ::Reflex::ConstBuilder(type_4554);
  ::Reflex::Type type_37024 = ::Reflex::ReferenceBuilder(type_4554c);
  ::Reflex::Type type_37025 = ::Reflex::ReferenceBuilder(type_4629);
  ::Reflex::Type type_20132 = ::Reflex::ReferenceBuilder(type_2946);
  ::Reflex::Type type_4849 = ::Reflex::TypedefTypeBuilder(Reflex::Literal("edm::helper_vector"), type_4848);
  ::Reflex::Type type_20133 = ::Reflex::ReferenceBuilder(type_4849);
  ::Reflex::Type type_4924c = ::Reflex::ConstBuilder(type_4924);
  ::Reflex::Type type_4639c = ::Reflex::ConstBuilder(type_4639);
  ::Reflex::Type type_37032 = ::Reflex::ReferenceBuilder(type_4639c);
  ::Reflex::Type type_36647 = ::Reflex::ReferenceBuilder(type_4924c);
  ::Reflex::Type type_37033 = ::Reflex::PointerBuilder(type_2970c);
  ::Reflex::Type type_4556c = ::Reflex::ConstBuilder(type_4556);
  ::Reflex::Type type_37034 = ::Reflex::ReferenceBuilder(type_4556c);
  ::Reflex::Type type_37035 = ::Reflex::ReferenceBuilder(type_4639);
  ::Reflex::Type type_37617 = ::Reflex::PointerBuilder(type_22952);
  ::Reflex::Type type_4736c = ::Reflex::ConstBuilder(type_4736);
  ::Reflex::Type type_37618 = ::Reflex::ReferenceBuilder(type_4736c);
  ::Reflex::Type type_37619 = ::Reflex::ReferenceBuilder(type_4736);
  ::Reflex::Type type_4891c = ::Reflex::ConstBuilder(type_4891);
  ::Reflex::Type type_33732 = ::Reflex::ReferenceBuilder(type_4891c);
  ::Reflex::Type type_37060 = ::Reflex::PointerBuilder(type_4736c);
  ::Reflex::Type type_502c = ::Reflex::ConstBuilder(type_502);
  ::Reflex::Type type_20180 = ::Reflex::ReferenceBuilder(type_502c);
  ::Reflex::Type type_37061 = ::Reflex::PointerBuilder(type_4736);
  ::Reflex::Type type_4784c = ::Reflex::ConstBuilder(type_4784);
  ::Reflex::Type type_37062 = ::Reflex::PointerBuilder(type_4784c);
  ::Reflex::Type type_36516 = ::Reflex::ReferenceBuilder(type_4377);
  ::Reflex::Type type_11211 = ::Reflex::ReferenceBuilder(type_4040);
  ::Reflex::Type type_2947c = ::Reflex::ConstBuilder(type_2947);
  ::Reflex::Type type_24927 = ::Reflex::ReferenceBuilder(type_2947c);
  ::Reflex::Type type_4864c = ::Reflex::ConstBuilder(type_4864);
  ::Reflex::Type type_37687 = ::Reflex::ReferenceBuilder(type_4864c);
  ::Reflex::Type type_37688 = ::Reflex::ReferenceBuilder(type_4864);
  ::Reflex::Type type_2952c = ::Reflex::ConstBuilder(type_2952);
  ::Reflex::Type type_33755 = ::Reflex::ReferenceBuilder(type_2952c);
  ::Reflex::Type type_37077 = ::Reflex::PointerBuilder(type_4864c);
  ::Reflex::Type type_37078 = ::Reflex::PointerBuilder(type_4864);
  ::Reflex::Type type_4788c = ::Reflex::ConstBuilder(type_4788);
  ::Reflex::Type type_37079 = ::Reflex::PointerBuilder(type_4788c);
  ::Reflex::Type type_37097 = ::Reflex::PointerBuilder(type_2962);
  ::Reflex::Type type_4792c = ::Reflex::ConstBuilder(type_4792);
  ::Reflex::Type type_37098 = ::Reflex::PointerBuilder(type_4792c);
  ::Reflex::Type type_37125 = ::Reflex::PointerBuilder(type_2970);
  ::Reflex::Type type_4798c = ::Reflex::ConstBuilder(type_4798);
  ::Reflex::Type type_37126 = ::Reflex::PointerBuilder(type_4798c);
  ::Reflex::Type type_13712 = ::Reflex::ReferenceBuilder(type_4706);
  ::Reflex::Type type_4706c = ::Reflex::ConstBuilder(type_4706);
  ::Reflex::Type type_13714 = ::Reflex::ReferenceBuilder(type_4706c);
  ::Reflex::Type type_13972 = ::Reflex::ReferenceBuilder(type_4707);
  ::Reflex::Type type_4707c = ::Reflex::ConstBuilder(type_4707);
  ::Reflex::Type type_13974 = ::Reflex::ReferenceBuilder(type_4707c);
  ::Reflex::Type type_4960c = ::Reflex::ConstBuilder(type_4960);
  ::Reflex::Type type_37136 = ::Reflex::ReferenceBuilder(type_4960c);
  ::Reflex::Type type_4815c = ::Reflex::ConstBuilder(type_4815);
  ::Reflex::Type type_37137 = ::Reflex::ReferenceBuilder(type_4815c);
  ::Reflex::Type type_4721c = ::Reflex::ConstBuilder(type_4721);
  ::Reflex::Type type_37138 = ::Reflex::ReferenceBuilder(type_4721c);
  ::Reflex::Type type_37139 = ::Reflex::PointerBuilder(type_4815c);
  ::Reflex::Type type_37140 = ::Reflex::ReferenceBuilder(type_4721);
  ::Reflex::Type type_6989 = ::Reflex::TypedefTypeBuilder(Reflex::Literal("math::PtEtaPhiELorentzVectorF"), type_6988);
  ::Reflex::Type type_27499 = ::Reflex::TypedefTypeBuilder(Reflex::Literal("reco::JetExtendedAssociation::LorentzVector"), type_6989);
  ::Reflex::Type type_14811 = ::Reflex::ReferenceBuilder(type_12876);
  ::Reflex::Type type_12876c = ::Reflex::ConstBuilder(type_12876);
  ::Reflex::Type type_14813 = ::Reflex::ReferenceBuilder(type_12876c);
  ::Reflex::Type type_37681 = ::Reflex::PointerBuilder(type_2994);
  ::Reflex::Type type_2888c = ::Reflex::ConstBuilder(type_2888);
  ::Reflex::Type type_14748 = ::Reflex::ReferenceBuilder(type_2888c);
  ::Reflex::Type type_4858c = ::Reflex::ConstBuilder(type_4858);
  ::Reflex::Type type_20316 = ::Reflex::ReferenceBuilder(type_4858c);
  ::Reflex::Type type_37682 = ::Reflex::ReferenceBuilder(type_4858);
  ::Reflex::Type type_37683 = ::Reflex::PointerBuilder(type_2996);
  ::Reflex::Type type_2889c = ::Reflex::ConstBuilder(type_2889);
  ::Reflex::Type type_14878 = ::Reflex::ReferenceBuilder(type_2889c);
  ::Reflex::Type type_4859c = ::Reflex::ConstBuilder(type_4859);
  ::Reflex::Type type_20328 = ::Reflex::ReferenceBuilder(type_4859c);
  ::Reflex::Type type_4628c = ::Reflex::ConstBuilder(type_4628);
  ::Reflex::Type type_14943 = ::Reflex::ReferenceBuilder(type_4628c);
  ::Reflex::Type type_14941 = ::Reflex::ReferenceBuilder(type_4628);
  ::Reflex::Type type_37684 = ::Reflex::ReferenceBuilder(type_4859);
  ::Reflex::Type type_37685 = ::Reflex::PointerBuilder(type_2998);
  ::Reflex::Type type_2911c = ::Reflex::ConstBuilder(type_2911);
  ::Reflex::Type type_15008 = ::Reflex::ReferenceBuilder(type_2911c);
  ::Reflex::Type type_4860c = ::Reflex::ConstBuilder(type_4860);
  ::Reflex::Type type_20340 = ::Reflex::ReferenceBuilder(type_4860c);
  ::Reflex::Type type_14616 = ::Reflex::ReferenceBuilder(type_902);
  ::Reflex::Type type_37686 = ::Reflex::ReferenceBuilder(type_4860);
  ::Reflex::Type type_37725 = ::Reflex::ReferenceBuilder(type_4874);
  ::Reflex::Type type_4874c = ::Reflex::ConstBuilder(type_4874);
  ::Reflex::Type type_37726 = ::Reflex::ReferenceBuilder(type_4874c);
  ::Reflex::Type type_4956c = ::Reflex::ConstBuilder(type_4956);
  ::Reflex::Type type_37727 = ::Reflex::ReferenceBuilder(type_4956c);
  ::Reflex::Type type_4826c = ::Reflex::ConstBuilder(type_4826);
  ::Reflex::Type type_37728 = ::Reflex::ReferenceBuilder(type_4826c);
  ::Reflex::Type type_4773c = ::Reflex::ConstBuilder(type_4773);
  ::Reflex::Type type_37729 = ::Reflex::ReferenceBuilder(type_4773c);
  ::Reflex::Type type_37735 = ::Reflex::ReferenceBuilder(type_4876);
  ::Reflex::Type type_4876c = ::Reflex::ConstBuilder(type_4876);
  ::Reflex::Type type_37736 = ::Reflex::ReferenceBuilder(type_4876c);
  ::Reflex::Type type_4959c = ::Reflex::ConstBuilder(type_4959);
  ::Reflex::Type type_37737 = ::Reflex::ReferenceBuilder(type_4959c);
  ::Reflex::Type type_4829c = ::Reflex::ConstBuilder(type_4829);
  ::Reflex::Type type_37738 = ::Reflex::ReferenceBuilder(type_4829c);
  ::Reflex::Type type_4776c = ::Reflex::ConstBuilder(type_4776);
  ::Reflex::Type type_37739 = ::Reflex::ReferenceBuilder(type_4776c);
  ::Reflex::Type type_37740 = ::Reflex::PointerBuilder(type_22938);
  ::Reflex::Type type_37741 = ::Reflex::ReferenceBuilder(type_4891);
  ::Reflex::Type type_7762c = ::Reflex::ConstBuilder(type_7762);
  ::Reflex::Type type_37742 = ::Reflex::ReferenceBuilder(type_7762c);
  ::Reflex::Type type_37743 = ::Reflex::PointerBuilder(type_7762c);
  ::Reflex::Type type_37803 = ::Reflex::ReferenceBuilder(type_4921);
  ::Reflex::Type type_219c = ::Reflex::ConstBuilder(type_219);
  ::Reflex::Type type_10959 = ::Reflex::ReferenceBuilder(type_219c);
  ::Reflex::Type type_37805 = ::Reflex::ReferenceBuilder(type_4924);
  ::Reflex::Type type_38656 = ::Reflex::ReferenceBuilder(type_7739);
  ::Reflex::Type type_7739c = ::Reflex::ConstBuilder(type_7739);
  ::Reflex::Type type_38657 = ::Reflex::ReferenceBuilder(type_7739c);
  ::Reflex::Type type_4922c = ::Reflex::ConstBuilder(type_4922);
  ::Reflex::Type type_13519 = ::Reflex::ReferenceBuilder(type_4922c);
  ::Reflex::Type type_38660 = ::Reflex::ReferenceBuilder(type_7741);
  ::Reflex::Type type_7741c = ::Reflex::ConstBuilder(type_7741);
  ::Reflex::Type type_38661 = ::Reflex::ReferenceBuilder(type_7741c);
  ::Reflex::Type type_42321 = ::Reflex::ReferenceBuilder(type_22938);
  ::Reflex::Type type_22938c = ::Reflex::ConstBuilder(type_22938);
  ::Reflex::Type type_42322 = ::Reflex::ReferenceBuilder(type_22938c);
  ::Reflex::Type type_21403 = ::Reflex::ReferenceBuilder(type_12419);
  ::Reflex::Type type_11032 = ::Reflex::ReferenceBuilder(type_2550);
  ::Reflex::Type type_21401 = ::Reflex::PointerBuilder(type_12419);
  ::Reflex::Type type_22948c = ::Reflex::ConstBuilder(type_22948);
  ::Reflex::Type type_42337 = ::Reflex::ReferenceBuilder(type_22948c);
  ::Reflex::Type type_42338 = ::Reflex::ReferenceBuilder(type_22948);
  ::Reflex::Type type_21377 = ::Reflex::PointerBuilder(type_4848);
  ::Reflex::Type type_22951c = ::Reflex::ConstBuilder(type_22951);
  ::Reflex::Type type_42341 = ::Reflex::ReferenceBuilder(type_22951c);
  ::Reflex::Type type_42342 = ::Reflex::ReferenceBuilder(type_22951);
  ::Reflex::Type type_42343 = ::Reflex::PointerBuilder(type_22938c);
  ::Reflex::Type type_42344 = ::Reflex::ReferenceBuilder(type_22952);
  ::Reflex::Type type_22952c = ::Reflex::ConstBuilder(type_22952);
  ::Reflex::Type type_42345 = ::Reflex::ReferenceBuilder(type_22952c);
  ::Reflex::Type type_22961c = ::Reflex::ConstBuilder(type_22961);
  ::Reflex::Type type_42360 = ::Reflex::ReferenceBuilder(type_22961c);
  ::Reflex::Type type_42361 = ::Reflex::ReferenceBuilder(type_22961);
  ::Reflex::Type type_37744 = ::Reflex::PointerBuilder(type_22939);
  ::Reflex::Type type_6334c = ::Reflex::ConstBuilder(type_6334);
  ::Reflex::Type type_37747 = ::Reflex::PointerBuilder(type_6334c);
  ::Reflex::Type type_22939c = ::Reflex::ConstBuilder(type_22939);
  ::Reflex::Type type_42324 = ::Reflex::ReferenceBuilder(type_22939c);
  ::Reflex::Type type_22962c = ::Reflex::ConstBuilder(type_22962);
  ::Reflex::Type type_42362 = ::Reflex::ReferenceBuilder(type_22962c);
  ::Reflex::Type type_42363 = ::Reflex::ReferenceBuilder(type_22962);
  ::Reflex::Type type_22964c = ::Reflex::ConstBuilder(type_22964);
  ::Reflex::Type type_42366 = ::Reflex::ReferenceBuilder(type_22964c);
  ::Reflex::Type type_42367 = ::Reflex::ReferenceBuilder(type_22964);
  ::Reflex::Type type_9561 = ::Reflex::PointerBuilder(type_4584);
  ::Reflex::Type type_13645 = ::Reflex::PointerBuilder(type_4584c);
  ::Reflex::Type type_3264c = ::Reflex::ConstBuilder(type_3264);
  ::Reflex::Type type_32479 = ::Reflex::ReferenceBuilder(type_3264c);
  ::Reflex::Type type_2960c = ::Reflex::ConstBuilder(type_2960);
  ::Reflex::Type type_33766 = ::Reflex::ReferenceBuilder(type_2960c);
  ::Reflex::Type type_33767 = ::Reflex::ReferenceBuilder(type_2960);
  ::Reflex::Type type_9599 = ::Reflex::PointerBuilder(type_4585);
  ::Reflex::Type type_13905 = ::Reflex::PointerBuilder(type_4585c);
  ::Reflex::Type type_3279c = ::Reflex::ConstBuilder(type_3279);
  ::Reflex::Type type_32505 = ::Reflex::ReferenceBuilder(type_3279c);
  ::Reflex::Type type_2968c = ::Reflex::ConstBuilder(type_2968);
  ::Reflex::Type type_33776 = ::Reflex::ReferenceBuilder(type_2968c);
  ::Reflex::Type type_33777 = ::Reflex::ReferenceBuilder(type_2968);
  ::Reflex::Type type_9580 = ::Reflex::PointerBuilder(type_4706);
  ::Reflex::Type type_13710 = ::Reflex::PointerBuilder(type_4706c);
  ::Reflex::Type type_3265c = ::Reflex::ConstBuilder(type_3265);
  ::Reflex::Type type_32492 = ::Reflex::ReferenceBuilder(type_3265c);
  ::Reflex::Type type_2961c = ::Reflex::ConstBuilder(type_2961);
  ::Reflex::Type type_33769 = ::Reflex::ReferenceBuilder(type_2961c);
  ::Reflex::Type type_33770 = ::Reflex::ReferenceBuilder(type_2961);
  ::Reflex::Type type_9618 = ::Reflex::PointerBuilder(type_4707);
  ::Reflex::Type type_13970 = ::Reflex::PointerBuilder(type_4707c);
  ::Reflex::Type type_3280c = ::Reflex::ConstBuilder(type_3280);
  ::Reflex::Type type_32518 = ::Reflex::ReferenceBuilder(type_3280c);
  ::Reflex::Type type_2969c = ::Reflex::ConstBuilder(type_2969);
  ::Reflex::Type type_33779 = ::Reflex::ReferenceBuilder(type_2969c);
  ::Reflex::Type type_33780 = ::Reflex::ReferenceBuilder(type_2969);
  ::Reflex::Type type_37801 = ::Reflex::ReferenceBuilder(type_4919);
  ::Reflex::Type type_4919c = ::Reflex::ConstBuilder(type_4919);
  ::Reflex::Type type_37009 = ::Reflex::ReferenceBuilder(type_4919c);
  ::Reflex::Type type_4954c = ::Reflex::ConstBuilder(type_4954);
  ::Reflex::Type type_37712 = ::Reflex::ReferenceBuilder(type_4954c);
  ::Reflex::Type type_4824c = ::Reflex::ConstBuilder(type_4824);
  ::Reflex::Type type_37713 = ::Reflex::ReferenceBuilder(type_4824c);
  ::Reflex::Type type_4618c = ::Reflex::ConstBuilder(type_4618);
  ::Reflex::Type type_37008 = ::Reflex::ReferenceBuilder(type_4618c);
  ::Reflex::Type type_37010 = ::Reflex::PointerBuilder(type_4859c);
  ::Reflex::Type type_4771c = ::Reflex::ConstBuilder(type_4771);
  ::Reflex::Type type_37714 = ::Reflex::ReferenceBuilder(type_4771c);
  ::Reflex::Type type_14874 = ::Reflex::PointerBuilder(type_2889c);
  ::Reflex::Type type_4871c = ::Reflex::ConstBuilder(type_4871);
  ::Reflex::Type type_37711 = ::Reflex::ReferenceBuilder(type_4871c);
  ::Reflex::Type type_4552c = ::Reflex::ConstBuilder(type_4552);
  ::Reflex::Type type_37011 = ::Reflex::ReferenceBuilder(type_4552c);
  ::Reflex::Type type_37012 = ::Reflex::ReferenceBuilder(type_4618);
  ::Reflex::Type type_14876 = ::Reflex::ReferenceBuilder(type_2889);
  ::Reflex::Type type_9808 = ::Reflex::PointerBuilder(type_2889);
  ::Reflex::Type type_3307c = ::Reflex::ConstBuilder(type_3307);
  ::Reflex::Type type_32648 = ::Reflex::ReferenceBuilder(type_3307c);
  ::Reflex::Type type_2996c = ::Reflex::ConstBuilder(type_2996);
  ::Reflex::Type type_33817 = ::Reflex::ReferenceBuilder(type_2996c);
  ::Reflex::Type type_33818 = ::Reflex::ReferenceBuilder(type_2996);
  ::Reflex::Type type_37710 = ::Reflex::ReferenceBuilder(type_4871);
  ::Reflex::Type type_4920c = ::Reflex::ConstBuilder(type_4920);
  ::Reflex::Type type_4623c = ::Reflex::ConstBuilder(type_4623);
  ::Reflex::Type type_37014 = ::Reflex::ReferenceBuilder(type_4623c);
  ::Reflex::Type type_37015 = ::Reflex::ReferenceBuilder(type_4920c);
  ::Reflex::Type type_37016 = ::Reflex::PointerBuilder(type_4860c);
  ::Reflex::Type type_4553c = ::Reflex::ConstBuilder(type_4553);
  ::Reflex::Type type_37017 = ::Reflex::ReferenceBuilder(type_4553c);
  ::Reflex::Type type_37018 = ::Reflex::ReferenceBuilder(type_4623);
  ::Reflex::Type type_9846 = ::Reflex::PointerBuilder(type_2911);
  ::Reflex::Type type_15004 = ::Reflex::PointerBuilder(type_2911c);
  ::Reflex::Type type_15006 = ::Reflex::ReferenceBuilder(type_2911);
  ::Reflex::Type type_3309c = ::Reflex::ConstBuilder(type_3309);
  ::Reflex::Type type_32674 = ::Reflex::ReferenceBuilder(type_3309c);
  ::Reflex::Type type_2998c = ::Reflex::ConstBuilder(type_2998);
  ::Reflex::Type type_33823 = ::Reflex::ReferenceBuilder(type_2998c);
  ::Reflex::Type type_33824 = ::Reflex::ReferenceBuilder(type_2998);
  ::Reflex::Type type_37715 = ::Reflex::ReferenceBuilder(type_4872);
  ::Reflex::Type type_4872c = ::Reflex::ConstBuilder(type_4872);
  ::Reflex::Type type_37716 = ::Reflex::ReferenceBuilder(type_4872c);
  ::Reflex::Type type_4955c = ::Reflex::ConstBuilder(type_4955);
  ::Reflex::Type type_37717 = ::Reflex::ReferenceBuilder(type_4955c);
  ::Reflex::Type type_4825c = ::Reflex::ConstBuilder(type_4825);
  ::Reflex::Type type_37718 = ::Reflex::ReferenceBuilder(type_4825c);
  ::Reflex::Type type_4772c = ::Reflex::ConstBuilder(type_4772);
  ::Reflex::Type type_37719 = ::Reflex::ReferenceBuilder(type_4772c);
  ::Reflex::Type type_37802 = ::Reflex::ReferenceBuilder(type_4920);
  ::Reflex::Type type_4918c = ::Reflex::ConstBuilder(type_4918);
  ::Reflex::Type type_4613c = ::Reflex::ConstBuilder(type_4613);
  ::Reflex::Type type_37002 = ::Reflex::ReferenceBuilder(type_4613c);
  ::Reflex::Type type_37003 = ::Reflex::ReferenceBuilder(type_4918c);
  ::Reflex::Type type_37004 = ::Reflex::PointerBuilder(type_4858c);
  ::Reflex::Type type_4551c = ::Reflex::ConstBuilder(type_4551);
  ::Reflex::Type type_37005 = ::Reflex::ReferenceBuilder(type_4551c);
  ::Reflex::Type type_37006 = ::Reflex::ReferenceBuilder(type_4613);
  ::Reflex::Type type_9789 = ::Reflex::PointerBuilder(type_12876);
  ::Reflex::Type type_14809 = ::Reflex::PointerBuilder(type_12876c);
  ::Reflex::Type type_3306c = ::Reflex::ConstBuilder(type_3306);
  ::Reflex::Type type_32635 = ::Reflex::ReferenceBuilder(type_3306c);
  ::Reflex::Type type_2995c = ::Reflex::ConstBuilder(type_2995);
  ::Reflex::Type type_33814 = ::Reflex::ReferenceBuilder(type_2995c);
  ::Reflex::Type type_33815 = ::Reflex::ReferenceBuilder(type_2995);
  ::Reflex::Type type_14746 = ::Reflex::ReferenceBuilder(type_2888);
  ::Reflex::Type type_9770 = ::Reflex::PointerBuilder(type_2888);
  ::Reflex::Type type_14744 = ::Reflex::PointerBuilder(type_2888c);
  ::Reflex::Type type_3305c = ::Reflex::ConstBuilder(type_3305);
  ::Reflex::Type type_32622 = ::Reflex::ReferenceBuilder(type_3305c);
  ::Reflex::Type type_2994c = ::Reflex::ConstBuilder(type_2994);
  ::Reflex::Type type_33811 = ::Reflex::ReferenceBuilder(type_2994c);
  ::Reflex::Type type_33812 = ::Reflex::ReferenceBuilder(type_2994);
  ::Reflex::Type type_37705 = ::Reflex::ReferenceBuilder(type_4870);
  ::Reflex::Type type_4870c = ::Reflex::ConstBuilder(type_4870);
  ::Reflex::Type type_37706 = ::Reflex::ReferenceBuilder(type_4870c);
  ::Reflex::Type type_4953c = ::Reflex::ConstBuilder(type_4953);
  ::Reflex::Type type_37707 = ::Reflex::ReferenceBuilder(type_4953c);
  ::Reflex::Type type_4823c = ::Reflex::ConstBuilder(type_4823);
  ::Reflex::Type type_37708 = ::Reflex::ReferenceBuilder(type_4823c);
  ::Reflex::Type type_4770c = ::Reflex::ConstBuilder(type_4770);
  ::Reflex::Type type_37709 = ::Reflex::ReferenceBuilder(type_4770c);
  ::Reflex::Type type_37800 = ::Reflex::ReferenceBuilder(type_4918);
  ::Reflex::Type type_37065 = ::Reflex::PointerBuilder(type_4858);
  ::Reflex::Type type_4785c = ::Reflex::ConstBuilder(type_4785);
  ::Reflex::Type type_37066 = ::Reflex::PointerBuilder(type_4785c);
  ::Reflex::Type type_37069 = ::Reflex::PointerBuilder(type_4859);
  ::Reflex::Type type_4786c = ::Reflex::ConstBuilder(type_4786);
  ::Reflex::Type type_37070 = ::Reflex::PointerBuilder(type_4786c);
  ::Reflex::Type type_37073 = ::Reflex::PointerBuilder(type_4860);
  ::Reflex::Type type_4787c = ::Reflex::ConstBuilder(type_4787);
  ::Reflex::Type type_37074 = ::Reflex::PointerBuilder(type_4787c);
  ::Reflex::Type type_37082 = ::Reflex::PointerBuilder(type_2960c);
  ::Reflex::Type type_37083 = ::Reflex::PointerBuilder(type_2960);
  ::Reflex::Type type_4789c = ::Reflex::ConstBuilder(type_4789);
  ::Reflex::Type type_37084 = ::Reflex::PointerBuilder(type_4789c);
  ::Reflex::Type type_37087 = ::Reflex::PointerBuilder(type_2961c);
  ::Reflex::Type type_37088 = ::Reflex::PointerBuilder(type_2961);
  ::Reflex::Type type_4790c = ::Reflex::ConstBuilder(type_4790);
  ::Reflex::Type type_37089 = ::Reflex::PointerBuilder(type_4790c);
  ::Reflex::Type type_37092 = ::Reflex::PointerBuilder(type_4629c);
  ::Reflex::Type type_37093 = ::Reflex::PointerBuilder(type_4629);
  ::Reflex::Type type_4791c = ::Reflex::ConstBuilder(type_4791);
  ::Reflex::Type type_37094 = ::Reflex::PointerBuilder(type_4791c);
  ::Reflex::Type type_37110 = ::Reflex::PointerBuilder(type_2968c);
  ::Reflex::Type type_37111 = ::Reflex::PointerBuilder(type_2968);
  ::Reflex::Type type_4795c = ::Reflex::ConstBuilder(type_4795);
  ::Reflex::Type type_37112 = ::Reflex::PointerBuilder(type_4795c);
  ::Reflex::Type type_37115 = ::Reflex::PointerBuilder(type_2969c);
  ::Reflex::Type type_37116 = ::Reflex::PointerBuilder(type_2969);
  ::Reflex::Type type_4796c = ::Reflex::ConstBuilder(type_4796);
  ::Reflex::Type type_37117 = ::Reflex::PointerBuilder(type_4796c);
  ::Reflex::Type type_37120 = ::Reflex::PointerBuilder(type_4639c);
  ::Reflex::Type type_37121 = ::Reflex::PointerBuilder(type_4639);
  ::Reflex::Type type_4797c = ::Reflex::ConstBuilder(type_4797);
  ::Reflex::Type type_37122 = ::Reflex::PointerBuilder(type_4797c);
  ::Reflex::Type type_42325 = ::Reflex::ReferenceBuilder(type_22942);
  ::Reflex::Type type_22942c = ::Reflex::ConstBuilder(type_22942);
  ::Reflex::Type type_42326 = ::Reflex::ReferenceBuilder(type_22942c);
  ::Reflex::Type type_12419c = ::Reflex::ConstBuilder(type_12419);
  ::Reflex::Type type_39948 = ::Reflex::ReferenceBuilder(type_12419c);
  ::Reflex::Type type_42327 = ::Reflex::ReferenceBuilder(type_22943);
  ::Reflex::Type type_22943c = ::Reflex::ConstBuilder(type_22943);
  ::Reflex::Type type_42328 = ::Reflex::ReferenceBuilder(type_22943c);
  ::Reflex::Type type_42329 = ::Reflex::ReferenceBuilder(type_22944);
  ::Reflex::Type type_22944c = ::Reflex::ConstBuilder(type_22944);
  ::Reflex::Type type_42330 = ::Reflex::ReferenceBuilder(type_22944c);
  ::Reflex::Type type_4915c = ::Reflex::ConstBuilder(type_4915);
  ::Reflex::Type type_37777 = ::Reflex::ReferenceBuilder(type_4915c);
  ::Reflex::Type type_42331 = ::Reflex::ReferenceBuilder(type_22945);
  ::Reflex::Type type_22945c = ::Reflex::ConstBuilder(type_22945);
  ::Reflex::Type type_42332 = ::Reflex::ReferenceBuilder(type_22945c);
  ::Reflex::Type type_4916c = ::Reflex::ConstBuilder(type_4916);
  ::Reflex::Type type_37785 = ::Reflex::ReferenceBuilder(type_4916c);
  ::Reflex::Type type_42333 = ::Reflex::ReferenceBuilder(type_22946);
  ::Reflex::Type type_22946c = ::Reflex::ConstBuilder(type_22946);
  ::Reflex::Type type_42334 = ::Reflex::ReferenceBuilder(type_22946c);
  ::Reflex::Type type_4923c = ::Reflex::ConstBuilder(type_4923);
  ::Reflex::Type type_36633 = ::Reflex::ReferenceBuilder(type_4923c);
  ::Reflex::Type type_42335 = ::Reflex::ReferenceBuilder(type_22947);
  ::Reflex::Type type_22947c = ::Reflex::ConstBuilder(type_22947);
  ::Reflex::Type type_42336 = ::Reflex::ReferenceBuilder(type_22947c);
  ::Reflex::Type type_4917c = ::Reflex::ConstBuilder(type_4917);
  ::Reflex::Type type_37793 = ::Reflex::ReferenceBuilder(type_4917c);
  ::Reflex::Type type_22955c = ::Reflex::ConstBuilder(type_22955);
  ::Reflex::Type type_42348 = ::Reflex::ReferenceBuilder(type_22955c);
  ::Reflex::Type type_42349 = ::Reflex::ReferenceBuilder(type_22955);
  ::Reflex::Type type_22956c = ::Reflex::ConstBuilder(type_22956);
  ::Reflex::Type type_42350 = ::Reflex::ReferenceBuilder(type_22956c);
  ::Reflex::Type type_42351 = ::Reflex::ReferenceBuilder(type_22956);
  ::Reflex::Type type_22957c = ::Reflex::ConstBuilder(type_22957);
  ::Reflex::Type type_42352 = ::Reflex::ReferenceBuilder(type_22957c);
  ::Reflex::Type type_42353 = ::Reflex::ReferenceBuilder(type_22957);
  ::Reflex::Type type_22958c = ::Reflex::ConstBuilder(type_22958);
  ::Reflex::Type type_42354 = ::Reflex::ReferenceBuilder(type_22958c);
  ::Reflex::Type type_42355 = ::Reflex::ReferenceBuilder(type_22958);
  ::Reflex::Type type_22959c = ::Reflex::ConstBuilder(type_22959);
  ::Reflex::Type type_42356 = ::Reflex::ReferenceBuilder(type_22959c);
  ::Reflex::Type type_42357 = ::Reflex::ReferenceBuilder(type_22959);
  ::Reflex::Type type_22960c = ::Reflex::ConstBuilder(type_22960);
  ::Reflex::Type type_42358 = ::Reflex::ReferenceBuilder(type_22960c);
  ::Reflex::Type type_42359 = ::Reflex::ReferenceBuilder(type_22960);
  ::Reflex::Type type_7858 = ::Reflex::TypedefTypeBuilder(Reflex::Literal("reco::TrackRefVector"), type_4628);
  ::Reflex::Type type_7858c = ::Reflex::ConstBuilder(type_7858);
  ::Reflex::Type type_38627 = ::Reflex::ReferenceBuilder(type_7858c);
  ::Reflex::Type type_26120 = ::Reflex::TypedefTypeBuilder(Reflex::Literal("reco::JetTracksAssociation::Container"), type_4859);
  ::Reflex::Type type_26120c = ::Reflex::ConstBuilder(type_26120);
  ::Reflex::Type type_38628 = ::Reflex::ReferenceBuilder(type_26120c);
  ::Reflex::Type type_7834 = ::Reflex::TypedefTypeBuilder(Reflex::Literal("reco::JetBaseRef"), type_4891);
  ::Reflex::Type type_7834c = ::Reflex::ConstBuilder(type_7834);
  ::Reflex::Type type_38629 = ::Reflex::ReferenceBuilder(type_7834c);
  ::Reflex::Type type_38630 = ::Reflex::PointerBuilder(type_26120);
  ::Reflex::Type type_38631 = ::Reflex::ReferenceBuilder(type_26120);
  ::Reflex::Type type_26136 = ::Reflex::TypedefTypeBuilder(Reflex::Literal("reco::JetTracksAssociation::LorentzVector"), type_6989);
  ::Reflex::Type type_26914 = ::Reflex::TypedefTypeBuilder(Reflex::Literal("reco::JetFloatAssociation::Container"), type_4860);
  ::Reflex::Type type_26914c = ::Reflex::ConstBuilder(type_26914);
  ::Reflex::Type type_38802 = ::Reflex::ReferenceBuilder(type_26914c);
  ::Reflex::Type type_38803 = ::Reflex::PointerBuilder(type_26914);
  ::Reflex::Type type_38804 = ::Reflex::ReferenceBuilder(type_26914);
  ::Reflex::Type type_27478 = ::Reflex::TypedefTypeBuilder(Reflex::Literal("reco::JetExtendedAssociation::Container"), type_4858);
  ::Reflex::Type type_27478c = ::Reflex::ConstBuilder(type_27478);
  ::Reflex::Type type_38864 = ::Reflex::ReferenceBuilder(type_27478c);
  ::Reflex::Type type_38865 = ::Reflex::PointerBuilder(type_27478);
  ::Reflex::Type type_38866 = ::Reflex::ReferenceBuilder(type_27478);
  ::Reflex::Type type_27499c = ::Reflex::ConstBuilder(type_27499);
  ::Reflex::Type type_38867 = ::Reflex::ReferenceBuilder(type_27499c);
  ::Reflex::Type type_4683f = ::Reflex::TypedefTypeBuilder(Reflex::Literal("edm::Wrapper<reco::JetExtendedAssociation::Container>"), type_4683);
  ::Reflex::Type type_4684f = ::Reflex::TypedefTypeBuilder(Reflex::Literal("edm::Wrapper<reco::JetTracksAssociation::Container>"), type_4684);
  ::Reflex::Type type_4685f = ::Reflex::TypedefTypeBuilder(Reflex::Literal("edm::Wrapper<reco::JetFloatAssociation::Container>"), type_4685);
  ::Reflex::Type type_4687f = ::Reflex::TypedefTypeBuilder(Reflex::Literal("edm::Wrapper<reco::PFClusterJetFwdPtrVector>"), type_4687);
  ::Reflex::Type type_4688f = ::Reflex::TypedefTypeBuilder(Reflex::Literal("edm::Wrapper<reco::PFClusterJetFwdRefVector>"), type_4688);
  ::Reflex::Type type_4689f = ::Reflex::TypedefTypeBuilder(Reflex::Literal("edm::Wrapper<reco::PFClusterJetRefVector>"), type_4689);
  ::Reflex::Type type_4693f = ::Reflex::TypedefTypeBuilder(Reflex::Literal("edm::Wrapper<reco::TrackJetFwdPtrVector>"), type_4693);
  ::Reflex::Type type_4694f = ::Reflex::TypedefTypeBuilder(Reflex::Literal("edm::Wrapper<reco::TrackJetFwdRefVector>"), type_4694);
  ::Reflex::Type type_4695f = ::Reflex::TypedefTypeBuilder(Reflex::Literal("edm::Wrapper<reco::TrackJetRefVector>"), type_4695);
  ::Reflex::Type type_22942f = ::Reflex::TypedefTypeBuilder(Reflex::Literal("edm::reftobase::RefHolder<reco::PFClusterJetRef>"), type_22942);
  ::Reflex::Type type_22943f = ::Reflex::TypedefTypeBuilder(Reflex::Literal("edm::reftobase::RefHolder<reco::TrackJetRef>"), type_22943);
  ::Reflex::Type type_22944f = ::Reflex::TypedefTypeBuilder(Reflex::Literal("edm::reftobase::RefHolder<reco::PFJetRef>"), type_22944);
  ::Reflex::Type type_22945f = ::Reflex::TypedefTypeBuilder(Reflex::Literal("edm::reftobase::RefHolder<reco::GenJetRef>"), type_22945);
  ::Reflex::Type type_22946f = ::Reflex::TypedefTypeBuilder(Reflex::Literal("edm::reftobase::RefHolder<reco::JPTJetRef>"), type_22946);
  ::Reflex::Type type_22947f = ::Reflex::TypedefTypeBuilder(Reflex::Literal("edm::reftobase::RefHolder<reco::CaloJetRef>"), type_22947);
  ::Reflex::Type type_22955f = ::Reflex::TypedefTypeBuilder(Reflex::Literal("edm::reftobase::Holder<reco::Jet, reco::PFClusterJetRef>"), type_22955);
  ::Reflex::Type type_22956f = ::Reflex::TypedefTypeBuilder(Reflex::Literal("edm::reftobase::Holder<reco::Jet, reco::TrackJetRef>"), type_22956);
  ::Reflex::Type type_22957f = ::Reflex::TypedefTypeBuilder(Reflex::Literal("edm::reftobase::Holder<reco::Jet, reco::PFJetRef>"), type_22957);
  ::Reflex::Type type_22958f = ::Reflex::TypedefTypeBuilder(Reflex::Literal("edm::reftobase::Holder<reco::Jet, reco::GenJetRef>"), type_22958);
  ::Reflex::Type type_22959f = ::Reflex::TypedefTypeBuilder(Reflex::Literal("edm::reftobase::Holder<reco::Jet, reco::JPTJetRef>"), type_22959);
  ::Reflex::Type type_22960f = ::Reflex::TypedefTypeBuilder(Reflex::Literal("edm::reftobase::Holder<reco::Jet, reco::CaloJetRef>"), type_22960);
} // unnamed namespace

#ifndef __CINT__

// Shadow classes to obtain the data member offsets 
namespace __shadow__ {
#ifdef __StoredPileupJetIdentifier
#undef __StoredPileupJetIdentifier
#endif
class __StoredPileupJetIdentifier {
  public:
  __StoredPileupJetIdentifier();
  float jetEta_;
  float jetPt_;
  float nCharged_;
  float nNeutrals_;
  float dZ_;
  float nParticles_;
  float dR2Mean_;
  float dRMean_;
  float frac01_;
  float frac02_;
  float frac03_;
  float frac04_;
  float frac05_;
  float frac06_;
  float frac07_;
  float beta_;
  float betaStar_;
  float betaClassic_;
  float betaStarClassic_;
  float ptD_;
  float nvtx_;
};
#ifdef __std__vector_StoredPileupJetIdentifier_
#undef __std__vector_StoredPileupJetIdentifier_
#endif
class __std__vector_StoredPileupJetIdentifier_ : protected ::std::_Vector_base<StoredPileupJetIdentifier,std::allocator<StoredPileupJetIdentifier> > {
  public:
  __std__vector_StoredPileupJetIdentifier_();
};
#ifdef __reco__PFClusterJet
#undef __reco__PFClusterJet
#endif
class __reco__PFClusterJet : public ::reco::Jet {
  public:
  __reco__PFClusterJet();
  virtual ~__reco__PFClusterJet() throw();
  virtual ::std::string print() const throw();
  virtual ::reco::PFClusterJet* clone() const throw();
  virtual bool overlap(reco::Candidate const&) const throw();
};
#ifdef __std__vector_reco__PFClusterJet_
#undef __std__vector_reco__PFClusterJet_
#endif
class __std__vector_reco__PFClusterJet_ : protected ::std::_Vector_base<reco::PFClusterJet,std::allocator<reco::PFClusterJet> > {
  public:
  __std__vector_reco__PFClusterJet_();
};
#ifdef __reco__TrackJet
#undef __reco__TrackJet
#endif
class __reco__TrackJet : public ::reco::Jet {
  public:
  __reco__TrackJet();
  virtual ~__reco__TrackJet() throw();
  virtual ::std::string print() const throw();
  virtual ::reco::TrackJet* clone() const throw();
  virtual ::edm::Ptr<reco::Track> track(unsigned long) const throw();
  virtual bool overlap(reco::Candidate const&) const throw();
  ::reco::VertexRef vtx_;
};
#ifdef __std__vector_reco__TrackJet_
#undef __std__vector_reco__TrackJet_
#endif
class __std__vector_reco__TrackJet_ : protected ::std::_Vector_base<reco::TrackJet,std::allocator<reco::TrackJet> > {
  public:
  __std__vector_reco__TrackJet_();
};
#ifdef __edm__FwdPtr_reco__PFClusterJet_
#undef __edm__FwdPtr_reco__PFClusterJet_
#endif
class __edm__FwdPtr_reco__PFClusterJet_ {
  public:
  __edm__FwdPtr_reco__PFClusterJet_();
  ::edm::Ptr<reco::PFClusterJet> ptr_;
  ::edm::Ptr<reco::PFClusterJet> backPtr_;
};
#ifdef __edm__FwdPtr_reco__TrackJet_
#undef __edm__FwdPtr_reco__TrackJet_
#endif
class __edm__FwdPtr_reco__TrackJet_ {
  public:
  __edm__FwdPtr_reco__TrackJet_();
  ::edm::Ptr<reco::TrackJet> ptr_;
  ::edm::Ptr<reco::TrackJet> backPtr_;
};
#ifdef __edm__RefVector_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s_
#undef __edm__RefVector_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s_
#endif
class __edm__RefVector_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s_ {
  public:
  __edm__RefVector_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s_();
  ::edm::RefVectorBase<unsigned int> refVector_;
};
#ifdef __edm__RefVector_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s_
#undef __edm__RefVector_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s_
#endif
class __edm__RefVector_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s_ {
  public:
  __edm__RefVector_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s_();
  ::edm::RefVectorBase<unsigned int> refVector_;
};
#ifdef __edm__RefToBaseVector_reco__Jet_
#undef __edm__RefToBaseVector_reco__Jet_
#endif
class __edm__RefToBaseVector_reco__Jet_ {
  public:
  __edm__RefToBaseVector_reco__Jet_();
  void* holder_;
};
#ifdef __edm__Wrapper_edm__RefToBaseVector_reco__Jet_s_
#undef __edm__Wrapper_edm__RefToBaseVector_reco__Jet_s_
#endif
class __edm__Wrapper_edm__RefToBaseVector_reco__Jet_s_ {
  public:
  __edm__Wrapper_edm__RefToBaseVector_reco__Jet_s_();
  bool present;
  ::edm::RefToBaseVector<reco::Jet> obj;
};
#ifdef __edm__ValueMap_StoredPileupJetIdentifier_
#undef __edm__ValueMap_StoredPileupJetIdentifier_
#endif
class __edm__ValueMap_StoredPileupJetIdentifier_ {
  public:
  __edm__ValueMap_StoredPileupJetIdentifier_();
#ifdef __edm__ValueMap_StoredPileupJetIdentifier___IDComparator
#undef __edm__ValueMap_StoredPileupJetIdentifier___IDComparator
#endif
  struct __edm__ValueMap_StoredPileupJetIdentifier___IDComparator {
    public:
    __edm__ValueMap_StoredPileupJetIdentifier___IDComparator();
  };
  ::std::vector<StoredPileupJetIdentifier> values_;
  ::std::vector<std::pair<edm::ProductID,unsigned int> > ids_;
};
#ifdef __edm__Wrapper_edm__ValueMap_StoredPileupJetIdentifier_s_
#undef __edm__Wrapper_edm__ValueMap_StoredPileupJetIdentifier_s_
#endif
class __edm__Wrapper_edm__ValueMap_StoredPileupJetIdentifier_s_ {
  public:
  __edm__Wrapper_edm__ValueMap_StoredPileupJetIdentifier_s_();
  bool present;
  ::edm::ValueMap<StoredPileupJetIdentifier> obj;
};
#ifdef __edm__Wrapper_std__vector_reco__PFClusterJet_s_
#undef __edm__Wrapper_std__vector_reco__PFClusterJet_s_
#endif
class __edm__Wrapper_std__vector_reco__PFClusterJet_s_ {
  public:
  __edm__Wrapper_std__vector_reco__PFClusterJet_s_();
  bool present;
  ::std::vector<reco::PFClusterJet> obj;
};
#ifdef __edm__Wrapper_std__vector_reco__TrackJet_s_
#undef __edm__Wrapper_std__vector_reco__TrackJet_s_
#endif
class __edm__Wrapper_std__vector_reco__TrackJet_s_ {
  public:
  __edm__Wrapper_std__vector_reco__TrackJet_s_();
  bool present;
  ::std::vector<reco::TrackJet> obj;
};
#ifdef __edm__FwdRef_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s_
#undef __edm__FwdRef_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s_
#endif
class __edm__FwdRef_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s_ {
  public:
  __edm__FwdRef_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s_();
  ::edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > ref_;
  ::edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > backRef_;
};
#ifdef __edm__FwdRef_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s_
#undef __edm__FwdRef_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s_
#endif
class __edm__FwdRef_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s_ {
  public:
  __edm__FwdRef_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s_();
  ::edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > ref_;
  ::edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > backRef_;
};
#ifdef __edm__RefToBaseProd_reco__Jet_
#undef __edm__RefToBaseProd_reco__Jet_
#endif
class __edm__RefToBaseProd_reco__Jet_ {
  public:
  __edm__RefToBaseProd_reco__Jet_();
  ::edm::RefCore product_;
};
#ifdef __reco__JetExtendedAssociation__JetExtendedData
#undef __reco__JetExtendedAssociation__JetExtendedData
#endif
class __reco__JetExtendedAssociation__JetExtendedData {
  public:
  __reco__JetExtendedAssociation__JetExtendedData();
  int mTracksAtVertexNumber;
  ::reco::JetExtendedAssociation::LorentzVector mTracksAtVertexP4;
  int mTracksAtCaloNumber;
  ::reco::JetExtendedAssociation::LorentzVector mTracksAtCaloP4;
};
#ifdef __edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_reco__JetExtendedAssociation__JetExtendedData__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference_
#undef __edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_reco__JetExtendedAssociation__JetExtendedData__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference_
#endif
class __edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_reco__JetExtendedAssociation__JetExtendedData__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference_ {
  public:
  __edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_reco__JetExtendedAssociation__JetExtendedData__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference_();
#ifdef __edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_reco__JetExtendedAssociation__JetExtendedData__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference___CacheState
#undef __edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_reco__JetExtendedAssociation__JetExtendedData__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference___CacheState
#endif
  enum __edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_reco__JetExtendedAssociation__JetExtendedData__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference___CacheState {};
  ::std::vector<reco::JetExtendedAssociation::JetExtendedData> data_;
  ::edm::RefToBaseProd<reco::Jet> ref_;
  void* transientVector_;
};
#ifdef __edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference_
#undef __edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference_
#endif
class __edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference_ {
  public:
  __edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference_();
#ifdef __edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference___CacheState
#undef __edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference___CacheState
#endif
  enum __edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference___CacheState {};
  ::std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > data_;
  ::edm::RefToBaseProd<reco::Jet> ref_;
  void* transientVector_;
};
#ifdef __edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_float__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference_
#undef __edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_float__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference_
#endif
class __edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_float__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference_ {
  public:
  __edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_float__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference_();
#ifdef __edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_float__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference___CacheState
#undef __edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_float__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference___CacheState
#endif
  enum __edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_float__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference___CacheState {};
  ::std::vector<float> data_;
  ::edm::RefToBaseProd<reco::Jet> ref_;
  void* transientVector_;
};
#ifdef __edm__RefProd_std__vector_reco__PFClusterJet_s_
#undef __edm__RefProd_std__vector_reco__PFClusterJet_s_
#endif
class __edm__RefProd_std__vector_reco__PFClusterJet_s_ {
  public:
  __edm__RefProd_std__vector_reco__PFClusterJet_s_();
  ::edm::RefCore product_;
};
#ifdef __edm__RefProd_std__vector_reco__TrackJet_s_
#undef __edm__RefProd_std__vector_reco__TrackJet_s_
#endif
class __edm__RefProd_std__vector_reco__TrackJet_s_ {
  public:
  __edm__RefProd_std__vector_reco__TrackJet_s_();
  ::edm::RefCore product_;
};
#ifdef __edm__RefToBase_reco__Jet_
#undef __edm__RefToBase_reco__Jet_
#endif
class __edm__RefToBase_reco__Jet_ {
  public:
  __edm__RefToBase_reco__Jet_();
  void* holder_;
};
#ifdef __edm__Ref_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s_
#undef __edm__Ref_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s_
#endif
class __edm__Ref_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s_ {
  public:
  __edm__Ref_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s_();
  ::edm::RefCoreWithIndex product_;
};
#ifdef __edm__Ref_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s_
#undef __edm__Ref_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s_
#endif
class __edm__Ref_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s_ {
  public:
  __edm__Ref_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s_();
  ::edm::RefCoreWithIndex product_;
};
#ifdef __reco__JetTrackMatch_std__vector_reco__PFClusterJet_s_
#undef __reco__JetTrackMatch_std__vector_reco__PFClusterJet_s_
#endif
class __reco__JetTrackMatch_std__vector_reco__PFClusterJet_s_ {
  public:
  __reco__JetTrackMatch_std__vector_reco__PFClusterJet_s_();
  ::edm::AssociationMap<edm::OneToMany<std::vector<reco::PFClusterJet>,std::vector<reco::Track>,unsigned int> > mMap;
};
#ifdef __reco__JetTrackMatch_std__vector_reco__TrackJet_s_
#undef __reco__JetTrackMatch_std__vector_reco__TrackJet_s_
#endif
class __reco__JetTrackMatch_std__vector_reco__TrackJet_s_ {
  public:
  __reco__JetTrackMatch_std__vector_reco__TrackJet_s_();
  ::edm::AssociationMap<edm::OneToMany<std::vector<reco::TrackJet>,std::vector<reco::Track>,unsigned int> > mMap;
};
#ifdef __edm__reftobase__BaseHolder_reco__Jet_
#undef __edm__reftobase__BaseHolder_reco__Jet_
#endif
class __edm__reftobase__BaseHolder_reco__Jet_ {
  public:
  __edm__reftobase__BaseHolder_reco__Jet_();
  virtual ~__edm__reftobase__BaseHolder_reco__Jet_() throw();
};
#ifdef __edm__reftobase__IndirectHolder_reco__Jet_
#undef __edm__reftobase__IndirectHolder_reco__Jet_
#endif
class __edm__reftobase__IndirectHolder_reco__Jet_ : public ::edm::reftobase::BaseHolder<reco::Jet> {
  public:
  __edm__reftobase__IndirectHolder_reco__Jet_();
  virtual ~__edm__reftobase__IndirectHolder_reco__Jet_() throw();
  void* helper_;
};
#ifdef __edm__reftobase__IndirectVectorHolder_reco__Jet_
#undef __edm__reftobase__IndirectVectorHolder_reco__Jet_
#endif
class __edm__reftobase__IndirectVectorHolder_reco__Jet_ : public ::edm::reftobase::BaseVectorHolder<reco::Jet> {
  public:
  __edm__reftobase__IndirectVectorHolder_reco__Jet_();
  virtual ~__edm__reftobase__IndirectVectorHolder_reco__Jet_() throw();
  void* helper_;
};
#ifdef __edm__reftobase__BaseVectorHolder_reco__Jet_
#undef __edm__reftobase__BaseVectorHolder_reco__Jet_
#endif
class __edm__reftobase__BaseVectorHolder_reco__Jet_ {
  public:
  __edm__reftobase__BaseVectorHolder_reco__Jet_();
  virtual ~__edm__reftobase__BaseVectorHolder_reco__Jet_() throw();
};
#ifdef __edm__reftobase__Holder_reco__Candidate_edm__RefToBase_reco__Jet_s_
#undef __edm__reftobase__Holder_reco__Candidate_edm__RefToBase_reco__Jet_s_
#endif
class __edm__reftobase__Holder_reco__Candidate_edm__RefToBase_reco__Jet_s_ : public ::edm::reftobase::BaseHolder<reco::Candidate> {
  public:
  __edm__reftobase__Holder_reco__Candidate_edm__RefToBase_reco__Jet_s_();
  virtual ~__edm__reftobase__Holder_reco__Candidate_edm__RefToBase_reco__Jet_s_() throw();
  ::edm::RefToBase<reco::Jet> ref_;
};
#ifdef __edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s_s_
#undef __edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s_s_
#endif
class __edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s_s_ : public ::edm::reftobase::BaseHolder<reco::Candidate> {
  public:
  __edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s_s_();
  virtual ~__edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s_s_() throw();
  ::edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > ref_;
};
#ifdef __edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s_s_
#undef __edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s_s_
#endif
class __edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s_s_ : public ::edm::reftobase::BaseHolder<reco::Candidate> {
  public:
  __edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s_s_();
  virtual ~__edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s_s_() throw();
  ::edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > ref_;
};
#ifdef __std__vector_edm__FwdPtr_reco__PFClusterJet_s_
#undef __std__vector_edm__FwdPtr_reco__PFClusterJet_s_
#endif
class __std__vector_edm__FwdPtr_reco__PFClusterJet_s_ : protected ::std::_Vector_base<edm::FwdPtr<reco::PFClusterJet>,std::allocator<edm::FwdPtr<reco::PFClusterJet> > > {
  public:
  __std__vector_edm__FwdPtr_reco__PFClusterJet_s_();
};
#ifdef __std__vector_edm__FwdPtr_reco__TrackJet_s_
#undef __std__vector_edm__FwdPtr_reco__TrackJet_s_
#endif
class __std__vector_edm__FwdPtr_reco__TrackJet_s_ : protected ::std::_Vector_base<edm::FwdPtr<reco::TrackJet>,std::allocator<edm::FwdPtr<reco::TrackJet> > > {
  public:
  __std__vector_edm__FwdPtr_reco__TrackJet_s_();
};
#ifdef __std__vector_edm__FwdRef_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s_s_
#undef __std__vector_edm__FwdRef_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s_s_
#endif
class __std__vector_edm__FwdRef_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s_s_ : protected ::std::_Vector_base<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >,std::allocator<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > > > {
  public:
  __std__vector_edm__FwdRef_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s_s_();
};
#ifdef __std__vector_edm__FwdRef_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s_s_
#undef __std__vector_edm__FwdRef_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s_s_
#endif
class __std__vector_edm__FwdRef_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s_s_ : protected ::std::_Vector_base<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >,std::allocator<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > > > {
  public:
  __std__vector_edm__FwdRef_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s_s_();
};
#ifdef __edm__Ref_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__refhelper__FindUsingAdvance_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s_s_s_
#undef __edm__Ref_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__refhelper__FindUsingAdvance_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s_s_s_
#endif
class __edm__Ref_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__refhelper__FindUsingAdvance_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s_s_s_ {
  public:
  __edm__Ref_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__refhelper__FindUsingAdvance_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s_s_s_();
  ::edm::RefCore product_;
  unsigned int index_;
};
#ifdef __edm__RefVector_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__refhelper__FindUsingAdvance_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s_s_s_
#undef __edm__RefVector_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__refhelper__FindUsingAdvance_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s_s_s_
#endif
class __edm__RefVector_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__refhelper__FindUsingAdvance_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s_s_s_ {
  public:
  __edm__RefVector_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__refhelper__FindUsingAdvance_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s_s_s_();
  ::edm::RefVectorBase<unsigned int> refVector_;
};
#ifdef __std__pair_edm__RefToBase_reco__Jet__edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s_
#undef __std__pair_edm__RefToBase_reco__Jet__edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s_
#endif
struct __std__pair_edm__RefToBase_reco__Jet__edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s_ {
  public:
  __std__pair_edm__RefToBase_reco__Jet__edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s_();
  ::edm::RefToBase<reco::Jet> first;
  ::edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > second;
};
#ifdef __std__vector_std__pair_edm__RefToBase_reco__Jet__edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s_s_
#undef __std__vector_std__pair_edm__RefToBase_reco__Jet__edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s_s_
#endif
class __std__vector_std__pair_edm__RefToBase_reco__Jet__edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s_s_ : protected ::std::_Vector_base<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,std::allocator<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > > {
  public:
  __std__vector_std__pair_edm__RefToBase_reco__Jet__edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s_s_();
};
#ifdef __edm__RefProd_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference_s_
#undef __edm__RefProd_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference_s_
#endif
class __edm__RefProd_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference_s_ {
  public:
  __edm__RefProd_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference_s_();
  ::edm::RefCore product_;
};
#ifdef __edm__RefVector_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_float__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__float__edm__refhelper__FindUsingAdvance_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_float__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__float_s_s_
#undef __edm__RefVector_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_float__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__float__edm__refhelper__FindUsingAdvance_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_float__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__float_s_s_
#endif
class __edm__RefVector_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_float__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__float__edm__refhelper__FindUsingAdvance_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_float__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__float_s_s_ {
  public:
  __edm__RefVector_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_float__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__float__edm__refhelper__FindUsingAdvance_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_float__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__float_s_s_();
  ::edm::RefVectorBase<unsigned int> refVector_;
};
#ifdef __std__vector_std__pair_edm__RefToBase_reco__Jet__float_s_
#undef __std__vector_std__pair_edm__RefToBase_reco__Jet__float_s_
#endif
class __std__vector_std__pair_edm__RefToBase_reco__Jet__float_s_ : protected ::std::_Vector_base<std::pair<edm::RefToBase<reco::Jet>,float>,std::allocator<std::pair<edm::RefToBase<reco::Jet>,float> > > {
  public:
  __std__vector_std__pair_edm__RefToBase_reco__Jet__float_s_();
};
#ifdef __edm__RefProd_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_float__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference_s_
#undef __edm__RefProd_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_float__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference_s_
#endif
class __edm__RefProd_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_float__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference_s_ {
  public:
  __edm__RefProd_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_float__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference_s_();
  ::edm::RefCore product_;
};
#ifdef __edm__Ref_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_float__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__float__edm__refhelper__FindUsingAdvance_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_float__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__float_s_s_
#undef __edm__Ref_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_float__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__float__edm__refhelper__FindUsingAdvance_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_float__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__float_s_s_
#endif
class __edm__Ref_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_float__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__float__edm__refhelper__FindUsingAdvance_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_float__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__float_s_s_ {
  public:
  __edm__Ref_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_float__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__float__edm__refhelper__FindUsingAdvance_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_float__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__float_s_s_();
  ::edm::RefCore product_;
  unsigned int index_;
};
#ifdef __edm__RefVector_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_reco__JetExtendedAssociation__JetExtendedData__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__reco__JetExtendedAssociation__JetExtendedData__edm__refhelper__FindUsingAdvance_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_reco__JetExtendedAssociation__JetExtendedData__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__reco__JetExtendedAssociation__JetExtendedData_s_s_
#undef __edm__RefVector_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_reco__JetExtendedAssociation__JetExtendedData__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__reco__JetExtendedAssociation__JetExtendedData__edm__refhelper__FindUsingAdvance_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_reco__JetExtendedAssociation__JetExtendedData__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__reco__JetExtendedAssociation__JetExtendedData_s_s_
#endif
class __edm__RefVector_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_reco__JetExtendedAssociation__JetExtendedData__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__reco__JetExtendedAssociation__JetExtendedData__edm__refhelper__FindUsingAdvance_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_reco__JetExtendedAssociation__JetExtendedData__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__reco__JetExtendedAssociation__JetExtendedData_s_s_ {
  public:
  __edm__RefVector_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_reco__JetExtendedAssociation__JetExtendedData__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__reco__JetExtendedAssociation__JetExtendedData__edm__refhelper__FindUsingAdvance_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_reco__JetExtendedAssociation__JetExtendedData__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__reco__JetExtendedAssociation__JetExtendedData_s_s_();
  ::edm::RefVectorBase<unsigned int> refVector_;
};
#ifdef __std__vector_reco__JetExtendedAssociation__JetExtendedData_
#undef __std__vector_reco__JetExtendedAssociation__JetExtendedData_
#endif
class __std__vector_reco__JetExtendedAssociation__JetExtendedData_ : protected ::std::_Vector_base<reco::JetExtendedAssociation::JetExtendedData,std::allocator<reco::JetExtendedAssociation::JetExtendedData> > {
  public:
  __std__vector_reco__JetExtendedAssociation__JetExtendedData_();
};
#ifdef __std__pair_edm__RefToBase_reco__Jet__reco__JetExtendedAssociation__JetExtendedData_
#undef __std__pair_edm__RefToBase_reco__Jet__reco__JetExtendedAssociation__JetExtendedData_
#endif
struct __std__pair_edm__RefToBase_reco__Jet__reco__JetExtendedAssociation__JetExtendedData_ {
  public:
  __std__pair_edm__RefToBase_reco__Jet__reco__JetExtendedAssociation__JetExtendedData_();
  ::edm::RefToBase<reco::Jet> first;
  ::reco::JetExtendedAssociation::JetExtendedData second;
};
#ifdef __std__vector_std__pair_edm__RefToBase_reco__Jet__reco__JetExtendedAssociation__JetExtendedData_s_
#undef __std__vector_std__pair_edm__RefToBase_reco__Jet__reco__JetExtendedAssociation__JetExtendedData_s_
#endif
class __std__vector_std__pair_edm__RefToBase_reco__Jet__reco__JetExtendedAssociation__JetExtendedData_s_ : protected ::std::_Vector_base<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,std::allocator<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > > {
  public:
  __std__vector_std__pair_edm__RefToBase_reco__Jet__reco__JetExtendedAssociation__JetExtendedData_s_();
};
#ifdef __edm__RefProd_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_reco__JetExtendedAssociation__JetExtendedData__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference_s_
#undef __edm__RefProd_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_reco__JetExtendedAssociation__JetExtendedData__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference_s_
#endif
class __edm__RefProd_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_reco__JetExtendedAssociation__JetExtendedData__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference_s_ {
  public:
  __edm__RefProd_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_reco__JetExtendedAssociation__JetExtendedData__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference_s_();
  ::edm::RefCore product_;
};
#ifdef __edm__Ref_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_reco__JetExtendedAssociation__JetExtendedData__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__reco__JetExtendedAssociation__JetExtendedData__edm__refhelper__FindUsingAdvance_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_reco__JetExtendedAssociation__JetExtendedData__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__reco__JetExtendedAssociation__JetExtendedData_s_s_
#undef __edm__Ref_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_reco__JetExtendedAssociation__JetExtendedData__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__reco__JetExtendedAssociation__JetExtendedData__edm__refhelper__FindUsingAdvance_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_reco__JetExtendedAssociation__JetExtendedData__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__reco__JetExtendedAssociation__JetExtendedData_s_s_
#endif
class __edm__Ref_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_reco__JetExtendedAssociation__JetExtendedData__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__reco__JetExtendedAssociation__JetExtendedData__edm__refhelper__FindUsingAdvance_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_reco__JetExtendedAssociation__JetExtendedData__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__reco__JetExtendedAssociation__JetExtendedData_s_s_ {
  public:
  __edm__Ref_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_reco__JetExtendedAssociation__JetExtendedData__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__reco__JetExtendedAssociation__JetExtendedData__edm__refhelper__FindUsingAdvance_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_reco__JetExtendedAssociation__JetExtendedData__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__reco__JetExtendedAssociation__JetExtendedData_s_s_();
  ::edm::RefCore product_;
  unsigned int index_;
};
#ifdef __edm__Wrapper_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_reco__JetExtendedAssociation__JetExtendedData__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference_s_
#undef __edm__Wrapper_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_reco__JetExtendedAssociation__JetExtendedData__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference_s_
#endif
class __edm__Wrapper_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_reco__JetExtendedAssociation__JetExtendedData__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference_s_ {
  public:
  __edm__Wrapper_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_reco__JetExtendedAssociation__JetExtendedData__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference_s_();
  bool present;
  ::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> obj;
};
#ifdef __edm__Wrapper_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference_s_
#undef __edm__Wrapper_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference_s_
#endif
class __edm__Wrapper_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference_s_ {
  public:
  __edm__Wrapper_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference_s_();
  bool present;
  ::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> obj;
};
#ifdef __edm__Wrapper_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_float__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference_s_
#undef __edm__Wrapper_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_float__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference_s_
#endif
class __edm__Wrapper_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_float__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference_s_ {
  public:
  __edm__Wrapper_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_float__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference_s_();
  bool present;
  ::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> obj;
};
#ifdef __edm__Wrapper_std__vector_edm__FwdPtr_reco__PFClusterJet_s_s_
#undef __edm__Wrapper_std__vector_edm__FwdPtr_reco__PFClusterJet_s_s_
#endif
class __edm__Wrapper_std__vector_edm__FwdPtr_reco__PFClusterJet_s_s_ {
  public:
  __edm__Wrapper_std__vector_edm__FwdPtr_reco__PFClusterJet_s_s_();
  bool present;
  ::std::vector<edm::FwdPtr<reco::PFClusterJet> > obj;
};
#ifdef __edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s_s_s_
#undef __edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s_s_s_
#endif
class __edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s_s_s_ {
  public:
  __edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s_s_s_();
  bool present;
  ::std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > > obj;
};
#ifdef __edm__Wrapper_edm__RefVector_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s_s_
#undef __edm__Wrapper_edm__RefVector_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s_s_
#endif
class __edm__Wrapper_edm__RefVector_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s_s_ {
  public:
  __edm__Wrapper_edm__RefVector_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s_s_();
  bool present;
  ::edm::RefVector<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > obj;
};
#ifdef __edm__Wrapper_std__vector_edm__FwdPtr_reco__TrackJet_s_s_
#undef __edm__Wrapper_std__vector_edm__FwdPtr_reco__TrackJet_s_s_
#endif
class __edm__Wrapper_std__vector_edm__FwdPtr_reco__TrackJet_s_s_ {
  public:
  __edm__Wrapper_std__vector_edm__FwdPtr_reco__TrackJet_s_s_();
  bool present;
  ::std::vector<edm::FwdPtr<reco::TrackJet> > obj;
};
#ifdef __edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s_s_s_
#undef __edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s_s_s_
#endif
class __edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s_s_s_ {
  public:
  __edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s_s_s_();
  bool present;
  ::std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > > obj;
};
#ifdef __edm__Wrapper_edm__RefVector_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s_s_
#undef __edm__Wrapper_edm__RefVector_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s_s_
#endif
class __edm__Wrapper_edm__RefVector_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s_s_ {
  public:
  __edm__Wrapper_edm__RefVector_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s_s_();
  bool present;
  ::edm::RefVector<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > obj;
};
#ifdef __edm__reftobase__RefHolder_edm__Ref_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s_s_
#undef __edm__reftobase__RefHolder_edm__Ref_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s_s_
#endif
class __edm__reftobase__RefHolder_edm__Ref_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s_s_ : public ::edm::reftobase::RefHolderBase {
  public:
  __edm__reftobase__RefHolder_edm__Ref_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s_s_();
  virtual ~__edm__reftobase__RefHolder_edm__Ref_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s_s_() throw();
  ::edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > ref_;
};
#ifdef __edm__reftobase__RefHolder_edm__Ref_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s_s_
#undef __edm__reftobase__RefHolder_edm__Ref_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s_s_
#endif
class __edm__reftobase__RefHolder_edm__Ref_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s_s_ : public ::edm::reftobase::RefHolderBase {
  public:
  __edm__reftobase__RefHolder_edm__Ref_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s_s_();
  virtual ~__edm__reftobase__RefHolder_edm__Ref_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s_s_() throw();
  ::edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > ref_;
};
#ifdef __edm__reftobase__RefHolder_edm__Ref_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s_
#undef __edm__reftobase__RefHolder_edm__Ref_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s_
#endif
class __edm__reftobase__RefHolder_edm__Ref_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s_ : public ::edm::reftobase::RefHolderBase {
  public:
  __edm__reftobase__RefHolder_edm__Ref_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s_();
  virtual ~__edm__reftobase__RefHolder_edm__Ref_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s_() throw();
  ::edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > ref_;
};
#ifdef __edm__reftobase__RefHolder_edm__Ref_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s_s_
#undef __edm__reftobase__RefHolder_edm__Ref_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s_s_
#endif
class __edm__reftobase__RefHolder_edm__Ref_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s_s_ : public ::edm::reftobase::RefHolderBase {
  public:
  __edm__reftobase__RefHolder_edm__Ref_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s_s_();
  virtual ~__edm__reftobase__RefHolder_edm__Ref_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s_s_() throw();
  ::edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > ref_;
};
#ifdef __edm__reftobase__RefHolder_edm__Ref_std__vector_reco__JPTJet__reco__JPTJet_edm__refhelper__FindUsingAdvance_std__vector_reco__JPTJet__reco__JPTJet_s_s_
#undef __edm__reftobase__RefHolder_edm__Ref_std__vector_reco__JPTJet__reco__JPTJet_edm__refhelper__FindUsingAdvance_std__vector_reco__JPTJet__reco__JPTJet_s_s_
#endif
class __edm__reftobase__RefHolder_edm__Ref_std__vector_reco__JPTJet__reco__JPTJet_edm__refhelper__FindUsingAdvance_std__vector_reco__JPTJet__reco__JPTJet_s_s_ : public ::edm::reftobase::RefHolderBase {
  public:
  __edm__reftobase__RefHolder_edm__Ref_std__vector_reco__JPTJet__reco__JPTJet_edm__refhelper__FindUsingAdvance_std__vector_reco__JPTJet__reco__JPTJet_s_s_();
  virtual ~__edm__reftobase__RefHolder_edm__Ref_std__vector_reco__JPTJet__reco__JPTJet_edm__refhelper__FindUsingAdvance_std__vector_reco__JPTJet__reco__JPTJet_s_s_() throw();
  ::edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > ref_;
};
#ifdef __edm__reftobase__RefHolder_edm__Ref_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s_
#undef __edm__reftobase__RefHolder_edm__Ref_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s_
#endif
class __edm__reftobase__RefHolder_edm__Ref_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s_ : public ::edm::reftobase::RefHolderBase {
  public:
  __edm__reftobase__RefHolder_edm__Ref_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s_();
  virtual ~__edm__reftobase__RefHolder_edm__Ref_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s_() throw();
  ::edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > ref_;
};
#ifdef __edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s_s_
#undef __edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s_s_
#endif
class __edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s_s_ : public ::edm::reftobase::BaseHolder<reco::Jet> {
  public:
  __edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s_s_();
  virtual ~__edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s_s_() throw();
  ::edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > ref_;
};
#ifdef __edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s_s_
#undef __edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s_s_
#endif
class __edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s_s_ : public ::edm::reftobase::BaseHolder<reco::Jet> {
  public:
  __edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s_s_();
  virtual ~__edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s_s_() throw();
  ::edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > ref_;
};
#ifdef __edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s_
#undef __edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s_
#endif
class __edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s_ : public ::edm::reftobase::BaseHolder<reco::Jet> {
  public:
  __edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s_();
  virtual ~__edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s_() throw();
  ::edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > ref_;
};
#ifdef __edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s_s_
#undef __edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s_s_
#endif
class __edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s_s_ : public ::edm::reftobase::BaseHolder<reco::Jet> {
  public:
  __edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s_s_();
  virtual ~__edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s_s_() throw();
  ::edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > ref_;
};
#ifdef __edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__JPTJet__reco__JPTJet_edm__refhelper__FindUsingAdvance_std__vector_reco__JPTJet__reco__JPTJet_s_s_
#undef __edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__JPTJet__reco__JPTJet_edm__refhelper__FindUsingAdvance_std__vector_reco__JPTJet__reco__JPTJet_s_s_
#endif
class __edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__JPTJet__reco__JPTJet_edm__refhelper__FindUsingAdvance_std__vector_reco__JPTJet__reco__JPTJet_s_s_ : public ::edm::reftobase::BaseHolder<reco::Jet> {
  public:
  __edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__JPTJet__reco__JPTJet_edm__refhelper__FindUsingAdvance_std__vector_reco__JPTJet__reco__JPTJet_s_s_();
  virtual ~__edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__JPTJet__reco__JPTJet_edm__refhelper__FindUsingAdvance_std__vector_reco__JPTJet__reco__JPTJet_s_s_() throw();
  ::edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > ref_;
};
#ifdef __edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s_
#undef __edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s_
#endif
class __edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s_ : public ::edm::reftobase::BaseHolder<reco::Jet> {
  public:
  __edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s_();
  virtual ~__edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s_() throw();
  ::edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > ref_;
};
}


#endif // __CINT__
namespace {
//------Stub functions for class StoredPileupJetIdentifier -------------------------------
static  void operator_7165( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::StoredPileupJetIdentifier*)o)->operator=)(*(const ::StoredPileupJetIdentifier*)arg[0]);
  else   (((::StoredPileupJetIdentifier*)o)->operator=)(*(const ::StoredPileupJetIdentifier*)arg[0]);
}

static void constructor_7166( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::StoredPileupJetIdentifier(*(const ::StoredPileupJetIdentifier*)arg[0]);
  else ::new(mem) ::StoredPileupJetIdentifier(*(const ::StoredPileupJetIdentifier*)arg[0]);
}

static void constructor_7167( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::StoredPileupJetIdentifier();
  else ::new(mem) ::StoredPileupJetIdentifier();
}

static void destructor_7168(void*, void * o, const std::vector<void*>&, void *) {
(((::StoredPileupJetIdentifier*)o)->::StoredPileupJetIdentifier::~StoredPileupJetIdentifier)();
}
static  void method_7169( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::StoredPileupJetIdentifier*)o)->jetEta)();
  else   (((const ::StoredPileupJetIdentifier*)o)->jetEta)();
}

static  void method_7170( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::StoredPileupJetIdentifier*)o)->jetEta)(*(const float*)arg[0]);
}

static  void method_7171( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::StoredPileupJetIdentifier*)o)->jetPt)();
  else   (((const ::StoredPileupJetIdentifier*)o)->jetPt)();
}

static  void method_7172( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::StoredPileupJetIdentifier*)o)->jetPt)(*(const float*)arg[0]);
}

static  void method_7173( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::StoredPileupJetIdentifier*)o)->nCharged)();
  else   (((const ::StoredPileupJetIdentifier*)o)->nCharged)();
}

static  void method_7174( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::StoredPileupJetIdentifier*)o)->nCharged)(*(const float*)arg[0]);
}

static  void method_7175( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::StoredPileupJetIdentifier*)o)->nNeutrals)();
  else   (((const ::StoredPileupJetIdentifier*)o)->nNeutrals)();
}

static  void method_7176( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::StoredPileupJetIdentifier*)o)->nNeutrals)(*(const float*)arg[0]);
}

static  void method_7177( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::StoredPileupJetIdentifier*)o)->dZ)();
  else   (((const ::StoredPileupJetIdentifier*)o)->dZ)();
}

static  void method_7178( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::StoredPileupJetIdentifier*)o)->dZ)(*(const float*)arg[0]);
}

static  void method_7179( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::StoredPileupJetIdentifier*)o)->nParticles)();
  else   (((const ::StoredPileupJetIdentifier*)o)->nParticles)();
}

static  void method_7180( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::StoredPileupJetIdentifier*)o)->nParticles)(*(const float*)arg[0]);
}

static  void method_7181( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::StoredPileupJetIdentifier*)o)->dR2Mean)();
  else   (((const ::StoredPileupJetIdentifier*)o)->dR2Mean)();
}

static  void method_7182( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::StoredPileupJetIdentifier*)o)->dR2Mean)(*(const float*)arg[0]);
}

static  void method_7183( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::StoredPileupJetIdentifier*)o)->RMS)(*(const float*)arg[0]);
}

static  void method_7184( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::StoredPileupJetIdentifier*)o)->RMS)();
  else   (((const ::StoredPileupJetIdentifier*)o)->RMS)();
}

static  void method_7185( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::StoredPileupJetIdentifier*)o)->dRMean)();
  else   (((const ::StoredPileupJetIdentifier*)o)->dRMean)();
}

static  void method_7186( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::StoredPileupJetIdentifier*)o)->dRMean)(*(const float*)arg[0]);
}

static  void method_7187( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::StoredPileupJetIdentifier*)o)->frac01)();
  else   (((const ::StoredPileupJetIdentifier*)o)->frac01)();
}

static  void method_7188( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::StoredPileupJetIdentifier*)o)->frac01)(*(const float*)arg[0]);
}

static  void method_7189( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::StoredPileupJetIdentifier*)o)->frac02)();
  else   (((const ::StoredPileupJetIdentifier*)o)->frac02)();
}

static  void method_7190( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::StoredPileupJetIdentifier*)o)->frac02)(*(const float*)arg[0]);
}

static  void method_7191( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::StoredPileupJetIdentifier*)o)->frac03)();
  else   (((const ::StoredPileupJetIdentifier*)o)->frac03)();
}

static  void method_7192( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::StoredPileupJetIdentifier*)o)->frac03)(*(const float*)arg[0]);
}

static  void method_7193( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::StoredPileupJetIdentifier*)o)->frac04)();
  else   (((const ::StoredPileupJetIdentifier*)o)->frac04)();
}

static  void method_7194( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::StoredPileupJetIdentifier*)o)->frac04)(*(const float*)arg[0]);
}

static  void method_7195( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::StoredPileupJetIdentifier*)o)->frac05)();
  else   (((const ::StoredPileupJetIdentifier*)o)->frac05)();
}

static  void method_7196( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::StoredPileupJetIdentifier*)o)->frac05)(*(const float*)arg[0]);
}

static  void method_7197( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::StoredPileupJetIdentifier*)o)->frac06)();
  else   (((const ::StoredPileupJetIdentifier*)o)->frac06)();
}

static  void method_7198( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::StoredPileupJetIdentifier*)o)->frac06)(*(const float*)arg[0]);
}

static  void method_7199( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::StoredPileupJetIdentifier*)o)->frac07)();
  else   (((const ::StoredPileupJetIdentifier*)o)->frac07)();
}

static  void method_7200( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::StoredPileupJetIdentifier*)o)->frac07)(*(const float*)arg[0]);
}

static  void method_7201( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::StoredPileupJetIdentifier*)o)->beta)();
  else   (((const ::StoredPileupJetIdentifier*)o)->beta)();
}

static  void method_7202( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::StoredPileupJetIdentifier*)o)->beta)(*(const float*)arg[0]);
}

static  void method_7203( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::StoredPileupJetIdentifier*)o)->betaStar)();
  else   (((const ::StoredPileupJetIdentifier*)o)->betaStar)();
}

static  void method_7204( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::StoredPileupJetIdentifier*)o)->betaStar)(*(const float*)arg[0]);
}

static  void method_7205( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::StoredPileupJetIdentifier*)o)->betaClassic)();
  else   (((const ::StoredPileupJetIdentifier*)o)->betaClassic)();
}

static  void method_7206( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::StoredPileupJetIdentifier*)o)->betaClassic)(*(const float*)arg[0]);
}

static  void method_7207( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::StoredPileupJetIdentifier*)o)->betaStarClassic)();
  else   (((const ::StoredPileupJetIdentifier*)o)->betaStarClassic)();
}

static  void method_7208( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::StoredPileupJetIdentifier*)o)->betaStarClassic)(*(const float*)arg[0]);
}

static  void method_7209( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::StoredPileupJetIdentifier*)o)->ptD)();
  else   (((const ::StoredPileupJetIdentifier*)o)->ptD)();
}

static  void method_7210( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::StoredPileupJetIdentifier*)o)->ptD)(*(const float*)arg[0]);
}

static  void method_7211( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::StoredPileupJetIdentifier*)o)->nvtx)();
  else   (((const ::StoredPileupJetIdentifier*)o)->nvtx)();
}

static  void method_7212( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::StoredPileupJetIdentifier*)o)->nvtx)(*(const float*)arg[0]);
}

static void method_newdel_1675( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::StoredPileupJetIdentifier >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::StoredPileupJetIdentifier >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::StoredPileupJetIdentifier >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::StoredPileupJetIdentifier >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::StoredPileupJetIdentifier >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class StoredPileupJetIdentifier -------------------------------
void __StoredPileupJetIdentifier_db_datamem(Reflex::Class*);
void __StoredPileupJetIdentifier_db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __StoredPileupJetIdentifier_datamem_bld(&__StoredPileupJetIdentifier_db_datamem);
Reflex::GenreflexMemberBuilder __StoredPileupJetIdentifier_funcmem_bld(&__StoredPileupJetIdentifier_db_funcmem);
void __StoredPileupJetIdentifier_dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("StoredPileupJetIdentifier"), typeid(::StoredPileupJetIdentifier), sizeof(::StoredPileupJetIdentifier), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13452, type_13454), Reflex::Literal("operator="), operator_7165, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_13454), Reflex::Literal("StoredPileupJetIdentifier"), constructor_7166, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("StoredPileupJetIdentifier"), constructor_7167, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~StoredPileupJetIdentifier"), destructor_7168, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_1675, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__StoredPileupJetIdentifier_datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__StoredPileupJetIdentifier_funcmem_bld);
}

//------Delayed data member builder for class StoredPileupJetIdentifier -------------------
void __StoredPileupJetIdentifier_db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_902, Reflex::Literal("jetEta_"), OffsetOf(__shadow__::__StoredPileupJetIdentifier, jetEta_), ::Reflex::PRIVATE)
  .AddDataMember(type_902, Reflex::Literal("jetPt_"), OffsetOf(__shadow__::__StoredPileupJetIdentifier, jetPt_), ::Reflex::PRIVATE)
  .AddDataMember(type_902, Reflex::Literal("nCharged_"), OffsetOf(__shadow__::__StoredPileupJetIdentifier, nCharged_), ::Reflex::PRIVATE)
  .AddDataMember(type_902, Reflex::Literal("nNeutrals_"), OffsetOf(__shadow__::__StoredPileupJetIdentifier, nNeutrals_), ::Reflex::PRIVATE)
  .AddDataMember(type_902, Reflex::Literal("dZ_"), OffsetOf(__shadow__::__StoredPileupJetIdentifier, dZ_), ::Reflex::PRIVATE)
  .AddDataMember(type_902, Reflex::Literal("nParticles_"), OffsetOf(__shadow__::__StoredPileupJetIdentifier, nParticles_), ::Reflex::PRIVATE)
  .AddDataMember(type_902, Reflex::Literal("dR2Mean_"), OffsetOf(__shadow__::__StoredPileupJetIdentifier, dR2Mean_), ::Reflex::PRIVATE)
  .AddDataMember(type_902, Reflex::Literal("dRMean_"), OffsetOf(__shadow__::__StoredPileupJetIdentifier, dRMean_), ::Reflex::PRIVATE)
  .AddDataMember(type_902, Reflex::Literal("frac01_"), OffsetOf(__shadow__::__StoredPileupJetIdentifier, frac01_), ::Reflex::PRIVATE)
  .AddDataMember(type_902, Reflex::Literal("frac02_"), OffsetOf(__shadow__::__StoredPileupJetIdentifier, frac02_), ::Reflex::PRIVATE)
  .AddDataMember(type_902, Reflex::Literal("frac03_"), OffsetOf(__shadow__::__StoredPileupJetIdentifier, frac03_), ::Reflex::PRIVATE)
  .AddDataMember(type_902, Reflex::Literal("frac04_"), OffsetOf(__shadow__::__StoredPileupJetIdentifier, frac04_), ::Reflex::PRIVATE)
  .AddDataMember(type_902, Reflex::Literal("frac05_"), OffsetOf(__shadow__::__StoredPileupJetIdentifier, frac05_), ::Reflex::PRIVATE)
  .AddDataMember(type_902, Reflex::Literal("frac06_"), OffsetOf(__shadow__::__StoredPileupJetIdentifier, frac06_), ::Reflex::PRIVATE)
  .AddDataMember(type_902, Reflex::Literal("frac07_"), OffsetOf(__shadow__::__StoredPileupJetIdentifier, frac07_), ::Reflex::PRIVATE)
  .AddDataMember(type_902, Reflex::Literal("beta_"), OffsetOf(__shadow__::__StoredPileupJetIdentifier, beta_), ::Reflex::PRIVATE)
  .AddDataMember(type_902, Reflex::Literal("betaStar_"), OffsetOf(__shadow__::__StoredPileupJetIdentifier, betaStar_), ::Reflex::PRIVATE)
  .AddDataMember(type_902, Reflex::Literal("betaClassic_"), OffsetOf(__shadow__::__StoredPileupJetIdentifier, betaClassic_), ::Reflex::PRIVATE)
  .AddDataMember(type_902, Reflex::Literal("betaStarClassic_"), OffsetOf(__shadow__::__StoredPileupJetIdentifier, betaStarClassic_), ::Reflex::PRIVATE)
  .AddDataMember(type_902, Reflex::Literal("ptD_"), OffsetOf(__shadow__::__StoredPileupJetIdentifier, ptD_), ::Reflex::PRIVATE)
  .AddDataMember(type_902, Reflex::Literal("nvtx_"), OffsetOf(__shadow__::__StoredPileupJetIdentifier, nvtx_), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class StoredPileupJetIdentifier -------------------
void __StoredPileupJetIdentifier_db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_14618), Reflex::Literal("jetEta"), method_7169, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_902c), Reflex::Literal("jetEta"), method_7170, 0, "val", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_14618), Reflex::Literal("jetPt"), method_7171, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_902c), Reflex::Literal("jetPt"), method_7172, 0, "val", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_14618), Reflex::Literal("nCharged"), method_7173, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_902c), Reflex::Literal("nCharged"), method_7174, 0, "val", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_14618), Reflex::Literal("nNeutrals"), method_7175, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_902c), Reflex::Literal("nNeutrals"), method_7176, 0, "val", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_14618), Reflex::Literal("dZ"), method_7177, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_902c), Reflex::Literal("dZ"), method_7178, 0, "val", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_14618), Reflex::Literal("nParticles"), method_7179, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_902c), Reflex::Literal("nParticles"), method_7180, 0, "val", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_14618), Reflex::Literal("dR2Mean"), method_7181, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_902c), Reflex::Literal("dR2Mean"), method_7182, 0, "val", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_902c), Reflex::Literal("RMS"), method_7183, 0, "val", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_14618), Reflex::Literal("RMS"), method_7184, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_14618), Reflex::Literal("dRMean"), method_7185, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_902c), Reflex::Literal("dRMean"), method_7186, 0, "val", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_14618), Reflex::Literal("frac01"), method_7187, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_902c), Reflex::Literal("frac01"), method_7188, 0, "val", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_14618), Reflex::Literal("frac02"), method_7189, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_902c), Reflex::Literal("frac02"), method_7190, 0, "val", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_14618), Reflex::Literal("frac03"), method_7191, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_902c), Reflex::Literal("frac03"), method_7192, 0, "val", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_14618), Reflex::Literal("frac04"), method_7193, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_902c), Reflex::Literal("frac04"), method_7194, 0, "val", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_14618), Reflex::Literal("frac05"), method_7195, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_902c), Reflex::Literal("frac05"), method_7196, 0, "val", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_14618), Reflex::Literal("frac06"), method_7197, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_902c), Reflex::Literal("frac06"), method_7198, 0, "val", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_14618), Reflex::Literal("frac07"), method_7199, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_902c), Reflex::Literal("frac07"), method_7200, 0, "val", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_14618), Reflex::Literal("beta"), method_7201, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_902c), Reflex::Literal("beta"), method_7202, 0, "val", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_14618), Reflex::Literal("betaStar"), method_7203, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_902c), Reflex::Literal("betaStar"), method_7204, 0, "val", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_14618), Reflex::Literal("betaClassic"), method_7205, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_902c), Reflex::Literal("betaClassic"), method_7206, 0, "val", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_14618), Reflex::Literal("betaStarClassic"), method_7207, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_902c), Reflex::Literal("betaStarClassic"), method_7208, 0, "val", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_14618), Reflex::Literal("ptD"), method_7209, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_902c), Reflex::Literal("ptD"), method_7210, 0, "val", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_14618), Reflex::Literal("nvtx"), method_7211, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_902c), Reflex::Literal("nvtx"), method_7212, 0, "val", ::Reflex::PUBLIC);
}
//------Stub functions for class vector<StoredPileupJetIdentifier,std::allocator<StoredPileupJetIdentifier> > -------------------------------
static void constructor_13463( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<StoredPileupJetIdentifier>();
  else ::new(mem) ::std::vector<StoredPileupJetIdentifier>();
}

static void constructor_13464( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<StoredPileupJetIdentifier>(*(const ::std::allocator<StoredPileupJetIdentifier>*)arg[0]);
  else ::new(mem) ::std::vector<StoredPileupJetIdentifier>(*(const ::std::allocator<StoredPileupJetIdentifier>*)arg[0]);
}

static void constructor_13465( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if ( arg.size() == 1 ) {
    if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<StoredPileupJetIdentifier>(*(::std::size_t*)arg[0]);
  else ::new(mem) ::std::vector<StoredPileupJetIdentifier>(*(::std::size_t*)arg[0]);
  }
  else if ( arg.size() == 2 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<StoredPileupJetIdentifier>(*(::std::size_t*)arg[0],
      *(const ::StoredPileupJetIdentifier*)arg[1]);
  else ::new(mem) ::std::vector<StoredPileupJetIdentifier>(*(::std::size_t*)arg[0],
      *(const ::StoredPileupJetIdentifier*)arg[1]);
  }
  else if ( arg.size() == 3 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<StoredPileupJetIdentifier>(*(::std::size_t*)arg[0],
      *(const ::StoredPileupJetIdentifier*)arg[1],
      *(const ::std::allocator<StoredPileupJetIdentifier>*)arg[2]);
  else ::new(mem) ::std::vector<StoredPileupJetIdentifier>(*(::std::size_t*)arg[0],
      *(const ::StoredPileupJetIdentifier*)arg[1],
      *(const ::std::allocator<StoredPileupJetIdentifier>*)arg[2]);
  }
}

static void constructor_13466( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<StoredPileupJetIdentifier>(*(const ::std::vector<StoredPileupJetIdentifier>*)arg[0]);
  else ::new(mem) ::std::vector<StoredPileupJetIdentifier>(*(const ::std::vector<StoredPileupJetIdentifier>*)arg[0]);
}

static void destructor_13467(void*, void * o, const std::vector<void*>&, void *) {
(((::std::vector<StoredPileupJetIdentifier>*)o)->::std::vector<StoredPileupJetIdentifier>::~vector)();
}
static  void operator_13468( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<StoredPileupJetIdentifier>*)o)->operator=)(*(const ::std::vector<StoredPileupJetIdentifier>*)arg[0]);
  else   (((::std::vector<StoredPileupJetIdentifier>*)o)->operator=)(*(const ::std::vector<StoredPileupJetIdentifier>*)arg[0]);
}

static  void method_13469( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<StoredPileupJetIdentifier>*)o)->assign)(*(::std::size_t*)arg[0],
    *(const ::StoredPileupJetIdentifier*)arg[1]);
}

static  void method_13470( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<StoredPileupJetIdentifier*,std::vector<StoredPileupJetIdentifier> >)((((::std::vector<StoredPileupJetIdentifier>*)o)->begin)());
  else   (((::std::vector<StoredPileupJetIdentifier>*)o)->begin)();
}

static  void method_13471( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<const StoredPileupJetIdentifier*,std::vector<StoredPileupJetIdentifier> >)((((const ::std::vector<StoredPileupJetIdentifier>*)o)->begin)());
  else   (((const ::std::vector<StoredPileupJetIdentifier>*)o)->begin)();
}

static  void method_13472( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<StoredPileupJetIdentifier*,std::vector<StoredPileupJetIdentifier> >)((((::std::vector<StoredPileupJetIdentifier>*)o)->end)());
  else   (((::std::vector<StoredPileupJetIdentifier>*)o)->end)();
}

static  void method_13473( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<const StoredPileupJetIdentifier*,std::vector<StoredPileupJetIdentifier> >)((((const ::std::vector<StoredPileupJetIdentifier>*)o)->end)());
  else   (((const ::std::vector<StoredPileupJetIdentifier>*)o)->end)();
}

static  void method_13478( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::std::vector<StoredPileupJetIdentifier>*)o)->size)());
  else   (((const ::std::vector<StoredPileupJetIdentifier>*)o)->size)();
}

static  void method_13479( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::std::vector<StoredPileupJetIdentifier>*)o)->max_size)());
  else   (((const ::std::vector<StoredPileupJetIdentifier>*)o)->max_size)();
}

static  void method_13480( void*, void* o, const std::vector<void*>& arg, void*)
{
  if ( arg.size() == 1 ) {
    (((::std::vector<StoredPileupJetIdentifier>*)o)->resize)(*(::std::size_t*)arg[0]);
  }
  else if ( arg.size() == 2 ) { 
    (((::std::vector<StoredPileupJetIdentifier>*)o)->resize)(*(::std::size_t*)arg[0],
      *(::StoredPileupJetIdentifier*)arg[1]);
  }
}

static  void method_13481( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::std::vector<StoredPileupJetIdentifier>*)o)->capacity)());
  else   (((const ::std::vector<StoredPileupJetIdentifier>*)o)->capacity)();
}

static  void method_13482( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::std::vector<StoredPileupJetIdentifier>*)o)->empty)());
  else   (((const ::std::vector<StoredPileupJetIdentifier>*)o)->empty)();
}

static  void method_13483( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<StoredPileupJetIdentifier>*)o)->reserve)(*(::std::size_t*)arg[0]);
}

static  void operator_13484( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<StoredPileupJetIdentifier>*)o)->operator[])(*(::std::size_t*)arg[0]);
  else   (((::std::vector<StoredPileupJetIdentifier>*)o)->operator[])(*(::std::size_t*)arg[0]);
}

static  void operator_13485( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<StoredPileupJetIdentifier>*)o)->operator[])(*(::std::size_t*)arg[0]);
  else   (((const ::std::vector<StoredPileupJetIdentifier>*)o)->operator[])(*(::std::size_t*)arg[0]);
}

static  void method_13487( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<StoredPileupJetIdentifier>*)o)->at)(*(::std::size_t*)arg[0]);
  else   (((::std::vector<StoredPileupJetIdentifier>*)o)->at)(*(::std::size_t*)arg[0]);
}

static  void method_13488( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<StoredPileupJetIdentifier>*)o)->at)(*(::std::size_t*)arg[0]);
  else   (((const ::std::vector<StoredPileupJetIdentifier>*)o)->at)(*(::std::size_t*)arg[0]);
}

static  void method_13489( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<StoredPileupJetIdentifier>*)o)->front)();
  else   (((::std::vector<StoredPileupJetIdentifier>*)o)->front)();
}

static  void method_13490( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<StoredPileupJetIdentifier>*)o)->front)();
  else   (((const ::std::vector<StoredPileupJetIdentifier>*)o)->front)();
}

static  void method_13491( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<StoredPileupJetIdentifier>*)o)->back)();
  else   (((::std::vector<StoredPileupJetIdentifier>*)o)->back)();
}

static  void method_13492( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<StoredPileupJetIdentifier>*)o)->back)();
  else   (((const ::std::vector<StoredPileupJetIdentifier>*)o)->back)();
}

static  void method_13493( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((::std::vector<StoredPileupJetIdentifier>*)o)->data)());
  else   (((::std::vector<StoredPileupJetIdentifier>*)o)->data)();
}

static  void method_13494( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::std::vector<StoredPileupJetIdentifier>*)o)->data)());
  else   (((const ::std::vector<StoredPileupJetIdentifier>*)o)->data)();
}

static  void method_13495( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<StoredPileupJetIdentifier>*)o)->push_back)(*(const ::StoredPileupJetIdentifier*)arg[0]);
}

static  void method_13496( void*, void* o, const std::vector<void*>&, void*)
{
  (((::std::vector<StoredPileupJetIdentifier>*)o)->pop_back)();
}

static  void method_13497( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<StoredPileupJetIdentifier*,std::vector<StoredPileupJetIdentifier> >)((((::std::vector<StoredPileupJetIdentifier>*)o)->insert)(*(::__gnu_cxx::__normal_iterator<StoredPileupJetIdentifier*,std::vector<StoredPileupJetIdentifier> >*)arg[0],
    *(const ::StoredPileupJetIdentifier*)arg[1]));
  else   (((::std::vector<StoredPileupJetIdentifier>*)o)->insert)(*(::__gnu_cxx::__normal_iterator<StoredPileupJetIdentifier*,std::vector<StoredPileupJetIdentifier> >*)arg[0],
    *(const ::StoredPileupJetIdentifier*)arg[1]);
}

static  void method_13498( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<StoredPileupJetIdentifier>*)o)->insert)(*(::__gnu_cxx::__normal_iterator<StoredPileupJetIdentifier*,std::vector<StoredPileupJetIdentifier> >*)arg[0],
    *(::std::size_t*)arg[1],
    *(const ::StoredPileupJetIdentifier*)arg[2]);
}

static  void method_13499( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<StoredPileupJetIdentifier*,std::vector<StoredPileupJetIdentifier> >)((((::std::vector<StoredPileupJetIdentifier>*)o)->erase)(*(::__gnu_cxx::__normal_iterator<StoredPileupJetIdentifier*,std::vector<StoredPileupJetIdentifier> >*)arg[0]));
  else   (((::std::vector<StoredPileupJetIdentifier>*)o)->erase)(*(::__gnu_cxx::__normal_iterator<StoredPileupJetIdentifier*,std::vector<StoredPileupJetIdentifier> >*)arg[0]);
}

static  void method_13500( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<StoredPileupJetIdentifier*,std::vector<StoredPileupJetIdentifier> >)((((::std::vector<StoredPileupJetIdentifier>*)o)->erase)(*(::__gnu_cxx::__normal_iterator<StoredPileupJetIdentifier*,std::vector<StoredPileupJetIdentifier> >*)arg[0],
    *(::__gnu_cxx::__normal_iterator<StoredPileupJetIdentifier*,std::vector<StoredPileupJetIdentifier> >*)arg[1]));
  else   (((::std::vector<StoredPileupJetIdentifier>*)o)->erase)(*(::__gnu_cxx::__normal_iterator<StoredPileupJetIdentifier*,std::vector<StoredPileupJetIdentifier> >*)arg[0],
    *(::__gnu_cxx::__normal_iterator<StoredPileupJetIdentifier*,std::vector<StoredPileupJetIdentifier> >*)arg[1]);
}

static  void method_13501( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<StoredPileupJetIdentifier>*)o)->swap)(*(::std::vector<StoredPileupJetIdentifier>*)arg[0]);
}

static  void method_13502( void*, void* o, const std::vector<void*>&, void*)
{
  (((::std::vector<StoredPileupJetIdentifier>*)o)->clear)();
}

static void method_newdel_2953( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::std::vector<StoredPileupJetIdentifier> >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::std::vector<StoredPileupJetIdentifier> >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::std::vector<StoredPileupJetIdentifier> >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::std::vector<StoredPileupJetIdentifier> >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::std::vector<StoredPileupJetIdentifier> >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

static void method_x2( void* retaddr, void*, const std::vector<void*>&, void*)
{
  typedef std::vector<std::pair< ::Reflex::Base, int> > Bases_t;
  static Bases_t s_bases;
  if ( !s_bases.size() ) {
    s_bases.push_back(std::make_pair(::Reflex::Base( ::Reflex::TypeBuilder(Reflex::Literal("std::_Vector_base<StoredPileupJetIdentifier,std::allocator<StoredPileupJetIdentifier> >")), ::Reflex::BaseOffset< ::std::vector<StoredPileupJetIdentifier>,::std::_Vector_base<StoredPileupJetIdentifier,std::allocator<StoredPileupJetIdentifier> > >::Get(),::Reflex::PROTECTED), 0));
  }
  if (retaddr) *(Bases_t**)retaddr = &s_bases;
}

static void method_x3( void* retaddr, void*, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**) retaddr = ::Reflex::Proxy< ::std::vector<StoredPileupJetIdentifier> >::Generate();
  else ::Reflex::Proxy< ::std::vector<StoredPileupJetIdentifier> >::Generate();
}

//------Dictionary for class vector<StoredPileupJetIdentifier,std::allocator<StoredPileupJetIdentifier> > -------------------------------
void __std__vector_StoredPileupJetIdentifier__db_datamem(Reflex::Class*);
void __std__vector_StoredPileupJetIdentifier__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __std__vector_StoredPileupJetIdentifier__datamem_bld(&__std__vector_StoredPileupJetIdentifier__db_datamem);
Reflex::GenreflexMemberBuilder __std__vector_StoredPileupJetIdentifier__funcmem_bld(&__std__vector_StoredPileupJetIdentifier__db_funcmem);
void __std__vector_StoredPileupJetIdentifier__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("std::vector<StoredPileupJetIdentifier>"), typeid(::std::vector<StoredPileupJetIdentifier>), sizeof(::std::vector<StoredPileupJetIdentifier>), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddBase(type_2480, ::Reflex::BaseOffset< ::std::vector<StoredPileupJetIdentifier>, ::std::_Vector_base<StoredPileupJetIdentifier,std::allocator<StoredPileupJetIdentifier> > >::Get(), ::Reflex::PROTECTED)
  .AddTypedef(type_1675, Reflex::Literal("std::vector<StoredPileupJetIdentifier>::_Alloc_value_type"))
  .AddTypedef(type_2480, Reflex::Literal("std::vector<StoredPileupJetIdentifier>::_Base"))
  .AddTypedef(type_3253, Reflex::Literal("std::vector<StoredPileupJetIdentifier>::_Tp_alloc_type"))
  .AddTypedef(type_8363, Reflex::Literal("std::vector<StoredPileupJetIdentifier>::_Alloc_traits"))
  .AddTypedef(type_1675, Reflex::Literal("std::vector<StoredPileupJetIdentifier>::value_type"))
  .AddTypedef(type_9542, Reflex::Literal("std::vector<StoredPileupJetIdentifier>::pointer"))
  .AddTypedef(type_13450, Reflex::Literal("std::vector<StoredPileupJetIdentifier>::const_pointer"))
  .AddTypedef(type_13452, Reflex::Literal("std::vector<StoredPileupJetIdentifier>::reference"))
  .AddTypedef(type_13454, Reflex::Literal("std::vector<StoredPileupJetIdentifier>::const_reference"))
  .AddTypedef(type_8211, Reflex::Literal("std::vector<StoredPileupJetIdentifier>::iterator"))
  .AddTypedef(type_8212, Reflex::Literal("std::vector<StoredPileupJetIdentifier>::const_iterator"))
  .AddTypedef(type_3475, Reflex::Literal("std::vector<StoredPileupJetIdentifier>::const_reverse_iterator"))
  .AddTypedef(type_3476, Reflex::Literal("std::vector<StoredPileupJetIdentifier>::reverse_iterator"))
  .AddTypedef(type_3234, Reflex::Literal("std::vector<StoredPileupJetIdentifier>::size_type"))
  .AddTypedef(type_3113, Reflex::Literal("std::vector<StoredPileupJetIdentifier>::difference_type"))
  .AddTypedef(type_3253, Reflex::Literal("std::vector<StoredPileupJetIdentifier>::allocator_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("vector"), constructor_13463, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_32466), Reflex::Literal("vector"), constructor_13464, 0, "__a", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_3234, type_13454, type_32466), Reflex::Literal("vector"), constructor_13465, 0, "__n;__value=_Tp();__a=_Alloc()", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_33758), Reflex::Literal("vector"), constructor_13466, 0, "__x", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~vector"), destructor_13467, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_2953, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getBasesTable"), method_x2, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddFunctionMember<void*(void)>(Reflex::Literal("createCollFuncTable"), method_x3, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandFunctionMemberBuilder(&__std__vector_StoredPileupJetIdentifier__funcmem_bld);
}

//------Delayed data member builder for class vector<StoredPileupJetIdentifier,std::allocator<StoredPileupJetIdentifier> > -------------------
void __std__vector_StoredPileupJetIdentifier__db_datamem(Reflex::Class*) {

}
//------Delayed function member builder for class vector<StoredPileupJetIdentifier,std::allocator<StoredPileupJetIdentifier> > -------------------
void __std__vector_StoredPileupJetIdentifier__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_33759, type_33758), Reflex::Literal("operator="), operator_13468, 0, "__x", ::Reflex::PUBLIC | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_3234, type_13454), Reflex::Literal("assign"), method_13469, 0, "__n;__val", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_8211), Reflex::Literal("begin"), method_13470, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_8212), Reflex::Literal("begin"), method_13471, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_8211), Reflex::Literal("end"), method_13472, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_8212), Reflex::Literal("end"), method_13473, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3234), Reflex::Literal("size"), method_13478, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3234), Reflex::Literal("max_size"), method_13479, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_3234, type_1675), Reflex::Literal("resize"), method_13480, 0, "__new_size;__x=_Tp()", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3234), Reflex::Literal("capacity"), method_13481, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("empty"), method_13482, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_3234), Reflex::Literal("reserve"), method_13483, 0, "__n", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13452, type_3234), Reflex::Literal("operator[]"), operator_13484, 0, "__n", ::Reflex::PUBLIC | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13454, type_3234), Reflex::Literal("operator[]"), operator_13485, 0, "__n", ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13452, type_3234), Reflex::Literal("at"), method_13487, 0, "__n", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13454, type_3234), Reflex::Literal("at"), method_13488, 0, "__n", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13452), Reflex::Literal("front"), method_13489, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13454), Reflex::Literal("front"), method_13490, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13452), Reflex::Literal("back"), method_13491, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13454), Reflex::Literal("back"), method_13492, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_9542), Reflex::Literal("data"), method_13493, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13450), Reflex::Literal("data"), method_13494, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_13454), Reflex::Literal("push_back"), method_13495, 0, "__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698), Reflex::Literal("pop_back"), method_13496, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_8211, type_8211, type_13454), Reflex::Literal("insert"), method_13497, 0, "__position;__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_8211, type_3234, type_13454), Reflex::Literal("insert"), method_13498, 0, "__position;__n;__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_8211, type_8211), Reflex::Literal("erase"), method_13499, 0, "__position", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_8211, type_8211, type_8211), Reflex::Literal("erase"), method_13500, 0, "__first;__last", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_33759), Reflex::Literal("swap"), method_13501, 0, "__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698), Reflex::Literal("clear"), method_13502, 0, 0, ::Reflex::PUBLIC);
}
//------Stub functions for class PFClusterJet -------------------------------
static  void operator_27500( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::reco::PFClusterJet*)o)->operator=)(*(const ::reco::PFClusterJet*)arg[0]);
  else   (((::reco::PFClusterJet*)o)->operator=)(*(const ::reco::PFClusterJet*)arg[0]);
}

static void constructor_27501( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::reco::PFClusterJet(*(const ::reco::PFClusterJet*)arg[0]);
  else ::new(mem) ::reco::PFClusterJet(*(const ::reco::PFClusterJet*)arg[0]);
}

static void constructor_27502( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::reco::PFClusterJet();
  else ::new(mem) ::reco::PFClusterJet();
}

static void constructor_27503( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::reco::PFClusterJet(*(const ::math::XYZTLorentzVector*)arg[0],
      *(const ::math::XYZPoint*)arg[1]);
  else ::new(mem) ::reco::PFClusterJet(*(const ::math::XYZTLorentzVector*)arg[0],
      *(const ::math::XYZPoint*)arg[1]);
}

static void constructor_27504( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::reco::PFClusterJet(*(const ::math::XYZTLorentzVector*)arg[0],
      *(const ::math::XYZPoint*)arg[1],
      *(const ::std::vector<edm::Ptr<reco::Candidate> >*)arg[2]);
  else ::new(mem) ::reco::PFClusterJet(*(const ::math::XYZTLorentzVector*)arg[0],
      *(const ::math::XYZPoint*)arg[1],
      *(const ::std::vector<edm::Ptr<reco::Candidate> >*)arg[2]);
}

static void destructor_27505(void*, void * o, const std::vector<void*>&, void *) {
(((::reco::PFClusterJet*)o)->::reco::PFClusterJet::~PFClusterJet)();
}
static  void method_27506( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::reco::PFClusterJet*)o)->clone)());
  else   (((const ::reco::PFClusterJet*)o)->clone)();
}

static  void method_27507( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::string)((((const ::reco::PFClusterJet*)o)->print)());
  else   (((const ::reco::PFClusterJet*)o)->print)();
}

static  void method_27508( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (reco::PFClusterRef)((((const ::reco::PFClusterJet*)o)->pfCluster)(*(::size_t*)arg[0]));
  else   (((const ::reco::PFClusterJet*)o)->pfCluster)(*(::size_t*)arg[0]);
}

static void method_newdel_7932( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::reco::PFClusterJet >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::reco::PFClusterJet >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::reco::PFClusterJet >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::reco::PFClusterJet >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::reco::PFClusterJet >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

static void method_x5( void* retaddr, void*, const std::vector<void*>&, void*)
{
  typedef std::vector<std::pair< ::Reflex::Base, int> > Bases_t;
  static Bases_t s_bases;
  if ( !s_bases.size() ) {
    s_bases.push_back(std::make_pair(::Reflex::Base( ::Reflex::TypeBuilder(Reflex::Literal("reco::Jet")), ::Reflex::BaseOffset< ::reco::PFClusterJet,::reco::Jet >::Get(),::Reflex::PUBLIC), 0));
    s_bases.push_back(std::make_pair(::Reflex::Base( ::Reflex::TypeBuilder(Reflex::Literal("reco::CompositePtrCandidate")), ::Reflex::BaseOffset< ::reco::PFClusterJet,::reco::CompositePtrCandidate >::Get(),::Reflex::PUBLIC), 1));
    s_bases.push_back(std::make_pair(::Reflex::Base( ::Reflex::TypeBuilder(Reflex::Literal("reco::LeafCandidate")), ::Reflex::BaseOffset< ::reco::PFClusterJet,::reco::LeafCandidate >::Get(),::Reflex::PUBLIC), 2));
    s_bases.push_back(std::make_pair(::Reflex::Base( ::Reflex::TypeBuilder(Reflex::Literal("reco::Candidate")), ::Reflex::BaseOffset< ::reco::PFClusterJet,::reco::Candidate >::Get(),::Reflex::PUBLIC), 3));
  }
  if (retaddr) *(Bases_t**)retaddr = &s_bases;
}

//------Dictionary for class PFClusterJet -------------------------------
void __reco__PFClusterJet_db_datamem(Reflex::Class*);
void __reco__PFClusterJet_db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __reco__PFClusterJet_datamem_bld(&__reco__PFClusterJet_db_datamem);
Reflex::GenreflexMemberBuilder __reco__PFClusterJet_funcmem_bld(&__reco__PFClusterJet_db_funcmem);
void __reco__PFClusterJet_dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("reco::PFClusterJet"), typeid(::reco::PFClusterJet), sizeof(::reco::PFClusterJet), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::VIRTUAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("ClassVersion"), "10")
  .AddBase(type_7762, ::Reflex::BaseOffset< ::reco::PFClusterJet, ::reco::Jet >::Get(), ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13777, type_13779), Reflex::Literal("operator="), operator_27500, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_13779), Reflex::Literal("PFClusterJet"), constructor_27501, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("PFClusterJet"), constructor_27502, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_25131, type_25133), Reflex::Literal("PFClusterJet"), constructor_27503, 0, "fP4;fVertex", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_25131, type_25133, type_33808), Reflex::Literal("PFClusterJet"), constructor_27504, 0, "fP4;fVertex;fConstituents", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~PFClusterJet"), destructor_27505, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::DESTRUCTOR )
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_7932, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getBasesTable"), method_x5, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandFunctionMemberBuilder(&__reco__PFClusterJet_funcmem_bld);
}

//------Delayed data member builder for class PFClusterJet -------------------
void __reco__PFClusterJet_db_datamem(Reflex::Class*) {

}
//------Delayed function member builder for class PFClusterJet -------------------
void __reco__PFClusterJet_db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_9940), Reflex::Literal("clone"), method_27506, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2551), Reflex::Literal("print"), method_27507, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_7818, type_2125), Reflex::Literal("pfCluster"), method_27508, 0, "i", ::Reflex::PUBLIC | ::Reflex::CONST);
}
//------Stub functions for class vector<reco::PFClusterJet,std::allocator<reco::PFClusterJet> > -------------------------------
static void constructor_13788( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<reco::PFClusterJet>();
  else ::new(mem) ::std::vector<reco::PFClusterJet>();
}

static void constructor_13789( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<reco::PFClusterJet>(*(const ::std::allocator<reco::PFClusterJet>*)arg[0]);
  else ::new(mem) ::std::vector<reco::PFClusterJet>(*(const ::std::allocator<reco::PFClusterJet>*)arg[0]);
}

static void constructor_13790( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if ( arg.size() == 1 ) {
    if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<reco::PFClusterJet>(*(::std::size_t*)arg[0]);
  else ::new(mem) ::std::vector<reco::PFClusterJet>(*(::std::size_t*)arg[0]);
  }
  else if ( arg.size() == 2 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<reco::PFClusterJet>(*(::std::size_t*)arg[0],
      *(const ::reco::PFClusterJet*)arg[1]);
  else ::new(mem) ::std::vector<reco::PFClusterJet>(*(::std::size_t*)arg[0],
      *(const ::reco::PFClusterJet*)arg[1]);
  }
  else if ( arg.size() == 3 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<reco::PFClusterJet>(*(::std::size_t*)arg[0],
      *(const ::reco::PFClusterJet*)arg[1],
      *(const ::std::allocator<reco::PFClusterJet>*)arg[2]);
  else ::new(mem) ::std::vector<reco::PFClusterJet>(*(::std::size_t*)arg[0],
      *(const ::reco::PFClusterJet*)arg[1],
      *(const ::std::allocator<reco::PFClusterJet>*)arg[2]);
  }
}

static void constructor_13791( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<reco::PFClusterJet>(*(const ::std::vector<reco::PFClusterJet>*)arg[0]);
  else ::new(mem) ::std::vector<reco::PFClusterJet>(*(const ::std::vector<reco::PFClusterJet>*)arg[0]);
}

static void destructor_13792(void*, void * o, const std::vector<void*>&, void *) {
(((::std::vector<reco::PFClusterJet>*)o)->::std::vector<reco::PFClusterJet>::~vector)();
}
static  void operator_13793( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<reco::PFClusterJet>*)o)->operator=)(*(const ::std::vector<reco::PFClusterJet>*)arg[0]);
  else   (((::std::vector<reco::PFClusterJet>*)o)->operator=)(*(const ::std::vector<reco::PFClusterJet>*)arg[0]);
}

static  void method_13794( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<reco::PFClusterJet>*)o)->assign)(*(::std::size_t*)arg[0],
    *(const ::reco::PFClusterJet*)arg[1]);
}

static  void method_13795( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<reco::PFClusterJet*,std::vector<reco::PFClusterJet> >)((((::std::vector<reco::PFClusterJet>*)o)->begin)());
  else   (((::std::vector<reco::PFClusterJet>*)o)->begin)();
}

static  void method_13796( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<const reco::PFClusterJet*,std::vector<reco::PFClusterJet> >)((((const ::std::vector<reco::PFClusterJet>*)o)->begin)());
  else   (((const ::std::vector<reco::PFClusterJet>*)o)->begin)();
}

static  void method_13797( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<reco::PFClusterJet*,std::vector<reco::PFClusterJet> >)((((::std::vector<reco::PFClusterJet>*)o)->end)());
  else   (((::std::vector<reco::PFClusterJet>*)o)->end)();
}

static  void method_13798( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<const reco::PFClusterJet*,std::vector<reco::PFClusterJet> >)((((const ::std::vector<reco::PFClusterJet>*)o)->end)());
  else   (((const ::std::vector<reco::PFClusterJet>*)o)->end)();
}

static  void method_13803( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::std::vector<reco::PFClusterJet>*)o)->size)());
  else   (((const ::std::vector<reco::PFClusterJet>*)o)->size)();
}

static  void method_13804( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::std::vector<reco::PFClusterJet>*)o)->max_size)());
  else   (((const ::std::vector<reco::PFClusterJet>*)o)->max_size)();
}

static  void method_13805( void*, void* o, const std::vector<void*>& arg, void*)
{
  if ( arg.size() == 1 ) {
    (((::std::vector<reco::PFClusterJet>*)o)->resize)(*(::std::size_t*)arg[0]);
  }
  else if ( arg.size() == 2 ) { 
    (((::std::vector<reco::PFClusterJet>*)o)->resize)(*(::std::size_t*)arg[0],
      *(::reco::PFClusterJet*)arg[1]);
  }
}

static  void method_13806( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::std::vector<reco::PFClusterJet>*)o)->capacity)());
  else   (((const ::std::vector<reco::PFClusterJet>*)o)->capacity)();
}

static  void method_13807( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::std::vector<reco::PFClusterJet>*)o)->empty)());
  else   (((const ::std::vector<reco::PFClusterJet>*)o)->empty)();
}

static  void method_13808( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<reco::PFClusterJet>*)o)->reserve)(*(::std::size_t*)arg[0]);
}

static  void operator_13809( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<reco::PFClusterJet>*)o)->operator[])(*(::std::size_t*)arg[0]);
  else   (((::std::vector<reco::PFClusterJet>*)o)->operator[])(*(::std::size_t*)arg[0]);
}

static  void operator_13810( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<reco::PFClusterJet>*)o)->operator[])(*(::std::size_t*)arg[0]);
  else   (((const ::std::vector<reco::PFClusterJet>*)o)->operator[])(*(::std::size_t*)arg[0]);
}

static  void method_13812( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<reco::PFClusterJet>*)o)->at)(*(::std::size_t*)arg[0]);
  else   (((::std::vector<reco::PFClusterJet>*)o)->at)(*(::std::size_t*)arg[0]);
}

static  void method_13813( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<reco::PFClusterJet>*)o)->at)(*(::std::size_t*)arg[0]);
  else   (((const ::std::vector<reco::PFClusterJet>*)o)->at)(*(::std::size_t*)arg[0]);
}

static  void method_13814( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<reco::PFClusterJet>*)o)->front)();
  else   (((::std::vector<reco::PFClusterJet>*)o)->front)();
}

static  void method_13815( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<reco::PFClusterJet>*)o)->front)();
  else   (((const ::std::vector<reco::PFClusterJet>*)o)->front)();
}

static  void method_13816( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<reco::PFClusterJet>*)o)->back)();
  else   (((::std::vector<reco::PFClusterJet>*)o)->back)();
}

static  void method_13817( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<reco::PFClusterJet>*)o)->back)();
  else   (((const ::std::vector<reco::PFClusterJet>*)o)->back)();
}

static  void method_13818( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((::std::vector<reco::PFClusterJet>*)o)->data)());
  else   (((::std::vector<reco::PFClusterJet>*)o)->data)();
}

static  void method_13819( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::std::vector<reco::PFClusterJet>*)o)->data)());
  else   (((const ::std::vector<reco::PFClusterJet>*)o)->data)();
}

static  void method_13820( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<reco::PFClusterJet>*)o)->push_back)(*(const ::reco::PFClusterJet*)arg[0]);
}

static  void method_13821( void*, void* o, const std::vector<void*>&, void*)
{
  (((::std::vector<reco::PFClusterJet>*)o)->pop_back)();
}

static  void method_13822( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<reco::PFClusterJet*,std::vector<reco::PFClusterJet> >)((((::std::vector<reco::PFClusterJet>*)o)->insert)(*(::__gnu_cxx::__normal_iterator<reco::PFClusterJet*,std::vector<reco::PFClusterJet> >*)arg[0],
    *(const ::reco::PFClusterJet*)arg[1]));
  else   (((::std::vector<reco::PFClusterJet>*)o)->insert)(*(::__gnu_cxx::__normal_iterator<reco::PFClusterJet*,std::vector<reco::PFClusterJet> >*)arg[0],
    *(const ::reco::PFClusterJet*)arg[1]);
}

static  void method_13823( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<reco::PFClusterJet>*)o)->insert)(*(::__gnu_cxx::__normal_iterator<reco::PFClusterJet*,std::vector<reco::PFClusterJet> >*)arg[0],
    *(::std::size_t*)arg[1],
    *(const ::reco::PFClusterJet*)arg[2]);
}

static  void method_13824( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<reco::PFClusterJet*,std::vector<reco::PFClusterJet> >)((((::std::vector<reco::PFClusterJet>*)o)->erase)(*(::__gnu_cxx::__normal_iterator<reco::PFClusterJet*,std::vector<reco::PFClusterJet> >*)arg[0]));
  else   (((::std::vector<reco::PFClusterJet>*)o)->erase)(*(::__gnu_cxx::__normal_iterator<reco::PFClusterJet*,std::vector<reco::PFClusterJet> >*)arg[0]);
}

static  void method_13825( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<reco::PFClusterJet*,std::vector<reco::PFClusterJet> >)((((::std::vector<reco::PFClusterJet>*)o)->erase)(*(::__gnu_cxx::__normal_iterator<reco::PFClusterJet*,std::vector<reco::PFClusterJet> >*)arg[0],
    *(::__gnu_cxx::__normal_iterator<reco::PFClusterJet*,std::vector<reco::PFClusterJet> >*)arg[1]));
  else   (((::std::vector<reco::PFClusterJet>*)o)->erase)(*(::__gnu_cxx::__normal_iterator<reco::PFClusterJet*,std::vector<reco::PFClusterJet> >*)arg[0],
    *(::__gnu_cxx::__normal_iterator<reco::PFClusterJet*,std::vector<reco::PFClusterJet> >*)arg[1]);
}

static  void method_13826( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<reco::PFClusterJet>*)o)->swap)(*(::std::vector<reco::PFClusterJet>*)arg[0]);
}

static  void method_13827( void*, void* o, const std::vector<void*>&, void*)
{
  (((::std::vector<reco::PFClusterJet>*)o)->clear)();
}

static void method_newdel_2962( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::std::vector<reco::PFClusterJet> >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::std::vector<reco::PFClusterJet> >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::std::vector<reco::PFClusterJet> >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::std::vector<reco::PFClusterJet> >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::std::vector<reco::PFClusterJet> >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

static void method_x7( void* retaddr, void*, const std::vector<void*>&, void*)
{
  typedef std::vector<std::pair< ::Reflex::Base, int> > Bases_t;
  static Bases_t s_bases;
  if ( !s_bases.size() ) {
    s_bases.push_back(std::make_pair(::Reflex::Base( ::Reflex::TypeBuilder(Reflex::Literal("std::_Vector_base<reco::PFClusterJet,std::allocator<reco::PFClusterJet> >")), ::Reflex::BaseOffset< ::std::vector<reco::PFClusterJet>,::std::_Vector_base<reco::PFClusterJet,std::allocator<reco::PFClusterJet> > >::Get(),::Reflex::PROTECTED), 0));
  }
  if (retaddr) *(Bases_t**)retaddr = &s_bases;
}

static void method_x8( void* retaddr, void*, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**) retaddr = ::Reflex::Proxy< ::std::vector<reco::PFClusterJet> >::Generate();
  else ::Reflex::Proxy< ::std::vector<reco::PFClusterJet> >::Generate();
}

//------Dictionary for class vector<reco::PFClusterJet,std::allocator<reco::PFClusterJet> > -------------------------------
void __std__vector_reco__PFClusterJet__db_datamem(Reflex::Class*);
void __std__vector_reco__PFClusterJet__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __std__vector_reco__PFClusterJet__datamem_bld(&__std__vector_reco__PFClusterJet__db_datamem);
Reflex::GenreflexMemberBuilder __std__vector_reco__PFClusterJet__funcmem_bld(&__std__vector_reco__PFClusterJet__db_funcmem);
void __std__vector_reco__PFClusterJet__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("std::vector<reco::PFClusterJet>"), typeid(::std::vector<reco::PFClusterJet>), sizeof(::std::vector<reco::PFClusterJet>), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddBase(type_2501, ::Reflex::BaseOffset< ::std::vector<reco::PFClusterJet>, ::std::_Vector_base<reco::PFClusterJet,std::allocator<reco::PFClusterJet> > >::Get(), ::Reflex::PROTECTED)
  .AddTypedef(type_7932, Reflex::Literal("std::vector<reco::PFClusterJet>::_Alloc_value_type"))
  .AddTypedef(type_2501, Reflex::Literal("std::vector<reco::PFClusterJet>::_Base"))
  .AddTypedef(type_3266, Reflex::Literal("std::vector<reco::PFClusterJet>::_Tp_alloc_type"))
  .AddTypedef(type_8384, Reflex::Literal("std::vector<reco::PFClusterJet>::_Alloc_traits"))
  .AddTypedef(type_7932, Reflex::Literal("std::vector<reco::PFClusterJet>::value_type"))
  .AddTypedef(type_9940, Reflex::Literal("std::vector<reco::PFClusterJet>::pointer"))
  .AddTypedef(type_13775, Reflex::Literal("std::vector<reco::PFClusterJet>::const_pointer"))
  .AddTypedef(type_13777, Reflex::Literal("std::vector<reco::PFClusterJet>::reference"))
  .AddTypedef(type_13779, Reflex::Literal("std::vector<reco::PFClusterJet>::const_reference"))
  .AddTypedef(type_8252, Reflex::Literal("std::vector<reco::PFClusterJet>::iterator"))
  .AddTypedef(type_8253, Reflex::Literal("std::vector<reco::PFClusterJet>::const_iterator"))
  .AddTypedef(type_3525, Reflex::Literal("std::vector<reco::PFClusterJet>::const_reverse_iterator"))
  .AddTypedef(type_3526, Reflex::Literal("std::vector<reco::PFClusterJet>::reverse_iterator"))
  .AddTypedef(type_3234, Reflex::Literal("std::vector<reco::PFClusterJet>::size_type"))
  .AddTypedef(type_3113, Reflex::Literal("std::vector<reco::PFClusterJet>::difference_type"))
  .AddTypedef(type_3266, Reflex::Literal("std::vector<reco::PFClusterJet>::allocator_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("vector"), constructor_13788, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_32739), Reflex::Literal("vector"), constructor_13789, 0, "__a", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_3234, type_13779, type_32739), Reflex::Literal("vector"), constructor_13790, 0, "__n;__value=_Tp();__a=_Alloc()", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_20352), Reflex::Literal("vector"), constructor_13791, 0, "__x", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~vector"), destructor_13792, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_2962, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getBasesTable"), method_x7, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddFunctionMember<void*(void)>(Reflex::Literal("createCollFuncTable"), method_x8, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandFunctionMemberBuilder(&__std__vector_reco__PFClusterJet__funcmem_bld);
}

//------Delayed data member builder for class vector<reco::PFClusterJet,std::allocator<reco::PFClusterJet> > -------------------
void __std__vector_reco__PFClusterJet__db_datamem(Reflex::Class*) {

}
//------Delayed function member builder for class vector<reco::PFClusterJet,std::allocator<reco::PFClusterJet> > -------------------
void __std__vector_reco__PFClusterJet__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_33772, type_20352), Reflex::Literal("operator="), operator_13793, 0, "__x", ::Reflex::PUBLIC | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_3234, type_13779), Reflex::Literal("assign"), method_13794, 0, "__n;__val", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_8252), Reflex::Literal("begin"), method_13795, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_8253), Reflex::Literal("begin"), method_13796, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_8252), Reflex::Literal("end"), method_13797, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_8253), Reflex::Literal("end"), method_13798, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3234), Reflex::Literal("size"), method_13803, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3234), Reflex::Literal("max_size"), method_13804, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_3234, type_7932), Reflex::Literal("resize"), method_13805, 0, "__new_size;__x=_Tp()", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3234), Reflex::Literal("capacity"), method_13806, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("empty"), method_13807, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_3234), Reflex::Literal("reserve"), method_13808, 0, "__n", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13777, type_3234), Reflex::Literal("operator[]"), operator_13809, 0, "__n", ::Reflex::PUBLIC | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13779, type_3234), Reflex::Literal("operator[]"), operator_13810, 0, "__n", ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13777, type_3234), Reflex::Literal("at"), method_13812, 0, "__n", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13779, type_3234), Reflex::Literal("at"), method_13813, 0, "__n", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13777), Reflex::Literal("front"), method_13814, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13779), Reflex::Literal("front"), method_13815, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13777), Reflex::Literal("back"), method_13816, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13779), Reflex::Literal("back"), method_13817, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_9940), Reflex::Literal("data"), method_13818, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13775), Reflex::Literal("data"), method_13819, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_13779), Reflex::Literal("push_back"), method_13820, 0, "__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698), Reflex::Literal("pop_back"), method_13821, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_8252, type_8252, type_13779), Reflex::Literal("insert"), method_13822, 0, "__position;__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_8252, type_3234, type_13779), Reflex::Literal("insert"), method_13823, 0, "__position;__n;__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_8252, type_8252), Reflex::Literal("erase"), method_13824, 0, "__position", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_8252, type_8252, type_8252), Reflex::Literal("erase"), method_13825, 0, "__first;__last", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_33772), Reflex::Literal("swap"), method_13826, 0, "__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698), Reflex::Literal("clear"), method_13827, 0, 0, ::Reflex::PUBLIC);
}
//------Stub functions for class TrackJet -------------------------------
static  void operator_26497( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::reco::TrackJet*)o)->operator=)(*(const ::reco::TrackJet*)arg[0]);
  else   (((::reco::TrackJet*)o)->operator=)(*(const ::reco::TrackJet*)arg[0]);
}

static void constructor_26498( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::reco::TrackJet(*(const ::reco::TrackJet*)arg[0]);
  else ::new(mem) ::reco::TrackJet(*(const ::reco::TrackJet*)arg[0]);
}

static void constructor_26499( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::reco::TrackJet();
  else ::new(mem) ::reco::TrackJet();
}

static void constructor_26500( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::reco::TrackJet(*(const ::math::XYZTLorentzVector*)arg[0],
      *(const ::math::XYZPoint*)arg[1]);
  else ::new(mem) ::reco::TrackJet(*(const ::math::XYZTLorentzVector*)arg[0],
      *(const ::math::XYZPoint*)arg[1]);
}

static void constructor_26501( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::reco::TrackJet(*(const ::math::XYZTLorentzVector*)arg[0],
      *(const ::math::XYZPoint*)arg[1],
      *(const ::std::vector<edm::Ptr<reco::Candidate> >*)arg[2]);
  else ::new(mem) ::reco::TrackJet(*(const ::math::XYZTLorentzVector*)arg[0],
      *(const ::math::XYZPoint*)arg[1],
      *(const ::std::vector<edm::Ptr<reco::Candidate> >*)arg[2]);
}

static void destructor_26502(void*, void * o, const std::vector<void*>&, void *) {
(((::reco::TrackJet*)o)->::reco::TrackJet::~TrackJet)();
}
static  void method_26503( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::reco::TrackJet*)o)->clone)());
  else   (((const ::reco::TrackJet*)o)->clone)();
}

static  void method_26504( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (size_t)((((const ::reco::TrackJet*)o)->numberOfTracks)());
  else   (((const ::reco::TrackJet*)o)->numberOfTracks)();
}

static  void method_26505( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (edm::Ptr<reco::Track>)((((const ::reco::TrackJet*)o)->track)(*(::size_t*)arg[0]));
  else   (((const ::reco::TrackJet*)o)->track)(*(::size_t*)arg[0]);
}

static  void method_26506( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::vector<edm::Ptr<reco::Track> >)((((const ::reco::TrackJet*)o)->tracks)());
  else   (((const ::reco::TrackJet*)o)->tracks)();
}

static  void method_26507( void*, void* o, const std::vector<void*>&, void*)
{
  (((::reco::TrackJet*)o)->resetCharge)();
}

static  void method_26508( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (reco::VertexRef)((((const ::reco::TrackJet*)o)->primaryVertex)());
  else   (((const ::reco::TrackJet*)o)->primaryVertex)();
}

static  void method_26509( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::reco::TrackJet*)o)->setPrimaryVertex)(*(const ::reco::VertexRef*)arg[0]);
}

static  void method_26510( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::reco::TrackJet*)o)->fromHardVertex)());
  else   (((const ::reco::TrackJet*)o)->fromHardVertex)();
}

static  void method_26511( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::string)((((const ::reco::TrackJet*)o)->print)());
  else   (((const ::reco::TrackJet*)o)->print)();
}

static void method_newdel_7775( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::reco::TrackJet >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::reco::TrackJet >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::reco::TrackJet >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::reco::TrackJet >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::reco::TrackJet >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

static void method_x10( void* retaddr, void*, const std::vector<void*>&, void*)
{
  typedef std::vector<std::pair< ::Reflex::Base, int> > Bases_t;
  static Bases_t s_bases;
  if ( !s_bases.size() ) {
    s_bases.push_back(std::make_pair(::Reflex::Base( ::Reflex::TypeBuilder(Reflex::Literal("reco::Jet")), ::Reflex::BaseOffset< ::reco::TrackJet,::reco::Jet >::Get(),::Reflex::PUBLIC), 0));
    s_bases.push_back(std::make_pair(::Reflex::Base( ::Reflex::TypeBuilder(Reflex::Literal("reco::CompositePtrCandidate")), ::Reflex::BaseOffset< ::reco::TrackJet,::reco::CompositePtrCandidate >::Get(),::Reflex::PUBLIC), 1));
    s_bases.push_back(std::make_pair(::Reflex::Base( ::Reflex::TypeBuilder(Reflex::Literal("reco::LeafCandidate")), ::Reflex::BaseOffset< ::reco::TrackJet,::reco::LeafCandidate >::Get(),::Reflex::PUBLIC), 2));
    s_bases.push_back(std::make_pair(::Reflex::Base( ::Reflex::TypeBuilder(Reflex::Literal("reco::Candidate")), ::Reflex::BaseOffset< ::reco::TrackJet,::reco::Candidate >::Get(),::Reflex::PUBLIC), 3));
  }
  if (retaddr) *(Bases_t**)retaddr = &s_bases;
}

//------Dictionary for class TrackJet -------------------------------
void __reco__TrackJet_db_datamem(Reflex::Class*);
void __reco__TrackJet_db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __reco__TrackJet_datamem_bld(&__reco__TrackJet_db_datamem);
Reflex::GenreflexMemberBuilder __reco__TrackJet_funcmem_bld(&__reco__TrackJet_db_funcmem);
void __reco__TrackJet_dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("reco::TrackJet"), typeid(::reco::TrackJet), sizeof(::reco::TrackJet), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::VIRTUAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("ClassVersion"), "10")
  .AddBase(type_7762, ::Reflex::BaseOffset< ::reco::TrackJet, ::reco::Jet >::Get(), ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_14037, type_14039), Reflex::Literal("operator="), operator_26497, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_14039), Reflex::Literal("TrackJet"), constructor_26498, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("TrackJet"), constructor_26499, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_25131, type_25133), Reflex::Literal("TrackJet"), constructor_26500, 0, "fP4;fVertex", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_25131, type_25133, type_33808), Reflex::Literal("TrackJet"), constructor_26501, 0, "fP4;fVertex;fConstituents", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~TrackJet"), destructor_26502, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::DESTRUCTOR )
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_7775, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getBasesTable"), method_x10, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__reco__TrackJet_datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__reco__TrackJet_funcmem_bld);
}

//------Delayed data member builder for class TrackJet -------------------
void __reco__TrackJet_db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_7859, Reflex::Literal("vtx_"), OffsetOf(__shadow__::__reco__TrackJet, vtx_), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class TrackJet -------------------
void __reco__TrackJet_db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_10091), Reflex::Literal("clone"), method_26503, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2125), Reflex::Literal("numberOfTracks"), method_26504, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4904, type_2125), Reflex::Literal("track"), method_26505, 0, "i", ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3012), Reflex::Literal("tracks"), method_26506, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698), Reflex::Literal("resetCharge"), method_26507, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_7859c), Reflex::Literal("primaryVertex"), method_26508, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_38768), Reflex::Literal("setPrimaryVertex"), method_26509, 0, "vtx", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("fromHardVertex"), method_26510, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2551), Reflex::Literal("print"), method_26511, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST);
}
//------Stub functions for class vector<reco::TrackJet,std::allocator<reco::TrackJet> > -------------------------------
static void constructor_14048( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<reco::TrackJet>();
  else ::new(mem) ::std::vector<reco::TrackJet>();
}

static void constructor_14049( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<reco::TrackJet>(*(const ::std::allocator<reco::TrackJet>*)arg[0]);
  else ::new(mem) ::std::vector<reco::TrackJet>(*(const ::std::allocator<reco::TrackJet>*)arg[0]);
}

static void constructor_14050( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if ( arg.size() == 1 ) {
    if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<reco::TrackJet>(*(::std::size_t*)arg[0]);
  else ::new(mem) ::std::vector<reco::TrackJet>(*(::std::size_t*)arg[0]);
  }
  else if ( arg.size() == 2 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<reco::TrackJet>(*(::std::size_t*)arg[0],
      *(const ::reco::TrackJet*)arg[1]);
  else ::new(mem) ::std::vector<reco::TrackJet>(*(::std::size_t*)arg[0],
      *(const ::reco::TrackJet*)arg[1]);
  }
  else if ( arg.size() == 3 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<reco::TrackJet>(*(::std::size_t*)arg[0],
      *(const ::reco::TrackJet*)arg[1],
      *(const ::std::allocator<reco::TrackJet>*)arg[2]);
  else ::new(mem) ::std::vector<reco::TrackJet>(*(::std::size_t*)arg[0],
      *(const ::reco::TrackJet*)arg[1],
      *(const ::std::allocator<reco::TrackJet>*)arg[2]);
  }
}

static void constructor_14051( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<reco::TrackJet>(*(const ::std::vector<reco::TrackJet>*)arg[0]);
  else ::new(mem) ::std::vector<reco::TrackJet>(*(const ::std::vector<reco::TrackJet>*)arg[0]);
}

static void destructor_14052(void*, void * o, const std::vector<void*>&, void *) {
(((::std::vector<reco::TrackJet>*)o)->::std::vector<reco::TrackJet>::~vector)();
}
static  void operator_14053( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<reco::TrackJet>*)o)->operator=)(*(const ::std::vector<reco::TrackJet>*)arg[0]);
  else   (((::std::vector<reco::TrackJet>*)o)->operator=)(*(const ::std::vector<reco::TrackJet>*)arg[0]);
}

static  void method_14054( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<reco::TrackJet>*)o)->assign)(*(::std::size_t*)arg[0],
    *(const ::reco::TrackJet*)arg[1]);
}

static  void method_14055( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<reco::TrackJet*,std::vector<reco::TrackJet> >)((((::std::vector<reco::TrackJet>*)o)->begin)());
  else   (((::std::vector<reco::TrackJet>*)o)->begin)();
}

static  void method_14056( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<const reco::TrackJet*,std::vector<reco::TrackJet> >)((((const ::std::vector<reco::TrackJet>*)o)->begin)());
  else   (((const ::std::vector<reco::TrackJet>*)o)->begin)();
}

static  void method_14057( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<reco::TrackJet*,std::vector<reco::TrackJet> >)((((::std::vector<reco::TrackJet>*)o)->end)());
  else   (((::std::vector<reco::TrackJet>*)o)->end)();
}

static  void method_14058( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<const reco::TrackJet*,std::vector<reco::TrackJet> >)((((const ::std::vector<reco::TrackJet>*)o)->end)());
  else   (((const ::std::vector<reco::TrackJet>*)o)->end)();
}

static  void method_14063( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::std::vector<reco::TrackJet>*)o)->size)());
  else   (((const ::std::vector<reco::TrackJet>*)o)->size)();
}

static  void method_14064( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::std::vector<reco::TrackJet>*)o)->max_size)());
  else   (((const ::std::vector<reco::TrackJet>*)o)->max_size)();
}

static  void method_14065( void*, void* o, const std::vector<void*>& arg, void*)
{
  if ( arg.size() == 1 ) {
    (((::std::vector<reco::TrackJet>*)o)->resize)(*(::std::size_t*)arg[0]);
  }
  else if ( arg.size() == 2 ) { 
    (((::std::vector<reco::TrackJet>*)o)->resize)(*(::std::size_t*)arg[0],
      *(::reco::TrackJet*)arg[1]);
  }
}

static  void method_14066( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::std::vector<reco::TrackJet>*)o)->capacity)());
  else   (((const ::std::vector<reco::TrackJet>*)o)->capacity)();
}

static  void method_14067( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::std::vector<reco::TrackJet>*)o)->empty)());
  else   (((const ::std::vector<reco::TrackJet>*)o)->empty)();
}

static  void method_14068( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<reco::TrackJet>*)o)->reserve)(*(::std::size_t*)arg[0]);
}

static  void operator_14069( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<reco::TrackJet>*)o)->operator[])(*(::std::size_t*)arg[0]);
  else   (((::std::vector<reco::TrackJet>*)o)->operator[])(*(::std::size_t*)arg[0]);
}

static  void operator_14070( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<reco::TrackJet>*)o)->operator[])(*(::std::size_t*)arg[0]);
  else   (((const ::std::vector<reco::TrackJet>*)o)->operator[])(*(::std::size_t*)arg[0]);
}

static  void method_14072( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<reco::TrackJet>*)o)->at)(*(::std::size_t*)arg[0]);
  else   (((::std::vector<reco::TrackJet>*)o)->at)(*(::std::size_t*)arg[0]);
}

static  void method_14073( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<reco::TrackJet>*)o)->at)(*(::std::size_t*)arg[0]);
  else   (((const ::std::vector<reco::TrackJet>*)o)->at)(*(::std::size_t*)arg[0]);
}

static  void method_14074( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<reco::TrackJet>*)o)->front)();
  else   (((::std::vector<reco::TrackJet>*)o)->front)();
}

static  void method_14075( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<reco::TrackJet>*)o)->front)();
  else   (((const ::std::vector<reco::TrackJet>*)o)->front)();
}

static  void method_14076( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<reco::TrackJet>*)o)->back)();
  else   (((::std::vector<reco::TrackJet>*)o)->back)();
}

static  void method_14077( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<reco::TrackJet>*)o)->back)();
  else   (((const ::std::vector<reco::TrackJet>*)o)->back)();
}

static  void method_14078( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((::std::vector<reco::TrackJet>*)o)->data)());
  else   (((::std::vector<reco::TrackJet>*)o)->data)();
}

static  void method_14079( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::std::vector<reco::TrackJet>*)o)->data)());
  else   (((const ::std::vector<reco::TrackJet>*)o)->data)();
}

static  void method_14080( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<reco::TrackJet>*)o)->push_back)(*(const ::reco::TrackJet*)arg[0]);
}

static  void method_14081( void*, void* o, const std::vector<void*>&, void*)
{
  (((::std::vector<reco::TrackJet>*)o)->pop_back)();
}

static  void method_14082( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<reco::TrackJet*,std::vector<reco::TrackJet> >)((((::std::vector<reco::TrackJet>*)o)->insert)(*(::__gnu_cxx::__normal_iterator<reco::TrackJet*,std::vector<reco::TrackJet> >*)arg[0],
    *(const ::reco::TrackJet*)arg[1]));
  else   (((::std::vector<reco::TrackJet>*)o)->insert)(*(::__gnu_cxx::__normal_iterator<reco::TrackJet*,std::vector<reco::TrackJet> >*)arg[0],
    *(const ::reco::TrackJet*)arg[1]);
}

static  void method_14083( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<reco::TrackJet>*)o)->insert)(*(::__gnu_cxx::__normal_iterator<reco::TrackJet*,std::vector<reco::TrackJet> >*)arg[0],
    *(::std::size_t*)arg[1],
    *(const ::reco::TrackJet*)arg[2]);
}

static  void method_14084( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<reco::TrackJet*,std::vector<reco::TrackJet> >)((((::std::vector<reco::TrackJet>*)o)->erase)(*(::__gnu_cxx::__normal_iterator<reco::TrackJet*,std::vector<reco::TrackJet> >*)arg[0]));
  else   (((::std::vector<reco::TrackJet>*)o)->erase)(*(::__gnu_cxx::__normal_iterator<reco::TrackJet*,std::vector<reco::TrackJet> >*)arg[0]);
}

static  void method_14085( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<reco::TrackJet*,std::vector<reco::TrackJet> >)((((::std::vector<reco::TrackJet>*)o)->erase)(*(::__gnu_cxx::__normal_iterator<reco::TrackJet*,std::vector<reco::TrackJet> >*)arg[0],
    *(::__gnu_cxx::__normal_iterator<reco::TrackJet*,std::vector<reco::TrackJet> >*)arg[1]));
  else   (((::std::vector<reco::TrackJet>*)o)->erase)(*(::__gnu_cxx::__normal_iterator<reco::TrackJet*,std::vector<reco::TrackJet> >*)arg[0],
    *(::__gnu_cxx::__normal_iterator<reco::TrackJet*,std::vector<reco::TrackJet> >*)arg[1]);
}

static  void method_14086( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<reco::TrackJet>*)o)->swap)(*(::std::vector<reco::TrackJet>*)arg[0]);
}

static  void method_14087( void*, void* o, const std::vector<void*>&, void*)
{
  (((::std::vector<reco::TrackJet>*)o)->clear)();
}

static void method_newdel_2970( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::std::vector<reco::TrackJet> >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::std::vector<reco::TrackJet> >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::std::vector<reco::TrackJet> >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::std::vector<reco::TrackJet> >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::std::vector<reco::TrackJet> >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

static void method_x12( void* retaddr, void*, const std::vector<void*>&, void*)
{
  typedef std::vector<std::pair< ::Reflex::Base, int> > Bases_t;
  static Bases_t s_bases;
  if ( !s_bases.size() ) {
    s_bases.push_back(std::make_pair(::Reflex::Base( ::Reflex::TypeBuilder(Reflex::Literal("std::_Vector_base<reco::TrackJet,std::allocator<reco::TrackJet> >")), ::Reflex::BaseOffset< ::std::vector<reco::TrackJet>,::std::_Vector_base<reco::TrackJet,std::allocator<reco::TrackJet> > >::Get(),::Reflex::PROTECTED), 0));
  }
  if (retaddr) *(Bases_t**)retaddr = &s_bases;
}

static void method_x13( void* retaddr, void*, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**) retaddr = ::Reflex::Proxy< ::std::vector<reco::TrackJet> >::Generate();
  else ::Reflex::Proxy< ::std::vector<reco::TrackJet> >::Generate();
}

//------Dictionary for class vector<reco::TrackJet,std::allocator<reco::TrackJet> > -------------------------------
void __std__vector_reco__TrackJet__db_datamem(Reflex::Class*);
void __std__vector_reco__TrackJet__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __std__vector_reco__TrackJet__datamem_bld(&__std__vector_reco__TrackJet__db_datamem);
Reflex::GenreflexMemberBuilder __std__vector_reco__TrackJet__funcmem_bld(&__std__vector_reco__TrackJet__db_funcmem);
void __std__vector_reco__TrackJet__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("std::vector<reco::TrackJet>"), typeid(::std::vector<reco::TrackJet>), sizeof(::std::vector<reco::TrackJet>), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddBase(type_2509, ::Reflex::BaseOffset< ::std::vector<reco::TrackJet>, ::std::_Vector_base<reco::TrackJet,std::allocator<reco::TrackJet> > >::Get(), ::Reflex::PROTECTED)
  .AddTypedef(type_7775, Reflex::Literal("std::vector<reco::TrackJet>::_Alloc_value_type"))
  .AddTypedef(type_2509, Reflex::Literal("std::vector<reco::TrackJet>::_Base"))
  .AddTypedef(type_3281, Reflex::Literal("std::vector<reco::TrackJet>::_Tp_alloc_type"))
  .AddTypedef(type_8392, Reflex::Literal("std::vector<reco::TrackJet>::_Alloc_traits"))
  .AddTypedef(type_7775, Reflex::Literal("std::vector<reco::TrackJet>::value_type"))
  .AddTypedef(type_10091, Reflex::Literal("std::vector<reco::TrackJet>::pointer"))
  .AddTypedef(type_14035, Reflex::Literal("std::vector<reco::TrackJet>::const_pointer"))
  .AddTypedef(type_14037, Reflex::Literal("std::vector<reco::TrackJet>::reference"))
  .AddTypedef(type_14039, Reflex::Literal("std::vector<reco::TrackJet>::const_reference"))
  .AddTypedef(type_8269, Reflex::Literal("std::vector<reco::TrackJet>::iterator"))
  .AddTypedef(type_8270, Reflex::Literal("std::vector<reco::TrackJet>::const_iterator"))
  .AddTypedef(type_3541, Reflex::Literal("std::vector<reco::TrackJet>::const_reverse_iterator"))
  .AddTypedef(type_3542, Reflex::Literal("std::vector<reco::TrackJet>::reverse_iterator"))
  .AddTypedef(type_3234, Reflex::Literal("std::vector<reco::TrackJet>::size_type"))
  .AddTypedef(type_3113, Reflex::Literal("std::vector<reco::TrackJet>::difference_type"))
  .AddTypedef(type_3281, Reflex::Literal("std::vector<reco::TrackJet>::allocator_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("vector"), constructor_14048, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_32843), Reflex::Literal("vector"), constructor_14049, 0, "__a", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_3234, type_14039, type_32843), Reflex::Literal("vector"), constructor_14050, 0, "__n;__value=_Tp();__a=_Alloc()", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_20376), Reflex::Literal("vector"), constructor_14051, 0, "__x", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~vector"), destructor_14052, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_2970, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getBasesTable"), method_x12, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddFunctionMember<void*(void)>(Reflex::Literal("createCollFuncTable"), method_x13, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandFunctionMemberBuilder(&__std__vector_reco__TrackJet__funcmem_bld);
}

//------Delayed data member builder for class vector<reco::TrackJet,std::allocator<reco::TrackJet> > -------------------
void __std__vector_reco__TrackJet__db_datamem(Reflex::Class*) {

}
//------Delayed function member builder for class vector<reco::TrackJet,std::allocator<reco::TrackJet> > -------------------
void __std__vector_reco__TrackJet__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_33782, type_20376), Reflex::Literal("operator="), operator_14053, 0, "__x", ::Reflex::PUBLIC | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_3234, type_14039), Reflex::Literal("assign"), method_14054, 0, "__n;__val", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_8269), Reflex::Literal("begin"), method_14055, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_8270), Reflex::Literal("begin"), method_14056, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_8269), Reflex::Literal("end"), method_14057, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_8270), Reflex::Literal("end"), method_14058, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3234), Reflex::Literal("size"), method_14063, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3234), Reflex::Literal("max_size"), method_14064, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_3234, type_7775), Reflex::Literal("resize"), method_14065, 0, "__new_size;__x=_Tp()", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3234), Reflex::Literal("capacity"), method_14066, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("empty"), method_14067, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_3234), Reflex::Literal("reserve"), method_14068, 0, "__n", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_14037, type_3234), Reflex::Literal("operator[]"), operator_14069, 0, "__n", ::Reflex::PUBLIC | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_14039, type_3234), Reflex::Literal("operator[]"), operator_14070, 0, "__n", ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_14037, type_3234), Reflex::Literal("at"), method_14072, 0, "__n", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_14039, type_3234), Reflex::Literal("at"), method_14073, 0, "__n", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_14037), Reflex::Literal("front"), method_14074, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_14039), Reflex::Literal("front"), method_14075, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_14037), Reflex::Literal("back"), method_14076, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_14039), Reflex::Literal("back"), method_14077, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_10091), Reflex::Literal("data"), method_14078, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_14035), Reflex::Literal("data"), method_14079, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_14039), Reflex::Literal("push_back"), method_14080, 0, "__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698), Reflex::Literal("pop_back"), method_14081, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_8269, type_8269, type_14039), Reflex::Literal("insert"), method_14082, 0, "__position;__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_8269, type_3234, type_14039), Reflex::Literal("insert"), method_14083, 0, "__position;__n;__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_8269, type_8269), Reflex::Literal("erase"), method_14084, 0, "__position", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_8269, type_8269, type_8269), Reflex::Literal("erase"), method_14085, 0, "__first;__last", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_33782), Reflex::Literal("swap"), method_14086, 0, "__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698), Reflex::Literal("clear"), method_14087, 0, 0, ::Reflex::PUBLIC);
}
//------Stub functions for class FwdPtr<reco::PFClusterJet> -------------------------------
static  void operator_21908( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::FwdPtr<reco::PFClusterJet>*)o)->operator=)(*(const ::edm::FwdPtr<reco::PFClusterJet>*)arg[0]);
  else   (((::edm::FwdPtr<reco::PFClusterJet>*)o)->operator=)(*(const ::edm::FwdPtr<reco::PFClusterJet>*)arg[0]);
}

static void constructor_21909( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::FwdPtr<reco::PFClusterJet>(*(const ::edm::FwdPtr<reco::PFClusterJet>*)arg[0]);
  else ::new(mem) ::edm::FwdPtr<reco::PFClusterJet>(*(const ::edm::FwdPtr<reco::PFClusterJet>*)arg[0]);
}

static void constructor_21910( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::FwdPtr<reco::PFClusterJet>();
  else ::new(mem) ::edm::FwdPtr<reco::PFClusterJet>();
}

static void destructor_21911(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::FwdPtr<reco::PFClusterJet>*)o)->::edm::FwdPtr<reco::PFClusterJet>::~FwdPtr)();
}
static  void operator_21912( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::FwdPtr<reco::PFClusterJet>*)o)->operator*)();
  else   (((const ::edm::FwdPtr<reco::PFClusterJet>*)o)->operator*)();
}

static  void operator_21913( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::FwdPtr<reco::PFClusterJet>*)o)->operator->)());
  else   (((const ::edm::FwdPtr<reco::PFClusterJet>*)o)->operator->)();
}

static  void method_21914( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::FwdPtr<reco::PFClusterJet>*)o)->get)());
  else   (((const ::edm::FwdPtr<reco::PFClusterJet>*)o)->get)();
}

static  void method_21915( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::FwdPtr<reco::PFClusterJet>*)o)->isNull)());
  else   (((const ::edm::FwdPtr<reco::PFClusterJet>*)o)->isNull)();
}

static  void method_21916( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::FwdPtr<reco::PFClusterJet>*)o)->isNonnull)());
  else   (((const ::edm::FwdPtr<reco::PFClusterJet>*)o)->isNonnull)();
}

static  void operator_21917( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::FwdPtr<reco::PFClusterJet>*)o)->operator!)());
  else   (((const ::edm::FwdPtr<reco::PFClusterJet>*)o)->operator!)();
}

static  void method_21918( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::FwdPtr<reco::PFClusterJet>*)o)->isAvailable)());
  else   (((const ::edm::FwdPtr<reco::PFClusterJet>*)o)->isAvailable)();
}

static  void method_21919( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::FwdPtr<reco::PFClusterJet>*)o)->isTransient)());
  else   (((const ::edm::FwdPtr<reco::PFClusterJet>*)o)->isTransient)();
}

static  void method_21920( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::ProductID)((((const ::edm::FwdPtr<reco::PFClusterJet>*)o)->id)());
  else   (((const ::edm::FwdPtr<reco::PFClusterJet>*)o)->id)();
}

static  void method_21921( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::FwdPtr<reco::PFClusterJet>*)o)->productGetter)());
  else   (((const ::edm::FwdPtr<reco::PFClusterJet>*)o)->productGetter)();
}

static  void method_21922( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (unsigned long)((((const ::edm::FwdPtr<reco::PFClusterJet>*)o)->key)());
  else   (((const ::edm::FwdPtr<reco::PFClusterJet>*)o)->key)();
}

static  void method_21923( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::FwdPtr<reco::PFClusterJet>*)o)->hasProductCache)());
  else   (((const ::edm::FwdPtr<reco::PFClusterJet>*)o)->hasProductCache)();
}

static  void method_21924( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::FwdPtr<reco::PFClusterJet>*)o)->refCore)();
  else   (((const ::edm::FwdPtr<reco::PFClusterJet>*)o)->refCore)();
}

static  void method_21925( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::FwdPtr<reco::PFClusterJet>*)o)->product)());
  else   (((const ::edm::FwdPtr<reco::PFClusterJet>*)o)->product)();
}

static  void method_21926( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::FwdPtr<reco::PFClusterJet>*)o)->ptr)();
  else   (((const ::edm::FwdPtr<reco::PFClusterJet>*)o)->ptr)();
}

static  void method_21927( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::FwdPtr<reco::PFClusterJet>*)o)->backPtr)();
  else   (((const ::edm::FwdPtr<reco::PFClusterJet>*)o)->backPtr)();
}

static  void method_21928( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (short)((((::edm::FwdPtr<reco::PFClusterJet>*)o)->Class_Version)());
  else   (((::edm::FwdPtr<reco::PFClusterJet>*)o)->Class_Version)();
}

static void method_newdel_4584( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::FwdPtr<reco::PFClusterJet> >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::FwdPtr<reco::PFClusterJet> >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::FwdPtr<reco::PFClusterJet> >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::FwdPtr<reco::PFClusterJet> >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::FwdPtr<reco::PFClusterJet> >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class FwdPtr<reco::PFClusterJet> -------------------------------
void __edm__FwdPtr_reco__PFClusterJet__db_datamem(Reflex::Class*);
void __edm__FwdPtr_reco__PFClusterJet__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__FwdPtr_reco__PFClusterJet__datamem_bld(&__edm__FwdPtr_reco__PFClusterJet__db_datamem);
Reflex::GenreflexMemberBuilder __edm__FwdPtr_reco__PFClusterJet__funcmem_bld(&__edm__FwdPtr_reco__PFClusterJet__db_funcmem);
void __edm__FwdPtr_reco__PFClusterJet__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::FwdPtr<reco::PFClusterJet>"), typeid(::edm::FwdPtr<reco::PFClusterJet>), sizeof(::edm::FwdPtr<reco::PFClusterJet>), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("ClassVersion"), ::edm::FwdPtr<reco::PFClusterJet>::Class_Version())
  .AddTypedef(type_362, Reflex::Literal("edm::FwdPtr<reco::PFClusterJet>::key_type"))
  .AddTypedef(type_7932, Reflex::Literal("edm::FwdPtr<reco::PFClusterJet>::value_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13647, type_13649), Reflex::Literal("operator="), operator_21908, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_13649), Reflex::Literal("FwdPtr"), constructor_21909, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("FwdPtr"), constructor_21910, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~FwdPtr"), destructor_21911, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_4584, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__FwdPtr_reco__PFClusterJet__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__FwdPtr_reco__PFClusterJet__funcmem_bld);
}

//------Delayed data member builder for class FwdPtr<reco::PFClusterJet> -------------------
void __edm__FwdPtr_reco__PFClusterJet__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_4899, Reflex::Literal("ptr_"), OffsetOf(__shadow__::__edm__FwdPtr_reco__PFClusterJet_, ptr_), ::Reflex::PRIVATE)
  .AddDataMember(type_4899, Reflex::Literal("backPtr_"), OffsetOf(__shadow__::__edm__FwdPtr_reco__PFClusterJet_, backPtr_), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class FwdPtr<reco::PFClusterJet> -------------------
void __edm__FwdPtr_reco__PFClusterJet__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13779), Reflex::Literal("operator*"), operator_21912, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13775), Reflex::Literal("operator->"), operator_21913, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13775), Reflex::Literal("get"), method_21914, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("isNull"), method_21915, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("isNonnull"), method_21916, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("operator!"), operator_21917, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("isAvailable"), method_21918, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("isTransient"), method_21919, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4974), Reflex::Literal("id"), method_21920, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_20128), Reflex::Literal("productGetter"), method_21921, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_362), Reflex::Literal("key"), method_21922, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("hasProductCache"), method_21923, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_23020), Reflex::Literal("refCore"), method_21924, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4040), Reflex::Literal("product"), method_21925, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_36999), Reflex::Literal("ptr"), method_21926, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_36999), Reflex::Literal("backPtr"), method_21927, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_89), Reflex::Literal("Class_Version"), method_21928, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC);
}
//------Stub functions for class FwdPtr<reco::TrackJet> -------------------------------
static  void operator_21933( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::FwdPtr<reco::TrackJet>*)o)->operator=)(*(const ::edm::FwdPtr<reco::TrackJet>*)arg[0]);
  else   (((::edm::FwdPtr<reco::TrackJet>*)o)->operator=)(*(const ::edm::FwdPtr<reco::TrackJet>*)arg[0]);
}

static void constructor_21934( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::FwdPtr<reco::TrackJet>(*(const ::edm::FwdPtr<reco::TrackJet>*)arg[0]);
  else ::new(mem) ::edm::FwdPtr<reco::TrackJet>(*(const ::edm::FwdPtr<reco::TrackJet>*)arg[0]);
}

static void constructor_21935( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::FwdPtr<reco::TrackJet>();
  else ::new(mem) ::edm::FwdPtr<reco::TrackJet>();
}

static void destructor_21936(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::FwdPtr<reco::TrackJet>*)o)->::edm::FwdPtr<reco::TrackJet>::~FwdPtr)();
}
static  void operator_21937( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::FwdPtr<reco::TrackJet>*)o)->operator*)();
  else   (((const ::edm::FwdPtr<reco::TrackJet>*)o)->operator*)();
}

static  void operator_21938( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::FwdPtr<reco::TrackJet>*)o)->operator->)());
  else   (((const ::edm::FwdPtr<reco::TrackJet>*)o)->operator->)();
}

static  void method_21939( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::FwdPtr<reco::TrackJet>*)o)->get)());
  else   (((const ::edm::FwdPtr<reco::TrackJet>*)o)->get)();
}

static  void method_21940( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::FwdPtr<reco::TrackJet>*)o)->isNull)());
  else   (((const ::edm::FwdPtr<reco::TrackJet>*)o)->isNull)();
}

static  void method_21941( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::FwdPtr<reco::TrackJet>*)o)->isNonnull)());
  else   (((const ::edm::FwdPtr<reco::TrackJet>*)o)->isNonnull)();
}

static  void operator_21942( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::FwdPtr<reco::TrackJet>*)o)->operator!)());
  else   (((const ::edm::FwdPtr<reco::TrackJet>*)o)->operator!)();
}

static  void method_21943( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::FwdPtr<reco::TrackJet>*)o)->isAvailable)());
  else   (((const ::edm::FwdPtr<reco::TrackJet>*)o)->isAvailable)();
}

static  void method_21944( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::FwdPtr<reco::TrackJet>*)o)->isTransient)());
  else   (((const ::edm::FwdPtr<reco::TrackJet>*)o)->isTransient)();
}

static  void method_21945( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::ProductID)((((const ::edm::FwdPtr<reco::TrackJet>*)o)->id)());
  else   (((const ::edm::FwdPtr<reco::TrackJet>*)o)->id)();
}

static  void method_21946( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::FwdPtr<reco::TrackJet>*)o)->productGetter)());
  else   (((const ::edm::FwdPtr<reco::TrackJet>*)o)->productGetter)();
}

static  void method_21947( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (unsigned long)((((const ::edm::FwdPtr<reco::TrackJet>*)o)->key)());
  else   (((const ::edm::FwdPtr<reco::TrackJet>*)o)->key)();
}

static  void method_21948( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::FwdPtr<reco::TrackJet>*)o)->hasProductCache)());
  else   (((const ::edm::FwdPtr<reco::TrackJet>*)o)->hasProductCache)();
}

static  void method_21949( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::FwdPtr<reco::TrackJet>*)o)->refCore)();
  else   (((const ::edm::FwdPtr<reco::TrackJet>*)o)->refCore)();
}

static  void method_21950( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::FwdPtr<reco::TrackJet>*)o)->product)());
  else   (((const ::edm::FwdPtr<reco::TrackJet>*)o)->product)();
}

static  void method_21951( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::FwdPtr<reco::TrackJet>*)o)->ptr)();
  else   (((const ::edm::FwdPtr<reco::TrackJet>*)o)->ptr)();
}

static  void method_21952( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::FwdPtr<reco::TrackJet>*)o)->backPtr)();
  else   (((const ::edm::FwdPtr<reco::TrackJet>*)o)->backPtr)();
}

static  void method_21953( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (short)((((::edm::FwdPtr<reco::TrackJet>*)o)->Class_Version)());
  else   (((::edm::FwdPtr<reco::TrackJet>*)o)->Class_Version)();
}

static void method_newdel_4585( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::FwdPtr<reco::TrackJet> >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::FwdPtr<reco::TrackJet> >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::FwdPtr<reco::TrackJet> >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::FwdPtr<reco::TrackJet> >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::FwdPtr<reco::TrackJet> >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class FwdPtr<reco::TrackJet> -------------------------------
void __edm__FwdPtr_reco__TrackJet__db_datamem(Reflex::Class*);
void __edm__FwdPtr_reco__TrackJet__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__FwdPtr_reco__TrackJet__datamem_bld(&__edm__FwdPtr_reco__TrackJet__db_datamem);
Reflex::GenreflexMemberBuilder __edm__FwdPtr_reco__TrackJet__funcmem_bld(&__edm__FwdPtr_reco__TrackJet__db_funcmem);
void __edm__FwdPtr_reco__TrackJet__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::FwdPtr<reco::TrackJet>"), typeid(::edm::FwdPtr<reco::TrackJet>), sizeof(::edm::FwdPtr<reco::TrackJet>), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("ClassVersion"), ::edm::FwdPtr<reco::TrackJet>::Class_Version())
  .AddTypedef(type_362, Reflex::Literal("edm::FwdPtr<reco::TrackJet>::key_type"))
  .AddTypedef(type_7775, Reflex::Literal("edm::FwdPtr<reco::TrackJet>::value_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13907, type_13909), Reflex::Literal("operator="), operator_21933, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_13909), Reflex::Literal("FwdPtr"), constructor_21934, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("FwdPtr"), constructor_21935, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~FwdPtr"), destructor_21936, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_4585, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__FwdPtr_reco__TrackJet__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__FwdPtr_reco__TrackJet__funcmem_bld);
}

//------Delayed data member builder for class FwdPtr<reco::TrackJet> -------------------
void __edm__FwdPtr_reco__TrackJet__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_4900, Reflex::Literal("ptr_"), OffsetOf(__shadow__::__edm__FwdPtr_reco__TrackJet_, ptr_), ::Reflex::PRIVATE)
  .AddDataMember(type_4900, Reflex::Literal("backPtr_"), OffsetOf(__shadow__::__edm__FwdPtr_reco__TrackJet_, backPtr_), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class FwdPtr<reco::TrackJet> -------------------
void __edm__FwdPtr_reco__TrackJet__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_14039), Reflex::Literal("operator*"), operator_21937, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_14035), Reflex::Literal("operator->"), operator_21938, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_14035), Reflex::Literal("get"), method_21939, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("isNull"), method_21940, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("isNonnull"), method_21941, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("operator!"), operator_21942, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("isAvailable"), method_21943, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("isTransient"), method_21944, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4974), Reflex::Literal("id"), method_21945, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_20128), Reflex::Literal("productGetter"), method_21946, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_362), Reflex::Literal("key"), method_21947, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("hasProductCache"), method_21948, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_23020), Reflex::Literal("refCore"), method_21949, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4040), Reflex::Literal("product"), method_21950, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_37000), Reflex::Literal("ptr"), method_21951, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_37000), Reflex::Literal("backPtr"), method_21952, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_89), Reflex::Literal("Class_Version"), method_21953, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC);
}
//------Stub functions for class RefVector<std::vector<reco::PFClusterJet, std::allocator<reco::PFClusterJet> >,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet, std::allocator<reco::PFClusterJet> >, reco::PFClusterJet> > -------------------------------
static void destructor_22135(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::RefVector<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)o)->::edm::RefVector<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >::~RefVector)();
}
static void constructor_22136( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefVector<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >();
  else ::new(mem) ::edm::RefVector<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >();
}

static void constructor_22137( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefVector<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >(*(const ::edm::RefVector<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)arg[0]);
  else ::new(mem) ::edm::RefVector<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >(*(const ::edm::RefVector<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)arg[0]);
}

static void constructor_22138( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefVector<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >(*(const ::edm::ProductID*)arg[0]);
  else ::new(mem) ::edm::RefVector<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >(*(const ::edm::ProductID*)arg[0]);
}

static  void method_22139( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::edm::RefVector<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)o)->push_back)(*(const ::edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)arg[0]);
}

static  void operator_22140( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >)((((const ::edm::RefVector<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)o)->operator[])(*(::std::size_t*)arg[0]));
  else   (((const ::edm::RefVector<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)o)->operator[])(*(::std::size_t*)arg[0]);
}

static  void method_22141( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >)((((const ::edm::RefVector<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)o)->at)(*(::std::size_t*)arg[0]));
  else   (((const ::edm::RefVector<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)o)->at)(*(::std::size_t*)arg[0]);
}

static  void method_22142( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::RefVector<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)o)->refVector)();
  else   (((const ::edm::RefVector<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)o)->refVector)();
}

static  void method_22143( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefVector<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)o)->empty)());
  else   (((const ::edm::RefVector<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)o)->empty)();
}

static  void method_22144( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::edm::RefVector<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)o)->size)());
  else   (((const ::edm::RefVector<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)o)->size)();
}

static  void method_22145( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::edm::RefVector<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)o)->capacity)());
  else   (((const ::edm::RefVector<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)o)->capacity)();
}

static  void method_22146( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::edm::RefVector<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)o)->reserve)(*(::std::size_t*)arg[0]);
}

static  void method_22147( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::RefVectorIterator<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >)((((const ::edm::RefVector<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)o)->begin)());
  else   (((const ::edm::RefVector<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)o)->begin)();
}

static  void method_22148( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::RefVectorIterator<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >)((((const ::edm::RefVector<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)o)->end)());
  else   (((const ::edm::RefVector<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)o)->end)();
}

static  void method_22149( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::ProductID)((((const ::edm::RefVector<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)o)->id)());
  else   (((const ::edm::RefVector<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)o)->id)();
}

static  void method_22150( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::RefVector<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)o)->productGetter)());
  else   (((const ::edm::RefVector<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)o)->productGetter)();
}

static  void method_22151( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefVector<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)o)->isNull)());
  else   (((const ::edm::RefVector<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)o)->isNull)();
}

static  void method_22152( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefVector<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)o)->isNonnull)());
  else   (((const ::edm::RefVector<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)o)->isNonnull)();
}

static  void operator_22153( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefVector<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)o)->operator!)());
  else   (((const ::edm::RefVector<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)o)->operator!)();
}

static  void method_22154( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::RefVector<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)o)->product)());
  else   (((const ::edm::RefVector<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)o)->product)();
}

static  void method_22155( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefVector<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)o)->isAvailable)());
  else   (((const ::edm::RefVector<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)o)->isAvailable)();
}

static  void method_22156( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefVector<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)o)->isTransient)());
  else   (((const ::edm::RefVector<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)o)->isTransient)();
}

static  void method_22157( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (edm::RefVectorIterator<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >)((((::edm::RefVector<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)o)->erase)(*(const ::edm::RefVectorIterator<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)arg[0]));
  else   (((::edm::RefVector<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)o)->erase)(*(const ::edm::RefVectorIterator<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)arg[0]);
}

static  void method_22158( void*, void* o, const std::vector<void*>&, void*)
{
  (((::edm::RefVector<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)o)->clear)();
}

static  void method_22159( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::edm::RefVector<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)o)->swap)(*(::edm::RefVector<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)arg[0]);
}

static  void operator_22160( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::RefVector<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)o)->operator=)(*(const ::edm::RefVector<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)arg[0]);
  else   (((::edm::RefVector<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)o)->operator=)(*(const ::edm::RefVector<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)arg[0]);
}

static  void method_22161( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefVector<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)o)->hasProductCache)());
  else   (((const ::edm::RefVector<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)o)->hasProductCache)();
}

static  void method_22162( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::RefVector<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)o)->fillView)(*(const ::edm::ProductID*)arg[0],
    *(::std::vector<const void*>*)arg[1],
    *(::edm::helper_vector*)arg[2]);
}

static  void method_22163( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (short)((((::edm::RefVector<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)o)->Class_Version)());
  else   (((::edm::RefVector<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)o)->Class_Version)();
}

static void method_newdel_4629( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::RefVector<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::RefVector<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::RefVector<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::RefVector<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::RefVector<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class RefVector<std::vector<reco::PFClusterJet, std::allocator<reco::PFClusterJet> >,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet, std::allocator<reco::PFClusterJet> >, reco::PFClusterJet> > -------------------------------
void __edm__RefVector_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s__db_datamem(Reflex::Class*);
void __edm__RefVector_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__RefVector_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s__datamem_bld(&__edm__RefVector_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__RefVector_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s__funcmem_bld(&__edm__RefVector_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s__db_funcmem);
void __edm__RefVector_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::RefVector<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >"), typeid(::edm::RefVector<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >), sizeof(::edm::RefVector<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("ClassVersion"), ::edm::RefVector<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >::Class_Version())
  .AddTypedef(type_2962, Reflex::Literal("edm::RefVector<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >::collection_type"))
  .AddTypedef(type_7932, Reflex::Literal("edm::RefVector<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >::member_type"))
  .AddTypedef(type_20347, Reflex::Literal("edm::RefVector<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >::finder_type"))
  .AddTypedef(type_4554, Reflex::Literal("edm::RefVector<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >::iterator"))
  .AddTypedef(type_4554, Reflex::Literal("edm::RefVector<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >::const_iterator"))
  .AddTypedef(type_4921, Reflex::Literal("edm::RefVector<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >::value_type"))
  .AddTypedef(type_4921c, Reflex::Literal("edm::RefVector<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >::const_reference"))
  .AddTypedef(type_4921c, Reflex::Literal("edm::RefVector<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >::reference"))
  .AddTypedef(type_219, Reflex::Literal("edm::RefVector<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >::key_type"))
  .AddTypedef(type_2951, Reflex::Literal("edm::RefVector<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >::KeyVec"))
  .AddTypedef(type_3234, Reflex::Literal("edm::RefVector<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >::size_type"))
  .AddTypedef(type_4004, Reflex::Literal("edm::RefVector<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >::contents_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~RefVector"), destructor_22135, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::DESTRUCTOR )
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("RefVector"), constructor_22136, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_37022), Reflex::Literal("RefVector"), constructor_22137, 0, "rh", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_20008), Reflex::Literal("RefVector"), constructor_22138, 0, "iId", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_4629, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__RefVector_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__RefVector_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s__funcmem_bld);
}

//------Delayed data member builder for class RefVector<std::vector<reco::PFClusterJet, std::allocator<reco::PFClusterJet> >,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet, std::allocator<reco::PFClusterJet> >, reco::PFClusterJet> > -------------------
void __edm__RefVector_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_4004, Reflex::Literal("refVector_"), OffsetOf(__shadow__::__edm__RefVector_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s_, refVector_), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class RefVector<std::vector<reco::PFClusterJet, std::allocator<reco::PFClusterJet> >,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet, std::allocator<reco::PFClusterJet> >, reco::PFClusterJet> > -------------------
void __edm__RefVector_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_36619), Reflex::Literal("push_back"), method_22139, 0, "ref", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4921c, type_3234), Reflex::Literal("operator[]"), operator_22140, 0, "idx", ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4921c, type_3234), Reflex::Literal("at"), method_22141, 0, "idx", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_20127), Reflex::Literal("refVector"), method_22142, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("empty"), method_22143, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3234), Reflex::Literal("size"), method_22144, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3234), Reflex::Literal("capacity"), method_22145, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_3234), Reflex::Literal("reserve"), method_22146, 0, "n", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4554), Reflex::Literal("begin"), method_22147, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4554), Reflex::Literal("end"), method_22148, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4974), Reflex::Literal("id"), method_22149, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_20128), Reflex::Literal("productGetter"), method_22150, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("isNull"), method_22151, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("isNonnull"), method_22152, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("operator!"), operator_22153, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_37023), Reflex::Literal("product"), method_22154, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("isAvailable"), method_22155, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("isTransient"), method_22156, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4554, type_37024), Reflex::Literal("erase"), method_22157, 0, "pos", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698), Reflex::Literal("clear"), method_22158, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_37025), Reflex::Literal("swap"), method_22159, 0, "other", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_37025, type_37022), Reflex::Literal("operator="), operator_22160, 0, "rhs", ::Reflex::PUBLIC | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("hasProductCache"), method_22161, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_20008, type_20132, type_20133), Reflex::Literal("fillView"), method_22162, 0, ";pointers;helpers", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_89), Reflex::Literal("Class_Version"), method_22163, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC);
}
//------Stub functions for class RefVector<std::vector<reco::TrackJet, std::allocator<reco::TrackJet> >,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet, std::allocator<reco::TrackJet> >, reco::TrackJet> > -------------------------------
static void destructor_22219(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::RefVector<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)o)->::edm::RefVector<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >::~RefVector)();
}
static void constructor_22220( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefVector<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >();
  else ::new(mem) ::edm::RefVector<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >();
}

static void constructor_22221( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefVector<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >(*(const ::edm::RefVector<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)arg[0]);
  else ::new(mem) ::edm::RefVector<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >(*(const ::edm::RefVector<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)arg[0]);
}

static void constructor_22222( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefVector<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >(*(const ::edm::ProductID*)arg[0]);
  else ::new(mem) ::edm::RefVector<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >(*(const ::edm::ProductID*)arg[0]);
}

static  void method_22223( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::edm::RefVector<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)o)->push_back)(*(const ::edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)arg[0]);
}

static  void operator_22224( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >)((((const ::edm::RefVector<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)o)->operator[])(*(::std::size_t*)arg[0]));
  else   (((const ::edm::RefVector<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)o)->operator[])(*(::std::size_t*)arg[0]);
}

static  void method_22225( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >)((((const ::edm::RefVector<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)o)->at)(*(::std::size_t*)arg[0]));
  else   (((const ::edm::RefVector<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)o)->at)(*(::std::size_t*)arg[0]);
}

static  void method_22226( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::RefVector<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)o)->refVector)();
  else   (((const ::edm::RefVector<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)o)->refVector)();
}

static  void method_22227( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefVector<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)o)->empty)());
  else   (((const ::edm::RefVector<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)o)->empty)();
}

static  void method_22228( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::edm::RefVector<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)o)->size)());
  else   (((const ::edm::RefVector<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)o)->size)();
}

static  void method_22229( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::edm::RefVector<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)o)->capacity)());
  else   (((const ::edm::RefVector<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)o)->capacity)();
}

static  void method_22230( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::edm::RefVector<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)o)->reserve)(*(::std::size_t*)arg[0]);
}

static  void method_22231( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::RefVectorIterator<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >)((((const ::edm::RefVector<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)o)->begin)());
  else   (((const ::edm::RefVector<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)o)->begin)();
}

static  void method_22232( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::RefVectorIterator<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >)((((const ::edm::RefVector<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)o)->end)());
  else   (((const ::edm::RefVector<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)o)->end)();
}

static  void method_22233( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::ProductID)((((const ::edm::RefVector<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)o)->id)());
  else   (((const ::edm::RefVector<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)o)->id)();
}

static  void method_22234( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::RefVector<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)o)->productGetter)());
  else   (((const ::edm::RefVector<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)o)->productGetter)();
}

static  void method_22235( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefVector<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)o)->isNull)());
  else   (((const ::edm::RefVector<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)o)->isNull)();
}

static  void method_22236( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefVector<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)o)->isNonnull)());
  else   (((const ::edm::RefVector<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)o)->isNonnull)();
}

static  void operator_22237( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefVector<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)o)->operator!)());
  else   (((const ::edm::RefVector<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)o)->operator!)();
}

static  void method_22238( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::RefVector<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)o)->product)());
  else   (((const ::edm::RefVector<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)o)->product)();
}

static  void method_22239( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefVector<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)o)->isAvailable)());
  else   (((const ::edm::RefVector<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)o)->isAvailable)();
}

static  void method_22240( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefVector<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)o)->isTransient)());
  else   (((const ::edm::RefVector<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)o)->isTransient)();
}

static  void method_22241( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (edm::RefVectorIterator<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >)((((::edm::RefVector<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)o)->erase)(*(const ::edm::RefVectorIterator<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)arg[0]));
  else   (((::edm::RefVector<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)o)->erase)(*(const ::edm::RefVectorIterator<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)arg[0]);
}

static  void method_22242( void*, void* o, const std::vector<void*>&, void*)
{
  (((::edm::RefVector<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)o)->clear)();
}

static  void method_22243( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::edm::RefVector<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)o)->swap)(*(::edm::RefVector<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)arg[0]);
}

static  void operator_22244( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::RefVector<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)o)->operator=)(*(const ::edm::RefVector<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)arg[0]);
  else   (((::edm::RefVector<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)o)->operator=)(*(const ::edm::RefVector<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)arg[0]);
}

static  void method_22245( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefVector<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)o)->hasProductCache)());
  else   (((const ::edm::RefVector<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)o)->hasProductCache)();
}

static  void method_22246( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::RefVector<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)o)->fillView)(*(const ::edm::ProductID*)arg[0],
    *(::std::vector<const void*>*)arg[1],
    *(::edm::helper_vector*)arg[2]);
}

static  void method_22247( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (short)((((::edm::RefVector<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)o)->Class_Version)());
  else   (((::edm::RefVector<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)o)->Class_Version)();
}

static void method_newdel_4639( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::RefVector<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::RefVector<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::RefVector<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::RefVector<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::RefVector<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class RefVector<std::vector<reco::TrackJet, std::allocator<reco::TrackJet> >,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet, std::allocator<reco::TrackJet> >, reco::TrackJet> > -------------------------------
void __edm__RefVector_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s__db_datamem(Reflex::Class*);
void __edm__RefVector_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__RefVector_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s__datamem_bld(&__edm__RefVector_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__RefVector_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s__funcmem_bld(&__edm__RefVector_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s__db_funcmem);
void __edm__RefVector_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::RefVector<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >"), typeid(::edm::RefVector<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >), sizeof(::edm::RefVector<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("ClassVersion"), ::edm::RefVector<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >::Class_Version())
  .AddTypedef(type_2970, Reflex::Literal("edm::RefVector<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >::collection_type"))
  .AddTypedef(type_7775, Reflex::Literal("edm::RefVector<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >::member_type"))
  .AddTypedef(type_20371, Reflex::Literal("edm::RefVector<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >::finder_type"))
  .AddTypedef(type_4556, Reflex::Literal("edm::RefVector<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >::iterator"))
  .AddTypedef(type_4556, Reflex::Literal("edm::RefVector<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >::const_iterator"))
  .AddTypedef(type_4924, Reflex::Literal("edm::RefVector<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >::value_type"))
  .AddTypedef(type_4924c, Reflex::Literal("edm::RefVector<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >::const_reference"))
  .AddTypedef(type_4924c, Reflex::Literal("edm::RefVector<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >::reference"))
  .AddTypedef(type_219, Reflex::Literal("edm::RefVector<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >::key_type"))
  .AddTypedef(type_2951, Reflex::Literal("edm::RefVector<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >::KeyVec"))
  .AddTypedef(type_3234, Reflex::Literal("edm::RefVector<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >::size_type"))
  .AddTypedef(type_4004, Reflex::Literal("edm::RefVector<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >::contents_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~RefVector"), destructor_22219, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::DESTRUCTOR )
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("RefVector"), constructor_22220, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_37032), Reflex::Literal("RefVector"), constructor_22221, 0, "rh", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_20008), Reflex::Literal("RefVector"), constructor_22222, 0, "iId", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_4639, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__RefVector_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__RefVector_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s__funcmem_bld);
}

//------Delayed data member builder for class RefVector<std::vector<reco::TrackJet, std::allocator<reco::TrackJet> >,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet, std::allocator<reco::TrackJet> >, reco::TrackJet> > -------------------
void __edm__RefVector_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_4004, Reflex::Literal("refVector_"), OffsetOf(__shadow__::__edm__RefVector_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s_, refVector_), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class RefVector<std::vector<reco::TrackJet, std::allocator<reco::TrackJet> >,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet, std::allocator<reco::TrackJet> >, reco::TrackJet> > -------------------
void __edm__RefVector_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_36647), Reflex::Literal("push_back"), method_22223, 0, "ref", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4924c, type_3234), Reflex::Literal("operator[]"), operator_22224, 0, "idx", ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4924c, type_3234), Reflex::Literal("at"), method_22225, 0, "idx", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_20127), Reflex::Literal("refVector"), method_22226, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("empty"), method_22227, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3234), Reflex::Literal("size"), method_22228, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3234), Reflex::Literal("capacity"), method_22229, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_3234), Reflex::Literal("reserve"), method_22230, 0, "n", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4556), Reflex::Literal("begin"), method_22231, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4556), Reflex::Literal("end"), method_22232, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4974), Reflex::Literal("id"), method_22233, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_20128), Reflex::Literal("productGetter"), method_22234, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("isNull"), method_22235, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("isNonnull"), method_22236, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("operator!"), operator_22237, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_37033), Reflex::Literal("product"), method_22238, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("isAvailable"), method_22239, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("isTransient"), method_22240, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4556, type_37034), Reflex::Literal("erase"), method_22241, 0, "pos", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698), Reflex::Literal("clear"), method_22242, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_37035), Reflex::Literal("swap"), method_22243, 0, "other", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_37035, type_37032), Reflex::Literal("operator="), operator_22244, 0, "rhs", ::Reflex::PUBLIC | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("hasProductCache"), method_22245, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_20008, type_20132, type_20133), Reflex::Literal("fillView"), method_22246, 0, ";pointers;helpers", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_89), Reflex::Literal("Class_Version"), method_22247, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC);
}
//------Stub functions for class RefToBaseVector<reco::Jet> -------------------------------
static void constructor_22997( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefToBaseVector<reco::Jet>();
  else ::new(mem) ::edm::RefToBaseVector<reco::Jet>();
}

static void constructor_22998( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefToBaseVector<reco::Jet>(*(const ::edm::RefToBaseVector<reco::Jet>*)arg[0]);
  else ::new(mem) ::edm::RefToBaseVector<reco::Jet>(*(const ::edm::RefToBaseVector<reco::Jet>*)arg[0]);
}

static void constructor_22999( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefToBaseVector<reco::Jet>(*(::boost::shared_ptr<edm::reftobase::RefVectorHolderBase>*)arg[0]);
  else ::new(mem) ::edm::RefToBaseVector<reco::Jet>(*(::boost::shared_ptr<edm::reftobase::RefVectorHolderBase>*)arg[0]);
}

static  void operator_23000( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::RefToBaseVector<reco::Jet>*)o)->operator=)(*(const ::edm::RefToBaseVector<reco::Jet>*)arg[0]);
  else   (((::edm::RefToBaseVector<reco::Jet>*)o)->operator=)(*(const ::edm::RefToBaseVector<reco::Jet>*)arg[0]);
}

static  void method_23001( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::edm::RefToBaseVector<reco::Jet>*)o)->swap)(*(::edm::RefToBaseVector<reco::Jet>*)arg[0]);
}

static void destructor_23002(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::RefToBaseVector<reco::Jet>*)o)->::edm::RefToBaseVector<reco::Jet>::~RefToBaseVector)();
}
static  void method_23003( void*, void* o, const std::vector<void*>&, void*)
{
  (((::edm::RefToBaseVector<reco::Jet>*)o)->clear)();
}

static  void method_23004( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (edm::RefToBase<reco::Jet>)((((const ::edm::RefToBaseVector<reco::Jet>*)o)->at)(*(::size_t*)arg[0]));
  else   (((const ::edm::RefToBaseVector<reco::Jet>*)o)->at)(*(::size_t*)arg[0]);
}

static  void operator_23005( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (edm::RefToBase<reco::Jet>)((((const ::edm::RefToBaseVector<reco::Jet>*)o)->operator[])(*(::size_t*)arg[0]));
  else   (((const ::edm::RefToBaseVector<reco::Jet>*)o)->operator[])(*(::size_t*)arg[0]);
}

static  void method_23006( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefToBaseVector<reco::Jet>*)o)->isValid)());
  else   (((const ::edm::RefToBaseVector<reco::Jet>*)o)->isValid)();
}

static  void method_23007( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefToBaseVector<reco::Jet>*)o)->isInvalid)());
  else   (((const ::edm::RefToBaseVector<reco::Jet>*)o)->isInvalid)();
}

static  void method_23008( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefToBaseVector<reco::Jet>*)o)->empty)());
  else   (((const ::edm::RefToBaseVector<reco::Jet>*)o)->empty)();
}

static  void method_23009( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (size_t)((((const ::edm::RefToBaseVector<reco::Jet>*)o)->size)());
  else   (((const ::edm::RefToBaseVector<reco::Jet>*)o)->size)();
}

static  void method_23010( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::ProductID)((((const ::edm::RefToBaseVector<reco::Jet>*)o)->id)());
  else   (((const ::edm::RefToBaseVector<reco::Jet>*)o)->id)();
}

static  void method_23011( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::RefToBaseVector<reco::Jet>*)o)->productGetter)());
  else   (((const ::edm::RefToBaseVector<reco::Jet>*)o)->productGetter)();
}

static  void method_23012( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::reftobase::BaseVectorHolder<reco::Jet>::const_iterator)((((const ::edm::RefToBaseVector<reco::Jet>*)o)->begin)());
  else   (((const ::edm::RefToBaseVector<reco::Jet>*)o)->begin)();
}

static  void method_23013( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::reftobase::BaseVectorHolder<reco::Jet>::const_iterator)((((const ::edm::RefToBaseVector<reco::Jet>*)o)->end)());
  else   (((const ::edm::RefToBaseVector<reco::Jet>*)o)->end)();
}

static  void method_23014( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::edm::RefToBaseVector<reco::Jet>*)o)->push_back)(*(const ::edm::RefToBase<reco::Jet>*)arg[0]);
}

static  void method_23015( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::RefToBaseVector<reco::Jet>*)o)->fillView)(*(::std::vector<const void*>*)arg[0]);
}

static  void method_23016( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::auto_ptr<edm::reftobase::RefVectorHolderBase>)((((const ::edm::RefToBaseVector<reco::Jet>*)o)->vectorHolder)());
  else   (((const ::edm::RefToBaseVector<reco::Jet>*)o)->vectorHolder)();
}

static  void method_23017( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::RefToBaseVector<reco::Jet>*)o)->product)());
  else   (((const ::edm::RefToBaseVector<reco::Jet>*)o)->product)();
}

static  void method_23018( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefToBaseVector<reco::Jet>*)o)->isAvailable)());
  else   (((const ::edm::RefToBaseVector<reco::Jet>*)o)->isAvailable)();
}

static  void method_23019( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (short)((((::edm::RefToBaseVector<reco::Jet>*)o)->Class_Version)());
  else   (((::edm::RefToBaseVector<reco::Jet>*)o)->Class_Version)();
}

static void method_newdel_4736( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::RefToBaseVector<reco::Jet> >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::RefToBaseVector<reco::Jet> >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::RefToBaseVector<reco::Jet> >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::RefToBaseVector<reco::Jet> >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::RefToBaseVector<reco::Jet> >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class RefToBaseVector<reco::Jet> -------------------------------
void __edm__RefToBaseVector_reco__Jet__db_datamem(Reflex::Class*);
void __edm__RefToBaseVector_reco__Jet__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__RefToBaseVector_reco__Jet__datamem_bld(&__edm__RefToBaseVector_reco__Jet__db_datamem);
Reflex::GenreflexMemberBuilder __edm__RefToBaseVector_reco__Jet__funcmem_bld(&__edm__RefToBaseVector_reco__Jet__db_funcmem);
void __edm__RefToBaseVector_reco__Jet__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::RefToBaseVector<reco::Jet>"), typeid(::edm::RefToBaseVector<reco::Jet>), sizeof(::edm::RefToBaseVector<reco::Jet>), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("ClassVersion"), ::edm::RefToBaseVector<reco::Jet>::Class_Version())
  .AddTypedef(type_4891, Reflex::Literal("edm::RefToBaseVector<reco::Jet>::value_type"))
  .AddTypedef(type_7762, Reflex::Literal("edm::RefToBaseVector<reco::Jet>::member_type"))
  .AddTypedef(type_22952, Reflex::Literal("edm::RefToBaseVector<reco::Jet>::holder_type"))
  .AddTypedef(type_2125, Reflex::Literal("edm::RefToBaseVector<reco::Jet>::size_type"))
  .AddTypedef(type_22995, Reflex::Literal("edm::RefToBaseVector<reco::Jet>::const_iterator"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("RefToBaseVector"), constructor_22997, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_37618), Reflex::Literal("RefToBaseVector"), constructor_22998, 0, "iOther", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_4377), Reflex::Literal("RefToBaseVector"), constructor_22999, 0, "p", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~RefToBaseVector"), destructor_23002, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_4736, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__RefToBaseVector_reco__Jet__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__RefToBaseVector_reco__Jet__funcmem_bld);
}

//------Delayed data member builder for class RefToBaseVector<reco::Jet> -------------------
void __edm__RefToBaseVector_reco__Jet__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_37617, Reflex::Literal("holder_"), OffsetOf(__shadow__::__edm__RefToBaseVector_reco__Jet_, holder_), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class RefToBaseVector<reco::Jet> -------------------
void __edm__RefToBaseVector_reco__Jet__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_37619, type_37618), Reflex::Literal("operator="), operator_23000, 0, "iRHS", ::Reflex::PUBLIC | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_37619), Reflex::Literal("swap"), method_23001, 0, "other", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698), Reflex::Literal("clear"), method_23003, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4891, type_2125), Reflex::Literal("at"), method_23004, 0, "idx", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4891, type_2125), Reflex::Literal("operator[]"), operator_23005, 0, "idx", ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("isValid"), method_23006, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("isInvalid"), method_23007, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("empty"), method_23008, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2125), Reflex::Literal("size"), method_23009, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4974), Reflex::Literal("id"), method_23010, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_20128), Reflex::Literal("productGetter"), method_23011, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_22995), Reflex::Literal("begin"), method_23012, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_22995), Reflex::Literal("end"), method_23013, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_33732), Reflex::Literal("push_back"), method_23014, 0, "r", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_20132), Reflex::Literal("fillView"), method_23015, 0, "pointers", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2760), Reflex::Literal("vectorHolder"), method_23016, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4040), Reflex::Literal("product"), method_23017, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("isAvailable"), method_23018, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_89), Reflex::Literal("Class_Version"), method_23019, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC);
}
//------Stub functions for class Wrapper<edm::RefToBaseVector<reco::Jet> > -------------------------------
static void constructor_22420( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<edm::RefToBaseVector<reco::Jet> >();
  else ::new(mem) ::edm::Wrapper<edm::RefToBaseVector<reco::Jet> >();
}

static void constructor_22421( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<edm::RefToBaseVector<reco::Jet> >(*(::std::auto_ptr<edm::RefToBaseVector<reco::Jet> >*)arg[0]);
  else ::new(mem) ::edm::Wrapper<edm::RefToBaseVector<reco::Jet> >(*(::std::auto_ptr<edm::RefToBaseVector<reco::Jet> >*)arg[0]);
}

static void destructor_22422(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::Wrapper<edm::RefToBaseVector<reco::Jet> >*)o)->::edm::Wrapper<edm::RefToBaseVector<reco::Jet> >::~Wrapper)();
}
static  void method_22423( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Wrapper<edm::RefToBaseVector<reco::Jet> >*)o)->product)());
  else   (((const ::edm::Wrapper<edm::RefToBaseVector<reco::Jet> >*)o)->product)();
}

static  void operator_22424( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Wrapper<edm::RefToBaseVector<reco::Jet> >*)o)->operator->)());
  else   (((const ::edm::Wrapper<edm::RefToBaseVector<reco::Jet> >*)o)->operator->)();
}

static  void method_22425( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::Wrapper<edm::RefToBaseVector<reco::Jet> >*)o)->productTypeInfo)();
  else   (((::edm::Wrapper<edm::RefToBaseVector<reco::Jet> >*)o)->productTypeInfo)();
}

static  void method_22426( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::Wrapper<edm::RefToBaseVector<reco::Jet> >*)o)->typeInfo)();
  else   (((::edm::Wrapper<edm::RefToBaseVector<reco::Jet> >*)o)->typeInfo)();
}

static void constructor_22427( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<edm::RefToBaseVector<reco::Jet> >((::edm::RefToBaseVector<reco::Jet>*)arg[0]);
  else ::new(mem) ::edm::Wrapper<edm::RefToBaseVector<reco::Jet> >((::edm::RefToBaseVector<reco::Jet>*)arg[0]);
}

static  void method_22428( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((::edm::Wrapper<edm::RefToBaseVector<reco::Jet> >*)o)->getInterface)());
  else   (((::edm::Wrapper<edm::RefToBaseVector<reco::Jet> >*)o)->getInterface)();
}

static  void method_22429( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<edm::RefToBaseVector<reco::Jet> >*)o)->fillView)(*(const ::edm::ProductID*)arg[0],
    *(::std::vector<const void*>*)arg[1],
    *(::boost::shared_ptr<edm::reftobase::RefVectorHolderBase>*)arg[2]);
}

static  void method_22430( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<edm::RefToBaseVector<reco::Jet> >*)o)->setPtr)(*(const ::std::type_info*)arg[0],
    *(unsigned long*)arg[1],
    *(const void**)arg[2]);
}

static  void method_22431( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<edm::RefToBaseVector<reco::Jet> >*)o)->fillPtrVector)(*(const ::std::type_info*)arg[0],
    *(const ::std::vector<unsigned long>*)arg[1],
    *(::std::vector<const void*>*)arg[2]);
}

static  void method_22432( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Wrapper<edm::RefToBaseVector<reco::Jet> >*)o)->dynamicTypeInfo)();
  else   (((const ::edm::Wrapper<edm::RefToBaseVector<reco::Jet> >*)o)->dynamicTypeInfo)();
}

static  void method_22433( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Wrapper<edm::RefToBaseVector<reco::Jet> >*)o)->isPresent)());
  else   (((const ::edm::Wrapper<edm::RefToBaseVector<reco::Jet> >*)o)->isPresent)();
}

static  void method_22434( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Wrapper<edm::RefToBaseVector<reco::Jet> >*)o)->dynamicTypeInfo_)();
  else   (((const ::edm::Wrapper<edm::RefToBaseVector<reco::Jet> >*)o)->dynamicTypeInfo_)();
}

static void method_newdel_4682( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<edm::RefToBaseVector<reco::Jet> > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<edm::RefToBaseVector<reco::Jet> > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<edm::RefToBaseVector<reco::Jet> > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<edm::RefToBaseVector<reco::Jet> > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<edm::RefToBaseVector<reco::Jet> > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class Wrapper<edm::RefToBaseVector<reco::Jet> > -------------------------------
void __edm__Wrapper_edm__RefToBaseVector_reco__Jet_s__db_datamem(Reflex::Class*);
void __edm__Wrapper_edm__RefToBaseVector_reco__Jet_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__Wrapper_edm__RefToBaseVector_reco__Jet_s__datamem_bld(&__edm__Wrapper_edm__RefToBaseVector_reco__Jet_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__Wrapper_edm__RefToBaseVector_reco__Jet_s__funcmem_bld(&__edm__Wrapper_edm__RefToBaseVector_reco__Jet_s__db_funcmem);
void __edm__Wrapper_edm__RefToBaseVector_reco__Jet_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::Wrapper<edm::RefToBaseVector<reco::Jet> >"), typeid(::edm::Wrapper<edm::RefToBaseVector<reco::Jet> >), sizeof(::edm::Wrapper<edm::RefToBaseVector<reco::Jet> >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddTypedef(type_4736, Reflex::Literal("edm::Wrapper<edm::RefToBaseVector<reco::Jet> >::value_type"))
  .AddTypedef(type_4736, Reflex::Literal("edm::Wrapper<edm::RefToBaseVector<reco::Jet> >::wrapped_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("Wrapper"), constructor_22420, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_2759), Reflex::Literal("Wrapper"), constructor_22421, 0, "ptr", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~Wrapper"), destructor_22422, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_37061), Reflex::Literal("Wrapper"), constructor_22427, 0, "ptr", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_4682, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__Wrapper_edm__RefToBaseVector_reco__Jet_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__Wrapper_edm__RefToBaseVector_reco__Jet_s__funcmem_bld);
}

//------Delayed data member builder for class Wrapper<edm::RefToBaseVector<reco::Jet> > -------------------
void __edm__Wrapper_edm__RefToBaseVector_reco__Jet_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_1569, Reflex::Literal("present"), OffsetOf(__shadow__::__edm__Wrapper_edm__RefToBaseVector_reco__Jet_s_, present), ::Reflex::PRIVATE)
  .AddDataMember(type_4736, Reflex::Literal("obj"), OffsetOf(__shadow__::__edm__Wrapper_edm__RefToBaseVector_reco__Jet_s_, obj), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class Wrapper<edm::RefToBaseVector<reco::Jet> > -------------------
void __edm__Wrapper_edm__RefToBaseVector_reco__Jet_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_37060), Reflex::Literal("product"), method_22423, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_37060), Reflex::Literal("operator->"), operator_22424, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_20180), Reflex::Literal("productTypeInfo"), method_22425, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_20180), Reflex::Literal("typeInfo"), method_22426, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_37062), Reflex::Literal("getInterface"), method_22428, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_20008, type_20132, type_36516), Reflex::Literal("fillView"), method_22429, 0, "id;pointers;helpers", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_20180, type_362, type_11211), Reflex::Literal("setPtr"), method_22430, 0, "iToType;iIndex;oPtr", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_20180, type_24927, type_20132), Reflex::Literal("fillPtrVector"), method_22431, 0, "iToType;iIndices;oPtr", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_20180), Reflex::Literal("dynamicTypeInfo"), method_22432, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("isPresent"), method_22433, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_20180), Reflex::Literal("dynamicTypeInfo_"), method_22434, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST);
}
//------Stub functions for class ValueMap<StoredPileupJetIdentifier> -------------------------------
static void destructor_23375(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::ValueMap<StoredPileupJetIdentifier>*)o)->::edm::ValueMap<StoredPileupJetIdentifier>::~ValueMap)();
}
static void constructor_23376( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::ValueMap<StoredPileupJetIdentifier>(*(const ::edm::ValueMap<StoredPileupJetIdentifier>*)arg[0]);
  else ::new(mem) ::edm::ValueMap<StoredPileupJetIdentifier>(*(const ::edm::ValueMap<StoredPileupJetIdentifier>*)arg[0]);
}

static void constructor_23377( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::ValueMap<StoredPileupJetIdentifier>();
  else ::new(mem) ::edm::ValueMap<StoredPileupJetIdentifier>();
}

static  void method_23378( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::edm::ValueMap<StoredPileupJetIdentifier>*)o)->swap)(*(::edm::ValueMap<StoredPileupJetIdentifier>*)arg[0]);
}

static  void operator_23379( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::ValueMap<StoredPileupJetIdentifier>*)o)->operator=)(*(const ::edm::ValueMap<StoredPileupJetIdentifier>*)arg[0]);
  else   (((::edm::ValueMap<StoredPileupJetIdentifier>*)o)->operator=)(*(const ::edm::ValueMap<StoredPileupJetIdentifier>*)arg[0]);
}

static  void method_23380( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (size_t)((((const ::edm::ValueMap<StoredPileupJetIdentifier>*)o)->rawIndexOf)(*(::edm::ProductID*)arg[0],
    *(::size_t*)arg[1]));
  else   (((const ::edm::ValueMap<StoredPileupJetIdentifier>*)o)->rawIndexOf)(*(::edm::ProductID*)arg[0],
    *(::size_t*)arg[1]);
}

static  void method_23381( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::ValueMap<StoredPileupJetIdentifier>*)o)->get)(*(::edm::ProductID*)arg[0],
    *(::size_t*)arg[1]);
  else   (((const ::edm::ValueMap<StoredPileupJetIdentifier>*)o)->get)(*(::edm::ProductID*)arg[0],
    *(::size_t*)arg[1]);
}

static  void method_23382( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::ValueMap<StoredPileupJetIdentifier>*)o)->get)(*(::edm::ProductID*)arg[0],
    *(::size_t*)arg[1]);
  else   (((::edm::ValueMap<StoredPileupJetIdentifier>*)o)->get)(*(::edm::ProductID*)arg[0],
    *(::size_t*)arg[1]);
}

static  void operator_23383( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::ValueMap<StoredPileupJetIdentifier>*)o)->operator+=)(*(const ::edm::ValueMap<StoredPileupJetIdentifier>*)arg[0]);
  else   (((::edm::ValueMap<StoredPileupJetIdentifier>*)o)->operator+=)(*(const ::edm::ValueMap<StoredPileupJetIdentifier>*)arg[0]);
}

static  void method_23384( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::ValueMap<StoredPileupJetIdentifier>*)o)->contains)(*(::edm::ProductID*)arg[0]));
  else   (((const ::edm::ValueMap<StoredPileupJetIdentifier>*)o)->contains)(*(::edm::ProductID*)arg[0]);
}

static  void method_23385( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (size_t)((((const ::edm::ValueMap<StoredPileupJetIdentifier>*)o)->size)());
  else   (((const ::edm::ValueMap<StoredPileupJetIdentifier>*)o)->size)();
}

static  void method_23386( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (size_t)((((const ::edm::ValueMap<StoredPileupJetIdentifier>*)o)->idSize)());
  else   (((const ::edm::ValueMap<StoredPileupJetIdentifier>*)o)->idSize)();
}

static  void method_23387( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::ValueMap<StoredPileupJetIdentifier>*)o)->empty)());
  else   (((const ::edm::ValueMap<StoredPileupJetIdentifier>*)o)->empty)();
}

static  void method_23388( void*, void* o, const std::vector<void*>&, void*)
{
  (((::edm::ValueMap<StoredPileupJetIdentifier>*)o)->clear)();
}

static  void method_23389( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::ValueMap<StoredPileupJetIdentifier>::const_iterator)((((const ::edm::ValueMap<StoredPileupJetIdentifier>*)o)->begin)());
  else   (((const ::edm::ValueMap<StoredPileupJetIdentifier>*)o)->begin)();
}

static  void method_23390( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::ValueMap<StoredPileupJetIdentifier>::const_iterator)((((const ::edm::ValueMap<StoredPileupJetIdentifier>*)o)->end)());
  else   (((const ::edm::ValueMap<StoredPileupJetIdentifier>*)o)->end)();
}

static  void method_23391( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::ValueMap<StoredPileupJetIdentifier>*)o)->ids)();
  else   (((const ::edm::ValueMap<StoredPileupJetIdentifier>*)o)->ids)();
}

static  void method_23392( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::ValueMap<StoredPileupJetIdentifier>*)o)->get)(*(::size_t*)arg[0]);
  else   (((const ::edm::ValueMap<StoredPileupJetIdentifier>*)o)->get)(*(::size_t*)arg[0]);
}

static  void method_23393( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (short)((((::edm::ValueMap<StoredPileupJetIdentifier>*)o)->Class_Version)());
  else   (((::edm::ValueMap<StoredPileupJetIdentifier>*)o)->Class_Version)();
}

static void method_newdel_4864( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::ValueMap<StoredPileupJetIdentifier> >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::ValueMap<StoredPileupJetIdentifier> >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::ValueMap<StoredPileupJetIdentifier> >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::ValueMap<StoredPileupJetIdentifier> >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::ValueMap<StoredPileupJetIdentifier> >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class ValueMap<StoredPileupJetIdentifier> -------------------------------
void __edm__ValueMap_StoredPileupJetIdentifier__db_datamem(Reflex::Class*);
void __edm__ValueMap_StoredPileupJetIdentifier__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__ValueMap_StoredPileupJetIdentifier__datamem_bld(&__edm__ValueMap_StoredPileupJetIdentifier__db_datamem);
Reflex::GenreflexMemberBuilder __edm__ValueMap_StoredPileupJetIdentifier__funcmem_bld(&__edm__ValueMap_StoredPileupJetIdentifier__db_funcmem);
void __edm__ValueMap_StoredPileupJetIdentifier__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::ValueMap<StoredPileupJetIdentifier>"), typeid(::edm::ValueMap<StoredPileupJetIdentifier>), sizeof(::edm::ValueMap<StoredPileupJetIdentifier>), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("ClassVersion"), ::edm::ValueMap<StoredPileupJetIdentifier>::Class_Version())
  .AddTypedef(type_1675, Reflex::Literal("edm::ValueMap<StoredPileupJetIdentifier>::value_type"))
  .AddTypedef(type_2953, Reflex::Literal("edm::ValueMap<StoredPileupJetIdentifier>::container"))
  .AddTypedef(type_219, Reflex::Literal("edm::ValueMap<StoredPileupJetIdentifier>::offset"))
  .AddTypedef(type_2952, Reflex::Literal("edm::ValueMap<StoredPileupJetIdentifier>::id_offset_vector"))
  .AddTypedef(type_13452, Reflex::Literal("edm::ValueMap<StoredPileupJetIdentifier>::reference_type"))
  .AddTypedef(type_13454, Reflex::Literal("edm::ValueMap<StoredPileupJetIdentifier>::const_reference_type"))
  .AddTypedef(type_23371, Reflex::Literal("edm::ValueMap<StoredPileupJetIdentifier>::Filler"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~ValueMap"), destructor_23375, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::DESTRUCTOR )
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_37687), Reflex::Literal("ValueMap"), constructor_23376, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("ValueMap"), constructor_23377, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_4864, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__ValueMap_StoredPileupJetIdentifier__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__ValueMap_StoredPileupJetIdentifier__funcmem_bld);
}

//------Delayed data member builder for class ValueMap<StoredPileupJetIdentifier> -------------------
void __edm__ValueMap_StoredPileupJetIdentifier__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_2953, Reflex::Literal("values_"), OffsetOf(__shadow__::__edm__ValueMap_StoredPileupJetIdentifier_, values_), ::Reflex::PROTECTED)
  .AddDataMember(type_2952, Reflex::Literal("ids_"), OffsetOf(__shadow__::__edm__ValueMap_StoredPileupJetIdentifier_, ids_), ::Reflex::PROTECTED);
}
//------Delayed function member builder for class ValueMap<StoredPileupJetIdentifier> -------------------
void __edm__ValueMap_StoredPileupJetIdentifier__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_37688), Reflex::Literal("swap"), method_23378, 0, "other", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_37688, type_37687), Reflex::Literal("operator="), operator_23379, 0, "rhs", ::Reflex::PUBLIC | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2125, type_4974, type_2125), Reflex::Literal("rawIndexOf"), method_23380, 0, "id;idx", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13454, type_4974, type_2125), Reflex::Literal("get"), method_23381, 0, "id;idx", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13452, type_4974, type_2125), Reflex::Literal("get"), method_23382, 0, "id;idx", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_37688, type_37687), Reflex::Literal("operator+="), operator_23383, 0, "o", ::Reflex::PUBLIC | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569, type_4974), Reflex::Literal("contains"), method_23384, 0, "id", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2125), Reflex::Literal("size"), method_23385, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2125), Reflex::Literal("idSize"), method_23386, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("empty"), method_23387, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698), Reflex::Literal("clear"), method_23388, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_23373), Reflex::Literal("begin"), method_23389, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_23373), Reflex::Literal("end"), method_23390, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_33755), Reflex::Literal("ids"), method_23391, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13454, type_2125), Reflex::Literal("get"), method_23392, 0, "idx", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_89), Reflex::Literal("Class_Version"), method_23393, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC);
}
//------Stub functions for class Wrapper<edm::ValueMap<StoredPileupJetIdentifier> > -------------------------------
static void constructor_22504( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<edm::ValueMap<StoredPileupJetIdentifier> >();
  else ::new(mem) ::edm::Wrapper<edm::ValueMap<StoredPileupJetIdentifier> >();
}

static void constructor_22505( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<edm::ValueMap<StoredPileupJetIdentifier> >(*(::std::auto_ptr<edm::ValueMap<StoredPileupJetIdentifier> >*)arg[0]);
  else ::new(mem) ::edm::Wrapper<edm::ValueMap<StoredPileupJetIdentifier> >(*(::std::auto_ptr<edm::ValueMap<StoredPileupJetIdentifier> >*)arg[0]);
}

static void destructor_22506(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::Wrapper<edm::ValueMap<StoredPileupJetIdentifier> >*)o)->::edm::Wrapper<edm::ValueMap<StoredPileupJetIdentifier> >::~Wrapper)();
}
static  void method_22507( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Wrapper<edm::ValueMap<StoredPileupJetIdentifier> >*)o)->product)());
  else   (((const ::edm::Wrapper<edm::ValueMap<StoredPileupJetIdentifier> >*)o)->product)();
}

static  void operator_22508( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Wrapper<edm::ValueMap<StoredPileupJetIdentifier> >*)o)->operator->)());
  else   (((const ::edm::Wrapper<edm::ValueMap<StoredPileupJetIdentifier> >*)o)->operator->)();
}

static  void method_22509( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::Wrapper<edm::ValueMap<StoredPileupJetIdentifier> >*)o)->productTypeInfo)();
  else   (((::edm::Wrapper<edm::ValueMap<StoredPileupJetIdentifier> >*)o)->productTypeInfo)();
}

static  void method_22510( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::Wrapper<edm::ValueMap<StoredPileupJetIdentifier> >*)o)->typeInfo)();
  else   (((::edm::Wrapper<edm::ValueMap<StoredPileupJetIdentifier> >*)o)->typeInfo)();
}

static void constructor_22511( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<edm::ValueMap<StoredPileupJetIdentifier> >((::edm::ValueMap<StoredPileupJetIdentifier>*)arg[0]);
  else ::new(mem) ::edm::Wrapper<edm::ValueMap<StoredPileupJetIdentifier> >((::edm::ValueMap<StoredPileupJetIdentifier>*)arg[0]);
}

static  void method_22512( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((::edm::Wrapper<edm::ValueMap<StoredPileupJetIdentifier> >*)o)->getInterface)());
  else   (((::edm::Wrapper<edm::ValueMap<StoredPileupJetIdentifier> >*)o)->getInterface)();
}

static  void method_22513( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<edm::ValueMap<StoredPileupJetIdentifier> >*)o)->fillView)(*(const ::edm::ProductID*)arg[0],
    *(::std::vector<const void*>*)arg[1],
    *(::boost::shared_ptr<edm::reftobase::RefVectorHolderBase>*)arg[2]);
}

static  void method_22514( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<edm::ValueMap<StoredPileupJetIdentifier> >*)o)->setPtr)(*(const ::std::type_info*)arg[0],
    *(unsigned long*)arg[1],
    *(const void**)arg[2]);
}

static  void method_22515( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<edm::ValueMap<StoredPileupJetIdentifier> >*)o)->fillPtrVector)(*(const ::std::type_info*)arg[0],
    *(const ::std::vector<unsigned long>*)arg[1],
    *(::std::vector<const void*>*)arg[2]);
}

static  void method_22516( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Wrapper<edm::ValueMap<StoredPileupJetIdentifier> >*)o)->dynamicTypeInfo)();
  else   (((const ::edm::Wrapper<edm::ValueMap<StoredPileupJetIdentifier> >*)o)->dynamicTypeInfo)();
}

static  void method_22517( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Wrapper<edm::ValueMap<StoredPileupJetIdentifier> >*)o)->isPresent)());
  else   (((const ::edm::Wrapper<edm::ValueMap<StoredPileupJetIdentifier> >*)o)->isPresent)();
}

static  void method_22518( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Wrapper<edm::ValueMap<StoredPileupJetIdentifier> >*)o)->dynamicTypeInfo_)();
  else   (((const ::edm::Wrapper<edm::ValueMap<StoredPileupJetIdentifier> >*)o)->dynamicTypeInfo_)();
}

static void method_newdel_4686( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<edm::ValueMap<StoredPileupJetIdentifier> > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<edm::ValueMap<StoredPileupJetIdentifier> > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<edm::ValueMap<StoredPileupJetIdentifier> > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<edm::ValueMap<StoredPileupJetIdentifier> > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<edm::ValueMap<StoredPileupJetIdentifier> > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class Wrapper<edm::ValueMap<StoredPileupJetIdentifier> > -------------------------------
void __edm__Wrapper_edm__ValueMap_StoredPileupJetIdentifier_s__db_datamem(Reflex::Class*);
void __edm__Wrapper_edm__ValueMap_StoredPileupJetIdentifier_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__Wrapper_edm__ValueMap_StoredPileupJetIdentifier_s__datamem_bld(&__edm__Wrapper_edm__ValueMap_StoredPileupJetIdentifier_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__Wrapper_edm__ValueMap_StoredPileupJetIdentifier_s__funcmem_bld(&__edm__Wrapper_edm__ValueMap_StoredPileupJetIdentifier_s__db_funcmem);
void __edm__Wrapper_edm__ValueMap_StoredPileupJetIdentifier_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::Wrapper<edm::ValueMap<StoredPileupJetIdentifier> >"), typeid(::edm::Wrapper<edm::ValueMap<StoredPileupJetIdentifier> >), sizeof(::edm::Wrapper<edm::ValueMap<StoredPileupJetIdentifier> >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddTypedef(type_4864, Reflex::Literal("edm::Wrapper<edm::ValueMap<StoredPileupJetIdentifier> >::value_type"))
  .AddTypedef(type_4864, Reflex::Literal("edm::Wrapper<edm::ValueMap<StoredPileupJetIdentifier> >::wrapped_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("Wrapper"), constructor_22504, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_2767), Reflex::Literal("Wrapper"), constructor_22505, 0, "ptr", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~Wrapper"), destructor_22506, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_37078), Reflex::Literal("Wrapper"), constructor_22511, 0, "ptr", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_4686, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__Wrapper_edm__ValueMap_StoredPileupJetIdentifier_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__Wrapper_edm__ValueMap_StoredPileupJetIdentifier_s__funcmem_bld);
}

//------Delayed data member builder for class Wrapper<edm::ValueMap<StoredPileupJetIdentifier> > -------------------
void __edm__Wrapper_edm__ValueMap_StoredPileupJetIdentifier_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_1569, Reflex::Literal("present"), OffsetOf(__shadow__::__edm__Wrapper_edm__ValueMap_StoredPileupJetIdentifier_s_, present), ::Reflex::PRIVATE)
  .AddDataMember(type_4864, Reflex::Literal("obj"), OffsetOf(__shadow__::__edm__Wrapper_edm__ValueMap_StoredPileupJetIdentifier_s_, obj), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class Wrapper<edm::ValueMap<StoredPileupJetIdentifier> > -------------------
void __edm__Wrapper_edm__ValueMap_StoredPileupJetIdentifier_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_37077), Reflex::Literal("product"), method_22507, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_37077), Reflex::Literal("operator->"), operator_22508, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_20180), Reflex::Literal("productTypeInfo"), method_22509, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_20180), Reflex::Literal("typeInfo"), method_22510, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_37079), Reflex::Literal("getInterface"), method_22512, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_20008, type_20132, type_36516), Reflex::Literal("fillView"), method_22513, 0, "id;pointers;helpers", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_20180, type_362, type_11211), Reflex::Literal("setPtr"), method_22514, 0, "iToType;iIndex;oPtr", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_20180, type_24927, type_20132), Reflex::Literal("fillPtrVector"), method_22515, 0, "iToType;iIndices;oPtr", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_20180), Reflex::Literal("dynamicTypeInfo"), method_22516, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("isPresent"), method_22517, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_20180), Reflex::Literal("dynamicTypeInfo_"), method_22518, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST);
}
//------Stub functions for class Wrapper<std::vector<reco::PFClusterJet, std::allocator<reco::PFClusterJet> > > -------------------------------
static void constructor_22588( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<std::vector<reco::PFClusterJet> >();
  else ::new(mem) ::edm::Wrapper<std::vector<reco::PFClusterJet> >();
}

static void constructor_22589( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<std::vector<reco::PFClusterJet> >(*(::std::auto_ptr<std::vector<reco::PFClusterJet> >*)arg[0]);
  else ::new(mem) ::edm::Wrapper<std::vector<reco::PFClusterJet> >(*(::std::auto_ptr<std::vector<reco::PFClusterJet> >*)arg[0]);
}

static void destructor_22590(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::Wrapper<std::vector<reco::PFClusterJet> >*)o)->::edm::Wrapper<std::vector<reco::PFClusterJet> >::~Wrapper)();
}
static  void method_22591( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Wrapper<std::vector<reco::PFClusterJet> >*)o)->product)());
  else   (((const ::edm::Wrapper<std::vector<reco::PFClusterJet> >*)o)->product)();
}

static  void operator_22592( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Wrapper<std::vector<reco::PFClusterJet> >*)o)->operator->)());
  else   (((const ::edm::Wrapper<std::vector<reco::PFClusterJet> >*)o)->operator->)();
}

static  void method_22593( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::Wrapper<std::vector<reco::PFClusterJet> >*)o)->productTypeInfo)();
  else   (((::edm::Wrapper<std::vector<reco::PFClusterJet> >*)o)->productTypeInfo)();
}

static  void method_22594( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::Wrapper<std::vector<reco::PFClusterJet> >*)o)->typeInfo)();
  else   (((::edm::Wrapper<std::vector<reco::PFClusterJet> >*)o)->typeInfo)();
}

static void constructor_22595( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<std::vector<reco::PFClusterJet> >((::std::vector<reco::PFClusterJet>*)arg[0]);
  else ::new(mem) ::edm::Wrapper<std::vector<reco::PFClusterJet> >((::std::vector<reco::PFClusterJet>*)arg[0]);
}

static  void method_22596( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((::edm::Wrapper<std::vector<reco::PFClusterJet> >*)o)->getInterface)());
  else   (((::edm::Wrapper<std::vector<reco::PFClusterJet> >*)o)->getInterface)();
}

static  void method_22597( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<std::vector<reco::PFClusterJet> >*)o)->fillView)(*(const ::edm::ProductID*)arg[0],
    *(::std::vector<const void*>*)arg[1],
    *(::boost::shared_ptr<edm::reftobase::RefVectorHolderBase>*)arg[2]);
}

static  void method_22598( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<std::vector<reco::PFClusterJet> >*)o)->setPtr)(*(const ::std::type_info*)arg[0],
    *(unsigned long*)arg[1],
    *(const void**)arg[2]);
}

static  void method_22599( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<std::vector<reco::PFClusterJet> >*)o)->fillPtrVector)(*(const ::std::type_info*)arg[0],
    *(const ::std::vector<unsigned long>*)arg[1],
    *(::std::vector<const void*>*)arg[2]);
}

static  void method_22600( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Wrapper<std::vector<reco::PFClusterJet> >*)o)->dynamicTypeInfo)();
  else   (((const ::edm::Wrapper<std::vector<reco::PFClusterJet> >*)o)->dynamicTypeInfo)();
}

static  void method_22601( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Wrapper<std::vector<reco::PFClusterJet> >*)o)->isPresent)());
  else   (((const ::edm::Wrapper<std::vector<reco::PFClusterJet> >*)o)->isPresent)();
}

static  void method_22602( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Wrapper<std::vector<reco::PFClusterJet> >*)o)->dynamicTypeInfo_)();
  else   (((const ::edm::Wrapper<std::vector<reco::PFClusterJet> >*)o)->dynamicTypeInfo_)();
}

static void method_newdel_4690( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<reco::PFClusterJet> > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<reco::PFClusterJet> > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<reco::PFClusterJet> > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<reco::PFClusterJet> > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<reco::PFClusterJet> > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class Wrapper<std::vector<reco::PFClusterJet, std::allocator<reco::PFClusterJet> > > -------------------------------
void __edm__Wrapper_std__vector_reco__PFClusterJet_s__db_datamem(Reflex::Class*);
void __edm__Wrapper_std__vector_reco__PFClusterJet_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__Wrapper_std__vector_reco__PFClusterJet_s__datamem_bld(&__edm__Wrapper_std__vector_reco__PFClusterJet_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__Wrapper_std__vector_reco__PFClusterJet_s__funcmem_bld(&__edm__Wrapper_std__vector_reco__PFClusterJet_s__db_funcmem);
void __edm__Wrapper_std__vector_reco__PFClusterJet_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::Wrapper<std::vector<reco::PFClusterJet> >"), typeid(::edm::Wrapper<std::vector<reco::PFClusterJet> >), sizeof(::edm::Wrapper<std::vector<reco::PFClusterJet> >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddTypedef(type_2962, Reflex::Literal("edm::Wrapper<std::vector<reco::PFClusterJet> >::value_type"))
  .AddTypedef(type_2962, Reflex::Literal("edm::Wrapper<std::vector<reco::PFClusterJet> >::wrapped_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("Wrapper"), constructor_22588, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_2771), Reflex::Literal("Wrapper"), constructor_22589, 0, "ptr", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~Wrapper"), destructor_22590, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_37097), Reflex::Literal("Wrapper"), constructor_22595, 0, "ptr", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_4690, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__Wrapper_std__vector_reco__PFClusterJet_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__Wrapper_std__vector_reco__PFClusterJet_s__funcmem_bld);
}

//------Delayed data member builder for class Wrapper<std::vector<reco::PFClusterJet, std::allocator<reco::PFClusterJet> > > -------------------
void __edm__Wrapper_std__vector_reco__PFClusterJet_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_1569, Reflex::Literal("present"), OffsetOf(__shadow__::__edm__Wrapper_std__vector_reco__PFClusterJet_s_, present), ::Reflex::PRIVATE)
  .AddDataMember(type_2962, Reflex::Literal("obj"), OffsetOf(__shadow__::__edm__Wrapper_std__vector_reco__PFClusterJet_s_, obj), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class Wrapper<std::vector<reco::PFClusterJet, std::allocator<reco::PFClusterJet> > > -------------------
void __edm__Wrapper_std__vector_reco__PFClusterJet_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_37023), Reflex::Literal("product"), method_22591, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_37023), Reflex::Literal("operator->"), operator_22592, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_20180), Reflex::Literal("productTypeInfo"), method_22593, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_20180), Reflex::Literal("typeInfo"), method_22594, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_37098), Reflex::Literal("getInterface"), method_22596, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_20008, type_20132, type_36516), Reflex::Literal("fillView"), method_22597, 0, "id;pointers;helpers", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_20180, type_362, type_11211), Reflex::Literal("setPtr"), method_22598, 0, "iToType;iIndex;oPtr", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_20180, type_24927, type_20132), Reflex::Literal("fillPtrVector"), method_22599, 0, "iToType;iIndices;oPtr", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_20180), Reflex::Literal("dynamicTypeInfo"), method_22600, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("isPresent"), method_22601, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_20180), Reflex::Literal("dynamicTypeInfo_"), method_22602, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST);
}
//------Stub functions for class Wrapper<std::vector<reco::TrackJet, std::allocator<reco::TrackJet> > > -------------------------------
static void constructor_22714( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<std::vector<reco::TrackJet> >();
  else ::new(mem) ::edm::Wrapper<std::vector<reco::TrackJet> >();
}

static void constructor_22715( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<std::vector<reco::TrackJet> >(*(::std::auto_ptr<std::vector<reco::TrackJet> >*)arg[0]);
  else ::new(mem) ::edm::Wrapper<std::vector<reco::TrackJet> >(*(::std::auto_ptr<std::vector<reco::TrackJet> >*)arg[0]);
}

static void destructor_22716(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::Wrapper<std::vector<reco::TrackJet> >*)o)->::edm::Wrapper<std::vector<reco::TrackJet> >::~Wrapper)();
}
static  void method_22717( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Wrapper<std::vector<reco::TrackJet> >*)o)->product)());
  else   (((const ::edm::Wrapper<std::vector<reco::TrackJet> >*)o)->product)();
}

static  void operator_22718( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Wrapper<std::vector<reco::TrackJet> >*)o)->operator->)());
  else   (((const ::edm::Wrapper<std::vector<reco::TrackJet> >*)o)->operator->)();
}

static  void method_22719( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::Wrapper<std::vector<reco::TrackJet> >*)o)->productTypeInfo)();
  else   (((::edm::Wrapper<std::vector<reco::TrackJet> >*)o)->productTypeInfo)();
}

static  void method_22720( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::Wrapper<std::vector<reco::TrackJet> >*)o)->typeInfo)();
  else   (((::edm::Wrapper<std::vector<reco::TrackJet> >*)o)->typeInfo)();
}

static void constructor_22721( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<std::vector<reco::TrackJet> >((::std::vector<reco::TrackJet>*)arg[0]);
  else ::new(mem) ::edm::Wrapper<std::vector<reco::TrackJet> >((::std::vector<reco::TrackJet>*)arg[0]);
}

static  void method_22722( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((::edm::Wrapper<std::vector<reco::TrackJet> >*)o)->getInterface)());
  else   (((::edm::Wrapper<std::vector<reco::TrackJet> >*)o)->getInterface)();
}

static  void method_22723( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<std::vector<reco::TrackJet> >*)o)->fillView)(*(const ::edm::ProductID*)arg[0],
    *(::std::vector<const void*>*)arg[1],
    *(::boost::shared_ptr<edm::reftobase::RefVectorHolderBase>*)arg[2]);
}

static  void method_22724( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<std::vector<reco::TrackJet> >*)o)->setPtr)(*(const ::std::type_info*)arg[0],
    *(unsigned long*)arg[1],
    *(const void**)arg[2]);
}

static  void method_22725( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<std::vector<reco::TrackJet> >*)o)->fillPtrVector)(*(const ::std::type_info*)arg[0],
    *(const ::std::vector<unsigned long>*)arg[1],
    *(::std::vector<const void*>*)arg[2]);
}

static  void method_22726( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Wrapper<std::vector<reco::TrackJet> >*)o)->dynamicTypeInfo)();
  else   (((const ::edm::Wrapper<std::vector<reco::TrackJet> >*)o)->dynamicTypeInfo)();
}

static  void method_22727( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Wrapper<std::vector<reco::TrackJet> >*)o)->isPresent)());
  else   (((const ::edm::Wrapper<std::vector<reco::TrackJet> >*)o)->isPresent)();
}

static  void method_22728( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Wrapper<std::vector<reco::TrackJet> >*)o)->dynamicTypeInfo_)();
  else   (((const ::edm::Wrapper<std::vector<reco::TrackJet> >*)o)->dynamicTypeInfo_)();
}

static void method_newdel_4696( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<reco::TrackJet> > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<reco::TrackJet> > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<reco::TrackJet> > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<reco::TrackJet> > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<reco::TrackJet> > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class Wrapper<std::vector<reco::TrackJet, std::allocator<reco::TrackJet> > > -------------------------------
void __edm__Wrapper_std__vector_reco__TrackJet_s__db_datamem(Reflex::Class*);
void __edm__Wrapper_std__vector_reco__TrackJet_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__Wrapper_std__vector_reco__TrackJet_s__datamem_bld(&__edm__Wrapper_std__vector_reco__TrackJet_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__Wrapper_std__vector_reco__TrackJet_s__funcmem_bld(&__edm__Wrapper_std__vector_reco__TrackJet_s__db_funcmem);
void __edm__Wrapper_std__vector_reco__TrackJet_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::Wrapper<std::vector<reco::TrackJet> >"), typeid(::edm::Wrapper<std::vector<reco::TrackJet> >), sizeof(::edm::Wrapper<std::vector<reco::TrackJet> >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddTypedef(type_2970, Reflex::Literal("edm::Wrapper<std::vector<reco::TrackJet> >::value_type"))
  .AddTypedef(type_2970, Reflex::Literal("edm::Wrapper<std::vector<reco::TrackJet> >::wrapped_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("Wrapper"), constructor_22714, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_2777), Reflex::Literal("Wrapper"), constructor_22715, 0, "ptr", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~Wrapper"), destructor_22716, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_37125), Reflex::Literal("Wrapper"), constructor_22721, 0, "ptr", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_4696, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__Wrapper_std__vector_reco__TrackJet_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__Wrapper_std__vector_reco__TrackJet_s__funcmem_bld);
}

//------Delayed data member builder for class Wrapper<std::vector<reco::TrackJet, std::allocator<reco::TrackJet> > > -------------------
void __edm__Wrapper_std__vector_reco__TrackJet_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_1569, Reflex::Literal("present"), OffsetOf(__shadow__::__edm__Wrapper_std__vector_reco__TrackJet_s_, present), ::Reflex::PRIVATE)
  .AddDataMember(type_2970, Reflex::Literal("obj"), OffsetOf(__shadow__::__edm__Wrapper_std__vector_reco__TrackJet_s_, obj), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class Wrapper<std::vector<reco::TrackJet, std::allocator<reco::TrackJet> > > -------------------
void __edm__Wrapper_std__vector_reco__TrackJet_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_37033), Reflex::Literal("product"), method_22717, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_37033), Reflex::Literal("operator->"), operator_22718, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_20180), Reflex::Literal("productTypeInfo"), method_22719, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_20180), Reflex::Literal("typeInfo"), method_22720, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_37126), Reflex::Literal("getInterface"), method_22722, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_20008, type_20132, type_36516), Reflex::Literal("fillView"), method_22723, 0, "id;pointers;helpers", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_20180, type_362, type_11211), Reflex::Literal("setPtr"), method_22724, 0, "iToType;iIndex;oPtr", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_20180, type_24927, type_20132), Reflex::Literal("fillPtrVector"), method_22725, 0, "iToType;iIndices;oPtr", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_20180), Reflex::Literal("dynamicTypeInfo"), method_22726, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("isPresent"), method_22727, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_20180), Reflex::Literal("dynamicTypeInfo_"), method_22728, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST);
}
//------Stub functions for class FwdRef<std::vector<reco::PFClusterJet, std::allocator<reco::PFClusterJet> >,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet, std::allocator<reco::PFClusterJet> >, reco::PFClusterJet> > -------------------------------
static  void operator_22856( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)o)->operator=)(*(const ::edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)arg[0]);
  else   (((::edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)o)->operator=)(*(const ::edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)arg[0]);
}

static void constructor_22857( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >(*(const ::edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)arg[0]);
  else ::new(mem) ::edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >(*(const ::edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)arg[0]);
}

static void constructor_22858( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >();
  else ::new(mem) ::edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >();
}

static void constructor_22859( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >(*(const ::edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)arg[0],
      *(const ::edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)arg[1]);
  else ::new(mem) ::edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >(*(const ::edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)arg[0],
      *(const ::edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)arg[1]);
}

static void destructor_22860(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)o)->::edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >::~FwdRef)();
}
static  void operator_22861( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)o)->operator*)();
  else   (((const ::edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)o)->operator*)();
}

static  void operator_22862( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)o)->operator->)());
  else   (((const ::edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)o)->operator->)();
}

static  void method_22863( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)o)->get)());
  else   (((const ::edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)o)->get)();
}

static  void method_22864( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)o)->isNull)());
  else   (((const ::edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)o)->isNull)();
}

static  void method_22865( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)o)->isNonnull)());
  else   (((const ::edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)o)->isNonnull)();
}

static  void operator_22866( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)o)->operator!)());
  else   (((const ::edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)o)->operator!)();
}

static  void method_22867( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)o)->ref)();
  else   (((const ::edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)o)->ref)();
}

static  void method_22868( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)o)->backRef)();
  else   (((const ::edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)o)->backRef)();
}

static  void method_22869( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)o)->productGetter)());
  else   (((const ::edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)o)->productGetter)();
}

static  void method_22870( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)o)->product)());
  else   (((const ::edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)o)->product)();
}

static  void method_22871( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::ProductID)((((const ::edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)o)->id)());
  else   (((const ::edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)o)->id)();
}

static  void method_22872( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (unsigned int)((((const ::edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)o)->key)());
  else   (((const ::edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)o)->key)();
}

static  void method_22873( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)o)->hasProductCache)());
  else   (((const ::edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)o)->hasProductCache)();
}

static  void method_22874( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)o)->isAvailable)());
  else   (((const ::edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)o)->isAvailable)();
}

static  void method_22875( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)o)->isTransient)());
  else   (((const ::edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)o)->isTransient)();
}

static  void method_22876( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (short)((((::edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)o)->Class_Version)());
  else   (((::edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)o)->Class_Version)();
}

static void method_newdel_4706( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class FwdRef<std::vector<reco::PFClusterJet, std::allocator<reco::PFClusterJet> >,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet, std::allocator<reco::PFClusterJet> >, reco::PFClusterJet> > -------------------------------
void __edm__FwdRef_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s__db_datamem(Reflex::Class*);
void __edm__FwdRef_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__FwdRef_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s__datamem_bld(&__edm__FwdRef_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__FwdRef_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s__funcmem_bld(&__edm__FwdRef_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s__db_funcmem);
void __edm__FwdRef_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >"), typeid(::edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >), sizeof(::edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("ClassVersion"), ::edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >::Class_Version())
  .AddTypedef(type_2962, Reflex::Literal("edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >::product_type"))
  .AddTypedef(type_7932, Reflex::Literal("edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >::value_type"))
  .AddTypedef(type_7932c, Reflex::Literal("edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >::element_type"))
  .AddTypedef(type_20347, Reflex::Literal("edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >::finder_type"))
  .AddTypedef(type_219, Reflex::Literal("edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >::argument_type"))
  .AddTypedef(type_219, Reflex::Literal("edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >::key_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13712, type_13714), Reflex::Literal("operator="), operator_22856, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_13714), Reflex::Literal("FwdRef"), constructor_22857, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("FwdRef"), constructor_22858, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_36619, type_36619), Reflex::Literal("FwdRef"), constructor_22859, 0, "ref;backRef", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~FwdRef"), destructor_22860, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_4706, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__FwdRef_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__FwdRef_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s__funcmem_bld);
}

//------Delayed data member builder for class FwdRef<std::vector<reco::PFClusterJet, std::allocator<reco::PFClusterJet> >,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet, std::allocator<reco::PFClusterJet> >, reco::PFClusterJet> > -------------------
void __edm__FwdRef_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_4921, Reflex::Literal("ref_"), OffsetOf(__shadow__::__edm__FwdRef_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s_, ref_), ::Reflex::PRIVATE)
  .AddDataMember(type_4921, Reflex::Literal("backRef_"), OffsetOf(__shadow__::__edm__FwdRef_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s_, backRef_), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class FwdRef<std::vector<reco::PFClusterJet, std::allocator<reco::PFClusterJet> >,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet, std::allocator<reco::PFClusterJet> >, reco::PFClusterJet> > -------------------
void __edm__FwdRef_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13779), Reflex::Literal("operator*"), operator_22861, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13775), Reflex::Literal("operator->"), operator_22862, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13775), Reflex::Literal("get"), method_22863, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("isNull"), method_22864, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("isNonnull"), method_22865, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("operator!"), operator_22866, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_36619), Reflex::Literal("ref"), method_22867, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_36619), Reflex::Literal("backRef"), method_22868, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_20128), Reflex::Literal("productGetter"), method_22869, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_37023), Reflex::Literal("product"), method_22870, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4974), Reflex::Literal("id"), method_22871, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_219), Reflex::Literal("key"), method_22872, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("hasProductCache"), method_22873, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("isAvailable"), method_22874, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("isTransient"), method_22875, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_89), Reflex::Literal("Class_Version"), method_22876, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC);
}
//------Stub functions for class FwdRef<std::vector<reco::TrackJet, std::allocator<reco::TrackJet> >,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet, std::allocator<reco::TrackJet> >, reco::TrackJet> > -------------------------------
static  void operator_22885( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)o)->operator=)(*(const ::edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)arg[0]);
  else   (((::edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)o)->operator=)(*(const ::edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)arg[0]);
}

static void constructor_22886( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >(*(const ::edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)arg[0]);
  else ::new(mem) ::edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >(*(const ::edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)arg[0]);
}

static void constructor_22887( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >();
  else ::new(mem) ::edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >();
}

static void constructor_22888( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >(*(const ::edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)arg[0],
      *(const ::edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)arg[1]);
  else ::new(mem) ::edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >(*(const ::edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)arg[0],
      *(const ::edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)arg[1]);
}

static void destructor_22889(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)o)->::edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >::~FwdRef)();
}
static  void operator_22890( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)o)->operator*)();
  else   (((const ::edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)o)->operator*)();
}

static  void operator_22891( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)o)->operator->)());
  else   (((const ::edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)o)->operator->)();
}

static  void method_22892( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)o)->get)());
  else   (((const ::edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)o)->get)();
}

static  void method_22893( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)o)->isNull)());
  else   (((const ::edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)o)->isNull)();
}

static  void method_22894( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)o)->isNonnull)());
  else   (((const ::edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)o)->isNonnull)();
}

static  void operator_22895( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)o)->operator!)());
  else   (((const ::edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)o)->operator!)();
}

static  void method_22896( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)o)->ref)();
  else   (((const ::edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)o)->ref)();
}

static  void method_22897( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)o)->backRef)();
  else   (((const ::edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)o)->backRef)();
}

static  void method_22898( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)o)->productGetter)());
  else   (((const ::edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)o)->productGetter)();
}

static  void method_22899( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)o)->product)());
  else   (((const ::edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)o)->product)();
}

static  void method_22900( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::ProductID)((((const ::edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)o)->id)());
  else   (((const ::edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)o)->id)();
}

static  void method_22901( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (unsigned int)((((const ::edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)o)->key)());
  else   (((const ::edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)o)->key)();
}

static  void method_22902( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)o)->hasProductCache)());
  else   (((const ::edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)o)->hasProductCache)();
}

static  void method_22903( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)o)->isAvailable)());
  else   (((const ::edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)o)->isAvailable)();
}

static  void method_22904( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)o)->isTransient)());
  else   (((const ::edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)o)->isTransient)();
}

static  void method_22905( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (short)((((::edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)o)->Class_Version)());
  else   (((::edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)o)->Class_Version)();
}

static void method_newdel_4707( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class FwdRef<std::vector<reco::TrackJet, std::allocator<reco::TrackJet> >,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet, std::allocator<reco::TrackJet> >, reco::TrackJet> > -------------------------------
void __edm__FwdRef_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s__db_datamem(Reflex::Class*);
void __edm__FwdRef_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__FwdRef_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s__datamem_bld(&__edm__FwdRef_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__FwdRef_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s__funcmem_bld(&__edm__FwdRef_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s__db_funcmem);
void __edm__FwdRef_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >"), typeid(::edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >), sizeof(::edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("ClassVersion"), ::edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >::Class_Version())
  .AddTypedef(type_2970, Reflex::Literal("edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >::product_type"))
  .AddTypedef(type_7775, Reflex::Literal("edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >::value_type"))
  .AddTypedef(type_7775c, Reflex::Literal("edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >::element_type"))
  .AddTypedef(type_20371, Reflex::Literal("edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >::finder_type"))
  .AddTypedef(type_219, Reflex::Literal("edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >::argument_type"))
  .AddTypedef(type_219, Reflex::Literal("edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >::key_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13972, type_13974), Reflex::Literal("operator="), operator_22885, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_13974), Reflex::Literal("FwdRef"), constructor_22886, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("FwdRef"), constructor_22887, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_36647, type_36647), Reflex::Literal("FwdRef"), constructor_22888, 0, "ref;backRef", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~FwdRef"), destructor_22889, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_4707, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__FwdRef_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__FwdRef_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s__funcmem_bld);
}

//------Delayed data member builder for class FwdRef<std::vector<reco::TrackJet, std::allocator<reco::TrackJet> >,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet, std::allocator<reco::TrackJet> >, reco::TrackJet> > -------------------
void __edm__FwdRef_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_4924, Reflex::Literal("ref_"), OffsetOf(__shadow__::__edm__FwdRef_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s_, ref_), ::Reflex::PRIVATE)
  .AddDataMember(type_4924, Reflex::Literal("backRef_"), OffsetOf(__shadow__::__edm__FwdRef_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s_, backRef_), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class FwdRef<std::vector<reco::TrackJet, std::allocator<reco::TrackJet> >,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet, std::allocator<reco::TrackJet> >, reco::TrackJet> > -------------------
void __edm__FwdRef_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_14039), Reflex::Literal("operator*"), operator_22890, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_14035), Reflex::Literal("operator->"), operator_22891, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_14035), Reflex::Literal("get"), method_22892, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("isNull"), method_22893, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("isNonnull"), method_22894, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("operator!"), operator_22895, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_36647), Reflex::Literal("ref"), method_22896, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_36647), Reflex::Literal("backRef"), method_22897, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_20128), Reflex::Literal("productGetter"), method_22898, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_37033), Reflex::Literal("product"), method_22899, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4974), Reflex::Literal("id"), method_22900, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_219), Reflex::Literal("key"), method_22901, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("hasProductCache"), method_22902, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("isAvailable"), method_22903, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("isTransient"), method_22904, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_89), Reflex::Literal("Class_Version"), method_22905, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC);
}
//------Stub functions for class RefToBaseProd<reco::Jet> -------------------------------
static void constructor_22916( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefToBaseProd<reco::Jet>();
  else ::new(mem) ::edm::RefToBaseProd<reco::Jet>();
}

static void constructor_22917( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefToBaseProd<reco::Jet>(*(const ::edm::Handle<edm::View<reco::Jet> >*)arg[0]);
  else ::new(mem) ::edm::RefToBaseProd<reco::Jet>(*(const ::edm::Handle<edm::View<reco::Jet> >*)arg[0]);
}

static void constructor_22918( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefToBaseProd<reco::Jet>(*(const ::edm::RefToBase<reco::Jet>*)arg[0]);
  else ::new(mem) ::edm::RefToBaseProd<reco::Jet>(*(const ::edm::RefToBase<reco::Jet>*)arg[0]);
}

static void constructor_22919( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefToBaseProd<reco::Jet>(*(const ::edm::View<reco::Jet>*)arg[0]);
  else ::new(mem) ::edm::RefToBaseProd<reco::Jet>(*(const ::edm::View<reco::Jet>*)arg[0]);
}

static void constructor_22920( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefToBaseProd<reco::Jet>(*(const ::edm::RefToBaseProd<reco::Jet>*)arg[0]);
  else ::new(mem) ::edm::RefToBaseProd<reco::Jet>(*(const ::edm::RefToBaseProd<reco::Jet>*)arg[0]);
}

static void destructor_22921(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::RefToBaseProd<reco::Jet>*)o)->::edm::RefToBaseProd<reco::Jet>::~RefToBaseProd)();
}
static  void operator_22922( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::RefToBaseProd<reco::Jet>*)o)->operator*)();
  else   (((const ::edm::RefToBaseProd<reco::Jet>*)o)->operator*)();
}

static  void operator_22923( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::RefToBaseProd<reco::Jet>*)o)->operator->)());
  else   (((const ::edm::RefToBaseProd<reco::Jet>*)o)->operator->)();
}

static  void method_22924( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::RefToBaseProd<reco::Jet>*)o)->get)());
  else   (((const ::edm::RefToBaseProd<reco::Jet>*)o)->get)();
}

static  void method_22925( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::RefToBaseProd<reco::Jet>*)o)->product)());
  else   (((const ::edm::RefToBaseProd<reco::Jet>*)o)->product)();
}

static  void method_22926( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefToBaseProd<reco::Jet>*)o)->isNull)());
  else   (((const ::edm::RefToBaseProd<reco::Jet>*)o)->isNull)();
}

static  void method_22927( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefToBaseProd<reco::Jet>*)o)->isNonnull)());
  else   (((const ::edm::RefToBaseProd<reco::Jet>*)o)->isNonnull)();
}

static  void operator_22928( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefToBaseProd<reco::Jet>*)o)->operator!)());
  else   (((const ::edm::RefToBaseProd<reco::Jet>*)o)->operator!)();
}

static  void method_22929( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::ProductID)((((const ::edm::RefToBaseProd<reco::Jet>*)o)->id)());
  else   (((const ::edm::RefToBaseProd<reco::Jet>*)o)->id)();
}

static  void method_22930( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::RefToBaseProd<reco::Jet>*)o)->productGetter)());
  else   (((const ::edm::RefToBaseProd<reco::Jet>*)o)->productGetter)();
}

static  void method_22931( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefToBaseProd<reco::Jet>*)o)->hasCache)());
  else   (((const ::edm::RefToBaseProd<reco::Jet>*)o)->hasCache)();
}

static  void operator_22932( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::RefToBaseProd<reco::Jet>*)o)->operator=)(*(const ::edm::RefToBaseProd<reco::Jet>*)arg[0]);
  else   (((::edm::RefToBaseProd<reco::Jet>*)o)->operator=)(*(const ::edm::RefToBaseProd<reco::Jet>*)arg[0]);
}

static  void method_22933( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::edm::RefToBaseProd<reco::Jet>*)o)->swap)(*(::edm::RefToBaseProd<reco::Jet>*)arg[0]);
}

static  void method_22934( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (short)((((::edm::RefToBaseProd<reco::Jet>*)o)->Class_Version)());
  else   (((::edm::RefToBaseProd<reco::Jet>*)o)->Class_Version)();
}

static void method_newdel_4721( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::RefToBaseProd<reco::Jet> >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::RefToBaseProd<reco::Jet> >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::RefToBaseProd<reco::Jet> >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::RefToBaseProd<reco::Jet> >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::RefToBaseProd<reco::Jet> >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class RefToBaseProd<reco::Jet> -------------------------------
void __edm__RefToBaseProd_reco__Jet__db_datamem(Reflex::Class*);
void __edm__RefToBaseProd_reco__Jet__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__RefToBaseProd_reco__Jet__datamem_bld(&__edm__RefToBaseProd_reco__Jet__db_datamem);
Reflex::GenreflexMemberBuilder __edm__RefToBaseProd_reco__Jet__funcmem_bld(&__edm__RefToBaseProd_reco__Jet__db_funcmem);
void __edm__RefToBaseProd_reco__Jet__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::RefToBaseProd<reco::Jet>"), typeid(::edm::RefToBaseProd<reco::Jet>), sizeof(::edm::RefToBaseProd<reco::Jet>), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("ClassVersion"), ::edm::RefToBaseProd<reco::Jet>::Class_Version())
  .AddTypedef(type_4815, Reflex::Literal("edm::RefToBaseProd<reco::Jet>::product_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("RefToBaseProd"), constructor_22916, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_37136), Reflex::Literal("RefToBaseProd"), constructor_22917, 0, "handle", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_33732), Reflex::Literal("RefToBaseProd"), constructor_22918, 0, "ref", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_37137), Reflex::Literal("RefToBaseProd"), constructor_22919, 0, "view", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_37138), Reflex::Literal("RefToBaseProd"), constructor_22920, 0, "ref", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~RefToBaseProd"), destructor_22921, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_4721, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__RefToBaseProd_reco__Jet__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__RefToBaseProd_reco__Jet__funcmem_bld);
}

//------Delayed data member builder for class RefToBaseProd<reco::Jet> -------------------
void __edm__RefToBaseProd_reco__Jet__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_4847, Reflex::Literal("product_"), OffsetOf(__shadow__::__edm__RefToBaseProd_reco__Jet_, product_), ::Reflex::PRIVATE | ::Reflex::MUTABLE);
}
//------Delayed function member builder for class RefToBaseProd<reco::Jet> -------------------
void __edm__RefToBaseProd_reco__Jet__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_37137), Reflex::Literal("operator*"), operator_22922, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_37139), Reflex::Literal("operator->"), operator_22923, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_37139), Reflex::Literal("get"), method_22924, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_37139), Reflex::Literal("product"), method_22925, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("isNull"), method_22926, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("isNonnull"), method_22927, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("operator!"), operator_22928, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4974), Reflex::Literal("id"), method_22929, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_20128), Reflex::Literal("productGetter"), method_22930, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("hasCache"), method_22931, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_37140, type_37138), Reflex::Literal("operator="), operator_22932, 0, "other", ::Reflex::PUBLIC | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_37140), Reflex::Literal("swap"), method_22933, 0, "other", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_89), Reflex::Literal("Class_Version"), method_22934, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC);
}
//------Stub functions for class JetExtendedData -------------------------------
static  void operator_33728( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::reco::JetExtendedAssociation::JetExtendedData*)o)->operator=)(*(const ::reco::JetExtendedAssociation::JetExtendedData*)arg[0]);
  else   (((::reco::JetExtendedAssociation::JetExtendedData*)o)->operator=)(*(const ::reco::JetExtendedAssociation::JetExtendedData*)arg[0]);
}

static void constructor_33729( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::reco::JetExtendedAssociation::JetExtendedData(*(const ::reco::JetExtendedAssociation::JetExtendedData*)arg[0]);
  else ::new(mem) ::reco::JetExtendedAssociation::JetExtendedData(*(const ::reco::JetExtendedAssociation::JetExtendedData*)arg[0]);
}

static void constructor_33730( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::reco::JetExtendedAssociation::JetExtendedData();
  else ::new(mem) ::reco::JetExtendedAssociation::JetExtendedData();
}

static void destructor_33731(void*, void * o, const std::vector<void*>&, void *) {
(((::reco::JetExtendedAssociation::JetExtendedData*)o)->::reco::JetExtendedAssociation::JetExtendedData::~JetExtendedData)();
}
static void method_newdel_12876( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::reco::JetExtendedAssociation::JetExtendedData >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::reco::JetExtendedAssociation::JetExtendedData >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::reco::JetExtendedAssociation::JetExtendedData >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::reco::JetExtendedAssociation::JetExtendedData >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::reco::JetExtendedAssociation::JetExtendedData >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class JetExtendedData -------------------------------
void __reco__JetExtendedAssociation__JetExtendedData_db_datamem(Reflex::Class*);
void __reco__JetExtendedAssociation__JetExtendedData_db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __reco__JetExtendedAssociation__JetExtendedData_datamem_bld(&__reco__JetExtendedAssociation__JetExtendedData_db_datamem);
Reflex::GenreflexMemberBuilder __reco__JetExtendedAssociation__JetExtendedData_funcmem_bld(&__reco__JetExtendedAssociation__JetExtendedData_db_funcmem);
void __reco__JetExtendedAssociation__JetExtendedData_dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("reco::JetExtendedAssociation::JetExtendedData"), typeid(::reco::JetExtendedAssociation::JetExtendedData), sizeof(::reco::JetExtendedAssociation::JetExtendedData), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("ClassVersion"), "10")
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_14811, type_14813), Reflex::Literal("operator="), operator_33728, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_14813), Reflex::Literal("JetExtendedData"), constructor_33729, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("JetExtendedData"), constructor_33730, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~JetExtendedData"), destructor_33731, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_12876, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__reco__JetExtendedAssociation__JetExtendedData_datamem_bld);
}

//------Delayed data member builder for class JetExtendedData -------------------
void __reco__JetExtendedAssociation__JetExtendedData_db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_68, Reflex::Literal("mTracksAtVertexNumber"), OffsetOf(__shadow__::__reco__JetExtendedAssociation__JetExtendedData, mTracksAtVertexNumber), ::Reflex::PUBLIC)
  .AddDataMember(type_27499, Reflex::Literal("mTracksAtVertexP4"), OffsetOf(__shadow__::__reco__JetExtendedAssociation__JetExtendedData, mTracksAtVertexP4), ::Reflex::PUBLIC)
  .AddDataMember(type_68, Reflex::Literal("mTracksAtCaloNumber"), OffsetOf(__shadow__::__reco__JetExtendedAssociation__JetExtendedData, mTracksAtCaloNumber), ::Reflex::PUBLIC)
  .AddDataMember(type_27499, Reflex::Literal("mTracksAtCaloP4"), OffsetOf(__shadow__::__reco__JetExtendedAssociation__JetExtendedData, mTracksAtCaloP4), ::Reflex::PUBLIC);
}
//------Delayed function member builder for class JetExtendedData -------------------
void __reco__JetExtendedAssociation__JetExtendedData_db_funcmem(Reflex::Class*) {

}
//------Stub functions for class AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData, std::allocator<reco::JetExtendedAssociation::JetExtendedData> >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> -------------------------------
static void constructor_23271( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>();
  else ::new(mem) ::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>();
}

static void constructor_23272( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if ( arg.size() == 1 ) {
    if (retaddr) *(void**)retaddr = ::new(mem) ::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>(*(const ::edm::RefToBaseProd<reco::Jet>*)arg[0]);
  else ::new(mem) ::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>(*(const ::edm::RefToBaseProd<reco::Jet>*)arg[0]);
  }
  else if ( arg.size() == 2 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>(*(const ::edm::RefToBaseProd<reco::Jet>*)arg[0],
      (const ::edm::View<reco::Jet>*)arg[1]);
  else ::new(mem) ::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>(*(const ::edm::RefToBaseProd<reco::Jet>*)arg[0],
      (const ::edm::View<reco::Jet>*)arg[1]);
  }
}

static void constructor_23273( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>(*(const ::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>*)arg[0]);
  else ::new(mem) ::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>(*(const ::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>*)arg[0]);
}

static void destructor_23274(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>*)o)->::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>::~AssociationVector)();
}
static  void method_23275( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (unsigned int)((((const ::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>*)o)->size)());
  else   (((const ::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>*)o)->size)();
}

static  void method_23276( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>*)o)->empty)());
  else   (((const ::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>*)o)->empty)();
}

static  void operator_23277( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>*)o)->operator[])(*(unsigned int*)arg[0]);
  else   (((const ::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>*)o)->operator[])(*(unsigned int*)arg[0]);
}

static  void operator_23278( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>*)o)->operator[])(*(const ::edm::RefToBase<reco::Jet>*)arg[0]);
  else   (((const ::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>*)o)->operator[])(*(const ::edm::RefToBase<reco::Jet>*)arg[0]);
}

static  void operator_23279( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>*)o)->operator[])(*(const ::edm::RefToBase<reco::Jet>*)arg[0]);
  else   (((::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>*)o)->operator[])(*(const ::edm::RefToBase<reco::Jet>*)arg[0]);
}

static  void operator_23280( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>*)o)->operator=)(*(const ::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>*)arg[0]);
  else   (((::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>*)o)->operator=)(*(const ::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>*)arg[0]);
}

static  void method_23281( void*, void* o, const std::vector<void*>&, void*)
{
  (((::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>*)o)->clear)();
}

static  void method_23282( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>*)o)->swap)(*(::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>*)arg[0]);
}

static  void method_23283( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>*)o)->keyProduct)();
  else   (((const ::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>*)o)->keyProduct)();
}

static  void method_23284( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (edm::RefToBase<reco::Jet>)((((const ::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>*)o)->key)(*(unsigned int*)arg[0]));
  else   (((const ::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>*)o)->key)(*(unsigned int*)arg[0]);
}

static  void method_23285( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (reco::JetExtendedAssociation::JetExtendedData)((((const ::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>*)o)->value)(*(unsigned int*)arg[0]));
  else   (((const ::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>*)o)->value)(*(unsigned int*)arg[0]);
}

static  void method_23286( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>*)o)->setValue)(*(unsigned int*)arg[0],
    *(const ::reco::JetExtendedAssociation::JetExtendedData*)arg[1]);
}

static  void method_23287( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>*)o)->fillView)(*(const ::edm::ProductID*)arg[0],
    *(::std::vector<const void*>*)arg[1],
    *(::edm::helper_vector*)arg[2]);
}

static  void method_23288( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<const std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>*,std::vector<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >)((((const ::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>*)o)->begin)());
  else   (((const ::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>*)o)->begin)();
}

static  void method_23289( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<const std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>*,std::vector<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >)((((const ::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>*)o)->end)());
  else   (((const ::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>*)o)->end)();
}

static  void method_23290( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (short)((((::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>*)o)->Class_Version)());
  else   (((::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>*)o)->Class_Version)();
}

static void method_newdel_4858( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData, std::allocator<reco::JetExtendedAssociation::JetExtendedData> >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> -------------------------------
void __edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_reco__JetExtendedAssociation__JetExtendedData__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__db_datamem(Reflex::Class*);
void __edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_reco__JetExtendedAssociation__JetExtendedData__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_reco__JetExtendedAssociation__JetExtendedData__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__datamem_bld(&__edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_reco__JetExtendedAssociation__JetExtendedData__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__db_datamem);
Reflex::GenreflexMemberBuilder __edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_reco__JetExtendedAssociation__JetExtendedData__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__funcmem_bld(&__edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_reco__JetExtendedAssociation__JetExtendedData__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__db_funcmem);
void __edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_reco__JetExtendedAssociation__JetExtendedData__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>"), typeid(::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>), sizeof(::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("ClassVersion"), ::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>::Class_Version())
  .AddProperty(Reflex::Literal("n_pattern"), "edm::AssociationVector<*>")
  .AddTypedef(type_4215, Reflex::Literal("edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>::boost_static_assert_typedef_63"))
  .AddTypedef(type_4721, Reflex::Literal("edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>::refprod_type"))
  .AddTypedef(type_4815, Reflex::Literal("edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>::CKey"))
  .AddTypedef(type_219, Reflex::Literal("edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>::size_type"))
  .AddTypedef(type_7762, Reflex::Literal("edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>::key_type"))
  .AddTypedef(type_2888, Reflex::Literal("edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>::value_type"))
  .AddTypedef(type_2994, Reflex::Literal("edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>::transient_vector_type"))
  .AddTypedef(type_14748, Reflex::Literal("edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>::const_reference"))
  .AddTypedef(type_8235, Reflex::Literal("edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>::const_iterator"))
  .AddEnum(Reflex::Literal("edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>::CacheState"), Reflex::Literal("kUnset=0;kFilling=1;kSet=2"), &typeid(::Reflex::UnknownType), ::Reflex::PRIVATE | ::Reflex::ARTIFICIAL)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("AssociationVector"), constructor_23271, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_37138, type_37139), Reflex::Literal("AssociationVector"), constructor_23272, 0, "ref;coll=0", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_20316), Reflex::Literal("AssociationVector"), constructor_23273, 0, "", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~AssociationVector"), destructor_23274, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_4858, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_reco__JetExtendedAssociation__JetExtendedData__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_reco__JetExtendedAssociation__JetExtendedData__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__funcmem_bld);
}

//------Delayed data member builder for class AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData, std::allocator<reco::JetExtendedAssociation::JetExtendedData> >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> -------------------
void __edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_reco__JetExtendedAssociation__JetExtendedData__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_2995, Reflex::Literal("data_"), OffsetOf(__shadow__::__edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_reco__JetExtendedAssociation__JetExtendedData__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference_, data_), ::Reflex::PRIVATE)
  .AddDataMember(type_4721, Reflex::Literal("ref_"), OffsetOf(__shadow__::__edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_reco__JetExtendedAssociation__JetExtendedData__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference_, ref_), ::Reflex::PRIVATE)
  .AddDataMember(type_37681, Reflex::Literal("transientVector_"), OffsetOf(__shadow__::__edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_reco__JetExtendedAssociation__JetExtendedData__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference_, transientVector_), ::Reflex::PRIVATE | ::Reflex::TRANSIENT | ::Reflex::MUTABLE);
}
//------Delayed function member builder for class AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData, std::allocator<reco::JetExtendedAssociation::JetExtendedData> >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> -------------------
void __edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_reco__JetExtendedAssociation__JetExtendedData__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_219), Reflex::Literal("size"), method_23275, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("empty"), method_23276, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_14748, type_219), Reflex::Literal("operator[]"), operator_23277, 0, "n", ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_14813, type_33732), Reflex::Literal("operator[]"), operator_23278, 0, "k", ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_14811, type_33732), Reflex::Literal("operator[]"), operator_23279, 0, "k", ::Reflex::PUBLIC | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_37682, type_20316), Reflex::Literal("operator="), operator_23280, 0, "", ::Reflex::PUBLIC | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698), Reflex::Literal("clear"), method_23281, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_37682), Reflex::Literal("swap"), method_23282, 0, "other", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_37138), Reflex::Literal("keyProduct"), method_23283, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4891, type_219), Reflex::Literal("key"), method_23284, 0, "i", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_12876c, type_219), Reflex::Literal("value"), method_23285, 0, "i", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_219, type_14813), Reflex::Literal("setValue"), method_23286, 0, "i;val", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_20008, type_20132, type_20133), Reflex::Literal("fillView"), method_23287, 0, "id;pointers;helpers", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_8235), Reflex::Literal("begin"), method_23288, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_8235), Reflex::Literal("end"), method_23289, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_89), Reflex::Literal("Class_Version"), method_23290, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC);
}
//------Stub functions for class AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track, edm::refhelper::FindUsingAdvance<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track> >, std::allocator<edm::RefVector<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track, edm::refhelper::FindUsingAdvance<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track> > > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> -------------------------------
static void constructor_23306( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>();
  else ::new(mem) ::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>();
}

static void constructor_23307( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if ( arg.size() == 1 ) {
    if (retaddr) *(void**)retaddr = ::new(mem) ::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>(*(const ::edm::RefToBaseProd<reco::Jet>*)arg[0]);
  else ::new(mem) ::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>(*(const ::edm::RefToBaseProd<reco::Jet>*)arg[0]);
  }
  else if ( arg.size() == 2 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>(*(const ::edm::RefToBaseProd<reco::Jet>*)arg[0],
      (const ::edm::View<reco::Jet>*)arg[1]);
  else ::new(mem) ::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>(*(const ::edm::RefToBaseProd<reco::Jet>*)arg[0],
      (const ::edm::View<reco::Jet>*)arg[1]);
  }
}

static void constructor_23308( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>(*(const ::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>*)arg[0]);
  else ::new(mem) ::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>(*(const ::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>*)arg[0]);
}

static void destructor_23309(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>*)o)->::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>::~AssociationVector)();
}
static  void method_23310( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (unsigned int)((((const ::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>*)o)->size)());
  else   (((const ::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>*)o)->size)();
}

static  void method_23311( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>*)o)->empty)());
  else   (((const ::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>*)o)->empty)();
}

static  void operator_23312( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>*)o)->operator[])(*(unsigned int*)arg[0]);
  else   (((const ::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>*)o)->operator[])(*(unsigned int*)arg[0]);
}

static  void operator_23313( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>*)o)->operator[])(*(const ::edm::RefToBase<reco::Jet>*)arg[0]);
  else   (((const ::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>*)o)->operator[])(*(const ::edm::RefToBase<reco::Jet>*)arg[0]);
}

static  void operator_23314( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>*)o)->operator[])(*(const ::edm::RefToBase<reco::Jet>*)arg[0]);
  else   (((::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>*)o)->operator[])(*(const ::edm::RefToBase<reco::Jet>*)arg[0]);
}

static  void operator_23315( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>*)o)->operator=)(*(const ::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>*)arg[0]);
  else   (((::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>*)o)->operator=)(*(const ::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>*)arg[0]);
}

static  void method_23316( void*, void* o, const std::vector<void*>&, void*)
{
  (((::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>*)o)->clear)();
}

static  void method_23317( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>*)o)->swap)(*(::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>*)arg[0]);
}

static  void method_23318( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>*)o)->keyProduct)();
  else   (((const ::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>*)o)->keyProduct)();
}

static  void method_23319( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (edm::RefToBase<reco::Jet>)((((const ::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>*)o)->key)(*(unsigned int*)arg[0]));
  else   (((const ::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>*)o)->key)(*(unsigned int*)arg[0]);
}

static  void method_23320( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> >)((((const ::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>*)o)->value)(*(unsigned int*)arg[0]));
  else   (((const ::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>*)o)->value)(*(unsigned int*)arg[0]);
}

static  void method_23321( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>*)o)->setValue)(*(unsigned int*)arg[0],
    *(const ::edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> >*)arg[1]);
}

static  void method_23322( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>*)o)->fillView)(*(const ::edm::ProductID*)arg[0],
    *(::std::vector<const void*>*)arg[1],
    *(::edm::helper_vector*)arg[2]);
}

static  void method_23323( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<const std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >*,std::vector<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >)((((const ::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>*)o)->begin)());
  else   (((const ::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>*)o)->begin)();
}

static  void method_23324( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<const std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >*,std::vector<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >)((((const ::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>*)o)->end)());
  else   (((const ::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>*)o)->end)();
}

static  void method_23325( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (short)((((::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>*)o)->Class_Version)());
  else   (((::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>*)o)->Class_Version)();
}

static void method_newdel_4859( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track, edm::refhelper::FindUsingAdvance<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track> >, std::allocator<edm::RefVector<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track, edm::refhelper::FindUsingAdvance<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track> > > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> -------------------------------
void __edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__db_datamem(Reflex::Class*);
void __edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__datamem_bld(&__edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__db_datamem);
Reflex::GenreflexMemberBuilder __edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__funcmem_bld(&__edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__db_funcmem);
void __edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>"), typeid(::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>), sizeof(::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("ClassVersion"), ::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>::Class_Version())
  .AddProperty(Reflex::Literal("n_pattern"), "edm::AssociationVector<*>")
  .AddTypedef(type_4215, Reflex::Literal("edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>::boost_static_assert_typedef_63"))
  .AddTypedef(type_4721, Reflex::Literal("edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>::refprod_type"))
  .AddTypedef(type_4815, Reflex::Literal("edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>::CKey"))
  .AddTypedef(type_219, Reflex::Literal("edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>::size_type"))
  .AddTypedef(type_7762, Reflex::Literal("edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>::key_type"))
  .AddTypedef(type_2889, Reflex::Literal("edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>::value_type"))
  .AddTypedef(type_2996, Reflex::Literal("edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>::transient_vector_type"))
  .AddTypedef(type_14878, Reflex::Literal("edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>::const_reference"))
  .AddTypedef(type_8239, Reflex::Literal("edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>::const_iterator"))
  .AddEnum(Reflex::Literal("edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>::CacheState"), Reflex::Literal("kUnset=0;kFilling=1;kSet=2"), &typeid(::Reflex::UnknownType), ::Reflex::PRIVATE | ::Reflex::ARTIFICIAL)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("AssociationVector"), constructor_23306, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_37138, type_37139), Reflex::Literal("AssociationVector"), constructor_23307, 0, "ref;coll=0", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_20328), Reflex::Literal("AssociationVector"), constructor_23308, 0, "", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~AssociationVector"), destructor_23309, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_4859, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__funcmem_bld);
}

//------Delayed data member builder for class AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track, edm::refhelper::FindUsingAdvance<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track> >, std::allocator<edm::RefVector<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track, edm::refhelper::FindUsingAdvance<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track> > > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> -------------------
void __edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_2997, Reflex::Literal("data_"), OffsetOf(__shadow__::__edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference_, data_), ::Reflex::PRIVATE)
  .AddDataMember(type_4721, Reflex::Literal("ref_"), OffsetOf(__shadow__::__edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference_, ref_), ::Reflex::PRIVATE)
  .AddDataMember(type_37683, Reflex::Literal("transientVector_"), OffsetOf(__shadow__::__edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference_, transientVector_), ::Reflex::PRIVATE | ::Reflex::TRANSIENT | ::Reflex::MUTABLE);
}
//------Delayed function member builder for class AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track, edm::refhelper::FindUsingAdvance<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track> >, std::allocator<edm::RefVector<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track, edm::refhelper::FindUsingAdvance<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track> > > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> -------------------
void __edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_219), Reflex::Literal("size"), method_23310, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("empty"), method_23311, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_14878, type_219), Reflex::Literal("operator[]"), operator_23312, 0, "n", ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_14943, type_33732), Reflex::Literal("operator[]"), operator_23313, 0, "k", ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_14941, type_33732), Reflex::Literal("operator[]"), operator_23314, 0, "k", ::Reflex::PUBLIC | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_37684, type_20328), Reflex::Literal("operator="), operator_23315, 0, "", ::Reflex::PUBLIC | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698), Reflex::Literal("clear"), method_23316, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_37684), Reflex::Literal("swap"), method_23317, 0, "other", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_37138), Reflex::Literal("keyProduct"), method_23318, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4891, type_219), Reflex::Literal("key"), method_23319, 0, "i", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4628c, type_219), Reflex::Literal("value"), method_23320, 0, "i", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_219, type_14943), Reflex::Literal("setValue"), method_23321, 0, "i;val", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_20008, type_20132, type_20133), Reflex::Literal("fillView"), method_23322, 0, "id;pointers;helpers", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_8239), Reflex::Literal("begin"), method_23323, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_8239), Reflex::Literal("end"), method_23324, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_89), Reflex::Literal("Class_Version"), method_23325, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC);
}
//------Stub functions for class AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float, std::allocator<float> >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> -------------------------------
static void constructor_23341( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>();
  else ::new(mem) ::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>();
}

static void constructor_23342( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if ( arg.size() == 1 ) {
    if (retaddr) *(void**)retaddr = ::new(mem) ::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>(*(const ::edm::RefToBaseProd<reco::Jet>*)arg[0]);
  else ::new(mem) ::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>(*(const ::edm::RefToBaseProd<reco::Jet>*)arg[0]);
  }
  else if ( arg.size() == 2 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>(*(const ::edm::RefToBaseProd<reco::Jet>*)arg[0],
      (const ::edm::View<reco::Jet>*)arg[1]);
  else ::new(mem) ::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>(*(const ::edm::RefToBaseProd<reco::Jet>*)arg[0],
      (const ::edm::View<reco::Jet>*)arg[1]);
  }
}

static void constructor_23343( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>(*(const ::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>*)arg[0]);
  else ::new(mem) ::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>(*(const ::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>*)arg[0]);
}

static void destructor_23344(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>*)o)->::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>::~AssociationVector)();
}
static  void method_23345( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (unsigned int)((((const ::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>*)o)->size)());
  else   (((const ::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>*)o)->size)();
}

static  void method_23346( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>*)o)->empty)());
  else   (((const ::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>*)o)->empty)();
}

static  void operator_23347( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>*)o)->operator[])(*(unsigned int*)arg[0]);
  else   (((const ::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>*)o)->operator[])(*(unsigned int*)arg[0]);
}

static  void operator_23348( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>*)o)->operator[])(*(const ::edm::RefToBase<reco::Jet>*)arg[0]);
  else   (((const ::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>*)o)->operator[])(*(const ::edm::RefToBase<reco::Jet>*)arg[0]);
}

static  void operator_23349( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>*)o)->operator[])(*(const ::edm::RefToBase<reco::Jet>*)arg[0]);
  else   (((::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>*)o)->operator[])(*(const ::edm::RefToBase<reco::Jet>*)arg[0]);
}

static  void operator_23350( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>*)o)->operator=)(*(const ::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>*)arg[0]);
  else   (((::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>*)o)->operator=)(*(const ::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>*)arg[0]);
}

static  void method_23351( void*, void* o, const std::vector<void*>&, void*)
{
  (((::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>*)o)->clear)();
}

static  void method_23352( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>*)o)->swap)(*(::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>*)arg[0]);
}

static  void method_23353( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>*)o)->keyProduct)();
  else   (((const ::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>*)o)->keyProduct)();
}

static  void method_23354( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (edm::RefToBase<reco::Jet>)((((const ::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>*)o)->key)(*(unsigned int*)arg[0]));
  else   (((const ::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>*)o)->key)(*(unsigned int*)arg[0]);
}

static  void method_23355( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (float)((((const ::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>*)o)->value)(*(unsigned int*)arg[0]));
  else   (((const ::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>*)o)->value)(*(unsigned int*)arg[0]);
}

static  void method_23356( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>*)o)->setValue)(*(unsigned int*)arg[0],
    *(const float*)arg[1]);
}

static  void method_23357( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>*)o)->fillView)(*(const ::edm::ProductID*)arg[0],
    *(::std::vector<const void*>*)arg[1],
    *(::edm::helper_vector*)arg[2]);
}

static  void method_23358( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<const std::pair<edm::RefToBase<reco::Jet>,float>*,std::vector<std::pair<edm::RefToBase<reco::Jet>,float> > >)((((const ::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>*)o)->begin)());
  else   (((const ::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>*)o)->begin)();
}

static  void method_23359( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<const std::pair<edm::RefToBase<reco::Jet>,float>*,std::vector<std::pair<edm::RefToBase<reco::Jet>,float> > >)((((const ::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>*)o)->end)());
  else   (((const ::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>*)o)->end)();
}

static  void method_23360( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (short)((((::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>*)o)->Class_Version)());
  else   (((::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>*)o)->Class_Version)();
}

static void method_newdel_4860( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float, std::allocator<float> >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> -------------------------------
void __edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_float__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__db_datamem(Reflex::Class*);
void __edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_float__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_float__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__datamem_bld(&__edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_float__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__db_datamem);
Reflex::GenreflexMemberBuilder __edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_float__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__funcmem_bld(&__edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_float__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__db_funcmem);
void __edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_float__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>"), typeid(::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>), sizeof(::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("ClassVersion"), ::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>::Class_Version())
  .AddProperty(Reflex::Literal("n_pattern"), "edm::AssociationVector<*>")
  .AddTypedef(type_4215, Reflex::Literal("edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>::boost_static_assert_typedef_63"))
  .AddTypedef(type_4721, Reflex::Literal("edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>::refprod_type"))
  .AddTypedef(type_4815, Reflex::Literal("edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>::CKey"))
  .AddTypedef(type_219, Reflex::Literal("edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>::size_type"))
  .AddTypedef(type_7762, Reflex::Literal("edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>::key_type"))
  .AddTypedef(type_2911, Reflex::Literal("edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>::value_type"))
  .AddTypedef(type_2998, Reflex::Literal("edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>::transient_vector_type"))
  .AddTypedef(type_15008, Reflex::Literal("edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>::const_reference"))
  .AddTypedef(type_8243, Reflex::Literal("edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>::const_iterator"))
  .AddEnum(Reflex::Literal("edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>::CacheState"), Reflex::Literal("kUnset=0;kFilling=1;kSet=2"), &typeid(::Reflex::UnknownType), ::Reflex::PRIVATE | ::Reflex::ARTIFICIAL)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("AssociationVector"), constructor_23341, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_37138, type_37139), Reflex::Literal("AssociationVector"), constructor_23342, 0, "ref;coll=0", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_20340), Reflex::Literal("AssociationVector"), constructor_23343, 0, "", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~AssociationVector"), destructor_23344, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_4860, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_float__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_float__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__funcmem_bld);
}

//------Delayed data member builder for class AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float, std::allocator<float> >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> -------------------
void __edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_float__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_2991, Reflex::Literal("data_"), OffsetOf(__shadow__::__edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_float__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference_, data_), ::Reflex::PRIVATE)
  .AddDataMember(type_4721, Reflex::Literal("ref_"), OffsetOf(__shadow__::__edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_float__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference_, ref_), ::Reflex::PRIVATE)
  .AddDataMember(type_37685, Reflex::Literal("transientVector_"), OffsetOf(__shadow__::__edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_float__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference_, transientVector_), ::Reflex::PRIVATE | ::Reflex::TRANSIENT | ::Reflex::MUTABLE);
}
//------Delayed function member builder for class AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float, std::allocator<float> >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> -------------------
void __edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_float__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_219), Reflex::Literal("size"), method_23345, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("empty"), method_23346, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_15008, type_219), Reflex::Literal("operator[]"), operator_23347, 0, "n", ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_14618, type_33732), Reflex::Literal("operator[]"), operator_23348, 0, "k", ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_14616, type_33732), Reflex::Literal("operator[]"), operator_23349, 0, "k", ::Reflex::PUBLIC | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_37686, type_20340), Reflex::Literal("operator="), operator_23350, 0, "", ::Reflex::PUBLIC | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698), Reflex::Literal("clear"), method_23351, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_37686), Reflex::Literal("swap"), method_23352, 0, "other", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_37138), Reflex::Literal("keyProduct"), method_23353, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4891, type_219), Reflex::Literal("key"), method_23354, 0, "i", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_902c, type_219), Reflex::Literal("value"), method_23355, 0, "i", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_219, type_14618), Reflex::Literal("setValue"), method_23356, 0, "i;val", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_20008, type_20132, type_20133), Reflex::Literal("fillView"), method_23357, 0, "id;pointers;helpers", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_8243), Reflex::Literal("begin"), method_23358, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_8243), Reflex::Literal("end"), method_23359, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_89), Reflex::Literal("Class_Version"), method_23360, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC);
}
//------Stub functions for class RefProd<std::vector<reco::PFClusterJet, std::allocator<reco::PFClusterJet> > > -------------------------------
static  void operator_23555( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::RefProd<std::vector<reco::PFClusterJet> >*)o)->operator=)(*(const ::edm::RefProd<std::vector<reco::PFClusterJet> >*)arg[0]);
  else   (((::edm::RefProd<std::vector<reco::PFClusterJet> >*)o)->operator=)(*(const ::edm::RefProd<std::vector<reco::PFClusterJet> >*)arg[0]);
}

static void constructor_23556( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefProd<std::vector<reco::PFClusterJet> >(*(const ::edm::RefProd<std::vector<reco::PFClusterJet> >*)arg[0]);
  else ::new(mem) ::edm::RefProd<std::vector<reco::PFClusterJet> >(*(const ::edm::RefProd<std::vector<reco::PFClusterJet> >*)arg[0]);
}

static void constructor_23557( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefProd<std::vector<reco::PFClusterJet> >();
  else ::new(mem) ::edm::RefProd<std::vector<reco::PFClusterJet> >();
}

static void constructor_23558( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefProd<std::vector<reco::PFClusterJet> >(*(const ::edm::Handle<std::vector<reco::PFClusterJet> >*)arg[0]);
  else ::new(mem) ::edm::RefProd<std::vector<reco::PFClusterJet> >(*(const ::edm::Handle<std::vector<reco::PFClusterJet> >*)arg[0]);
}

static void constructor_23559( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefProd<std::vector<reco::PFClusterJet> >(*(const ::edm::OrphanHandle<std::vector<reco::PFClusterJet> >*)arg[0]);
  else ::new(mem) ::edm::RefProd<std::vector<reco::PFClusterJet> >(*(const ::edm::OrphanHandle<std::vector<reco::PFClusterJet> >*)arg[0]);
}

static void constructor_23560( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefProd<std::vector<reco::PFClusterJet> >((const ::std::vector<reco::PFClusterJet>*)arg[0]);
  else ::new(mem) ::edm::RefProd<std::vector<reco::PFClusterJet> >((const ::std::vector<reco::PFClusterJet>*)arg[0]);
}

static void constructor_23561( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefProd<std::vector<reco::PFClusterJet> >(*(const ::edm::TestHandle<std::vector<reco::PFClusterJet> >*)arg[0]);
  else ::new(mem) ::edm::RefProd<std::vector<reco::PFClusterJet> >(*(const ::edm::TestHandle<std::vector<reco::PFClusterJet> >*)arg[0]);
}

static void constructor_23562( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefProd<std::vector<reco::PFClusterJet> >(*(const ::edm::ProductID*)arg[0],
      (const ::edm::EDProductGetter*)arg[1]);
  else ::new(mem) ::edm::RefProd<std::vector<reco::PFClusterJet> >(*(const ::edm::ProductID*)arg[0],
      (const ::edm::EDProductGetter*)arg[1]);
}

static void destructor_23563(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::RefProd<std::vector<reco::PFClusterJet> >*)o)->::edm::RefProd<std::vector<reco::PFClusterJet> >::~RefProd)();
}
static  void operator_23564( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::RefProd<std::vector<reco::PFClusterJet> >*)o)->operator*)();
  else   (((const ::edm::RefProd<std::vector<reco::PFClusterJet> >*)o)->operator*)();
}

static  void operator_23565( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::RefProd<std::vector<reco::PFClusterJet> >*)o)->operator->)());
  else   (((const ::edm::RefProd<std::vector<reco::PFClusterJet> >*)o)->operator->)();
}

static  void method_23566( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::RefProd<std::vector<reco::PFClusterJet> >*)o)->get)());
  else   (((const ::edm::RefProd<std::vector<reco::PFClusterJet> >*)o)->get)();
}

static  void method_23567( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::RefProd<std::vector<reco::PFClusterJet> >*)o)->product)());
  else   (((const ::edm::RefProd<std::vector<reco::PFClusterJet> >*)o)->product)();
}

static  void method_23568( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::RefProd<std::vector<reco::PFClusterJet> >*)o)->refCore)();
  else   (((const ::edm::RefProd<std::vector<reco::PFClusterJet> >*)o)->refCore)();
}

static  void method_23569( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefProd<std::vector<reco::PFClusterJet> >*)o)->isNull)());
  else   (((const ::edm::RefProd<std::vector<reco::PFClusterJet> >*)o)->isNull)();
}

static  void method_23570( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefProd<std::vector<reco::PFClusterJet> >*)o)->isNonnull)());
  else   (((const ::edm::RefProd<std::vector<reco::PFClusterJet> >*)o)->isNonnull)();
}

static  void operator_23571( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefProd<std::vector<reco::PFClusterJet> >*)o)->operator!)());
  else   (((const ::edm::RefProd<std::vector<reco::PFClusterJet> >*)o)->operator!)();
}

static  void method_23572( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::ProductID)((((const ::edm::RefProd<std::vector<reco::PFClusterJet> >*)o)->id)());
  else   (((const ::edm::RefProd<std::vector<reco::PFClusterJet> >*)o)->id)();
}

static  void method_23573( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::RefProd<std::vector<reco::PFClusterJet> >*)o)->productGetter)());
  else   (((const ::edm::RefProd<std::vector<reco::PFClusterJet> >*)o)->productGetter)();
}

static  void method_23574( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefProd<std::vector<reco::PFClusterJet> >*)o)->hasCache)());
  else   (((const ::edm::RefProd<std::vector<reco::PFClusterJet> >*)o)->hasCache)();
}

static  void method_23575( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefProd<std::vector<reco::PFClusterJet> >*)o)->hasProductCache)());
  else   (((const ::edm::RefProd<std::vector<reco::PFClusterJet> >*)o)->hasProductCache)();
}

static  void method_23576( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefProd<std::vector<reco::PFClusterJet> >*)o)->isAvailable)());
  else   (((const ::edm::RefProd<std::vector<reco::PFClusterJet> >*)o)->isAvailable)();
}

static  void method_23577( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefProd<std::vector<reco::PFClusterJet> >*)o)->isTransient)());
  else   (((const ::edm::RefProd<std::vector<reco::PFClusterJet> >*)o)->isTransient)();
}

static  void method_23578( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::edm::RefProd<std::vector<reco::PFClusterJet> >*)o)->swap)(*(::edm::RefProd<std::vector<reco::PFClusterJet> >*)arg[0]);
}

static  void method_23579( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (short)((((::edm::RefProd<std::vector<reco::PFClusterJet> >*)o)->Class_Version)());
  else   (((::edm::RefProd<std::vector<reco::PFClusterJet> >*)o)->Class_Version)();
}

static void method_newdel_4874( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::RefProd<std::vector<reco::PFClusterJet> > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::RefProd<std::vector<reco::PFClusterJet> > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::RefProd<std::vector<reco::PFClusterJet> > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::RefProd<std::vector<reco::PFClusterJet> > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::RefProd<std::vector<reco::PFClusterJet> > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class RefProd<std::vector<reco::PFClusterJet, std::allocator<reco::PFClusterJet> > > -------------------------------
void __edm__RefProd_std__vector_reco__PFClusterJet_s__db_datamem(Reflex::Class*);
void __edm__RefProd_std__vector_reco__PFClusterJet_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__RefProd_std__vector_reco__PFClusterJet_s__datamem_bld(&__edm__RefProd_std__vector_reco__PFClusterJet_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__RefProd_std__vector_reco__PFClusterJet_s__funcmem_bld(&__edm__RefProd_std__vector_reco__PFClusterJet_s__db_funcmem);
void __edm__RefProd_std__vector_reco__PFClusterJet_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::RefProd<std::vector<reco::PFClusterJet> >"), typeid(::edm::RefProd<std::vector<reco::PFClusterJet> >), sizeof(::edm::RefProd<std::vector<reco::PFClusterJet> >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("ClassVersion"), ::edm::RefProd<std::vector<reco::PFClusterJet> >::Class_Version())
  .AddTypedef(type_2962, Reflex::Literal("edm::RefProd<std::vector<reco::PFClusterJet> >::product_type"))
  .AddTypedef(type_2962, Reflex::Literal("edm::RefProd<std::vector<reco::PFClusterJet> >::value_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_37725, type_37726), Reflex::Literal("operator="), operator_23555, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_37726), Reflex::Literal("RefProd"), constructor_23556, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("RefProd"), constructor_23557, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_37727), Reflex::Literal("RefProd"), constructor_23558, 0, "handle", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_37728), Reflex::Literal("RefProd"), constructor_23559, 0, "handle", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_37023), Reflex::Literal("RefProd"), constructor_23560, 0, "iProduct", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_37729), Reflex::Literal("RefProd"), constructor_23561, 0, "handle", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_20008, type_20128), Reflex::Literal("RefProd"), constructor_23562, 0, "productID;prodGetter", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~RefProd"), destructor_23563, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_4874, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__RefProd_std__vector_reco__PFClusterJet_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__RefProd_std__vector_reco__PFClusterJet_s__funcmem_bld);
}

//------Delayed data member builder for class RefProd<std::vector<reco::PFClusterJet, std::allocator<reco::PFClusterJet> > > -------------------
void __edm__RefProd_std__vector_reco__PFClusterJet_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_4847, Reflex::Literal("product_"), OffsetOf(__shadow__::__edm__RefProd_std__vector_reco__PFClusterJet_s_, product_), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class RefProd<std::vector<reco::PFClusterJet, std::allocator<reco::PFClusterJet> > > -------------------
void __edm__RefProd_std__vector_reco__PFClusterJet_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_20352), Reflex::Literal("operator*"), operator_23564, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_37023), Reflex::Literal("operator->"), operator_23565, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_37023), Reflex::Literal("get"), method_23566, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_37023), Reflex::Literal("product"), method_23567, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_23020), Reflex::Literal("refCore"), method_23568, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("isNull"), method_23569, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("isNonnull"), method_23570, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("operator!"), operator_23571, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4974), Reflex::Literal("id"), method_23572, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_20128), Reflex::Literal("productGetter"), method_23573, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("hasCache"), method_23574, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("hasProductCache"), method_23575, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("isAvailable"), method_23576, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("isTransient"), method_23577, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_37725), Reflex::Literal("swap"), method_23578, 0, "other", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_89), Reflex::Literal("Class_Version"), method_23579, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC);
}
//------Stub functions for class RefProd<std::vector<reco::TrackJet, std::allocator<reco::TrackJet> > > -------------------------------
static  void operator_23613( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::RefProd<std::vector<reco::TrackJet> >*)o)->operator=)(*(const ::edm::RefProd<std::vector<reco::TrackJet> >*)arg[0]);
  else   (((::edm::RefProd<std::vector<reco::TrackJet> >*)o)->operator=)(*(const ::edm::RefProd<std::vector<reco::TrackJet> >*)arg[0]);
}

static void constructor_23614( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefProd<std::vector<reco::TrackJet> >(*(const ::edm::RefProd<std::vector<reco::TrackJet> >*)arg[0]);
  else ::new(mem) ::edm::RefProd<std::vector<reco::TrackJet> >(*(const ::edm::RefProd<std::vector<reco::TrackJet> >*)arg[0]);
}

static void constructor_23615( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefProd<std::vector<reco::TrackJet> >();
  else ::new(mem) ::edm::RefProd<std::vector<reco::TrackJet> >();
}

static void constructor_23616( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefProd<std::vector<reco::TrackJet> >(*(const ::edm::Handle<std::vector<reco::TrackJet> >*)arg[0]);
  else ::new(mem) ::edm::RefProd<std::vector<reco::TrackJet> >(*(const ::edm::Handle<std::vector<reco::TrackJet> >*)arg[0]);
}

static void constructor_23617( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefProd<std::vector<reco::TrackJet> >(*(const ::edm::OrphanHandle<std::vector<reco::TrackJet> >*)arg[0]);
  else ::new(mem) ::edm::RefProd<std::vector<reco::TrackJet> >(*(const ::edm::OrphanHandle<std::vector<reco::TrackJet> >*)arg[0]);
}

static void constructor_23618( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefProd<std::vector<reco::TrackJet> >((const ::std::vector<reco::TrackJet>*)arg[0]);
  else ::new(mem) ::edm::RefProd<std::vector<reco::TrackJet> >((const ::std::vector<reco::TrackJet>*)arg[0]);
}

static void constructor_23619( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefProd<std::vector<reco::TrackJet> >(*(const ::edm::TestHandle<std::vector<reco::TrackJet> >*)arg[0]);
  else ::new(mem) ::edm::RefProd<std::vector<reco::TrackJet> >(*(const ::edm::TestHandle<std::vector<reco::TrackJet> >*)arg[0]);
}

static void constructor_23620( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefProd<std::vector<reco::TrackJet> >(*(const ::edm::ProductID*)arg[0],
      (const ::edm::EDProductGetter*)arg[1]);
  else ::new(mem) ::edm::RefProd<std::vector<reco::TrackJet> >(*(const ::edm::ProductID*)arg[0],
      (const ::edm::EDProductGetter*)arg[1]);
}

static void destructor_23621(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::RefProd<std::vector<reco::TrackJet> >*)o)->::edm::RefProd<std::vector<reco::TrackJet> >::~RefProd)();
}
static  void operator_23622( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::RefProd<std::vector<reco::TrackJet> >*)o)->operator*)();
  else   (((const ::edm::RefProd<std::vector<reco::TrackJet> >*)o)->operator*)();
}

static  void operator_23623( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::RefProd<std::vector<reco::TrackJet> >*)o)->operator->)());
  else   (((const ::edm::RefProd<std::vector<reco::TrackJet> >*)o)->operator->)();
}

static  void method_23624( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::RefProd<std::vector<reco::TrackJet> >*)o)->get)());
  else   (((const ::edm::RefProd<std::vector<reco::TrackJet> >*)o)->get)();
}

static  void method_23625( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::RefProd<std::vector<reco::TrackJet> >*)o)->product)());
  else   (((const ::edm::RefProd<std::vector<reco::TrackJet> >*)o)->product)();
}

static  void method_23626( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::RefProd<std::vector<reco::TrackJet> >*)o)->refCore)();
  else   (((const ::edm::RefProd<std::vector<reco::TrackJet> >*)o)->refCore)();
}

static  void method_23627( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefProd<std::vector<reco::TrackJet> >*)o)->isNull)());
  else   (((const ::edm::RefProd<std::vector<reco::TrackJet> >*)o)->isNull)();
}

static  void method_23628( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefProd<std::vector<reco::TrackJet> >*)o)->isNonnull)());
  else   (((const ::edm::RefProd<std::vector<reco::TrackJet> >*)o)->isNonnull)();
}

static  void operator_23629( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefProd<std::vector<reco::TrackJet> >*)o)->operator!)());
  else   (((const ::edm::RefProd<std::vector<reco::TrackJet> >*)o)->operator!)();
}

static  void method_23630( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::ProductID)((((const ::edm::RefProd<std::vector<reco::TrackJet> >*)o)->id)());
  else   (((const ::edm::RefProd<std::vector<reco::TrackJet> >*)o)->id)();
}

static  void method_23631( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::RefProd<std::vector<reco::TrackJet> >*)o)->productGetter)());
  else   (((const ::edm::RefProd<std::vector<reco::TrackJet> >*)o)->productGetter)();
}

static  void method_23632( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefProd<std::vector<reco::TrackJet> >*)o)->hasCache)());
  else   (((const ::edm::RefProd<std::vector<reco::TrackJet> >*)o)->hasCache)();
}

static  void method_23633( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefProd<std::vector<reco::TrackJet> >*)o)->hasProductCache)());
  else   (((const ::edm::RefProd<std::vector<reco::TrackJet> >*)o)->hasProductCache)();
}

static  void method_23634( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefProd<std::vector<reco::TrackJet> >*)o)->isAvailable)());
  else   (((const ::edm::RefProd<std::vector<reco::TrackJet> >*)o)->isAvailable)();
}

static  void method_23635( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefProd<std::vector<reco::TrackJet> >*)o)->isTransient)());
  else   (((const ::edm::RefProd<std::vector<reco::TrackJet> >*)o)->isTransient)();
}

static  void method_23636( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::edm::RefProd<std::vector<reco::TrackJet> >*)o)->swap)(*(::edm::RefProd<std::vector<reco::TrackJet> >*)arg[0]);
}

static  void method_23637( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (short)((((::edm::RefProd<std::vector<reco::TrackJet> >*)o)->Class_Version)());
  else   (((::edm::RefProd<std::vector<reco::TrackJet> >*)o)->Class_Version)();
}

static void method_newdel_4876( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::RefProd<std::vector<reco::TrackJet> > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::RefProd<std::vector<reco::TrackJet> > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::RefProd<std::vector<reco::TrackJet> > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::RefProd<std::vector<reco::TrackJet> > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::RefProd<std::vector<reco::TrackJet> > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class RefProd<std::vector<reco::TrackJet, std::allocator<reco::TrackJet> > > -------------------------------
void __edm__RefProd_std__vector_reco__TrackJet_s__db_datamem(Reflex::Class*);
void __edm__RefProd_std__vector_reco__TrackJet_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__RefProd_std__vector_reco__TrackJet_s__datamem_bld(&__edm__RefProd_std__vector_reco__TrackJet_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__RefProd_std__vector_reco__TrackJet_s__funcmem_bld(&__edm__RefProd_std__vector_reco__TrackJet_s__db_funcmem);
void __edm__RefProd_std__vector_reco__TrackJet_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::RefProd<std::vector<reco::TrackJet> >"), typeid(::edm::RefProd<std::vector<reco::TrackJet> >), sizeof(::edm::RefProd<std::vector<reco::TrackJet> >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("ClassVersion"), ::edm::RefProd<std::vector<reco::TrackJet> >::Class_Version())
  .AddTypedef(type_2970, Reflex::Literal("edm::RefProd<std::vector<reco::TrackJet> >::product_type"))
  .AddTypedef(type_2970, Reflex::Literal("edm::RefProd<std::vector<reco::TrackJet> >::value_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_37735, type_37736), Reflex::Literal("operator="), operator_23613, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_37736), Reflex::Literal("RefProd"), constructor_23614, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("RefProd"), constructor_23615, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_37737), Reflex::Literal("RefProd"), constructor_23616, 0, "handle", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_37738), Reflex::Literal("RefProd"), constructor_23617, 0, "handle", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_37033), Reflex::Literal("RefProd"), constructor_23618, 0, "iProduct", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_37739), Reflex::Literal("RefProd"), constructor_23619, 0, "handle", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_20008, type_20128), Reflex::Literal("RefProd"), constructor_23620, 0, "productID;prodGetter", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~RefProd"), destructor_23621, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_4876, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__RefProd_std__vector_reco__TrackJet_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__RefProd_std__vector_reco__TrackJet_s__funcmem_bld);
}

//------Delayed data member builder for class RefProd<std::vector<reco::TrackJet, std::allocator<reco::TrackJet> > > -------------------
void __edm__RefProd_std__vector_reco__TrackJet_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_4847, Reflex::Literal("product_"), OffsetOf(__shadow__::__edm__RefProd_std__vector_reco__TrackJet_s_, product_), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class RefProd<std::vector<reco::TrackJet, std::allocator<reco::TrackJet> > > -------------------
void __edm__RefProd_std__vector_reco__TrackJet_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_20376), Reflex::Literal("operator*"), operator_23622, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_37033), Reflex::Literal("operator->"), operator_23623, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_37033), Reflex::Literal("get"), method_23624, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_37033), Reflex::Literal("product"), method_23625, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_23020), Reflex::Literal("refCore"), method_23626, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("isNull"), method_23627, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("isNonnull"), method_23628, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("operator!"), operator_23629, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4974), Reflex::Literal("id"), method_23630, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_20128), Reflex::Literal("productGetter"), method_23631, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("hasCache"), method_23632, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("hasProductCache"), method_23633, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("isAvailable"), method_23634, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("isTransient"), method_23635, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_37735), Reflex::Literal("swap"), method_23636, 0, "other", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_89), Reflex::Literal("Class_Version"), method_23637, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC);
}
//------Stub functions for class RefToBase<reco::Jet> -------------------------------
static void constructor_23641( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefToBase<reco::Jet>();
  else ::new(mem) ::edm::RefToBase<reco::Jet>();
}

static void constructor_23642( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefToBase<reco::Jet>(*(const ::edm::RefToBase<reco::Jet>*)arg[0]);
  else ::new(mem) ::edm::RefToBase<reco::Jet>(*(const ::edm::RefToBase<reco::Jet>*)arg[0]);
}

static void constructor_23643( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefToBase<reco::Jet>(*(const ::edm::RefToBaseProd<reco::Jet>*)arg[0],
      *(::size_t*)arg[1]);
  else ::new(mem) ::edm::RefToBase<reco::Jet>(*(const ::edm::RefToBaseProd<reco::Jet>*)arg[0],
      *(::size_t*)arg[1]);
}

static void constructor_23644( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefToBase<reco::Jet>(*(const ::edm::Handle<edm::View<reco::Jet> >*)arg[0],
      *(::size_t*)arg[1]);
  else ::new(mem) ::edm::RefToBase<reco::Jet>(*(const ::edm::Handle<edm::View<reco::Jet> >*)arg[0],
      *(::size_t*)arg[1]);
}

static void constructor_23645( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefToBase<reco::Jet>(*(::boost::shared_ptr<edm::reftobase::RefHolderBase>*)arg[0]);
  else ::new(mem) ::edm::RefToBase<reco::Jet>(*(::boost::shared_ptr<edm::reftobase::RefHolderBase>*)arg[0]);
}

static void destructor_23646(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::RefToBase<reco::Jet>*)o)->::edm::RefToBase<reco::Jet>::~RefToBase)();
}
static  void operator_23647( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::RefToBase<reco::Jet>*)o)->operator=)(*(const ::edm::RefToBase<reco::Jet>*)arg[0]);
  else   (((::edm::RefToBase<reco::Jet>*)o)->operator=)(*(const ::edm::RefToBase<reco::Jet>*)arg[0]);
}

static  void operator_23648( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::RefToBase<reco::Jet>*)o)->operator*)();
  else   (((const ::edm::RefToBase<reco::Jet>*)o)->operator*)();
}

static  void operator_23649( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::RefToBase<reco::Jet>*)o)->operator->)());
  else   (((const ::edm::RefToBase<reco::Jet>*)o)->operator->)();
}

static  void method_23650( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::RefToBase<reco::Jet>*)o)->get)());
  else   (((const ::edm::RefToBase<reco::Jet>*)o)->get)();
}

static  void method_23651( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::ProductID)((((const ::edm::RefToBase<reco::Jet>*)o)->id)());
  else   (((const ::edm::RefToBase<reco::Jet>*)o)->id)();
}

static  void method_23652( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (size_t)((((const ::edm::RefToBase<reco::Jet>*)o)->key)());
  else   (((const ::edm::RefToBase<reco::Jet>*)o)->key)();
}

static  void method_23653( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefToBase<reco::Jet>*)o)->isNull)());
  else   (((const ::edm::RefToBase<reco::Jet>*)o)->isNull)();
}

static  void method_23654( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefToBase<reco::Jet>*)o)->isNonnull)());
  else   (((const ::edm::RefToBase<reco::Jet>*)o)->isNonnull)();
}

static  void operator_23655( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefToBase<reco::Jet>*)o)->operator!)());
  else   (((const ::edm::RefToBase<reco::Jet>*)o)->operator!)();
}

static  void operator_23656( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefToBase<reco::Jet>*)o)->operator==)(*(const ::edm::RefToBase<reco::Jet>*)arg[0]));
  else   (((const ::edm::RefToBase<reco::Jet>*)o)->operator==)(*(const ::edm::RefToBase<reco::Jet>*)arg[0]);
}

static  void operator_23657( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefToBase<reco::Jet>*)o)->operator!=)(*(const ::edm::RefToBase<reco::Jet>*)arg[0]));
  else   (((const ::edm::RefToBase<reco::Jet>*)o)->operator!=)(*(const ::edm::RefToBase<reco::Jet>*)arg[0]);
}

static  void method_23658( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::edm::RefToBase<reco::Jet>*)o)->swap)(*(::edm::RefToBase<reco::Jet>*)arg[0]);
}

static  void method_23659( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::auto_ptr<edm::reftobase::RefHolderBase>)((((const ::edm::RefToBase<reco::Jet>*)o)->holder)());
  else   (((const ::edm::RefToBase<reco::Jet>*)o)->holder)();
}

static  void method_23660( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::RefToBase<reco::Jet>*)o)->productGetter)());
  else   (((const ::edm::RefToBase<reco::Jet>*)o)->productGetter)();
}

static  void method_23661( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefToBase<reco::Jet>*)o)->hasProductCache)());
  else   (((const ::edm::RefToBase<reco::Jet>*)o)->hasProductCache)();
}

static  void method_23662( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::RefToBase<reco::Jet>*)o)->product)());
  else   (((const ::edm::RefToBase<reco::Jet>*)o)->product)();
}

static  void method_23663( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefToBase<reco::Jet>*)o)->isAvailable)());
  else   (((const ::edm::RefToBase<reco::Jet>*)o)->isAvailable)();
}

static  void method_23664( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (short)((((::edm::RefToBase<reco::Jet>*)o)->Class_Version)());
  else   (((::edm::RefToBase<reco::Jet>*)o)->Class_Version)();
}

static void method_newdel_4891( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::RefToBase<reco::Jet> >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::RefToBase<reco::Jet> >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::RefToBase<reco::Jet> >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::RefToBase<reco::Jet> >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::RefToBase<reco::Jet> >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class RefToBase<reco::Jet> -------------------------------
void __edm__RefToBase_reco__Jet__db_datamem(Reflex::Class*);
void __edm__RefToBase_reco__Jet__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__RefToBase_reco__Jet__datamem_bld(&__edm__RefToBase_reco__Jet__db_datamem);
Reflex::GenreflexMemberBuilder __edm__RefToBase_reco__Jet__funcmem_bld(&__edm__RefToBase_reco__Jet__db_funcmem);
void __edm__RefToBase_reco__Jet__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::RefToBase<reco::Jet>"), typeid(::edm::RefToBase<reco::Jet>), sizeof(::edm::RefToBase<reco::Jet>), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("ClassVersion"), ::edm::RefToBase<reco::Jet>::Class_Version())
  .AddTypedef(type_7762, Reflex::Literal("edm::RefToBase<reco::Jet>::value_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("RefToBase"), constructor_23641, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_33732), Reflex::Literal("RefToBase"), constructor_23642, 0, "other", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_37138, type_2125), Reflex::Literal("RefToBase"), constructor_23643, 0, "r;i", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_37136, type_2125), Reflex::Literal("RefToBase"), constructor_23644, 0, "handle;i", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_4378), Reflex::Literal("RefToBase"), constructor_23645, 0, "p", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~RefToBase"), destructor_23646, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_4891, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__RefToBase_reco__Jet__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__RefToBase_reco__Jet__funcmem_bld);
}

//------Delayed data member builder for class RefToBase<reco::Jet> -------------------
void __edm__RefToBase_reco__Jet__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_37740, Reflex::Literal("holder_"), OffsetOf(__shadow__::__edm__RefToBase_reco__Jet_, holder_), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class RefToBase<reco::Jet> -------------------
void __edm__RefToBase_reco__Jet__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_37741, type_33732), Reflex::Literal("operator="), operator_23647, 0, "iRHS", ::Reflex::PUBLIC | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_37742), Reflex::Literal("operator*"), operator_23648, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_37743), Reflex::Literal("operator->"), operator_23649, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_37743), Reflex::Literal("get"), method_23650, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4974), Reflex::Literal("id"), method_23651, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2125), Reflex::Literal("key"), method_23652, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("isNull"), method_23653, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("isNonnull"), method_23654, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("operator!"), operator_23655, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569, type_33732), Reflex::Literal("operator=="), operator_23656, 0, "rhs", ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569, type_33732), Reflex::Literal("operator!="), operator_23657, 0, "rhs", ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_37741), Reflex::Literal("swap"), method_23658, 0, "other", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2762), Reflex::Literal("holder"), method_23659, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_20128), Reflex::Literal("productGetter"), method_23660, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("hasProductCache"), method_23661, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4040), Reflex::Literal("product"), method_23662, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("isAvailable"), method_23663, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_89), Reflex::Literal("Class_Version"), method_23664, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC);
}
//------Stub functions for class Ref<std::vector<reco::PFClusterJet, std::allocator<reco::PFClusterJet> >,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet, std::allocator<reco::PFClusterJet> >, reco::PFClusterJet> > -------------------------------
static  void operator_24161( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)o)->operator=)(*(const ::edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)arg[0]);
  else   (((::edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)o)->operator=)(*(const ::edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)arg[0]);
}

static void constructor_24162( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >(*(const ::edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)arg[0]);
  else ::new(mem) ::edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >(*(const ::edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)arg[0]);
}

static void constructor_24163( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >();
  else ::new(mem) ::edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >();
}

static void constructor_24164( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if ( arg.size() == 2 ) {
    if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >(*(const ::edm::Handle<std::vector<reco::PFClusterJet> >*)arg[0],
      *(unsigned int*)arg[1]);
  else ::new(mem) ::edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >(*(const ::edm::Handle<std::vector<reco::PFClusterJet> >*)arg[0],
      *(unsigned int*)arg[1]);
  }
  else if ( arg.size() == 3 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >(*(const ::edm::Handle<std::vector<reco::PFClusterJet> >*)arg[0],
      *(unsigned int*)arg[1],
      *(bool*)arg[2]);
  else ::new(mem) ::edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >(*(const ::edm::Handle<std::vector<reco::PFClusterJet> >*)arg[0],
      *(unsigned int*)arg[1],
      *(bool*)arg[2]);
  }
}

static void constructor_24165( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if ( arg.size() == 2 ) {
    if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >(*(const ::edm::OrphanHandle<std::vector<reco::PFClusterJet> >*)arg[0],
      *(unsigned int*)arg[1]);
  else ::new(mem) ::edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >(*(const ::edm::OrphanHandle<std::vector<reco::PFClusterJet> >*)arg[0],
      *(unsigned int*)arg[1]);
  }
  else if ( arg.size() == 3 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >(*(const ::edm::OrphanHandle<std::vector<reco::PFClusterJet> >*)arg[0],
      *(unsigned int*)arg[1],
      *(bool*)arg[2]);
  else ::new(mem) ::edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >(*(const ::edm::OrphanHandle<std::vector<reco::PFClusterJet> >*)arg[0],
      *(unsigned int*)arg[1],
      *(bool*)arg[2]);
  }
}

static void constructor_24166( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if ( arg.size() == 2 ) {
    if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >(*(const ::edm::RefVector<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)arg[0],
      *(unsigned int*)arg[1]);
  else ::new(mem) ::edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >(*(const ::edm::RefVector<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)arg[0],
      *(unsigned int*)arg[1]);
  }
  else if ( arg.size() == 3 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >(*(const ::edm::RefVector<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)arg[0],
      *(unsigned int*)arg[1],
      *(bool*)arg[2]);
  else ::new(mem) ::edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >(*(const ::edm::RefVector<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)arg[0],
      *(unsigned int*)arg[1],
      *(bool*)arg[2]);
  }
}

static void constructor_24167( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if ( arg.size() == 2 ) {
    if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >((const ::std::vector<reco::PFClusterJet>*)arg[0],
      *(unsigned int*)arg[1]);
  else ::new(mem) ::edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >((const ::std::vector<reco::PFClusterJet>*)arg[0],
      *(unsigned int*)arg[1]);
  }
  else if ( arg.size() == 3 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >((const ::std::vector<reco::PFClusterJet>*)arg[0],
      *(unsigned int*)arg[1],
      *(bool*)arg[2]);
  else ::new(mem) ::edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >((const ::std::vector<reco::PFClusterJet>*)arg[0],
      *(unsigned int*)arg[1],
      *(bool*)arg[2]);
  }
}

static void constructor_24168( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if ( arg.size() == 2 ) {
    if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >(*(const ::edm::TestHandle<std::vector<reco::PFClusterJet> >*)arg[0],
      *(unsigned int*)arg[1]);
  else ::new(mem) ::edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >(*(const ::edm::TestHandle<std::vector<reco::PFClusterJet> >*)arg[0],
      *(unsigned int*)arg[1]);
  }
  else if ( arg.size() == 3 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >(*(const ::edm::TestHandle<std::vector<reco::PFClusterJet> >*)arg[0],
      *(unsigned int*)arg[1],
      *(bool*)arg[2]);
  else ::new(mem) ::edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >(*(const ::edm::TestHandle<std::vector<reco::PFClusterJet> >*)arg[0],
      *(unsigned int*)arg[1],
      *(bool*)arg[2]);
  }
}

static void constructor_24169( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >(*(const ::edm::ProductID*)arg[0],
      *(unsigned int*)arg[1],
      (const ::edm::EDProductGetter*)arg[2]);
  else ::new(mem) ::edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >(*(const ::edm::ProductID*)arg[0],
      *(unsigned int*)arg[1],
      (const ::edm::EDProductGetter*)arg[2]);
}

static void constructor_24170( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >(*(const ::edm::ProductID*)arg[0],
      (const ::reco::PFClusterJet*)arg[1],
      *(unsigned int*)arg[2],
      (const ::std::vector<reco::PFClusterJet>*)arg[3]);
  else ::new(mem) ::edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >(*(const ::edm::ProductID*)arg[0],
      (const ::reco::PFClusterJet*)arg[1],
      *(unsigned int*)arg[2],
      (const ::std::vector<reco::PFClusterJet>*)arg[3]);
}

static void constructor_24171( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >(*(const ::edm::ProductID*)arg[0]);
  else ::new(mem) ::edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >(*(const ::edm::ProductID*)arg[0]);
}

static void constructor_24172( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >(*(const ::edm::RefProd<std::vector<reco::PFClusterJet> >*)arg[0],
      *(unsigned int*)arg[1]);
  else ::new(mem) ::edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >(*(const ::edm::RefProd<std::vector<reco::PFClusterJet> >*)arg[0],
      *(unsigned int*)arg[1]);
}

static void destructor_24173(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)o)->::edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >::~Ref)();
}
static  void operator_24174( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)o)->operator*)();
  else   (((const ::edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)o)->operator*)();
}

static  void operator_24175( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)o)->operator->)());
  else   (((const ::edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)o)->operator->)();
}

static  void method_24176( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)o)->get)());
  else   (((const ::edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)o)->get)();
}

static  void method_24177( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)o)->isNull)());
  else   (((const ::edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)o)->isNull)();
}

static  void method_24178( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)o)->isNonnull)());
  else   (((const ::edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)o)->isNonnull)();
}

static  void operator_24179( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)o)->operator!)());
  else   (((const ::edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)o)->operator!)();
}

static  void method_24180( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::ProductID)((((const ::edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)o)->id)());
  else   (((const ::edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)o)->id)();
}

static  void method_24181( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)o)->productGetter)());
  else   (((const ::edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)o)->productGetter)();
}

static  void method_24182( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)o)->product)());
  else   (((const ::edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)o)->product)();
}

static  void method_24183( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (unsigned int)((((const ::edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)o)->key)());
  else   (((const ::edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)o)->key)();
}

static  void method_24184( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (unsigned int)((((const ::edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)o)->index)());
  else   (((const ::edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)o)->index)();
}

static  void method_24185( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)o)->hasProductCache)());
  else   (((const ::edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)o)->hasProductCache)();
}

static  void method_24186( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)o)->isAvailable)());
  else   (((const ::edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)o)->isAvailable)();
}

static  void method_24187( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)o)->isTransient)());
  else   (((const ::edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)o)->isTransient)();
}

static  void method_24188( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)o)->refCore)();
  else   (((const ::edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)o)->refCore)();
}

static  void method_24189( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (short)((((::edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)o)->Class_Version)());
  else   (((::edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)o)->Class_Version)();
}

static void constructor_24190( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >(*(const ::edm::RefCore*)arg[0],
      *(const unsigned int*)arg[1]);
  else ::new(mem) ::edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >(*(const ::edm::RefCore*)arg[0],
      *(const unsigned int*)arg[1]);
}

static void method_newdel_4921( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class Ref<std::vector<reco::PFClusterJet, std::allocator<reco::PFClusterJet> >,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet, std::allocator<reco::PFClusterJet> >, reco::PFClusterJet> > -------------------------------
void __edm__Ref_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s__db_datamem(Reflex::Class*);
void __edm__Ref_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__Ref_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s__datamem_bld(&__edm__Ref_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__Ref_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s__funcmem_bld(&__edm__Ref_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s__db_funcmem);
void __edm__Ref_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >"), typeid(::edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >), sizeof(::edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("ClassVersion"), ::edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >::Class_Version())
  .AddTypedef(type_7932, Reflex::Literal("edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >::T"))
  .AddTypedef(type_20347, Reflex::Literal("edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >::F"))
  .AddTypedef(type_21786, Reflex::Literal("edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >::VF"))
  .AddTypedef(type_21785, Reflex::Literal("edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >::VBF"))
  .AddTypedef(type_2962, Reflex::Literal("edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >::product_type"))
  .AddTypedef(type_7932, Reflex::Literal("edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >::value_type"))
  .AddTypedef(type_7932c, Reflex::Literal("edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >::element_type"))
  .AddTypedef(type_20347, Reflex::Literal("edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >::finder_type"))
  .AddTypedef(type_219, Reflex::Literal("edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >::argument_type"))
  .AddTypedef(type_219, Reflex::Literal("edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >::key_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_37803, type_36619), Reflex::Literal("operator="), operator_24161, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_36619), Reflex::Literal("Ref"), constructor_24162, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("Ref"), constructor_24163, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_37727, type_219, type_1569), Reflex::Literal("Ref"), constructor_24164, 0, "handle;itemKey;setNow=true", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_37728, type_219, type_1569), Reflex::Literal("Ref"), constructor_24165, 0, "handle;itemKey;setNow=true", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_37022, type_219, type_1569), Reflex::Literal("Ref"), constructor_24166, 0, "refvector;itemKey;setNow=true", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_37023, type_219, type_1569), Reflex::Literal("Ref"), constructor_24167, 0, "iProduct;iItemKey;iSetNow=true", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_37729, type_219, type_1569), Reflex::Literal("Ref"), constructor_24168, 0, "handle;itemKey;setNow=true", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_20008, type_219, type_20128), Reflex::Literal("Ref"), constructor_24169, 0, "productID;itemKey;prodGetter", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_20008, type_13775, type_219, type_37023), Reflex::Literal("Ref"), constructor_24170, 0, "iProductID;;iItemKey;iProduct", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_20008), Reflex::Literal("Ref"), constructor_24171, 0, "iId", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_37726, type_219), Reflex::Literal("Ref"), constructor_24172, 0, "refProd;itemKey", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~Ref"), destructor_24173, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_23020, type_10959), Reflex::Literal("Ref"), constructor_24190, 0, "iRefCore;iKey", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_4921, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__Ref_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__Ref_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s__funcmem_bld);
}

//------Delayed data member builder for class Ref<std::vector<reco::PFClusterJet, std::allocator<reco::PFClusterJet> >,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet, std::allocator<reco::PFClusterJet> >, reco::PFClusterJet> > -------------------
void __edm__Ref_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_4563, Reflex::Literal("product_"), OffsetOf(__shadow__::__edm__Ref_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s_, product_), ::Reflex::PRIVATE | ::Reflex::MUTABLE);
}
//------Delayed function member builder for class Ref<std::vector<reco::PFClusterJet, std::allocator<reco::PFClusterJet> >,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet, std::allocator<reco::PFClusterJet> >, reco::PFClusterJet> > -------------------
void __edm__Ref_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13779), Reflex::Literal("operator*"), operator_24174, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13775), Reflex::Literal("operator->"), operator_24175, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13775), Reflex::Literal("get"), method_24176, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("isNull"), method_24177, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("isNonnull"), method_24178, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("operator!"), operator_24179, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4974), Reflex::Literal("id"), method_24180, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_20128), Reflex::Literal("productGetter"), method_24181, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_37023), Reflex::Literal("product"), method_24182, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_219), Reflex::Literal("key"), method_24183, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_219), Reflex::Literal("index"), method_24184, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("hasProductCache"), method_24185, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("isAvailable"), method_24186, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("isTransient"), method_24187, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_23020), Reflex::Literal("refCore"), method_24188, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_89), Reflex::Literal("Class_Version"), method_24189, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC);
}
//------Stub functions for class Ref<std::vector<reco::TrackJet, std::allocator<reco::TrackJet> >,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet, std::allocator<reco::TrackJet> >, reco::TrackJet> > -------------------------------
static  void operator_24287( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)o)->operator=)(*(const ::edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)arg[0]);
  else   (((::edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)o)->operator=)(*(const ::edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)arg[0]);
}

static void constructor_24288( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >(*(const ::edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)arg[0]);
  else ::new(mem) ::edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >(*(const ::edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)arg[0]);
}

static void constructor_24289( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >();
  else ::new(mem) ::edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >();
}

static void constructor_24290( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if ( arg.size() == 2 ) {
    if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >(*(const ::edm::Handle<std::vector<reco::TrackJet> >*)arg[0],
      *(unsigned int*)arg[1]);
  else ::new(mem) ::edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >(*(const ::edm::Handle<std::vector<reco::TrackJet> >*)arg[0],
      *(unsigned int*)arg[1]);
  }
  else if ( arg.size() == 3 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >(*(const ::edm::Handle<std::vector<reco::TrackJet> >*)arg[0],
      *(unsigned int*)arg[1],
      *(bool*)arg[2]);
  else ::new(mem) ::edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >(*(const ::edm::Handle<std::vector<reco::TrackJet> >*)arg[0],
      *(unsigned int*)arg[1],
      *(bool*)arg[2]);
  }
}

static void constructor_24291( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if ( arg.size() == 2 ) {
    if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >(*(const ::edm::OrphanHandle<std::vector<reco::TrackJet> >*)arg[0],
      *(unsigned int*)arg[1]);
  else ::new(mem) ::edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >(*(const ::edm::OrphanHandle<std::vector<reco::TrackJet> >*)arg[0],
      *(unsigned int*)arg[1]);
  }
  else if ( arg.size() == 3 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >(*(const ::edm::OrphanHandle<std::vector<reco::TrackJet> >*)arg[0],
      *(unsigned int*)arg[1],
      *(bool*)arg[2]);
  else ::new(mem) ::edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >(*(const ::edm::OrphanHandle<std::vector<reco::TrackJet> >*)arg[0],
      *(unsigned int*)arg[1],
      *(bool*)arg[2]);
  }
}

static void constructor_24292( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if ( arg.size() == 2 ) {
    if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >(*(const ::edm::RefVector<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)arg[0],
      *(unsigned int*)arg[1]);
  else ::new(mem) ::edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >(*(const ::edm::RefVector<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)arg[0],
      *(unsigned int*)arg[1]);
  }
  else if ( arg.size() == 3 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >(*(const ::edm::RefVector<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)arg[0],
      *(unsigned int*)arg[1],
      *(bool*)arg[2]);
  else ::new(mem) ::edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >(*(const ::edm::RefVector<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)arg[0],
      *(unsigned int*)arg[1],
      *(bool*)arg[2]);
  }
}

static void constructor_24293( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if ( arg.size() == 2 ) {
    if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >((const ::std::vector<reco::TrackJet>*)arg[0],
      *(unsigned int*)arg[1]);
  else ::new(mem) ::edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >((const ::std::vector<reco::TrackJet>*)arg[0],
      *(unsigned int*)arg[1]);
  }
  else if ( arg.size() == 3 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >((const ::std::vector<reco::TrackJet>*)arg[0],
      *(unsigned int*)arg[1],
      *(bool*)arg[2]);
  else ::new(mem) ::edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >((const ::std::vector<reco::TrackJet>*)arg[0],
      *(unsigned int*)arg[1],
      *(bool*)arg[2]);
  }
}

static void constructor_24294( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if ( arg.size() == 2 ) {
    if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >(*(const ::edm::TestHandle<std::vector<reco::TrackJet> >*)arg[0],
      *(unsigned int*)arg[1]);
  else ::new(mem) ::edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >(*(const ::edm::TestHandle<std::vector<reco::TrackJet> >*)arg[0],
      *(unsigned int*)arg[1]);
  }
  else if ( arg.size() == 3 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >(*(const ::edm::TestHandle<std::vector<reco::TrackJet> >*)arg[0],
      *(unsigned int*)arg[1],
      *(bool*)arg[2]);
  else ::new(mem) ::edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >(*(const ::edm::TestHandle<std::vector<reco::TrackJet> >*)arg[0],
      *(unsigned int*)arg[1],
      *(bool*)arg[2]);
  }
}

static void constructor_24295( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >(*(const ::edm::ProductID*)arg[0],
      *(unsigned int*)arg[1],
      (const ::edm::EDProductGetter*)arg[2]);
  else ::new(mem) ::edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >(*(const ::edm::ProductID*)arg[0],
      *(unsigned int*)arg[1],
      (const ::edm::EDProductGetter*)arg[2]);
}

static void constructor_24296( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >(*(const ::edm::ProductID*)arg[0],
      (const ::reco::TrackJet*)arg[1],
      *(unsigned int*)arg[2],
      (const ::std::vector<reco::TrackJet>*)arg[3]);
  else ::new(mem) ::edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >(*(const ::edm::ProductID*)arg[0],
      (const ::reco::TrackJet*)arg[1],
      *(unsigned int*)arg[2],
      (const ::std::vector<reco::TrackJet>*)arg[3]);
}

static void constructor_24297( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >(*(const ::edm::ProductID*)arg[0]);
  else ::new(mem) ::edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >(*(const ::edm::ProductID*)arg[0]);
}

static void constructor_24298( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >(*(const ::edm::RefProd<std::vector<reco::TrackJet> >*)arg[0],
      *(unsigned int*)arg[1]);
  else ::new(mem) ::edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >(*(const ::edm::RefProd<std::vector<reco::TrackJet> >*)arg[0],
      *(unsigned int*)arg[1]);
}

static void destructor_24299(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)o)->::edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >::~Ref)();
}
static  void operator_24300( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)o)->operator*)();
  else   (((const ::edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)o)->operator*)();
}

static  void operator_24301( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)o)->operator->)());
  else   (((const ::edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)o)->operator->)();
}

static  void method_24302( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)o)->get)());
  else   (((const ::edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)o)->get)();
}

static  void method_24303( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)o)->isNull)());
  else   (((const ::edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)o)->isNull)();
}

static  void method_24304( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)o)->isNonnull)());
  else   (((const ::edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)o)->isNonnull)();
}

static  void operator_24305( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)o)->operator!)());
  else   (((const ::edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)o)->operator!)();
}

static  void method_24306( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::ProductID)((((const ::edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)o)->id)());
  else   (((const ::edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)o)->id)();
}

static  void method_24307( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)o)->productGetter)());
  else   (((const ::edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)o)->productGetter)();
}

static  void method_24308( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)o)->product)());
  else   (((const ::edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)o)->product)();
}

static  void method_24309( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (unsigned int)((((const ::edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)o)->key)());
  else   (((const ::edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)o)->key)();
}

static  void method_24310( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (unsigned int)((((const ::edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)o)->index)());
  else   (((const ::edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)o)->index)();
}

static  void method_24311( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)o)->hasProductCache)());
  else   (((const ::edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)o)->hasProductCache)();
}

static  void method_24312( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)o)->isAvailable)());
  else   (((const ::edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)o)->isAvailable)();
}

static  void method_24313( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)o)->isTransient)());
  else   (((const ::edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)o)->isTransient)();
}

static  void method_24314( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)o)->refCore)();
  else   (((const ::edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)o)->refCore)();
}

static  void method_24315( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (short)((((::edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)o)->Class_Version)());
  else   (((::edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)o)->Class_Version)();
}

static void constructor_24316( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >(*(const ::edm::RefCore*)arg[0],
      *(const unsigned int*)arg[1]);
  else ::new(mem) ::edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >(*(const ::edm::RefCore*)arg[0],
      *(const unsigned int*)arg[1]);
}

static void method_newdel_4924( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class Ref<std::vector<reco::TrackJet, std::allocator<reco::TrackJet> >,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet, std::allocator<reco::TrackJet> >, reco::TrackJet> > -------------------------------
void __edm__Ref_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s__db_datamem(Reflex::Class*);
void __edm__Ref_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__Ref_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s__datamem_bld(&__edm__Ref_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__Ref_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s__funcmem_bld(&__edm__Ref_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s__db_funcmem);
void __edm__Ref_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >"), typeid(::edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >), sizeof(::edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("ClassVersion"), ::edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >::Class_Version())
  .AddTypedef(type_7775, Reflex::Literal("edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >::T"))
  .AddTypedef(type_20371, Reflex::Literal("edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >::F"))
  .AddTypedef(type_21790, Reflex::Literal("edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >::VF"))
  .AddTypedef(type_21789, Reflex::Literal("edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >::VBF"))
  .AddTypedef(type_2970, Reflex::Literal("edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >::product_type"))
  .AddTypedef(type_7775, Reflex::Literal("edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >::value_type"))
  .AddTypedef(type_7775c, Reflex::Literal("edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >::element_type"))
  .AddTypedef(type_20371, Reflex::Literal("edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >::finder_type"))
  .AddTypedef(type_219, Reflex::Literal("edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >::argument_type"))
  .AddTypedef(type_219, Reflex::Literal("edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >::key_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_37805, type_36647), Reflex::Literal("operator="), operator_24287, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_36647), Reflex::Literal("Ref"), constructor_24288, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("Ref"), constructor_24289, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_37737, type_219, type_1569), Reflex::Literal("Ref"), constructor_24290, 0, "handle;itemKey;setNow=true", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_37738, type_219, type_1569), Reflex::Literal("Ref"), constructor_24291, 0, "handle;itemKey;setNow=true", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_37032, type_219, type_1569), Reflex::Literal("Ref"), constructor_24292, 0, "refvector;itemKey;setNow=true", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_37033, type_219, type_1569), Reflex::Literal("Ref"), constructor_24293, 0, "iProduct;iItemKey;iSetNow=true", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_37739, type_219, type_1569), Reflex::Literal("Ref"), constructor_24294, 0, "handle;itemKey;setNow=true", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_20008, type_219, type_20128), Reflex::Literal("Ref"), constructor_24295, 0, "productID;itemKey;prodGetter", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_20008, type_14035, type_219, type_37033), Reflex::Literal("Ref"), constructor_24296, 0, "iProductID;;iItemKey;iProduct", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_20008), Reflex::Literal("Ref"), constructor_24297, 0, "iId", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_37736, type_219), Reflex::Literal("Ref"), constructor_24298, 0, "refProd;itemKey", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~Ref"), destructor_24299, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_23020, type_10959), Reflex::Literal("Ref"), constructor_24316, 0, "iRefCore;iKey", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_4924, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__Ref_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__Ref_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s__funcmem_bld);
}

//------Delayed data member builder for class Ref<std::vector<reco::TrackJet, std::allocator<reco::TrackJet> >,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet, std::allocator<reco::TrackJet> >, reco::TrackJet> > -------------------
void __edm__Ref_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_4563, Reflex::Literal("product_"), OffsetOf(__shadow__::__edm__Ref_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s_, product_), ::Reflex::PRIVATE | ::Reflex::MUTABLE);
}
//------Delayed function member builder for class Ref<std::vector<reco::TrackJet, std::allocator<reco::TrackJet> >,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet, std::allocator<reco::TrackJet> >, reco::TrackJet> > -------------------
void __edm__Ref_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_14039), Reflex::Literal("operator*"), operator_24300, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_14035), Reflex::Literal("operator->"), operator_24301, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_14035), Reflex::Literal("get"), method_24302, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("isNull"), method_24303, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("isNonnull"), method_24304, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("operator!"), operator_24305, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4974), Reflex::Literal("id"), method_24306, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_20128), Reflex::Literal("productGetter"), method_24307, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_37033), Reflex::Literal("product"), method_24308, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_219), Reflex::Literal("key"), method_24309, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_219), Reflex::Literal("index"), method_24310, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("hasProductCache"), method_24311, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("isAvailable"), method_24312, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("isTransient"), method_24313, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_23020), Reflex::Literal("refCore"), method_24314, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_89), Reflex::Literal("Class_Version"), method_24315, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC);
}
//------Stub functions for class JetTrackMatch<std::vector<reco::PFClusterJet, std::allocator<reco::PFClusterJet> > > -------------------------------
static  void operator_26272( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::reco::JetTrackMatch<std::vector<reco::PFClusterJet> >*)o)->operator=)(*(const ::reco::JetTrackMatch<std::vector<reco::PFClusterJet> >*)arg[0]);
  else   (((::reco::JetTrackMatch<std::vector<reco::PFClusterJet> >*)o)->operator=)(*(const ::reco::JetTrackMatch<std::vector<reco::PFClusterJet> >*)arg[0]);
}

static void constructor_26273( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::reco::JetTrackMatch<std::vector<reco::PFClusterJet> >(*(const ::reco::JetTrackMatch<std::vector<reco::PFClusterJet> >*)arg[0]);
  else ::new(mem) ::reco::JetTrackMatch<std::vector<reco::PFClusterJet> >(*(const ::reco::JetTrackMatch<std::vector<reco::PFClusterJet> >*)arg[0]);
}

static void constructor_26274( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::reco::JetTrackMatch<std::vector<reco::PFClusterJet> >();
  else ::new(mem) ::reco::JetTrackMatch<std::vector<reco::PFClusterJet> >();
}

static void destructor_26275(void*, void * o, const std::vector<void*>&, void *) {
(((::reco::JetTrackMatch<std::vector<reco::PFClusterJet> >*)o)->::reco::JetTrackMatch<std::vector<reco::PFClusterJet> >::~JetTrackMatch)();
}
static  void method_26276( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::reco::JetTrackMatch<std::vector<reco::PFClusterJet> >*)o)->insert)(*(const ::edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)arg[0]);
}

static  void method_26277( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::reco::JetTrackMatch<std::vector<reco::PFClusterJet> >*)o)->insert)(*(const ::edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)arg[0],
    *(const ::edm::Ref<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> >*)arg[1]);
}

static  void method_26278( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::vector<edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >)((((const ::reco::JetTrackMatch<std::vector<reco::PFClusterJet> >*)o)->allJets)());
  else   (((const ::reco::JetTrackMatch<std::vector<reco::PFClusterJet> >*)o)->allJets)();
}

static  void method_26279( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (std::vector<edm::Ref<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >)((((const ::reco::JetTrackMatch<std::vector<reco::PFClusterJet> >*)o)->getTracks)(*(const ::edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)arg[0]));
  else   (((const ::reco::JetTrackMatch<std::vector<reco::PFClusterJet> >*)o)->getTracks)(*(const ::edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)arg[0]);
}

static void method_newdel_7739( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::reco::JetTrackMatch<std::vector<reco::PFClusterJet> > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::reco::JetTrackMatch<std::vector<reco::PFClusterJet> > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::reco::JetTrackMatch<std::vector<reco::PFClusterJet> > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::reco::JetTrackMatch<std::vector<reco::PFClusterJet> > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::reco::JetTrackMatch<std::vector<reco::PFClusterJet> > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class JetTrackMatch<std::vector<reco::PFClusterJet, std::allocator<reco::PFClusterJet> > > -------------------------------
void __reco__JetTrackMatch_std__vector_reco__PFClusterJet_s__db_datamem(Reflex::Class*);
void __reco__JetTrackMatch_std__vector_reco__PFClusterJet_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __reco__JetTrackMatch_std__vector_reco__PFClusterJet_s__datamem_bld(&__reco__JetTrackMatch_std__vector_reco__PFClusterJet_s__db_datamem);
Reflex::GenreflexMemberBuilder __reco__JetTrackMatch_std__vector_reco__PFClusterJet_s__funcmem_bld(&__reco__JetTrackMatch_std__vector_reco__PFClusterJet_s__db_funcmem);
void __reco__JetTrackMatch_std__vector_reco__PFClusterJet_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("reco::JetTrackMatch<std::vector<reco::PFClusterJet> >"), typeid(::reco::JetTrackMatch<std::vector<reco::PFClusterJet> >), sizeof(::reco::JetTrackMatch<std::vector<reco::PFClusterJet> >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddTypedef(type_4921, Reflex::Literal("reco::JetTrackMatch<std::vector<reco::PFClusterJet> >::JetRef"))
  .AddTypedef(type_4922, Reflex::Literal("reco::JetTrackMatch<std::vector<reco::PFClusterJet> >::TrackRef"))
  .AddTypedef(type_4701, Reflex::Literal("reco::JetTrackMatch<std::vector<reco::PFClusterJet> >::Map"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_38656, type_38657), Reflex::Literal("operator="), operator_26272, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_38657), Reflex::Literal("JetTrackMatch"), constructor_26273, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("JetTrackMatch"), constructor_26274, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~JetTrackMatch"), destructor_26275, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_7739, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__reco__JetTrackMatch_std__vector_reco__PFClusterJet_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__reco__JetTrackMatch_std__vector_reco__PFClusterJet_s__funcmem_bld);
}

//------Delayed data member builder for class JetTrackMatch<std::vector<reco::PFClusterJet, std::allocator<reco::PFClusterJet> > > -------------------
void __reco__JetTrackMatch_std__vector_reco__PFClusterJet_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_4701, Reflex::Literal("mMap"), OffsetOf(__shadow__::__reco__JetTrackMatch_std__vector_reco__PFClusterJet_s_, mMap), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class JetTrackMatch<std::vector<reco::PFClusterJet, std::allocator<reco::PFClusterJet> > > -------------------
void __reco__JetTrackMatch_std__vector_reco__PFClusterJet_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_36619), Reflex::Literal("insert"), method_26276, 0, "fJet", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_36619, type_13519), Reflex::Literal("insert"), method_26277, 0, "fJet;fTrack", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2956), Reflex::Literal("allJets"), method_26278, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2954, type_36619), Reflex::Literal("getTracks"), method_26279, 0, "mJet", ::Reflex::PUBLIC | ::Reflex::CONST);
}
//------Stub functions for class JetTrackMatch<std::vector<reco::TrackJet, std::allocator<reco::TrackJet> > > -------------------------------
static  void operator_26296( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::reco::JetTrackMatch<std::vector<reco::TrackJet> >*)o)->operator=)(*(const ::reco::JetTrackMatch<std::vector<reco::TrackJet> >*)arg[0]);
  else   (((::reco::JetTrackMatch<std::vector<reco::TrackJet> >*)o)->operator=)(*(const ::reco::JetTrackMatch<std::vector<reco::TrackJet> >*)arg[0]);
}

static void constructor_26297( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::reco::JetTrackMatch<std::vector<reco::TrackJet> >(*(const ::reco::JetTrackMatch<std::vector<reco::TrackJet> >*)arg[0]);
  else ::new(mem) ::reco::JetTrackMatch<std::vector<reco::TrackJet> >(*(const ::reco::JetTrackMatch<std::vector<reco::TrackJet> >*)arg[0]);
}

static void constructor_26298( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::reco::JetTrackMatch<std::vector<reco::TrackJet> >();
  else ::new(mem) ::reco::JetTrackMatch<std::vector<reco::TrackJet> >();
}

static void destructor_26299(void*, void * o, const std::vector<void*>&, void *) {
(((::reco::JetTrackMatch<std::vector<reco::TrackJet> >*)o)->::reco::JetTrackMatch<std::vector<reco::TrackJet> >::~JetTrackMatch)();
}
static  void method_26300( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::reco::JetTrackMatch<std::vector<reco::TrackJet> >*)o)->insert)(*(const ::edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)arg[0]);
}

static  void method_26301( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::reco::JetTrackMatch<std::vector<reco::TrackJet> >*)o)->insert)(*(const ::edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)arg[0],
    *(const ::edm::Ref<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> >*)arg[1]);
}

static  void method_26302( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::vector<edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >)((((const ::reco::JetTrackMatch<std::vector<reco::TrackJet> >*)o)->allJets)());
  else   (((const ::reco::JetTrackMatch<std::vector<reco::TrackJet> >*)o)->allJets)();
}

static  void method_26303( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (std::vector<edm::Ref<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >)((((const ::reco::JetTrackMatch<std::vector<reco::TrackJet> >*)o)->getTracks)(*(const ::edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)arg[0]));
  else   (((const ::reco::JetTrackMatch<std::vector<reco::TrackJet> >*)o)->getTracks)(*(const ::edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)arg[0]);
}

static void method_newdel_7741( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::reco::JetTrackMatch<std::vector<reco::TrackJet> > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::reco::JetTrackMatch<std::vector<reco::TrackJet> > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::reco::JetTrackMatch<std::vector<reco::TrackJet> > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::reco::JetTrackMatch<std::vector<reco::TrackJet> > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::reco::JetTrackMatch<std::vector<reco::TrackJet> > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class JetTrackMatch<std::vector<reco::TrackJet, std::allocator<reco::TrackJet> > > -------------------------------
void __reco__JetTrackMatch_std__vector_reco__TrackJet_s__db_datamem(Reflex::Class*);
void __reco__JetTrackMatch_std__vector_reco__TrackJet_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __reco__JetTrackMatch_std__vector_reco__TrackJet_s__datamem_bld(&__reco__JetTrackMatch_std__vector_reco__TrackJet_s__db_datamem);
Reflex::GenreflexMemberBuilder __reco__JetTrackMatch_std__vector_reco__TrackJet_s__funcmem_bld(&__reco__JetTrackMatch_std__vector_reco__TrackJet_s__db_funcmem);
void __reco__JetTrackMatch_std__vector_reco__TrackJet_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("reco::JetTrackMatch<std::vector<reco::TrackJet> >"), typeid(::reco::JetTrackMatch<std::vector<reco::TrackJet> >), sizeof(::reco::JetTrackMatch<std::vector<reco::TrackJet> >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddTypedef(type_4924, Reflex::Literal("reco::JetTrackMatch<std::vector<reco::TrackJet> >::JetRef"))
  .AddTypedef(type_4922, Reflex::Literal("reco::JetTrackMatch<std::vector<reco::TrackJet> >::TrackRef"))
  .AddTypedef(type_4703, Reflex::Literal("reco::JetTrackMatch<std::vector<reco::TrackJet> >::Map"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_38660, type_38661), Reflex::Literal("operator="), operator_26296, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_38661), Reflex::Literal("JetTrackMatch"), constructor_26297, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("JetTrackMatch"), constructor_26298, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~JetTrackMatch"), destructor_26299, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_7741, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__reco__JetTrackMatch_std__vector_reco__TrackJet_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__reco__JetTrackMatch_std__vector_reco__TrackJet_s__funcmem_bld);
}

//------Delayed data member builder for class JetTrackMatch<std::vector<reco::TrackJet, std::allocator<reco::TrackJet> > > -------------------
void __reco__JetTrackMatch_std__vector_reco__TrackJet_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_4703, Reflex::Literal("mMap"), OffsetOf(__shadow__::__reco__JetTrackMatch_std__vector_reco__TrackJet_s_, mMap), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class JetTrackMatch<std::vector<reco::TrackJet, std::allocator<reco::TrackJet> > > -------------------
void __reco__JetTrackMatch_std__vector_reco__TrackJet_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_36647), Reflex::Literal("insert"), method_26300, 0, "fJet", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_36647, type_13519), Reflex::Literal("insert"), method_26301, 0, "fJet;fTrack", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2966), Reflex::Literal("allJets"), method_26302, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2954, type_36647), Reflex::Literal("getTracks"), method_26303, 0, "mJet", ::Reflex::PUBLIC | ::Reflex::CONST);
}
//------Stub functions for class BaseHolder<reco::Jet> -------------------------------
static void destructor_37146(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::reftobase::BaseHolder<reco::Jet>*)o)->::edm::reftobase::BaseHolder<reco::Jet>::~BaseHolder)();
}
static  void method_37147( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::reftobase::BaseHolder<reco::Jet>*)o)->clone)());
  else   (((const ::edm::reftobase::BaseHolder<reco::Jet>*)o)->clone)();
}

static  void method_37148( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::edm::reftobase::BaseHolder<reco::Jet>*)o)->swap)(*(::edm::reftobase::BaseHolder<reco::Jet>*)arg[0]);
}

static  void method_37149( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::reftobase::BaseHolder<reco::Jet>*)o)->getPtr)());
  else   (((const ::edm::reftobase::BaseHolder<reco::Jet>*)o)->getPtr)();
}

static  void method_37150( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::ProductID)((((const ::edm::reftobase::BaseHolder<reco::Jet>*)o)->id)());
  else   (((const ::edm::reftobase::BaseHolder<reco::Jet>*)o)->id)();
}

static  void method_37151( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (size_t)((((const ::edm::reftobase::BaseHolder<reco::Jet>*)o)->key)());
  else   (((const ::edm::reftobase::BaseHolder<reco::Jet>*)o)->key)();
}

static  void method_37152( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::reftobase::BaseHolder<reco::Jet>*)o)->isEqualTo)(*(const ::edm::reftobase::BaseHolder<reco::Jet>*)arg[0]));
  else   (((const ::edm::reftobase::BaseHolder<reco::Jet>*)o)->isEqualTo)(*(const ::edm::reftobase::BaseHolder<reco::Jet>*)arg[0]);
}

static  void method_37153( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::reftobase::BaseHolder<reco::Jet>*)o)->fillRefIfMyTypeMatches)(*(::edm::reftobase::RefHolderBase*)arg[0],
    *(::std::basic_string<char>*)arg[1]));
  else   (((const ::edm::reftobase::BaseHolder<reco::Jet>*)o)->fillRefIfMyTypeMatches)(*(::edm::reftobase::RefHolderBase*)arg[0],
    *(::std::basic_string<char>*)arg[1]);
}

static  void method_37154( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::auto_ptr<edm::reftobase::RefHolderBase>)((((const ::edm::reftobase::BaseHolder<reco::Jet>*)o)->holder)());
  else   (((const ::edm::reftobase::BaseHolder<reco::Jet>*)o)->holder)();
}

static  void method_37155( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::auto_ptr<edm::reftobase::BaseVectorHolder<reco::Jet> >)((((const ::edm::reftobase::BaseHolder<reco::Jet>*)o)->makeVectorHolder)());
  else   (((const ::edm::reftobase::BaseHolder<reco::Jet>*)o)->makeVectorHolder)();
}

static  void method_37156( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::auto_ptr<edm::reftobase::RefVectorHolderBase>)((((const ::edm::reftobase::BaseHolder<reco::Jet>*)o)->makeVectorBaseHolder)());
  else   (((const ::edm::reftobase::BaseHolder<reco::Jet>*)o)->makeVectorBaseHolder)();
}

static  void method_37157( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::reftobase::BaseHolder<reco::Jet>*)o)->productGetter)());
  else   (((const ::edm::reftobase::BaseHolder<reco::Jet>*)o)->productGetter)();
}

static  void method_37158( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::reftobase::BaseHolder<reco::Jet>*)o)->hasProductCache)());
  else   (((const ::edm::reftobase::BaseHolder<reco::Jet>*)o)->hasProductCache)();
}

static  void method_37159( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::reftobase::BaseHolder<reco::Jet>*)o)->product)());
  else   (((const ::edm::reftobase::BaseHolder<reco::Jet>*)o)->product)();
}

static  void method_37160( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::reftobase::BaseHolder<reco::Jet>*)o)->isAvailable)());
  else   (((const ::edm::reftobase::BaseHolder<reco::Jet>*)o)->isAvailable)();
}

static  void method_37161( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (short)((((::edm::reftobase::BaseHolder<reco::Jet>*)o)->Class_Version)());
  else   (((::edm::reftobase::BaseHolder<reco::Jet>*)o)->Class_Version)();
}

//------Dictionary for class BaseHolder<reco::Jet> -------------------------------
void __edm__reftobase__BaseHolder_reco__Jet__db_datamem(Reflex::Class*);
void __edm__reftobase__BaseHolder_reco__Jet__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__reftobase__BaseHolder_reco__Jet__datamem_bld(&__edm__reftobase__BaseHolder_reco__Jet__db_datamem);
Reflex::GenreflexMemberBuilder __edm__reftobase__BaseHolder_reco__Jet__funcmem_bld(&__edm__reftobase__BaseHolder_reco__Jet__db_funcmem);
void __edm__reftobase__BaseHolder_reco__Jet__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::reftobase::BaseHolder<reco::Jet>"), typeid(::edm::reftobase::BaseHolder<reco::Jet>), sizeof(::edm::reftobase::BaseHolder<reco::Jet>), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::ABSTRACT | ::Reflex::VIRTUAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("ClassVersion"), ::edm::reftobase::BaseHolder<reco::Jet>::Class_Version())
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~BaseHolder"), destructor_37146, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::DESTRUCTOR )
  .AddOnDemandFunctionMemberBuilder(&__edm__reftobase__BaseHolder_reco__Jet__funcmem_bld);
}

//------Delayed data member builder for class BaseHolder<reco::Jet> -------------------
void __edm__reftobase__BaseHolder_reco__Jet__db_datamem(Reflex::Class*) {

}
//------Delayed function member builder for class BaseHolder<reco::Jet> -------------------
void __edm__reftobase__BaseHolder_reco__Jet__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_37740), Reflex::Literal("clone"), method_37147, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::ABSTRACT | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_42321), Reflex::Literal("swap"), method_37148, 0, "", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_37743), Reflex::Literal("getPtr"), method_37149, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::ABSTRACT | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4974), Reflex::Literal("id"), method_37150, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::ABSTRACT | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2125), Reflex::Literal("key"), method_37151, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::ABSTRACT | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569, type_42322), Reflex::Literal("isEqualTo"), method_37152, 0, "rhs", ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::ABSTRACT | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569, type_21403, type_11032), Reflex::Literal("fillRefIfMyTypeMatches"), method_37153, 0, "fillme;msg", ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::ABSTRACT | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2762), Reflex::Literal("holder"), method_37154, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::ABSTRACT | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2761), Reflex::Literal("makeVectorHolder"), method_37155, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::ABSTRACT | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2760), Reflex::Literal("makeVectorBaseHolder"), method_37156, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::ABSTRACT | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_20128), Reflex::Literal("productGetter"), method_37157, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::ABSTRACT | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("hasProductCache"), method_37158, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::ABSTRACT | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4040), Reflex::Literal("product"), method_37159, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::ABSTRACT | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("isAvailable"), method_37160, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::ABSTRACT | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_89), Reflex::Literal("Class_Version"), method_37161, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC);
}
//------Stub functions for class IndirectHolder<reco::Jet> -------------------------------
static void constructor_37310( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::reftobase::IndirectHolder<reco::Jet>();
  else ::new(mem) ::edm::reftobase::IndirectHolder<reco::Jet>();
}

static void constructor_37311( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::reftobase::IndirectHolder<reco::Jet>(*(::boost::shared_ptr<edm::reftobase::RefHolderBase>*)arg[0]);
  else ::new(mem) ::edm::reftobase::IndirectHolder<reco::Jet>(*(::boost::shared_ptr<edm::reftobase::RefHolderBase>*)arg[0]);
}

static void constructor_37312( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::reftobase::IndirectHolder<reco::Jet>(*(const ::edm::reftobase::IndirectHolder<reco::Jet>*)arg[0]);
  else ::new(mem) ::edm::reftobase::IndirectHolder<reco::Jet>(*(const ::edm::reftobase::IndirectHolder<reco::Jet>*)arg[0]);
}

static  void operator_37313( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::reftobase::IndirectHolder<reco::Jet>*)o)->operator=)(*(const ::edm::reftobase::IndirectHolder<reco::Jet>*)arg[0]);
  else   (((::edm::reftobase::IndirectHolder<reco::Jet>*)o)->operator=)(*(const ::edm::reftobase::IndirectHolder<reco::Jet>*)arg[0]);
}

static  void method_37314( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::edm::reftobase::IndirectHolder<reco::Jet>*)o)->swap)(*(::edm::reftobase::IndirectHolder<reco::Jet>*)arg[0]);
}

static void destructor_37315(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::reftobase::IndirectHolder<reco::Jet>*)o)->::edm::reftobase::IndirectHolder<reco::Jet>::~IndirectHolder)();
}
static  void method_37316( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::reftobase::IndirectHolder<reco::Jet>*)o)->clone)());
  else   (((const ::edm::reftobase::IndirectHolder<reco::Jet>*)o)->clone)();
}

static  void method_37317( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::reftobase::IndirectHolder<reco::Jet>*)o)->getPtr)());
  else   (((const ::edm::reftobase::IndirectHolder<reco::Jet>*)o)->getPtr)();
}

static  void method_37318( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::ProductID)((((const ::edm::reftobase::IndirectHolder<reco::Jet>*)o)->id)());
  else   (((const ::edm::reftobase::IndirectHolder<reco::Jet>*)o)->id)();
}

static  void method_37319( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (size_t)((((const ::edm::reftobase::IndirectHolder<reco::Jet>*)o)->key)());
  else   (((const ::edm::reftobase::IndirectHolder<reco::Jet>*)o)->key)();
}

static  void method_37320( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::reftobase::IndirectHolder<reco::Jet>*)o)->isEqualTo)(*(const ::edm::reftobase::BaseHolder<reco::Jet>*)arg[0]));
  else   (((const ::edm::reftobase::IndirectHolder<reco::Jet>*)o)->isEqualTo)(*(const ::edm::reftobase::BaseHolder<reco::Jet>*)arg[0]);
}

static  void method_37321( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::reftobase::IndirectHolder<reco::Jet>*)o)->fillRefIfMyTypeMatches)(*(::edm::reftobase::RefHolderBase*)arg[0],
    *(::std::basic_string<char>*)arg[1]));
  else   (((const ::edm::reftobase::IndirectHolder<reco::Jet>*)o)->fillRefIfMyTypeMatches)(*(::edm::reftobase::RefHolderBase*)arg[0],
    *(::std::basic_string<char>*)arg[1]);
}

static  void method_37322( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::auto_ptr<edm::reftobase::RefHolderBase>)((((const ::edm::reftobase::IndirectHolder<reco::Jet>*)o)->holder)());
  else   (((const ::edm::reftobase::IndirectHolder<reco::Jet>*)o)->holder)();
}

static  void method_37323( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::auto_ptr<edm::reftobase::BaseVectorHolder<reco::Jet> >)((((const ::edm::reftobase::IndirectHolder<reco::Jet>*)o)->makeVectorHolder)());
  else   (((const ::edm::reftobase::IndirectHolder<reco::Jet>*)o)->makeVectorHolder)();
}

static  void method_37324( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::auto_ptr<edm::reftobase::RefVectorHolderBase>)((((const ::edm::reftobase::IndirectHolder<reco::Jet>*)o)->makeVectorBaseHolder)());
  else   (((const ::edm::reftobase::IndirectHolder<reco::Jet>*)o)->makeVectorBaseHolder)();
}

static  void method_37325( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::reftobase::IndirectHolder<reco::Jet>*)o)->productGetter)());
  else   (((const ::edm::reftobase::IndirectHolder<reco::Jet>*)o)->productGetter)();
}

static  void method_37326( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::reftobase::IndirectHolder<reco::Jet>*)o)->hasProductCache)());
  else   (((const ::edm::reftobase::IndirectHolder<reco::Jet>*)o)->hasProductCache)();
}

static  void method_37327( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::reftobase::IndirectHolder<reco::Jet>*)o)->product)());
  else   (((const ::edm::reftobase::IndirectHolder<reco::Jet>*)o)->product)();
}

static  void method_37328( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::reftobase::IndirectHolder<reco::Jet>*)o)->isAvailable)());
  else   (((const ::edm::reftobase::IndirectHolder<reco::Jet>*)o)->isAvailable)();
}

static  void method_37329( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (short)((((::edm::reftobase::IndirectHolder<reco::Jet>*)o)->Class_Version)());
  else   (((::edm::reftobase::IndirectHolder<reco::Jet>*)o)->Class_Version)();
}

static void method_newdel_22948( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::reftobase::IndirectHolder<reco::Jet> >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::reftobase::IndirectHolder<reco::Jet> >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::reftobase::IndirectHolder<reco::Jet> >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::reftobase::IndirectHolder<reco::Jet> >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::reftobase::IndirectHolder<reco::Jet> >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

static void method_x39( void* retaddr, void*, const std::vector<void*>&, void*)
{
  typedef std::vector<std::pair< ::Reflex::Base, int> > Bases_t;
  static Bases_t s_bases;
  if ( !s_bases.size() ) {
    s_bases.push_back(std::make_pair(::Reflex::Base( ::Reflex::TypeBuilder(Reflex::Literal("edm::reftobase::BaseHolder<reco::Jet>")), ::Reflex::BaseOffset< ::edm::reftobase::IndirectHolder<reco::Jet>,::edm::reftobase::BaseHolder<reco::Jet> >::Get(),::Reflex::PUBLIC), 0));
  }
  if (retaddr) *(Bases_t**)retaddr = &s_bases;
}

//------Dictionary for class IndirectHolder<reco::Jet> -------------------------------
void __edm__reftobase__IndirectHolder_reco__Jet__db_datamem(Reflex::Class*);
void __edm__reftobase__IndirectHolder_reco__Jet__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__reftobase__IndirectHolder_reco__Jet__datamem_bld(&__edm__reftobase__IndirectHolder_reco__Jet__db_datamem);
Reflex::GenreflexMemberBuilder __edm__reftobase__IndirectHolder_reco__Jet__funcmem_bld(&__edm__reftobase__IndirectHolder_reco__Jet__db_funcmem);
void __edm__reftobase__IndirectHolder_reco__Jet__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::reftobase::IndirectHolder<reco::Jet>"), typeid(::edm::reftobase::IndirectHolder<reco::Jet>), sizeof(::edm::reftobase::IndirectHolder<reco::Jet>), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::VIRTUAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("ClassVersion"), ::edm::reftobase::IndirectHolder<reco::Jet>::Class_Version())
  .AddBase(type_22938, ::Reflex::BaseOffset< ::edm::reftobase::IndirectHolder<reco::Jet>, ::edm::reftobase::BaseHolder<reco::Jet> >::Get(), ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("IndirectHolder"), constructor_37310, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_4378), Reflex::Literal("IndirectHolder"), constructor_37311, 0, "p", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_42337), Reflex::Literal("IndirectHolder"), constructor_37312, 0, "other", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~IndirectHolder"), destructor_37315, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::DESTRUCTOR )
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_22948, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getBasesTable"), method_x39, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__reftobase__IndirectHolder_reco__Jet__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__reftobase__IndirectHolder_reco__Jet__funcmem_bld);
}

//------Delayed data member builder for class IndirectHolder<reco::Jet> -------------------
void __edm__reftobase__IndirectHolder_reco__Jet__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_21401, Reflex::Literal("helper_"), OffsetOf(__shadow__::__edm__reftobase__IndirectHolder_reco__Jet_, helper_), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class IndirectHolder<reco::Jet> -------------------
void __edm__reftobase__IndirectHolder_reco__Jet__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_42338, type_42337), Reflex::Literal("operator="), operator_37313, 0, "rhs", ::Reflex::PUBLIC | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_42338), Reflex::Literal("swap"), method_37314, 0, "other", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_37740), Reflex::Literal("clone"), method_37316, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_37743), Reflex::Literal("getPtr"), method_37317, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4974), Reflex::Literal("id"), method_37318, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2125), Reflex::Literal("key"), method_37319, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569, type_42322), Reflex::Literal("isEqualTo"), method_37320, 0, "rhs", ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569, type_21403, type_11032), Reflex::Literal("fillRefIfMyTypeMatches"), method_37321, 0, "fillme;msg", ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2762), Reflex::Literal("holder"), method_37322, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2761), Reflex::Literal("makeVectorHolder"), method_37323, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2760), Reflex::Literal("makeVectorBaseHolder"), method_37324, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_20128), Reflex::Literal("productGetter"), method_37325, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("hasProductCache"), method_37326, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4040), Reflex::Literal("product"), method_37327, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("isAvailable"), method_37328, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_89), Reflex::Literal("Class_Version"), method_37329, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC);
}
//------Stub functions for class IndirectVectorHolder<reco::Jet> -------------------------------
static void constructor_37343( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::reftobase::IndirectVectorHolder<reco::Jet>();
  else ::new(mem) ::edm::reftobase::IndirectVectorHolder<reco::Jet>();
}

static void constructor_37344( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::reftobase::IndirectVectorHolder<reco::Jet>(*(const ::edm::reftobase::IndirectVectorHolder<reco::Jet>*)arg[0]);
  else ::new(mem) ::edm::reftobase::IndirectVectorHolder<reco::Jet>(*(const ::edm::reftobase::IndirectVectorHolder<reco::Jet>*)arg[0]);
}

static void constructor_37345( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::reftobase::IndirectVectorHolder<reco::Jet>(*(::boost::shared_ptr<edm::reftobase::RefVectorHolderBase>*)arg[0]);
  else ::new(mem) ::edm::reftobase::IndirectVectorHolder<reco::Jet>(*(::boost::shared_ptr<edm::reftobase::RefVectorHolderBase>*)arg[0]);
}

static void constructor_37346( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::reftobase::IndirectVectorHolder<reco::Jet>((::edm::reftobase::RefVectorHolderBase*)arg[0]);
  else ::new(mem) ::edm::reftobase::IndirectVectorHolder<reco::Jet>((::edm::reftobase::RefVectorHolderBase*)arg[0]);
}

static void destructor_37347(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::reftobase::IndirectVectorHolder<reco::Jet>*)o)->::edm::reftobase::IndirectVectorHolder<reco::Jet>::~IndirectVectorHolder)();
}
static  void operator_37348( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::reftobase::IndirectVectorHolder<reco::Jet>*)o)->operator=)(*(const ::edm::reftobase::IndirectVectorHolder<reco::Jet>*)arg[0]);
  else   (((::edm::reftobase::IndirectVectorHolder<reco::Jet>*)o)->operator=)(*(const ::edm::reftobase::IndirectVectorHolder<reco::Jet>*)arg[0]);
}

static  void method_37349( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::edm::reftobase::IndirectVectorHolder<reco::Jet>*)o)->swap)(*(::edm::reftobase::IndirectVectorHolder<reco::Jet>*)arg[0]);
}

static  void method_37350( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::reftobase::IndirectVectorHolder<reco::Jet>*)o)->clone)());
  else   (((const ::edm::reftobase::IndirectVectorHolder<reco::Jet>*)o)->clone)();
}

static  void method_37351( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::reftobase::IndirectVectorHolder<reco::Jet>*)o)->cloneEmpty)());
  else   (((const ::edm::reftobase::IndirectVectorHolder<reco::Jet>*)o)->cloneEmpty)();
}

static  void method_37352( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::ProductID)((((const ::edm::reftobase::IndirectVectorHolder<reco::Jet>*)o)->id)());
  else   (((const ::edm::reftobase::IndirectVectorHolder<reco::Jet>*)o)->id)();
}

static  void method_37353( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::reftobase::IndirectVectorHolder<reco::Jet>*)o)->productGetter)());
  else   (((const ::edm::reftobase::IndirectVectorHolder<reco::Jet>*)o)->productGetter)();
}

static  void method_37354( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::reftobase::IndirectVectorHolder<reco::Jet>*)o)->empty)());
  else   (((const ::edm::reftobase::IndirectVectorHolder<reco::Jet>*)o)->empty)();
}

static  void method_37355( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (size_t)((((const ::edm::reftobase::IndirectVectorHolder<reco::Jet>*)o)->size)());
  else   (((const ::edm::reftobase::IndirectVectorHolder<reco::Jet>*)o)->size)();
}

static  void method_37356( void*, void* o, const std::vector<void*>&, void*)
{
  (((::edm::reftobase::IndirectVectorHolder<reco::Jet>*)o)->clear)();
}

static  void method_37357( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (edm::RefToBase<reco::Jet>)((((const ::edm::reftobase::IndirectVectorHolder<reco::Jet>*)o)->at)(*(::size_t*)arg[0]));
  else   (((const ::edm::reftobase::IndirectVectorHolder<reco::Jet>*)o)->at)(*(::size_t*)arg[0]);
}

static  void method_37358( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::auto_ptr<edm::reftobase::RefVectorHolderBase>)((((const ::edm::reftobase::IndirectVectorHolder<reco::Jet>*)o)->vectorHolder)());
  else   (((const ::edm::reftobase::IndirectVectorHolder<reco::Jet>*)o)->vectorHolder)();
}

static  void method_37359( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::edm::reftobase::IndirectVectorHolder<reco::Jet>*)o)->push_back)((const ::edm::reftobase::BaseHolder<reco::Jet>*)arg[0]);
}

static  void method_37360( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::reftobase::IndirectVectorHolder<reco::Jet>*)o)->product)());
  else   (((const ::edm::reftobase::IndirectVectorHolder<reco::Jet>*)o)->product)();
}

static  void method_37361( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::reftobase::IndirectVectorHolder<reco::Jet>*)o)->isAvailable)());
  else   (((const ::edm::reftobase::IndirectVectorHolder<reco::Jet>*)o)->isAvailable)();
}

static  void method_37362( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (short)((((::edm::reftobase::IndirectVectorHolder<reco::Jet>*)o)->Class_Version)());
  else   (((::edm::reftobase::IndirectVectorHolder<reco::Jet>*)o)->Class_Version)();
}

static  void method_37363( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::reftobase::BaseVectorHolder<reco::Jet>::const_iterator)((((const ::edm::reftobase::IndirectVectorHolder<reco::Jet>*)o)->begin)());
  else   (((const ::edm::reftobase::IndirectVectorHolder<reco::Jet>*)o)->begin)();
}

static  void method_37364( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::reftobase::BaseVectorHolder<reco::Jet>::const_iterator)((((const ::edm::reftobase::IndirectVectorHolder<reco::Jet>*)o)->end)());
  else   (((const ::edm::reftobase::IndirectVectorHolder<reco::Jet>*)o)->end)();
}

static void method_newdel_22951( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::reftobase::IndirectVectorHolder<reco::Jet> >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::reftobase::IndirectVectorHolder<reco::Jet> >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::reftobase::IndirectVectorHolder<reco::Jet> >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::reftobase::IndirectVectorHolder<reco::Jet> >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::reftobase::IndirectVectorHolder<reco::Jet> >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

static void method_x41( void* retaddr, void*, const std::vector<void*>&, void*)
{
  typedef std::vector<std::pair< ::Reflex::Base, int> > Bases_t;
  static Bases_t s_bases;
  if ( !s_bases.size() ) {
    s_bases.push_back(std::make_pair(::Reflex::Base( ::Reflex::TypeBuilder(Reflex::Literal("edm::reftobase::BaseVectorHolder<reco::Jet>")), ::Reflex::BaseOffset< ::edm::reftobase::IndirectVectorHolder<reco::Jet>,::edm::reftobase::BaseVectorHolder<reco::Jet> >::Get(),::Reflex::PUBLIC), 0));
  }
  if (retaddr) *(Bases_t**)retaddr = &s_bases;
}

//------Dictionary for class IndirectVectorHolder<reco::Jet> -------------------------------
void __edm__reftobase__IndirectVectorHolder_reco__Jet__db_datamem(Reflex::Class*);
void __edm__reftobase__IndirectVectorHolder_reco__Jet__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__reftobase__IndirectVectorHolder_reco__Jet__datamem_bld(&__edm__reftobase__IndirectVectorHolder_reco__Jet__db_datamem);
Reflex::GenreflexMemberBuilder __edm__reftobase__IndirectVectorHolder_reco__Jet__funcmem_bld(&__edm__reftobase__IndirectVectorHolder_reco__Jet__db_funcmem);
void __edm__reftobase__IndirectVectorHolder_reco__Jet__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::reftobase::IndirectVectorHolder<reco::Jet>"), typeid(::edm::reftobase::IndirectVectorHolder<reco::Jet>), sizeof(::edm::reftobase::IndirectVectorHolder<reco::Jet>), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::VIRTUAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("ClassVersion"), ::edm::reftobase::IndirectVectorHolder<reco::Jet>::Class_Version())
  .AddBase(type_22952, ::Reflex::BaseOffset< ::edm::reftobase::IndirectVectorHolder<reco::Jet>, ::edm::reftobase::BaseVectorHolder<reco::Jet> >::Get(), ::Reflex::PUBLIC)
  .AddTypedef(type_22952, Reflex::Literal("edm::reftobase::IndirectVectorHolder<reco::Jet>::base_type"))
  .AddTypedef(type_2125, Reflex::Literal("edm::reftobase::IndirectVectorHolder<reco::Jet>::size_type"))
  .AddTypedef(type_7762, Reflex::Literal("edm::reftobase::IndirectVectorHolder<reco::Jet>::element_type"))
  .AddTypedef(type_4891, Reflex::Literal("edm::reftobase::IndirectVectorHolder<reco::Jet>::base_ref_type"))
  .AddTypedef(type_22995, Reflex::Literal("edm::reftobase::IndirectVectorHolder<reco::Jet>::const_iterator"))
  .AddTypedef(type_37340, Reflex::Literal("edm::reftobase::IndirectVectorHolder<reco::Jet>::const_iterator_imp"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("IndirectVectorHolder"), constructor_37343, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_42341), Reflex::Literal("IndirectVectorHolder"), constructor_37344, 0, "other", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_4377), Reflex::Literal("IndirectVectorHolder"), constructor_37345, 0, "p", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_21377), Reflex::Literal("IndirectVectorHolder"), constructor_37346, 0, "p", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~IndirectVectorHolder"), destructor_37347, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::DESTRUCTOR )
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_22951, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getBasesTable"), method_x41, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__reftobase__IndirectVectorHolder_reco__Jet__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__reftobase__IndirectVectorHolder_reco__Jet__funcmem_bld);
}

//------Delayed data member builder for class IndirectVectorHolder<reco::Jet> -------------------
void __edm__reftobase__IndirectVectorHolder_reco__Jet__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_21377, Reflex::Literal("helper_"), OffsetOf(__shadow__::__edm__reftobase__IndirectVectorHolder_reco__Jet_, helper_), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class IndirectVectorHolder<reco::Jet> -------------------
void __edm__reftobase__IndirectVectorHolder_reco__Jet__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_42342, type_42341), Reflex::Literal("operator="), operator_37348, 0, "rhs", ::Reflex::PUBLIC | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_42342), Reflex::Literal("swap"), method_37349, 0, "other", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_37617), Reflex::Literal("clone"), method_37350, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_37617), Reflex::Literal("cloneEmpty"), method_37351, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4974), Reflex::Literal("id"), method_37352, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_20128), Reflex::Literal("productGetter"), method_37353, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("empty"), method_37354, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2125), Reflex::Literal("size"), method_37355, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698), Reflex::Literal("clear"), method_37356, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4891c, type_2125), Reflex::Literal("at"), method_37357, 0, "idx", ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2760), Reflex::Literal("vectorHolder"), method_37358, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_42343), Reflex::Literal("push_back"), method_37359, 0, "r", ::Reflex::PUBLIC | ::Reflex::VIRTUAL)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4040), Reflex::Literal("product"), method_37360, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("isAvailable"), method_37361, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_89), Reflex::Literal("Class_Version"), method_37362, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_22995), Reflex::Literal("begin"), method_37363, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_22995), Reflex::Literal("end"), method_37364, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST);
}
//------Stub functions for class BaseVectorHolder<reco::Jet> -------------------------------
static  void operator_37368( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::reftobase::BaseVectorHolder<reco::Jet>*)o)->operator=)(*(const ::edm::reftobase::BaseVectorHolder<reco::Jet>*)arg[0]);
  else   (((::edm::reftobase::BaseVectorHolder<reco::Jet>*)o)->operator=)(*(const ::edm::reftobase::BaseVectorHolder<reco::Jet>*)arg[0]);
}

static void destructor_37371(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::reftobase::BaseVectorHolder<reco::Jet>*)o)->::edm::reftobase::BaseVectorHolder<reco::Jet>::~BaseVectorHolder)();
}
static  void method_37372( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::reftobase::BaseVectorHolder<reco::Jet>*)o)->clone)());
  else   (((const ::edm::reftobase::BaseVectorHolder<reco::Jet>*)o)->clone)();
}

static  void method_37373( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::reftobase::BaseVectorHolder<reco::Jet>*)o)->cloneEmpty)());
  else   (((const ::edm::reftobase::BaseVectorHolder<reco::Jet>*)o)->cloneEmpty)();
}

static  void method_37374( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (edm::RefToBase<reco::Jet>)((((const ::edm::reftobase::BaseVectorHolder<reco::Jet>*)o)->at)(*(::size_t*)arg[0]));
  else   (((const ::edm::reftobase::BaseVectorHolder<reco::Jet>*)o)->at)(*(::size_t*)arg[0]);
}

static  void method_37375( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::reftobase::BaseVectorHolder<reco::Jet>*)o)->empty)());
  else   (((const ::edm::reftobase::BaseVectorHolder<reco::Jet>*)o)->empty)();
}

static  void method_37376( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (size_t)((((const ::edm::reftobase::BaseVectorHolder<reco::Jet>*)o)->size)());
  else   (((const ::edm::reftobase::BaseVectorHolder<reco::Jet>*)o)->size)();
}

static  void method_37377( void*, void* o, const std::vector<void*>&, void*)
{
  (((::edm::reftobase::BaseVectorHolder<reco::Jet>*)o)->clear)();
}

static  void method_37378( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::ProductID)((((const ::edm::reftobase::BaseVectorHolder<reco::Jet>*)o)->id)());
  else   (((const ::edm::reftobase::BaseVectorHolder<reco::Jet>*)o)->id)();
}

static  void method_37379( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::reftobase::BaseVectorHolder<reco::Jet>*)o)->productGetter)());
  else   (((const ::edm::reftobase::BaseVectorHolder<reco::Jet>*)o)->productGetter)();
}

static  void method_37380( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::edm::reftobase::BaseVectorHolder<reco::Jet>*)o)->swap)(*(::edm::reftobase::BaseVectorHolder<reco::Jet>*)arg[0]);
}

static  void method_37381( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::reftobase::BaseVectorHolder<reco::Jet>::const_iterator)((((const ::edm::reftobase::BaseVectorHolder<reco::Jet>*)o)->begin)());
  else   (((const ::edm::reftobase::BaseVectorHolder<reco::Jet>*)o)->begin)();
}

static  void method_37382( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::reftobase::BaseVectorHolder<reco::Jet>::const_iterator)((((const ::edm::reftobase::BaseVectorHolder<reco::Jet>*)o)->end)());
  else   (((const ::edm::reftobase::BaseVectorHolder<reco::Jet>*)o)->end)();
}

static  void method_37383( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::edm::reftobase::BaseVectorHolder<reco::Jet>*)o)->push_back)((const ::edm::reftobase::BaseHolder<reco::Jet>*)arg[0]);
}

static  void method_37384( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::auto_ptr<edm::reftobase::RefVectorHolderBase>)((((const ::edm::reftobase::BaseVectorHolder<reco::Jet>*)o)->vectorHolder)());
  else   (((const ::edm::reftobase::BaseVectorHolder<reco::Jet>*)o)->vectorHolder)();
}

static  void method_37385( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::reftobase::BaseVectorHolder<reco::Jet>*)o)->product)());
  else   (((const ::edm::reftobase::BaseVectorHolder<reco::Jet>*)o)->product)();
}

static  void method_37386( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::reftobase::BaseVectorHolder<reco::Jet>*)o)->isAvailable)());
  else   (((const ::edm::reftobase::BaseVectorHolder<reco::Jet>*)o)->isAvailable)();
}

static  void method_37387( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (short)((((::edm::reftobase::BaseVectorHolder<reco::Jet>*)o)->Class_Version)());
  else   (((::edm::reftobase::BaseVectorHolder<reco::Jet>*)o)->Class_Version)();
}

//------Dictionary for class BaseVectorHolder<reco::Jet> -------------------------------
void __edm__reftobase__BaseVectorHolder_reco__Jet__db_datamem(Reflex::Class*);
void __edm__reftobase__BaseVectorHolder_reco__Jet__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__reftobase__BaseVectorHolder_reco__Jet__datamem_bld(&__edm__reftobase__BaseVectorHolder_reco__Jet__db_datamem);
Reflex::GenreflexMemberBuilder __edm__reftobase__BaseVectorHolder_reco__Jet__funcmem_bld(&__edm__reftobase__BaseVectorHolder_reco__Jet__db_funcmem);
void __edm__reftobase__BaseVectorHolder_reco__Jet__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::reftobase::BaseVectorHolder<reco::Jet>"), typeid(::edm::reftobase::BaseVectorHolder<reco::Jet>), sizeof(::edm::reftobase::BaseVectorHolder<reco::Jet>), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::ABSTRACT | ::Reflex::VIRTUAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("ClassVersion"), ::edm::reftobase::BaseVectorHolder<reco::Jet>::Class_Version())
  .AddTypedef(type_2125, Reflex::Literal("edm::reftobase::BaseVectorHolder<reco::Jet>::size_type"))
  .AddTypedef(type_7762, Reflex::Literal("edm::reftobase::BaseVectorHolder<reco::Jet>::element_type"))
  .AddTypedef(type_4891, Reflex::Literal("edm::reftobase::BaseVectorHolder<reco::Jet>::base_ref_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_42344, type_42345), Reflex::Literal("operator="), operator_37368, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~BaseVectorHolder"), destructor_37371, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::DESTRUCTOR )
  .AddOnDemandFunctionMemberBuilder(&__edm__reftobase__BaseVectorHolder_reco__Jet__funcmem_bld);
}

//------Delayed data member builder for class BaseVectorHolder<reco::Jet> -------------------
void __edm__reftobase__BaseVectorHolder_reco__Jet__db_datamem(Reflex::Class*) {

}
//------Delayed function member builder for class BaseVectorHolder<reco::Jet> -------------------
void __edm__reftobase__BaseVectorHolder_reco__Jet__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_37617), Reflex::Literal("clone"), method_37372, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::ABSTRACT | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_37617), Reflex::Literal("cloneEmpty"), method_37373, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::ABSTRACT | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4891c, type_2125), Reflex::Literal("at"), method_37374, 0, "idx", ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::ABSTRACT | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("empty"), method_37375, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::ABSTRACT | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2125), Reflex::Literal("size"), method_37376, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::ABSTRACT | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698), Reflex::Literal("clear"), method_37377, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::ABSTRACT)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4974), Reflex::Literal("id"), method_37378, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::ABSTRACT | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_20128), Reflex::Literal("productGetter"), method_37379, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::ABSTRACT | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_42344), Reflex::Literal("swap"), method_37380, 0, "", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_22995), Reflex::Literal("begin"), method_37381, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::ABSTRACT | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_22995), Reflex::Literal("end"), method_37382, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::ABSTRACT | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_42343), Reflex::Literal("push_back"), method_37383, 0, "", ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::ABSTRACT)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2760), Reflex::Literal("vectorHolder"), method_37384, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::ABSTRACT | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4040), Reflex::Literal("product"), method_37385, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::ABSTRACT | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("isAvailable"), method_37386, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::ABSTRACT | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_89), Reflex::Literal("Class_Version"), method_37387, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC);
}
//------Stub functions for class Holder<reco::Candidate,edm::RefToBase<reco::Jet> > -------------------------------
static void constructor_37527( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::reftobase::Holder<reco::Candidate,edm::RefToBase<reco::Jet> >();
  else ::new(mem) ::edm::reftobase::Holder<reco::Candidate,edm::RefToBase<reco::Jet> >();
}

static void constructor_37528( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::reftobase::Holder<reco::Candidate,edm::RefToBase<reco::Jet> >(*(const ::edm::reftobase::Holder<reco::Candidate,edm::RefToBase<reco::Jet> >*)arg[0]);
  else ::new(mem) ::edm::reftobase::Holder<reco::Candidate,edm::RefToBase<reco::Jet> >(*(const ::edm::reftobase::Holder<reco::Candidate,edm::RefToBase<reco::Jet> >*)arg[0]);
}

static void constructor_37529( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::reftobase::Holder<reco::Candidate,edm::RefToBase<reco::Jet> >(*(const ::edm::RefToBase<reco::Jet>*)arg[0]);
  else ::new(mem) ::edm::reftobase::Holder<reco::Candidate,edm::RefToBase<reco::Jet> >(*(const ::edm::RefToBase<reco::Jet>*)arg[0]);
}

static  void operator_37530( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::reftobase::Holder<reco::Candidate,edm::RefToBase<reco::Jet> >*)o)->operator=)(*(const ::edm::reftobase::Holder<reco::Candidate,edm::RefToBase<reco::Jet> >*)arg[0]);
  else   (((::edm::reftobase::Holder<reco::Candidate,edm::RefToBase<reco::Jet> >*)o)->operator=)(*(const ::edm::reftobase::Holder<reco::Candidate,edm::RefToBase<reco::Jet> >*)arg[0]);
}

static  void method_37531( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::edm::reftobase::Holder<reco::Candidate,edm::RefToBase<reco::Jet> >*)o)->swap)(*(::edm::reftobase::Holder<reco::Candidate,edm::RefToBase<reco::Jet> >*)arg[0]);
}

static void destructor_37532(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::reftobase::Holder<reco::Candidate,edm::RefToBase<reco::Jet> >*)o)->::edm::reftobase::Holder<reco::Candidate,edm::RefToBase<reco::Jet> >::~Holder)();
}
static  void method_37533( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::reftobase::Holder<reco::Candidate,edm::RefToBase<reco::Jet> >*)o)->clone)());
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::RefToBase<reco::Jet> >*)o)->clone)();
}

static  void method_37534( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::reftobase::Holder<reco::Candidate,edm::RefToBase<reco::Jet> >*)o)->getPtr)());
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::RefToBase<reco::Jet> >*)o)->getPtr)();
}

static  void method_37535( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::ProductID)((((const ::edm::reftobase::Holder<reco::Candidate,edm::RefToBase<reco::Jet> >*)o)->id)());
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::RefToBase<reco::Jet> >*)o)->id)();
}

static  void method_37536( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (size_t)((((const ::edm::reftobase::Holder<reco::Candidate,edm::RefToBase<reco::Jet> >*)o)->key)());
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::RefToBase<reco::Jet> >*)o)->key)();
}

static  void method_37537( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::reftobase::Holder<reco::Candidate,edm::RefToBase<reco::Jet> >*)o)->isEqualTo)(*(const ::edm::reftobase::BaseHolder<reco::Candidate>*)arg[0]));
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::RefToBase<reco::Jet> >*)o)->isEqualTo)(*(const ::edm::reftobase::BaseHolder<reco::Candidate>*)arg[0]);
}

static  void method_37538( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::reftobase::Holder<reco::Candidate,edm::RefToBase<reco::Jet> >*)o)->getRef)();
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::RefToBase<reco::Jet> >*)o)->getRef)();
}

static  void method_37539( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::reftobase::Holder<reco::Candidate,edm::RefToBase<reco::Jet> >*)o)->fillRefIfMyTypeMatches)(*(::edm::reftobase::RefHolderBase*)arg[0],
    *(::std::basic_string<char>*)arg[1]));
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::RefToBase<reco::Jet> >*)o)->fillRefIfMyTypeMatches)(*(::edm::reftobase::RefHolderBase*)arg[0],
    *(::std::basic_string<char>*)arg[1]);
}

static  void method_37540( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::auto_ptr<edm::reftobase::RefHolderBase>)((((const ::edm::reftobase::Holder<reco::Candidate,edm::RefToBase<reco::Jet> >*)o)->holder)());
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::RefToBase<reco::Jet> >*)o)->holder)();
}

static  void method_37541( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::auto_ptr<edm::reftobase::BaseVectorHolder<reco::Candidate> >)((((const ::edm::reftobase::Holder<reco::Candidate,edm::RefToBase<reco::Jet> >*)o)->makeVectorHolder)());
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::RefToBase<reco::Jet> >*)o)->makeVectorHolder)();
}

static  void method_37542( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::auto_ptr<edm::reftobase::RefVectorHolderBase>)((((const ::edm::reftobase::Holder<reco::Candidate,edm::RefToBase<reco::Jet> >*)o)->makeVectorBaseHolder)());
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::RefToBase<reco::Jet> >*)o)->makeVectorBaseHolder)();
}

static  void method_37543( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::reftobase::Holder<reco::Candidate,edm::RefToBase<reco::Jet> >*)o)->productGetter)());
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::RefToBase<reco::Jet> >*)o)->productGetter)();
}

static  void method_37544( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::reftobase::Holder<reco::Candidate,edm::RefToBase<reco::Jet> >*)o)->hasProductCache)());
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::RefToBase<reco::Jet> >*)o)->hasProductCache)();
}

static  void method_37545( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::reftobase::Holder<reco::Candidate,edm::RefToBase<reco::Jet> >*)o)->product)());
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::RefToBase<reco::Jet> >*)o)->product)();
}

static  void method_37546( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::reftobase::Holder<reco::Candidate,edm::RefToBase<reco::Jet> >*)o)->isAvailable)());
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::RefToBase<reco::Jet> >*)o)->isAvailable)();
}

static  void method_37547( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (short)((((::edm::reftobase::Holder<reco::Candidate,edm::RefToBase<reco::Jet> >*)o)->Class_Version)());
  else   (((::edm::reftobase::Holder<reco::Candidate,edm::RefToBase<reco::Jet> >*)o)->Class_Version)();
}

static void method_newdel_22961( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::reftobase::Holder<reco::Candidate,edm::RefToBase<reco::Jet> > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::reftobase::Holder<reco::Candidate,edm::RefToBase<reco::Jet> > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::reftobase::Holder<reco::Candidate,edm::RefToBase<reco::Jet> > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::reftobase::Holder<reco::Candidate,edm::RefToBase<reco::Jet> > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::reftobase::Holder<reco::Candidate,edm::RefToBase<reco::Jet> > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

static void method_x43( void* retaddr, void*, const std::vector<void*>&, void*)
{
  typedef std::vector<std::pair< ::Reflex::Base, int> > Bases_t;
  static Bases_t s_bases;
  if ( !s_bases.size() ) {
    s_bases.push_back(std::make_pair(::Reflex::Base( ::Reflex::TypeBuilder(Reflex::Literal("edm::reftobase::BaseHolder<reco::Candidate>")), ::Reflex::BaseOffset< ::edm::reftobase::Holder<reco::Candidate,edm::RefToBase<reco::Jet> >,::edm::reftobase::BaseHolder<reco::Candidate> >::Get(),::Reflex::PUBLIC), 0));
  }
  if (retaddr) *(Bases_t**)retaddr = &s_bases;
}

//------Dictionary for class Holder<reco::Candidate,edm::RefToBase<reco::Jet> > -------------------------------
void __edm__reftobase__Holder_reco__Candidate_edm__RefToBase_reco__Jet_s__db_datamem(Reflex::Class*);
void __edm__reftobase__Holder_reco__Candidate_edm__RefToBase_reco__Jet_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__reftobase__Holder_reco__Candidate_edm__RefToBase_reco__Jet_s__datamem_bld(&__edm__reftobase__Holder_reco__Candidate_edm__RefToBase_reco__Jet_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__reftobase__Holder_reco__Candidate_edm__RefToBase_reco__Jet_s__funcmem_bld(&__edm__reftobase__Holder_reco__Candidate_edm__RefToBase_reco__Jet_s__db_funcmem);
void __edm__reftobase__Holder_reco__Candidate_edm__RefToBase_reco__Jet_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::reftobase::Holder<reco::Candidate,edm::RefToBase<reco::Jet> >"), typeid(::edm::reftobase::Holder<reco::Candidate,edm::RefToBase<reco::Jet> >), sizeof(::edm::reftobase::Holder<reco::Candidate,edm::RefToBase<reco::Jet> >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::VIRTUAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("ClassVersion"), ::edm::reftobase::Holder<reco::Candidate,edm::RefToBase<reco::Jet> >::Class_Version())
  .AddBase(type_22939, ::Reflex::BaseOffset< ::edm::reftobase::Holder<reco::Candidate,edm::RefToBase<reco::Jet> >, ::edm::reftobase::BaseHolder<reco::Candidate> >::Get(), ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("Holder"), constructor_37527, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_42360), Reflex::Literal("Holder"), constructor_37528, 0, "other", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_33732), Reflex::Literal("Holder"), constructor_37529, 0, "r", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~Holder"), destructor_37532, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::DESTRUCTOR )
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_22961, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getBasesTable"), method_x43, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__reftobase__Holder_reco__Candidate_edm__RefToBase_reco__Jet_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__reftobase__Holder_reco__Candidate_edm__RefToBase_reco__Jet_s__funcmem_bld);
}

//------Delayed data member builder for class Holder<reco::Candidate,edm::RefToBase<reco::Jet> > -------------------
void __edm__reftobase__Holder_reco__Candidate_edm__RefToBase_reco__Jet_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_4891, Reflex::Literal("ref_"), OffsetOf(__shadow__::__edm__reftobase__Holder_reco__Candidate_edm__RefToBase_reco__Jet_s_, ref_), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class Holder<reco::Candidate,edm::RefToBase<reco::Jet> > -------------------
void __edm__reftobase__Holder_reco__Candidate_edm__RefToBase_reco__Jet_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_42361, type_42360), Reflex::Literal("operator="), operator_37530, 0, "rhs", ::Reflex::PUBLIC | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_42361), Reflex::Literal("swap"), method_37531, 0, "other", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_37744), Reflex::Literal("clone"), method_37533, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_37747), Reflex::Literal("getPtr"), method_37534, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4974), Reflex::Literal("id"), method_37535, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2125), Reflex::Literal("key"), method_37536, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569, type_42324), Reflex::Literal("isEqualTo"), method_37537, 0, "rhs", ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_33732), Reflex::Literal("getRef"), method_37538, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569, type_21403, type_11032), Reflex::Literal("fillRefIfMyTypeMatches"), method_37539, 0, "fillme;msg", ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2762), Reflex::Literal("holder"), method_37540, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2766), Reflex::Literal("makeVectorHolder"), method_37541, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2760), Reflex::Literal("makeVectorBaseHolder"), method_37542, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_20128), Reflex::Literal("productGetter"), method_37543, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("hasProductCache"), method_37544, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4040), Reflex::Literal("product"), method_37545, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("isAvailable"), method_37546, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_89), Reflex::Literal("Class_Version"), method_37547, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC);
}
//------Stub functions for class Holder<reco::Candidate,edm::Ref<std::vector<reco::PFClusterJet, std::allocator<reco::PFClusterJet> >, reco::PFClusterJet, edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet, std::allocator<reco::PFClusterJet> >, reco::PFClusterJet> > > -------------------------------
static void constructor_37549( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >();
  else ::new(mem) ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >();
}

static void constructor_37550( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >(*(const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)arg[0]);
  else ::new(mem) ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >(*(const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)arg[0]);
}

static void constructor_37551( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >(*(const ::edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)arg[0]);
  else ::new(mem) ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >(*(const ::edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)arg[0]);
}

static  void operator_37552( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->operator=)(*(const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)arg[0]);
  else   (((::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->operator=)(*(const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)arg[0]);
}

static  void method_37553( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->swap)(*(::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)arg[0]);
}

static void destructor_37554(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >::~Holder)();
}
static  void method_37555( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->clone)());
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->clone)();
}

static  void method_37556( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->getPtr)());
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->getPtr)();
}

static  void method_37557( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::ProductID)((((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->id)());
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->id)();
}

static  void method_37558( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (size_t)((((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->key)());
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->key)();
}

static  void method_37559( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->isEqualTo)(*(const ::edm::reftobase::BaseHolder<reco::Candidate>*)arg[0]));
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->isEqualTo)(*(const ::edm::reftobase::BaseHolder<reco::Candidate>*)arg[0]);
}

static  void method_37560( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->getRef)();
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->getRef)();
}

static  void method_37561( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->fillRefIfMyTypeMatches)(*(::edm::reftobase::RefHolderBase*)arg[0],
    *(::std::basic_string<char>*)arg[1]));
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->fillRefIfMyTypeMatches)(*(::edm::reftobase::RefHolderBase*)arg[0],
    *(::std::basic_string<char>*)arg[1]);
}

static  void method_37562( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::auto_ptr<edm::reftobase::RefHolderBase>)((((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->holder)());
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->holder)();
}

static  void method_37563( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::auto_ptr<edm::reftobase::BaseVectorHolder<reco::Candidate> >)((((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->makeVectorHolder)());
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->makeVectorHolder)();
}

static  void method_37564( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::auto_ptr<edm::reftobase::RefVectorHolderBase>)((((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->makeVectorBaseHolder)());
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->makeVectorBaseHolder)();
}

static  void method_37565( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->productGetter)());
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->productGetter)();
}

static  void method_37566( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->hasProductCache)());
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->hasProductCache)();
}

static  void method_37567( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->product)());
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->product)();
}

static  void method_37568( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->isAvailable)());
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->isAvailable)();
}

static  void method_37569( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (short)((((::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->Class_Version)());
  else   (((::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->Class_Version)();
}

static void method_newdel_22962( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

static void method_x45( void* retaddr, void*, const std::vector<void*>&, void*)
{
  typedef std::vector<std::pair< ::Reflex::Base, int> > Bases_t;
  static Bases_t s_bases;
  if ( !s_bases.size() ) {
    s_bases.push_back(std::make_pair(::Reflex::Base( ::Reflex::TypeBuilder(Reflex::Literal("edm::reftobase::BaseHolder<reco::Candidate>")), ::Reflex::BaseOffset< ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >,::edm::reftobase::BaseHolder<reco::Candidate> >::Get(),::Reflex::PUBLIC), 0));
  }
  if (retaddr) *(Bases_t**)retaddr = &s_bases;
}

//------Dictionary for class Holder<reco::Candidate,edm::Ref<std::vector<reco::PFClusterJet, std::allocator<reco::PFClusterJet> >, reco::PFClusterJet, edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet, std::allocator<reco::PFClusterJet> >, reco::PFClusterJet> > > -------------------------------
void __edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s_s__db_datamem(Reflex::Class*);
void __edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s_s__datamem_bld(&__edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s_s__funcmem_bld(&__edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s_s__db_funcmem);
void __edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >"), typeid(::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >), sizeof(::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::VIRTUAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("ClassVersion"), ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >::Class_Version())
  .AddBase(type_22939, ::Reflex::BaseOffset< ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >, ::edm::reftobase::BaseHolder<reco::Candidate> >::Get(), ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("Holder"), constructor_37549, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_42362), Reflex::Literal("Holder"), constructor_37550, 0, "other", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_36619), Reflex::Literal("Holder"), constructor_37551, 0, "r", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~Holder"), destructor_37554, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::DESTRUCTOR )
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_22962, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getBasesTable"), method_x45, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s_s__funcmem_bld);
}

//------Delayed data member builder for class Holder<reco::Candidate,edm::Ref<std::vector<reco::PFClusterJet, std::allocator<reco::PFClusterJet> >, reco::PFClusterJet, edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet, std::allocator<reco::PFClusterJet> >, reco::PFClusterJet> > > -------------------
void __edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_4921, Reflex::Literal("ref_"), OffsetOf(__shadow__::__edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s_s_, ref_), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class Holder<reco::Candidate,edm::Ref<std::vector<reco::PFClusterJet, std::allocator<reco::PFClusterJet> >, reco::PFClusterJet, edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet, std::allocator<reco::PFClusterJet> >, reco::PFClusterJet> > > -------------------
void __edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_42363, type_42362), Reflex::Literal("operator="), operator_37552, 0, "rhs", ::Reflex::PUBLIC | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_42363), Reflex::Literal("swap"), method_37553, 0, "other", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_37744), Reflex::Literal("clone"), method_37555, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_37747), Reflex::Literal("getPtr"), method_37556, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4974), Reflex::Literal("id"), method_37557, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2125), Reflex::Literal("key"), method_37558, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569, type_42324), Reflex::Literal("isEqualTo"), method_37559, 0, "rhs", ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_36619), Reflex::Literal("getRef"), method_37560, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569, type_21403, type_11032), Reflex::Literal("fillRefIfMyTypeMatches"), method_37561, 0, "fillme;msg", ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2762), Reflex::Literal("holder"), method_37562, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2766), Reflex::Literal("makeVectorHolder"), method_37563, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2760), Reflex::Literal("makeVectorBaseHolder"), method_37564, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_20128), Reflex::Literal("productGetter"), method_37565, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("hasProductCache"), method_37566, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4040), Reflex::Literal("product"), method_37567, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("isAvailable"), method_37568, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_89), Reflex::Literal("Class_Version"), method_37569, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC);
}
//------Stub functions for class Holder<reco::Candidate,edm::Ref<std::vector<reco::TrackJet, std::allocator<reco::TrackJet> >, reco::TrackJet, edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet, std::allocator<reco::TrackJet> >, reco::TrackJet> > > -------------------------------
static void constructor_37593( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >();
  else ::new(mem) ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >();
}

static void constructor_37594( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >(*(const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)arg[0]);
  else ::new(mem) ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >(*(const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)arg[0]);
}

static void constructor_37595( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >(*(const ::edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)arg[0]);
  else ::new(mem) ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >(*(const ::edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)arg[0]);
}

static  void operator_37596( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->operator=)(*(const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)arg[0]);
  else   (((::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->operator=)(*(const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)arg[0]);
}

static  void method_37597( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->swap)(*(::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)arg[0]);
}

static void destructor_37598(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >::~Holder)();
}
static  void method_37599( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->clone)());
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->clone)();
}

static  void method_37600( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->getPtr)());
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->getPtr)();
}

static  void method_37601( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::ProductID)((((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->id)());
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->id)();
}

static  void method_37602( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (size_t)((((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->key)());
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->key)();
}

static  void method_37603( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->isEqualTo)(*(const ::edm::reftobase::BaseHolder<reco::Candidate>*)arg[0]));
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->isEqualTo)(*(const ::edm::reftobase::BaseHolder<reco::Candidate>*)arg[0]);
}

static  void method_37604( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->getRef)();
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->getRef)();
}

static  void method_37605( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->fillRefIfMyTypeMatches)(*(::edm::reftobase::RefHolderBase*)arg[0],
    *(::std::basic_string<char>*)arg[1]));
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->fillRefIfMyTypeMatches)(*(::edm::reftobase::RefHolderBase*)arg[0],
    *(::std::basic_string<char>*)arg[1]);
}

static  void method_37606( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::auto_ptr<edm::reftobase::RefHolderBase>)((((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->holder)());
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->holder)();
}

static  void method_37607( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::auto_ptr<edm::reftobase::BaseVectorHolder<reco::Candidate> >)((((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->makeVectorHolder)());
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->makeVectorHolder)();
}

static  void method_37608( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::auto_ptr<edm::reftobase::RefVectorHolderBase>)((((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->makeVectorBaseHolder)());
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->makeVectorBaseHolder)();
}

static  void method_37609( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->productGetter)());
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->productGetter)();
}

static  void method_37610( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->hasProductCache)());
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->hasProductCache)();
}

static  void method_37611( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->product)());
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->product)();
}

static  void method_37612( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->isAvailable)());
  else   (((const ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->isAvailable)();
}

static  void method_37613( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (short)((((::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->Class_Version)());
  else   (((::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->Class_Version)();
}

static void method_newdel_22964( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

static void method_x47( void* retaddr, void*, const std::vector<void*>&, void*)
{
  typedef std::vector<std::pair< ::Reflex::Base, int> > Bases_t;
  static Bases_t s_bases;
  if ( !s_bases.size() ) {
    s_bases.push_back(std::make_pair(::Reflex::Base( ::Reflex::TypeBuilder(Reflex::Literal("edm::reftobase::BaseHolder<reco::Candidate>")), ::Reflex::BaseOffset< ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >,::edm::reftobase::BaseHolder<reco::Candidate> >::Get(),::Reflex::PUBLIC), 0));
  }
  if (retaddr) *(Bases_t**)retaddr = &s_bases;
}

//------Dictionary for class Holder<reco::Candidate,edm::Ref<std::vector<reco::TrackJet, std::allocator<reco::TrackJet> >, reco::TrackJet, edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet, std::allocator<reco::TrackJet> >, reco::TrackJet> > > -------------------------------
void __edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s_s__db_datamem(Reflex::Class*);
void __edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s_s__datamem_bld(&__edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s_s__funcmem_bld(&__edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s_s__db_funcmem);
void __edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >"), typeid(::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >), sizeof(::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::VIRTUAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("ClassVersion"), ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >::Class_Version())
  .AddBase(type_22939, ::Reflex::BaseOffset< ::edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >, ::edm::reftobase::BaseHolder<reco::Candidate> >::Get(), ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("Holder"), constructor_37593, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_42366), Reflex::Literal("Holder"), constructor_37594, 0, "other", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_36647), Reflex::Literal("Holder"), constructor_37595, 0, "r", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~Holder"), destructor_37598, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::DESTRUCTOR )
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_22964, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getBasesTable"), method_x47, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s_s__funcmem_bld);
}

//------Delayed data member builder for class Holder<reco::Candidate,edm::Ref<std::vector<reco::TrackJet, std::allocator<reco::TrackJet> >, reco::TrackJet, edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet, std::allocator<reco::TrackJet> >, reco::TrackJet> > > -------------------
void __edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_4924, Reflex::Literal("ref_"), OffsetOf(__shadow__::__edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s_s_, ref_), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class Holder<reco::Candidate,edm::Ref<std::vector<reco::TrackJet, std::allocator<reco::TrackJet> >, reco::TrackJet, edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet, std::allocator<reco::TrackJet> >, reco::TrackJet> > > -------------------
void __edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_42367, type_42366), Reflex::Literal("operator="), operator_37596, 0, "rhs", ::Reflex::PUBLIC | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_42367), Reflex::Literal("swap"), method_37597, 0, "other", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_37744), Reflex::Literal("clone"), method_37599, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_37747), Reflex::Literal("getPtr"), method_37600, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4974), Reflex::Literal("id"), method_37601, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2125), Reflex::Literal("key"), method_37602, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569, type_42324), Reflex::Literal("isEqualTo"), method_37603, 0, "rhs", ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_36647), Reflex::Literal("getRef"), method_37604, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569, type_21403, type_11032), Reflex::Literal("fillRefIfMyTypeMatches"), method_37605, 0, "fillme;msg", ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2762), Reflex::Literal("holder"), method_37606, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2766), Reflex::Literal("makeVectorHolder"), method_37607, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2760), Reflex::Literal("makeVectorBaseHolder"), method_37608, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_20128), Reflex::Literal("productGetter"), method_37609, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("hasProductCache"), method_37610, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4040), Reflex::Literal("product"), method_37611, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("isAvailable"), method_37612, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_89), Reflex::Literal("Class_Version"), method_37613, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC);
}
//------Stub functions for class vector<edm::FwdPtr<reco::PFClusterJet>,std::allocator<edm::FwdPtr<reco::PFClusterJet> > > -------------------------------
static void constructor_13658( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<edm::FwdPtr<reco::PFClusterJet> >();
  else ::new(mem) ::std::vector<edm::FwdPtr<reco::PFClusterJet> >();
}

static void constructor_13659( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<edm::FwdPtr<reco::PFClusterJet> >(*(const ::std::allocator<edm::FwdPtr<reco::PFClusterJet> >*)arg[0]);
  else ::new(mem) ::std::vector<edm::FwdPtr<reco::PFClusterJet> >(*(const ::std::allocator<edm::FwdPtr<reco::PFClusterJet> >*)arg[0]);
}

static void constructor_13660( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if ( arg.size() == 1 ) {
    if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<edm::FwdPtr<reco::PFClusterJet> >(*(::std::size_t*)arg[0]);
  else ::new(mem) ::std::vector<edm::FwdPtr<reco::PFClusterJet> >(*(::std::size_t*)arg[0]);
  }
  else if ( arg.size() == 2 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<edm::FwdPtr<reco::PFClusterJet> >(*(::std::size_t*)arg[0],
      *(const ::edm::FwdPtr<reco::PFClusterJet>*)arg[1]);
  else ::new(mem) ::std::vector<edm::FwdPtr<reco::PFClusterJet> >(*(::std::size_t*)arg[0],
      *(const ::edm::FwdPtr<reco::PFClusterJet>*)arg[1]);
  }
  else if ( arg.size() == 3 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<edm::FwdPtr<reco::PFClusterJet> >(*(::std::size_t*)arg[0],
      *(const ::edm::FwdPtr<reco::PFClusterJet>*)arg[1],
      *(const ::std::allocator<edm::FwdPtr<reco::PFClusterJet> >*)arg[2]);
  else ::new(mem) ::std::vector<edm::FwdPtr<reco::PFClusterJet> >(*(::std::size_t*)arg[0],
      *(const ::edm::FwdPtr<reco::PFClusterJet>*)arg[1],
      *(const ::std::allocator<edm::FwdPtr<reco::PFClusterJet> >*)arg[2]);
  }
}

static void constructor_13661( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<edm::FwdPtr<reco::PFClusterJet> >(*(const ::std::vector<edm::FwdPtr<reco::PFClusterJet> >*)arg[0]);
  else ::new(mem) ::std::vector<edm::FwdPtr<reco::PFClusterJet> >(*(const ::std::vector<edm::FwdPtr<reco::PFClusterJet> >*)arg[0]);
}

static void destructor_13662(void*, void * o, const std::vector<void*>&, void *) {
(((::std::vector<edm::FwdPtr<reco::PFClusterJet> >*)o)->::std::vector<edm::FwdPtr<reco::PFClusterJet> >::~vector)();
}
static  void operator_13663( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<edm::FwdPtr<reco::PFClusterJet> >*)o)->operator=)(*(const ::std::vector<edm::FwdPtr<reco::PFClusterJet> >*)arg[0]);
  else   (((::std::vector<edm::FwdPtr<reco::PFClusterJet> >*)o)->operator=)(*(const ::std::vector<edm::FwdPtr<reco::PFClusterJet> >*)arg[0]);
}

static  void method_13664( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<edm::FwdPtr<reco::PFClusterJet> >*)o)->assign)(*(::std::size_t*)arg[0],
    *(const ::edm::FwdPtr<reco::PFClusterJet>*)arg[1]);
}

static  void method_13665( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::PFClusterJet>*,std::vector<edm::FwdPtr<reco::PFClusterJet> > >)((((::std::vector<edm::FwdPtr<reco::PFClusterJet> >*)o)->begin)());
  else   (((::std::vector<edm::FwdPtr<reco::PFClusterJet> >*)o)->begin)();
}

static  void method_13666( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<const edm::FwdPtr<reco::PFClusterJet>*,std::vector<edm::FwdPtr<reco::PFClusterJet> > >)((((const ::std::vector<edm::FwdPtr<reco::PFClusterJet> >*)o)->begin)());
  else   (((const ::std::vector<edm::FwdPtr<reco::PFClusterJet> >*)o)->begin)();
}

static  void method_13667( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::PFClusterJet>*,std::vector<edm::FwdPtr<reco::PFClusterJet> > >)((((::std::vector<edm::FwdPtr<reco::PFClusterJet> >*)o)->end)());
  else   (((::std::vector<edm::FwdPtr<reco::PFClusterJet> >*)o)->end)();
}

static  void method_13668( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<const edm::FwdPtr<reco::PFClusterJet>*,std::vector<edm::FwdPtr<reco::PFClusterJet> > >)((((const ::std::vector<edm::FwdPtr<reco::PFClusterJet> >*)o)->end)());
  else   (((const ::std::vector<edm::FwdPtr<reco::PFClusterJet> >*)o)->end)();
}

static  void method_13673( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::std::vector<edm::FwdPtr<reco::PFClusterJet> >*)o)->size)());
  else   (((const ::std::vector<edm::FwdPtr<reco::PFClusterJet> >*)o)->size)();
}

static  void method_13674( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::std::vector<edm::FwdPtr<reco::PFClusterJet> >*)o)->max_size)());
  else   (((const ::std::vector<edm::FwdPtr<reco::PFClusterJet> >*)o)->max_size)();
}

static  void method_13675( void*, void* o, const std::vector<void*>& arg, void*)
{
  if ( arg.size() == 1 ) {
    (((::std::vector<edm::FwdPtr<reco::PFClusterJet> >*)o)->resize)(*(::std::size_t*)arg[0]);
  }
  else if ( arg.size() == 2 ) { 
    (((::std::vector<edm::FwdPtr<reco::PFClusterJet> >*)o)->resize)(*(::std::size_t*)arg[0],
      *(::edm::FwdPtr<reco::PFClusterJet>*)arg[1]);
  }
}

static  void method_13676( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::std::vector<edm::FwdPtr<reco::PFClusterJet> >*)o)->capacity)());
  else   (((const ::std::vector<edm::FwdPtr<reco::PFClusterJet> >*)o)->capacity)();
}

static  void method_13677( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::std::vector<edm::FwdPtr<reco::PFClusterJet> >*)o)->empty)());
  else   (((const ::std::vector<edm::FwdPtr<reco::PFClusterJet> >*)o)->empty)();
}

static  void method_13678( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<edm::FwdPtr<reco::PFClusterJet> >*)o)->reserve)(*(::std::size_t*)arg[0]);
}

static  void operator_13679( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<edm::FwdPtr<reco::PFClusterJet> >*)o)->operator[])(*(::std::size_t*)arg[0]);
  else   (((::std::vector<edm::FwdPtr<reco::PFClusterJet> >*)o)->operator[])(*(::std::size_t*)arg[0]);
}

static  void operator_13680( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<edm::FwdPtr<reco::PFClusterJet> >*)o)->operator[])(*(::std::size_t*)arg[0]);
  else   (((const ::std::vector<edm::FwdPtr<reco::PFClusterJet> >*)o)->operator[])(*(::std::size_t*)arg[0]);
}

static  void method_13682( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<edm::FwdPtr<reco::PFClusterJet> >*)o)->at)(*(::std::size_t*)arg[0]);
  else   (((::std::vector<edm::FwdPtr<reco::PFClusterJet> >*)o)->at)(*(::std::size_t*)arg[0]);
}

static  void method_13683( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<edm::FwdPtr<reco::PFClusterJet> >*)o)->at)(*(::std::size_t*)arg[0]);
  else   (((const ::std::vector<edm::FwdPtr<reco::PFClusterJet> >*)o)->at)(*(::std::size_t*)arg[0]);
}

static  void method_13684( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<edm::FwdPtr<reco::PFClusterJet> >*)o)->front)();
  else   (((::std::vector<edm::FwdPtr<reco::PFClusterJet> >*)o)->front)();
}

static  void method_13685( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<edm::FwdPtr<reco::PFClusterJet> >*)o)->front)();
  else   (((const ::std::vector<edm::FwdPtr<reco::PFClusterJet> >*)o)->front)();
}

static  void method_13686( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<edm::FwdPtr<reco::PFClusterJet> >*)o)->back)();
  else   (((::std::vector<edm::FwdPtr<reco::PFClusterJet> >*)o)->back)();
}

static  void method_13687( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<edm::FwdPtr<reco::PFClusterJet> >*)o)->back)();
  else   (((const ::std::vector<edm::FwdPtr<reco::PFClusterJet> >*)o)->back)();
}

static  void method_13688( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((::std::vector<edm::FwdPtr<reco::PFClusterJet> >*)o)->data)());
  else   (((::std::vector<edm::FwdPtr<reco::PFClusterJet> >*)o)->data)();
}

static  void method_13689( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::std::vector<edm::FwdPtr<reco::PFClusterJet> >*)o)->data)());
  else   (((const ::std::vector<edm::FwdPtr<reco::PFClusterJet> >*)o)->data)();
}

static  void method_13690( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<edm::FwdPtr<reco::PFClusterJet> >*)o)->push_back)(*(const ::edm::FwdPtr<reco::PFClusterJet>*)arg[0]);
}

static  void method_13691( void*, void* o, const std::vector<void*>&, void*)
{
  (((::std::vector<edm::FwdPtr<reco::PFClusterJet> >*)o)->pop_back)();
}

static  void method_13692( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::PFClusterJet>*,std::vector<edm::FwdPtr<reco::PFClusterJet> > >)((((::std::vector<edm::FwdPtr<reco::PFClusterJet> >*)o)->insert)(*(::__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::PFClusterJet>*,std::vector<edm::FwdPtr<reco::PFClusterJet> > >*)arg[0],
    *(const ::edm::FwdPtr<reco::PFClusterJet>*)arg[1]));
  else   (((::std::vector<edm::FwdPtr<reco::PFClusterJet> >*)o)->insert)(*(::__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::PFClusterJet>*,std::vector<edm::FwdPtr<reco::PFClusterJet> > >*)arg[0],
    *(const ::edm::FwdPtr<reco::PFClusterJet>*)arg[1]);
}

static  void method_13693( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<edm::FwdPtr<reco::PFClusterJet> >*)o)->insert)(*(::__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::PFClusterJet>*,std::vector<edm::FwdPtr<reco::PFClusterJet> > >*)arg[0],
    *(::std::size_t*)arg[1],
    *(const ::edm::FwdPtr<reco::PFClusterJet>*)arg[2]);
}

static  void method_13694( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::PFClusterJet>*,std::vector<edm::FwdPtr<reco::PFClusterJet> > >)((((::std::vector<edm::FwdPtr<reco::PFClusterJet> >*)o)->erase)(*(::__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::PFClusterJet>*,std::vector<edm::FwdPtr<reco::PFClusterJet> > >*)arg[0]));
  else   (((::std::vector<edm::FwdPtr<reco::PFClusterJet> >*)o)->erase)(*(::__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::PFClusterJet>*,std::vector<edm::FwdPtr<reco::PFClusterJet> > >*)arg[0]);
}

static  void method_13695( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::PFClusterJet>*,std::vector<edm::FwdPtr<reco::PFClusterJet> > >)((((::std::vector<edm::FwdPtr<reco::PFClusterJet> >*)o)->erase)(*(::__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::PFClusterJet>*,std::vector<edm::FwdPtr<reco::PFClusterJet> > >*)arg[0],
    *(::__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::PFClusterJet>*,std::vector<edm::FwdPtr<reco::PFClusterJet> > >*)arg[1]));
  else   (((::std::vector<edm::FwdPtr<reco::PFClusterJet> >*)o)->erase)(*(::__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::PFClusterJet>*,std::vector<edm::FwdPtr<reco::PFClusterJet> > >*)arg[0],
    *(::__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::PFClusterJet>*,std::vector<edm::FwdPtr<reco::PFClusterJet> > >*)arg[1]);
}

static  void method_13696( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<edm::FwdPtr<reco::PFClusterJet> >*)o)->swap)(*(::std::vector<edm::FwdPtr<reco::PFClusterJet> >*)arg[0]);
}

static  void method_13697( void*, void* o, const std::vector<void*>&, void*)
{
  (((::std::vector<edm::FwdPtr<reco::PFClusterJet> >*)o)->clear)();
}

static void method_newdel_2960( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::std::vector<edm::FwdPtr<reco::PFClusterJet> > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::std::vector<edm::FwdPtr<reco::PFClusterJet> > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::std::vector<edm::FwdPtr<reco::PFClusterJet> > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::std::vector<edm::FwdPtr<reco::PFClusterJet> > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::std::vector<edm::FwdPtr<reco::PFClusterJet> > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

static void method_x49( void* retaddr, void*, const std::vector<void*>&, void*)
{
  typedef std::vector<std::pair< ::Reflex::Base, int> > Bases_t;
  static Bases_t s_bases;
  if ( !s_bases.size() ) {
    s_bases.push_back(std::make_pair(::Reflex::Base( ::Reflex::TypeBuilder(Reflex::Literal("std::_Vector_base<edm::FwdPtr<reco::PFClusterJet>,std::allocator<edm::FwdPtr<reco::PFClusterJet> > >")), ::Reflex::BaseOffset< ::std::vector<edm::FwdPtr<reco::PFClusterJet> >,::std::_Vector_base<edm::FwdPtr<reco::PFClusterJet>,std::allocator<edm::FwdPtr<reco::PFClusterJet> > > >::Get(),::Reflex::PROTECTED), 0));
  }
  if (retaddr) *(Bases_t**)retaddr = &s_bases;
}

static void method_x50( void* retaddr, void*, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**) retaddr = ::Reflex::Proxy< ::std::vector<edm::FwdPtr<reco::PFClusterJet> > >::Generate();
  else ::Reflex::Proxy< ::std::vector<edm::FwdPtr<reco::PFClusterJet> > >::Generate();
}

//------Dictionary for class vector<edm::FwdPtr<reco::PFClusterJet>,std::allocator<edm::FwdPtr<reco::PFClusterJet> > > -------------------------------
void __std__vector_edm__FwdPtr_reco__PFClusterJet_s__db_datamem(Reflex::Class*);
void __std__vector_edm__FwdPtr_reco__PFClusterJet_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __std__vector_edm__FwdPtr_reco__PFClusterJet_s__datamem_bld(&__std__vector_edm__FwdPtr_reco__PFClusterJet_s__db_datamem);
Reflex::GenreflexMemberBuilder __std__vector_edm__FwdPtr_reco__PFClusterJet_s__funcmem_bld(&__std__vector_edm__FwdPtr_reco__PFClusterJet_s__db_funcmem);
void __std__vector_edm__FwdPtr_reco__PFClusterJet_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("std::vector<edm::FwdPtr<reco::PFClusterJet> >"), typeid(::std::vector<edm::FwdPtr<reco::PFClusterJet> >), sizeof(::std::vector<edm::FwdPtr<reco::PFClusterJet> >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddBase(type_2481, ::Reflex::BaseOffset< ::std::vector<edm::FwdPtr<reco::PFClusterJet> >, ::std::_Vector_base<edm::FwdPtr<reco::PFClusterJet>,std::allocator<edm::FwdPtr<reco::PFClusterJet> > > >::Get(), ::Reflex::PROTECTED)
  .AddTypedef(type_4584, Reflex::Literal("std::vector<edm::FwdPtr<reco::PFClusterJet> >::_Alloc_value_type"))
  .AddTypedef(type_2481, Reflex::Literal("std::vector<edm::FwdPtr<reco::PFClusterJet> >::_Base"))
  .AddTypedef(type_3264, Reflex::Literal("std::vector<edm::FwdPtr<reco::PFClusterJet> >::_Tp_alloc_type"))
  .AddTypedef(type_8364, Reflex::Literal("std::vector<edm::FwdPtr<reco::PFClusterJet> >::_Alloc_traits"))
  .AddTypedef(type_4584, Reflex::Literal("std::vector<edm::FwdPtr<reco::PFClusterJet> >::value_type"))
  .AddTypedef(type_9561, Reflex::Literal("std::vector<edm::FwdPtr<reco::PFClusterJet> >::pointer"))
  .AddTypedef(type_13645, Reflex::Literal("std::vector<edm::FwdPtr<reco::PFClusterJet> >::const_pointer"))
  .AddTypedef(type_13647, Reflex::Literal("std::vector<edm::FwdPtr<reco::PFClusterJet> >::reference"))
  .AddTypedef(type_13649, Reflex::Literal("std::vector<edm::FwdPtr<reco::PFClusterJet> >::const_reference"))
  .AddTypedef(type_8213, Reflex::Literal("std::vector<edm::FwdPtr<reco::PFClusterJet> >::iterator"))
  .AddTypedef(type_8214, Reflex::Literal("std::vector<edm::FwdPtr<reco::PFClusterJet> >::const_iterator"))
  .AddTypedef(type_3479, Reflex::Literal("std::vector<edm::FwdPtr<reco::PFClusterJet> >::const_reverse_iterator"))
  .AddTypedef(type_3480, Reflex::Literal("std::vector<edm::FwdPtr<reco::PFClusterJet> >::reverse_iterator"))
  .AddTypedef(type_3234, Reflex::Literal("std::vector<edm::FwdPtr<reco::PFClusterJet> >::size_type"))
  .AddTypedef(type_3113, Reflex::Literal("std::vector<edm::FwdPtr<reco::PFClusterJet> >::difference_type"))
  .AddTypedef(type_3264, Reflex::Literal("std::vector<edm::FwdPtr<reco::PFClusterJet> >::allocator_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("vector"), constructor_13658, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_32479), Reflex::Literal("vector"), constructor_13659, 0, "__a", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_3234, type_13649, type_32479), Reflex::Literal("vector"), constructor_13660, 0, "__n;__value=_Tp();__a=_Alloc()", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_33766), Reflex::Literal("vector"), constructor_13661, 0, "__x", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~vector"), destructor_13662, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_2960, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getBasesTable"), method_x49, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddFunctionMember<void*(void)>(Reflex::Literal("createCollFuncTable"), method_x50, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandFunctionMemberBuilder(&__std__vector_edm__FwdPtr_reco__PFClusterJet_s__funcmem_bld);
}

//------Delayed data member builder for class vector<edm::FwdPtr<reco::PFClusterJet>,std::allocator<edm::FwdPtr<reco::PFClusterJet> > > -------------------
void __std__vector_edm__FwdPtr_reco__PFClusterJet_s__db_datamem(Reflex::Class*) {

}
//------Delayed function member builder for class vector<edm::FwdPtr<reco::PFClusterJet>,std::allocator<edm::FwdPtr<reco::PFClusterJet> > > -------------------
void __std__vector_edm__FwdPtr_reco__PFClusterJet_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_33767, type_33766), Reflex::Literal("operator="), operator_13663, 0, "__x", ::Reflex::PUBLIC | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_3234, type_13649), Reflex::Literal("assign"), method_13664, 0, "__n;__val", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_8213), Reflex::Literal("begin"), method_13665, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_8214), Reflex::Literal("begin"), method_13666, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_8213), Reflex::Literal("end"), method_13667, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_8214), Reflex::Literal("end"), method_13668, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3234), Reflex::Literal("size"), method_13673, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3234), Reflex::Literal("max_size"), method_13674, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_3234, type_4584), Reflex::Literal("resize"), method_13675, 0, "__new_size;__x=_Tp()", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3234), Reflex::Literal("capacity"), method_13676, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("empty"), method_13677, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_3234), Reflex::Literal("reserve"), method_13678, 0, "__n", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13647, type_3234), Reflex::Literal("operator[]"), operator_13679, 0, "__n", ::Reflex::PUBLIC | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13649, type_3234), Reflex::Literal("operator[]"), operator_13680, 0, "__n", ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13647, type_3234), Reflex::Literal("at"), method_13682, 0, "__n", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13649, type_3234), Reflex::Literal("at"), method_13683, 0, "__n", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13647), Reflex::Literal("front"), method_13684, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13649), Reflex::Literal("front"), method_13685, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13647), Reflex::Literal("back"), method_13686, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13649), Reflex::Literal("back"), method_13687, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_9561), Reflex::Literal("data"), method_13688, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13645), Reflex::Literal("data"), method_13689, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_13649), Reflex::Literal("push_back"), method_13690, 0, "__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698), Reflex::Literal("pop_back"), method_13691, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_8213, type_8213, type_13649), Reflex::Literal("insert"), method_13692, 0, "__position;__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_8213, type_3234, type_13649), Reflex::Literal("insert"), method_13693, 0, "__position;__n;__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_8213, type_8213), Reflex::Literal("erase"), method_13694, 0, "__position", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_8213, type_8213, type_8213), Reflex::Literal("erase"), method_13695, 0, "__first;__last", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_33767), Reflex::Literal("swap"), method_13696, 0, "__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698), Reflex::Literal("clear"), method_13697, 0, 0, ::Reflex::PUBLIC);
}
//------Stub functions for class vector<edm::FwdPtr<reco::TrackJet>,std::allocator<edm::FwdPtr<reco::TrackJet> > > -------------------------------
static void constructor_13918( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<edm::FwdPtr<reco::TrackJet> >();
  else ::new(mem) ::std::vector<edm::FwdPtr<reco::TrackJet> >();
}

static void constructor_13919( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<edm::FwdPtr<reco::TrackJet> >(*(const ::std::allocator<edm::FwdPtr<reco::TrackJet> >*)arg[0]);
  else ::new(mem) ::std::vector<edm::FwdPtr<reco::TrackJet> >(*(const ::std::allocator<edm::FwdPtr<reco::TrackJet> >*)arg[0]);
}

static void constructor_13920( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if ( arg.size() == 1 ) {
    if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<edm::FwdPtr<reco::TrackJet> >(*(::std::size_t*)arg[0]);
  else ::new(mem) ::std::vector<edm::FwdPtr<reco::TrackJet> >(*(::std::size_t*)arg[0]);
  }
  else if ( arg.size() == 2 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<edm::FwdPtr<reco::TrackJet> >(*(::std::size_t*)arg[0],
      *(const ::edm::FwdPtr<reco::TrackJet>*)arg[1]);
  else ::new(mem) ::std::vector<edm::FwdPtr<reco::TrackJet> >(*(::std::size_t*)arg[0],
      *(const ::edm::FwdPtr<reco::TrackJet>*)arg[1]);
  }
  else if ( arg.size() == 3 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<edm::FwdPtr<reco::TrackJet> >(*(::std::size_t*)arg[0],
      *(const ::edm::FwdPtr<reco::TrackJet>*)arg[1],
      *(const ::std::allocator<edm::FwdPtr<reco::TrackJet> >*)arg[2]);
  else ::new(mem) ::std::vector<edm::FwdPtr<reco::TrackJet> >(*(::std::size_t*)arg[0],
      *(const ::edm::FwdPtr<reco::TrackJet>*)arg[1],
      *(const ::std::allocator<edm::FwdPtr<reco::TrackJet> >*)arg[2]);
  }
}

static void constructor_13921( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<edm::FwdPtr<reco::TrackJet> >(*(const ::std::vector<edm::FwdPtr<reco::TrackJet> >*)arg[0]);
  else ::new(mem) ::std::vector<edm::FwdPtr<reco::TrackJet> >(*(const ::std::vector<edm::FwdPtr<reco::TrackJet> >*)arg[0]);
}

static void destructor_13922(void*, void * o, const std::vector<void*>&, void *) {
(((::std::vector<edm::FwdPtr<reco::TrackJet> >*)o)->::std::vector<edm::FwdPtr<reco::TrackJet> >::~vector)();
}
static  void operator_13923( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<edm::FwdPtr<reco::TrackJet> >*)o)->operator=)(*(const ::std::vector<edm::FwdPtr<reco::TrackJet> >*)arg[0]);
  else   (((::std::vector<edm::FwdPtr<reco::TrackJet> >*)o)->operator=)(*(const ::std::vector<edm::FwdPtr<reco::TrackJet> >*)arg[0]);
}

static  void method_13924( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<edm::FwdPtr<reco::TrackJet> >*)o)->assign)(*(::std::size_t*)arg[0],
    *(const ::edm::FwdPtr<reco::TrackJet>*)arg[1]);
}

static  void method_13925( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::TrackJet>*,std::vector<edm::FwdPtr<reco::TrackJet> > >)((((::std::vector<edm::FwdPtr<reco::TrackJet> >*)o)->begin)());
  else   (((::std::vector<edm::FwdPtr<reco::TrackJet> >*)o)->begin)();
}

static  void method_13926( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<const edm::FwdPtr<reco::TrackJet>*,std::vector<edm::FwdPtr<reco::TrackJet> > >)((((const ::std::vector<edm::FwdPtr<reco::TrackJet> >*)o)->begin)());
  else   (((const ::std::vector<edm::FwdPtr<reco::TrackJet> >*)o)->begin)();
}

static  void method_13927( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::TrackJet>*,std::vector<edm::FwdPtr<reco::TrackJet> > >)((((::std::vector<edm::FwdPtr<reco::TrackJet> >*)o)->end)());
  else   (((::std::vector<edm::FwdPtr<reco::TrackJet> >*)o)->end)();
}

static  void method_13928( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<const edm::FwdPtr<reco::TrackJet>*,std::vector<edm::FwdPtr<reco::TrackJet> > >)((((const ::std::vector<edm::FwdPtr<reco::TrackJet> >*)o)->end)());
  else   (((const ::std::vector<edm::FwdPtr<reco::TrackJet> >*)o)->end)();
}

static  void method_13933( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::std::vector<edm::FwdPtr<reco::TrackJet> >*)o)->size)());
  else   (((const ::std::vector<edm::FwdPtr<reco::TrackJet> >*)o)->size)();
}

static  void method_13934( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::std::vector<edm::FwdPtr<reco::TrackJet> >*)o)->max_size)());
  else   (((const ::std::vector<edm::FwdPtr<reco::TrackJet> >*)o)->max_size)();
}

static  void method_13935( void*, void* o, const std::vector<void*>& arg, void*)
{
  if ( arg.size() == 1 ) {
    (((::std::vector<edm::FwdPtr<reco::TrackJet> >*)o)->resize)(*(::std::size_t*)arg[0]);
  }
  else if ( arg.size() == 2 ) { 
    (((::std::vector<edm::FwdPtr<reco::TrackJet> >*)o)->resize)(*(::std::size_t*)arg[0],
      *(::edm::FwdPtr<reco::TrackJet>*)arg[1]);
  }
}

static  void method_13936( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::std::vector<edm::FwdPtr<reco::TrackJet> >*)o)->capacity)());
  else   (((const ::std::vector<edm::FwdPtr<reco::TrackJet> >*)o)->capacity)();
}

static  void method_13937( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::std::vector<edm::FwdPtr<reco::TrackJet> >*)o)->empty)());
  else   (((const ::std::vector<edm::FwdPtr<reco::TrackJet> >*)o)->empty)();
}

static  void method_13938( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<edm::FwdPtr<reco::TrackJet> >*)o)->reserve)(*(::std::size_t*)arg[0]);
}

static  void operator_13939( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<edm::FwdPtr<reco::TrackJet> >*)o)->operator[])(*(::std::size_t*)arg[0]);
  else   (((::std::vector<edm::FwdPtr<reco::TrackJet> >*)o)->operator[])(*(::std::size_t*)arg[0]);
}

static  void operator_13940( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<edm::FwdPtr<reco::TrackJet> >*)o)->operator[])(*(::std::size_t*)arg[0]);
  else   (((const ::std::vector<edm::FwdPtr<reco::TrackJet> >*)o)->operator[])(*(::std::size_t*)arg[0]);
}

static  void method_13942( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<edm::FwdPtr<reco::TrackJet> >*)o)->at)(*(::std::size_t*)arg[0]);
  else   (((::std::vector<edm::FwdPtr<reco::TrackJet> >*)o)->at)(*(::std::size_t*)arg[0]);
}

static  void method_13943( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<edm::FwdPtr<reco::TrackJet> >*)o)->at)(*(::std::size_t*)arg[0]);
  else   (((const ::std::vector<edm::FwdPtr<reco::TrackJet> >*)o)->at)(*(::std::size_t*)arg[0]);
}

static  void method_13944( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<edm::FwdPtr<reco::TrackJet> >*)o)->front)();
  else   (((::std::vector<edm::FwdPtr<reco::TrackJet> >*)o)->front)();
}

static  void method_13945( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<edm::FwdPtr<reco::TrackJet> >*)o)->front)();
  else   (((const ::std::vector<edm::FwdPtr<reco::TrackJet> >*)o)->front)();
}

static  void method_13946( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<edm::FwdPtr<reco::TrackJet> >*)o)->back)();
  else   (((::std::vector<edm::FwdPtr<reco::TrackJet> >*)o)->back)();
}

static  void method_13947( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<edm::FwdPtr<reco::TrackJet> >*)o)->back)();
  else   (((const ::std::vector<edm::FwdPtr<reco::TrackJet> >*)o)->back)();
}

static  void method_13948( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((::std::vector<edm::FwdPtr<reco::TrackJet> >*)o)->data)());
  else   (((::std::vector<edm::FwdPtr<reco::TrackJet> >*)o)->data)();
}

static  void method_13949( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::std::vector<edm::FwdPtr<reco::TrackJet> >*)o)->data)());
  else   (((const ::std::vector<edm::FwdPtr<reco::TrackJet> >*)o)->data)();
}

static  void method_13950( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<edm::FwdPtr<reco::TrackJet> >*)o)->push_back)(*(const ::edm::FwdPtr<reco::TrackJet>*)arg[0]);
}

static  void method_13951( void*, void* o, const std::vector<void*>&, void*)
{
  (((::std::vector<edm::FwdPtr<reco::TrackJet> >*)o)->pop_back)();
}

static  void method_13952( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::TrackJet>*,std::vector<edm::FwdPtr<reco::TrackJet> > >)((((::std::vector<edm::FwdPtr<reco::TrackJet> >*)o)->insert)(*(::__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::TrackJet>*,std::vector<edm::FwdPtr<reco::TrackJet> > >*)arg[0],
    *(const ::edm::FwdPtr<reco::TrackJet>*)arg[1]));
  else   (((::std::vector<edm::FwdPtr<reco::TrackJet> >*)o)->insert)(*(::__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::TrackJet>*,std::vector<edm::FwdPtr<reco::TrackJet> > >*)arg[0],
    *(const ::edm::FwdPtr<reco::TrackJet>*)arg[1]);
}

static  void method_13953( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<edm::FwdPtr<reco::TrackJet> >*)o)->insert)(*(::__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::TrackJet>*,std::vector<edm::FwdPtr<reco::TrackJet> > >*)arg[0],
    *(::std::size_t*)arg[1],
    *(const ::edm::FwdPtr<reco::TrackJet>*)arg[2]);
}

static  void method_13954( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::TrackJet>*,std::vector<edm::FwdPtr<reco::TrackJet> > >)((((::std::vector<edm::FwdPtr<reco::TrackJet> >*)o)->erase)(*(::__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::TrackJet>*,std::vector<edm::FwdPtr<reco::TrackJet> > >*)arg[0]));
  else   (((::std::vector<edm::FwdPtr<reco::TrackJet> >*)o)->erase)(*(::__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::TrackJet>*,std::vector<edm::FwdPtr<reco::TrackJet> > >*)arg[0]);
}

static  void method_13955( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::TrackJet>*,std::vector<edm::FwdPtr<reco::TrackJet> > >)((((::std::vector<edm::FwdPtr<reco::TrackJet> >*)o)->erase)(*(::__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::TrackJet>*,std::vector<edm::FwdPtr<reco::TrackJet> > >*)arg[0],
    *(::__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::TrackJet>*,std::vector<edm::FwdPtr<reco::TrackJet> > >*)arg[1]));
  else   (((::std::vector<edm::FwdPtr<reco::TrackJet> >*)o)->erase)(*(::__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::TrackJet>*,std::vector<edm::FwdPtr<reco::TrackJet> > >*)arg[0],
    *(::__gnu_cxx::__normal_iterator<edm::FwdPtr<reco::TrackJet>*,std::vector<edm::FwdPtr<reco::TrackJet> > >*)arg[1]);
}

static  void method_13956( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<edm::FwdPtr<reco::TrackJet> >*)o)->swap)(*(::std::vector<edm::FwdPtr<reco::TrackJet> >*)arg[0]);
}

static  void method_13957( void*, void* o, const std::vector<void*>&, void*)
{
  (((::std::vector<edm::FwdPtr<reco::TrackJet> >*)o)->clear)();
}

static void method_newdel_2968( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::std::vector<edm::FwdPtr<reco::TrackJet> > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::std::vector<edm::FwdPtr<reco::TrackJet> > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::std::vector<edm::FwdPtr<reco::TrackJet> > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::std::vector<edm::FwdPtr<reco::TrackJet> > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::std::vector<edm::FwdPtr<reco::TrackJet> > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

static void method_x52( void* retaddr, void*, const std::vector<void*>&, void*)
{
  typedef std::vector<std::pair< ::Reflex::Base, int> > Bases_t;
  static Bases_t s_bases;
  if ( !s_bases.size() ) {
    s_bases.push_back(std::make_pair(::Reflex::Base( ::Reflex::TypeBuilder(Reflex::Literal("std::_Vector_base<edm::FwdPtr<reco::TrackJet>,std::allocator<edm::FwdPtr<reco::TrackJet> > >")), ::Reflex::BaseOffset< ::std::vector<edm::FwdPtr<reco::TrackJet> >,::std::_Vector_base<edm::FwdPtr<reco::TrackJet>,std::allocator<edm::FwdPtr<reco::TrackJet> > > >::Get(),::Reflex::PROTECTED), 0));
  }
  if (retaddr) *(Bases_t**)retaddr = &s_bases;
}

static void method_x53( void* retaddr, void*, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**) retaddr = ::Reflex::Proxy< ::std::vector<edm::FwdPtr<reco::TrackJet> > >::Generate();
  else ::Reflex::Proxy< ::std::vector<edm::FwdPtr<reco::TrackJet> > >::Generate();
}

//------Dictionary for class vector<edm::FwdPtr<reco::TrackJet>,std::allocator<edm::FwdPtr<reco::TrackJet> > > -------------------------------
void __std__vector_edm__FwdPtr_reco__TrackJet_s__db_datamem(Reflex::Class*);
void __std__vector_edm__FwdPtr_reco__TrackJet_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __std__vector_edm__FwdPtr_reco__TrackJet_s__datamem_bld(&__std__vector_edm__FwdPtr_reco__TrackJet_s__db_datamem);
Reflex::GenreflexMemberBuilder __std__vector_edm__FwdPtr_reco__TrackJet_s__funcmem_bld(&__std__vector_edm__FwdPtr_reco__TrackJet_s__db_funcmem);
void __std__vector_edm__FwdPtr_reco__TrackJet_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("std::vector<edm::FwdPtr<reco::TrackJet> >"), typeid(::std::vector<edm::FwdPtr<reco::TrackJet> >), sizeof(::std::vector<edm::FwdPtr<reco::TrackJet> >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddBase(type_2483, ::Reflex::BaseOffset< ::std::vector<edm::FwdPtr<reco::TrackJet> >, ::std::_Vector_base<edm::FwdPtr<reco::TrackJet>,std::allocator<edm::FwdPtr<reco::TrackJet> > > >::Get(), ::Reflex::PROTECTED)
  .AddTypedef(type_4585, Reflex::Literal("std::vector<edm::FwdPtr<reco::TrackJet> >::_Alloc_value_type"))
  .AddTypedef(type_2483, Reflex::Literal("std::vector<edm::FwdPtr<reco::TrackJet> >::_Base"))
  .AddTypedef(type_3279, Reflex::Literal("std::vector<edm::FwdPtr<reco::TrackJet> >::_Tp_alloc_type"))
  .AddTypedef(type_8366, Reflex::Literal("std::vector<edm::FwdPtr<reco::TrackJet> >::_Alloc_traits"))
  .AddTypedef(type_4585, Reflex::Literal("std::vector<edm::FwdPtr<reco::TrackJet> >::value_type"))
  .AddTypedef(type_9599, Reflex::Literal("std::vector<edm::FwdPtr<reco::TrackJet> >::pointer"))
  .AddTypedef(type_13905, Reflex::Literal("std::vector<edm::FwdPtr<reco::TrackJet> >::const_pointer"))
  .AddTypedef(type_13907, Reflex::Literal("std::vector<edm::FwdPtr<reco::TrackJet> >::reference"))
  .AddTypedef(type_13909, Reflex::Literal("std::vector<edm::FwdPtr<reco::TrackJet> >::const_reference"))
  .AddTypedef(type_8217, Reflex::Literal("std::vector<edm::FwdPtr<reco::TrackJet> >::iterator"))
  .AddTypedef(type_8218, Reflex::Literal("std::vector<edm::FwdPtr<reco::TrackJet> >::const_iterator"))
  .AddTypedef(type_3489, Reflex::Literal("std::vector<edm::FwdPtr<reco::TrackJet> >::const_reverse_iterator"))
  .AddTypedef(type_3490, Reflex::Literal("std::vector<edm::FwdPtr<reco::TrackJet> >::reverse_iterator"))
  .AddTypedef(type_3234, Reflex::Literal("std::vector<edm::FwdPtr<reco::TrackJet> >::size_type"))
  .AddTypedef(type_3113, Reflex::Literal("std::vector<edm::FwdPtr<reco::TrackJet> >::difference_type"))
  .AddTypedef(type_3279, Reflex::Literal("std::vector<edm::FwdPtr<reco::TrackJet> >::allocator_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("vector"), constructor_13918, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_32505), Reflex::Literal("vector"), constructor_13919, 0, "__a", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_3234, type_13909, type_32505), Reflex::Literal("vector"), constructor_13920, 0, "__n;__value=_Tp();__a=_Alloc()", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_33776), Reflex::Literal("vector"), constructor_13921, 0, "__x", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~vector"), destructor_13922, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_2968, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getBasesTable"), method_x52, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddFunctionMember<void*(void)>(Reflex::Literal("createCollFuncTable"), method_x53, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandFunctionMemberBuilder(&__std__vector_edm__FwdPtr_reco__TrackJet_s__funcmem_bld);
}

//------Delayed data member builder for class vector<edm::FwdPtr<reco::TrackJet>,std::allocator<edm::FwdPtr<reco::TrackJet> > > -------------------
void __std__vector_edm__FwdPtr_reco__TrackJet_s__db_datamem(Reflex::Class*) {

}
//------Delayed function member builder for class vector<edm::FwdPtr<reco::TrackJet>,std::allocator<edm::FwdPtr<reco::TrackJet> > > -------------------
void __std__vector_edm__FwdPtr_reco__TrackJet_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_33777, type_33776), Reflex::Literal("operator="), operator_13923, 0, "__x", ::Reflex::PUBLIC | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_3234, type_13909), Reflex::Literal("assign"), method_13924, 0, "__n;__val", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_8217), Reflex::Literal("begin"), method_13925, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_8218), Reflex::Literal("begin"), method_13926, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_8217), Reflex::Literal("end"), method_13927, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_8218), Reflex::Literal("end"), method_13928, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3234), Reflex::Literal("size"), method_13933, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3234), Reflex::Literal("max_size"), method_13934, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_3234, type_4585), Reflex::Literal("resize"), method_13935, 0, "__new_size;__x=_Tp()", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3234), Reflex::Literal("capacity"), method_13936, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("empty"), method_13937, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_3234), Reflex::Literal("reserve"), method_13938, 0, "__n", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13907, type_3234), Reflex::Literal("operator[]"), operator_13939, 0, "__n", ::Reflex::PUBLIC | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13909, type_3234), Reflex::Literal("operator[]"), operator_13940, 0, "__n", ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13907, type_3234), Reflex::Literal("at"), method_13942, 0, "__n", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13909, type_3234), Reflex::Literal("at"), method_13943, 0, "__n", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13907), Reflex::Literal("front"), method_13944, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13909), Reflex::Literal("front"), method_13945, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13907), Reflex::Literal("back"), method_13946, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13909), Reflex::Literal("back"), method_13947, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_9599), Reflex::Literal("data"), method_13948, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13905), Reflex::Literal("data"), method_13949, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_13909), Reflex::Literal("push_back"), method_13950, 0, "__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698), Reflex::Literal("pop_back"), method_13951, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_8217, type_8217, type_13909), Reflex::Literal("insert"), method_13952, 0, "__position;__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_8217, type_3234, type_13909), Reflex::Literal("insert"), method_13953, 0, "__position;__n;__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_8217, type_8217), Reflex::Literal("erase"), method_13954, 0, "__position", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_8217, type_8217, type_8217), Reflex::Literal("erase"), method_13955, 0, "__first;__last", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_33777), Reflex::Literal("swap"), method_13956, 0, "__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698), Reflex::Literal("clear"), method_13957, 0, 0, ::Reflex::PUBLIC);
}
//------Stub functions for class vector<edm::FwdRef<std::vector<reco::PFClusterJet, std::allocator<reco::PFClusterJet> >, reco::PFClusterJet, edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet, std::allocator<reco::PFClusterJet> >, reco::PFClusterJet> >,std::allocator<edm::FwdRef<std::vector<reco::PFClusterJet, std::allocator<reco::PFClusterJet> >, reco::PFClusterJet, edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet, std::allocator<reco::PFClusterJet> >, reco::PFClusterJet> > > > -------------------------------
static void constructor_13723( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >();
  else ::new(mem) ::std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >();
}

static void constructor_13724( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >(*(const ::std::allocator<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)arg[0]);
  else ::new(mem) ::std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >(*(const ::std::allocator<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)arg[0]);
}

static void constructor_13725( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if ( arg.size() == 1 ) {
    if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >(*(::std::size_t*)arg[0]);
  else ::new(mem) ::std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >(*(::std::size_t*)arg[0]);
  }
  else if ( arg.size() == 2 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >(*(::std::size_t*)arg[0],
      *(const ::edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)arg[1]);
  else ::new(mem) ::std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >(*(::std::size_t*)arg[0],
      *(const ::edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)arg[1]);
  }
  else if ( arg.size() == 3 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >(*(::std::size_t*)arg[0],
      *(const ::edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)arg[1],
      *(const ::std::allocator<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)arg[2]);
  else ::new(mem) ::std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >(*(::std::size_t*)arg[0],
      *(const ::edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)arg[1],
      *(const ::std::allocator<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)arg[2]);
  }
}

static void constructor_13726( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >(*(const ::std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)arg[0]);
  else ::new(mem) ::std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >(*(const ::std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)arg[0]);
}

static void destructor_13727(void*, void * o, const std::vector<void*>&, void *) {
(((::std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->::std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >::~vector)();
}
static  void operator_13728( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->operator=)(*(const ::std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)arg[0]);
  else   (((::std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->operator=)(*(const ::std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)arg[0]);
}

static  void method_13729( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->assign)(*(::std::size_t*)arg[0],
    *(const ::edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)arg[1]);
}

static  void method_13730( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*,std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > > >)((((::std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->begin)());
  else   (((::std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->begin)();
}

static  void method_13731( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<const edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*,std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > > >)((((const ::std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->begin)());
  else   (((const ::std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->begin)();
}

static  void method_13732( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*,std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > > >)((((::std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->end)());
  else   (((::std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->end)();
}

static  void method_13733( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<const edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*,std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > > >)((((const ::std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->end)());
  else   (((const ::std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->end)();
}

static  void method_13738( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->size)());
  else   (((const ::std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->size)();
}

static  void method_13739( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->max_size)());
  else   (((const ::std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->max_size)();
}

static  void method_13740( void*, void* o, const std::vector<void*>& arg, void*)
{
  if ( arg.size() == 1 ) {
    (((::std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->resize)(*(::std::size_t*)arg[0]);
  }
  else if ( arg.size() == 2 ) { 
    (((::std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->resize)(*(::std::size_t*)arg[0],
      *(::edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)arg[1]);
  }
}

static  void method_13741( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->capacity)());
  else   (((const ::std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->capacity)();
}

static  void method_13742( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->empty)());
  else   (((const ::std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->empty)();
}

static  void method_13743( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->reserve)(*(::std::size_t*)arg[0]);
}

static  void operator_13744( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->operator[])(*(::std::size_t*)arg[0]);
  else   (((::std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->operator[])(*(::std::size_t*)arg[0]);
}

static  void operator_13745( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->operator[])(*(::std::size_t*)arg[0]);
  else   (((const ::std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->operator[])(*(::std::size_t*)arg[0]);
}

static  void method_13747( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->at)(*(::std::size_t*)arg[0]);
  else   (((::std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->at)(*(::std::size_t*)arg[0]);
}

static  void method_13748( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->at)(*(::std::size_t*)arg[0]);
  else   (((const ::std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->at)(*(::std::size_t*)arg[0]);
}

static  void method_13749( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->front)();
  else   (((::std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->front)();
}

static  void method_13750( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->front)();
  else   (((const ::std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->front)();
}

static  void method_13751( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->back)();
  else   (((::std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->back)();
}

static  void method_13752( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->back)();
  else   (((const ::std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->back)();
}

static  void method_13753( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((::std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->data)());
  else   (((::std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->data)();
}

static  void method_13754( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->data)());
  else   (((const ::std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->data)();
}

static  void method_13755( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->push_back)(*(const ::edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)arg[0]);
}

static  void method_13756( void*, void* o, const std::vector<void*>&, void*)
{
  (((::std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->pop_back)();
}

static  void method_13757( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*,std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > > >)((((::std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->insert)(*(::__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*,std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > > >*)arg[0],
    *(const ::edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)arg[1]));
  else   (((::std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->insert)(*(::__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*,std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > > >*)arg[0],
    *(const ::edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)arg[1]);
}

static  void method_13758( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->insert)(*(::__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*,std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > > >*)arg[0],
    *(::std::size_t*)arg[1],
    *(const ::edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)arg[2]);
}

static  void method_13759( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*,std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > > >)((((::std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->erase)(*(::__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*,std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > > >*)arg[0]));
  else   (((::std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->erase)(*(::__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*,std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > > >*)arg[0]);
}

static  void method_13760( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*,std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > > >)((((::std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->erase)(*(::__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*,std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > > >*)arg[0],
    *(::__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*,std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > > >*)arg[1]));
  else   (((::std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->erase)(*(::__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*,std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > > >*)arg[0],
    *(::__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*,std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > > >*)arg[1]);
}

static  void method_13761( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->swap)(*(::std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)arg[0]);
}

static  void method_13762( void*, void* o, const std::vector<void*>&, void*)
{
  (((::std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->clear)();
}

static void method_newdel_2961( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

static void method_x55( void* retaddr, void*, const std::vector<void*>&, void*)
{
  typedef std::vector<std::pair< ::Reflex::Base, int> > Bases_t;
  static Bases_t s_bases;
  if ( !s_bases.size() ) {
    s_bases.push_back(std::make_pair(::Reflex::Base( ::Reflex::TypeBuilder(Reflex::Literal("std::_Vector_base<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >,std::allocator<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > > >")), ::Reflex::BaseOffset< ::std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >,::std::_Vector_base<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >,std::allocator<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > > > >::Get(),::Reflex::PROTECTED), 0));
  }
  if (retaddr) *(Bases_t**)retaddr = &s_bases;
}

static void method_x56( void* retaddr, void*, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**) retaddr = ::Reflex::Proxy< ::std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > > >::Generate();
  else ::Reflex::Proxy< ::std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > > >::Generate();
}

//------Dictionary for class vector<edm::FwdRef<std::vector<reco::PFClusterJet, std::allocator<reco::PFClusterJet> >, reco::PFClusterJet, edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet, std::allocator<reco::PFClusterJet> >, reco::PFClusterJet> >,std::allocator<edm::FwdRef<std::vector<reco::PFClusterJet, std::allocator<reco::PFClusterJet> >, reco::PFClusterJet, edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet, std::allocator<reco::PFClusterJet> >, reco::PFClusterJet> > > > -------------------------------
void __std__vector_edm__FwdRef_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s_s__db_datamem(Reflex::Class*);
void __std__vector_edm__FwdRef_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __std__vector_edm__FwdRef_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s_s__datamem_bld(&__std__vector_edm__FwdRef_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s_s__db_datamem);
Reflex::GenreflexMemberBuilder __std__vector_edm__FwdRef_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s_s__funcmem_bld(&__std__vector_edm__FwdRef_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s_s__db_funcmem);
void __std__vector_edm__FwdRef_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >"), typeid(::std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >), sizeof(::std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddBase(type_2482, ::Reflex::BaseOffset< ::std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >, ::std::_Vector_base<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >,std::allocator<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > > > >::Get(), ::Reflex::PROTECTED)
  .AddTypedef(type_4706, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >::_Alloc_value_type"))
  .AddTypedef(type_2482, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >::_Base"))
  .AddTypedef(type_3265, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >::_Tp_alloc_type"))
  .AddTypedef(type_8365, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >::_Alloc_traits"))
  .AddTypedef(type_4706, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >::value_type"))
  .AddTypedef(type_9580, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >::pointer"))
  .AddTypedef(type_13710, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >::const_pointer"))
  .AddTypedef(type_13712, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >::reference"))
  .AddTypedef(type_13714, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >::const_reference"))
  .AddTypedef(type_8215, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >::iterator"))
  .AddTypedef(type_8216, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >::const_iterator"))
  .AddTypedef(type_3481, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >::const_reverse_iterator"))
  .AddTypedef(type_3482, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >::reverse_iterator"))
  .AddTypedef(type_3234, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >::size_type"))
  .AddTypedef(type_3113, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >::difference_type"))
  .AddTypedef(type_3265, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >::allocator_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("vector"), constructor_13723, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_32492), Reflex::Literal("vector"), constructor_13724, 0, "__a", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_3234, type_13714, type_32492), Reflex::Literal("vector"), constructor_13725, 0, "__n;__value=_Tp();__a=_Alloc()", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_33769), Reflex::Literal("vector"), constructor_13726, 0, "__x", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~vector"), destructor_13727, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_2961, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getBasesTable"), method_x55, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddFunctionMember<void*(void)>(Reflex::Literal("createCollFuncTable"), method_x56, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandFunctionMemberBuilder(&__std__vector_edm__FwdRef_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s_s__funcmem_bld);
}

//------Delayed data member builder for class vector<edm::FwdRef<std::vector<reco::PFClusterJet, std::allocator<reco::PFClusterJet> >, reco::PFClusterJet, edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet, std::allocator<reco::PFClusterJet> >, reco::PFClusterJet> >,std::allocator<edm::FwdRef<std::vector<reco::PFClusterJet, std::allocator<reco::PFClusterJet> >, reco::PFClusterJet, edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet, std::allocator<reco::PFClusterJet> >, reco::PFClusterJet> > > > -------------------
void __std__vector_edm__FwdRef_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s_s__db_datamem(Reflex::Class*) {

}
//------Delayed function member builder for class vector<edm::FwdRef<std::vector<reco::PFClusterJet, std::allocator<reco::PFClusterJet> >, reco::PFClusterJet, edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet, std::allocator<reco::PFClusterJet> >, reco::PFClusterJet> >,std::allocator<edm::FwdRef<std::vector<reco::PFClusterJet, std::allocator<reco::PFClusterJet> >, reco::PFClusterJet, edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet, std::allocator<reco::PFClusterJet> >, reco::PFClusterJet> > > > -------------------
void __std__vector_edm__FwdRef_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_33770, type_33769), Reflex::Literal("operator="), operator_13728, 0, "__x", ::Reflex::PUBLIC | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_3234, type_13714), Reflex::Literal("assign"), method_13729, 0, "__n;__val", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_8215), Reflex::Literal("begin"), method_13730, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_8216), Reflex::Literal("begin"), method_13731, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_8215), Reflex::Literal("end"), method_13732, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_8216), Reflex::Literal("end"), method_13733, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3234), Reflex::Literal("size"), method_13738, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3234), Reflex::Literal("max_size"), method_13739, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_3234, type_4706), Reflex::Literal("resize"), method_13740, 0, "__new_size;__x=_Tp()", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3234), Reflex::Literal("capacity"), method_13741, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("empty"), method_13742, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_3234), Reflex::Literal("reserve"), method_13743, 0, "__n", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13712, type_3234), Reflex::Literal("operator[]"), operator_13744, 0, "__n", ::Reflex::PUBLIC | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13714, type_3234), Reflex::Literal("operator[]"), operator_13745, 0, "__n", ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13712, type_3234), Reflex::Literal("at"), method_13747, 0, "__n", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13714, type_3234), Reflex::Literal("at"), method_13748, 0, "__n", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13712), Reflex::Literal("front"), method_13749, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13714), Reflex::Literal("front"), method_13750, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13712), Reflex::Literal("back"), method_13751, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13714), Reflex::Literal("back"), method_13752, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_9580), Reflex::Literal("data"), method_13753, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13710), Reflex::Literal("data"), method_13754, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_13714), Reflex::Literal("push_back"), method_13755, 0, "__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698), Reflex::Literal("pop_back"), method_13756, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_8215, type_8215, type_13714), Reflex::Literal("insert"), method_13757, 0, "__position;__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_8215, type_3234, type_13714), Reflex::Literal("insert"), method_13758, 0, "__position;__n;__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_8215, type_8215), Reflex::Literal("erase"), method_13759, 0, "__position", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_8215, type_8215, type_8215), Reflex::Literal("erase"), method_13760, 0, "__first;__last", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_33770), Reflex::Literal("swap"), method_13761, 0, "__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698), Reflex::Literal("clear"), method_13762, 0, 0, ::Reflex::PUBLIC);
}
//------Stub functions for class vector<edm::FwdRef<std::vector<reco::TrackJet, std::allocator<reco::TrackJet> >, reco::TrackJet, edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet, std::allocator<reco::TrackJet> >, reco::TrackJet> >,std::allocator<edm::FwdRef<std::vector<reco::TrackJet, std::allocator<reco::TrackJet> >, reco::TrackJet, edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet, std::allocator<reco::TrackJet> >, reco::TrackJet> > > > -------------------------------
static void constructor_13983( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >();
  else ::new(mem) ::std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >();
}

static void constructor_13984( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >(*(const ::std::allocator<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)arg[0]);
  else ::new(mem) ::std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >(*(const ::std::allocator<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)arg[0]);
}

static void constructor_13985( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if ( arg.size() == 1 ) {
    if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >(*(::std::size_t*)arg[0]);
  else ::new(mem) ::std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >(*(::std::size_t*)arg[0]);
  }
  else if ( arg.size() == 2 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >(*(::std::size_t*)arg[0],
      *(const ::edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)arg[1]);
  else ::new(mem) ::std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >(*(::std::size_t*)arg[0],
      *(const ::edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)arg[1]);
  }
  else if ( arg.size() == 3 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >(*(::std::size_t*)arg[0],
      *(const ::edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)arg[1],
      *(const ::std::allocator<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)arg[2]);
  else ::new(mem) ::std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >(*(::std::size_t*)arg[0],
      *(const ::edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)arg[1],
      *(const ::std::allocator<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)arg[2]);
  }
}

static void constructor_13986( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >(*(const ::std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)arg[0]);
  else ::new(mem) ::std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >(*(const ::std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)arg[0]);
}

static void destructor_13987(void*, void * o, const std::vector<void*>&, void *) {
(((::std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->::std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >::~vector)();
}
static  void operator_13988( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->operator=)(*(const ::std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)arg[0]);
  else   (((::std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->operator=)(*(const ::std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)arg[0]);
}

static  void method_13989( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->assign)(*(::std::size_t*)arg[0],
    *(const ::edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)arg[1]);
}

static  void method_13990( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*,std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > > >)((((::std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->begin)());
  else   (((::std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->begin)();
}

static  void method_13991( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<const edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*,std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > > >)((((const ::std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->begin)());
  else   (((const ::std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->begin)();
}

static  void method_13992( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*,std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > > >)((((::std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->end)());
  else   (((::std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->end)();
}

static  void method_13993( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<const edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*,std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > > >)((((const ::std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->end)());
  else   (((const ::std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->end)();
}

static  void method_13998( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->size)());
  else   (((const ::std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->size)();
}

static  void method_13999( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->max_size)());
  else   (((const ::std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->max_size)();
}

static  void method_14000( void*, void* o, const std::vector<void*>& arg, void*)
{
  if ( arg.size() == 1 ) {
    (((::std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->resize)(*(::std::size_t*)arg[0]);
  }
  else if ( arg.size() == 2 ) { 
    (((::std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->resize)(*(::std::size_t*)arg[0],
      *(::edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)arg[1]);
  }
}

static  void method_14001( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->capacity)());
  else   (((const ::std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->capacity)();
}

static  void method_14002( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->empty)());
  else   (((const ::std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->empty)();
}

static  void method_14003( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->reserve)(*(::std::size_t*)arg[0]);
}

static  void operator_14004( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->operator[])(*(::std::size_t*)arg[0]);
  else   (((::std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->operator[])(*(::std::size_t*)arg[0]);
}

static  void operator_14005( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->operator[])(*(::std::size_t*)arg[0]);
  else   (((const ::std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->operator[])(*(::std::size_t*)arg[0]);
}

static  void method_14007( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->at)(*(::std::size_t*)arg[0]);
  else   (((::std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->at)(*(::std::size_t*)arg[0]);
}

static  void method_14008( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->at)(*(::std::size_t*)arg[0]);
  else   (((const ::std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->at)(*(::std::size_t*)arg[0]);
}

static  void method_14009( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->front)();
  else   (((::std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->front)();
}

static  void method_14010( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->front)();
  else   (((const ::std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->front)();
}

static  void method_14011( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->back)();
  else   (((::std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->back)();
}

static  void method_14012( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->back)();
  else   (((const ::std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->back)();
}

static  void method_14013( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((::std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->data)());
  else   (((::std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->data)();
}

static  void method_14014( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->data)());
  else   (((const ::std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->data)();
}

static  void method_14015( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->push_back)(*(const ::edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)arg[0]);
}

static  void method_14016( void*, void* o, const std::vector<void*>&, void*)
{
  (((::std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->pop_back)();
}

static  void method_14017( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*,std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > > >)((((::std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->insert)(*(::__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*,std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > > >*)arg[0],
    *(const ::edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)arg[1]));
  else   (((::std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->insert)(*(::__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*,std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > > >*)arg[0],
    *(const ::edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)arg[1]);
}

static  void method_14018( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->insert)(*(::__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*,std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > > >*)arg[0],
    *(::std::size_t*)arg[1],
    *(const ::edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)arg[2]);
}

static  void method_14019( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*,std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > > >)((((::std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->erase)(*(::__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*,std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > > >*)arg[0]));
  else   (((::std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->erase)(*(::__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*,std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > > >*)arg[0]);
}

static  void method_14020( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*,std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > > >)((((::std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->erase)(*(::__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*,std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > > >*)arg[0],
    *(::__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*,std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > > >*)arg[1]));
  else   (((::std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->erase)(*(::__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*,std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > > >*)arg[0],
    *(::__gnu_cxx::__normal_iterator<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*,std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > > >*)arg[1]);
}

static  void method_14021( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->swap)(*(::std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)arg[0]);
}

static  void method_14022( void*, void* o, const std::vector<void*>&, void*)
{
  (((::std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->clear)();
}

static void method_newdel_2969( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

static void method_x58( void* retaddr, void*, const std::vector<void*>&, void*)
{
  typedef std::vector<std::pair< ::Reflex::Base, int> > Bases_t;
  static Bases_t s_bases;
  if ( !s_bases.size() ) {
    s_bases.push_back(std::make_pair(::Reflex::Base( ::Reflex::TypeBuilder(Reflex::Literal("std::_Vector_base<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >,std::allocator<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > > >")), ::Reflex::BaseOffset< ::std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >,::std::_Vector_base<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >,std::allocator<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > > > >::Get(),::Reflex::PROTECTED), 0));
  }
  if (retaddr) *(Bases_t**)retaddr = &s_bases;
}

static void method_x59( void* retaddr, void*, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**) retaddr = ::Reflex::Proxy< ::std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > > >::Generate();
  else ::Reflex::Proxy< ::std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > > >::Generate();
}

//------Dictionary for class vector<edm::FwdRef<std::vector<reco::TrackJet, std::allocator<reco::TrackJet> >, reco::TrackJet, edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet, std::allocator<reco::TrackJet> >, reco::TrackJet> >,std::allocator<edm::FwdRef<std::vector<reco::TrackJet, std::allocator<reco::TrackJet> >, reco::TrackJet, edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet, std::allocator<reco::TrackJet> >, reco::TrackJet> > > > -------------------------------
void __std__vector_edm__FwdRef_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s_s__db_datamem(Reflex::Class*);
void __std__vector_edm__FwdRef_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __std__vector_edm__FwdRef_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s_s__datamem_bld(&__std__vector_edm__FwdRef_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s_s__db_datamem);
Reflex::GenreflexMemberBuilder __std__vector_edm__FwdRef_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s_s__funcmem_bld(&__std__vector_edm__FwdRef_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s_s__db_funcmem);
void __std__vector_edm__FwdRef_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >"), typeid(::std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >), sizeof(::std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddBase(type_2484, ::Reflex::BaseOffset< ::std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >, ::std::_Vector_base<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >,std::allocator<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > > > >::Get(), ::Reflex::PROTECTED)
  .AddTypedef(type_4707, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >::_Alloc_value_type"))
  .AddTypedef(type_2484, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >::_Base"))
  .AddTypedef(type_3280, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >::_Tp_alloc_type"))
  .AddTypedef(type_8367, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >::_Alloc_traits"))
  .AddTypedef(type_4707, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >::value_type"))
  .AddTypedef(type_9618, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >::pointer"))
  .AddTypedef(type_13970, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >::const_pointer"))
  .AddTypedef(type_13972, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >::reference"))
  .AddTypedef(type_13974, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >::const_reference"))
  .AddTypedef(type_8219, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >::iterator"))
  .AddTypedef(type_8220, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >::const_iterator"))
  .AddTypedef(type_3491, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >::const_reverse_iterator"))
  .AddTypedef(type_3492, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >::reverse_iterator"))
  .AddTypedef(type_3234, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >::size_type"))
  .AddTypedef(type_3113, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >::difference_type"))
  .AddTypedef(type_3280, Reflex::Literal("std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >::allocator_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("vector"), constructor_13983, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_32518), Reflex::Literal("vector"), constructor_13984, 0, "__a", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_3234, type_13974, type_32518), Reflex::Literal("vector"), constructor_13985, 0, "__n;__value=_Tp();__a=_Alloc()", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_33779), Reflex::Literal("vector"), constructor_13986, 0, "__x", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~vector"), destructor_13987, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_2969, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getBasesTable"), method_x58, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddFunctionMember<void*(void)>(Reflex::Literal("createCollFuncTable"), method_x59, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandFunctionMemberBuilder(&__std__vector_edm__FwdRef_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s_s__funcmem_bld);
}

//------Delayed data member builder for class vector<edm::FwdRef<std::vector<reco::TrackJet, std::allocator<reco::TrackJet> >, reco::TrackJet, edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet, std::allocator<reco::TrackJet> >, reco::TrackJet> >,std::allocator<edm::FwdRef<std::vector<reco::TrackJet, std::allocator<reco::TrackJet> >, reco::TrackJet, edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet, std::allocator<reco::TrackJet> >, reco::TrackJet> > > > -------------------
void __std__vector_edm__FwdRef_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s_s__db_datamem(Reflex::Class*) {

}
//------Delayed function member builder for class vector<edm::FwdRef<std::vector<reco::TrackJet, std::allocator<reco::TrackJet> >, reco::TrackJet, edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet, std::allocator<reco::TrackJet> >, reco::TrackJet> >,std::allocator<edm::FwdRef<std::vector<reco::TrackJet, std::allocator<reco::TrackJet> >, reco::TrackJet, edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet, std::allocator<reco::TrackJet> >, reco::TrackJet> > > > -------------------
void __std__vector_edm__FwdRef_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_33780, type_33779), Reflex::Literal("operator="), operator_13988, 0, "__x", ::Reflex::PUBLIC | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_3234, type_13974), Reflex::Literal("assign"), method_13989, 0, "__n;__val", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_8219), Reflex::Literal("begin"), method_13990, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_8220), Reflex::Literal("begin"), method_13991, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_8219), Reflex::Literal("end"), method_13992, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_8220), Reflex::Literal("end"), method_13993, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3234), Reflex::Literal("size"), method_13998, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3234), Reflex::Literal("max_size"), method_13999, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_3234, type_4707), Reflex::Literal("resize"), method_14000, 0, "__new_size;__x=_Tp()", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3234), Reflex::Literal("capacity"), method_14001, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("empty"), method_14002, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_3234), Reflex::Literal("reserve"), method_14003, 0, "__n", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13972, type_3234), Reflex::Literal("operator[]"), operator_14004, 0, "__n", ::Reflex::PUBLIC | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13974, type_3234), Reflex::Literal("operator[]"), operator_14005, 0, "__n", ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13972, type_3234), Reflex::Literal("at"), method_14007, 0, "__n", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13974, type_3234), Reflex::Literal("at"), method_14008, 0, "__n", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13972), Reflex::Literal("front"), method_14009, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13974), Reflex::Literal("front"), method_14010, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13972), Reflex::Literal("back"), method_14011, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13974), Reflex::Literal("back"), method_14012, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_9618), Reflex::Literal("data"), method_14013, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_13970), Reflex::Literal("data"), method_14014, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_13974), Reflex::Literal("push_back"), method_14015, 0, "__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698), Reflex::Literal("pop_back"), method_14016, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_8219, type_8219, type_13974), Reflex::Literal("insert"), method_14017, 0, "__position;__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_8219, type_3234, type_13974), Reflex::Literal("insert"), method_14018, 0, "__position;__n;__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_8219, type_8219), Reflex::Literal("erase"), method_14019, 0, "__position", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_8219, type_8219, type_8219), Reflex::Literal("erase"), method_14020, 0, "__first;__last", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_33780), Reflex::Literal("swap"), method_14021, 0, "__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698), Reflex::Literal("clear"), method_14022, 0, 0, ::Reflex::PUBLIC);
}
//------Stub functions for class Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>, std::vector<edm::RefVector<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track, edm::refhelper::FindUsingAdvance<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track> >, std::allocator<edm::RefVector<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track, edm::refhelper::FindUsingAdvance<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track> > > >, edm::RefToBase<reco::Jet>, unsigned int, edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>, edm::RefVector<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track, edm::refhelper::FindUsingAdvance<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>, std::vector<edm::RefVector<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track, edm::refhelper::FindUsingAdvance<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track> >, std::allocator<edm::RefVector<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track, edm::refhelper::FindUsingAdvance<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track> > > >, edm::RefToBase<reco::Jet>, unsigned int, edm::helper::AssociationIdenticalKeyReference>, std::pair<edm::RefToBase<reco::Jet>, edm::RefVector<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track, edm::refhelper::FindUsingAdvance<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track> > > > > -------------------------------
static  void operator_24078( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >*)o)->operator=)(*(const ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >*)arg[0]);
  else   (((::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >*)o)->operator=)(*(const ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >*)arg[0]);
}

static void constructor_24079( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >(*(const ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >*)arg[0]);
  else ::new(mem) ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >(*(const ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >*)arg[0]);
}

static void constructor_24080( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >();
  else ::new(mem) ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >();
}

static void constructor_24081( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if ( arg.size() == 2 ) {
    if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >(*(const ::edm::Handle<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)arg[0],
      *(unsigned int*)arg[1]);
  else ::new(mem) ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >(*(const ::edm::Handle<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)arg[0],
      *(unsigned int*)arg[1]);
  }
  else if ( arg.size() == 3 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >(*(const ::edm::Handle<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)arg[0],
      *(unsigned int*)arg[1],
      *(bool*)arg[2]);
  else ::new(mem) ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >(*(const ::edm::Handle<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)arg[0],
      *(unsigned int*)arg[1],
      *(bool*)arg[2]);
  }
}

static void constructor_24082( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if ( arg.size() == 2 ) {
    if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >(*(const ::edm::OrphanHandle<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)arg[0],
      *(unsigned int*)arg[1]);
  else ::new(mem) ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >(*(const ::edm::OrphanHandle<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)arg[0],
      *(unsigned int*)arg[1]);
  }
  else if ( arg.size() == 3 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >(*(const ::edm::OrphanHandle<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)arg[0],
      *(unsigned int*)arg[1],
      *(bool*)arg[2]);
  else ::new(mem) ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >(*(const ::edm::OrphanHandle<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)arg[0],
      *(unsigned int*)arg[1],
      *(bool*)arg[2]);
  }
}

static void constructor_24083( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if ( arg.size() == 2 ) {
    if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >(*(const ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >*)arg[0],
      *(unsigned int*)arg[1]);
  else ::new(mem) ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >(*(const ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >*)arg[0],
      *(unsigned int*)arg[1]);
  }
  else if ( arg.size() == 3 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >(*(const ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >*)arg[0],
      *(unsigned int*)arg[1],
      *(bool*)arg[2]);
  else ::new(mem) ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >(*(const ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >*)arg[0],
      *(unsigned int*)arg[1],
      *(bool*)arg[2]);
  }
}

static void constructor_24084( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if ( arg.size() == 2 ) {
    if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >((const ::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>*)arg[0],
      *(unsigned int*)arg[1]);
  else ::new(mem) ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >((const ::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>*)arg[0],
      *(unsigned int*)arg[1]);
  }
  else if ( arg.size() == 3 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >((const ::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>*)arg[0],
      *(unsigned int*)arg[1],
      *(bool*)arg[2]);
  else ::new(mem) ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >((const ::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>*)arg[0],
      *(unsigned int*)arg[1],
      *(bool*)arg[2]);
  }
}

static void constructor_24085( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if ( arg.size() == 2 ) {
    if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >(*(const ::edm::TestHandle<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)arg[0],
      *(unsigned int*)arg[1]);
  else ::new(mem) ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >(*(const ::edm::TestHandle<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)arg[0],
      *(unsigned int*)arg[1]);
  }
  else if ( arg.size() == 3 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >(*(const ::edm::TestHandle<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)arg[0],
      *(unsigned int*)arg[1],
      *(bool*)arg[2]);
  else ::new(mem) ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >(*(const ::edm::TestHandle<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)arg[0],
      *(unsigned int*)arg[1],
      *(bool*)arg[2]);
  }
}

static void constructor_24086( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >(*(const ::edm::ProductID*)arg[0],
      *(unsigned int*)arg[1],
      (const ::edm::EDProductGetter*)arg[2]);
  else ::new(mem) ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >(*(const ::edm::ProductID*)arg[0],
      *(unsigned int*)arg[1],
      (const ::edm::EDProductGetter*)arg[2]);
}

static void constructor_24087( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >(*(const ::edm::ProductID*)arg[0],
      (const ::std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >*)arg[1],
      *(unsigned int*)arg[2],
      (const ::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>*)arg[3]);
  else ::new(mem) ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >(*(const ::edm::ProductID*)arg[0],
      (const ::std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >*)arg[1],
      *(unsigned int*)arg[2],
      (const ::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>*)arg[3]);
}

static void constructor_24088( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >(*(const ::edm::ProductID*)arg[0]);
  else ::new(mem) ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >(*(const ::edm::ProductID*)arg[0]);
}

static void constructor_24089( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >(*(const ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)arg[0],
      *(unsigned int*)arg[1]);
  else ::new(mem) ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >(*(const ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)arg[0],
      *(unsigned int*)arg[1]);
}

static void destructor_24090(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >*)o)->::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >::~Ref)();
}
static  void operator_24091( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >*)o)->operator*)();
  else   (((const ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >*)o)->operator*)();
}

static  void operator_24092( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >*)o)->operator->)());
  else   (((const ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >*)o)->operator->)();
}

static  void method_24093( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >*)o)->get)());
  else   (((const ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >*)o)->get)();
}

static  void method_24094( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >*)o)->isNull)());
  else   (((const ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >*)o)->isNull)();
}

static  void method_24095( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >*)o)->isNonnull)());
  else   (((const ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >*)o)->isNonnull)();
}

static  void operator_24096( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >*)o)->operator!)());
  else   (((const ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >*)o)->operator!)();
}

static  void method_24097( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::ProductID)((((const ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >*)o)->id)());
  else   (((const ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >*)o)->id)();
}

static  void method_24098( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >*)o)->productGetter)());
  else   (((const ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >*)o)->productGetter)();
}

static  void method_24099( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >*)o)->product)());
  else   (((const ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >*)o)->product)();
}

static  void method_24100( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (unsigned int)((((const ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >*)o)->key)());
  else   (((const ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >*)o)->key)();
}

static  void method_24101( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (unsigned int)((((const ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >*)o)->index)());
  else   (((const ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >*)o)->index)();
}

static  void method_24102( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >*)o)->hasProductCache)());
  else   (((const ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >*)o)->hasProductCache)();
}

static  void method_24103( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >*)o)->isAvailable)());
  else   (((const ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >*)o)->isAvailable)();
}

static  void method_24104( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >*)o)->isTransient)());
  else   (((const ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >*)o)->isTransient)();
}

static  void method_24105( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >*)o)->refCore)();
  else   (((const ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >*)o)->refCore)();
}

static  void method_24106( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (short)((((::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >*)o)->Class_Version)());
  else   (((::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >*)o)->Class_Version)();
}

static void constructor_24107( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >(*(const ::edm::RefCore*)arg[0],
      *(const unsigned int*)arg[1]);
  else ::new(mem) ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >(*(const ::edm::RefCore*)arg[0],
      *(const unsigned int*)arg[1]);
}

static void method_newdel_4919( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>, std::vector<edm::RefVector<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track, edm::refhelper::FindUsingAdvance<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track> >, std::allocator<edm::RefVector<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track, edm::refhelper::FindUsingAdvance<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track> > > >, edm::RefToBase<reco::Jet>, unsigned int, edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>, edm::RefVector<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track, edm::refhelper::FindUsingAdvance<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>, std::vector<edm::RefVector<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track, edm::refhelper::FindUsingAdvance<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track> >, std::allocator<edm::RefVector<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track, edm::refhelper::FindUsingAdvance<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track> > > >, edm::RefToBase<reco::Jet>, unsigned int, edm::helper::AssociationIdenticalKeyReference>, std::pair<edm::RefToBase<reco::Jet>, edm::RefVector<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track, edm::refhelper::FindUsingAdvance<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track> > > > > -------------------------------
void __edm__Ref_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__refhelper__FindUsingAdvance_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s_s_s__db_datamem(Reflex::Class*);
void __edm__Ref_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__refhelper__FindUsingAdvance_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s_s_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__Ref_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__refhelper__FindUsingAdvance_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s_s_s__datamem_bld(&__edm__Ref_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__refhelper__FindUsingAdvance_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s_s_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__Ref_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__refhelper__FindUsingAdvance_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s_s_s__funcmem_bld(&__edm__Ref_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__refhelper__FindUsingAdvance_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s_s_s__db_funcmem);
void __edm__Ref_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__refhelper__FindUsingAdvance_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s_s_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >"), typeid(::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >), sizeof(::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("ClassVersion"), ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >::Class_Version())
  .AddTypedef(type_21782, Reflex::Literal("edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >::VF"))
  .AddTypedef(type_21781, Reflex::Literal("edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >::VBF"))
  .AddTypedef(type_4859, Reflex::Literal("edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >::product_type"))
  .AddTypedef(type_2889, Reflex::Literal("edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >::value_type"))
  .AddTypedef(type_2889c, Reflex::Literal("edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >::element_type"))
  .AddTypedef(type_20323, Reflex::Literal("edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >::finder_type"))
  .AddTypedef(type_219, Reflex::Literal("edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >::argument_type"))
  .AddTypedef(type_219, Reflex::Literal("edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >::key_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_37801, type_37009), Reflex::Literal("operator="), operator_24078, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_37009), Reflex::Literal("Ref"), constructor_24079, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("Ref"), constructor_24080, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_37712, type_219, type_1569), Reflex::Literal("Ref"), constructor_24081, 0, "handle;itemKey;setNow=true", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_37713, type_219, type_1569), Reflex::Literal("Ref"), constructor_24082, 0, "handle;itemKey;setNow=true", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_37008, type_219, type_1569), Reflex::Literal("Ref"), constructor_24083, 0, "refvector;itemKey;setNow=true", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_37010, type_219, type_1569), Reflex::Literal("Ref"), constructor_24084, 0, "iProduct;iItemKey;iSetNow=true", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_37714, type_219, type_1569), Reflex::Literal("Ref"), constructor_24085, 0, "handle;itemKey;setNow=true", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_20008, type_219, type_20128), Reflex::Literal("Ref"), constructor_24086, 0, "productID;itemKey;prodGetter", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_20008, type_14874, type_219, type_37010), Reflex::Literal("Ref"), constructor_24087, 0, "iProductID;;iItemKey;iProduct", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_20008), Reflex::Literal("Ref"), constructor_24088, 0, "iId", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_37711, type_219), Reflex::Literal("Ref"), constructor_24089, 0, "refProd;itemKey", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~Ref"), destructor_24090, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_23020, type_10959), Reflex::Literal("Ref"), constructor_24107, 0, "iRefCore;iKey", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_4919, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__Ref_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__refhelper__FindUsingAdvance_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s_s_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__Ref_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__refhelper__FindUsingAdvance_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s_s_s__funcmem_bld);
}

//------Delayed data member builder for class Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>, std::vector<edm::RefVector<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track, edm::refhelper::FindUsingAdvance<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track> >, std::allocator<edm::RefVector<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track, edm::refhelper::FindUsingAdvance<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track> > > >, edm::RefToBase<reco::Jet>, unsigned int, edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>, edm::RefVector<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track, edm::refhelper::FindUsingAdvance<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>, std::vector<edm::RefVector<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track, edm::refhelper::FindUsingAdvance<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track> >, std::allocator<edm::RefVector<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track, edm::refhelper::FindUsingAdvance<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track> > > >, edm::RefToBase<reco::Jet>, unsigned int, edm::helper::AssociationIdenticalKeyReference>, std::pair<edm::RefToBase<reco::Jet>, edm::RefVector<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track, edm::refhelper::FindUsingAdvance<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track> > > > > -------------------
void __edm__Ref_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__refhelper__FindUsingAdvance_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s_s_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_4847, Reflex::Literal("product_"), OffsetOf(__shadow__::__edm__Ref_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__refhelper__FindUsingAdvance_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s_s_s_, product_), ::Reflex::PRIVATE | ::Reflex::MUTABLE)
  .AddDataMember(type_219, Reflex::Literal("index_"), OffsetOf(__shadow__::__edm__Ref_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__refhelper__FindUsingAdvance_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s_s_s_, index_), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>, std::vector<edm::RefVector<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track, edm::refhelper::FindUsingAdvance<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track> >, std::allocator<edm::RefVector<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track, edm::refhelper::FindUsingAdvance<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track> > > >, edm::RefToBase<reco::Jet>, unsigned int, edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>, edm::RefVector<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track, edm::refhelper::FindUsingAdvance<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>, std::vector<edm::RefVector<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track, edm::refhelper::FindUsingAdvance<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track> >, std::allocator<edm::RefVector<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track, edm::refhelper::FindUsingAdvance<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track> > > >, edm::RefToBase<reco::Jet>, unsigned int, edm::helper::AssociationIdenticalKeyReference>, std::pair<edm::RefToBase<reco::Jet>, edm::RefVector<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track, edm::refhelper::FindUsingAdvance<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track> > > > > -------------------
void __edm__Ref_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__refhelper__FindUsingAdvance_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s_s_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_14878), Reflex::Literal("operator*"), operator_24091, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_14874), Reflex::Literal("operator->"), operator_24092, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_14874), Reflex::Literal("get"), method_24093, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("isNull"), method_24094, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("isNonnull"), method_24095, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("operator!"), operator_24096, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4974), Reflex::Literal("id"), method_24097, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_20128), Reflex::Literal("productGetter"), method_24098, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_37010), Reflex::Literal("product"), method_24099, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_219), Reflex::Literal("key"), method_24100, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_219), Reflex::Literal("index"), method_24101, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("hasProductCache"), method_24102, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("isAvailable"), method_24103, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("isTransient"), method_24104, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_23020), Reflex::Literal("refCore"), method_24105, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_89), Reflex::Literal("Class_Version"), method_24106, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC);
}
//------Stub functions for class RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>, std::vector<edm::RefVector<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track, edm::refhelper::FindUsingAdvance<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track> >, std::allocator<edm::RefVector<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track, edm::refhelper::FindUsingAdvance<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track> > > >, edm::RefToBase<reco::Jet>, unsigned int, edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>, edm::RefVector<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track, edm::refhelper::FindUsingAdvance<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>, std::vector<edm::RefVector<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track, edm::refhelper::FindUsingAdvance<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track> >, std::allocator<edm::RefVector<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track, edm::refhelper::FindUsingAdvance<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track> > > >, edm::RefToBase<reco::Jet>, unsigned int, edm::helper::AssociationIdenticalKeyReference>, std::pair<edm::RefToBase<reco::Jet>, edm::RefVector<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track, edm::refhelper::FindUsingAdvance<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track> > > > > -------------------------------
static void destructor_22009(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >*)o)->::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >::~RefVector)();
}
static void constructor_22010( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >();
  else ::new(mem) ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >();
}

static void constructor_22011( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >(*(const ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >*)arg[0]);
  else ::new(mem) ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >(*(const ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >*)arg[0]);
}

static void constructor_22012( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >(*(const ::edm::ProductID*)arg[0]);
  else ::new(mem) ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >(*(const ::edm::ProductID*)arg[0]);
}

static  void method_22013( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >*)o)->push_back)(*(const ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >*)arg[0]);
}

static  void operator_22014( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >)((((const ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >*)o)->operator[])(*(::std::size_t*)arg[0]));
  else   (((const ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >*)o)->operator[])(*(::std::size_t*)arg[0]);
}

static  void method_22015( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >)((((const ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >*)o)->at)(*(::std::size_t*)arg[0]));
  else   (((const ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >*)o)->at)(*(::std::size_t*)arg[0]);
}

static  void method_22016( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >*)o)->refVector)();
  else   (((const ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >*)o)->refVector)();
}

static  void method_22017( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >*)o)->empty)());
  else   (((const ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >*)o)->empty)();
}

static  void method_22018( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >*)o)->size)());
  else   (((const ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >*)o)->size)();
}

static  void method_22019( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >*)o)->capacity)());
  else   (((const ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >*)o)->capacity)();
}

static  void method_22020( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >*)o)->reserve)(*(::std::size_t*)arg[0]);
}

static  void method_22021( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::RefVectorIterator<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >)((((const ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >*)o)->begin)());
  else   (((const ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >*)o)->begin)();
}

static  void method_22022( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::RefVectorIterator<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >)((((const ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >*)o)->end)());
  else   (((const ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >*)o)->end)();
}

static  void method_22023( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::ProductID)((((const ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >*)o)->id)());
  else   (((const ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >*)o)->id)();
}

static  void method_22024( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >*)o)->productGetter)());
  else   (((const ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >*)o)->productGetter)();
}

static  void method_22025( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >*)o)->isNull)());
  else   (((const ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >*)o)->isNull)();
}

static  void method_22026( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >*)o)->isNonnull)());
  else   (((const ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >*)o)->isNonnull)();
}

static  void operator_22027( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >*)o)->operator!)());
  else   (((const ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >*)o)->operator!)();
}

static  void method_22028( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >*)o)->product)());
  else   (((const ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >*)o)->product)();
}

static  void method_22029( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >*)o)->isAvailable)());
  else   (((const ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >*)o)->isAvailable)();
}

static  void method_22030( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >*)o)->isTransient)());
  else   (((const ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >*)o)->isTransient)();
}

static  void method_22031( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (edm::RefVectorIterator<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >)((((::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >*)o)->erase)(*(const ::edm::RefVectorIterator<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >*)arg[0]));
  else   (((::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >*)o)->erase)(*(const ::edm::RefVectorIterator<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >*)arg[0]);
}

static  void method_22032( void*, void* o, const std::vector<void*>&, void*)
{
  (((::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >*)o)->clear)();
}

static  void method_22033( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >*)o)->swap)(*(::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >*)arg[0]);
}

static  void operator_22034( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >*)o)->operator=)(*(const ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >*)arg[0]);
  else   (((::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >*)o)->operator=)(*(const ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >*)arg[0]);
}

static  void method_22035( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >*)o)->hasProductCache)());
  else   (((const ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >*)o)->hasProductCache)();
}

static  void method_22036( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >*)o)->fillView)(*(const ::edm::ProductID*)arg[0],
    *(::std::vector<const void*>*)arg[1],
    *(::edm::helper_vector*)arg[2]);
}

static  void method_22037( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (short)((((::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >*)o)->Class_Version)());
  else   (((::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >*)o)->Class_Version)();
}

static void method_newdel_4618( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>, std::vector<edm::RefVector<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track, edm::refhelper::FindUsingAdvance<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track> >, std::allocator<edm::RefVector<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track, edm::refhelper::FindUsingAdvance<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track> > > >, edm::RefToBase<reco::Jet>, unsigned int, edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>, edm::RefVector<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track, edm::refhelper::FindUsingAdvance<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>, std::vector<edm::RefVector<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track, edm::refhelper::FindUsingAdvance<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track> >, std::allocator<edm::RefVector<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track, edm::refhelper::FindUsingAdvance<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track> > > >, edm::RefToBase<reco::Jet>, unsigned int, edm::helper::AssociationIdenticalKeyReference>, std::pair<edm::RefToBase<reco::Jet>, edm::RefVector<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track, edm::refhelper::FindUsingAdvance<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track> > > > > -------------------------------
void __edm__RefVector_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__refhelper__FindUsingAdvance_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s_s_s__db_datamem(Reflex::Class*);
void __edm__RefVector_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__refhelper__FindUsingAdvance_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s_s_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__RefVector_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__refhelper__FindUsingAdvance_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s_s_s__datamem_bld(&__edm__RefVector_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__refhelper__FindUsingAdvance_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s_s_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__RefVector_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__refhelper__FindUsingAdvance_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s_s_s__funcmem_bld(&__edm__RefVector_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__refhelper__FindUsingAdvance_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s_s_s__db_funcmem);
void __edm__RefVector_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__refhelper__FindUsingAdvance_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s_s_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >"), typeid(::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >), sizeof(::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("ClassVersion"), ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >::Class_Version())
  .AddTypedef(type_4859, Reflex::Literal("edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >::collection_type"))
  .AddTypedef(type_2889, Reflex::Literal("edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >::member_type"))
  .AddTypedef(type_20323, Reflex::Literal("edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >::finder_type"))
  .AddTypedef(type_4552, Reflex::Literal("edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >::iterator"))
  .AddTypedef(type_4552, Reflex::Literal("edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >::const_iterator"))
  .AddTypedef(type_4919, Reflex::Literal("edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >::value_type"))
  .AddTypedef(type_4919c, Reflex::Literal("edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >::const_reference"))
  .AddTypedef(type_4919c, Reflex::Literal("edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >::reference"))
  .AddTypedef(type_219, Reflex::Literal("edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >::key_type"))
  .AddTypedef(type_2951, Reflex::Literal("edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >::KeyVec"))
  .AddTypedef(type_3234, Reflex::Literal("edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >::size_type"))
  .AddTypedef(type_4004, Reflex::Literal("edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >::contents_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~RefVector"), destructor_22009, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::DESTRUCTOR )
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("RefVector"), constructor_22010, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_37008), Reflex::Literal("RefVector"), constructor_22011, 0, "rh", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_20008), Reflex::Literal("RefVector"), constructor_22012, 0, "iId", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_4618, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__RefVector_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__refhelper__FindUsingAdvance_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s_s_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__RefVector_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__refhelper__FindUsingAdvance_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s_s_s__funcmem_bld);
}

//------Delayed data member builder for class RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>, std::vector<edm::RefVector<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track, edm::refhelper::FindUsingAdvance<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track> >, std::allocator<edm::RefVector<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track, edm::refhelper::FindUsingAdvance<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track> > > >, edm::RefToBase<reco::Jet>, unsigned int, edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>, edm::RefVector<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track, edm::refhelper::FindUsingAdvance<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>, std::vector<edm::RefVector<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track, edm::refhelper::FindUsingAdvance<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track> >, std::allocator<edm::RefVector<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track, edm::refhelper::FindUsingAdvance<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track> > > >, edm::RefToBase<reco::Jet>, unsigned int, edm::helper::AssociationIdenticalKeyReference>, std::pair<edm::RefToBase<reco::Jet>, edm::RefVector<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track, edm::refhelper::FindUsingAdvance<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track> > > > > -------------------
void __edm__RefVector_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__refhelper__FindUsingAdvance_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s_s_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_4004, Reflex::Literal("refVector_"), OffsetOf(__shadow__::__edm__RefVector_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__refhelper__FindUsingAdvance_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s_s_s_, refVector_), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>, std::vector<edm::RefVector<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track, edm::refhelper::FindUsingAdvance<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track> >, std::allocator<edm::RefVector<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track, edm::refhelper::FindUsingAdvance<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track> > > >, edm::RefToBase<reco::Jet>, unsigned int, edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>, edm::RefVector<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track, edm::refhelper::FindUsingAdvance<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>, std::vector<edm::RefVector<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track, edm::refhelper::FindUsingAdvance<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track> >, std::allocator<edm::RefVector<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track, edm::refhelper::FindUsingAdvance<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track> > > >, edm::RefToBase<reco::Jet>, unsigned int, edm::helper::AssociationIdenticalKeyReference>, std::pair<edm::RefToBase<reco::Jet>, edm::RefVector<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track, edm::refhelper::FindUsingAdvance<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track> > > > > -------------------
void __edm__RefVector_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__refhelper__FindUsingAdvance_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s_s_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_37009), Reflex::Literal("push_back"), method_22013, 0, "ref", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4919c, type_3234), Reflex::Literal("operator[]"), operator_22014, 0, "idx", ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4919c, type_3234), Reflex::Literal("at"), method_22015, 0, "idx", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_20127), Reflex::Literal("refVector"), method_22016, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("empty"), method_22017, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3234), Reflex::Literal("size"), method_22018, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3234), Reflex::Literal("capacity"), method_22019, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_3234), Reflex::Literal("reserve"), method_22020, 0, "n", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4552), Reflex::Literal("begin"), method_22021, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4552), Reflex::Literal("end"), method_22022, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4974), Reflex::Literal("id"), method_22023, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_20128), Reflex::Literal("productGetter"), method_22024, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("isNull"), method_22025, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("isNonnull"), method_22026, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("operator!"), operator_22027, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_37010), Reflex::Literal("product"), method_22028, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("isAvailable"), method_22029, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("isTransient"), method_22030, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4552, type_37011), Reflex::Literal("erase"), method_22031, 0, "pos", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698), Reflex::Literal("clear"), method_22032, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_37012), Reflex::Literal("swap"), method_22033, 0, "other", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_37012, type_37008), Reflex::Literal("operator="), operator_22034, 0, "rhs", ::Reflex::PUBLIC | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("hasProductCache"), method_22035, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_20008, type_20132, type_20133), Reflex::Literal("fillView"), method_22036, 0, ";pointers;helpers", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_89), Reflex::Literal("Class_Version"), method_22037, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC);
}
//------Stub functions for class pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track, edm::refhelper::FindUsingAdvance<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track> > > -------------------------------
static void destructor_12887(void*, void * o, const std::vector<void*>&, void *) {
(((::std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >*)o)->::std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >::~pair)();
}
static  void operator_12888( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >*)o)->operator=)(*(const ::std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >*)arg[0]);
  else   (((::std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >*)o)->operator=)(*(const ::std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >*)arg[0]);
}

static void constructor_12889( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >(*(const ::std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >*)arg[0]);
  else ::new(mem) ::std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >(*(const ::std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >*)arg[0]);
}

static void constructor_12890( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >();
  else ::new(mem) ::std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >();
}

static void constructor_12891( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >(*(const ::edm::RefToBase<reco::Jet>*)arg[0],
      *(const ::edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> >*)arg[1]);
  else ::new(mem) ::std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >(*(const ::edm::RefToBase<reco::Jet>*)arg[0],
      *(const ::edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> >*)arg[1]);
}

static void method_newdel_2889( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track, edm::refhelper::FindUsingAdvance<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track> > > -------------------------------
void __std__pair_edm__RefToBase_reco__Jet__edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__db_datamem(Reflex::Class*);
void __std__pair_edm__RefToBase_reco__Jet__edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __std__pair_edm__RefToBase_reco__Jet__edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__datamem_bld(&__std__pair_edm__RefToBase_reco__Jet__edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__db_datamem);
Reflex::GenreflexMemberBuilder __std__pair_edm__RefToBase_reco__Jet__edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__funcmem_bld(&__std__pair_edm__RefToBase_reco__Jet__edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__db_funcmem);
void __std__pair_edm__RefToBase_reco__Jet__edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >"), typeid(::std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >), sizeof(::std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::STRUCT)
  .AddTypedef(type_4891, Reflex::Literal("std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >::first_type"))
  .AddTypedef(type_4628, Reflex::Literal("std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >::second_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~pair"), destructor_12887, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::DESTRUCTOR )
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_14876, type_14878), Reflex::Literal("operator="), operator_12888, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_14878), Reflex::Literal("pair"), constructor_12889, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("pair"), constructor_12890, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_33732, type_14943), Reflex::Literal("pair"), constructor_12891, 0, "__a;__b", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_2889, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__std__pair_edm__RefToBase_reco__Jet__edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__datamem_bld);
}

//------Delayed data member builder for class pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track, edm::refhelper::FindUsingAdvance<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track> > > -------------------
void __std__pair_edm__RefToBase_reco__Jet__edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_4891, Reflex::Literal("first"), OffsetOf(__shadow__::__std__pair_edm__RefToBase_reco__Jet__edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s_, first), ::Reflex::PUBLIC)
  .AddDataMember(type_4628, Reflex::Literal("second"), OffsetOf(__shadow__::__std__pair_edm__RefToBase_reco__Jet__edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s_, second), ::Reflex::PUBLIC);
}
//------Delayed function member builder for class pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track, edm::refhelper::FindUsingAdvance<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track> > > -------------------
void __std__pair_edm__RefToBase_reco__Jet__edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__db_funcmem(Reflex::Class*) {

}
//------Stub functions for class vector<std::pair<edm::RefToBase<reco::Jet>, edm::RefVector<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track, edm::refhelper::FindUsingAdvance<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track> > >,std::allocator<std::pair<edm::RefToBase<reco::Jet>, edm::RefVector<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track, edm::refhelper::FindUsingAdvance<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track> > > > > -------------------------------
static void constructor_14887( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > >();
  else ::new(mem) ::std::vector<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > >();
}

static void constructor_14888( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > >(*(const ::std::allocator<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > >*)arg[0]);
  else ::new(mem) ::std::vector<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > >(*(const ::std::allocator<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > >*)arg[0]);
}

static void constructor_14889( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if ( arg.size() == 1 ) {
    if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > >(*(::std::size_t*)arg[0]);
  else ::new(mem) ::std::vector<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > >(*(::std::size_t*)arg[0]);
  }
  else if ( arg.size() == 2 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > >(*(::std::size_t*)arg[0],
      *(const ::std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >*)arg[1]);
  else ::new(mem) ::std::vector<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > >(*(::std::size_t*)arg[0],
      *(const ::std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >*)arg[1]);
  }
  else if ( arg.size() == 3 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > >(*(::std::size_t*)arg[0],
      *(const ::std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >*)arg[1],
      *(const ::std::allocator<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > >*)arg[2]);
  else ::new(mem) ::std::vector<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > >(*(::std::size_t*)arg[0],
      *(const ::std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >*)arg[1],
      *(const ::std::allocator<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > >*)arg[2]);
  }
}

static void constructor_14890( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > >(*(const ::std::vector<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > >*)arg[0]);
  else ::new(mem) ::std::vector<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > >(*(const ::std::vector<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > >*)arg[0]);
}

static void destructor_14891(void*, void * o, const std::vector<void*>&, void *) {
(((::std::vector<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > >*)o)->::std::vector<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > >::~vector)();
}
static  void operator_14892( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > >*)o)->operator=)(*(const ::std::vector<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > >*)arg[0]);
  else   (((::std::vector<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > >*)o)->operator=)(*(const ::std::vector<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > >*)arg[0]);
}

static  void method_14893( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > >*)o)->assign)(*(::std::size_t*)arg[0],
    *(const ::std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >*)arg[1]);
}

static  void method_14894( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >*,std::vector<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >)((((::std::vector<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > >*)o)->begin)());
  else   (((::std::vector<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > >*)o)->begin)();
}

static  void method_14895( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<const std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >*,std::vector<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >)((((const ::std::vector<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > >*)o)->begin)());
  else   (((const ::std::vector<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > >*)o)->begin)();
}

static  void method_14896( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >*,std::vector<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >)((((::std::vector<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > >*)o)->end)());
  else   (((::std::vector<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > >*)o)->end)();
}

static  void method_14897( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<const std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >*,std::vector<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >)((((const ::std::vector<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > >*)o)->end)());
  else   (((const ::std::vector<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > >*)o)->end)();
}

static  void method_14902( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::std::vector<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > >*)o)->size)());
  else   (((const ::std::vector<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > >*)o)->size)();
}

static  void method_14903( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::std::vector<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > >*)o)->max_size)());
  else   (((const ::std::vector<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > >*)o)->max_size)();
}

static  void method_14904( void*, void* o, const std::vector<void*>& arg, void*)
{
  if ( arg.size() == 1 ) {
    (((::std::vector<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > >*)o)->resize)(*(::std::size_t*)arg[0]);
  }
  else if ( arg.size() == 2 ) { 
    (((::std::vector<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > >*)o)->resize)(*(::std::size_t*)arg[0],
      *(::std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >*)arg[1]);
  }
}

static  void method_14905( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::std::vector<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > >*)o)->capacity)());
  else   (((const ::std::vector<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > >*)o)->capacity)();
}

static  void method_14906( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::std::vector<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > >*)o)->empty)());
  else   (((const ::std::vector<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > >*)o)->empty)();
}

static  void method_14907( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > >*)o)->reserve)(*(::std::size_t*)arg[0]);
}

static  void operator_14908( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > >*)o)->operator[])(*(::std::size_t*)arg[0]);
  else   (((::std::vector<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > >*)o)->operator[])(*(::std::size_t*)arg[0]);
}

static  void operator_14909( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > >*)o)->operator[])(*(::std::size_t*)arg[0]);
  else   (((const ::std::vector<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > >*)o)->operator[])(*(::std::size_t*)arg[0]);
}

static  void method_14911( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > >*)o)->at)(*(::std::size_t*)arg[0]);
  else   (((::std::vector<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > >*)o)->at)(*(::std::size_t*)arg[0]);
}

static  void method_14912( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > >*)o)->at)(*(::std::size_t*)arg[0]);
  else   (((const ::std::vector<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > >*)o)->at)(*(::std::size_t*)arg[0]);
}

static  void method_14913( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > >*)o)->front)();
  else   (((::std::vector<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > >*)o)->front)();
}

static  void method_14914( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > >*)o)->front)();
  else   (((const ::std::vector<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > >*)o)->front)();
}

static  void method_14915( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > >*)o)->back)();
  else   (((::std::vector<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > >*)o)->back)();
}

static  void method_14916( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > >*)o)->back)();
  else   (((const ::std::vector<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > >*)o)->back)();
}

static  void method_14917( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((::std::vector<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > >*)o)->data)());
  else   (((::std::vector<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > >*)o)->data)();
}

static  void method_14918( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::std::vector<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > >*)o)->data)());
  else   (((const ::std::vector<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > >*)o)->data)();
}

static  void method_14919( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > >*)o)->push_back)(*(const ::std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >*)arg[0]);
}

static  void method_14920( void*, void* o, const std::vector<void*>&, void*)
{
  (((::std::vector<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > >*)o)->pop_back)();
}

static  void method_14921( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >*,std::vector<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >)((((::std::vector<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > >*)o)->insert)(*(::__gnu_cxx::__normal_iterator<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >*,std::vector<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >*)arg[0],
    *(const ::std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >*)arg[1]));
  else   (((::std::vector<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > >*)o)->insert)(*(::__gnu_cxx::__normal_iterator<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >*,std::vector<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >*)arg[0],
    *(const ::std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >*)arg[1]);
}

static  void method_14922( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > >*)o)->insert)(*(::__gnu_cxx::__normal_iterator<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >*,std::vector<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >*)arg[0],
    *(::std::size_t*)arg[1],
    *(const ::std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >*)arg[2]);
}

static  void method_14923( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >*,std::vector<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >)((((::std::vector<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > >*)o)->erase)(*(::__gnu_cxx::__normal_iterator<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >*,std::vector<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >*)arg[0]));
  else   (((::std::vector<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > >*)o)->erase)(*(::__gnu_cxx::__normal_iterator<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >*,std::vector<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >*)arg[0]);
}

static  void method_14924( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >*,std::vector<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >)((((::std::vector<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > >*)o)->erase)(*(::__gnu_cxx::__normal_iterator<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >*,std::vector<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >*)arg[0],
    *(::__gnu_cxx::__normal_iterator<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >*,std::vector<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >*)arg[1]));
  else   (((::std::vector<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > >*)o)->erase)(*(::__gnu_cxx::__normal_iterator<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >*,std::vector<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >*)arg[0],
    *(::__gnu_cxx::__normal_iterator<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >*,std::vector<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >*)arg[1]);
}

static  void method_14925( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > >*)o)->swap)(*(::std::vector<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > >*)arg[0]);
}

static  void method_14926( void*, void* o, const std::vector<void*>&, void*)
{
  (((::std::vector<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > >*)o)->clear)();
}

static void method_newdel_2996( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::std::vector<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::std::vector<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::std::vector<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::std::vector<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::std::vector<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

static void method_x64( void* retaddr, void*, const std::vector<void*>&, void*)
{
  typedef std::vector<std::pair< ::Reflex::Base, int> > Bases_t;
  static Bases_t s_bases;
  if ( !s_bases.size() ) {
    s_bases.push_back(std::make_pair(::Reflex::Base( ::Reflex::TypeBuilder(Reflex::Literal("std::_Vector_base<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,std::allocator<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >")), ::Reflex::BaseOffset< ::std::vector<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > >,::std::_Vector_base<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,std::allocator<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > > >::Get(),::Reflex::PROTECTED), 0));
  }
  if (retaddr) *(Bases_t**)retaddr = &s_bases;
}

static void method_x65( void* retaddr, void*, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**) retaddr = ::Reflex::Proxy< ::std::vector<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >::Generate();
  else ::Reflex::Proxy< ::std::vector<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > >::Generate();
}

//------Dictionary for class vector<std::pair<edm::RefToBase<reco::Jet>, edm::RefVector<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track, edm::refhelper::FindUsingAdvance<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track> > >,std::allocator<std::pair<edm::RefToBase<reco::Jet>, edm::RefVector<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track, edm::refhelper::FindUsingAdvance<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track> > > > > -------------------------------
void __std__vector_std__pair_edm__RefToBase_reco__Jet__edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s_s__db_datamem(Reflex::Class*);
void __std__vector_std__pair_edm__RefToBase_reco__Jet__edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __std__vector_std__pair_edm__RefToBase_reco__Jet__edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s_s__datamem_bld(&__std__vector_std__pair_edm__RefToBase_reco__Jet__edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s_s__db_datamem);
Reflex::GenreflexMemberBuilder __std__vector_std__pair_edm__RefToBase_reco__Jet__edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s_s__funcmem_bld(&__std__vector_std__pair_edm__RefToBase_reco__Jet__edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s_s__db_funcmem);
void __std__vector_std__pair_edm__RefToBase_reco__Jet__edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("std::vector<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > >"), typeid(::std::vector<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > >), sizeof(::std::vector<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddBase(type_2494, ::Reflex::BaseOffset< ::std::vector<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > >, ::std::_Vector_base<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,std::allocator<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > > >::Get(), ::Reflex::PROTECTED)
  .AddTypedef(type_2889, Reflex::Literal("std::vector<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > >::_Alloc_value_type"))
  .AddTypedef(type_2494, Reflex::Literal("std::vector<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > >::_Base"))
  .AddTypedef(type_3307, Reflex::Literal("std::vector<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > >::_Tp_alloc_type"))
  .AddTypedef(type_8377, Reflex::Literal("std::vector<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > >::_Alloc_traits"))
  .AddTypedef(type_2889, Reflex::Literal("std::vector<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > >::value_type"))
  .AddTypedef(type_9808, Reflex::Literal("std::vector<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > >::pointer"))
  .AddTypedef(type_14874, Reflex::Literal("std::vector<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > >::const_pointer"))
  .AddTypedef(type_14876, Reflex::Literal("std::vector<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > >::reference"))
  .AddTypedef(type_14878, Reflex::Literal("std::vector<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > >::const_reference"))
  .AddTypedef(type_8238, Reflex::Literal("std::vector<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > >::iterator"))
  .AddTypedef(type_8239, Reflex::Literal("std::vector<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > >::const_iterator"))
  .AddTypedef(type_3511, Reflex::Literal("std::vector<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > >::const_reverse_iterator"))
  .AddTypedef(type_3512, Reflex::Literal("std::vector<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > >::reverse_iterator"))
  .AddTypedef(type_3234, Reflex::Literal("std::vector<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > >::size_type"))
  .AddTypedef(type_3113, Reflex::Literal("std::vector<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > >::difference_type"))
  .AddTypedef(type_3307, Reflex::Literal("std::vector<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > >::allocator_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("vector"), constructor_14887, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_32648), Reflex::Literal("vector"), constructor_14888, 0, "__a", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_3234, type_14878, type_32648), Reflex::Literal("vector"), constructor_14889, 0, "__n;__value=_Tp();__a=_Alloc()", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_33817), Reflex::Literal("vector"), constructor_14890, 0, "__x", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~vector"), destructor_14891, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_2996, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getBasesTable"), method_x64, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddFunctionMember<void*(void)>(Reflex::Literal("createCollFuncTable"), method_x65, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandFunctionMemberBuilder(&__std__vector_std__pair_edm__RefToBase_reco__Jet__edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s_s__funcmem_bld);
}

//------Delayed data member builder for class vector<std::pair<edm::RefToBase<reco::Jet>, edm::RefVector<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track, edm::refhelper::FindUsingAdvance<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track> > >,std::allocator<std::pair<edm::RefToBase<reco::Jet>, edm::RefVector<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track, edm::refhelper::FindUsingAdvance<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track> > > > > -------------------
void __std__vector_std__pair_edm__RefToBase_reco__Jet__edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s_s__db_datamem(Reflex::Class*) {

}
//------Delayed function member builder for class vector<std::pair<edm::RefToBase<reco::Jet>, edm::RefVector<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track, edm::refhelper::FindUsingAdvance<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track> > >,std::allocator<std::pair<edm::RefToBase<reco::Jet>, edm::RefVector<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track, edm::refhelper::FindUsingAdvance<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track> > > > > -------------------
void __std__vector_std__pair_edm__RefToBase_reco__Jet__edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_33818, type_33817), Reflex::Literal("operator="), operator_14892, 0, "__x", ::Reflex::PUBLIC | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_3234, type_14878), Reflex::Literal("assign"), method_14893, 0, "__n;__val", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_8238), Reflex::Literal("begin"), method_14894, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_8239), Reflex::Literal("begin"), method_14895, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_8238), Reflex::Literal("end"), method_14896, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_8239), Reflex::Literal("end"), method_14897, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3234), Reflex::Literal("size"), method_14902, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3234), Reflex::Literal("max_size"), method_14903, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_3234, type_2889), Reflex::Literal("resize"), method_14904, 0, "__new_size;__x=_Tp()", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3234), Reflex::Literal("capacity"), method_14905, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("empty"), method_14906, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_3234), Reflex::Literal("reserve"), method_14907, 0, "__n", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_14876, type_3234), Reflex::Literal("operator[]"), operator_14908, 0, "__n", ::Reflex::PUBLIC | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_14878, type_3234), Reflex::Literal("operator[]"), operator_14909, 0, "__n", ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_14876, type_3234), Reflex::Literal("at"), method_14911, 0, "__n", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_14878, type_3234), Reflex::Literal("at"), method_14912, 0, "__n", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_14876), Reflex::Literal("front"), method_14913, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_14878), Reflex::Literal("front"), method_14914, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_14876), Reflex::Literal("back"), method_14915, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_14878), Reflex::Literal("back"), method_14916, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_9808), Reflex::Literal("data"), method_14917, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_14874), Reflex::Literal("data"), method_14918, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_14878), Reflex::Literal("push_back"), method_14919, 0, "__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698), Reflex::Literal("pop_back"), method_14920, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_8238, type_8238, type_14878), Reflex::Literal("insert"), method_14921, 0, "__position;__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_8238, type_3234, type_14878), Reflex::Literal("insert"), method_14922, 0, "__position;__n;__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_8238, type_8238), Reflex::Literal("erase"), method_14923, 0, "__position", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_8238, type_8238, type_8238), Reflex::Literal("erase"), method_14924, 0, "__first;__last", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_33818), Reflex::Literal("swap"), method_14925, 0, "__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698), Reflex::Literal("clear"), method_14926, 0, 0, ::Reflex::PUBLIC);
}
//------Stub functions for class RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>, std::vector<edm::RefVector<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track, edm::refhelper::FindUsingAdvance<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track> >, std::allocator<edm::RefVector<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track, edm::refhelper::FindUsingAdvance<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track> > > >, edm::RefToBase<reco::Jet>, unsigned int, edm::helper::AssociationIdenticalKeyReference> > -------------------------------
static  void operator_23468( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->operator=)(*(const ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)arg[0]);
  else   (((::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->operator=)(*(const ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)arg[0]);
}

static void constructor_23469( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >(*(const ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)arg[0]);
  else ::new(mem) ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >(*(const ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)arg[0]);
}

static void constructor_23470( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >();
  else ::new(mem) ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >();
}

static void constructor_23471( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >(*(const ::edm::Handle<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)arg[0]);
  else ::new(mem) ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >(*(const ::edm::Handle<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)arg[0]);
}

static void constructor_23472( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >(*(const ::edm::OrphanHandle<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)arg[0]);
  else ::new(mem) ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >(*(const ::edm::OrphanHandle<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)arg[0]);
}

static void constructor_23473( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >((const ::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>*)arg[0]);
  else ::new(mem) ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >((const ::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>*)arg[0]);
}

static void constructor_23474( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >(*(const ::edm::TestHandle<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)arg[0]);
  else ::new(mem) ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >(*(const ::edm::TestHandle<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)arg[0]);
}

static void constructor_23475( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >(*(const ::edm::ProductID*)arg[0],
      (const ::edm::EDProductGetter*)arg[1]);
  else ::new(mem) ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >(*(const ::edm::ProductID*)arg[0],
      (const ::edm::EDProductGetter*)arg[1]);
}

static void destructor_23476(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >::~RefProd)();
}
static  void operator_23477( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->operator*)();
  else   (((const ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->operator*)();
}

static  void operator_23478( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->operator->)());
  else   (((const ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->operator->)();
}

static  void method_23479( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->get)());
  else   (((const ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->get)();
}

static  void method_23480( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->product)());
  else   (((const ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->product)();
}

static  void method_23481( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->refCore)();
  else   (((const ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->refCore)();
}

static  void method_23482( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->isNull)());
  else   (((const ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->isNull)();
}

static  void method_23483( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->isNonnull)());
  else   (((const ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->isNonnull)();
}

static  void operator_23484( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->operator!)());
  else   (((const ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->operator!)();
}

static  void method_23485( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::ProductID)((((const ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->id)());
  else   (((const ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->id)();
}

static  void method_23486( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->productGetter)());
  else   (((const ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->productGetter)();
}

static  void method_23487( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->hasCache)());
  else   (((const ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->hasCache)();
}

static  void method_23488( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->hasProductCache)());
  else   (((const ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->hasProductCache)();
}

static  void method_23489( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->isAvailable)());
  else   (((const ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->isAvailable)();
}

static  void method_23490( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->isTransient)());
  else   (((const ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->isTransient)();
}

static  void method_23491( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->swap)(*(::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)arg[0]);
}

static  void method_23492( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (short)((((::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->Class_Version)());
  else   (((::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->Class_Version)();
}

static void method_newdel_4871( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>, std::vector<edm::RefVector<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track, edm::refhelper::FindUsingAdvance<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track> >, std::allocator<edm::RefVector<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track, edm::refhelper::FindUsingAdvance<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track> > > >, edm::RefToBase<reco::Jet>, unsigned int, edm::helper::AssociationIdenticalKeyReference> > -------------------------------
void __edm__RefProd_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference_s__db_datamem(Reflex::Class*);
void __edm__RefProd_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__RefProd_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference_s__datamem_bld(&__edm__RefProd_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__RefProd_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference_s__funcmem_bld(&__edm__RefProd_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference_s__db_funcmem);
void __edm__RefProd_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >"), typeid(::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >), sizeof(::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("ClassVersion"), ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >::Class_Version())
  .AddTypedef(type_4859, Reflex::Literal("edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >::product_type"))
  .AddTypedef(type_4859, Reflex::Literal("edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >::value_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_37710, type_37711), Reflex::Literal("operator="), operator_23468, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_37711), Reflex::Literal("RefProd"), constructor_23469, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("RefProd"), constructor_23470, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_37712), Reflex::Literal("RefProd"), constructor_23471, 0, "handle", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_37713), Reflex::Literal("RefProd"), constructor_23472, 0, "handle", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_37010), Reflex::Literal("RefProd"), constructor_23473, 0, "iProduct", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_37714), Reflex::Literal("RefProd"), constructor_23474, 0, "handle", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_20008, type_20128), Reflex::Literal("RefProd"), constructor_23475, 0, "productID;prodGetter", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~RefProd"), destructor_23476, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_4871, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__RefProd_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__RefProd_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference_s__funcmem_bld);
}

//------Delayed data member builder for class RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>, std::vector<edm::RefVector<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track, edm::refhelper::FindUsingAdvance<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track> >, std::allocator<edm::RefVector<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track, edm::refhelper::FindUsingAdvance<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track> > > >, edm::RefToBase<reco::Jet>, unsigned int, edm::helper::AssociationIdenticalKeyReference> > -------------------
void __edm__RefProd_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_4847, Reflex::Literal("product_"), OffsetOf(__shadow__::__edm__RefProd_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference_s_, product_), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>, std::vector<edm::RefVector<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track, edm::refhelper::FindUsingAdvance<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track> >, std::allocator<edm::RefVector<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track, edm::refhelper::FindUsingAdvance<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track> > > >, edm::RefToBase<reco::Jet>, unsigned int, edm::helper::AssociationIdenticalKeyReference> > -------------------
void __edm__RefProd_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_20328), Reflex::Literal("operator*"), operator_23477, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_37010), Reflex::Literal("operator->"), operator_23478, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_37010), Reflex::Literal("get"), method_23479, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_37010), Reflex::Literal("product"), method_23480, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_23020), Reflex::Literal("refCore"), method_23481, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("isNull"), method_23482, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("isNonnull"), method_23483, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("operator!"), operator_23484, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4974), Reflex::Literal("id"), method_23485, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_20128), Reflex::Literal("productGetter"), method_23486, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("hasCache"), method_23487, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("hasProductCache"), method_23488, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("isAvailable"), method_23489, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("isTransient"), method_23490, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_37710), Reflex::Literal("swap"), method_23491, 0, "other", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_89), Reflex::Literal("Class_Version"), method_23492, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC);
}
//------Stub functions for class RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>, std::vector<float, std::allocator<float> >, edm::RefToBase<reco::Jet>, unsigned int, edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>, float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>, std::vector<float, std::allocator<float> >, edm::RefToBase<reco::Jet>, unsigned int, edm::helper::AssociationIdenticalKeyReference>, std::pair<edm::RefToBase<reco::Jet>, float> > > -------------------------------
static void destructor_22051(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >*)o)->::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >::~RefVector)();
}
static void constructor_22052( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >();
  else ::new(mem) ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >();
}

static void constructor_22053( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >(*(const ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >*)arg[0]);
  else ::new(mem) ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >(*(const ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >*)arg[0]);
}

static void constructor_22054( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >(*(const ::edm::ProductID*)arg[0]);
  else ::new(mem) ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >(*(const ::edm::ProductID*)arg[0]);
}

static  void method_22055( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >*)o)->push_back)(*(const ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >*)arg[0]);
}

static  void operator_22056( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >)((((const ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >*)o)->operator[])(*(::std::size_t*)arg[0]));
  else   (((const ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >*)o)->operator[])(*(::std::size_t*)arg[0]);
}

static  void method_22057( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >)((((const ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >*)o)->at)(*(::std::size_t*)arg[0]));
  else   (((const ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >*)o)->at)(*(::std::size_t*)arg[0]);
}

static  void method_22058( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >*)o)->refVector)();
  else   (((const ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >*)o)->refVector)();
}

static  void method_22059( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >*)o)->empty)());
  else   (((const ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >*)o)->empty)();
}

static  void method_22060( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >*)o)->size)());
  else   (((const ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >*)o)->size)();
}

static  void method_22061( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >*)o)->capacity)());
  else   (((const ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >*)o)->capacity)();
}

static  void method_22062( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >*)o)->reserve)(*(::std::size_t*)arg[0]);
}

static  void method_22063( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::RefVectorIterator<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >)((((const ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >*)o)->begin)());
  else   (((const ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >*)o)->begin)();
}

static  void method_22064( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::RefVectorIterator<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >)((((const ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >*)o)->end)());
  else   (((const ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >*)o)->end)();
}

static  void method_22065( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::ProductID)((((const ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >*)o)->id)());
  else   (((const ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >*)o)->id)();
}

static  void method_22066( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >*)o)->productGetter)());
  else   (((const ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >*)o)->productGetter)();
}

static  void method_22067( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >*)o)->isNull)());
  else   (((const ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >*)o)->isNull)();
}

static  void method_22068( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >*)o)->isNonnull)());
  else   (((const ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >*)o)->isNonnull)();
}

static  void operator_22069( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >*)o)->operator!)());
  else   (((const ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >*)o)->operator!)();
}

static  void method_22070( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >*)o)->product)());
  else   (((const ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >*)o)->product)();
}

static  void method_22071( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >*)o)->isAvailable)());
  else   (((const ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >*)o)->isAvailable)();
}

static  void method_22072( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >*)o)->isTransient)());
  else   (((const ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >*)o)->isTransient)();
}

static  void method_22073( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (edm::RefVectorIterator<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >)((((::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >*)o)->erase)(*(const ::edm::RefVectorIterator<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >*)arg[0]));
  else   (((::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >*)o)->erase)(*(const ::edm::RefVectorIterator<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >*)arg[0]);
}

static  void method_22074( void*, void* o, const std::vector<void*>&, void*)
{
  (((::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >*)o)->clear)();
}

static  void method_22075( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >*)o)->swap)(*(::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >*)arg[0]);
}

static  void operator_22076( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >*)o)->operator=)(*(const ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >*)arg[0]);
  else   (((::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >*)o)->operator=)(*(const ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >*)arg[0]);
}

static  void method_22077( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >*)o)->hasProductCache)());
  else   (((const ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >*)o)->hasProductCache)();
}

static  void method_22078( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >*)o)->fillView)(*(const ::edm::ProductID*)arg[0],
    *(::std::vector<const void*>*)arg[1],
    *(::edm::helper_vector*)arg[2]);
}

static  void method_22079( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (short)((((::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >*)o)->Class_Version)());
  else   (((::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >*)o)->Class_Version)();
}

static void method_newdel_4623( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>, std::vector<float, std::allocator<float> >, edm::RefToBase<reco::Jet>, unsigned int, edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>, float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>, std::vector<float, std::allocator<float> >, edm::RefToBase<reco::Jet>, unsigned int, edm::helper::AssociationIdenticalKeyReference>, std::pair<edm::RefToBase<reco::Jet>, float> > > -------------------------------
void __edm__RefVector_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_float__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__float__edm__refhelper__FindUsingAdvance_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_float__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__float_s_s__db_datamem(Reflex::Class*);
void __edm__RefVector_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_float__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__float__edm__refhelper__FindUsingAdvance_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_float__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__float_s_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__RefVector_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_float__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__float__edm__refhelper__FindUsingAdvance_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_float__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__float_s_s__datamem_bld(&__edm__RefVector_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_float__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__float__edm__refhelper__FindUsingAdvance_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_float__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__float_s_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__RefVector_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_float__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__float__edm__refhelper__FindUsingAdvance_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_float__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__float_s_s__funcmem_bld(&__edm__RefVector_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_float__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__float__edm__refhelper__FindUsingAdvance_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_float__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__float_s_s__db_funcmem);
void __edm__RefVector_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_float__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__float__edm__refhelper__FindUsingAdvance_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_float__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__float_s_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >"), typeid(::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >), sizeof(::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("ClassVersion"), ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >::Class_Version())
  .AddTypedef(type_4860, Reflex::Literal("edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >::collection_type"))
  .AddTypedef(type_2911, Reflex::Literal("edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >::member_type"))
  .AddTypedef(type_20335, Reflex::Literal("edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >::finder_type"))
  .AddTypedef(type_4553, Reflex::Literal("edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >::iterator"))
  .AddTypedef(type_4553, Reflex::Literal("edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >::const_iterator"))
  .AddTypedef(type_4920, Reflex::Literal("edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >::value_type"))
  .AddTypedef(type_4920c, Reflex::Literal("edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >::const_reference"))
  .AddTypedef(type_4920c, Reflex::Literal("edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >::reference"))
  .AddTypedef(type_219, Reflex::Literal("edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >::key_type"))
  .AddTypedef(type_2951, Reflex::Literal("edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >::KeyVec"))
  .AddTypedef(type_3234, Reflex::Literal("edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >::size_type"))
  .AddTypedef(type_4004, Reflex::Literal("edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >::contents_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~RefVector"), destructor_22051, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::DESTRUCTOR )
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("RefVector"), constructor_22052, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_37014), Reflex::Literal("RefVector"), constructor_22053, 0, "rh", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_20008), Reflex::Literal("RefVector"), constructor_22054, 0, "iId", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_4623, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__RefVector_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_float__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__float__edm__refhelper__FindUsingAdvance_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_float__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__float_s_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__RefVector_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_float__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__float__edm__refhelper__FindUsingAdvance_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_float__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__float_s_s__funcmem_bld);
}

//------Delayed data member builder for class RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>, std::vector<float, std::allocator<float> >, edm::RefToBase<reco::Jet>, unsigned int, edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>, float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>, std::vector<float, std::allocator<float> >, edm::RefToBase<reco::Jet>, unsigned int, edm::helper::AssociationIdenticalKeyReference>, std::pair<edm::RefToBase<reco::Jet>, float> > > -------------------
void __edm__RefVector_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_float__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__float__edm__refhelper__FindUsingAdvance_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_float__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__float_s_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_4004, Reflex::Literal("refVector_"), OffsetOf(__shadow__::__edm__RefVector_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_float__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__float__edm__refhelper__FindUsingAdvance_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_float__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__float_s_s_, refVector_), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>, std::vector<float, std::allocator<float> >, edm::RefToBase<reco::Jet>, unsigned int, edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>, float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>, std::vector<float, std::allocator<float> >, edm::RefToBase<reco::Jet>, unsigned int, edm::helper::AssociationIdenticalKeyReference>, std::pair<edm::RefToBase<reco::Jet>, float> > > -------------------
void __edm__RefVector_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_float__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__float__edm__refhelper__FindUsingAdvance_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_float__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__float_s_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_37015), Reflex::Literal("push_back"), method_22055, 0, "ref", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4920c, type_3234), Reflex::Literal("operator[]"), operator_22056, 0, "idx", ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4920c, type_3234), Reflex::Literal("at"), method_22057, 0, "idx", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_20127), Reflex::Literal("refVector"), method_22058, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("empty"), method_22059, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3234), Reflex::Literal("size"), method_22060, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3234), Reflex::Literal("capacity"), method_22061, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_3234), Reflex::Literal("reserve"), method_22062, 0, "n", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4553), Reflex::Literal("begin"), method_22063, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4553), Reflex::Literal("end"), method_22064, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4974), Reflex::Literal("id"), method_22065, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_20128), Reflex::Literal("productGetter"), method_22066, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("isNull"), method_22067, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("isNonnull"), method_22068, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("operator!"), operator_22069, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_37016), Reflex::Literal("product"), method_22070, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("isAvailable"), method_22071, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("isTransient"), method_22072, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4553, type_37017), Reflex::Literal("erase"), method_22073, 0, "pos", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698), Reflex::Literal("clear"), method_22074, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_37018), Reflex::Literal("swap"), method_22075, 0, "other", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_37018, type_37014), Reflex::Literal("operator="), operator_22076, 0, "rhs", ::Reflex::PUBLIC | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("hasProductCache"), method_22077, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_20008, type_20132, type_20133), Reflex::Literal("fillView"), method_22078, 0, ";pointers;helpers", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_89), Reflex::Literal("Class_Version"), method_22079, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC);
}
//------Stub functions for class vector<std::pair<edm::RefToBase<reco::Jet>, float>,std::allocator<std::pair<edm::RefToBase<reco::Jet>, float> > > -------------------------------
static void constructor_15017( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<std::pair<edm::RefToBase<reco::Jet>,float> >();
  else ::new(mem) ::std::vector<std::pair<edm::RefToBase<reco::Jet>,float> >();
}

static void constructor_15018( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<std::pair<edm::RefToBase<reco::Jet>,float> >(*(const ::std::allocator<std::pair<edm::RefToBase<reco::Jet>,float> >*)arg[0]);
  else ::new(mem) ::std::vector<std::pair<edm::RefToBase<reco::Jet>,float> >(*(const ::std::allocator<std::pair<edm::RefToBase<reco::Jet>,float> >*)arg[0]);
}

static void constructor_15019( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if ( arg.size() == 1 ) {
    if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<std::pair<edm::RefToBase<reco::Jet>,float> >(*(::std::size_t*)arg[0]);
  else ::new(mem) ::std::vector<std::pair<edm::RefToBase<reco::Jet>,float> >(*(::std::size_t*)arg[0]);
  }
  else if ( arg.size() == 2 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<std::pair<edm::RefToBase<reco::Jet>,float> >(*(::std::size_t*)arg[0],
      *(const ::std::pair<edm::RefToBase<reco::Jet>,float>*)arg[1]);
  else ::new(mem) ::std::vector<std::pair<edm::RefToBase<reco::Jet>,float> >(*(::std::size_t*)arg[0],
      *(const ::std::pair<edm::RefToBase<reco::Jet>,float>*)arg[1]);
  }
  else if ( arg.size() == 3 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<std::pair<edm::RefToBase<reco::Jet>,float> >(*(::std::size_t*)arg[0],
      *(const ::std::pair<edm::RefToBase<reco::Jet>,float>*)arg[1],
      *(const ::std::allocator<std::pair<edm::RefToBase<reco::Jet>,float> >*)arg[2]);
  else ::new(mem) ::std::vector<std::pair<edm::RefToBase<reco::Jet>,float> >(*(::std::size_t*)arg[0],
      *(const ::std::pair<edm::RefToBase<reco::Jet>,float>*)arg[1],
      *(const ::std::allocator<std::pair<edm::RefToBase<reco::Jet>,float> >*)arg[2]);
  }
}

static void constructor_15020( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<std::pair<edm::RefToBase<reco::Jet>,float> >(*(const ::std::vector<std::pair<edm::RefToBase<reco::Jet>,float> >*)arg[0]);
  else ::new(mem) ::std::vector<std::pair<edm::RefToBase<reco::Jet>,float> >(*(const ::std::vector<std::pair<edm::RefToBase<reco::Jet>,float> >*)arg[0]);
}

static void destructor_15021(void*, void * o, const std::vector<void*>&, void *) {
(((::std::vector<std::pair<edm::RefToBase<reco::Jet>,float> >*)o)->::std::vector<std::pair<edm::RefToBase<reco::Jet>,float> >::~vector)();
}
static  void operator_15022( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<std::pair<edm::RefToBase<reco::Jet>,float> >*)o)->operator=)(*(const ::std::vector<std::pair<edm::RefToBase<reco::Jet>,float> >*)arg[0]);
  else   (((::std::vector<std::pair<edm::RefToBase<reco::Jet>,float> >*)o)->operator=)(*(const ::std::vector<std::pair<edm::RefToBase<reco::Jet>,float> >*)arg[0]);
}

static  void method_15023( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<std::pair<edm::RefToBase<reco::Jet>,float> >*)o)->assign)(*(::std::size_t*)arg[0],
    *(const ::std::pair<edm::RefToBase<reco::Jet>,float>*)arg[1]);
}

static  void method_15024( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<std::pair<edm::RefToBase<reco::Jet>,float>*,std::vector<std::pair<edm::RefToBase<reco::Jet>,float> > >)((((::std::vector<std::pair<edm::RefToBase<reco::Jet>,float> >*)o)->begin)());
  else   (((::std::vector<std::pair<edm::RefToBase<reco::Jet>,float> >*)o)->begin)();
}

static  void method_15025( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<const std::pair<edm::RefToBase<reco::Jet>,float>*,std::vector<std::pair<edm::RefToBase<reco::Jet>,float> > >)((((const ::std::vector<std::pair<edm::RefToBase<reco::Jet>,float> >*)o)->begin)());
  else   (((const ::std::vector<std::pair<edm::RefToBase<reco::Jet>,float> >*)o)->begin)();
}

static  void method_15026( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<std::pair<edm::RefToBase<reco::Jet>,float>*,std::vector<std::pair<edm::RefToBase<reco::Jet>,float> > >)((((::std::vector<std::pair<edm::RefToBase<reco::Jet>,float> >*)o)->end)());
  else   (((::std::vector<std::pair<edm::RefToBase<reco::Jet>,float> >*)o)->end)();
}

static  void method_15027( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<const std::pair<edm::RefToBase<reco::Jet>,float>*,std::vector<std::pair<edm::RefToBase<reco::Jet>,float> > >)((((const ::std::vector<std::pair<edm::RefToBase<reco::Jet>,float> >*)o)->end)());
  else   (((const ::std::vector<std::pair<edm::RefToBase<reco::Jet>,float> >*)o)->end)();
}

static  void method_15032( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::std::vector<std::pair<edm::RefToBase<reco::Jet>,float> >*)o)->size)());
  else   (((const ::std::vector<std::pair<edm::RefToBase<reco::Jet>,float> >*)o)->size)();
}

static  void method_15033( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::std::vector<std::pair<edm::RefToBase<reco::Jet>,float> >*)o)->max_size)());
  else   (((const ::std::vector<std::pair<edm::RefToBase<reco::Jet>,float> >*)o)->max_size)();
}

static  void method_15034( void*, void* o, const std::vector<void*>& arg, void*)
{
  if ( arg.size() == 1 ) {
    (((::std::vector<std::pair<edm::RefToBase<reco::Jet>,float> >*)o)->resize)(*(::std::size_t*)arg[0]);
  }
  else if ( arg.size() == 2 ) { 
    (((::std::vector<std::pair<edm::RefToBase<reco::Jet>,float> >*)o)->resize)(*(::std::size_t*)arg[0],
      *(::std::pair<edm::RefToBase<reco::Jet>,float>*)arg[1]);
  }
}

static  void method_15035( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::std::vector<std::pair<edm::RefToBase<reco::Jet>,float> >*)o)->capacity)());
  else   (((const ::std::vector<std::pair<edm::RefToBase<reco::Jet>,float> >*)o)->capacity)();
}

static  void method_15036( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::std::vector<std::pair<edm::RefToBase<reco::Jet>,float> >*)o)->empty)());
  else   (((const ::std::vector<std::pair<edm::RefToBase<reco::Jet>,float> >*)o)->empty)();
}

static  void method_15037( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<std::pair<edm::RefToBase<reco::Jet>,float> >*)o)->reserve)(*(::std::size_t*)arg[0]);
}

static  void operator_15038( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<std::pair<edm::RefToBase<reco::Jet>,float> >*)o)->operator[])(*(::std::size_t*)arg[0]);
  else   (((::std::vector<std::pair<edm::RefToBase<reco::Jet>,float> >*)o)->operator[])(*(::std::size_t*)arg[0]);
}

static  void operator_15039( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<std::pair<edm::RefToBase<reco::Jet>,float> >*)o)->operator[])(*(::std::size_t*)arg[0]);
  else   (((const ::std::vector<std::pair<edm::RefToBase<reco::Jet>,float> >*)o)->operator[])(*(::std::size_t*)arg[0]);
}

static  void method_15041( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<std::pair<edm::RefToBase<reco::Jet>,float> >*)o)->at)(*(::std::size_t*)arg[0]);
  else   (((::std::vector<std::pair<edm::RefToBase<reco::Jet>,float> >*)o)->at)(*(::std::size_t*)arg[0]);
}

static  void method_15042( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<std::pair<edm::RefToBase<reco::Jet>,float> >*)o)->at)(*(::std::size_t*)arg[0]);
  else   (((const ::std::vector<std::pair<edm::RefToBase<reco::Jet>,float> >*)o)->at)(*(::std::size_t*)arg[0]);
}

static  void method_15043( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<std::pair<edm::RefToBase<reco::Jet>,float> >*)o)->front)();
  else   (((::std::vector<std::pair<edm::RefToBase<reco::Jet>,float> >*)o)->front)();
}

static  void method_15044( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<std::pair<edm::RefToBase<reco::Jet>,float> >*)o)->front)();
  else   (((const ::std::vector<std::pair<edm::RefToBase<reco::Jet>,float> >*)o)->front)();
}

static  void method_15045( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<std::pair<edm::RefToBase<reco::Jet>,float> >*)o)->back)();
  else   (((::std::vector<std::pair<edm::RefToBase<reco::Jet>,float> >*)o)->back)();
}

static  void method_15046( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<std::pair<edm::RefToBase<reco::Jet>,float> >*)o)->back)();
  else   (((const ::std::vector<std::pair<edm::RefToBase<reco::Jet>,float> >*)o)->back)();
}

static  void method_15047( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((::std::vector<std::pair<edm::RefToBase<reco::Jet>,float> >*)o)->data)());
  else   (((::std::vector<std::pair<edm::RefToBase<reco::Jet>,float> >*)o)->data)();
}

static  void method_15048( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::std::vector<std::pair<edm::RefToBase<reco::Jet>,float> >*)o)->data)());
  else   (((const ::std::vector<std::pair<edm::RefToBase<reco::Jet>,float> >*)o)->data)();
}

static  void method_15049( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<std::pair<edm::RefToBase<reco::Jet>,float> >*)o)->push_back)(*(const ::std::pair<edm::RefToBase<reco::Jet>,float>*)arg[0]);
}

static  void method_15050( void*, void* o, const std::vector<void*>&, void*)
{
  (((::std::vector<std::pair<edm::RefToBase<reco::Jet>,float> >*)o)->pop_back)();
}

static  void method_15051( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<std::pair<edm::RefToBase<reco::Jet>,float>*,std::vector<std::pair<edm::RefToBase<reco::Jet>,float> > >)((((::std::vector<std::pair<edm::RefToBase<reco::Jet>,float> >*)o)->insert)(*(::__gnu_cxx::__normal_iterator<std::pair<edm::RefToBase<reco::Jet>,float>*,std::vector<std::pair<edm::RefToBase<reco::Jet>,float> > >*)arg[0],
    *(const ::std::pair<edm::RefToBase<reco::Jet>,float>*)arg[1]));
  else   (((::std::vector<std::pair<edm::RefToBase<reco::Jet>,float> >*)o)->insert)(*(::__gnu_cxx::__normal_iterator<std::pair<edm::RefToBase<reco::Jet>,float>*,std::vector<std::pair<edm::RefToBase<reco::Jet>,float> > >*)arg[0],
    *(const ::std::pair<edm::RefToBase<reco::Jet>,float>*)arg[1]);
}

static  void method_15052( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<std::pair<edm::RefToBase<reco::Jet>,float> >*)o)->insert)(*(::__gnu_cxx::__normal_iterator<std::pair<edm::RefToBase<reco::Jet>,float>*,std::vector<std::pair<edm::RefToBase<reco::Jet>,float> > >*)arg[0],
    *(::std::size_t*)arg[1],
    *(const ::std::pair<edm::RefToBase<reco::Jet>,float>*)arg[2]);
}

static  void method_15053( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<std::pair<edm::RefToBase<reco::Jet>,float>*,std::vector<std::pair<edm::RefToBase<reco::Jet>,float> > >)((((::std::vector<std::pair<edm::RefToBase<reco::Jet>,float> >*)o)->erase)(*(::__gnu_cxx::__normal_iterator<std::pair<edm::RefToBase<reco::Jet>,float>*,std::vector<std::pair<edm::RefToBase<reco::Jet>,float> > >*)arg[0]));
  else   (((::std::vector<std::pair<edm::RefToBase<reco::Jet>,float> >*)o)->erase)(*(::__gnu_cxx::__normal_iterator<std::pair<edm::RefToBase<reco::Jet>,float>*,std::vector<std::pair<edm::RefToBase<reco::Jet>,float> > >*)arg[0]);
}

static  void method_15054( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<std::pair<edm::RefToBase<reco::Jet>,float>*,std::vector<std::pair<edm::RefToBase<reco::Jet>,float> > >)((((::std::vector<std::pair<edm::RefToBase<reco::Jet>,float> >*)o)->erase)(*(::__gnu_cxx::__normal_iterator<std::pair<edm::RefToBase<reco::Jet>,float>*,std::vector<std::pair<edm::RefToBase<reco::Jet>,float> > >*)arg[0],
    *(::__gnu_cxx::__normal_iterator<std::pair<edm::RefToBase<reco::Jet>,float>*,std::vector<std::pair<edm::RefToBase<reco::Jet>,float> > >*)arg[1]));
  else   (((::std::vector<std::pair<edm::RefToBase<reco::Jet>,float> >*)o)->erase)(*(::__gnu_cxx::__normal_iterator<std::pair<edm::RefToBase<reco::Jet>,float>*,std::vector<std::pair<edm::RefToBase<reco::Jet>,float> > >*)arg[0],
    *(::__gnu_cxx::__normal_iterator<std::pair<edm::RefToBase<reco::Jet>,float>*,std::vector<std::pair<edm::RefToBase<reco::Jet>,float> > >*)arg[1]);
}

static  void method_15055( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<std::pair<edm::RefToBase<reco::Jet>,float> >*)o)->swap)(*(::std::vector<std::pair<edm::RefToBase<reco::Jet>,float> >*)arg[0]);
}

static  void method_15056( void*, void* o, const std::vector<void*>&, void*)
{
  (((::std::vector<std::pair<edm::RefToBase<reco::Jet>,float> >*)o)->clear)();
}

static void method_newdel_2998( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::std::vector<std::pair<edm::RefToBase<reco::Jet>,float> > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::std::vector<std::pair<edm::RefToBase<reco::Jet>,float> > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::std::vector<std::pair<edm::RefToBase<reco::Jet>,float> > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::std::vector<std::pair<edm::RefToBase<reco::Jet>,float> > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::std::vector<std::pair<edm::RefToBase<reco::Jet>,float> > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

static void method_x69( void* retaddr, void*, const std::vector<void*>&, void*)
{
  typedef std::vector<std::pair< ::Reflex::Base, int> > Bases_t;
  static Bases_t s_bases;
  if ( !s_bases.size() ) {
    s_bases.push_back(std::make_pair(::Reflex::Base( ::Reflex::TypeBuilder(Reflex::Literal("std::_Vector_base<std::pair<edm::RefToBase<reco::Jet>,float>,std::allocator<std::pair<edm::RefToBase<reco::Jet>,float> > >")), ::Reflex::BaseOffset< ::std::vector<std::pair<edm::RefToBase<reco::Jet>,float> >,::std::_Vector_base<std::pair<edm::RefToBase<reco::Jet>,float>,std::allocator<std::pair<edm::RefToBase<reco::Jet>,float> > > >::Get(),::Reflex::PROTECTED), 0));
  }
  if (retaddr) *(Bases_t**)retaddr = &s_bases;
}

static void method_x70( void* retaddr, void*, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**) retaddr = ::Reflex::Proxy< ::std::vector<std::pair<edm::RefToBase<reco::Jet>,float> > >::Generate();
  else ::Reflex::Proxy< ::std::vector<std::pair<edm::RefToBase<reco::Jet>,float> > >::Generate();
}

//------Dictionary for class vector<std::pair<edm::RefToBase<reco::Jet>, float>,std::allocator<std::pair<edm::RefToBase<reco::Jet>, float> > > -------------------------------
void __std__vector_std__pair_edm__RefToBase_reco__Jet__float_s__db_datamem(Reflex::Class*);
void __std__vector_std__pair_edm__RefToBase_reco__Jet__float_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __std__vector_std__pair_edm__RefToBase_reco__Jet__float_s__datamem_bld(&__std__vector_std__pair_edm__RefToBase_reco__Jet__float_s__db_datamem);
Reflex::GenreflexMemberBuilder __std__vector_std__pair_edm__RefToBase_reco__Jet__float_s__funcmem_bld(&__std__vector_std__pair_edm__RefToBase_reco__Jet__float_s__db_funcmem);
void __std__vector_std__pair_edm__RefToBase_reco__Jet__float_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("std::vector<std::pair<edm::RefToBase<reco::Jet>,float> >"), typeid(::std::vector<std::pair<edm::RefToBase<reco::Jet>,float> >), sizeof(::std::vector<std::pair<edm::RefToBase<reco::Jet>,float> >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddBase(type_2496, ::Reflex::BaseOffset< ::std::vector<std::pair<edm::RefToBase<reco::Jet>,float> >, ::std::_Vector_base<std::pair<edm::RefToBase<reco::Jet>,float>,std::allocator<std::pair<edm::RefToBase<reco::Jet>,float> > > >::Get(), ::Reflex::PROTECTED)
  .AddTypedef(type_2911, Reflex::Literal("std::vector<std::pair<edm::RefToBase<reco::Jet>,float> >::_Alloc_value_type"))
  .AddTypedef(type_2496, Reflex::Literal("std::vector<std::pair<edm::RefToBase<reco::Jet>,float> >::_Base"))
  .AddTypedef(type_3309, Reflex::Literal("std::vector<std::pair<edm::RefToBase<reco::Jet>,float> >::_Tp_alloc_type"))
  .AddTypedef(type_8379, Reflex::Literal("std::vector<std::pair<edm::RefToBase<reco::Jet>,float> >::_Alloc_traits"))
  .AddTypedef(type_2911, Reflex::Literal("std::vector<std::pair<edm::RefToBase<reco::Jet>,float> >::value_type"))
  .AddTypedef(type_9846, Reflex::Literal("std::vector<std::pair<edm::RefToBase<reco::Jet>,float> >::pointer"))
  .AddTypedef(type_15004, Reflex::Literal("std::vector<std::pair<edm::RefToBase<reco::Jet>,float> >::const_pointer"))
  .AddTypedef(type_15006, Reflex::Literal("std::vector<std::pair<edm::RefToBase<reco::Jet>,float> >::reference"))
  .AddTypedef(type_15008, Reflex::Literal("std::vector<std::pair<edm::RefToBase<reco::Jet>,float> >::const_reference"))
  .AddTypedef(type_8242, Reflex::Literal("std::vector<std::pair<edm::RefToBase<reco::Jet>,float> >::iterator"))
  .AddTypedef(type_8243, Reflex::Literal("std::vector<std::pair<edm::RefToBase<reco::Jet>,float> >::const_iterator"))
  .AddTypedef(type_3515, Reflex::Literal("std::vector<std::pair<edm::RefToBase<reco::Jet>,float> >::const_reverse_iterator"))
  .AddTypedef(type_3516, Reflex::Literal("std::vector<std::pair<edm::RefToBase<reco::Jet>,float> >::reverse_iterator"))
  .AddTypedef(type_3234, Reflex::Literal("std::vector<std::pair<edm::RefToBase<reco::Jet>,float> >::size_type"))
  .AddTypedef(type_3113, Reflex::Literal("std::vector<std::pair<edm::RefToBase<reco::Jet>,float> >::difference_type"))
  .AddTypedef(type_3309, Reflex::Literal("std::vector<std::pair<edm::RefToBase<reco::Jet>,float> >::allocator_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("vector"), constructor_15017, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_32674), Reflex::Literal("vector"), constructor_15018, 0, "__a", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_3234, type_15008, type_32674), Reflex::Literal("vector"), constructor_15019, 0, "__n;__value=_Tp();__a=_Alloc()", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_33823), Reflex::Literal("vector"), constructor_15020, 0, "__x", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~vector"), destructor_15021, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_2998, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getBasesTable"), method_x69, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddFunctionMember<void*(void)>(Reflex::Literal("createCollFuncTable"), method_x70, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandFunctionMemberBuilder(&__std__vector_std__pair_edm__RefToBase_reco__Jet__float_s__funcmem_bld);
}

//------Delayed data member builder for class vector<std::pair<edm::RefToBase<reco::Jet>, float>,std::allocator<std::pair<edm::RefToBase<reco::Jet>, float> > > -------------------
void __std__vector_std__pair_edm__RefToBase_reco__Jet__float_s__db_datamem(Reflex::Class*) {

}
//------Delayed function member builder for class vector<std::pair<edm::RefToBase<reco::Jet>, float>,std::allocator<std::pair<edm::RefToBase<reco::Jet>, float> > > -------------------
void __std__vector_std__pair_edm__RefToBase_reco__Jet__float_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_33824, type_33823), Reflex::Literal("operator="), operator_15022, 0, "__x", ::Reflex::PUBLIC | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_3234, type_15008), Reflex::Literal("assign"), method_15023, 0, "__n;__val", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_8242), Reflex::Literal("begin"), method_15024, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_8243), Reflex::Literal("begin"), method_15025, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_8242), Reflex::Literal("end"), method_15026, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_8243), Reflex::Literal("end"), method_15027, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3234), Reflex::Literal("size"), method_15032, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3234), Reflex::Literal("max_size"), method_15033, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_3234, type_2911), Reflex::Literal("resize"), method_15034, 0, "__new_size;__x=_Tp()", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3234), Reflex::Literal("capacity"), method_15035, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("empty"), method_15036, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_3234), Reflex::Literal("reserve"), method_15037, 0, "__n", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_15006, type_3234), Reflex::Literal("operator[]"), operator_15038, 0, "__n", ::Reflex::PUBLIC | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_15008, type_3234), Reflex::Literal("operator[]"), operator_15039, 0, "__n", ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_15006, type_3234), Reflex::Literal("at"), method_15041, 0, "__n", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_15008, type_3234), Reflex::Literal("at"), method_15042, 0, "__n", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_15006), Reflex::Literal("front"), method_15043, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_15008), Reflex::Literal("front"), method_15044, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_15006), Reflex::Literal("back"), method_15045, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_15008), Reflex::Literal("back"), method_15046, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_9846), Reflex::Literal("data"), method_15047, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_15004), Reflex::Literal("data"), method_15048, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_15008), Reflex::Literal("push_back"), method_15049, 0, "__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698), Reflex::Literal("pop_back"), method_15050, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_8242, type_8242, type_15008), Reflex::Literal("insert"), method_15051, 0, "__position;__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_8242, type_3234, type_15008), Reflex::Literal("insert"), method_15052, 0, "__position;__n;__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_8242, type_8242), Reflex::Literal("erase"), method_15053, 0, "__position", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_8242, type_8242, type_8242), Reflex::Literal("erase"), method_15054, 0, "__first;__last", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_33824), Reflex::Literal("swap"), method_15055, 0, "__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698), Reflex::Literal("clear"), method_15056, 0, 0, ::Reflex::PUBLIC);
}
//------Stub functions for class RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>, std::vector<float, std::allocator<float> >, edm::RefToBase<reco::Jet>, unsigned int, edm::helper::AssociationIdenticalKeyReference> > -------------------------------
static  void operator_23497( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->operator=)(*(const ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)arg[0]);
  else   (((::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->operator=)(*(const ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)arg[0]);
}

static void constructor_23498( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >(*(const ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)arg[0]);
  else ::new(mem) ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >(*(const ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)arg[0]);
}

static void constructor_23499( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >();
  else ::new(mem) ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >();
}

static void constructor_23500( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >(*(const ::edm::Handle<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)arg[0]);
  else ::new(mem) ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >(*(const ::edm::Handle<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)arg[0]);
}

static void constructor_23501( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >(*(const ::edm::OrphanHandle<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)arg[0]);
  else ::new(mem) ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >(*(const ::edm::OrphanHandle<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)arg[0]);
}

static void constructor_23502( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >((const ::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>*)arg[0]);
  else ::new(mem) ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >((const ::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>*)arg[0]);
}

static void constructor_23503( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >(*(const ::edm::TestHandle<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)arg[0]);
  else ::new(mem) ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >(*(const ::edm::TestHandle<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)arg[0]);
}

static void constructor_23504( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >(*(const ::edm::ProductID*)arg[0],
      (const ::edm::EDProductGetter*)arg[1]);
  else ::new(mem) ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >(*(const ::edm::ProductID*)arg[0],
      (const ::edm::EDProductGetter*)arg[1]);
}

static void destructor_23505(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >::~RefProd)();
}
static  void operator_23506( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->operator*)();
  else   (((const ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->operator*)();
}

static  void operator_23507( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->operator->)());
  else   (((const ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->operator->)();
}

static  void method_23508( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->get)());
  else   (((const ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->get)();
}

static  void method_23509( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->product)());
  else   (((const ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->product)();
}

static  void method_23510( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->refCore)();
  else   (((const ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->refCore)();
}

static  void method_23511( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->isNull)());
  else   (((const ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->isNull)();
}

static  void method_23512( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->isNonnull)());
  else   (((const ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->isNonnull)();
}

static  void operator_23513( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->operator!)());
  else   (((const ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->operator!)();
}

static  void method_23514( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::ProductID)((((const ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->id)());
  else   (((const ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->id)();
}

static  void method_23515( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->productGetter)());
  else   (((const ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->productGetter)();
}

static  void method_23516( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->hasCache)());
  else   (((const ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->hasCache)();
}

static  void method_23517( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->hasProductCache)());
  else   (((const ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->hasProductCache)();
}

static  void method_23518( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->isAvailable)());
  else   (((const ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->isAvailable)();
}

static  void method_23519( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->isTransient)());
  else   (((const ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->isTransient)();
}

static  void method_23520( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->swap)(*(::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)arg[0]);
}

static  void method_23521( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (short)((((::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->Class_Version)());
  else   (((::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->Class_Version)();
}

static void method_newdel_4872( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>, std::vector<float, std::allocator<float> >, edm::RefToBase<reco::Jet>, unsigned int, edm::helper::AssociationIdenticalKeyReference> > -------------------------------
void __edm__RefProd_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_float__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference_s__db_datamem(Reflex::Class*);
void __edm__RefProd_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_float__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__RefProd_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_float__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference_s__datamem_bld(&__edm__RefProd_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_float__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__RefProd_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_float__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference_s__funcmem_bld(&__edm__RefProd_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_float__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference_s__db_funcmem);
void __edm__RefProd_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_float__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >"), typeid(::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >), sizeof(::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("ClassVersion"), ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >::Class_Version())
  .AddTypedef(type_4860, Reflex::Literal("edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >::product_type"))
  .AddTypedef(type_4860, Reflex::Literal("edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >::value_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_37715, type_37716), Reflex::Literal("operator="), operator_23497, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_37716), Reflex::Literal("RefProd"), constructor_23498, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("RefProd"), constructor_23499, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_37717), Reflex::Literal("RefProd"), constructor_23500, 0, "handle", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_37718), Reflex::Literal("RefProd"), constructor_23501, 0, "handle", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_37016), Reflex::Literal("RefProd"), constructor_23502, 0, "iProduct", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_37719), Reflex::Literal("RefProd"), constructor_23503, 0, "handle", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_20008, type_20128), Reflex::Literal("RefProd"), constructor_23504, 0, "productID;prodGetter", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~RefProd"), destructor_23505, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_4872, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__RefProd_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_float__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__RefProd_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_float__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference_s__funcmem_bld);
}

//------Delayed data member builder for class RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>, std::vector<float, std::allocator<float> >, edm::RefToBase<reco::Jet>, unsigned int, edm::helper::AssociationIdenticalKeyReference> > -------------------
void __edm__RefProd_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_float__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_4847, Reflex::Literal("product_"), OffsetOf(__shadow__::__edm__RefProd_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_float__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference_s_, product_), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>, std::vector<float, std::allocator<float> >, edm::RefToBase<reco::Jet>, unsigned int, edm::helper::AssociationIdenticalKeyReference> > -------------------
void __edm__RefProd_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_float__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_20340), Reflex::Literal("operator*"), operator_23506, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_37016), Reflex::Literal("operator->"), operator_23507, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_37016), Reflex::Literal("get"), method_23508, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_37016), Reflex::Literal("product"), method_23509, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_23020), Reflex::Literal("refCore"), method_23510, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("isNull"), method_23511, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("isNonnull"), method_23512, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("operator!"), operator_23513, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4974), Reflex::Literal("id"), method_23514, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_20128), Reflex::Literal("productGetter"), method_23515, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("hasCache"), method_23516, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("hasProductCache"), method_23517, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("isAvailable"), method_23518, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("isTransient"), method_23519, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_37715), Reflex::Literal("swap"), method_23520, 0, "other", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_89), Reflex::Literal("Class_Version"), method_23521, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC);
}
//------Stub functions for class Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>, std::vector<float, std::allocator<float> >, edm::RefToBase<reco::Jet>, unsigned int, edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>, float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>, std::vector<float, std::allocator<float> >, edm::RefToBase<reco::Jet>, unsigned int, edm::helper::AssociationIdenticalKeyReference>, std::pair<edm::RefToBase<reco::Jet>, float> > > -------------------------------
static  void operator_24119( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >*)o)->operator=)(*(const ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >*)arg[0]);
  else   (((::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >*)o)->operator=)(*(const ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >*)arg[0]);
}

static void constructor_24120( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >(*(const ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >*)arg[0]);
  else ::new(mem) ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >(*(const ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >*)arg[0]);
}

static void constructor_24121( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >();
  else ::new(mem) ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >();
}

static void constructor_24122( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if ( arg.size() == 2 ) {
    if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >(*(const ::edm::Handle<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)arg[0],
      *(unsigned int*)arg[1]);
  else ::new(mem) ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >(*(const ::edm::Handle<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)arg[0],
      *(unsigned int*)arg[1]);
  }
  else if ( arg.size() == 3 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >(*(const ::edm::Handle<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)arg[0],
      *(unsigned int*)arg[1],
      *(bool*)arg[2]);
  else ::new(mem) ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >(*(const ::edm::Handle<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)arg[0],
      *(unsigned int*)arg[1],
      *(bool*)arg[2]);
  }
}

static void constructor_24123( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if ( arg.size() == 2 ) {
    if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >(*(const ::edm::OrphanHandle<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)arg[0],
      *(unsigned int*)arg[1]);
  else ::new(mem) ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >(*(const ::edm::OrphanHandle<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)arg[0],
      *(unsigned int*)arg[1]);
  }
  else if ( arg.size() == 3 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >(*(const ::edm::OrphanHandle<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)arg[0],
      *(unsigned int*)arg[1],
      *(bool*)arg[2]);
  else ::new(mem) ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >(*(const ::edm::OrphanHandle<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)arg[0],
      *(unsigned int*)arg[1],
      *(bool*)arg[2]);
  }
}

static void constructor_24124( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if ( arg.size() == 2 ) {
    if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >(*(const ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >*)arg[0],
      *(unsigned int*)arg[1]);
  else ::new(mem) ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >(*(const ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >*)arg[0],
      *(unsigned int*)arg[1]);
  }
  else if ( arg.size() == 3 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >(*(const ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >*)arg[0],
      *(unsigned int*)arg[1],
      *(bool*)arg[2]);
  else ::new(mem) ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >(*(const ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >*)arg[0],
      *(unsigned int*)arg[1],
      *(bool*)arg[2]);
  }
}

static void constructor_24125( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if ( arg.size() == 2 ) {
    if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >((const ::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>*)arg[0],
      *(unsigned int*)arg[1]);
  else ::new(mem) ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >((const ::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>*)arg[0],
      *(unsigned int*)arg[1]);
  }
  else if ( arg.size() == 3 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >((const ::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>*)arg[0],
      *(unsigned int*)arg[1],
      *(bool*)arg[2]);
  else ::new(mem) ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >((const ::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>*)arg[0],
      *(unsigned int*)arg[1],
      *(bool*)arg[2]);
  }
}

static void constructor_24126( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if ( arg.size() == 2 ) {
    if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >(*(const ::edm::TestHandle<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)arg[0],
      *(unsigned int*)arg[1]);
  else ::new(mem) ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >(*(const ::edm::TestHandle<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)arg[0],
      *(unsigned int*)arg[1]);
  }
  else if ( arg.size() == 3 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >(*(const ::edm::TestHandle<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)arg[0],
      *(unsigned int*)arg[1],
      *(bool*)arg[2]);
  else ::new(mem) ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >(*(const ::edm::TestHandle<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)arg[0],
      *(unsigned int*)arg[1],
      *(bool*)arg[2]);
  }
}

static void constructor_24127( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >(*(const ::edm::ProductID*)arg[0],
      *(unsigned int*)arg[1],
      (const ::edm::EDProductGetter*)arg[2]);
  else ::new(mem) ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >(*(const ::edm::ProductID*)arg[0],
      *(unsigned int*)arg[1],
      (const ::edm::EDProductGetter*)arg[2]);
}

static void constructor_24128( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >(*(const ::edm::ProductID*)arg[0],
      (const ::std::pair<edm::RefToBase<reco::Jet>,float>*)arg[1],
      *(unsigned int*)arg[2],
      (const ::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>*)arg[3]);
  else ::new(mem) ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >(*(const ::edm::ProductID*)arg[0],
      (const ::std::pair<edm::RefToBase<reco::Jet>,float>*)arg[1],
      *(unsigned int*)arg[2],
      (const ::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>*)arg[3]);
}

static void constructor_24129( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >(*(const ::edm::ProductID*)arg[0]);
  else ::new(mem) ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >(*(const ::edm::ProductID*)arg[0]);
}

static void constructor_24130( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >(*(const ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)arg[0],
      *(unsigned int*)arg[1]);
  else ::new(mem) ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >(*(const ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)arg[0],
      *(unsigned int*)arg[1]);
}

static void destructor_24131(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >*)o)->::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >::~Ref)();
}
static  void operator_24132( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >*)o)->operator*)();
  else   (((const ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >*)o)->operator*)();
}

static  void operator_24133( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >*)o)->operator->)());
  else   (((const ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >*)o)->operator->)();
}

static  void method_24134( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >*)o)->get)());
  else   (((const ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >*)o)->get)();
}

static  void method_24135( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >*)o)->isNull)());
  else   (((const ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >*)o)->isNull)();
}

static  void method_24136( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >*)o)->isNonnull)());
  else   (((const ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >*)o)->isNonnull)();
}

static  void operator_24137( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >*)o)->operator!)());
  else   (((const ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >*)o)->operator!)();
}

static  void method_24138( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::ProductID)((((const ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >*)o)->id)());
  else   (((const ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >*)o)->id)();
}

static  void method_24139( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >*)o)->productGetter)());
  else   (((const ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >*)o)->productGetter)();
}

static  void method_24140( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >*)o)->product)());
  else   (((const ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >*)o)->product)();
}

static  void method_24141( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (unsigned int)((((const ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >*)o)->key)());
  else   (((const ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >*)o)->key)();
}

static  void method_24142( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (unsigned int)((((const ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >*)o)->index)());
  else   (((const ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >*)o)->index)();
}

static  void method_24143( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >*)o)->hasProductCache)());
  else   (((const ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >*)o)->hasProductCache)();
}

static  void method_24144( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >*)o)->isAvailable)());
  else   (((const ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >*)o)->isAvailable)();
}

static  void method_24145( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >*)o)->isTransient)());
  else   (((const ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >*)o)->isTransient)();
}

static  void method_24146( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >*)o)->refCore)();
  else   (((const ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >*)o)->refCore)();
}

static  void method_24147( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (short)((((::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >*)o)->Class_Version)());
  else   (((::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >*)o)->Class_Version)();
}

static void constructor_24148( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >(*(const ::edm::RefCore*)arg[0],
      *(const unsigned int*)arg[1]);
  else ::new(mem) ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >(*(const ::edm::RefCore*)arg[0],
      *(const unsigned int*)arg[1]);
}

static void method_newdel_4920( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>, std::vector<float, std::allocator<float> >, edm::RefToBase<reco::Jet>, unsigned int, edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>, float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>, std::vector<float, std::allocator<float> >, edm::RefToBase<reco::Jet>, unsigned int, edm::helper::AssociationIdenticalKeyReference>, std::pair<edm::RefToBase<reco::Jet>, float> > > -------------------------------
void __edm__Ref_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_float__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__float__edm__refhelper__FindUsingAdvance_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_float__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__float_s_s__db_datamem(Reflex::Class*);
void __edm__Ref_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_float__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__float__edm__refhelper__FindUsingAdvance_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_float__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__float_s_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__Ref_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_float__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__float__edm__refhelper__FindUsingAdvance_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_float__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__float_s_s__datamem_bld(&__edm__Ref_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_float__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__float__edm__refhelper__FindUsingAdvance_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_float__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__float_s_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__Ref_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_float__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__float__edm__refhelper__FindUsingAdvance_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_float__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__float_s_s__funcmem_bld(&__edm__Ref_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_float__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__float__edm__refhelper__FindUsingAdvance_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_float__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__float_s_s__db_funcmem);
void __edm__Ref_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_float__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__float__edm__refhelper__FindUsingAdvance_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_float__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__float_s_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >"), typeid(::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >), sizeof(::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("ClassVersion"), ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >::Class_Version())
  .AddTypedef(type_21784, Reflex::Literal("edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >::VF"))
  .AddTypedef(type_21783, Reflex::Literal("edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >::VBF"))
  .AddTypedef(type_4860, Reflex::Literal("edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >::product_type"))
  .AddTypedef(type_2911, Reflex::Literal("edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >::value_type"))
  .AddTypedef(type_2911c, Reflex::Literal("edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >::element_type"))
  .AddTypedef(type_20335, Reflex::Literal("edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >::finder_type"))
  .AddTypedef(type_219, Reflex::Literal("edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >::argument_type"))
  .AddTypedef(type_219, Reflex::Literal("edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > >::key_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_37802, type_37015), Reflex::Literal("operator="), operator_24119, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_37015), Reflex::Literal("Ref"), constructor_24120, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("Ref"), constructor_24121, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_37717, type_219, type_1569), Reflex::Literal("Ref"), constructor_24122, 0, "handle;itemKey;setNow=true", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_37718, type_219, type_1569), Reflex::Literal("Ref"), constructor_24123, 0, "handle;itemKey;setNow=true", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_37014, type_219, type_1569), Reflex::Literal("Ref"), constructor_24124, 0, "refvector;itemKey;setNow=true", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_37016, type_219, type_1569), Reflex::Literal("Ref"), constructor_24125, 0, "iProduct;iItemKey;iSetNow=true", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_37719, type_219, type_1569), Reflex::Literal("Ref"), constructor_24126, 0, "handle;itemKey;setNow=true", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_20008, type_219, type_20128), Reflex::Literal("Ref"), constructor_24127, 0, "productID;itemKey;prodGetter", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_20008, type_15004, type_219, type_37016), Reflex::Literal("Ref"), constructor_24128, 0, "iProductID;;iItemKey;iProduct", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_20008), Reflex::Literal("Ref"), constructor_24129, 0, "iId", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_37716, type_219), Reflex::Literal("Ref"), constructor_24130, 0, "refProd;itemKey", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~Ref"), destructor_24131, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_23020, type_10959), Reflex::Literal("Ref"), constructor_24148, 0, "iRefCore;iKey", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_4920, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__Ref_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_float__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__float__edm__refhelper__FindUsingAdvance_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_float__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__float_s_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__Ref_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_float__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__float__edm__refhelper__FindUsingAdvance_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_float__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__float_s_s__funcmem_bld);
}

//------Delayed data member builder for class Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>, std::vector<float, std::allocator<float> >, edm::RefToBase<reco::Jet>, unsigned int, edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>, float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>, std::vector<float, std::allocator<float> >, edm::RefToBase<reco::Jet>, unsigned int, edm::helper::AssociationIdenticalKeyReference>, std::pair<edm::RefToBase<reco::Jet>, float> > > -------------------
void __edm__Ref_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_float__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__float__edm__refhelper__FindUsingAdvance_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_float__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__float_s_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_4847, Reflex::Literal("product_"), OffsetOf(__shadow__::__edm__Ref_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_float__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__float__edm__refhelper__FindUsingAdvance_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_float__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__float_s_s_, product_), ::Reflex::PRIVATE | ::Reflex::MUTABLE)
  .AddDataMember(type_219, Reflex::Literal("index_"), OffsetOf(__shadow__::__edm__Ref_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_float__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__float__edm__refhelper__FindUsingAdvance_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_float__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__float_s_s_, index_), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>, std::vector<float, std::allocator<float> >, edm::RefToBase<reco::Jet>, unsigned int, edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>, float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>, std::vector<float, std::allocator<float> >, edm::RefToBase<reco::Jet>, unsigned int, edm::helper::AssociationIdenticalKeyReference>, std::pair<edm::RefToBase<reco::Jet>, float> > > -------------------
void __edm__Ref_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_float__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__float__edm__refhelper__FindUsingAdvance_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_float__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__float_s_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_15008), Reflex::Literal("operator*"), operator_24132, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_15004), Reflex::Literal("operator->"), operator_24133, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_15004), Reflex::Literal("get"), method_24134, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("isNull"), method_24135, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("isNonnull"), method_24136, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("operator!"), operator_24137, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4974), Reflex::Literal("id"), method_24138, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_20128), Reflex::Literal("productGetter"), method_24139, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_37016), Reflex::Literal("product"), method_24140, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_219), Reflex::Literal("key"), method_24141, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_219), Reflex::Literal("index"), method_24142, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("hasProductCache"), method_24143, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("isAvailable"), method_24144, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("isTransient"), method_24145, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_23020), Reflex::Literal("refCore"), method_24146, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_89), Reflex::Literal("Class_Version"), method_24147, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC);
}
//------Stub functions for class RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>, std::vector<reco::JetExtendedAssociation::JetExtendedData, std::allocator<reco::JetExtendedAssociation::JetExtendedData> >, edm::RefToBase<reco::Jet>, unsigned int, edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>, reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>, std::vector<reco::JetExtendedAssociation::JetExtendedData, std::allocator<reco::JetExtendedAssociation::JetExtendedData> >, edm::RefToBase<reco::Jet>, unsigned int, edm::helper::AssociationIdenticalKeyReference>, std::pair<edm::RefToBase<reco::Jet>, reco::JetExtendedAssociation::JetExtendedData> > > -------------------------------
static void destructor_21967(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >*)o)->::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >::~RefVector)();
}
static void constructor_21968( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >();
  else ::new(mem) ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >();
}

static void constructor_21969( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >(*(const ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >*)arg[0]);
  else ::new(mem) ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >(*(const ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >*)arg[0]);
}

static void constructor_21970( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >(*(const ::edm::ProductID*)arg[0]);
  else ::new(mem) ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >(*(const ::edm::ProductID*)arg[0]);
}

static  void method_21971( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >*)o)->push_back)(*(const ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >*)arg[0]);
}

static  void operator_21972( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >)((((const ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >*)o)->operator[])(*(::std::size_t*)arg[0]));
  else   (((const ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >*)o)->operator[])(*(::std::size_t*)arg[0]);
}

static  void method_21973( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >)((((const ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >*)o)->at)(*(::std::size_t*)arg[0]));
  else   (((const ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >*)o)->at)(*(::std::size_t*)arg[0]);
}

static  void method_21974( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >*)o)->refVector)();
  else   (((const ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >*)o)->refVector)();
}

static  void method_21975( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >*)o)->empty)());
  else   (((const ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >*)o)->empty)();
}

static  void method_21976( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >*)o)->size)());
  else   (((const ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >*)o)->size)();
}

static  void method_21977( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >*)o)->capacity)());
  else   (((const ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >*)o)->capacity)();
}

static  void method_21978( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >*)o)->reserve)(*(::std::size_t*)arg[0]);
}

static  void method_21979( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::RefVectorIterator<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >)((((const ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >*)o)->begin)());
  else   (((const ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >*)o)->begin)();
}

static  void method_21980( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::RefVectorIterator<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >)((((const ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >*)o)->end)());
  else   (((const ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >*)o)->end)();
}

static  void method_21981( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::ProductID)((((const ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >*)o)->id)());
  else   (((const ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >*)o)->id)();
}

static  void method_21982( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >*)o)->productGetter)());
  else   (((const ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >*)o)->productGetter)();
}

static  void method_21983( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >*)o)->isNull)());
  else   (((const ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >*)o)->isNull)();
}

static  void method_21984( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >*)o)->isNonnull)());
  else   (((const ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >*)o)->isNonnull)();
}

static  void operator_21985( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >*)o)->operator!)());
  else   (((const ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >*)o)->operator!)();
}

static  void method_21986( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >*)o)->product)());
  else   (((const ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >*)o)->product)();
}

static  void method_21987( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >*)o)->isAvailable)());
  else   (((const ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >*)o)->isAvailable)();
}

static  void method_21988( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >*)o)->isTransient)());
  else   (((const ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >*)o)->isTransient)();
}

static  void method_21989( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (edm::RefVectorIterator<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >)((((::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >*)o)->erase)(*(const ::edm::RefVectorIterator<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >*)arg[0]));
  else   (((::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >*)o)->erase)(*(const ::edm::RefVectorIterator<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >*)arg[0]);
}

static  void method_21990( void*, void* o, const std::vector<void*>&, void*)
{
  (((::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >*)o)->clear)();
}

static  void method_21991( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >*)o)->swap)(*(::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >*)arg[0]);
}

static  void operator_21992( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >*)o)->operator=)(*(const ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >*)arg[0]);
  else   (((::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >*)o)->operator=)(*(const ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >*)arg[0]);
}

static  void method_21993( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >*)o)->hasProductCache)());
  else   (((const ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >*)o)->hasProductCache)();
}

static  void method_21994( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >*)o)->fillView)(*(const ::edm::ProductID*)arg[0],
    *(::std::vector<const void*>*)arg[1],
    *(::edm::helper_vector*)arg[2]);
}

static  void method_21995( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (short)((((::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >*)o)->Class_Version)());
  else   (((::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >*)o)->Class_Version)();
}

static void method_newdel_4613( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>, std::vector<reco::JetExtendedAssociation::JetExtendedData, std::allocator<reco::JetExtendedAssociation::JetExtendedData> >, edm::RefToBase<reco::Jet>, unsigned int, edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>, reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>, std::vector<reco::JetExtendedAssociation::JetExtendedData, std::allocator<reco::JetExtendedAssociation::JetExtendedData> >, edm::RefToBase<reco::Jet>, unsigned int, edm::helper::AssociationIdenticalKeyReference>, std::pair<edm::RefToBase<reco::Jet>, reco::JetExtendedAssociation::JetExtendedData> > > -------------------------------
void __edm__RefVector_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_reco__JetExtendedAssociation__JetExtendedData__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__reco__JetExtendedAssociation__JetExtendedData__edm__refhelper__FindUsingAdvance_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_reco__JetExtendedAssociation__JetExtendedData__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__reco__JetExtendedAssociation__JetExtendedData_s_s__db_datamem(Reflex::Class*);
void __edm__RefVector_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_reco__JetExtendedAssociation__JetExtendedData__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__reco__JetExtendedAssociation__JetExtendedData__edm__refhelper__FindUsingAdvance_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_reco__JetExtendedAssociation__JetExtendedData__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__reco__JetExtendedAssociation__JetExtendedData_s_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__RefVector_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_reco__JetExtendedAssociation__JetExtendedData__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__reco__JetExtendedAssociation__JetExtendedData__edm__refhelper__FindUsingAdvance_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_reco__JetExtendedAssociation__JetExtendedData__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__reco__JetExtendedAssociation__JetExtendedData_s_s__datamem_bld(&__edm__RefVector_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_reco__JetExtendedAssociation__JetExtendedData__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__reco__JetExtendedAssociation__JetExtendedData__edm__refhelper__FindUsingAdvance_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_reco__JetExtendedAssociation__JetExtendedData__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__reco__JetExtendedAssociation__JetExtendedData_s_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__RefVector_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_reco__JetExtendedAssociation__JetExtendedData__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__reco__JetExtendedAssociation__JetExtendedData__edm__refhelper__FindUsingAdvance_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_reco__JetExtendedAssociation__JetExtendedData__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__reco__JetExtendedAssociation__JetExtendedData_s_s__funcmem_bld(&__edm__RefVector_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_reco__JetExtendedAssociation__JetExtendedData__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__reco__JetExtendedAssociation__JetExtendedData__edm__refhelper__FindUsingAdvance_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_reco__JetExtendedAssociation__JetExtendedData__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__reco__JetExtendedAssociation__JetExtendedData_s_s__db_funcmem);
void __edm__RefVector_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_reco__JetExtendedAssociation__JetExtendedData__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__reco__JetExtendedAssociation__JetExtendedData__edm__refhelper__FindUsingAdvance_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_reco__JetExtendedAssociation__JetExtendedData__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__reco__JetExtendedAssociation__JetExtendedData_s_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >"), typeid(::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >), sizeof(::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("ClassVersion"), ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >::Class_Version())
  .AddTypedef(type_4858, Reflex::Literal("edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >::collection_type"))
  .AddTypedef(type_2888, Reflex::Literal("edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >::member_type"))
  .AddTypedef(type_20311, Reflex::Literal("edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >::finder_type"))
  .AddTypedef(type_4551, Reflex::Literal("edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >::iterator"))
  .AddTypedef(type_4551, Reflex::Literal("edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >::const_iterator"))
  .AddTypedef(type_4918, Reflex::Literal("edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >::value_type"))
  .AddTypedef(type_4918c, Reflex::Literal("edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >::const_reference"))
  .AddTypedef(type_4918c, Reflex::Literal("edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >::reference"))
  .AddTypedef(type_219, Reflex::Literal("edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >::key_type"))
  .AddTypedef(type_2951, Reflex::Literal("edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >::KeyVec"))
  .AddTypedef(type_3234, Reflex::Literal("edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >::size_type"))
  .AddTypedef(type_4004, Reflex::Literal("edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >::contents_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~RefVector"), destructor_21967, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::DESTRUCTOR )
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("RefVector"), constructor_21968, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_37002), Reflex::Literal("RefVector"), constructor_21969, 0, "rh", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_20008), Reflex::Literal("RefVector"), constructor_21970, 0, "iId", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_4613, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__RefVector_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_reco__JetExtendedAssociation__JetExtendedData__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__reco__JetExtendedAssociation__JetExtendedData__edm__refhelper__FindUsingAdvance_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_reco__JetExtendedAssociation__JetExtendedData__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__reco__JetExtendedAssociation__JetExtendedData_s_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__RefVector_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_reco__JetExtendedAssociation__JetExtendedData__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__reco__JetExtendedAssociation__JetExtendedData__edm__refhelper__FindUsingAdvance_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_reco__JetExtendedAssociation__JetExtendedData__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__reco__JetExtendedAssociation__JetExtendedData_s_s__funcmem_bld);
}

//------Delayed data member builder for class RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>, std::vector<reco::JetExtendedAssociation::JetExtendedData, std::allocator<reco::JetExtendedAssociation::JetExtendedData> >, edm::RefToBase<reco::Jet>, unsigned int, edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>, reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>, std::vector<reco::JetExtendedAssociation::JetExtendedData, std::allocator<reco::JetExtendedAssociation::JetExtendedData> >, edm::RefToBase<reco::Jet>, unsigned int, edm::helper::AssociationIdenticalKeyReference>, std::pair<edm::RefToBase<reco::Jet>, reco::JetExtendedAssociation::JetExtendedData> > > -------------------
void __edm__RefVector_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_reco__JetExtendedAssociation__JetExtendedData__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__reco__JetExtendedAssociation__JetExtendedData__edm__refhelper__FindUsingAdvance_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_reco__JetExtendedAssociation__JetExtendedData__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__reco__JetExtendedAssociation__JetExtendedData_s_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_4004, Reflex::Literal("refVector_"), OffsetOf(__shadow__::__edm__RefVector_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_reco__JetExtendedAssociation__JetExtendedData__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__reco__JetExtendedAssociation__JetExtendedData__edm__refhelper__FindUsingAdvance_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_reco__JetExtendedAssociation__JetExtendedData__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__reco__JetExtendedAssociation__JetExtendedData_s_s_, refVector_), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>, std::vector<reco::JetExtendedAssociation::JetExtendedData, std::allocator<reco::JetExtendedAssociation::JetExtendedData> >, edm::RefToBase<reco::Jet>, unsigned int, edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>, reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>, std::vector<reco::JetExtendedAssociation::JetExtendedData, std::allocator<reco::JetExtendedAssociation::JetExtendedData> >, edm::RefToBase<reco::Jet>, unsigned int, edm::helper::AssociationIdenticalKeyReference>, std::pair<edm::RefToBase<reco::Jet>, reco::JetExtendedAssociation::JetExtendedData> > > -------------------
void __edm__RefVector_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_reco__JetExtendedAssociation__JetExtendedData__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__reco__JetExtendedAssociation__JetExtendedData__edm__refhelper__FindUsingAdvance_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_reco__JetExtendedAssociation__JetExtendedData__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__reco__JetExtendedAssociation__JetExtendedData_s_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_37003), Reflex::Literal("push_back"), method_21971, 0, "ref", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4918c, type_3234), Reflex::Literal("operator[]"), operator_21972, 0, "idx", ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4918c, type_3234), Reflex::Literal("at"), method_21973, 0, "idx", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_20127), Reflex::Literal("refVector"), method_21974, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("empty"), method_21975, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3234), Reflex::Literal("size"), method_21976, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3234), Reflex::Literal("capacity"), method_21977, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_3234), Reflex::Literal("reserve"), method_21978, 0, "n", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4551), Reflex::Literal("begin"), method_21979, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4551), Reflex::Literal("end"), method_21980, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4974), Reflex::Literal("id"), method_21981, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_20128), Reflex::Literal("productGetter"), method_21982, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("isNull"), method_21983, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("isNonnull"), method_21984, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("operator!"), operator_21985, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_37004), Reflex::Literal("product"), method_21986, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("isAvailable"), method_21987, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("isTransient"), method_21988, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4551, type_37005), Reflex::Literal("erase"), method_21989, 0, "pos", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698), Reflex::Literal("clear"), method_21990, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_37006), Reflex::Literal("swap"), method_21991, 0, "other", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_37006, type_37002), Reflex::Literal("operator="), operator_21992, 0, "rhs", ::Reflex::PUBLIC | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("hasProductCache"), method_21993, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_20008, type_20132, type_20133), Reflex::Literal("fillView"), method_21994, 0, ";pointers;helpers", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_89), Reflex::Literal("Class_Version"), method_21995, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC);
}
//------Stub functions for class vector<reco::JetExtendedAssociation::JetExtendedData,std::allocator<reco::JetExtendedAssociation::JetExtendedData> > -------------------------------
static void constructor_14822( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<reco::JetExtendedAssociation::JetExtendedData>();
  else ::new(mem) ::std::vector<reco::JetExtendedAssociation::JetExtendedData>();
}

static void constructor_14823( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<reco::JetExtendedAssociation::JetExtendedData>(*(const ::std::allocator<reco::JetExtendedAssociation::JetExtendedData>*)arg[0]);
  else ::new(mem) ::std::vector<reco::JetExtendedAssociation::JetExtendedData>(*(const ::std::allocator<reco::JetExtendedAssociation::JetExtendedData>*)arg[0]);
}

static void constructor_14824( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if ( arg.size() == 1 ) {
    if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<reco::JetExtendedAssociation::JetExtendedData>(*(::std::size_t*)arg[0]);
  else ::new(mem) ::std::vector<reco::JetExtendedAssociation::JetExtendedData>(*(::std::size_t*)arg[0]);
  }
  else if ( arg.size() == 2 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<reco::JetExtendedAssociation::JetExtendedData>(*(::std::size_t*)arg[0],
      *(const ::reco::JetExtendedAssociation::JetExtendedData*)arg[1]);
  else ::new(mem) ::std::vector<reco::JetExtendedAssociation::JetExtendedData>(*(::std::size_t*)arg[0],
      *(const ::reco::JetExtendedAssociation::JetExtendedData*)arg[1]);
  }
  else if ( arg.size() == 3 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<reco::JetExtendedAssociation::JetExtendedData>(*(::std::size_t*)arg[0],
      *(const ::reco::JetExtendedAssociation::JetExtendedData*)arg[1],
      *(const ::std::allocator<reco::JetExtendedAssociation::JetExtendedData>*)arg[2]);
  else ::new(mem) ::std::vector<reco::JetExtendedAssociation::JetExtendedData>(*(::std::size_t*)arg[0],
      *(const ::reco::JetExtendedAssociation::JetExtendedData*)arg[1],
      *(const ::std::allocator<reco::JetExtendedAssociation::JetExtendedData>*)arg[2]);
  }
}

static void constructor_14825( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<reco::JetExtendedAssociation::JetExtendedData>(*(const ::std::vector<reco::JetExtendedAssociation::JetExtendedData>*)arg[0]);
  else ::new(mem) ::std::vector<reco::JetExtendedAssociation::JetExtendedData>(*(const ::std::vector<reco::JetExtendedAssociation::JetExtendedData>*)arg[0]);
}

static void destructor_14826(void*, void * o, const std::vector<void*>&, void *) {
(((::std::vector<reco::JetExtendedAssociation::JetExtendedData>*)o)->::std::vector<reco::JetExtendedAssociation::JetExtendedData>::~vector)();
}
static  void operator_14827( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<reco::JetExtendedAssociation::JetExtendedData>*)o)->operator=)(*(const ::std::vector<reco::JetExtendedAssociation::JetExtendedData>*)arg[0]);
  else   (((::std::vector<reco::JetExtendedAssociation::JetExtendedData>*)o)->operator=)(*(const ::std::vector<reco::JetExtendedAssociation::JetExtendedData>*)arg[0]);
}

static  void method_14828( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<reco::JetExtendedAssociation::JetExtendedData>*)o)->assign)(*(::std::size_t*)arg[0],
    *(const ::reco::JetExtendedAssociation::JetExtendedData*)arg[1]);
}

static  void method_14829( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<reco::JetExtendedAssociation::JetExtendedData*,std::vector<reco::JetExtendedAssociation::JetExtendedData> >)((((::std::vector<reco::JetExtendedAssociation::JetExtendedData>*)o)->begin)());
  else   (((::std::vector<reco::JetExtendedAssociation::JetExtendedData>*)o)->begin)();
}

static  void method_14830( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<const reco::JetExtendedAssociation::JetExtendedData*,std::vector<reco::JetExtendedAssociation::JetExtendedData> >)((((const ::std::vector<reco::JetExtendedAssociation::JetExtendedData>*)o)->begin)());
  else   (((const ::std::vector<reco::JetExtendedAssociation::JetExtendedData>*)o)->begin)();
}

static  void method_14831( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<reco::JetExtendedAssociation::JetExtendedData*,std::vector<reco::JetExtendedAssociation::JetExtendedData> >)((((::std::vector<reco::JetExtendedAssociation::JetExtendedData>*)o)->end)());
  else   (((::std::vector<reco::JetExtendedAssociation::JetExtendedData>*)o)->end)();
}

static  void method_14832( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<const reco::JetExtendedAssociation::JetExtendedData*,std::vector<reco::JetExtendedAssociation::JetExtendedData> >)((((const ::std::vector<reco::JetExtendedAssociation::JetExtendedData>*)o)->end)());
  else   (((const ::std::vector<reco::JetExtendedAssociation::JetExtendedData>*)o)->end)();
}

static  void method_14837( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::std::vector<reco::JetExtendedAssociation::JetExtendedData>*)o)->size)());
  else   (((const ::std::vector<reco::JetExtendedAssociation::JetExtendedData>*)o)->size)();
}

static  void method_14838( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::std::vector<reco::JetExtendedAssociation::JetExtendedData>*)o)->max_size)());
  else   (((const ::std::vector<reco::JetExtendedAssociation::JetExtendedData>*)o)->max_size)();
}

static  void method_14839( void*, void* o, const std::vector<void*>& arg, void*)
{
  if ( arg.size() == 1 ) {
    (((::std::vector<reco::JetExtendedAssociation::JetExtendedData>*)o)->resize)(*(::std::size_t*)arg[0]);
  }
  else if ( arg.size() == 2 ) { 
    (((::std::vector<reco::JetExtendedAssociation::JetExtendedData>*)o)->resize)(*(::std::size_t*)arg[0],
      *(::reco::JetExtendedAssociation::JetExtendedData*)arg[1]);
  }
}

static  void method_14840( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::std::vector<reco::JetExtendedAssociation::JetExtendedData>*)o)->capacity)());
  else   (((const ::std::vector<reco::JetExtendedAssociation::JetExtendedData>*)o)->capacity)();
}

static  void method_14841( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::std::vector<reco::JetExtendedAssociation::JetExtendedData>*)o)->empty)());
  else   (((const ::std::vector<reco::JetExtendedAssociation::JetExtendedData>*)o)->empty)();
}

static  void method_14842( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<reco::JetExtendedAssociation::JetExtendedData>*)o)->reserve)(*(::std::size_t*)arg[0]);
}

static  void operator_14843( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<reco::JetExtendedAssociation::JetExtendedData>*)o)->operator[])(*(::std::size_t*)arg[0]);
  else   (((::std::vector<reco::JetExtendedAssociation::JetExtendedData>*)o)->operator[])(*(::std::size_t*)arg[0]);
}

static  void operator_14844( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<reco::JetExtendedAssociation::JetExtendedData>*)o)->operator[])(*(::std::size_t*)arg[0]);
  else   (((const ::std::vector<reco::JetExtendedAssociation::JetExtendedData>*)o)->operator[])(*(::std::size_t*)arg[0]);
}

static  void method_14846( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<reco::JetExtendedAssociation::JetExtendedData>*)o)->at)(*(::std::size_t*)arg[0]);
  else   (((::std::vector<reco::JetExtendedAssociation::JetExtendedData>*)o)->at)(*(::std::size_t*)arg[0]);
}

static  void method_14847( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<reco::JetExtendedAssociation::JetExtendedData>*)o)->at)(*(::std::size_t*)arg[0]);
  else   (((const ::std::vector<reco::JetExtendedAssociation::JetExtendedData>*)o)->at)(*(::std::size_t*)arg[0]);
}

static  void method_14848( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<reco::JetExtendedAssociation::JetExtendedData>*)o)->front)();
  else   (((::std::vector<reco::JetExtendedAssociation::JetExtendedData>*)o)->front)();
}

static  void method_14849( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<reco::JetExtendedAssociation::JetExtendedData>*)o)->front)();
  else   (((const ::std::vector<reco::JetExtendedAssociation::JetExtendedData>*)o)->front)();
}

static  void method_14850( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<reco::JetExtendedAssociation::JetExtendedData>*)o)->back)();
  else   (((::std::vector<reco::JetExtendedAssociation::JetExtendedData>*)o)->back)();
}

static  void method_14851( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<reco::JetExtendedAssociation::JetExtendedData>*)o)->back)();
  else   (((const ::std::vector<reco::JetExtendedAssociation::JetExtendedData>*)o)->back)();
}

static  void method_14852( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((::std::vector<reco::JetExtendedAssociation::JetExtendedData>*)o)->data)());
  else   (((::std::vector<reco::JetExtendedAssociation::JetExtendedData>*)o)->data)();
}

static  void method_14853( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::std::vector<reco::JetExtendedAssociation::JetExtendedData>*)o)->data)());
  else   (((const ::std::vector<reco::JetExtendedAssociation::JetExtendedData>*)o)->data)();
}

static  void method_14854( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<reco::JetExtendedAssociation::JetExtendedData>*)o)->push_back)(*(const ::reco::JetExtendedAssociation::JetExtendedData*)arg[0]);
}

static  void method_14855( void*, void* o, const std::vector<void*>&, void*)
{
  (((::std::vector<reco::JetExtendedAssociation::JetExtendedData>*)o)->pop_back)();
}

static  void method_14856( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<reco::JetExtendedAssociation::JetExtendedData*,std::vector<reco::JetExtendedAssociation::JetExtendedData> >)((((::std::vector<reco::JetExtendedAssociation::JetExtendedData>*)o)->insert)(*(::__gnu_cxx::__normal_iterator<reco::JetExtendedAssociation::JetExtendedData*,std::vector<reco::JetExtendedAssociation::JetExtendedData> >*)arg[0],
    *(const ::reco::JetExtendedAssociation::JetExtendedData*)arg[1]));
  else   (((::std::vector<reco::JetExtendedAssociation::JetExtendedData>*)o)->insert)(*(::__gnu_cxx::__normal_iterator<reco::JetExtendedAssociation::JetExtendedData*,std::vector<reco::JetExtendedAssociation::JetExtendedData> >*)arg[0],
    *(const ::reco::JetExtendedAssociation::JetExtendedData*)arg[1]);
}

static  void method_14857( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<reco::JetExtendedAssociation::JetExtendedData>*)o)->insert)(*(::__gnu_cxx::__normal_iterator<reco::JetExtendedAssociation::JetExtendedData*,std::vector<reco::JetExtendedAssociation::JetExtendedData> >*)arg[0],
    *(::std::size_t*)arg[1],
    *(const ::reco::JetExtendedAssociation::JetExtendedData*)arg[2]);
}

static  void method_14858( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<reco::JetExtendedAssociation::JetExtendedData*,std::vector<reco::JetExtendedAssociation::JetExtendedData> >)((((::std::vector<reco::JetExtendedAssociation::JetExtendedData>*)o)->erase)(*(::__gnu_cxx::__normal_iterator<reco::JetExtendedAssociation::JetExtendedData*,std::vector<reco::JetExtendedAssociation::JetExtendedData> >*)arg[0]));
  else   (((::std::vector<reco::JetExtendedAssociation::JetExtendedData>*)o)->erase)(*(::__gnu_cxx::__normal_iterator<reco::JetExtendedAssociation::JetExtendedData*,std::vector<reco::JetExtendedAssociation::JetExtendedData> >*)arg[0]);
}

static  void method_14859( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<reco::JetExtendedAssociation::JetExtendedData*,std::vector<reco::JetExtendedAssociation::JetExtendedData> >)((((::std::vector<reco::JetExtendedAssociation::JetExtendedData>*)o)->erase)(*(::__gnu_cxx::__normal_iterator<reco::JetExtendedAssociation::JetExtendedData*,std::vector<reco::JetExtendedAssociation::JetExtendedData> >*)arg[0],
    *(::__gnu_cxx::__normal_iterator<reco::JetExtendedAssociation::JetExtendedData*,std::vector<reco::JetExtendedAssociation::JetExtendedData> >*)arg[1]));
  else   (((::std::vector<reco::JetExtendedAssociation::JetExtendedData>*)o)->erase)(*(::__gnu_cxx::__normal_iterator<reco::JetExtendedAssociation::JetExtendedData*,std::vector<reco::JetExtendedAssociation::JetExtendedData> >*)arg[0],
    *(::__gnu_cxx::__normal_iterator<reco::JetExtendedAssociation::JetExtendedData*,std::vector<reco::JetExtendedAssociation::JetExtendedData> >*)arg[1]);
}

static  void method_14860( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<reco::JetExtendedAssociation::JetExtendedData>*)o)->swap)(*(::std::vector<reco::JetExtendedAssociation::JetExtendedData>*)arg[0]);
}

static  void method_14861( void*, void* o, const std::vector<void*>&, void*)
{
  (((::std::vector<reco::JetExtendedAssociation::JetExtendedData>*)o)->clear)();
}

static void method_newdel_2995( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::std::vector<reco::JetExtendedAssociation::JetExtendedData> >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::std::vector<reco::JetExtendedAssociation::JetExtendedData> >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::std::vector<reco::JetExtendedAssociation::JetExtendedData> >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::std::vector<reco::JetExtendedAssociation::JetExtendedData> >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::std::vector<reco::JetExtendedAssociation::JetExtendedData> >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

static void method_x75( void* retaddr, void*, const std::vector<void*>&, void*)
{
  typedef std::vector<std::pair< ::Reflex::Base, int> > Bases_t;
  static Bases_t s_bases;
  if ( !s_bases.size() ) {
    s_bases.push_back(std::make_pair(::Reflex::Base( ::Reflex::TypeBuilder(Reflex::Literal("std::_Vector_base<reco::JetExtendedAssociation::JetExtendedData,std::allocator<reco::JetExtendedAssociation::JetExtendedData> >")), ::Reflex::BaseOffset< ::std::vector<reco::JetExtendedAssociation::JetExtendedData>,::std::_Vector_base<reco::JetExtendedAssociation::JetExtendedData,std::allocator<reco::JetExtendedAssociation::JetExtendedData> > >::Get(),::Reflex::PROTECTED), 0));
  }
  if (retaddr) *(Bases_t**)retaddr = &s_bases;
}

static void method_x76( void* retaddr, void*, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**) retaddr = ::Reflex::Proxy< ::std::vector<reco::JetExtendedAssociation::JetExtendedData> >::Generate();
  else ::Reflex::Proxy< ::std::vector<reco::JetExtendedAssociation::JetExtendedData> >::Generate();
}

//------Dictionary for class vector<reco::JetExtendedAssociation::JetExtendedData,std::allocator<reco::JetExtendedAssociation::JetExtendedData> > -------------------------------
void __std__vector_reco__JetExtendedAssociation__JetExtendedData__db_datamem(Reflex::Class*);
void __std__vector_reco__JetExtendedAssociation__JetExtendedData__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __std__vector_reco__JetExtendedAssociation__JetExtendedData__datamem_bld(&__std__vector_reco__JetExtendedAssociation__JetExtendedData__db_datamem);
Reflex::GenreflexMemberBuilder __std__vector_reco__JetExtendedAssociation__JetExtendedData__funcmem_bld(&__std__vector_reco__JetExtendedAssociation__JetExtendedData__db_funcmem);
void __std__vector_reco__JetExtendedAssociation__JetExtendedData__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("std::vector<reco::JetExtendedAssociation::JetExtendedData>"), typeid(::std::vector<reco::JetExtendedAssociation::JetExtendedData>), sizeof(::std::vector<reco::JetExtendedAssociation::JetExtendedData>), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddBase(type_2493, ::Reflex::BaseOffset< ::std::vector<reco::JetExtendedAssociation::JetExtendedData>, ::std::_Vector_base<reco::JetExtendedAssociation::JetExtendedData,std::allocator<reco::JetExtendedAssociation::JetExtendedData> > >::Get(), ::Reflex::PROTECTED)
  .AddTypedef(type_12876, Reflex::Literal("std::vector<reco::JetExtendedAssociation::JetExtendedData>::_Alloc_value_type"))
  .AddTypedef(type_2493, Reflex::Literal("std::vector<reco::JetExtendedAssociation::JetExtendedData>::_Base"))
  .AddTypedef(type_3306, Reflex::Literal("std::vector<reco::JetExtendedAssociation::JetExtendedData>::_Tp_alloc_type"))
  .AddTypedef(type_8376, Reflex::Literal("std::vector<reco::JetExtendedAssociation::JetExtendedData>::_Alloc_traits"))
  .AddTypedef(type_12876, Reflex::Literal("std::vector<reco::JetExtendedAssociation::JetExtendedData>::value_type"))
  .AddTypedef(type_9789, Reflex::Literal("std::vector<reco::JetExtendedAssociation::JetExtendedData>::pointer"))
  .AddTypedef(type_14809, Reflex::Literal("std::vector<reco::JetExtendedAssociation::JetExtendedData>::const_pointer"))
  .AddTypedef(type_14811, Reflex::Literal("std::vector<reco::JetExtendedAssociation::JetExtendedData>::reference"))
  .AddTypedef(type_14813, Reflex::Literal("std::vector<reco::JetExtendedAssociation::JetExtendedData>::const_reference"))
  .AddTypedef(type_8236, Reflex::Literal("std::vector<reco::JetExtendedAssociation::JetExtendedData>::iterator"))
  .AddTypedef(type_8237, Reflex::Literal("std::vector<reco::JetExtendedAssociation::JetExtendedData>::const_iterator"))
  .AddTypedef(type_3509, Reflex::Literal("std::vector<reco::JetExtendedAssociation::JetExtendedData>::const_reverse_iterator"))
  .AddTypedef(type_3510, Reflex::Literal("std::vector<reco::JetExtendedAssociation::JetExtendedData>::reverse_iterator"))
  .AddTypedef(type_3234, Reflex::Literal("std::vector<reco::JetExtendedAssociation::JetExtendedData>::size_type"))
  .AddTypedef(type_3113, Reflex::Literal("std::vector<reco::JetExtendedAssociation::JetExtendedData>::difference_type"))
  .AddTypedef(type_3306, Reflex::Literal("std::vector<reco::JetExtendedAssociation::JetExtendedData>::allocator_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("vector"), constructor_14822, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_32635), Reflex::Literal("vector"), constructor_14823, 0, "__a", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_3234, type_14813, type_32635), Reflex::Literal("vector"), constructor_14824, 0, "__n;__value=_Tp();__a=_Alloc()", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_33814), Reflex::Literal("vector"), constructor_14825, 0, "__x", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~vector"), destructor_14826, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_2995, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getBasesTable"), method_x75, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddFunctionMember<void*(void)>(Reflex::Literal("createCollFuncTable"), method_x76, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandFunctionMemberBuilder(&__std__vector_reco__JetExtendedAssociation__JetExtendedData__funcmem_bld);
}

//------Delayed data member builder for class vector<reco::JetExtendedAssociation::JetExtendedData,std::allocator<reco::JetExtendedAssociation::JetExtendedData> > -------------------
void __std__vector_reco__JetExtendedAssociation__JetExtendedData__db_datamem(Reflex::Class*) {

}
//------Delayed function member builder for class vector<reco::JetExtendedAssociation::JetExtendedData,std::allocator<reco::JetExtendedAssociation::JetExtendedData> > -------------------
void __std__vector_reco__JetExtendedAssociation__JetExtendedData__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_33815, type_33814), Reflex::Literal("operator="), operator_14827, 0, "__x", ::Reflex::PUBLIC | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_3234, type_14813), Reflex::Literal("assign"), method_14828, 0, "__n;__val", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_8236), Reflex::Literal("begin"), method_14829, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_8237), Reflex::Literal("begin"), method_14830, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_8236), Reflex::Literal("end"), method_14831, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_8237), Reflex::Literal("end"), method_14832, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3234), Reflex::Literal("size"), method_14837, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3234), Reflex::Literal("max_size"), method_14838, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_3234, type_12876), Reflex::Literal("resize"), method_14839, 0, "__new_size;__x=_Tp()", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3234), Reflex::Literal("capacity"), method_14840, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("empty"), method_14841, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_3234), Reflex::Literal("reserve"), method_14842, 0, "__n", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_14811, type_3234), Reflex::Literal("operator[]"), operator_14843, 0, "__n", ::Reflex::PUBLIC | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_14813, type_3234), Reflex::Literal("operator[]"), operator_14844, 0, "__n", ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_14811, type_3234), Reflex::Literal("at"), method_14846, 0, "__n", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_14813, type_3234), Reflex::Literal("at"), method_14847, 0, "__n", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_14811), Reflex::Literal("front"), method_14848, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_14813), Reflex::Literal("front"), method_14849, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_14811), Reflex::Literal("back"), method_14850, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_14813), Reflex::Literal("back"), method_14851, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_9789), Reflex::Literal("data"), method_14852, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_14809), Reflex::Literal("data"), method_14853, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_14813), Reflex::Literal("push_back"), method_14854, 0, "__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698), Reflex::Literal("pop_back"), method_14855, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_8236, type_8236, type_14813), Reflex::Literal("insert"), method_14856, 0, "__position;__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_8236, type_3234, type_14813), Reflex::Literal("insert"), method_14857, 0, "__position;__n;__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_8236, type_8236), Reflex::Literal("erase"), method_14858, 0, "__position", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_8236, type_8236, type_8236), Reflex::Literal("erase"), method_14859, 0, "__first;__last", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_33815), Reflex::Literal("swap"), method_14860, 0, "__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698), Reflex::Literal("clear"), method_14861, 0, 0, ::Reflex::PUBLIC);
}
//------Stub functions for class pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> -------------------------------
static void destructor_12878(void*, void * o, const std::vector<void*>&, void *) {
(((::std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>*)o)->::std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>::~pair)();
}
static  void operator_12879( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>*)o)->operator=)(*(const ::std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>*)arg[0]);
  else   (((::std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>*)o)->operator=)(*(const ::std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>*)arg[0]);
}

static void constructor_12880( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>(*(const ::std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>*)arg[0]);
  else ::new(mem) ::std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>(*(const ::std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>*)arg[0]);
}

static void constructor_12881( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>();
  else ::new(mem) ::std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>();
}

static void constructor_12882( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>(*(const ::edm::RefToBase<reco::Jet>*)arg[0],
      *(const ::reco::JetExtendedAssociation::JetExtendedData*)arg[1]);
  else ::new(mem) ::std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>(*(const ::edm::RefToBase<reco::Jet>*)arg[0],
      *(const ::reco::JetExtendedAssociation::JetExtendedData*)arg[1]);
}

static void method_newdel_2888( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> -------------------------------
void __std__pair_edm__RefToBase_reco__Jet__reco__JetExtendedAssociation__JetExtendedData__db_datamem(Reflex::Class*);
void __std__pair_edm__RefToBase_reco__Jet__reco__JetExtendedAssociation__JetExtendedData__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __std__pair_edm__RefToBase_reco__Jet__reco__JetExtendedAssociation__JetExtendedData__datamem_bld(&__std__pair_edm__RefToBase_reco__Jet__reco__JetExtendedAssociation__JetExtendedData__db_datamem);
Reflex::GenreflexMemberBuilder __std__pair_edm__RefToBase_reco__Jet__reco__JetExtendedAssociation__JetExtendedData__funcmem_bld(&__std__pair_edm__RefToBase_reco__Jet__reco__JetExtendedAssociation__JetExtendedData__db_funcmem);
void __std__pair_edm__RefToBase_reco__Jet__reco__JetExtendedAssociation__JetExtendedData__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>"), typeid(::std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>), sizeof(::std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::STRUCT)
  .AddTypedef(type_4891, Reflex::Literal("std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>::first_type"))
  .AddTypedef(type_12876, Reflex::Literal("std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>::second_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~pair"), destructor_12878, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::DESTRUCTOR )
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_14746, type_14748), Reflex::Literal("operator="), operator_12879, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_14748), Reflex::Literal("pair"), constructor_12880, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("pair"), constructor_12881, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_33732, type_14813), Reflex::Literal("pair"), constructor_12882, 0, "__a;__b", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_2888, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__std__pair_edm__RefToBase_reco__Jet__reco__JetExtendedAssociation__JetExtendedData__datamem_bld);
}

//------Delayed data member builder for class pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> -------------------
void __std__pair_edm__RefToBase_reco__Jet__reco__JetExtendedAssociation__JetExtendedData__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_4891, Reflex::Literal("first"), OffsetOf(__shadow__::__std__pair_edm__RefToBase_reco__Jet__reco__JetExtendedAssociation__JetExtendedData_, first), ::Reflex::PUBLIC)
  .AddDataMember(type_12876, Reflex::Literal("second"), OffsetOf(__shadow__::__std__pair_edm__RefToBase_reco__Jet__reco__JetExtendedAssociation__JetExtendedData_, second), ::Reflex::PUBLIC);
}
//------Delayed function member builder for class pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> -------------------
void __std__pair_edm__RefToBase_reco__Jet__reco__JetExtendedAssociation__JetExtendedData__db_funcmem(Reflex::Class*) {

}
//------Stub functions for class vector<std::pair<edm::RefToBase<reco::Jet>, reco::JetExtendedAssociation::JetExtendedData>,std::allocator<std::pair<edm::RefToBase<reco::Jet>, reco::JetExtendedAssociation::JetExtendedData> > > -------------------------------
static void constructor_14757( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> >();
  else ::new(mem) ::std::vector<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> >();
}

static void constructor_14758( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> >(*(const ::std::allocator<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> >*)arg[0]);
  else ::new(mem) ::std::vector<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> >(*(const ::std::allocator<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> >*)arg[0]);
}

static void constructor_14759( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if ( arg.size() == 1 ) {
    if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> >(*(::std::size_t*)arg[0]);
  else ::new(mem) ::std::vector<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> >(*(::std::size_t*)arg[0]);
  }
  else if ( arg.size() == 2 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> >(*(::std::size_t*)arg[0],
      *(const ::std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>*)arg[1]);
  else ::new(mem) ::std::vector<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> >(*(::std::size_t*)arg[0],
      *(const ::std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>*)arg[1]);
  }
  else if ( arg.size() == 3 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> >(*(::std::size_t*)arg[0],
      *(const ::std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>*)arg[1],
      *(const ::std::allocator<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> >*)arg[2]);
  else ::new(mem) ::std::vector<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> >(*(::std::size_t*)arg[0],
      *(const ::std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>*)arg[1],
      *(const ::std::allocator<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> >*)arg[2]);
  }
}

static void constructor_14760( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::std::vector<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> >(*(const ::std::vector<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> >*)arg[0]);
  else ::new(mem) ::std::vector<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> >(*(const ::std::vector<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> >*)arg[0]);
}

static void destructor_14761(void*, void * o, const std::vector<void*>&, void *) {
(((::std::vector<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> >*)o)->::std::vector<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> >::~vector)();
}
static  void operator_14762( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> >*)o)->operator=)(*(const ::std::vector<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> >*)arg[0]);
  else   (((::std::vector<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> >*)o)->operator=)(*(const ::std::vector<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> >*)arg[0]);
}

static  void method_14763( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> >*)o)->assign)(*(::std::size_t*)arg[0],
    *(const ::std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>*)arg[1]);
}

static  void method_14764( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>*,std::vector<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >)((((::std::vector<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> >*)o)->begin)());
  else   (((::std::vector<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> >*)o)->begin)();
}

static  void method_14765( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<const std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>*,std::vector<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >)((((const ::std::vector<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> >*)o)->begin)());
  else   (((const ::std::vector<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> >*)o)->begin)();
}

static  void method_14766( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>*,std::vector<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >)((((::std::vector<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> >*)o)->end)());
  else   (((::std::vector<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> >*)o)->end)();
}

static  void method_14767( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<const std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>*,std::vector<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >)((((const ::std::vector<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> >*)o)->end)());
  else   (((const ::std::vector<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> >*)o)->end)();
}

static  void method_14772( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::std::vector<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> >*)o)->size)());
  else   (((const ::std::vector<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> >*)o)->size)();
}

static  void method_14773( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::std::vector<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> >*)o)->max_size)());
  else   (((const ::std::vector<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> >*)o)->max_size)();
}

static  void method_14774( void*, void* o, const std::vector<void*>& arg, void*)
{
  if ( arg.size() == 1 ) {
    (((::std::vector<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> >*)o)->resize)(*(::std::size_t*)arg[0]);
  }
  else if ( arg.size() == 2 ) { 
    (((::std::vector<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> >*)o)->resize)(*(::std::size_t*)arg[0],
      *(::std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>*)arg[1]);
  }
}

static  void method_14775( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::size_t)((((const ::std::vector<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> >*)o)->capacity)());
  else   (((const ::std::vector<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> >*)o)->capacity)();
}

static  void method_14776( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::std::vector<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> >*)o)->empty)());
  else   (((const ::std::vector<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> >*)o)->empty)();
}

static  void method_14777( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> >*)o)->reserve)(*(::std::size_t*)arg[0]);
}

static  void operator_14778( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> >*)o)->operator[])(*(::std::size_t*)arg[0]);
  else   (((::std::vector<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> >*)o)->operator[])(*(::std::size_t*)arg[0]);
}

static  void operator_14779( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> >*)o)->operator[])(*(::std::size_t*)arg[0]);
  else   (((const ::std::vector<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> >*)o)->operator[])(*(::std::size_t*)arg[0]);
}

static  void method_14781( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> >*)o)->at)(*(::std::size_t*)arg[0]);
  else   (((::std::vector<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> >*)o)->at)(*(::std::size_t*)arg[0]);
}

static  void method_14782( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> >*)o)->at)(*(::std::size_t*)arg[0]);
  else   (((const ::std::vector<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> >*)o)->at)(*(::std::size_t*)arg[0]);
}

static  void method_14783( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> >*)o)->front)();
  else   (((::std::vector<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> >*)o)->front)();
}

static  void method_14784( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> >*)o)->front)();
  else   (((const ::std::vector<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> >*)o)->front)();
}

static  void method_14785( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::std::vector<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> >*)o)->back)();
  else   (((::std::vector<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> >*)o)->back)();
}

static  void method_14786( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::std::vector<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> >*)o)->back)();
  else   (((const ::std::vector<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> >*)o)->back)();
}

static  void method_14787( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((::std::vector<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> >*)o)->data)());
  else   (((::std::vector<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> >*)o)->data)();
}

static  void method_14788( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::std::vector<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> >*)o)->data)());
  else   (((const ::std::vector<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> >*)o)->data)();
}

static  void method_14789( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> >*)o)->push_back)(*(const ::std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>*)arg[0]);
}

static  void method_14790( void*, void* o, const std::vector<void*>&, void*)
{
  (((::std::vector<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> >*)o)->pop_back)();
}

static  void method_14791( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>*,std::vector<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >)((((::std::vector<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> >*)o)->insert)(*(::__gnu_cxx::__normal_iterator<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>*,std::vector<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >*)arg[0],
    *(const ::std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>*)arg[1]));
  else   (((::std::vector<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> >*)o)->insert)(*(::__gnu_cxx::__normal_iterator<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>*,std::vector<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >*)arg[0],
    *(const ::std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>*)arg[1]);
}

static  void method_14792( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> >*)o)->insert)(*(::__gnu_cxx::__normal_iterator<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>*,std::vector<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >*)arg[0],
    *(::std::size_t*)arg[1],
    *(const ::std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>*)arg[2]);
}

static  void method_14793( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>*,std::vector<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >)((((::std::vector<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> >*)o)->erase)(*(::__gnu_cxx::__normal_iterator<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>*,std::vector<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >*)arg[0]));
  else   (((::std::vector<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> >*)o)->erase)(*(::__gnu_cxx::__normal_iterator<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>*,std::vector<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >*)arg[0]);
}

static  void method_14794( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (__gnu_cxx::__normal_iterator<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>*,std::vector<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >)((((::std::vector<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> >*)o)->erase)(*(::__gnu_cxx::__normal_iterator<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>*,std::vector<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >*)arg[0],
    *(::__gnu_cxx::__normal_iterator<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>*,std::vector<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >*)arg[1]));
  else   (((::std::vector<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> >*)o)->erase)(*(::__gnu_cxx::__normal_iterator<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>*,std::vector<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >*)arg[0],
    *(::__gnu_cxx::__normal_iterator<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>*,std::vector<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >*)arg[1]);
}

static  void method_14795( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::std::vector<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> >*)o)->swap)(*(::std::vector<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> >*)arg[0]);
}

static  void method_14796( void*, void* o, const std::vector<void*>&, void*)
{
  (((::std::vector<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> >*)o)->clear)();
}

static void method_newdel_2994( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::std::vector<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::std::vector<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::std::vector<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::std::vector<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::std::vector<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

static void method_x79( void* retaddr, void*, const std::vector<void*>&, void*)
{
  typedef std::vector<std::pair< ::Reflex::Base, int> > Bases_t;
  static Bases_t s_bases;
  if ( !s_bases.size() ) {
    s_bases.push_back(std::make_pair(::Reflex::Base( ::Reflex::TypeBuilder(Reflex::Literal("std::_Vector_base<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,std::allocator<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >")), ::Reflex::BaseOffset< ::std::vector<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> >,::std::_Vector_base<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,std::allocator<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > > >::Get(),::Reflex::PROTECTED), 0));
  }
  if (retaddr) *(Bases_t**)retaddr = &s_bases;
}

static void method_x80( void* retaddr, void*, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**) retaddr = ::Reflex::Proxy< ::std::vector<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >::Generate();
  else ::Reflex::Proxy< ::std::vector<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >::Generate();
}

//------Dictionary for class vector<std::pair<edm::RefToBase<reco::Jet>, reco::JetExtendedAssociation::JetExtendedData>,std::allocator<std::pair<edm::RefToBase<reco::Jet>, reco::JetExtendedAssociation::JetExtendedData> > > -------------------------------
void __std__vector_std__pair_edm__RefToBase_reco__Jet__reco__JetExtendedAssociation__JetExtendedData_s__db_datamem(Reflex::Class*);
void __std__vector_std__pair_edm__RefToBase_reco__Jet__reco__JetExtendedAssociation__JetExtendedData_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __std__vector_std__pair_edm__RefToBase_reco__Jet__reco__JetExtendedAssociation__JetExtendedData_s__datamem_bld(&__std__vector_std__pair_edm__RefToBase_reco__Jet__reco__JetExtendedAssociation__JetExtendedData_s__db_datamem);
Reflex::GenreflexMemberBuilder __std__vector_std__pair_edm__RefToBase_reco__Jet__reco__JetExtendedAssociation__JetExtendedData_s__funcmem_bld(&__std__vector_std__pair_edm__RefToBase_reco__Jet__reco__JetExtendedAssociation__JetExtendedData_s__db_funcmem);
void __std__vector_std__pair_edm__RefToBase_reco__Jet__reco__JetExtendedAssociation__JetExtendedData_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("std::vector<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> >"), typeid(::std::vector<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> >), sizeof(::std::vector<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddBase(type_2492, ::Reflex::BaseOffset< ::std::vector<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> >, ::std::_Vector_base<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,std::allocator<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > > >::Get(), ::Reflex::PROTECTED)
  .AddTypedef(type_2888, Reflex::Literal("std::vector<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> >::_Alloc_value_type"))
  .AddTypedef(type_2492, Reflex::Literal("std::vector<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> >::_Base"))
  .AddTypedef(type_3305, Reflex::Literal("std::vector<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> >::_Tp_alloc_type"))
  .AddTypedef(type_8375, Reflex::Literal("std::vector<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> >::_Alloc_traits"))
  .AddTypedef(type_2888, Reflex::Literal("std::vector<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> >::value_type"))
  .AddTypedef(type_9770, Reflex::Literal("std::vector<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> >::pointer"))
  .AddTypedef(type_14744, Reflex::Literal("std::vector<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> >::const_pointer"))
  .AddTypedef(type_14746, Reflex::Literal("std::vector<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> >::reference"))
  .AddTypedef(type_14748, Reflex::Literal("std::vector<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> >::const_reference"))
  .AddTypedef(type_8234, Reflex::Literal("std::vector<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> >::iterator"))
  .AddTypedef(type_8235, Reflex::Literal("std::vector<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> >::const_iterator"))
  .AddTypedef(type_3507, Reflex::Literal("std::vector<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> >::const_reverse_iterator"))
  .AddTypedef(type_3508, Reflex::Literal("std::vector<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> >::reverse_iterator"))
  .AddTypedef(type_3234, Reflex::Literal("std::vector<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> >::size_type"))
  .AddTypedef(type_3113, Reflex::Literal("std::vector<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> >::difference_type"))
  .AddTypedef(type_3305, Reflex::Literal("std::vector<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> >::allocator_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("vector"), constructor_14757, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_32622), Reflex::Literal("vector"), constructor_14758, 0, "__a", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_3234, type_14748, type_32622), Reflex::Literal("vector"), constructor_14759, 0, "__n;__value=_Tp();__a=_Alloc()", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_33811), Reflex::Literal("vector"), constructor_14760, 0, "__x", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~vector"), destructor_14761, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_2994, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getBasesTable"), method_x79, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddFunctionMember<void*(void)>(Reflex::Literal("createCollFuncTable"), method_x80, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandFunctionMemberBuilder(&__std__vector_std__pair_edm__RefToBase_reco__Jet__reco__JetExtendedAssociation__JetExtendedData_s__funcmem_bld);
}

//------Delayed data member builder for class vector<std::pair<edm::RefToBase<reco::Jet>, reco::JetExtendedAssociation::JetExtendedData>,std::allocator<std::pair<edm::RefToBase<reco::Jet>, reco::JetExtendedAssociation::JetExtendedData> > > -------------------
void __std__vector_std__pair_edm__RefToBase_reco__Jet__reco__JetExtendedAssociation__JetExtendedData_s__db_datamem(Reflex::Class*) {

}
//------Delayed function member builder for class vector<std::pair<edm::RefToBase<reco::Jet>, reco::JetExtendedAssociation::JetExtendedData>,std::allocator<std::pair<edm::RefToBase<reco::Jet>, reco::JetExtendedAssociation::JetExtendedData> > > -------------------
void __std__vector_std__pair_edm__RefToBase_reco__Jet__reco__JetExtendedAssociation__JetExtendedData_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_33812, type_33811), Reflex::Literal("operator="), operator_14762, 0, "__x", ::Reflex::PUBLIC | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_3234, type_14748), Reflex::Literal("assign"), method_14763, 0, "__n;__val", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_8234), Reflex::Literal("begin"), method_14764, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_8235), Reflex::Literal("begin"), method_14765, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_8234), Reflex::Literal("end"), method_14766, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_8235), Reflex::Literal("end"), method_14767, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3234), Reflex::Literal("size"), method_14772, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3234), Reflex::Literal("max_size"), method_14773, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_3234, type_2888), Reflex::Literal("resize"), method_14774, 0, "__new_size;__x=_Tp()", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_3234), Reflex::Literal("capacity"), method_14775, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("empty"), method_14776, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_3234), Reflex::Literal("reserve"), method_14777, 0, "__n", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_14746, type_3234), Reflex::Literal("operator[]"), operator_14778, 0, "__n", ::Reflex::PUBLIC | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_14748, type_3234), Reflex::Literal("operator[]"), operator_14779, 0, "__n", ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_14746, type_3234), Reflex::Literal("at"), method_14781, 0, "__n", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_14748, type_3234), Reflex::Literal("at"), method_14782, 0, "__n", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_14746), Reflex::Literal("front"), method_14783, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_14748), Reflex::Literal("front"), method_14784, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_14746), Reflex::Literal("back"), method_14785, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_14748), Reflex::Literal("back"), method_14786, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_9770), Reflex::Literal("data"), method_14787, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_14744), Reflex::Literal("data"), method_14788, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_14748), Reflex::Literal("push_back"), method_14789, 0, "__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698), Reflex::Literal("pop_back"), method_14790, 0, 0, ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_8234, type_8234, type_14748), Reflex::Literal("insert"), method_14791, 0, "__position;__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_8234, type_3234, type_14748), Reflex::Literal("insert"), method_14792, 0, "__position;__n;__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_8234, type_8234), Reflex::Literal("erase"), method_14793, 0, "__position", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_8234, type_8234, type_8234), Reflex::Literal("erase"), method_14794, 0, "__first;__last", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_33812), Reflex::Literal("swap"), method_14795, 0, "__x", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698), Reflex::Literal("clear"), method_14796, 0, 0, ::Reflex::PUBLIC);
}
//------Stub functions for class RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>, std::vector<reco::JetExtendedAssociation::JetExtendedData, std::allocator<reco::JetExtendedAssociation::JetExtendedData> >, edm::RefToBase<reco::Jet>, unsigned int, edm::helper::AssociationIdenticalKeyReference> > -------------------------------
static  void operator_23439( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->operator=)(*(const ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)arg[0]);
  else   (((::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->operator=)(*(const ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)arg[0]);
}

static void constructor_23440( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >(*(const ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)arg[0]);
  else ::new(mem) ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >(*(const ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)arg[0]);
}

static void constructor_23441( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >();
  else ::new(mem) ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >();
}

static void constructor_23442( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >(*(const ::edm::Handle<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)arg[0]);
  else ::new(mem) ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >(*(const ::edm::Handle<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)arg[0]);
}

static void constructor_23443( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >(*(const ::edm::OrphanHandle<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)arg[0]);
  else ::new(mem) ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >(*(const ::edm::OrphanHandle<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)arg[0]);
}

static void constructor_23444( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >((const ::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>*)arg[0]);
  else ::new(mem) ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >((const ::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>*)arg[0]);
}

static void constructor_23445( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >(*(const ::edm::TestHandle<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)arg[0]);
  else ::new(mem) ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >(*(const ::edm::TestHandle<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)arg[0]);
}

static void constructor_23446( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >(*(const ::edm::ProductID*)arg[0],
      (const ::edm::EDProductGetter*)arg[1]);
  else ::new(mem) ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >(*(const ::edm::ProductID*)arg[0],
      (const ::edm::EDProductGetter*)arg[1]);
}

static void destructor_23447(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >::~RefProd)();
}
static  void operator_23448( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->operator*)();
  else   (((const ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->operator*)();
}

static  void operator_23449( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->operator->)());
  else   (((const ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->operator->)();
}

static  void method_23450( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->get)());
  else   (((const ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->get)();
}

static  void method_23451( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->product)());
  else   (((const ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->product)();
}

static  void method_23452( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->refCore)();
  else   (((const ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->refCore)();
}

static  void method_23453( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->isNull)());
  else   (((const ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->isNull)();
}

static  void method_23454( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->isNonnull)());
  else   (((const ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->isNonnull)();
}

static  void operator_23455( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->operator!)());
  else   (((const ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->operator!)();
}

static  void method_23456( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::ProductID)((((const ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->id)());
  else   (((const ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->id)();
}

static  void method_23457( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->productGetter)());
  else   (((const ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->productGetter)();
}

static  void method_23458( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->hasCache)());
  else   (((const ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->hasCache)();
}

static  void method_23459( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->hasProductCache)());
  else   (((const ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->hasProductCache)();
}

static  void method_23460( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->isAvailable)());
  else   (((const ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->isAvailable)();
}

static  void method_23461( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->isTransient)());
  else   (((const ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->isTransient)();
}

static  void method_23462( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->swap)(*(::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)arg[0]);
}

static  void method_23463( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (short)((((::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->Class_Version)());
  else   (((::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->Class_Version)();
}

static void method_newdel_4870( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>, std::vector<reco::JetExtendedAssociation::JetExtendedData, std::allocator<reco::JetExtendedAssociation::JetExtendedData> >, edm::RefToBase<reco::Jet>, unsigned int, edm::helper::AssociationIdenticalKeyReference> > -------------------------------
void __edm__RefProd_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_reco__JetExtendedAssociation__JetExtendedData__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference_s__db_datamem(Reflex::Class*);
void __edm__RefProd_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_reco__JetExtendedAssociation__JetExtendedData__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__RefProd_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_reco__JetExtendedAssociation__JetExtendedData__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference_s__datamem_bld(&__edm__RefProd_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_reco__JetExtendedAssociation__JetExtendedData__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__RefProd_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_reco__JetExtendedAssociation__JetExtendedData__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference_s__funcmem_bld(&__edm__RefProd_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_reco__JetExtendedAssociation__JetExtendedData__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference_s__db_funcmem);
void __edm__RefProd_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_reco__JetExtendedAssociation__JetExtendedData__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >"), typeid(::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >), sizeof(::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("ClassVersion"), ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >::Class_Version())
  .AddTypedef(type_4858, Reflex::Literal("edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >::product_type"))
  .AddTypedef(type_4858, Reflex::Literal("edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >::value_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_37705, type_37706), Reflex::Literal("operator="), operator_23439, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_37706), Reflex::Literal("RefProd"), constructor_23440, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("RefProd"), constructor_23441, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_37707), Reflex::Literal("RefProd"), constructor_23442, 0, "handle", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_37708), Reflex::Literal("RefProd"), constructor_23443, 0, "handle", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_37004), Reflex::Literal("RefProd"), constructor_23444, 0, "iProduct", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_37709), Reflex::Literal("RefProd"), constructor_23445, 0, "handle", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_20008, type_20128), Reflex::Literal("RefProd"), constructor_23446, 0, "productID;prodGetter", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~RefProd"), destructor_23447, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_4870, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__RefProd_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_reco__JetExtendedAssociation__JetExtendedData__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__RefProd_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_reco__JetExtendedAssociation__JetExtendedData__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference_s__funcmem_bld);
}

//------Delayed data member builder for class RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>, std::vector<reco::JetExtendedAssociation::JetExtendedData, std::allocator<reco::JetExtendedAssociation::JetExtendedData> >, edm::RefToBase<reco::Jet>, unsigned int, edm::helper::AssociationIdenticalKeyReference> > -------------------
void __edm__RefProd_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_reco__JetExtendedAssociation__JetExtendedData__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_4847, Reflex::Literal("product_"), OffsetOf(__shadow__::__edm__RefProd_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_reco__JetExtendedAssociation__JetExtendedData__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference_s_, product_), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>, std::vector<reco::JetExtendedAssociation::JetExtendedData, std::allocator<reco::JetExtendedAssociation::JetExtendedData> >, edm::RefToBase<reco::Jet>, unsigned int, edm::helper::AssociationIdenticalKeyReference> > -------------------
void __edm__RefProd_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_reco__JetExtendedAssociation__JetExtendedData__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_20316), Reflex::Literal("operator*"), operator_23448, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_37004), Reflex::Literal("operator->"), operator_23449, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_37004), Reflex::Literal("get"), method_23450, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_37004), Reflex::Literal("product"), method_23451, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_23020), Reflex::Literal("refCore"), method_23452, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("isNull"), method_23453, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("isNonnull"), method_23454, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("operator!"), operator_23455, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4974), Reflex::Literal("id"), method_23456, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_20128), Reflex::Literal("productGetter"), method_23457, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("hasCache"), method_23458, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("hasProductCache"), method_23459, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("isAvailable"), method_23460, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("isTransient"), method_23461, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_37705), Reflex::Literal("swap"), method_23462, 0, "other", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_89), Reflex::Literal("Class_Version"), method_23463, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC);
}
//------Stub functions for class Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>, std::vector<reco::JetExtendedAssociation::JetExtendedData, std::allocator<reco::JetExtendedAssociation::JetExtendedData> >, edm::RefToBase<reco::Jet>, unsigned int, edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>, reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>, std::vector<reco::JetExtendedAssociation::JetExtendedData, std::allocator<reco::JetExtendedAssociation::JetExtendedData> >, edm::RefToBase<reco::Jet>, unsigned int, edm::helper::AssociationIdenticalKeyReference>, std::pair<edm::RefToBase<reco::Jet>, reco::JetExtendedAssociation::JetExtendedData> > > -------------------------------
static  void operator_24037( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >*)o)->operator=)(*(const ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >*)arg[0]);
  else   (((::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >*)o)->operator=)(*(const ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >*)arg[0]);
}

static void constructor_24038( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >(*(const ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >*)arg[0]);
  else ::new(mem) ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >(*(const ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >*)arg[0]);
}

static void constructor_24039( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >();
  else ::new(mem) ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >();
}

static void constructor_24040( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if ( arg.size() == 2 ) {
    if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >(*(const ::edm::Handle<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)arg[0],
      *(unsigned int*)arg[1]);
  else ::new(mem) ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >(*(const ::edm::Handle<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)arg[0],
      *(unsigned int*)arg[1]);
  }
  else if ( arg.size() == 3 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >(*(const ::edm::Handle<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)arg[0],
      *(unsigned int*)arg[1],
      *(bool*)arg[2]);
  else ::new(mem) ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >(*(const ::edm::Handle<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)arg[0],
      *(unsigned int*)arg[1],
      *(bool*)arg[2]);
  }
}

static void constructor_24041( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if ( arg.size() == 2 ) {
    if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >(*(const ::edm::OrphanHandle<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)arg[0],
      *(unsigned int*)arg[1]);
  else ::new(mem) ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >(*(const ::edm::OrphanHandle<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)arg[0],
      *(unsigned int*)arg[1]);
  }
  else if ( arg.size() == 3 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >(*(const ::edm::OrphanHandle<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)arg[0],
      *(unsigned int*)arg[1],
      *(bool*)arg[2]);
  else ::new(mem) ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >(*(const ::edm::OrphanHandle<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)arg[0],
      *(unsigned int*)arg[1],
      *(bool*)arg[2]);
  }
}

static void constructor_24042( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if ( arg.size() == 2 ) {
    if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >(*(const ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >*)arg[0],
      *(unsigned int*)arg[1]);
  else ::new(mem) ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >(*(const ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >*)arg[0],
      *(unsigned int*)arg[1]);
  }
  else if ( arg.size() == 3 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >(*(const ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >*)arg[0],
      *(unsigned int*)arg[1],
      *(bool*)arg[2]);
  else ::new(mem) ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >(*(const ::edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >*)arg[0],
      *(unsigned int*)arg[1],
      *(bool*)arg[2]);
  }
}

static void constructor_24043( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if ( arg.size() == 2 ) {
    if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >((const ::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>*)arg[0],
      *(unsigned int*)arg[1]);
  else ::new(mem) ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >((const ::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>*)arg[0],
      *(unsigned int*)arg[1]);
  }
  else if ( arg.size() == 3 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >((const ::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>*)arg[0],
      *(unsigned int*)arg[1],
      *(bool*)arg[2]);
  else ::new(mem) ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >((const ::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>*)arg[0],
      *(unsigned int*)arg[1],
      *(bool*)arg[2]);
  }
}

static void constructor_24044( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if ( arg.size() == 2 ) {
    if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >(*(const ::edm::TestHandle<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)arg[0],
      *(unsigned int*)arg[1]);
  else ::new(mem) ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >(*(const ::edm::TestHandle<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)arg[0],
      *(unsigned int*)arg[1]);
  }
  else if ( arg.size() == 3 ) { 
    if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >(*(const ::edm::TestHandle<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)arg[0],
      *(unsigned int*)arg[1],
      *(bool*)arg[2]);
  else ::new(mem) ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >(*(const ::edm::TestHandle<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)arg[0],
      *(unsigned int*)arg[1],
      *(bool*)arg[2]);
  }
}

static void constructor_24045( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >(*(const ::edm::ProductID*)arg[0],
      *(unsigned int*)arg[1],
      (const ::edm::EDProductGetter*)arg[2]);
  else ::new(mem) ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >(*(const ::edm::ProductID*)arg[0],
      *(unsigned int*)arg[1],
      (const ::edm::EDProductGetter*)arg[2]);
}

static void constructor_24046( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >(*(const ::edm::ProductID*)arg[0],
      (const ::std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>*)arg[1],
      *(unsigned int*)arg[2],
      (const ::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>*)arg[3]);
  else ::new(mem) ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >(*(const ::edm::ProductID*)arg[0],
      (const ::std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>*)arg[1],
      *(unsigned int*)arg[2],
      (const ::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>*)arg[3]);
}

static void constructor_24047( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >(*(const ::edm::ProductID*)arg[0]);
  else ::new(mem) ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >(*(const ::edm::ProductID*)arg[0]);
}

static void constructor_24048( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >(*(const ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)arg[0],
      *(unsigned int*)arg[1]);
  else ::new(mem) ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >(*(const ::edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)arg[0],
      *(unsigned int*)arg[1]);
}

static void destructor_24049(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >*)o)->::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >::~Ref)();
}
static  void operator_24050( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >*)o)->operator*)();
  else   (((const ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >*)o)->operator*)();
}

static  void operator_24051( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >*)o)->operator->)());
  else   (((const ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >*)o)->operator->)();
}

static  void method_24052( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >*)o)->get)());
  else   (((const ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >*)o)->get)();
}

static  void method_24053( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >*)o)->isNull)());
  else   (((const ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >*)o)->isNull)();
}

static  void method_24054( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >*)o)->isNonnull)());
  else   (((const ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >*)o)->isNonnull)();
}

static  void operator_24055( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >*)o)->operator!)());
  else   (((const ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >*)o)->operator!)();
}

static  void method_24056( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::ProductID)((((const ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >*)o)->id)());
  else   (((const ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >*)o)->id)();
}

static  void method_24057( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >*)o)->productGetter)());
  else   (((const ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >*)o)->productGetter)();
}

static  void method_24058( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >*)o)->product)());
  else   (((const ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >*)o)->product)();
}

static  void method_24059( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (unsigned int)((((const ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >*)o)->key)());
  else   (((const ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >*)o)->key)();
}

static  void method_24060( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (unsigned int)((((const ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >*)o)->index)());
  else   (((const ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >*)o)->index)();
}

static  void method_24061( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >*)o)->hasProductCache)());
  else   (((const ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >*)o)->hasProductCache)();
}

static  void method_24062( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >*)o)->isAvailable)());
  else   (((const ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >*)o)->isAvailable)();
}

static  void method_24063( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >*)o)->isTransient)());
  else   (((const ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >*)o)->isTransient)();
}

static  void method_24064( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >*)o)->refCore)();
  else   (((const ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >*)o)->refCore)();
}

static  void method_24065( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (short)((((::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >*)o)->Class_Version)());
  else   (((::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >*)o)->Class_Version)();
}

static void constructor_24066( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >(*(const ::edm::RefCore*)arg[0],
      *(const unsigned int*)arg[1]);
  else ::new(mem) ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >(*(const ::edm::RefCore*)arg[0],
      *(const unsigned int*)arg[1]);
}

static void method_newdel_4918( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>, std::vector<reco::JetExtendedAssociation::JetExtendedData, std::allocator<reco::JetExtendedAssociation::JetExtendedData> >, edm::RefToBase<reco::Jet>, unsigned int, edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>, reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>, std::vector<reco::JetExtendedAssociation::JetExtendedData, std::allocator<reco::JetExtendedAssociation::JetExtendedData> >, edm::RefToBase<reco::Jet>, unsigned int, edm::helper::AssociationIdenticalKeyReference>, std::pair<edm::RefToBase<reco::Jet>, reco::JetExtendedAssociation::JetExtendedData> > > -------------------------------
void __edm__Ref_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_reco__JetExtendedAssociation__JetExtendedData__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__reco__JetExtendedAssociation__JetExtendedData__edm__refhelper__FindUsingAdvance_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_reco__JetExtendedAssociation__JetExtendedData__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__reco__JetExtendedAssociation__JetExtendedData_s_s__db_datamem(Reflex::Class*);
void __edm__Ref_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_reco__JetExtendedAssociation__JetExtendedData__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__reco__JetExtendedAssociation__JetExtendedData__edm__refhelper__FindUsingAdvance_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_reco__JetExtendedAssociation__JetExtendedData__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__reco__JetExtendedAssociation__JetExtendedData_s_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__Ref_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_reco__JetExtendedAssociation__JetExtendedData__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__reco__JetExtendedAssociation__JetExtendedData__edm__refhelper__FindUsingAdvance_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_reco__JetExtendedAssociation__JetExtendedData__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__reco__JetExtendedAssociation__JetExtendedData_s_s__datamem_bld(&__edm__Ref_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_reco__JetExtendedAssociation__JetExtendedData__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__reco__JetExtendedAssociation__JetExtendedData__edm__refhelper__FindUsingAdvance_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_reco__JetExtendedAssociation__JetExtendedData__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__reco__JetExtendedAssociation__JetExtendedData_s_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__Ref_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_reco__JetExtendedAssociation__JetExtendedData__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__reco__JetExtendedAssociation__JetExtendedData__edm__refhelper__FindUsingAdvance_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_reco__JetExtendedAssociation__JetExtendedData__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__reco__JetExtendedAssociation__JetExtendedData_s_s__funcmem_bld(&__edm__Ref_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_reco__JetExtendedAssociation__JetExtendedData__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__reco__JetExtendedAssociation__JetExtendedData__edm__refhelper__FindUsingAdvance_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_reco__JetExtendedAssociation__JetExtendedData__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__reco__JetExtendedAssociation__JetExtendedData_s_s__db_funcmem);
void __edm__Ref_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_reco__JetExtendedAssociation__JetExtendedData__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__reco__JetExtendedAssociation__JetExtendedData__edm__refhelper__FindUsingAdvance_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_reco__JetExtendedAssociation__JetExtendedData__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__reco__JetExtendedAssociation__JetExtendedData_s_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >"), typeid(::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >), sizeof(::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("ClassVersion"), ::edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >::Class_Version())
  .AddTypedef(type_21780, Reflex::Literal("edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >::VF"))
  .AddTypedef(type_21779, Reflex::Literal("edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >::VBF"))
  .AddTypedef(type_4858, Reflex::Literal("edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >::product_type"))
  .AddTypedef(type_2888, Reflex::Literal("edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >::value_type"))
  .AddTypedef(type_2888c, Reflex::Literal("edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >::element_type"))
  .AddTypedef(type_20311, Reflex::Literal("edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >::finder_type"))
  .AddTypedef(type_219, Reflex::Literal("edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >::argument_type"))
  .AddTypedef(type_219, Reflex::Literal("edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > >::key_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_37800, type_37003), Reflex::Literal("operator="), operator_24037, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_37003), Reflex::Literal("Ref"), constructor_24038, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("Ref"), constructor_24039, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_37707, type_219, type_1569), Reflex::Literal("Ref"), constructor_24040, 0, "handle;itemKey;setNow=true", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_37708, type_219, type_1569), Reflex::Literal("Ref"), constructor_24041, 0, "handle;itemKey;setNow=true", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_37002, type_219, type_1569), Reflex::Literal("Ref"), constructor_24042, 0, "refvector;itemKey;setNow=true", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_37004, type_219, type_1569), Reflex::Literal("Ref"), constructor_24043, 0, "iProduct;iItemKey;iSetNow=true", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_37709, type_219, type_1569), Reflex::Literal("Ref"), constructor_24044, 0, "handle;itemKey;setNow=true", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_20008, type_219, type_20128), Reflex::Literal("Ref"), constructor_24045, 0, "productID;itemKey;prodGetter", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_20008, type_14744, type_219, type_37004), Reflex::Literal("Ref"), constructor_24046, 0, "iProductID;;iItemKey;iProduct", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_20008), Reflex::Literal("Ref"), constructor_24047, 0, "iId", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_37706, type_219), Reflex::Literal("Ref"), constructor_24048, 0, "refProd;itemKey", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~Ref"), destructor_24049, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_23020, type_10959), Reflex::Literal("Ref"), constructor_24066, 0, "iRefCore;iKey", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_4918, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__Ref_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_reco__JetExtendedAssociation__JetExtendedData__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__reco__JetExtendedAssociation__JetExtendedData__edm__refhelper__FindUsingAdvance_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_reco__JetExtendedAssociation__JetExtendedData__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__reco__JetExtendedAssociation__JetExtendedData_s_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__Ref_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_reco__JetExtendedAssociation__JetExtendedData__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__reco__JetExtendedAssociation__JetExtendedData__edm__refhelper__FindUsingAdvance_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_reco__JetExtendedAssociation__JetExtendedData__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__reco__JetExtendedAssociation__JetExtendedData_s_s__funcmem_bld);
}

//------Delayed data member builder for class Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>, std::vector<reco::JetExtendedAssociation::JetExtendedData, std::allocator<reco::JetExtendedAssociation::JetExtendedData> >, edm::RefToBase<reco::Jet>, unsigned int, edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>, reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>, std::vector<reco::JetExtendedAssociation::JetExtendedData, std::allocator<reco::JetExtendedAssociation::JetExtendedData> >, edm::RefToBase<reco::Jet>, unsigned int, edm::helper::AssociationIdenticalKeyReference>, std::pair<edm::RefToBase<reco::Jet>, reco::JetExtendedAssociation::JetExtendedData> > > -------------------
void __edm__Ref_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_reco__JetExtendedAssociation__JetExtendedData__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__reco__JetExtendedAssociation__JetExtendedData__edm__refhelper__FindUsingAdvance_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_reco__JetExtendedAssociation__JetExtendedData__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__reco__JetExtendedAssociation__JetExtendedData_s_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_4847, Reflex::Literal("product_"), OffsetOf(__shadow__::__edm__Ref_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_reco__JetExtendedAssociation__JetExtendedData__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__reco__JetExtendedAssociation__JetExtendedData__edm__refhelper__FindUsingAdvance_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_reco__JetExtendedAssociation__JetExtendedData__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__reco__JetExtendedAssociation__JetExtendedData_s_s_, product_), ::Reflex::PRIVATE | ::Reflex::MUTABLE)
  .AddDataMember(type_219, Reflex::Literal("index_"), OffsetOf(__shadow__::__edm__Ref_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_reco__JetExtendedAssociation__JetExtendedData__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__reco__JetExtendedAssociation__JetExtendedData__edm__refhelper__FindUsingAdvance_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_reco__JetExtendedAssociation__JetExtendedData__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__reco__JetExtendedAssociation__JetExtendedData_s_s_, index_), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>, std::vector<reco::JetExtendedAssociation::JetExtendedData, std::allocator<reco::JetExtendedAssociation::JetExtendedData> >, edm::RefToBase<reco::Jet>, unsigned int, edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>, reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>, std::vector<reco::JetExtendedAssociation::JetExtendedData, std::allocator<reco::JetExtendedAssociation::JetExtendedData> >, edm::RefToBase<reco::Jet>, unsigned int, edm::helper::AssociationIdenticalKeyReference>, std::pair<edm::RefToBase<reco::Jet>, reco::JetExtendedAssociation::JetExtendedData> > > -------------------
void __edm__Ref_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_reco__JetExtendedAssociation__JetExtendedData__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__reco__JetExtendedAssociation__JetExtendedData__edm__refhelper__FindUsingAdvance_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_reco__JetExtendedAssociation__JetExtendedData__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__reco__JetExtendedAssociation__JetExtendedData_s_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_14748), Reflex::Literal("operator*"), operator_24050, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_14744), Reflex::Literal("operator->"), operator_24051, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_14744), Reflex::Literal("get"), method_24052, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("isNull"), method_24053, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("isNonnull"), method_24054, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("operator!"), operator_24055, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4974), Reflex::Literal("id"), method_24056, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_20128), Reflex::Literal("productGetter"), method_24057, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_37004), Reflex::Literal("product"), method_24058, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_219), Reflex::Literal("key"), method_24059, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_219), Reflex::Literal("index"), method_24060, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("hasProductCache"), method_24061, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("isAvailable"), method_24062, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("isTransient"), method_24063, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_23020), Reflex::Literal("refCore"), method_24064, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_89), Reflex::Literal("Class_Version"), method_24065, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC);
}
//------Stub functions for class Wrapper<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>, std::vector<reco::JetExtendedAssociation::JetExtendedData, std::allocator<reco::JetExtendedAssociation::JetExtendedData> >, edm::RefToBase<reco::Jet>, unsigned int, edm::helper::AssociationIdenticalKeyReference> > -------------------------------
static void constructor_22441( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >();
  else ::new(mem) ::edm::Wrapper<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >();
}

static void constructor_22442( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >(*(::std::auto_ptr<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)arg[0]);
  else ::new(mem) ::edm::Wrapper<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >(*(::std::auto_ptr<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)arg[0]);
}

static void destructor_22443(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::Wrapper<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->::edm::Wrapper<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >::~Wrapper)();
}
static  void method_22444( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Wrapper<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->product)());
  else   (((const ::edm::Wrapper<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->product)();
}

static  void operator_22445( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Wrapper<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->operator->)());
  else   (((const ::edm::Wrapper<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->operator->)();
}

static  void method_22446( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::Wrapper<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->productTypeInfo)();
  else   (((::edm::Wrapper<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->productTypeInfo)();
}

static  void method_22447( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::Wrapper<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->typeInfo)();
  else   (((::edm::Wrapper<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->typeInfo)();
}

static void constructor_22448( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >((::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>*)arg[0]);
  else ::new(mem) ::edm::Wrapper<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >((::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>*)arg[0]);
}

static  void method_22449( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((::edm::Wrapper<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->getInterface)());
  else   (((::edm::Wrapper<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->getInterface)();
}

static  void method_22450( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->fillView)(*(const ::edm::ProductID*)arg[0],
    *(::std::vector<const void*>*)arg[1],
    *(::boost::shared_ptr<edm::reftobase::RefVectorHolderBase>*)arg[2]);
}

static  void method_22451( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->setPtr)(*(const ::std::type_info*)arg[0],
    *(unsigned long*)arg[1],
    *(const void**)arg[2]);
}

static  void method_22452( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->fillPtrVector)(*(const ::std::type_info*)arg[0],
    *(const ::std::vector<unsigned long>*)arg[1],
    *(::std::vector<const void*>*)arg[2]);
}

static  void method_22453( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Wrapper<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->dynamicTypeInfo)();
  else   (((const ::edm::Wrapper<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->dynamicTypeInfo)();
}

static  void method_22454( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Wrapper<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->isPresent)());
  else   (((const ::edm::Wrapper<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->isPresent)();
}

static  void method_22455( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Wrapper<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->dynamicTypeInfo_)();
  else   (((const ::edm::Wrapper<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->dynamicTypeInfo_)();
}

static void method_newdel_4683( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class Wrapper<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>, std::vector<reco::JetExtendedAssociation::JetExtendedData, std::allocator<reco::JetExtendedAssociation::JetExtendedData> >, edm::RefToBase<reco::Jet>, unsigned int, edm::helper::AssociationIdenticalKeyReference> > -------------------------------
void __edm__Wrapper_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_reco__JetExtendedAssociation__JetExtendedData__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference_s__db_datamem(Reflex::Class*);
void __edm__Wrapper_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_reco__JetExtendedAssociation__JetExtendedData__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__Wrapper_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_reco__JetExtendedAssociation__JetExtendedData__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference_s__datamem_bld(&__edm__Wrapper_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_reco__JetExtendedAssociation__JetExtendedData__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__Wrapper_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_reco__JetExtendedAssociation__JetExtendedData__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference_s__funcmem_bld(&__edm__Wrapper_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_reco__JetExtendedAssociation__JetExtendedData__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference_s__db_funcmem);
void __edm__Wrapper_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_reco__JetExtendedAssociation__JetExtendedData__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::Wrapper<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >"), typeid(::edm::Wrapper<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >), sizeof(::edm::Wrapper<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("o_name"), "edm::Wrapper<reco::JetExtendedAssociation::Container>")
  .AddTypedef(type_4858, Reflex::Literal("edm::Wrapper<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >::value_type"))
  .AddTypedef(type_4858, Reflex::Literal("edm::Wrapper<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >::wrapped_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("Wrapper"), constructor_22441, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_2763), Reflex::Literal("Wrapper"), constructor_22442, 0, "ptr", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~Wrapper"), destructor_22443, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_37065), Reflex::Literal("Wrapper"), constructor_22448, 0, "ptr", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_4683, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__Wrapper_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_reco__JetExtendedAssociation__JetExtendedData__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__Wrapper_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_reco__JetExtendedAssociation__JetExtendedData__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference_s__funcmem_bld);
}

//------Delayed data member builder for class Wrapper<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>, std::vector<reco::JetExtendedAssociation::JetExtendedData, std::allocator<reco::JetExtendedAssociation::JetExtendedData> >, edm::RefToBase<reco::Jet>, unsigned int, edm::helper::AssociationIdenticalKeyReference> > -------------------
void __edm__Wrapper_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_reco__JetExtendedAssociation__JetExtendedData__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_1569, Reflex::Literal("present"), OffsetOf(__shadow__::__edm__Wrapper_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_reco__JetExtendedAssociation__JetExtendedData__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference_s_, present), ::Reflex::PRIVATE)
  .AddDataMember(type_4858, Reflex::Literal("obj"), OffsetOf(__shadow__::__edm__Wrapper_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_reco__JetExtendedAssociation__JetExtendedData__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference_s_, obj), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class Wrapper<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>, std::vector<reco::JetExtendedAssociation::JetExtendedData, std::allocator<reco::JetExtendedAssociation::JetExtendedData> >, edm::RefToBase<reco::Jet>, unsigned int, edm::helper::AssociationIdenticalKeyReference> > -------------------
void __edm__Wrapper_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_reco__JetExtendedAssociation__JetExtendedData__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_37004), Reflex::Literal("product"), method_22444, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_37004), Reflex::Literal("operator->"), operator_22445, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_20180), Reflex::Literal("productTypeInfo"), method_22446, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_20180), Reflex::Literal("typeInfo"), method_22447, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_37066), Reflex::Literal("getInterface"), method_22449, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_20008, type_20132, type_36516), Reflex::Literal("fillView"), method_22450, 0, "id;pointers;helpers", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_20180, type_362, type_11211), Reflex::Literal("setPtr"), method_22451, 0, "iToType;iIndex;oPtr", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_20180, type_24927, type_20132), Reflex::Literal("fillPtrVector"), method_22452, 0, "iToType;iIndices;oPtr", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_20180), Reflex::Literal("dynamicTypeInfo"), method_22453, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("isPresent"), method_22454, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_20180), Reflex::Literal("dynamicTypeInfo_"), method_22455, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST);
}
//------Stub functions for class Wrapper<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>, std::vector<edm::RefVector<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track, edm::refhelper::FindUsingAdvance<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track> >, std::allocator<edm::RefVector<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track, edm::refhelper::FindUsingAdvance<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track> > > >, edm::RefToBase<reco::Jet>, unsigned int, edm::helper::AssociationIdenticalKeyReference> > -------------------------------
static void constructor_22462( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >();
  else ::new(mem) ::edm::Wrapper<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >();
}

static void constructor_22463( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >(*(::std::auto_ptr<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)arg[0]);
  else ::new(mem) ::edm::Wrapper<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >(*(::std::auto_ptr<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)arg[0]);
}

static void destructor_22464(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::Wrapper<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->::edm::Wrapper<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >::~Wrapper)();
}
static  void method_22465( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Wrapper<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->product)());
  else   (((const ::edm::Wrapper<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->product)();
}

static  void operator_22466( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Wrapper<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->operator->)());
  else   (((const ::edm::Wrapper<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->operator->)();
}

static  void method_22467( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::Wrapper<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->productTypeInfo)();
  else   (((::edm::Wrapper<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->productTypeInfo)();
}

static  void method_22468( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::Wrapper<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->typeInfo)();
  else   (((::edm::Wrapper<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->typeInfo)();
}

static void constructor_22469( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >((::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>*)arg[0]);
  else ::new(mem) ::edm::Wrapper<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >((::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>*)arg[0]);
}

static  void method_22470( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((::edm::Wrapper<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->getInterface)());
  else   (((::edm::Wrapper<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->getInterface)();
}

static  void method_22471( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->fillView)(*(const ::edm::ProductID*)arg[0],
    *(::std::vector<const void*>*)arg[1],
    *(::boost::shared_ptr<edm::reftobase::RefVectorHolderBase>*)arg[2]);
}

static  void method_22472( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->setPtr)(*(const ::std::type_info*)arg[0],
    *(unsigned long*)arg[1],
    *(const void**)arg[2]);
}

static  void method_22473( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->fillPtrVector)(*(const ::std::type_info*)arg[0],
    *(const ::std::vector<unsigned long>*)arg[1],
    *(::std::vector<const void*>*)arg[2]);
}

static  void method_22474( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Wrapper<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->dynamicTypeInfo)();
  else   (((const ::edm::Wrapper<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->dynamicTypeInfo)();
}

static  void method_22475( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Wrapper<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->isPresent)());
  else   (((const ::edm::Wrapper<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->isPresent)();
}

static  void method_22476( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Wrapper<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->dynamicTypeInfo_)();
  else   (((const ::edm::Wrapper<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->dynamicTypeInfo_)();
}

static void method_newdel_4684( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class Wrapper<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>, std::vector<edm::RefVector<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track, edm::refhelper::FindUsingAdvance<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track> >, std::allocator<edm::RefVector<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track, edm::refhelper::FindUsingAdvance<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track> > > >, edm::RefToBase<reco::Jet>, unsigned int, edm::helper::AssociationIdenticalKeyReference> > -------------------------------
void __edm__Wrapper_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference_s__db_datamem(Reflex::Class*);
void __edm__Wrapper_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__Wrapper_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference_s__datamem_bld(&__edm__Wrapper_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__Wrapper_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference_s__funcmem_bld(&__edm__Wrapper_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference_s__db_funcmem);
void __edm__Wrapper_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::Wrapper<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >"), typeid(::edm::Wrapper<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >), sizeof(::edm::Wrapper<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("o_name"), "edm::Wrapper<reco::JetTracksAssociation::Container>")
  .AddTypedef(type_4859, Reflex::Literal("edm::Wrapper<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >::value_type"))
  .AddTypedef(type_4859, Reflex::Literal("edm::Wrapper<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >::wrapped_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("Wrapper"), constructor_22462, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_2764), Reflex::Literal("Wrapper"), constructor_22463, 0, "ptr", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~Wrapper"), destructor_22464, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_37069), Reflex::Literal("Wrapper"), constructor_22469, 0, "ptr", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_4684, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__Wrapper_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__Wrapper_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference_s__funcmem_bld);
}

//------Delayed data member builder for class Wrapper<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>, std::vector<edm::RefVector<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track, edm::refhelper::FindUsingAdvance<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track> >, std::allocator<edm::RefVector<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track, edm::refhelper::FindUsingAdvance<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track> > > >, edm::RefToBase<reco::Jet>, unsigned int, edm::helper::AssociationIdenticalKeyReference> > -------------------
void __edm__Wrapper_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_1569, Reflex::Literal("present"), OffsetOf(__shadow__::__edm__Wrapper_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference_s_, present), ::Reflex::PRIVATE)
  .AddDataMember(type_4859, Reflex::Literal("obj"), OffsetOf(__shadow__::__edm__Wrapper_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference_s_, obj), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class Wrapper<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>, std::vector<edm::RefVector<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track, edm::refhelper::FindUsingAdvance<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track> >, std::allocator<edm::RefVector<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track, edm::refhelper::FindUsingAdvance<std::vector<reco::Track, std::allocator<reco::Track> >, reco::Track> > > >, edm::RefToBase<reco::Jet>, unsigned int, edm::helper::AssociationIdenticalKeyReference> > -------------------
void __edm__Wrapper_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_37010), Reflex::Literal("product"), method_22465, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_37010), Reflex::Literal("operator->"), operator_22466, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_20180), Reflex::Literal("productTypeInfo"), method_22467, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_20180), Reflex::Literal("typeInfo"), method_22468, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_37070), Reflex::Literal("getInterface"), method_22470, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_20008, type_20132, type_36516), Reflex::Literal("fillView"), method_22471, 0, "id;pointers;helpers", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_20180, type_362, type_11211), Reflex::Literal("setPtr"), method_22472, 0, "iToType;iIndex;oPtr", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_20180, type_24927, type_20132), Reflex::Literal("fillPtrVector"), method_22473, 0, "iToType;iIndices;oPtr", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_20180), Reflex::Literal("dynamicTypeInfo"), method_22474, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("isPresent"), method_22475, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_20180), Reflex::Literal("dynamicTypeInfo_"), method_22476, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST);
}
//------Stub functions for class Wrapper<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>, std::vector<float, std::allocator<float> >, edm::RefToBase<reco::Jet>, unsigned int, edm::helper::AssociationIdenticalKeyReference> > -------------------------------
static void constructor_22483( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >();
  else ::new(mem) ::edm::Wrapper<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >();
}

static void constructor_22484( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >(*(::std::auto_ptr<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)arg[0]);
  else ::new(mem) ::edm::Wrapper<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >(*(::std::auto_ptr<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)arg[0]);
}

static void destructor_22485(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::Wrapper<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->::edm::Wrapper<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >::~Wrapper)();
}
static  void method_22486( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Wrapper<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->product)());
  else   (((const ::edm::Wrapper<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->product)();
}

static  void operator_22487( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Wrapper<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->operator->)());
  else   (((const ::edm::Wrapper<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->operator->)();
}

static  void method_22488( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::Wrapper<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->productTypeInfo)();
  else   (((::edm::Wrapper<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->productTypeInfo)();
}

static  void method_22489( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::Wrapper<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->typeInfo)();
  else   (((::edm::Wrapper<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->typeInfo)();
}

static void constructor_22490( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >((::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>*)arg[0]);
  else ::new(mem) ::edm::Wrapper<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >((::edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>*)arg[0]);
}

static  void method_22491( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((::edm::Wrapper<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->getInterface)());
  else   (((::edm::Wrapper<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->getInterface)();
}

static  void method_22492( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->fillView)(*(const ::edm::ProductID*)arg[0],
    *(::std::vector<const void*>*)arg[1],
    *(::boost::shared_ptr<edm::reftobase::RefVectorHolderBase>*)arg[2]);
}

static  void method_22493( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->setPtr)(*(const ::std::type_info*)arg[0],
    *(unsigned long*)arg[1],
    *(const void**)arg[2]);
}

static  void method_22494( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->fillPtrVector)(*(const ::std::type_info*)arg[0],
    *(const ::std::vector<unsigned long>*)arg[1],
    *(::std::vector<const void*>*)arg[2]);
}

static  void method_22495( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Wrapper<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->dynamicTypeInfo)();
  else   (((const ::edm::Wrapper<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->dynamicTypeInfo)();
}

static  void method_22496( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Wrapper<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->isPresent)());
  else   (((const ::edm::Wrapper<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->isPresent)();
}

static  void method_22497( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Wrapper<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->dynamicTypeInfo_)();
  else   (((const ::edm::Wrapper<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >*)o)->dynamicTypeInfo_)();
}

static void method_newdel_4685( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class Wrapper<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>, std::vector<float, std::allocator<float> >, edm::RefToBase<reco::Jet>, unsigned int, edm::helper::AssociationIdenticalKeyReference> > -------------------------------
void __edm__Wrapper_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_float__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference_s__db_datamem(Reflex::Class*);
void __edm__Wrapper_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_float__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__Wrapper_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_float__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference_s__datamem_bld(&__edm__Wrapper_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_float__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__Wrapper_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_float__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference_s__funcmem_bld(&__edm__Wrapper_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_float__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference_s__db_funcmem);
void __edm__Wrapper_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_float__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::Wrapper<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >"), typeid(::edm::Wrapper<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >), sizeof(::edm::Wrapper<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("o_name"), "edm::Wrapper<reco::JetFloatAssociation::Container>")
  .AddTypedef(type_4860, Reflex::Literal("edm::Wrapper<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >::value_type"))
  .AddTypedef(type_4860, Reflex::Literal("edm::Wrapper<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> >::wrapped_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("Wrapper"), constructor_22483, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_2765), Reflex::Literal("Wrapper"), constructor_22484, 0, "ptr", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~Wrapper"), destructor_22485, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_37073), Reflex::Literal("Wrapper"), constructor_22490, 0, "ptr", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_4685, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__Wrapper_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_float__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__Wrapper_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_float__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference_s__funcmem_bld);
}

//------Delayed data member builder for class Wrapper<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>, std::vector<float, std::allocator<float> >, edm::RefToBase<reco::Jet>, unsigned int, edm::helper::AssociationIdenticalKeyReference> > -------------------
void __edm__Wrapper_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_float__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_1569, Reflex::Literal("present"), OffsetOf(__shadow__::__edm__Wrapper_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_float__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference_s_, present), ::Reflex::PRIVATE)
  .AddDataMember(type_4860, Reflex::Literal("obj"), OffsetOf(__shadow__::__edm__Wrapper_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_float__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference_s_, obj), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class Wrapper<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>, std::vector<float, std::allocator<float> >, edm::RefToBase<reco::Jet>, unsigned int, edm::helper::AssociationIdenticalKeyReference> > -------------------
void __edm__Wrapper_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_float__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_37016), Reflex::Literal("product"), method_22486, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_37016), Reflex::Literal("operator->"), operator_22487, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_20180), Reflex::Literal("productTypeInfo"), method_22488, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_20180), Reflex::Literal("typeInfo"), method_22489, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_37074), Reflex::Literal("getInterface"), method_22491, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_20008, type_20132, type_36516), Reflex::Literal("fillView"), method_22492, 0, "id;pointers;helpers", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_20180, type_362, type_11211), Reflex::Literal("setPtr"), method_22493, 0, "iToType;iIndex;oPtr", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_20180, type_24927, type_20132), Reflex::Literal("fillPtrVector"), method_22494, 0, "iToType;iIndices;oPtr", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_20180), Reflex::Literal("dynamicTypeInfo"), method_22495, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("isPresent"), method_22496, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_20180), Reflex::Literal("dynamicTypeInfo_"), method_22497, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST);
}
//------Stub functions for class Wrapper<std::vector<edm::FwdPtr<reco::PFClusterJet>, std::allocator<edm::FwdPtr<reco::PFClusterJet> > > > -------------------------------
static void constructor_22525( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<std::vector<edm::FwdPtr<reco::PFClusterJet> > >();
  else ::new(mem) ::edm::Wrapper<std::vector<edm::FwdPtr<reco::PFClusterJet> > >();
}

static void constructor_22526( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<std::vector<edm::FwdPtr<reco::PFClusterJet> > >(*(::std::auto_ptr<std::vector<edm::FwdPtr<reco::PFClusterJet> > >*)arg[0]);
  else ::new(mem) ::edm::Wrapper<std::vector<edm::FwdPtr<reco::PFClusterJet> > >(*(::std::auto_ptr<std::vector<edm::FwdPtr<reco::PFClusterJet> > >*)arg[0]);
}

static void destructor_22527(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::Wrapper<std::vector<edm::FwdPtr<reco::PFClusterJet> > >*)o)->::edm::Wrapper<std::vector<edm::FwdPtr<reco::PFClusterJet> > >::~Wrapper)();
}
static  void method_22528( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Wrapper<std::vector<edm::FwdPtr<reco::PFClusterJet> > >*)o)->product)());
  else   (((const ::edm::Wrapper<std::vector<edm::FwdPtr<reco::PFClusterJet> > >*)o)->product)();
}

static  void operator_22529( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Wrapper<std::vector<edm::FwdPtr<reco::PFClusterJet> > >*)o)->operator->)());
  else   (((const ::edm::Wrapper<std::vector<edm::FwdPtr<reco::PFClusterJet> > >*)o)->operator->)();
}

static  void method_22530( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::Wrapper<std::vector<edm::FwdPtr<reco::PFClusterJet> > >*)o)->productTypeInfo)();
  else   (((::edm::Wrapper<std::vector<edm::FwdPtr<reco::PFClusterJet> > >*)o)->productTypeInfo)();
}

static  void method_22531( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::Wrapper<std::vector<edm::FwdPtr<reco::PFClusterJet> > >*)o)->typeInfo)();
  else   (((::edm::Wrapper<std::vector<edm::FwdPtr<reco::PFClusterJet> > >*)o)->typeInfo)();
}

static void constructor_22532( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<std::vector<edm::FwdPtr<reco::PFClusterJet> > >((::std::vector<edm::FwdPtr<reco::PFClusterJet> >*)arg[0]);
  else ::new(mem) ::edm::Wrapper<std::vector<edm::FwdPtr<reco::PFClusterJet> > >((::std::vector<edm::FwdPtr<reco::PFClusterJet> >*)arg[0]);
}

static  void method_22533( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((::edm::Wrapper<std::vector<edm::FwdPtr<reco::PFClusterJet> > >*)o)->getInterface)());
  else   (((::edm::Wrapper<std::vector<edm::FwdPtr<reco::PFClusterJet> > >*)o)->getInterface)();
}

static  void method_22534( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<std::vector<edm::FwdPtr<reco::PFClusterJet> > >*)o)->fillView)(*(const ::edm::ProductID*)arg[0],
    *(::std::vector<const void*>*)arg[1],
    *(::boost::shared_ptr<edm::reftobase::RefVectorHolderBase>*)arg[2]);
}

static  void method_22535( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<std::vector<edm::FwdPtr<reco::PFClusterJet> > >*)o)->setPtr)(*(const ::std::type_info*)arg[0],
    *(unsigned long*)arg[1],
    *(const void**)arg[2]);
}

static  void method_22536( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<std::vector<edm::FwdPtr<reco::PFClusterJet> > >*)o)->fillPtrVector)(*(const ::std::type_info*)arg[0],
    *(const ::std::vector<unsigned long>*)arg[1],
    *(::std::vector<const void*>*)arg[2]);
}

static  void method_22537( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Wrapper<std::vector<edm::FwdPtr<reco::PFClusterJet> > >*)o)->dynamicTypeInfo)();
  else   (((const ::edm::Wrapper<std::vector<edm::FwdPtr<reco::PFClusterJet> > >*)o)->dynamicTypeInfo)();
}

static  void method_22538( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Wrapper<std::vector<edm::FwdPtr<reco::PFClusterJet> > >*)o)->isPresent)());
  else   (((const ::edm::Wrapper<std::vector<edm::FwdPtr<reco::PFClusterJet> > >*)o)->isPresent)();
}

static  void method_22539( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Wrapper<std::vector<edm::FwdPtr<reco::PFClusterJet> > >*)o)->dynamicTypeInfo_)();
  else   (((const ::edm::Wrapper<std::vector<edm::FwdPtr<reco::PFClusterJet> > >*)o)->dynamicTypeInfo_)();
}

static void method_newdel_4687( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<edm::FwdPtr<reco::PFClusterJet> > > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<edm::FwdPtr<reco::PFClusterJet> > > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<edm::FwdPtr<reco::PFClusterJet> > > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<edm::FwdPtr<reco::PFClusterJet> > > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<edm::FwdPtr<reco::PFClusterJet> > > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class Wrapper<std::vector<edm::FwdPtr<reco::PFClusterJet>, std::allocator<edm::FwdPtr<reco::PFClusterJet> > > > -------------------------------
void __edm__Wrapper_std__vector_edm__FwdPtr_reco__PFClusterJet_s_s__db_datamem(Reflex::Class*);
void __edm__Wrapper_std__vector_edm__FwdPtr_reco__PFClusterJet_s_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__Wrapper_std__vector_edm__FwdPtr_reco__PFClusterJet_s_s__datamem_bld(&__edm__Wrapper_std__vector_edm__FwdPtr_reco__PFClusterJet_s_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__Wrapper_std__vector_edm__FwdPtr_reco__PFClusterJet_s_s__funcmem_bld(&__edm__Wrapper_std__vector_edm__FwdPtr_reco__PFClusterJet_s_s__db_funcmem);
void __edm__Wrapper_std__vector_edm__FwdPtr_reco__PFClusterJet_s_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::Wrapper<std::vector<edm::FwdPtr<reco::PFClusterJet> > >"), typeid(::edm::Wrapper<std::vector<edm::FwdPtr<reco::PFClusterJet> > >), sizeof(::edm::Wrapper<std::vector<edm::FwdPtr<reco::PFClusterJet> > >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("o_name"), "edm::Wrapper<reco::PFClusterJetFwdPtrVector>")
  .AddTypedef(type_2960, Reflex::Literal("edm::Wrapper<std::vector<edm::FwdPtr<reco::PFClusterJet> > >::value_type"))
  .AddTypedef(type_2960, Reflex::Literal("edm::Wrapper<std::vector<edm::FwdPtr<reco::PFClusterJet> > >::wrapped_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("Wrapper"), constructor_22525, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_2768), Reflex::Literal("Wrapper"), constructor_22526, 0, "ptr", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~Wrapper"), destructor_22527, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_37083), Reflex::Literal("Wrapper"), constructor_22532, 0, "ptr", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_4687, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__Wrapper_std__vector_edm__FwdPtr_reco__PFClusterJet_s_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__Wrapper_std__vector_edm__FwdPtr_reco__PFClusterJet_s_s__funcmem_bld);
}

//------Delayed data member builder for class Wrapper<std::vector<edm::FwdPtr<reco::PFClusterJet>, std::allocator<edm::FwdPtr<reco::PFClusterJet> > > > -------------------
void __edm__Wrapper_std__vector_edm__FwdPtr_reco__PFClusterJet_s_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_1569, Reflex::Literal("present"), OffsetOf(__shadow__::__edm__Wrapper_std__vector_edm__FwdPtr_reco__PFClusterJet_s_s_, present), ::Reflex::PRIVATE)
  .AddDataMember(type_2960, Reflex::Literal("obj"), OffsetOf(__shadow__::__edm__Wrapper_std__vector_edm__FwdPtr_reco__PFClusterJet_s_s_, obj), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class Wrapper<std::vector<edm::FwdPtr<reco::PFClusterJet>, std::allocator<edm::FwdPtr<reco::PFClusterJet> > > > -------------------
void __edm__Wrapper_std__vector_edm__FwdPtr_reco__PFClusterJet_s_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_37082), Reflex::Literal("product"), method_22528, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_37082), Reflex::Literal("operator->"), operator_22529, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_20180), Reflex::Literal("productTypeInfo"), method_22530, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_20180), Reflex::Literal("typeInfo"), method_22531, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_37084), Reflex::Literal("getInterface"), method_22533, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_20008, type_20132, type_36516), Reflex::Literal("fillView"), method_22534, 0, "id;pointers;helpers", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_20180, type_362, type_11211), Reflex::Literal("setPtr"), method_22535, 0, "iToType;iIndex;oPtr", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_20180, type_24927, type_20132), Reflex::Literal("fillPtrVector"), method_22536, 0, "iToType;iIndices;oPtr", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_20180), Reflex::Literal("dynamicTypeInfo"), method_22537, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("isPresent"), method_22538, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_20180), Reflex::Literal("dynamicTypeInfo_"), method_22539, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST);
}
//------Stub functions for class Wrapper<std::vector<edm::FwdRef<std::vector<reco::PFClusterJet, std::allocator<reco::PFClusterJet> >, reco::PFClusterJet, edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet, std::allocator<reco::PFClusterJet> >, reco::PFClusterJet> >, std::allocator<edm::FwdRef<std::vector<reco::PFClusterJet, std::allocator<reco::PFClusterJet> >, reco::PFClusterJet, edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet, std::allocator<reco::PFClusterJet> >, reco::PFClusterJet> > > > > -------------------------------
static void constructor_22546( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > > >();
  else ::new(mem) ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > > >();
}

static void constructor_22547( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > > >(*(::std::auto_ptr<std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > > >*)arg[0]);
  else ::new(mem) ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > > >(*(::std::auto_ptr<std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > > >*)arg[0]);
}

static void destructor_22548(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > > >*)o)->::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > > >::~Wrapper)();
}
static  void method_22549( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > > >*)o)->product)());
  else   (((const ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > > >*)o)->product)();
}

static  void operator_22550( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > > >*)o)->operator->)());
  else   (((const ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > > >*)o)->operator->)();
}

static  void method_22551( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > > >*)o)->productTypeInfo)();
  else   (((::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > > >*)o)->productTypeInfo)();
}

static  void method_22552( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > > >*)o)->typeInfo)();
  else   (((::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > > >*)o)->typeInfo)();
}

static void constructor_22553( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > > >((::std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)arg[0]);
  else ::new(mem) ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > > >((::std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)arg[0]);
}

static  void method_22554( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > > >*)o)->getInterface)());
  else   (((::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > > >*)o)->getInterface)();
}

static  void method_22555( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > > >*)o)->fillView)(*(const ::edm::ProductID*)arg[0],
    *(::std::vector<const void*>*)arg[1],
    *(::boost::shared_ptr<edm::reftobase::RefVectorHolderBase>*)arg[2]);
}

static  void method_22556( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > > >*)o)->setPtr)(*(const ::std::type_info*)arg[0],
    *(unsigned long*)arg[1],
    *(const void**)arg[2]);
}

static  void method_22557( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > > >*)o)->fillPtrVector)(*(const ::std::type_info*)arg[0],
    *(const ::std::vector<unsigned long>*)arg[1],
    *(::std::vector<const void*>*)arg[2]);
}

static  void method_22558( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > > >*)o)->dynamicTypeInfo)();
  else   (((const ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > > >*)o)->dynamicTypeInfo)();
}

static  void method_22559( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > > >*)o)->isPresent)());
  else   (((const ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > > >*)o)->isPresent)();
}

static  void method_22560( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > > >*)o)->dynamicTypeInfo_)();
  else   (((const ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > > >*)o)->dynamicTypeInfo_)();
}

static void method_newdel_4688( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > > > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > > > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > > > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > > > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > > > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class Wrapper<std::vector<edm::FwdRef<std::vector<reco::PFClusterJet, std::allocator<reco::PFClusterJet> >, reco::PFClusterJet, edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet, std::allocator<reco::PFClusterJet> >, reco::PFClusterJet> >, std::allocator<edm::FwdRef<std::vector<reco::PFClusterJet, std::allocator<reco::PFClusterJet> >, reco::PFClusterJet, edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet, std::allocator<reco::PFClusterJet> >, reco::PFClusterJet> > > > > -------------------------------
void __edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s_s_s__db_datamem(Reflex::Class*);
void __edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s_s_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s_s_s__datamem_bld(&__edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s_s_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s_s_s__funcmem_bld(&__edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s_s_s__db_funcmem);
void __edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s_s_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > > >"), typeid(::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > > >), sizeof(::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > > >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("o_name"), "edm::Wrapper<reco::PFClusterJetFwdRefVector>")
  .AddTypedef(type_2961, Reflex::Literal("edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > > >::value_type"))
  .AddTypedef(type_2961, Reflex::Literal("edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > > >::wrapped_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("Wrapper"), constructor_22546, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_2769), Reflex::Literal("Wrapper"), constructor_22547, 0, "ptr", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~Wrapper"), destructor_22548, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_37088), Reflex::Literal("Wrapper"), constructor_22553, 0, "ptr", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_4688, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s_s_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s_s_s__funcmem_bld);
}

//------Delayed data member builder for class Wrapper<std::vector<edm::FwdRef<std::vector<reco::PFClusterJet, std::allocator<reco::PFClusterJet> >, reco::PFClusterJet, edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet, std::allocator<reco::PFClusterJet> >, reco::PFClusterJet> >, std::allocator<edm::FwdRef<std::vector<reco::PFClusterJet, std::allocator<reco::PFClusterJet> >, reco::PFClusterJet, edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet, std::allocator<reco::PFClusterJet> >, reco::PFClusterJet> > > > > -------------------
void __edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s_s_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_1569, Reflex::Literal("present"), OffsetOf(__shadow__::__edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s_s_s_, present), ::Reflex::PRIVATE)
  .AddDataMember(type_2961, Reflex::Literal("obj"), OffsetOf(__shadow__::__edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s_s_s_, obj), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class Wrapper<std::vector<edm::FwdRef<std::vector<reco::PFClusterJet, std::allocator<reco::PFClusterJet> >, reco::PFClusterJet, edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet, std::allocator<reco::PFClusterJet> >, reco::PFClusterJet> >, std::allocator<edm::FwdRef<std::vector<reco::PFClusterJet, std::allocator<reco::PFClusterJet> >, reco::PFClusterJet, edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet, std::allocator<reco::PFClusterJet> >, reco::PFClusterJet> > > > > -------------------
void __edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s_s_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_37087), Reflex::Literal("product"), method_22549, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_37087), Reflex::Literal("operator->"), operator_22550, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_20180), Reflex::Literal("productTypeInfo"), method_22551, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_20180), Reflex::Literal("typeInfo"), method_22552, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_37089), Reflex::Literal("getInterface"), method_22554, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_20008, type_20132, type_36516), Reflex::Literal("fillView"), method_22555, 0, "id;pointers;helpers", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_20180, type_362, type_11211), Reflex::Literal("setPtr"), method_22556, 0, "iToType;iIndex;oPtr", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_20180, type_24927, type_20132), Reflex::Literal("fillPtrVector"), method_22557, 0, "iToType;iIndices;oPtr", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_20180), Reflex::Literal("dynamicTypeInfo"), method_22558, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("isPresent"), method_22559, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_20180), Reflex::Literal("dynamicTypeInfo_"), method_22560, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST);
}
//------Stub functions for class Wrapper<edm::RefVector<std::vector<reco::PFClusterJet, std::allocator<reco::PFClusterJet> >, reco::PFClusterJet, edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet, std::allocator<reco::PFClusterJet> >, reco::PFClusterJet> > > -------------------------------
static void constructor_22567( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<edm::RefVector<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >();
  else ::new(mem) ::edm::Wrapper<edm::RefVector<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >();
}

static void constructor_22568( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<edm::RefVector<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >(*(::std::auto_ptr<edm::RefVector<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)arg[0]);
  else ::new(mem) ::edm::Wrapper<edm::RefVector<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >(*(::std::auto_ptr<edm::RefVector<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)arg[0]);
}

static void destructor_22569(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::Wrapper<edm::RefVector<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->::edm::Wrapper<edm::RefVector<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >::~Wrapper)();
}
static  void method_22570( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Wrapper<edm::RefVector<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->product)());
  else   (((const ::edm::Wrapper<edm::RefVector<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->product)();
}

static  void operator_22571( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Wrapper<edm::RefVector<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->operator->)());
  else   (((const ::edm::Wrapper<edm::RefVector<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->operator->)();
}

static  void method_22572( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::Wrapper<edm::RefVector<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->productTypeInfo)();
  else   (((::edm::Wrapper<edm::RefVector<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->productTypeInfo)();
}

static  void method_22573( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::Wrapper<edm::RefVector<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->typeInfo)();
  else   (((::edm::Wrapper<edm::RefVector<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->typeInfo)();
}

static void constructor_22574( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<edm::RefVector<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >((::edm::RefVector<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)arg[0]);
  else ::new(mem) ::edm::Wrapper<edm::RefVector<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >((::edm::RefVector<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)arg[0]);
}

static  void method_22575( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((::edm::Wrapper<edm::RefVector<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->getInterface)());
  else   (((::edm::Wrapper<edm::RefVector<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->getInterface)();
}

static  void method_22576( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<edm::RefVector<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->fillView)(*(const ::edm::ProductID*)arg[0],
    *(::std::vector<const void*>*)arg[1],
    *(::boost::shared_ptr<edm::reftobase::RefVectorHolderBase>*)arg[2]);
}

static  void method_22577( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<edm::RefVector<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->setPtr)(*(const ::std::type_info*)arg[0],
    *(unsigned long*)arg[1],
    *(const void**)arg[2]);
}

static  void method_22578( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<edm::RefVector<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->fillPtrVector)(*(const ::std::type_info*)arg[0],
    *(const ::std::vector<unsigned long>*)arg[1],
    *(::std::vector<const void*>*)arg[2]);
}

static  void method_22579( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Wrapper<edm::RefVector<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->dynamicTypeInfo)();
  else   (((const ::edm::Wrapper<edm::RefVector<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->dynamicTypeInfo)();
}

static  void method_22580( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Wrapper<edm::RefVector<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->isPresent)());
  else   (((const ::edm::Wrapper<edm::RefVector<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->isPresent)();
}

static  void method_22581( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Wrapper<edm::RefVector<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->dynamicTypeInfo_)();
  else   (((const ::edm::Wrapper<edm::RefVector<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->dynamicTypeInfo_)();
}

static void method_newdel_4689( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<edm::RefVector<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<edm::RefVector<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<edm::RefVector<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<edm::RefVector<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<edm::RefVector<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class Wrapper<edm::RefVector<std::vector<reco::PFClusterJet, std::allocator<reco::PFClusterJet> >, reco::PFClusterJet, edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet, std::allocator<reco::PFClusterJet> >, reco::PFClusterJet> > > -------------------------------
void __edm__Wrapper_edm__RefVector_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s_s__db_datamem(Reflex::Class*);
void __edm__Wrapper_edm__RefVector_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__Wrapper_edm__RefVector_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s_s__datamem_bld(&__edm__Wrapper_edm__RefVector_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__Wrapper_edm__RefVector_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s_s__funcmem_bld(&__edm__Wrapper_edm__RefVector_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s_s__db_funcmem);
void __edm__Wrapper_edm__RefVector_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::Wrapper<edm::RefVector<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >"), typeid(::edm::Wrapper<edm::RefVector<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >), sizeof(::edm::Wrapper<edm::RefVector<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("o_name"), "edm::Wrapper<reco::PFClusterJetRefVector>")
  .AddTypedef(type_4629, Reflex::Literal("edm::Wrapper<edm::RefVector<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >::value_type"))
  .AddTypedef(type_4629, Reflex::Literal("edm::Wrapper<edm::RefVector<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >::wrapped_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("Wrapper"), constructor_22567, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_2770), Reflex::Literal("Wrapper"), constructor_22568, 0, "ptr", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~Wrapper"), destructor_22569, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_37093), Reflex::Literal("Wrapper"), constructor_22574, 0, "ptr", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_4689, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__Wrapper_edm__RefVector_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__Wrapper_edm__RefVector_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s_s__funcmem_bld);
}

//------Delayed data member builder for class Wrapper<edm::RefVector<std::vector<reco::PFClusterJet, std::allocator<reco::PFClusterJet> >, reco::PFClusterJet, edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet, std::allocator<reco::PFClusterJet> >, reco::PFClusterJet> > > -------------------
void __edm__Wrapper_edm__RefVector_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_1569, Reflex::Literal("present"), OffsetOf(__shadow__::__edm__Wrapper_edm__RefVector_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s_s_, present), ::Reflex::PRIVATE)
  .AddDataMember(type_4629, Reflex::Literal("obj"), OffsetOf(__shadow__::__edm__Wrapper_edm__RefVector_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s_s_, obj), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class Wrapper<edm::RefVector<std::vector<reco::PFClusterJet, std::allocator<reco::PFClusterJet> >, reco::PFClusterJet, edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet, std::allocator<reco::PFClusterJet> >, reco::PFClusterJet> > > -------------------
void __edm__Wrapper_edm__RefVector_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_37092), Reflex::Literal("product"), method_22570, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_37092), Reflex::Literal("operator->"), operator_22571, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_20180), Reflex::Literal("productTypeInfo"), method_22572, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_20180), Reflex::Literal("typeInfo"), method_22573, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_37094), Reflex::Literal("getInterface"), method_22575, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_20008, type_20132, type_36516), Reflex::Literal("fillView"), method_22576, 0, "id;pointers;helpers", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_20180, type_362, type_11211), Reflex::Literal("setPtr"), method_22577, 0, "iToType;iIndex;oPtr", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_20180, type_24927, type_20132), Reflex::Literal("fillPtrVector"), method_22578, 0, "iToType;iIndices;oPtr", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_20180), Reflex::Literal("dynamicTypeInfo"), method_22579, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("isPresent"), method_22580, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_20180), Reflex::Literal("dynamicTypeInfo_"), method_22581, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST);
}
//------Stub functions for class Wrapper<std::vector<edm::FwdPtr<reco::TrackJet>, std::allocator<edm::FwdPtr<reco::TrackJet> > > > -------------------------------
static void constructor_22651( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<std::vector<edm::FwdPtr<reco::TrackJet> > >();
  else ::new(mem) ::edm::Wrapper<std::vector<edm::FwdPtr<reco::TrackJet> > >();
}

static void constructor_22652( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<std::vector<edm::FwdPtr<reco::TrackJet> > >(*(::std::auto_ptr<std::vector<edm::FwdPtr<reco::TrackJet> > >*)arg[0]);
  else ::new(mem) ::edm::Wrapper<std::vector<edm::FwdPtr<reco::TrackJet> > >(*(::std::auto_ptr<std::vector<edm::FwdPtr<reco::TrackJet> > >*)arg[0]);
}

static void destructor_22653(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::Wrapper<std::vector<edm::FwdPtr<reco::TrackJet> > >*)o)->::edm::Wrapper<std::vector<edm::FwdPtr<reco::TrackJet> > >::~Wrapper)();
}
static  void method_22654( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Wrapper<std::vector<edm::FwdPtr<reco::TrackJet> > >*)o)->product)());
  else   (((const ::edm::Wrapper<std::vector<edm::FwdPtr<reco::TrackJet> > >*)o)->product)();
}

static  void operator_22655( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Wrapper<std::vector<edm::FwdPtr<reco::TrackJet> > >*)o)->operator->)());
  else   (((const ::edm::Wrapper<std::vector<edm::FwdPtr<reco::TrackJet> > >*)o)->operator->)();
}

static  void method_22656( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::Wrapper<std::vector<edm::FwdPtr<reco::TrackJet> > >*)o)->productTypeInfo)();
  else   (((::edm::Wrapper<std::vector<edm::FwdPtr<reco::TrackJet> > >*)o)->productTypeInfo)();
}

static  void method_22657( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::Wrapper<std::vector<edm::FwdPtr<reco::TrackJet> > >*)o)->typeInfo)();
  else   (((::edm::Wrapper<std::vector<edm::FwdPtr<reco::TrackJet> > >*)o)->typeInfo)();
}

static void constructor_22658( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<std::vector<edm::FwdPtr<reco::TrackJet> > >((::std::vector<edm::FwdPtr<reco::TrackJet> >*)arg[0]);
  else ::new(mem) ::edm::Wrapper<std::vector<edm::FwdPtr<reco::TrackJet> > >((::std::vector<edm::FwdPtr<reco::TrackJet> >*)arg[0]);
}

static  void method_22659( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((::edm::Wrapper<std::vector<edm::FwdPtr<reco::TrackJet> > >*)o)->getInterface)());
  else   (((::edm::Wrapper<std::vector<edm::FwdPtr<reco::TrackJet> > >*)o)->getInterface)();
}

static  void method_22660( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<std::vector<edm::FwdPtr<reco::TrackJet> > >*)o)->fillView)(*(const ::edm::ProductID*)arg[0],
    *(::std::vector<const void*>*)arg[1],
    *(::boost::shared_ptr<edm::reftobase::RefVectorHolderBase>*)arg[2]);
}

static  void method_22661( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<std::vector<edm::FwdPtr<reco::TrackJet> > >*)o)->setPtr)(*(const ::std::type_info*)arg[0],
    *(unsigned long*)arg[1],
    *(const void**)arg[2]);
}

static  void method_22662( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<std::vector<edm::FwdPtr<reco::TrackJet> > >*)o)->fillPtrVector)(*(const ::std::type_info*)arg[0],
    *(const ::std::vector<unsigned long>*)arg[1],
    *(::std::vector<const void*>*)arg[2]);
}

static  void method_22663( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Wrapper<std::vector<edm::FwdPtr<reco::TrackJet> > >*)o)->dynamicTypeInfo)();
  else   (((const ::edm::Wrapper<std::vector<edm::FwdPtr<reco::TrackJet> > >*)o)->dynamicTypeInfo)();
}

static  void method_22664( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Wrapper<std::vector<edm::FwdPtr<reco::TrackJet> > >*)o)->isPresent)());
  else   (((const ::edm::Wrapper<std::vector<edm::FwdPtr<reco::TrackJet> > >*)o)->isPresent)();
}

static  void method_22665( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Wrapper<std::vector<edm::FwdPtr<reco::TrackJet> > >*)o)->dynamicTypeInfo_)();
  else   (((const ::edm::Wrapper<std::vector<edm::FwdPtr<reco::TrackJet> > >*)o)->dynamicTypeInfo_)();
}

static void method_newdel_4693( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<edm::FwdPtr<reco::TrackJet> > > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<edm::FwdPtr<reco::TrackJet> > > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<edm::FwdPtr<reco::TrackJet> > > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<edm::FwdPtr<reco::TrackJet> > > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<edm::FwdPtr<reco::TrackJet> > > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class Wrapper<std::vector<edm::FwdPtr<reco::TrackJet>, std::allocator<edm::FwdPtr<reco::TrackJet> > > > -------------------------------
void __edm__Wrapper_std__vector_edm__FwdPtr_reco__TrackJet_s_s__db_datamem(Reflex::Class*);
void __edm__Wrapper_std__vector_edm__FwdPtr_reco__TrackJet_s_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__Wrapper_std__vector_edm__FwdPtr_reco__TrackJet_s_s__datamem_bld(&__edm__Wrapper_std__vector_edm__FwdPtr_reco__TrackJet_s_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__Wrapper_std__vector_edm__FwdPtr_reco__TrackJet_s_s__funcmem_bld(&__edm__Wrapper_std__vector_edm__FwdPtr_reco__TrackJet_s_s__db_funcmem);
void __edm__Wrapper_std__vector_edm__FwdPtr_reco__TrackJet_s_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::Wrapper<std::vector<edm::FwdPtr<reco::TrackJet> > >"), typeid(::edm::Wrapper<std::vector<edm::FwdPtr<reco::TrackJet> > >), sizeof(::edm::Wrapper<std::vector<edm::FwdPtr<reco::TrackJet> > >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("o_name"), "edm::Wrapper<reco::TrackJetFwdPtrVector>")
  .AddTypedef(type_2968, Reflex::Literal("edm::Wrapper<std::vector<edm::FwdPtr<reco::TrackJet> > >::value_type"))
  .AddTypedef(type_2968, Reflex::Literal("edm::Wrapper<std::vector<edm::FwdPtr<reco::TrackJet> > >::wrapped_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("Wrapper"), constructor_22651, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_2774), Reflex::Literal("Wrapper"), constructor_22652, 0, "ptr", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~Wrapper"), destructor_22653, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_37111), Reflex::Literal("Wrapper"), constructor_22658, 0, "ptr", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_4693, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__Wrapper_std__vector_edm__FwdPtr_reco__TrackJet_s_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__Wrapper_std__vector_edm__FwdPtr_reco__TrackJet_s_s__funcmem_bld);
}

//------Delayed data member builder for class Wrapper<std::vector<edm::FwdPtr<reco::TrackJet>, std::allocator<edm::FwdPtr<reco::TrackJet> > > > -------------------
void __edm__Wrapper_std__vector_edm__FwdPtr_reco__TrackJet_s_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_1569, Reflex::Literal("present"), OffsetOf(__shadow__::__edm__Wrapper_std__vector_edm__FwdPtr_reco__TrackJet_s_s_, present), ::Reflex::PRIVATE)
  .AddDataMember(type_2968, Reflex::Literal("obj"), OffsetOf(__shadow__::__edm__Wrapper_std__vector_edm__FwdPtr_reco__TrackJet_s_s_, obj), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class Wrapper<std::vector<edm::FwdPtr<reco::TrackJet>, std::allocator<edm::FwdPtr<reco::TrackJet> > > > -------------------
void __edm__Wrapper_std__vector_edm__FwdPtr_reco__TrackJet_s_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_37110), Reflex::Literal("product"), method_22654, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_37110), Reflex::Literal("operator->"), operator_22655, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_20180), Reflex::Literal("productTypeInfo"), method_22656, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_20180), Reflex::Literal("typeInfo"), method_22657, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_37112), Reflex::Literal("getInterface"), method_22659, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_20008, type_20132, type_36516), Reflex::Literal("fillView"), method_22660, 0, "id;pointers;helpers", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_20180, type_362, type_11211), Reflex::Literal("setPtr"), method_22661, 0, "iToType;iIndex;oPtr", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_20180, type_24927, type_20132), Reflex::Literal("fillPtrVector"), method_22662, 0, "iToType;iIndices;oPtr", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_20180), Reflex::Literal("dynamicTypeInfo"), method_22663, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("isPresent"), method_22664, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_20180), Reflex::Literal("dynamicTypeInfo_"), method_22665, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST);
}
//------Stub functions for class Wrapper<std::vector<edm::FwdRef<std::vector<reco::TrackJet, std::allocator<reco::TrackJet> >, reco::TrackJet, edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet, std::allocator<reco::TrackJet> >, reco::TrackJet> >, std::allocator<edm::FwdRef<std::vector<reco::TrackJet, std::allocator<reco::TrackJet> >, reco::TrackJet, edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet, std::allocator<reco::TrackJet> >, reco::TrackJet> > > > > -------------------------------
static void constructor_22672( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > > >();
  else ::new(mem) ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > > >();
}

static void constructor_22673( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > > >(*(::std::auto_ptr<std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > > >*)arg[0]);
  else ::new(mem) ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > > >(*(::std::auto_ptr<std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > > >*)arg[0]);
}

static void destructor_22674(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > > >*)o)->::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > > >::~Wrapper)();
}
static  void method_22675( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > > >*)o)->product)());
  else   (((const ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > > >*)o)->product)();
}

static  void operator_22676( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > > >*)o)->operator->)());
  else   (((const ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > > >*)o)->operator->)();
}

static  void method_22677( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > > >*)o)->productTypeInfo)();
  else   (((::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > > >*)o)->productTypeInfo)();
}

static  void method_22678( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > > >*)o)->typeInfo)();
  else   (((::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > > >*)o)->typeInfo)();
}

static void constructor_22679( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > > >((::std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)arg[0]);
  else ::new(mem) ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > > >((::std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)arg[0]);
}

static  void method_22680( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > > >*)o)->getInterface)());
  else   (((::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > > >*)o)->getInterface)();
}

static  void method_22681( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > > >*)o)->fillView)(*(const ::edm::ProductID*)arg[0],
    *(::std::vector<const void*>*)arg[1],
    *(::boost::shared_ptr<edm::reftobase::RefVectorHolderBase>*)arg[2]);
}

static  void method_22682( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > > >*)o)->setPtr)(*(const ::std::type_info*)arg[0],
    *(unsigned long*)arg[1],
    *(const void**)arg[2]);
}

static  void method_22683( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > > >*)o)->fillPtrVector)(*(const ::std::type_info*)arg[0],
    *(const ::std::vector<unsigned long>*)arg[1],
    *(::std::vector<const void*>*)arg[2]);
}

static  void method_22684( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > > >*)o)->dynamicTypeInfo)();
  else   (((const ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > > >*)o)->dynamicTypeInfo)();
}

static  void method_22685( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > > >*)o)->isPresent)());
  else   (((const ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > > >*)o)->isPresent)();
}

static  void method_22686( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > > >*)o)->dynamicTypeInfo_)();
  else   (((const ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > > >*)o)->dynamicTypeInfo_)();
}

static void method_newdel_4694( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > > > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > > > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > > > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > > > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > > > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class Wrapper<std::vector<edm::FwdRef<std::vector<reco::TrackJet, std::allocator<reco::TrackJet> >, reco::TrackJet, edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet, std::allocator<reco::TrackJet> >, reco::TrackJet> >, std::allocator<edm::FwdRef<std::vector<reco::TrackJet, std::allocator<reco::TrackJet> >, reco::TrackJet, edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet, std::allocator<reco::TrackJet> >, reco::TrackJet> > > > > -------------------------------
void __edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s_s_s__db_datamem(Reflex::Class*);
void __edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s_s_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s_s_s__datamem_bld(&__edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s_s_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s_s_s__funcmem_bld(&__edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s_s_s__db_funcmem);
void __edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s_s_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > > >"), typeid(::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > > >), sizeof(::edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > > >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("o_name"), "edm::Wrapper<reco::TrackJetFwdRefVector>")
  .AddTypedef(type_2969, Reflex::Literal("edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > > >::value_type"))
  .AddTypedef(type_2969, Reflex::Literal("edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > > >::wrapped_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("Wrapper"), constructor_22672, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_2775), Reflex::Literal("Wrapper"), constructor_22673, 0, "ptr", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~Wrapper"), destructor_22674, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_37116), Reflex::Literal("Wrapper"), constructor_22679, 0, "ptr", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_4694, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s_s_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s_s_s__funcmem_bld);
}

//------Delayed data member builder for class Wrapper<std::vector<edm::FwdRef<std::vector<reco::TrackJet, std::allocator<reco::TrackJet> >, reco::TrackJet, edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet, std::allocator<reco::TrackJet> >, reco::TrackJet> >, std::allocator<edm::FwdRef<std::vector<reco::TrackJet, std::allocator<reco::TrackJet> >, reco::TrackJet, edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet, std::allocator<reco::TrackJet> >, reco::TrackJet> > > > > -------------------
void __edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s_s_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_1569, Reflex::Literal("present"), OffsetOf(__shadow__::__edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s_s_s_, present), ::Reflex::PRIVATE)
  .AddDataMember(type_2969, Reflex::Literal("obj"), OffsetOf(__shadow__::__edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s_s_s_, obj), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class Wrapper<std::vector<edm::FwdRef<std::vector<reco::TrackJet, std::allocator<reco::TrackJet> >, reco::TrackJet, edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet, std::allocator<reco::TrackJet> >, reco::TrackJet> >, std::allocator<edm::FwdRef<std::vector<reco::TrackJet, std::allocator<reco::TrackJet> >, reco::TrackJet, edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet, std::allocator<reco::TrackJet> >, reco::TrackJet> > > > > -------------------
void __edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s_s_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_37115), Reflex::Literal("product"), method_22675, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_37115), Reflex::Literal("operator->"), operator_22676, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_20180), Reflex::Literal("productTypeInfo"), method_22677, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_20180), Reflex::Literal("typeInfo"), method_22678, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_37117), Reflex::Literal("getInterface"), method_22680, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_20008, type_20132, type_36516), Reflex::Literal("fillView"), method_22681, 0, "id;pointers;helpers", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_20180, type_362, type_11211), Reflex::Literal("setPtr"), method_22682, 0, "iToType;iIndex;oPtr", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_20180, type_24927, type_20132), Reflex::Literal("fillPtrVector"), method_22683, 0, "iToType;iIndices;oPtr", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_20180), Reflex::Literal("dynamicTypeInfo"), method_22684, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("isPresent"), method_22685, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_20180), Reflex::Literal("dynamicTypeInfo_"), method_22686, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST);
}
//------Stub functions for class Wrapper<edm::RefVector<std::vector<reco::TrackJet, std::allocator<reco::TrackJet> >, reco::TrackJet, edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet, std::allocator<reco::TrackJet> >, reco::TrackJet> > > -------------------------------
static void constructor_22693( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<edm::RefVector<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >();
  else ::new(mem) ::edm::Wrapper<edm::RefVector<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >();
}

static void constructor_22694( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<edm::RefVector<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >(*(::std::auto_ptr<edm::RefVector<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)arg[0]);
  else ::new(mem) ::edm::Wrapper<edm::RefVector<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >(*(::std::auto_ptr<edm::RefVector<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)arg[0]);
}

static void destructor_22695(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::Wrapper<edm::RefVector<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->::edm::Wrapper<edm::RefVector<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >::~Wrapper)();
}
static  void method_22696( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Wrapper<edm::RefVector<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->product)());
  else   (((const ::edm::Wrapper<edm::RefVector<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->product)();
}

static  void operator_22697( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::Wrapper<edm::RefVector<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->operator->)());
  else   (((const ::edm::Wrapper<edm::RefVector<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->operator->)();
}

static  void method_22698( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::Wrapper<edm::RefVector<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->productTypeInfo)();
  else   (((::edm::Wrapper<edm::RefVector<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->productTypeInfo)();
}

static  void method_22699( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::Wrapper<edm::RefVector<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->typeInfo)();
  else   (((::edm::Wrapper<edm::RefVector<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->typeInfo)();
}

static void constructor_22700( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::Wrapper<edm::RefVector<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >((::edm::RefVector<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)arg[0]);
  else ::new(mem) ::edm::Wrapper<edm::RefVector<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >((::edm::RefVector<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)arg[0]);
}

static  void method_22701( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((::edm::Wrapper<edm::RefVector<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->getInterface)());
  else   (((::edm::Wrapper<edm::RefVector<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->getInterface)();
}

static  void method_22702( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<edm::RefVector<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->fillView)(*(const ::edm::ProductID*)arg[0],
    *(::std::vector<const void*>*)arg[1],
    *(::boost::shared_ptr<edm::reftobase::RefVectorHolderBase>*)arg[2]);
}

static  void method_22703( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<edm::RefVector<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->setPtr)(*(const ::std::type_info*)arg[0],
    *(unsigned long*)arg[1],
    *(const void**)arg[2]);
}

static  void method_22704( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((const ::edm::Wrapper<edm::RefVector<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->fillPtrVector)(*(const ::std::type_info*)arg[0],
    *(const ::std::vector<unsigned long>*)arg[1],
    *(::std::vector<const void*>*)arg[2]);
}

static  void method_22705( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Wrapper<edm::RefVector<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->dynamicTypeInfo)();
  else   (((const ::edm::Wrapper<edm::RefVector<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->dynamicTypeInfo)();
}

static  void method_22706( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::Wrapper<edm::RefVector<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->isPresent)());
  else   (((const ::edm::Wrapper<edm::RefVector<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->isPresent)();
}

static  void method_22707( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::Wrapper<edm::RefVector<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->dynamicTypeInfo_)();
  else   (((const ::edm::Wrapper<edm::RefVector<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->dynamicTypeInfo_)();
}

static void method_newdel_4695( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<edm::RefVector<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<edm::RefVector<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<edm::RefVector<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<edm::RefVector<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::Wrapper<edm::RefVector<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

//------Dictionary for class Wrapper<edm::RefVector<std::vector<reco::TrackJet, std::allocator<reco::TrackJet> >, reco::TrackJet, edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet, std::allocator<reco::TrackJet> >, reco::TrackJet> > > -------------------------------
void __edm__Wrapper_edm__RefVector_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s_s__db_datamem(Reflex::Class*);
void __edm__Wrapper_edm__RefVector_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__Wrapper_edm__RefVector_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s_s__datamem_bld(&__edm__Wrapper_edm__RefVector_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__Wrapper_edm__RefVector_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s_s__funcmem_bld(&__edm__Wrapper_edm__RefVector_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s_s__db_funcmem);
void __edm__Wrapper_edm__RefVector_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::Wrapper<edm::RefVector<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >"), typeid(::edm::Wrapper<edm::RefVector<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >), sizeof(::edm::Wrapper<edm::RefVector<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("o_name"), "edm::Wrapper<reco::TrackJetRefVector>")
  .AddTypedef(type_4639, Reflex::Literal("edm::Wrapper<edm::RefVector<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >::value_type"))
  .AddTypedef(type_4639, Reflex::Literal("edm::Wrapper<edm::RefVector<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >::wrapped_type"))
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("Wrapper"), constructor_22693, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_2776), Reflex::Literal("Wrapper"), constructor_22694, 0, "ptr", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~Wrapper"), destructor_22695, 0, 0, ::Reflex::PUBLIC | ::Reflex::DESTRUCTOR )
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_37121), Reflex::Literal("Wrapper"), constructor_22700, 0, "ptr", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_4695, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__Wrapper_edm__RefVector_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__Wrapper_edm__RefVector_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s_s__funcmem_bld);
}

//------Delayed data member builder for class Wrapper<edm::RefVector<std::vector<reco::TrackJet, std::allocator<reco::TrackJet> >, reco::TrackJet, edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet, std::allocator<reco::TrackJet> >, reco::TrackJet> > > -------------------
void __edm__Wrapper_edm__RefVector_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_1569, Reflex::Literal("present"), OffsetOf(__shadow__::__edm__Wrapper_edm__RefVector_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s_s_, present), ::Reflex::PRIVATE)
  .AddDataMember(type_4639, Reflex::Literal("obj"), OffsetOf(__shadow__::__edm__Wrapper_edm__RefVector_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s_s_, obj), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class Wrapper<edm::RefVector<std::vector<reco::TrackJet, std::allocator<reco::TrackJet> >, reco::TrackJet, edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet, std::allocator<reco::TrackJet> >, reco::TrackJet> > > -------------------
void __edm__Wrapper_edm__RefVector_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_37120), Reflex::Literal("product"), method_22696, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_37120), Reflex::Literal("operator->"), operator_22697, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_20180), Reflex::Literal("productTypeInfo"), method_22698, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_20180), Reflex::Literal("typeInfo"), method_22699, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_37122), Reflex::Literal("getInterface"), method_22701, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_20008, type_20132, type_36516), Reflex::Literal("fillView"), method_22702, 0, "id;pointers;helpers", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_20180, type_362, type_11211), Reflex::Literal("setPtr"), method_22703, 0, "iToType;iIndex;oPtr", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_20180, type_24927, type_20132), Reflex::Literal("fillPtrVector"), method_22704, 0, "iToType;iIndices;oPtr", ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_20180), Reflex::Literal("dynamicTypeInfo"), method_22705, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("isPresent"), method_22706, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_20180), Reflex::Literal("dynamicTypeInfo_"), method_22707, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST);
}
//------Stub functions for class RefHolder<edm::Ref<std::vector<reco::PFClusterJet, std::allocator<reco::PFClusterJet> >, reco::PFClusterJet, edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet, std::allocator<reco::PFClusterJet> >, reco::PFClusterJet> > > -------------------------------
static  void operator_37184( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->operator=)(*(const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)arg[0]);
  else   (((::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->operator=)(*(const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)arg[0]);
}

static void constructor_37185( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >(*(const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)arg[0]);
  else ::new(mem) ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >(*(const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)arg[0]);
}

static void constructor_37186( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >();
  else ::new(mem) ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >();
}

static void constructor_37187( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >(*(const ::edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)arg[0]);
  else ::new(mem) ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >(*(const ::edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)arg[0]);
}

static  void method_37188( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->swap)(*(::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)arg[0]);
}

static void destructor_37189(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >::~RefHolder)();
}
static  void method_37190( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->clone)());
  else   (((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->clone)();
}

static  void method_37191( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::ProductID)((((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->id)());
  else   (((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->id)();
}

static  void method_37192( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (size_t)((((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->key)());
  else   (((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->key)();
}

static  void method_37193( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->isEqualTo)(*(const ::edm::reftobase::RefHolderBase*)arg[0]));
  else   (((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->isEqualTo)(*(const ::edm::reftobase::RefHolderBase*)arg[0]);
}

static  void method_37194( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->fillRefIfMyTypeMatches)(*(::edm::reftobase::RefHolderBase*)arg[0],
    *(::std::basic_string<char>*)arg[1]));
  else   (((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->fillRefIfMyTypeMatches)(*(::edm::reftobase::RefHolderBase*)arg[0],
    *(::std::basic_string<char>*)arg[1]);
}

static  void method_37195( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->getRef)();
  else   (((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->getRef)();
}

static  void method_37196( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->setRef)(*(const ::edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)arg[0]);
}

static  void method_37197( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::auto_ptr<edm::reftobase::RefVectorHolderBase>)((((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->makeVectorHolder)());
  else   (((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->makeVectorHolder)();
}

static  void method_37198( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->productGetter)());
  else   (((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->productGetter)();
}

static  void method_37199( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->hasProductCache)());
  else   (((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->hasProductCache)();
}

static  void method_37200( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->product)());
  else   (((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->product)();
}

static  void method_37201( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->isAvailable)());
  else   (((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->isAvailable)();
}

static  void method_37202( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (short)((((::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->Class_Version)());
  else   (((::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->Class_Version)();
}

static void method_newdel_22942( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

static void method_x93( void* retaddr, void*, const std::vector<void*>&, void*)
{
  typedef std::vector<std::pair< ::Reflex::Base, int> > Bases_t;
  static Bases_t s_bases;
  if ( !s_bases.size() ) {
    s_bases.push_back(std::make_pair(::Reflex::Base( ::Reflex::TypeBuilder(Reflex::Literal("edm::reftobase::RefHolderBase")), ::Reflex::BaseOffset< ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >,::edm::reftobase::RefHolderBase >::Get(),::Reflex::PUBLIC), 0));
  }
  if (retaddr) *(Bases_t**)retaddr = &s_bases;
}

//------Dictionary for class RefHolder<edm::Ref<std::vector<reco::PFClusterJet, std::allocator<reco::PFClusterJet> >, reco::PFClusterJet, edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet, std::allocator<reco::PFClusterJet> >, reco::PFClusterJet> > > -------------------------------
void __edm__reftobase__RefHolder_edm__Ref_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s_s__db_datamem(Reflex::Class*);
void __edm__reftobase__RefHolder_edm__Ref_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__reftobase__RefHolder_edm__Ref_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s_s__datamem_bld(&__edm__reftobase__RefHolder_edm__Ref_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__reftobase__RefHolder_edm__Ref_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s_s__funcmem_bld(&__edm__reftobase__RefHolder_edm__Ref_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s_s__db_funcmem);
void __edm__reftobase__RefHolder_edm__Ref_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::reftobase::RefHolder<edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >"), typeid(::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >), sizeof(::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::VIRTUAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("ClassVersion"), ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >::Class_Version())
  .AddProperty(Reflex::Literal("o_name"), "edm::reftobase::RefHolder<reco::PFClusterJetRef>")
  .AddBase(type_12419, ::Reflex::BaseOffset< ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >, ::edm::reftobase::RefHolderBase >::Get(), ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_42325, type_42326), Reflex::Literal("operator="), operator_37184, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_42326), Reflex::Literal("RefHolder"), constructor_37185, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("RefHolder"), constructor_37186, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_36619), Reflex::Literal("RefHolder"), constructor_37187, 0, "ref", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~RefHolder"), destructor_37189, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::DESTRUCTOR )
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_22942, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getBasesTable"), method_x93, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__reftobase__RefHolder_edm__Ref_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__reftobase__RefHolder_edm__Ref_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s_s__funcmem_bld);
}

//------Delayed data member builder for class RefHolder<edm::Ref<std::vector<reco::PFClusterJet, std::allocator<reco::PFClusterJet> >, reco::PFClusterJet, edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet, std::allocator<reco::PFClusterJet> >, reco::PFClusterJet> > > -------------------
void __edm__reftobase__RefHolder_edm__Ref_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_4921, Reflex::Literal("ref_"), OffsetOf(__shadow__::__edm__reftobase__RefHolder_edm__Ref_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s_s_, ref_), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class RefHolder<edm::Ref<std::vector<reco::PFClusterJet, std::allocator<reco::PFClusterJet> >, reco::PFClusterJet, edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet, std::allocator<reco::PFClusterJet> >, reco::PFClusterJet> > > -------------------
void __edm__reftobase__RefHolder_edm__Ref_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_42325), Reflex::Literal("swap"), method_37188, 0, "other", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_21401), Reflex::Literal("clone"), method_37190, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4974), Reflex::Literal("id"), method_37191, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2125), Reflex::Literal("key"), method_37192, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569, type_39948), Reflex::Literal("isEqualTo"), method_37193, 0, "rhs", ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569, type_21403, type_11032), Reflex::Literal("fillRefIfMyTypeMatches"), method_37194, 0, "fillme;msg", ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_36619), Reflex::Literal("getRef"), method_37195, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_36619), Reflex::Literal("setRef"), method_37196, 0, "r", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2760), Reflex::Literal("makeVectorHolder"), method_37197, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_20128), Reflex::Literal("productGetter"), method_37198, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("hasProductCache"), method_37199, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4040), Reflex::Literal("product"), method_37200, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("isAvailable"), method_37201, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_89), Reflex::Literal("Class_Version"), method_37202, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC);
}
//------Stub functions for class RefHolder<edm::Ref<std::vector<reco::TrackJet, std::allocator<reco::TrackJet> >, reco::TrackJet, edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet, std::allocator<reco::TrackJet> >, reco::TrackJet> > > -------------------------------
static  void operator_37205( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->operator=)(*(const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)arg[0]);
  else   (((::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->operator=)(*(const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)arg[0]);
}

static void constructor_37206( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >(*(const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)arg[0]);
  else ::new(mem) ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >(*(const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)arg[0]);
}

static void constructor_37207( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >();
  else ::new(mem) ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >();
}

static void constructor_37208( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >(*(const ::edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)arg[0]);
  else ::new(mem) ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >(*(const ::edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)arg[0]);
}

static  void method_37209( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->swap)(*(::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)arg[0]);
}

static void destructor_37210(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >::~RefHolder)();
}
static  void method_37211( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->clone)());
  else   (((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->clone)();
}

static  void method_37212( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::ProductID)((((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->id)());
  else   (((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->id)();
}

static  void method_37213( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (size_t)((((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->key)());
  else   (((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->key)();
}

static  void method_37214( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->isEqualTo)(*(const ::edm::reftobase::RefHolderBase*)arg[0]));
  else   (((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->isEqualTo)(*(const ::edm::reftobase::RefHolderBase*)arg[0]);
}

static  void method_37215( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->fillRefIfMyTypeMatches)(*(::edm::reftobase::RefHolderBase*)arg[0],
    *(::std::basic_string<char>*)arg[1]));
  else   (((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->fillRefIfMyTypeMatches)(*(::edm::reftobase::RefHolderBase*)arg[0],
    *(::std::basic_string<char>*)arg[1]);
}

static  void method_37216( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->getRef)();
  else   (((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->getRef)();
}

static  void method_37217( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->setRef)(*(const ::edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)arg[0]);
}

static  void method_37218( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::auto_ptr<edm::reftobase::RefVectorHolderBase>)((((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->makeVectorHolder)());
  else   (((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->makeVectorHolder)();
}

static  void method_37219( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->productGetter)());
  else   (((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->productGetter)();
}

static  void method_37220( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->hasProductCache)());
  else   (((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->hasProductCache)();
}

static  void method_37221( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->product)());
  else   (((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->product)();
}

static  void method_37222( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->isAvailable)());
  else   (((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->isAvailable)();
}

static  void method_37223( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (short)((((::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->Class_Version)());
  else   (((::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->Class_Version)();
}

static void method_newdel_22943( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

static void method_x95( void* retaddr, void*, const std::vector<void*>&, void*)
{
  typedef std::vector<std::pair< ::Reflex::Base, int> > Bases_t;
  static Bases_t s_bases;
  if ( !s_bases.size() ) {
    s_bases.push_back(std::make_pair(::Reflex::Base( ::Reflex::TypeBuilder(Reflex::Literal("edm::reftobase::RefHolderBase")), ::Reflex::BaseOffset< ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >,::edm::reftobase::RefHolderBase >::Get(),::Reflex::PUBLIC), 0));
  }
  if (retaddr) *(Bases_t**)retaddr = &s_bases;
}

//------Dictionary for class RefHolder<edm::Ref<std::vector<reco::TrackJet, std::allocator<reco::TrackJet> >, reco::TrackJet, edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet, std::allocator<reco::TrackJet> >, reco::TrackJet> > > -------------------------------
void __edm__reftobase__RefHolder_edm__Ref_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s_s__db_datamem(Reflex::Class*);
void __edm__reftobase__RefHolder_edm__Ref_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__reftobase__RefHolder_edm__Ref_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s_s__datamem_bld(&__edm__reftobase__RefHolder_edm__Ref_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__reftobase__RefHolder_edm__Ref_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s_s__funcmem_bld(&__edm__reftobase__RefHolder_edm__Ref_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s_s__db_funcmem);
void __edm__reftobase__RefHolder_edm__Ref_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::reftobase::RefHolder<edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >"), typeid(::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >), sizeof(::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::VIRTUAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("ClassVersion"), ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >::Class_Version())
  .AddProperty(Reflex::Literal("o_name"), "edm::reftobase::RefHolder<reco::TrackJetRef>")
  .AddBase(type_12419, ::Reflex::BaseOffset< ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >, ::edm::reftobase::RefHolderBase >::Get(), ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_42327, type_42328), Reflex::Literal("operator="), operator_37205, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_42328), Reflex::Literal("RefHolder"), constructor_37206, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("RefHolder"), constructor_37207, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_36647), Reflex::Literal("RefHolder"), constructor_37208, 0, "ref", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~RefHolder"), destructor_37210, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::DESTRUCTOR )
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_22943, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getBasesTable"), method_x95, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__reftobase__RefHolder_edm__Ref_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__reftobase__RefHolder_edm__Ref_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s_s__funcmem_bld);
}

//------Delayed data member builder for class RefHolder<edm::Ref<std::vector<reco::TrackJet, std::allocator<reco::TrackJet> >, reco::TrackJet, edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet, std::allocator<reco::TrackJet> >, reco::TrackJet> > > -------------------
void __edm__reftobase__RefHolder_edm__Ref_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_4924, Reflex::Literal("ref_"), OffsetOf(__shadow__::__edm__reftobase__RefHolder_edm__Ref_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s_s_, ref_), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class RefHolder<edm::Ref<std::vector<reco::TrackJet, std::allocator<reco::TrackJet> >, reco::TrackJet, edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet, std::allocator<reco::TrackJet> >, reco::TrackJet> > > -------------------
void __edm__reftobase__RefHolder_edm__Ref_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_42327), Reflex::Literal("swap"), method_37209, 0, "other", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_21401), Reflex::Literal("clone"), method_37211, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4974), Reflex::Literal("id"), method_37212, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2125), Reflex::Literal("key"), method_37213, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569, type_39948), Reflex::Literal("isEqualTo"), method_37214, 0, "rhs", ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569, type_21403, type_11032), Reflex::Literal("fillRefIfMyTypeMatches"), method_37215, 0, "fillme;msg", ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_36647), Reflex::Literal("getRef"), method_37216, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_36647), Reflex::Literal("setRef"), method_37217, 0, "r", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2760), Reflex::Literal("makeVectorHolder"), method_37218, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_20128), Reflex::Literal("productGetter"), method_37219, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("hasProductCache"), method_37220, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4040), Reflex::Literal("product"), method_37221, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("isAvailable"), method_37222, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_89), Reflex::Literal("Class_Version"), method_37223, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC);
}
//------Stub functions for class RefHolder<edm::Ref<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet, edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet> > > -------------------------------
static  void operator_37226( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->operator=)(*(const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)arg[0]);
  else   (((::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->operator=)(*(const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)arg[0]);
}

static void constructor_37227( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >(*(const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)arg[0]);
  else ::new(mem) ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >(*(const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)arg[0]);
}

static void constructor_37228( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >();
  else ::new(mem) ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >();
}

static void constructor_37229( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >(*(const ::edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)arg[0]);
  else ::new(mem) ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >(*(const ::edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)arg[0]);
}

static  void method_37230( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->swap)(*(::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)arg[0]);
}

static void destructor_37231(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >::~RefHolder)();
}
static  void method_37232( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->clone)());
  else   (((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->clone)();
}

static  void method_37233( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::ProductID)((((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->id)());
  else   (((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->id)();
}

static  void method_37234( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (size_t)((((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->key)());
  else   (((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->key)();
}

static  void method_37235( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->isEqualTo)(*(const ::edm::reftobase::RefHolderBase*)arg[0]));
  else   (((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->isEqualTo)(*(const ::edm::reftobase::RefHolderBase*)arg[0]);
}

static  void method_37236( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->fillRefIfMyTypeMatches)(*(::edm::reftobase::RefHolderBase*)arg[0],
    *(::std::basic_string<char>*)arg[1]));
  else   (((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->fillRefIfMyTypeMatches)(*(::edm::reftobase::RefHolderBase*)arg[0],
    *(::std::basic_string<char>*)arg[1]);
}

static  void method_37237( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->getRef)();
  else   (((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->getRef)();
}

static  void method_37238( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->setRef)(*(const ::edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)arg[0]);
}

static  void method_37239( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::auto_ptr<edm::reftobase::RefVectorHolderBase>)((((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->makeVectorHolder)());
  else   (((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->makeVectorHolder)();
}

static  void method_37240( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->productGetter)());
  else   (((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->productGetter)();
}

static  void method_37241( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->hasProductCache)());
  else   (((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->hasProductCache)();
}

static  void method_37242( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->product)());
  else   (((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->product)();
}

static  void method_37243( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->isAvailable)());
  else   (((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->isAvailable)();
}

static  void method_37244( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (short)((((::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->Class_Version)());
  else   (((::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->Class_Version)();
}

static void method_newdel_22944( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

static void method_x97( void* retaddr, void*, const std::vector<void*>&, void*)
{
  typedef std::vector<std::pair< ::Reflex::Base, int> > Bases_t;
  static Bases_t s_bases;
  if ( !s_bases.size() ) {
    s_bases.push_back(std::make_pair(::Reflex::Base( ::Reflex::TypeBuilder(Reflex::Literal("edm::reftobase::RefHolderBase")), ::Reflex::BaseOffset< ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >,::edm::reftobase::RefHolderBase >::Get(),::Reflex::PUBLIC), 0));
  }
  if (retaddr) *(Bases_t**)retaddr = &s_bases;
}

//------Dictionary for class RefHolder<edm::Ref<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet, edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet> > > -------------------------------
void __edm__reftobase__RefHolder_edm__Ref_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s__db_datamem(Reflex::Class*);
void __edm__reftobase__RefHolder_edm__Ref_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__reftobase__RefHolder_edm__Ref_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s__datamem_bld(&__edm__reftobase__RefHolder_edm__Ref_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__reftobase__RefHolder_edm__Ref_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s__funcmem_bld(&__edm__reftobase__RefHolder_edm__Ref_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s__db_funcmem);
void __edm__reftobase__RefHolder_edm__Ref_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::reftobase::RefHolder<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >"), typeid(::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >), sizeof(::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::VIRTUAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("ClassVersion"), ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >::Class_Version())
  .AddProperty(Reflex::Literal("o_name"), "edm::reftobase::RefHolder<reco::PFJetRef>")
  .AddBase(type_12419, ::Reflex::BaseOffset< ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >, ::edm::reftobase::RefHolderBase >::Get(), ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_42329, type_42330), Reflex::Literal("operator="), operator_37226, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_42330), Reflex::Literal("RefHolder"), constructor_37227, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("RefHolder"), constructor_37228, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_37777), Reflex::Literal("RefHolder"), constructor_37229, 0, "ref", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~RefHolder"), destructor_37231, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::DESTRUCTOR )
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_22944, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getBasesTable"), method_x97, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__reftobase__RefHolder_edm__Ref_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__reftobase__RefHolder_edm__Ref_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s__funcmem_bld);
}

//------Delayed data member builder for class RefHolder<edm::Ref<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet, edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet> > > -------------------
void __edm__reftobase__RefHolder_edm__Ref_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_4915, Reflex::Literal("ref_"), OffsetOf(__shadow__::__edm__reftobase__RefHolder_edm__Ref_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s_, ref_), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class RefHolder<edm::Ref<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet, edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet> > > -------------------
void __edm__reftobase__RefHolder_edm__Ref_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_42329), Reflex::Literal("swap"), method_37230, 0, "other", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_21401), Reflex::Literal("clone"), method_37232, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4974), Reflex::Literal("id"), method_37233, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2125), Reflex::Literal("key"), method_37234, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569, type_39948), Reflex::Literal("isEqualTo"), method_37235, 0, "rhs", ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569, type_21403, type_11032), Reflex::Literal("fillRefIfMyTypeMatches"), method_37236, 0, "fillme;msg", ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_37777), Reflex::Literal("getRef"), method_37237, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_37777), Reflex::Literal("setRef"), method_37238, 0, "r", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2760), Reflex::Literal("makeVectorHolder"), method_37239, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_20128), Reflex::Literal("productGetter"), method_37240, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("hasProductCache"), method_37241, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4040), Reflex::Literal("product"), method_37242, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("isAvailable"), method_37243, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_89), Reflex::Literal("Class_Version"), method_37244, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC);
}
//------Stub functions for class RefHolder<edm::Ref<std::vector<reco::GenJet, std::allocator<reco::GenJet> >, reco::GenJet, edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet, std::allocator<reco::GenJet> >, reco::GenJet> > > -------------------------------
static  void operator_37247( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->operator=)(*(const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)arg[0]);
  else   (((::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->operator=)(*(const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)arg[0]);
}

static void constructor_37248( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >(*(const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)arg[0]);
  else ::new(mem) ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >(*(const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)arg[0]);
}

static void constructor_37249( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >();
  else ::new(mem) ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >();
}

static void constructor_37250( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >(*(const ::edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)arg[0]);
  else ::new(mem) ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >(*(const ::edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)arg[0]);
}

static  void method_37251( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->swap)(*(::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)arg[0]);
}

static void destructor_37252(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >::~RefHolder)();
}
static  void method_37253( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->clone)());
  else   (((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->clone)();
}

static  void method_37254( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::ProductID)((((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->id)());
  else   (((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->id)();
}

static  void method_37255( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (size_t)((((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->key)());
  else   (((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->key)();
}

static  void method_37256( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->isEqualTo)(*(const ::edm::reftobase::RefHolderBase*)arg[0]));
  else   (((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->isEqualTo)(*(const ::edm::reftobase::RefHolderBase*)arg[0]);
}

static  void method_37257( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->fillRefIfMyTypeMatches)(*(::edm::reftobase::RefHolderBase*)arg[0],
    *(::std::basic_string<char>*)arg[1]));
  else   (((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->fillRefIfMyTypeMatches)(*(::edm::reftobase::RefHolderBase*)arg[0],
    *(::std::basic_string<char>*)arg[1]);
}

static  void method_37258( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->getRef)();
  else   (((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->getRef)();
}

static  void method_37259( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->setRef)(*(const ::edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)arg[0]);
}

static  void method_37260( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::auto_ptr<edm::reftobase::RefVectorHolderBase>)((((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->makeVectorHolder)());
  else   (((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->makeVectorHolder)();
}

static  void method_37261( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->productGetter)());
  else   (((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->productGetter)();
}

static  void method_37262( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->hasProductCache)());
  else   (((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->hasProductCache)();
}

static  void method_37263( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->product)());
  else   (((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->product)();
}

static  void method_37264( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->isAvailable)());
  else   (((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->isAvailable)();
}

static  void method_37265( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (short)((((::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->Class_Version)());
  else   (((::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->Class_Version)();
}

static void method_newdel_22945( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

static void method_x99( void* retaddr, void*, const std::vector<void*>&, void*)
{
  typedef std::vector<std::pair< ::Reflex::Base, int> > Bases_t;
  static Bases_t s_bases;
  if ( !s_bases.size() ) {
    s_bases.push_back(std::make_pair(::Reflex::Base( ::Reflex::TypeBuilder(Reflex::Literal("edm::reftobase::RefHolderBase")), ::Reflex::BaseOffset< ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >,::edm::reftobase::RefHolderBase >::Get(),::Reflex::PUBLIC), 0));
  }
  if (retaddr) *(Bases_t**)retaddr = &s_bases;
}

//------Dictionary for class RefHolder<edm::Ref<std::vector<reco::GenJet, std::allocator<reco::GenJet> >, reco::GenJet, edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet, std::allocator<reco::GenJet> >, reco::GenJet> > > -------------------------------
void __edm__reftobase__RefHolder_edm__Ref_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s_s__db_datamem(Reflex::Class*);
void __edm__reftobase__RefHolder_edm__Ref_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__reftobase__RefHolder_edm__Ref_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s_s__datamem_bld(&__edm__reftobase__RefHolder_edm__Ref_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__reftobase__RefHolder_edm__Ref_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s_s__funcmem_bld(&__edm__reftobase__RefHolder_edm__Ref_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s_s__db_funcmem);
void __edm__reftobase__RefHolder_edm__Ref_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::reftobase::RefHolder<edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >"), typeid(::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >), sizeof(::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::VIRTUAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("ClassVersion"), ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >::Class_Version())
  .AddProperty(Reflex::Literal("o_name"), "edm::reftobase::RefHolder<reco::GenJetRef>")
  .AddBase(type_12419, ::Reflex::BaseOffset< ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >, ::edm::reftobase::RefHolderBase >::Get(), ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_42331, type_42332), Reflex::Literal("operator="), operator_37247, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_42332), Reflex::Literal("RefHolder"), constructor_37248, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("RefHolder"), constructor_37249, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_37785), Reflex::Literal("RefHolder"), constructor_37250, 0, "ref", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~RefHolder"), destructor_37252, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::DESTRUCTOR )
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_22945, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getBasesTable"), method_x99, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__reftobase__RefHolder_edm__Ref_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__reftobase__RefHolder_edm__Ref_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s_s__funcmem_bld);
}

//------Delayed data member builder for class RefHolder<edm::Ref<std::vector<reco::GenJet, std::allocator<reco::GenJet> >, reco::GenJet, edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet, std::allocator<reco::GenJet> >, reco::GenJet> > > -------------------
void __edm__reftobase__RefHolder_edm__Ref_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_4916, Reflex::Literal("ref_"), OffsetOf(__shadow__::__edm__reftobase__RefHolder_edm__Ref_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s_s_, ref_), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class RefHolder<edm::Ref<std::vector<reco::GenJet, std::allocator<reco::GenJet> >, reco::GenJet, edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet, std::allocator<reco::GenJet> >, reco::GenJet> > > -------------------
void __edm__reftobase__RefHolder_edm__Ref_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_42331), Reflex::Literal("swap"), method_37251, 0, "other", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_21401), Reflex::Literal("clone"), method_37253, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4974), Reflex::Literal("id"), method_37254, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2125), Reflex::Literal("key"), method_37255, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569, type_39948), Reflex::Literal("isEqualTo"), method_37256, 0, "rhs", ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569, type_21403, type_11032), Reflex::Literal("fillRefIfMyTypeMatches"), method_37257, 0, "fillme;msg", ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_37785), Reflex::Literal("getRef"), method_37258, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_37785), Reflex::Literal("setRef"), method_37259, 0, "r", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2760), Reflex::Literal("makeVectorHolder"), method_37260, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_20128), Reflex::Literal("productGetter"), method_37261, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("hasProductCache"), method_37262, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4040), Reflex::Literal("product"), method_37263, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("isAvailable"), method_37264, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_89), Reflex::Literal("Class_Version"), method_37265, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC);
}
//------Stub functions for class RefHolder<edm::Ref<std::vector<reco::JPTJet, std::allocator<reco::JPTJet> >, reco::JPTJet, edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet, std::allocator<reco::JPTJet> >, reco::JPTJet> > > -------------------------------
static  void operator_37268( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >*)o)->operator=)(*(const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >*)arg[0]);
  else   (((::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >*)o)->operator=)(*(const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >*)arg[0]);
}

static void constructor_37269( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >(*(const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >*)arg[0]);
  else ::new(mem) ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >(*(const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >*)arg[0]);
}

static void constructor_37270( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >();
  else ::new(mem) ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >();
}

static void constructor_37271( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >(*(const ::edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >*)arg[0]);
  else ::new(mem) ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >(*(const ::edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >*)arg[0]);
}

static  void method_37272( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >*)o)->swap)(*(::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >*)arg[0]);
}

static void destructor_37273(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >*)o)->::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >::~RefHolder)();
}
static  void method_37274( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >*)o)->clone)());
  else   (((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >*)o)->clone)();
}

static  void method_37275( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::ProductID)((((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >*)o)->id)());
  else   (((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >*)o)->id)();
}

static  void method_37276( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (size_t)((((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >*)o)->key)());
  else   (((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >*)o)->key)();
}

static  void method_37277( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >*)o)->isEqualTo)(*(const ::edm::reftobase::RefHolderBase*)arg[0]));
  else   (((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >*)o)->isEqualTo)(*(const ::edm::reftobase::RefHolderBase*)arg[0]);
}

static  void method_37278( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >*)o)->fillRefIfMyTypeMatches)(*(::edm::reftobase::RefHolderBase*)arg[0],
    *(::std::basic_string<char>*)arg[1]));
  else   (((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >*)o)->fillRefIfMyTypeMatches)(*(::edm::reftobase::RefHolderBase*)arg[0],
    *(::std::basic_string<char>*)arg[1]);
}

static  void method_37279( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >*)o)->getRef)();
  else   (((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >*)o)->getRef)();
}

static  void method_37280( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >*)o)->setRef)(*(const ::edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >*)arg[0]);
}

static  void method_37281( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::auto_ptr<edm::reftobase::RefVectorHolderBase>)((((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >*)o)->makeVectorHolder)());
  else   (((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >*)o)->makeVectorHolder)();
}

static  void method_37282( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >*)o)->productGetter)());
  else   (((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >*)o)->productGetter)();
}

static  void method_37283( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >*)o)->hasProductCache)());
  else   (((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >*)o)->hasProductCache)();
}

static  void method_37284( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >*)o)->product)());
  else   (((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >*)o)->product)();
}

static  void method_37285( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >*)o)->isAvailable)());
  else   (((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >*)o)->isAvailable)();
}

static  void method_37286( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (short)((((::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >*)o)->Class_Version)());
  else   (((::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >*)o)->Class_Version)();
}

static void method_newdel_22946( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

static void method_x101( void* retaddr, void*, const std::vector<void*>&, void*)
{
  typedef std::vector<std::pair< ::Reflex::Base, int> > Bases_t;
  static Bases_t s_bases;
  if ( !s_bases.size() ) {
    s_bases.push_back(std::make_pair(::Reflex::Base( ::Reflex::TypeBuilder(Reflex::Literal("edm::reftobase::RefHolderBase")), ::Reflex::BaseOffset< ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >,::edm::reftobase::RefHolderBase >::Get(),::Reflex::PUBLIC), 0));
  }
  if (retaddr) *(Bases_t**)retaddr = &s_bases;
}

//------Dictionary for class RefHolder<edm::Ref<std::vector<reco::JPTJet, std::allocator<reco::JPTJet> >, reco::JPTJet, edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet, std::allocator<reco::JPTJet> >, reco::JPTJet> > > -------------------------------
void __edm__reftobase__RefHolder_edm__Ref_std__vector_reco__JPTJet__reco__JPTJet_edm__refhelper__FindUsingAdvance_std__vector_reco__JPTJet__reco__JPTJet_s_s__db_datamem(Reflex::Class*);
void __edm__reftobase__RefHolder_edm__Ref_std__vector_reco__JPTJet__reco__JPTJet_edm__refhelper__FindUsingAdvance_std__vector_reco__JPTJet__reco__JPTJet_s_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__reftobase__RefHolder_edm__Ref_std__vector_reco__JPTJet__reco__JPTJet_edm__refhelper__FindUsingAdvance_std__vector_reco__JPTJet__reco__JPTJet_s_s__datamem_bld(&__edm__reftobase__RefHolder_edm__Ref_std__vector_reco__JPTJet__reco__JPTJet_edm__refhelper__FindUsingAdvance_std__vector_reco__JPTJet__reco__JPTJet_s_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__reftobase__RefHolder_edm__Ref_std__vector_reco__JPTJet__reco__JPTJet_edm__refhelper__FindUsingAdvance_std__vector_reco__JPTJet__reco__JPTJet_s_s__funcmem_bld(&__edm__reftobase__RefHolder_edm__Ref_std__vector_reco__JPTJet__reco__JPTJet_edm__refhelper__FindUsingAdvance_std__vector_reco__JPTJet__reco__JPTJet_s_s__db_funcmem);
void __edm__reftobase__RefHolder_edm__Ref_std__vector_reco__JPTJet__reco__JPTJet_edm__refhelper__FindUsingAdvance_std__vector_reco__JPTJet__reco__JPTJet_s_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::reftobase::RefHolder<edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >"), typeid(::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >), sizeof(::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::VIRTUAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("ClassVersion"), ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >::Class_Version())
  .AddProperty(Reflex::Literal("o_name"), "edm::reftobase::RefHolder<reco::JPTJetRef>")
  .AddBase(type_12419, ::Reflex::BaseOffset< ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >, ::edm::reftobase::RefHolderBase >::Get(), ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_42333, type_42334), Reflex::Literal("operator="), operator_37268, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_42334), Reflex::Literal("RefHolder"), constructor_37269, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("RefHolder"), constructor_37270, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_36633), Reflex::Literal("RefHolder"), constructor_37271, 0, "ref", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~RefHolder"), destructor_37273, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::DESTRUCTOR )
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_22946, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getBasesTable"), method_x101, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__reftobase__RefHolder_edm__Ref_std__vector_reco__JPTJet__reco__JPTJet_edm__refhelper__FindUsingAdvance_std__vector_reco__JPTJet__reco__JPTJet_s_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__reftobase__RefHolder_edm__Ref_std__vector_reco__JPTJet__reco__JPTJet_edm__refhelper__FindUsingAdvance_std__vector_reco__JPTJet__reco__JPTJet_s_s__funcmem_bld);
}

//------Delayed data member builder for class RefHolder<edm::Ref<std::vector<reco::JPTJet, std::allocator<reco::JPTJet> >, reco::JPTJet, edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet, std::allocator<reco::JPTJet> >, reco::JPTJet> > > -------------------
void __edm__reftobase__RefHolder_edm__Ref_std__vector_reco__JPTJet__reco__JPTJet_edm__refhelper__FindUsingAdvance_std__vector_reco__JPTJet__reco__JPTJet_s_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_4923, Reflex::Literal("ref_"), OffsetOf(__shadow__::__edm__reftobase__RefHolder_edm__Ref_std__vector_reco__JPTJet__reco__JPTJet_edm__refhelper__FindUsingAdvance_std__vector_reco__JPTJet__reco__JPTJet_s_s_, ref_), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class RefHolder<edm::Ref<std::vector<reco::JPTJet, std::allocator<reco::JPTJet> >, reco::JPTJet, edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet, std::allocator<reco::JPTJet> >, reco::JPTJet> > > -------------------
void __edm__reftobase__RefHolder_edm__Ref_std__vector_reco__JPTJet__reco__JPTJet_edm__refhelper__FindUsingAdvance_std__vector_reco__JPTJet__reco__JPTJet_s_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_42333), Reflex::Literal("swap"), method_37272, 0, "other", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_21401), Reflex::Literal("clone"), method_37274, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4974), Reflex::Literal("id"), method_37275, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2125), Reflex::Literal("key"), method_37276, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569, type_39948), Reflex::Literal("isEqualTo"), method_37277, 0, "rhs", ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569, type_21403, type_11032), Reflex::Literal("fillRefIfMyTypeMatches"), method_37278, 0, "fillme;msg", ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_36633), Reflex::Literal("getRef"), method_37279, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_36633), Reflex::Literal("setRef"), method_37280, 0, "r", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2760), Reflex::Literal("makeVectorHolder"), method_37281, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_20128), Reflex::Literal("productGetter"), method_37282, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("hasProductCache"), method_37283, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4040), Reflex::Literal("product"), method_37284, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("isAvailable"), method_37285, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_89), Reflex::Literal("Class_Version"), method_37286, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC);
}
//------Stub functions for class RefHolder<edm::Ref<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> >, reco::CaloJet, edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> >, reco::CaloJet> > > -------------------------------
static  void operator_37289( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->operator=)(*(const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)arg[0]);
  else   (((::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->operator=)(*(const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)arg[0]);
}

static void constructor_37290( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >(*(const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)arg[0]);
  else ::new(mem) ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >(*(const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)arg[0]);
}

static void constructor_37291( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >();
  else ::new(mem) ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >();
}

static void constructor_37292( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >(*(const ::edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)arg[0]);
  else ::new(mem) ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >(*(const ::edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)arg[0]);
}

static  void method_37293( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->swap)(*(::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)arg[0]);
}

static void destructor_37294(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >::~RefHolder)();
}
static  void method_37295( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->clone)());
  else   (((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->clone)();
}

static  void method_37296( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::ProductID)((((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->id)());
  else   (((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->id)();
}

static  void method_37297( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (size_t)((((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->key)());
  else   (((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->key)();
}

static  void method_37298( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->isEqualTo)(*(const ::edm::reftobase::RefHolderBase*)arg[0]));
  else   (((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->isEqualTo)(*(const ::edm::reftobase::RefHolderBase*)arg[0]);
}

static  void method_37299( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->fillRefIfMyTypeMatches)(*(::edm::reftobase::RefHolderBase*)arg[0],
    *(::std::basic_string<char>*)arg[1]));
  else   (((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->fillRefIfMyTypeMatches)(*(::edm::reftobase::RefHolderBase*)arg[0],
    *(::std::basic_string<char>*)arg[1]);
}

static  void method_37300( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->getRef)();
  else   (((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->getRef)();
}

static  void method_37301( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->setRef)(*(const ::edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)arg[0]);
}

static  void method_37302( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::auto_ptr<edm::reftobase::RefVectorHolderBase>)((((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->makeVectorHolder)());
  else   (((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->makeVectorHolder)();
}

static  void method_37303( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->productGetter)());
  else   (((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->productGetter)();
}

static  void method_37304( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->hasProductCache)());
  else   (((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->hasProductCache)();
}

static  void method_37305( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->product)());
  else   (((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->product)();
}

static  void method_37306( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->isAvailable)());
  else   (((const ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->isAvailable)();
}

static  void method_37307( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (short)((((::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->Class_Version)());
  else   (((::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->Class_Version)();
}

static void method_newdel_22947( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

static void method_x103( void* retaddr, void*, const std::vector<void*>&, void*)
{
  typedef std::vector<std::pair< ::Reflex::Base, int> > Bases_t;
  static Bases_t s_bases;
  if ( !s_bases.size() ) {
    s_bases.push_back(std::make_pair(::Reflex::Base( ::Reflex::TypeBuilder(Reflex::Literal("edm::reftobase::RefHolderBase")), ::Reflex::BaseOffset< ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >,::edm::reftobase::RefHolderBase >::Get(),::Reflex::PUBLIC), 0));
  }
  if (retaddr) *(Bases_t**)retaddr = &s_bases;
}

//------Dictionary for class RefHolder<edm::Ref<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> >, reco::CaloJet, edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> >, reco::CaloJet> > > -------------------------------
void __edm__reftobase__RefHolder_edm__Ref_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s__db_datamem(Reflex::Class*);
void __edm__reftobase__RefHolder_edm__Ref_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__reftobase__RefHolder_edm__Ref_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s__datamem_bld(&__edm__reftobase__RefHolder_edm__Ref_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__reftobase__RefHolder_edm__Ref_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s__funcmem_bld(&__edm__reftobase__RefHolder_edm__Ref_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s__db_funcmem);
void __edm__reftobase__RefHolder_edm__Ref_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::reftobase::RefHolder<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >"), typeid(::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >), sizeof(::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::VIRTUAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("ClassVersion"), ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >::Class_Version())
  .AddProperty(Reflex::Literal("o_name"), "edm::reftobase::RefHolder<reco::CaloJetRef>")
  .AddBase(type_12419, ::Reflex::BaseOffset< ::edm::reftobase::RefHolder<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >, ::edm::reftobase::RefHolderBase >::Get(), ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_42335, type_42336), Reflex::Literal("operator="), operator_37289, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_42336), Reflex::Literal("RefHolder"), constructor_37290, 0, "", ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("RefHolder"), constructor_37291, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_37793), Reflex::Literal("RefHolder"), constructor_37292, 0, "ref", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~RefHolder"), destructor_37294, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::DESTRUCTOR )
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_22947, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getBasesTable"), method_x103, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__reftobase__RefHolder_edm__Ref_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__reftobase__RefHolder_edm__Ref_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s__funcmem_bld);
}

//------Delayed data member builder for class RefHolder<edm::Ref<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> >, reco::CaloJet, edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> >, reco::CaloJet> > > -------------------
void __edm__reftobase__RefHolder_edm__Ref_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_4917, Reflex::Literal("ref_"), OffsetOf(__shadow__::__edm__reftobase__RefHolder_edm__Ref_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s_, ref_), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class RefHolder<edm::Ref<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> >, reco::CaloJet, edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> >, reco::CaloJet> > > -------------------
void __edm__reftobase__RefHolder_edm__Ref_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_42335), Reflex::Literal("swap"), method_37293, 0, "other", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_21401), Reflex::Literal("clone"), method_37295, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4974), Reflex::Literal("id"), method_37296, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2125), Reflex::Literal("key"), method_37297, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569, type_39948), Reflex::Literal("isEqualTo"), method_37298, 0, "rhs", ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569, type_21403, type_11032), Reflex::Literal("fillRefIfMyTypeMatches"), method_37299, 0, "fillme;msg", ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_37793), Reflex::Literal("getRef"), method_37300, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_37793), Reflex::Literal("setRef"), method_37301, 0, "r", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2760), Reflex::Literal("makeVectorHolder"), method_37302, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_20128), Reflex::Literal("productGetter"), method_37303, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("hasProductCache"), method_37304, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4040), Reflex::Literal("product"), method_37305, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("isAvailable"), method_37306, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_89), Reflex::Literal("Class_Version"), method_37307, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC);
}
//------Stub functions for class Holder<reco::Jet,edm::Ref<std::vector<reco::PFClusterJet, std::allocator<reco::PFClusterJet> >, reco::PFClusterJet, edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet, std::allocator<reco::PFClusterJet> >, reco::PFClusterJet> > > -------------------------------
static void constructor_37395( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >();
  else ::new(mem) ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >();
}

static void constructor_37396( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >(*(const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)arg[0]);
  else ::new(mem) ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >(*(const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)arg[0]);
}

static void constructor_37397( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >(*(const ::edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)arg[0]);
  else ::new(mem) ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >(*(const ::edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> >*)arg[0]);
}

static  void operator_37398( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->operator=)(*(const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)arg[0]);
  else   (((::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->operator=)(*(const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)arg[0]);
}

static  void method_37399( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->swap)(*(::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)arg[0]);
}

static void destructor_37400(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >::~Holder)();
}
static  void method_37401( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->clone)());
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->clone)();
}

static  void method_37402( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->getPtr)());
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->getPtr)();
}

static  void method_37403( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::ProductID)((((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->id)());
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->id)();
}

static  void method_37404( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (size_t)((((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->key)());
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->key)();
}

static  void method_37405( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->isEqualTo)(*(const ::edm::reftobase::BaseHolder<reco::Jet>*)arg[0]));
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->isEqualTo)(*(const ::edm::reftobase::BaseHolder<reco::Jet>*)arg[0]);
}

static  void method_37406( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->getRef)();
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->getRef)();
}

static  void method_37407( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->fillRefIfMyTypeMatches)(*(::edm::reftobase::RefHolderBase*)arg[0],
    *(::std::basic_string<char>*)arg[1]));
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->fillRefIfMyTypeMatches)(*(::edm::reftobase::RefHolderBase*)arg[0],
    *(::std::basic_string<char>*)arg[1]);
}

static  void method_37408( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::auto_ptr<edm::reftobase::RefHolderBase>)((((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->holder)());
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->holder)();
}

static  void method_37409( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::auto_ptr<edm::reftobase::BaseVectorHolder<reco::Jet> >)((((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->makeVectorHolder)());
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->makeVectorHolder)();
}

static  void method_37410( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::auto_ptr<edm::reftobase::RefVectorHolderBase>)((((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->makeVectorBaseHolder)());
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->makeVectorBaseHolder)();
}

static  void method_37411( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->productGetter)());
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->productGetter)();
}

static  void method_37412( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->hasProductCache)());
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->hasProductCache)();
}

static  void method_37413( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->product)());
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->product)();
}

static  void method_37414( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->isAvailable)());
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->isAvailable)();
}

static  void method_37415( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (short)((((::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->Class_Version)());
  else   (((::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >*)o)->Class_Version)();
}

static void method_newdel_22955( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

static void method_x105( void* retaddr, void*, const std::vector<void*>&, void*)
{
  typedef std::vector<std::pair< ::Reflex::Base, int> > Bases_t;
  static Bases_t s_bases;
  if ( !s_bases.size() ) {
    s_bases.push_back(std::make_pair(::Reflex::Base( ::Reflex::TypeBuilder(Reflex::Literal("edm::reftobase::BaseHolder<reco::Jet>")), ::Reflex::BaseOffset< ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >,::edm::reftobase::BaseHolder<reco::Jet> >::Get(),::Reflex::PUBLIC), 0));
  }
  if (retaddr) *(Bases_t**)retaddr = &s_bases;
}

//------Dictionary for class Holder<reco::Jet,edm::Ref<std::vector<reco::PFClusterJet, std::allocator<reco::PFClusterJet> >, reco::PFClusterJet, edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet, std::allocator<reco::PFClusterJet> >, reco::PFClusterJet> > > -------------------------------
void __edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s_s__db_datamem(Reflex::Class*);
void __edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s_s__datamem_bld(&__edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s_s__funcmem_bld(&__edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s_s__db_funcmem);
void __edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >"), typeid(::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >), sizeof(::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::VIRTUAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("ClassVersion"), ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >::Class_Version())
  .AddProperty(Reflex::Literal("o_name"), "edm::reftobase::Holder<reco::Jet, reco::PFClusterJetRef>")
  .AddBase(type_22938, ::Reflex::BaseOffset< ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > >, ::edm::reftobase::BaseHolder<reco::Jet> >::Get(), ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("Holder"), constructor_37395, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_42348), Reflex::Literal("Holder"), constructor_37396, 0, "other", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_36619), Reflex::Literal("Holder"), constructor_37397, 0, "r", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~Holder"), destructor_37400, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::DESTRUCTOR )
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_22955, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getBasesTable"), method_x105, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s_s__funcmem_bld);
}

//------Delayed data member builder for class Holder<reco::Jet,edm::Ref<std::vector<reco::PFClusterJet, std::allocator<reco::PFClusterJet> >, reco::PFClusterJet, edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet, std::allocator<reco::PFClusterJet> >, reco::PFClusterJet> > > -------------------
void __edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_4921, Reflex::Literal("ref_"), OffsetOf(__shadow__::__edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s_s_, ref_), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class Holder<reco::Jet,edm::Ref<std::vector<reco::PFClusterJet, std::allocator<reco::PFClusterJet> >, reco::PFClusterJet, edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet, std::allocator<reco::PFClusterJet> >, reco::PFClusterJet> > > -------------------
void __edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_42349, type_42348), Reflex::Literal("operator="), operator_37398, 0, "rhs", ::Reflex::PUBLIC | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_42349), Reflex::Literal("swap"), method_37399, 0, "other", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_37740), Reflex::Literal("clone"), method_37401, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_37743), Reflex::Literal("getPtr"), method_37402, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4974), Reflex::Literal("id"), method_37403, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2125), Reflex::Literal("key"), method_37404, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569, type_42322), Reflex::Literal("isEqualTo"), method_37405, 0, "rhs", ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_36619), Reflex::Literal("getRef"), method_37406, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569, type_21403, type_11032), Reflex::Literal("fillRefIfMyTypeMatches"), method_37407, 0, "fillme;msg", ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2762), Reflex::Literal("holder"), method_37408, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2761), Reflex::Literal("makeVectorHolder"), method_37409, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2760), Reflex::Literal("makeVectorBaseHolder"), method_37410, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_20128), Reflex::Literal("productGetter"), method_37411, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("hasProductCache"), method_37412, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4040), Reflex::Literal("product"), method_37413, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("isAvailable"), method_37414, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_89), Reflex::Literal("Class_Version"), method_37415, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC);
}
//------Stub functions for class Holder<reco::Jet,edm::Ref<std::vector<reco::TrackJet, std::allocator<reco::TrackJet> >, reco::TrackJet, edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet, std::allocator<reco::TrackJet> >, reco::TrackJet> > > -------------------------------
static void constructor_37417( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >();
  else ::new(mem) ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >();
}

static void constructor_37418( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >(*(const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)arg[0]);
  else ::new(mem) ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >(*(const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)arg[0]);
}

static void constructor_37419( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >(*(const ::edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)arg[0]);
  else ::new(mem) ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >(*(const ::edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> >*)arg[0]);
}

static  void operator_37420( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->operator=)(*(const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)arg[0]);
  else   (((::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->operator=)(*(const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)arg[0]);
}

static  void method_37421( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->swap)(*(::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)arg[0]);
}

static void destructor_37422(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >::~Holder)();
}
static  void method_37423( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->clone)());
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->clone)();
}

static  void method_37424( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->getPtr)());
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->getPtr)();
}

static  void method_37425( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::ProductID)((((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->id)());
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->id)();
}

static  void method_37426( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (size_t)((((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->key)());
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->key)();
}

static  void method_37427( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->isEqualTo)(*(const ::edm::reftobase::BaseHolder<reco::Jet>*)arg[0]));
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->isEqualTo)(*(const ::edm::reftobase::BaseHolder<reco::Jet>*)arg[0]);
}

static  void method_37428( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->getRef)();
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->getRef)();
}

static  void method_37429( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->fillRefIfMyTypeMatches)(*(::edm::reftobase::RefHolderBase*)arg[0],
    *(::std::basic_string<char>*)arg[1]));
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->fillRefIfMyTypeMatches)(*(::edm::reftobase::RefHolderBase*)arg[0],
    *(::std::basic_string<char>*)arg[1]);
}

static  void method_37430( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::auto_ptr<edm::reftobase::RefHolderBase>)((((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->holder)());
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->holder)();
}

static  void method_37431( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::auto_ptr<edm::reftobase::BaseVectorHolder<reco::Jet> >)((((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->makeVectorHolder)());
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->makeVectorHolder)();
}

static  void method_37432( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::auto_ptr<edm::reftobase::RefVectorHolderBase>)((((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->makeVectorBaseHolder)());
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->makeVectorBaseHolder)();
}

static  void method_37433( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->productGetter)());
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->productGetter)();
}

static  void method_37434( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->hasProductCache)());
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->hasProductCache)();
}

static  void method_37435( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->product)());
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->product)();
}

static  void method_37436( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->isAvailable)());
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->isAvailable)();
}

static  void method_37437( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (short)((((::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->Class_Version)());
  else   (((::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >*)o)->Class_Version)();
}

static void method_newdel_22956( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

static void method_x107( void* retaddr, void*, const std::vector<void*>&, void*)
{
  typedef std::vector<std::pair< ::Reflex::Base, int> > Bases_t;
  static Bases_t s_bases;
  if ( !s_bases.size() ) {
    s_bases.push_back(std::make_pair(::Reflex::Base( ::Reflex::TypeBuilder(Reflex::Literal("edm::reftobase::BaseHolder<reco::Jet>")), ::Reflex::BaseOffset< ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >,::edm::reftobase::BaseHolder<reco::Jet> >::Get(),::Reflex::PUBLIC), 0));
  }
  if (retaddr) *(Bases_t**)retaddr = &s_bases;
}

//------Dictionary for class Holder<reco::Jet,edm::Ref<std::vector<reco::TrackJet, std::allocator<reco::TrackJet> >, reco::TrackJet, edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet, std::allocator<reco::TrackJet> >, reco::TrackJet> > > -------------------------------
void __edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s_s__db_datamem(Reflex::Class*);
void __edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s_s__datamem_bld(&__edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s_s__funcmem_bld(&__edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s_s__db_funcmem);
void __edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >"), typeid(::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >), sizeof(::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::VIRTUAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("ClassVersion"), ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >::Class_Version())
  .AddProperty(Reflex::Literal("o_name"), "edm::reftobase::Holder<reco::Jet, reco::TrackJetRef>")
  .AddBase(type_22938, ::Reflex::BaseOffset< ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > >, ::edm::reftobase::BaseHolder<reco::Jet> >::Get(), ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("Holder"), constructor_37417, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_42350), Reflex::Literal("Holder"), constructor_37418, 0, "other", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_36647), Reflex::Literal("Holder"), constructor_37419, 0, "r", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~Holder"), destructor_37422, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::DESTRUCTOR )
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_22956, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getBasesTable"), method_x107, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s_s__funcmem_bld);
}

//------Delayed data member builder for class Holder<reco::Jet,edm::Ref<std::vector<reco::TrackJet, std::allocator<reco::TrackJet> >, reco::TrackJet, edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet, std::allocator<reco::TrackJet> >, reco::TrackJet> > > -------------------
void __edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_4924, Reflex::Literal("ref_"), OffsetOf(__shadow__::__edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s_s_, ref_), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class Holder<reco::Jet,edm::Ref<std::vector<reco::TrackJet, std::allocator<reco::TrackJet> >, reco::TrackJet, edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet, std::allocator<reco::TrackJet> >, reco::TrackJet> > > -------------------
void __edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_42351, type_42350), Reflex::Literal("operator="), operator_37420, 0, "rhs", ::Reflex::PUBLIC | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_42351), Reflex::Literal("swap"), method_37421, 0, "other", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_37740), Reflex::Literal("clone"), method_37423, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_37743), Reflex::Literal("getPtr"), method_37424, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4974), Reflex::Literal("id"), method_37425, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2125), Reflex::Literal("key"), method_37426, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569, type_42322), Reflex::Literal("isEqualTo"), method_37427, 0, "rhs", ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_36647), Reflex::Literal("getRef"), method_37428, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569, type_21403, type_11032), Reflex::Literal("fillRefIfMyTypeMatches"), method_37429, 0, "fillme;msg", ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2762), Reflex::Literal("holder"), method_37430, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2761), Reflex::Literal("makeVectorHolder"), method_37431, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2760), Reflex::Literal("makeVectorBaseHolder"), method_37432, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_20128), Reflex::Literal("productGetter"), method_37433, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("hasProductCache"), method_37434, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4040), Reflex::Literal("product"), method_37435, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("isAvailable"), method_37436, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_89), Reflex::Literal("Class_Version"), method_37437, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC);
}
//------Stub functions for class Holder<reco::Jet,edm::Ref<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet, edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet> > > -------------------------------
static void constructor_37439( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >();
  else ::new(mem) ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >();
}

static void constructor_37440( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >(*(const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)arg[0]);
  else ::new(mem) ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >(*(const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)arg[0]);
}

static void constructor_37441( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >(*(const ::edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)arg[0]);
  else ::new(mem) ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >(*(const ::edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> >*)arg[0]);
}

static  void operator_37442( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->operator=)(*(const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)arg[0]);
  else   (((::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->operator=)(*(const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)arg[0]);
}

static  void method_37443( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->swap)(*(::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)arg[0]);
}

static void destructor_37444(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >::~Holder)();
}
static  void method_37445( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->clone)());
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->clone)();
}

static  void method_37446( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->getPtr)());
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->getPtr)();
}

static  void method_37447( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::ProductID)((((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->id)());
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->id)();
}

static  void method_37448( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (size_t)((((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->key)());
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->key)();
}

static  void method_37449( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->isEqualTo)(*(const ::edm::reftobase::BaseHolder<reco::Jet>*)arg[0]));
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->isEqualTo)(*(const ::edm::reftobase::BaseHolder<reco::Jet>*)arg[0]);
}

static  void method_37450( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->getRef)();
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->getRef)();
}

static  void method_37451( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->fillRefIfMyTypeMatches)(*(::edm::reftobase::RefHolderBase*)arg[0],
    *(::std::basic_string<char>*)arg[1]));
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->fillRefIfMyTypeMatches)(*(::edm::reftobase::RefHolderBase*)arg[0],
    *(::std::basic_string<char>*)arg[1]);
}

static  void method_37452( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::auto_ptr<edm::reftobase::RefHolderBase>)((((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->holder)());
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->holder)();
}

static  void method_37453( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::auto_ptr<edm::reftobase::BaseVectorHolder<reco::Jet> >)((((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->makeVectorHolder)());
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->makeVectorHolder)();
}

static  void method_37454( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::auto_ptr<edm::reftobase::RefVectorHolderBase>)((((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->makeVectorBaseHolder)());
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->makeVectorBaseHolder)();
}

static  void method_37455( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->productGetter)());
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->productGetter)();
}

static  void method_37456( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->hasProductCache)());
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->hasProductCache)();
}

static  void method_37457( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->product)());
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->product)();
}

static  void method_37458( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->isAvailable)());
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->isAvailable)();
}

static  void method_37459( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (short)((((::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->Class_Version)());
  else   (((::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >*)o)->Class_Version)();
}

static void method_newdel_22957( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

static void method_x109( void* retaddr, void*, const std::vector<void*>&, void*)
{
  typedef std::vector<std::pair< ::Reflex::Base, int> > Bases_t;
  static Bases_t s_bases;
  if ( !s_bases.size() ) {
    s_bases.push_back(std::make_pair(::Reflex::Base( ::Reflex::TypeBuilder(Reflex::Literal("edm::reftobase::BaseHolder<reco::Jet>")), ::Reflex::BaseOffset< ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >,::edm::reftobase::BaseHolder<reco::Jet> >::Get(),::Reflex::PUBLIC), 0));
  }
  if (retaddr) *(Bases_t**)retaddr = &s_bases;
}

//------Dictionary for class Holder<reco::Jet,edm::Ref<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet, edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet> > > -------------------------------
void __edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s__db_datamem(Reflex::Class*);
void __edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s__datamem_bld(&__edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s__funcmem_bld(&__edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s__db_funcmem);
void __edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >"), typeid(::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >), sizeof(::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::VIRTUAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("ClassVersion"), ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >::Class_Version())
  .AddProperty(Reflex::Literal("o_name"), "edm::reftobase::Holder<reco::Jet, reco::PFJetRef>")
  .AddBase(type_22938, ::Reflex::BaseOffset< ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > >, ::edm::reftobase::BaseHolder<reco::Jet> >::Get(), ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("Holder"), constructor_37439, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_42352), Reflex::Literal("Holder"), constructor_37440, 0, "other", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_37777), Reflex::Literal("Holder"), constructor_37441, 0, "r", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~Holder"), destructor_37444, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::DESTRUCTOR )
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_22957, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getBasesTable"), method_x109, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s__funcmem_bld);
}

//------Delayed data member builder for class Holder<reco::Jet,edm::Ref<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet, edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet> > > -------------------
void __edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_4915, Reflex::Literal("ref_"), OffsetOf(__shadow__::__edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s_, ref_), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class Holder<reco::Jet,edm::Ref<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet, edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet, std::allocator<reco::PFJet> >, reco::PFJet> > > -------------------
void __edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_42353, type_42352), Reflex::Literal("operator="), operator_37442, 0, "rhs", ::Reflex::PUBLIC | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_42353), Reflex::Literal("swap"), method_37443, 0, "other", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_37740), Reflex::Literal("clone"), method_37445, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_37743), Reflex::Literal("getPtr"), method_37446, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4974), Reflex::Literal("id"), method_37447, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2125), Reflex::Literal("key"), method_37448, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569, type_42322), Reflex::Literal("isEqualTo"), method_37449, 0, "rhs", ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_37777), Reflex::Literal("getRef"), method_37450, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569, type_21403, type_11032), Reflex::Literal("fillRefIfMyTypeMatches"), method_37451, 0, "fillme;msg", ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2762), Reflex::Literal("holder"), method_37452, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2761), Reflex::Literal("makeVectorHolder"), method_37453, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2760), Reflex::Literal("makeVectorBaseHolder"), method_37454, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_20128), Reflex::Literal("productGetter"), method_37455, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("hasProductCache"), method_37456, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4040), Reflex::Literal("product"), method_37457, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("isAvailable"), method_37458, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_89), Reflex::Literal("Class_Version"), method_37459, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC);
}
//------Stub functions for class Holder<reco::Jet,edm::Ref<std::vector<reco::GenJet, std::allocator<reco::GenJet> >, reco::GenJet, edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet, std::allocator<reco::GenJet> >, reco::GenJet> > > -------------------------------
static void constructor_37461( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >();
  else ::new(mem) ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >();
}

static void constructor_37462( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >(*(const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)arg[0]);
  else ::new(mem) ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >(*(const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)arg[0]);
}

static void constructor_37463( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >(*(const ::edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)arg[0]);
  else ::new(mem) ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >(*(const ::edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> >*)arg[0]);
}

static  void operator_37464( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->operator=)(*(const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)arg[0]);
  else   (((::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->operator=)(*(const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)arg[0]);
}

static  void method_37465( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->swap)(*(::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)arg[0]);
}

static void destructor_37466(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >::~Holder)();
}
static  void method_37467( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->clone)());
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->clone)();
}

static  void method_37468( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->getPtr)());
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->getPtr)();
}

static  void method_37469( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::ProductID)((((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->id)());
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->id)();
}

static  void method_37470( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (size_t)((((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->key)());
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->key)();
}

static  void method_37471( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->isEqualTo)(*(const ::edm::reftobase::BaseHolder<reco::Jet>*)arg[0]));
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->isEqualTo)(*(const ::edm::reftobase::BaseHolder<reco::Jet>*)arg[0]);
}

static  void method_37472( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->getRef)();
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->getRef)();
}

static  void method_37473( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->fillRefIfMyTypeMatches)(*(::edm::reftobase::RefHolderBase*)arg[0],
    *(::std::basic_string<char>*)arg[1]));
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->fillRefIfMyTypeMatches)(*(::edm::reftobase::RefHolderBase*)arg[0],
    *(::std::basic_string<char>*)arg[1]);
}

static  void method_37474( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::auto_ptr<edm::reftobase::RefHolderBase>)((((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->holder)());
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->holder)();
}

static  void method_37475( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::auto_ptr<edm::reftobase::BaseVectorHolder<reco::Jet> >)((((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->makeVectorHolder)());
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->makeVectorHolder)();
}

static  void method_37476( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::auto_ptr<edm::reftobase::RefVectorHolderBase>)((((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->makeVectorBaseHolder)());
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->makeVectorBaseHolder)();
}

static  void method_37477( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->productGetter)());
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->productGetter)();
}

static  void method_37478( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->hasProductCache)());
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->hasProductCache)();
}

static  void method_37479( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->product)());
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->product)();
}

static  void method_37480( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->isAvailable)());
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->isAvailable)();
}

static  void method_37481( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (short)((((::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->Class_Version)());
  else   (((::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >*)o)->Class_Version)();
}

static void method_newdel_22958( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

static void method_x111( void* retaddr, void*, const std::vector<void*>&, void*)
{
  typedef std::vector<std::pair< ::Reflex::Base, int> > Bases_t;
  static Bases_t s_bases;
  if ( !s_bases.size() ) {
    s_bases.push_back(std::make_pair(::Reflex::Base( ::Reflex::TypeBuilder(Reflex::Literal("edm::reftobase::BaseHolder<reco::Jet>")), ::Reflex::BaseOffset< ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >,::edm::reftobase::BaseHolder<reco::Jet> >::Get(),::Reflex::PUBLIC), 0));
  }
  if (retaddr) *(Bases_t**)retaddr = &s_bases;
}

//------Dictionary for class Holder<reco::Jet,edm::Ref<std::vector<reco::GenJet, std::allocator<reco::GenJet> >, reco::GenJet, edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet, std::allocator<reco::GenJet> >, reco::GenJet> > > -------------------------------
void __edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s_s__db_datamem(Reflex::Class*);
void __edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s_s__datamem_bld(&__edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s_s__funcmem_bld(&__edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s_s__db_funcmem);
void __edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >"), typeid(::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >), sizeof(::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::VIRTUAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("ClassVersion"), ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >::Class_Version())
  .AddProperty(Reflex::Literal("o_name"), "edm::reftobase::Holder<reco::Jet, reco::GenJetRef>")
  .AddBase(type_22938, ::Reflex::BaseOffset< ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > >, ::edm::reftobase::BaseHolder<reco::Jet> >::Get(), ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("Holder"), constructor_37461, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_42354), Reflex::Literal("Holder"), constructor_37462, 0, "other", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_37785), Reflex::Literal("Holder"), constructor_37463, 0, "r", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~Holder"), destructor_37466, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::DESTRUCTOR )
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_22958, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getBasesTable"), method_x111, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s_s__funcmem_bld);
}

//------Delayed data member builder for class Holder<reco::Jet,edm::Ref<std::vector<reco::GenJet, std::allocator<reco::GenJet> >, reco::GenJet, edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet, std::allocator<reco::GenJet> >, reco::GenJet> > > -------------------
void __edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_4916, Reflex::Literal("ref_"), OffsetOf(__shadow__::__edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s_s_, ref_), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class Holder<reco::Jet,edm::Ref<std::vector<reco::GenJet, std::allocator<reco::GenJet> >, reco::GenJet, edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet, std::allocator<reco::GenJet> >, reco::GenJet> > > -------------------
void __edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_42355, type_42354), Reflex::Literal("operator="), operator_37464, 0, "rhs", ::Reflex::PUBLIC | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_42355), Reflex::Literal("swap"), method_37465, 0, "other", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_37740), Reflex::Literal("clone"), method_37467, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_37743), Reflex::Literal("getPtr"), method_37468, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4974), Reflex::Literal("id"), method_37469, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2125), Reflex::Literal("key"), method_37470, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569, type_42322), Reflex::Literal("isEqualTo"), method_37471, 0, "rhs", ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_37785), Reflex::Literal("getRef"), method_37472, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569, type_21403, type_11032), Reflex::Literal("fillRefIfMyTypeMatches"), method_37473, 0, "fillme;msg", ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2762), Reflex::Literal("holder"), method_37474, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2761), Reflex::Literal("makeVectorHolder"), method_37475, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2760), Reflex::Literal("makeVectorBaseHolder"), method_37476, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_20128), Reflex::Literal("productGetter"), method_37477, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("hasProductCache"), method_37478, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4040), Reflex::Literal("product"), method_37479, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("isAvailable"), method_37480, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_89), Reflex::Literal("Class_Version"), method_37481, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC);
}
//------Stub functions for class Holder<reco::Jet,edm::Ref<std::vector<reco::JPTJet, std::allocator<reco::JPTJet> >, reco::JPTJet, edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet, std::allocator<reco::JPTJet> >, reco::JPTJet> > > -------------------------------
static void constructor_37483( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >();
  else ::new(mem) ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >();
}

static void constructor_37484( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >(*(const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >*)arg[0]);
  else ::new(mem) ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >(*(const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >*)arg[0]);
}

static void constructor_37485( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >(*(const ::edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >*)arg[0]);
  else ::new(mem) ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >(*(const ::edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> >*)arg[0]);
}

static  void operator_37486( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >*)o)->operator=)(*(const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >*)arg[0]);
  else   (((::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >*)o)->operator=)(*(const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >*)arg[0]);
}

static  void method_37487( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >*)o)->swap)(*(::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >*)arg[0]);
}

static void destructor_37488(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >*)o)->::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >::~Holder)();
}
static  void method_37489( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >*)o)->clone)());
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >*)o)->clone)();
}

static  void method_37490( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >*)o)->getPtr)());
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >*)o)->getPtr)();
}

static  void method_37491( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::ProductID)((((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >*)o)->id)());
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >*)o)->id)();
}

static  void method_37492( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (size_t)((((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >*)o)->key)());
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >*)o)->key)();
}

static  void method_37493( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >*)o)->isEqualTo)(*(const ::edm::reftobase::BaseHolder<reco::Jet>*)arg[0]));
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >*)o)->isEqualTo)(*(const ::edm::reftobase::BaseHolder<reco::Jet>*)arg[0]);
}

static  void method_37494( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >*)o)->getRef)();
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >*)o)->getRef)();
}

static  void method_37495( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >*)o)->fillRefIfMyTypeMatches)(*(::edm::reftobase::RefHolderBase*)arg[0],
    *(::std::basic_string<char>*)arg[1]));
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >*)o)->fillRefIfMyTypeMatches)(*(::edm::reftobase::RefHolderBase*)arg[0],
    *(::std::basic_string<char>*)arg[1]);
}

static  void method_37496( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::auto_ptr<edm::reftobase::RefHolderBase>)((((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >*)o)->holder)());
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >*)o)->holder)();
}

static  void method_37497( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::auto_ptr<edm::reftobase::BaseVectorHolder<reco::Jet> >)((((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >*)o)->makeVectorHolder)());
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >*)o)->makeVectorHolder)();
}

static  void method_37498( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::auto_ptr<edm::reftobase::RefVectorHolderBase>)((((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >*)o)->makeVectorBaseHolder)());
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >*)o)->makeVectorBaseHolder)();
}

static  void method_37499( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >*)o)->productGetter)());
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >*)o)->productGetter)();
}

static  void method_37500( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >*)o)->hasProductCache)());
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >*)o)->hasProductCache)();
}

static  void method_37501( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >*)o)->product)());
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >*)o)->product)();
}

static  void method_37502( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >*)o)->isAvailable)());
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >*)o)->isAvailable)();
}

static  void method_37503( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (short)((((::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >*)o)->Class_Version)());
  else   (((::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >*)o)->Class_Version)();
}

static void method_newdel_22959( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

static void method_x113( void* retaddr, void*, const std::vector<void*>&, void*)
{
  typedef std::vector<std::pair< ::Reflex::Base, int> > Bases_t;
  static Bases_t s_bases;
  if ( !s_bases.size() ) {
    s_bases.push_back(std::make_pair(::Reflex::Base( ::Reflex::TypeBuilder(Reflex::Literal("edm::reftobase::BaseHolder<reco::Jet>")), ::Reflex::BaseOffset< ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >,::edm::reftobase::BaseHolder<reco::Jet> >::Get(),::Reflex::PUBLIC), 0));
  }
  if (retaddr) *(Bases_t**)retaddr = &s_bases;
}

//------Dictionary for class Holder<reco::Jet,edm::Ref<std::vector<reco::JPTJet, std::allocator<reco::JPTJet> >, reco::JPTJet, edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet, std::allocator<reco::JPTJet> >, reco::JPTJet> > > -------------------------------
void __edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__JPTJet__reco__JPTJet_edm__refhelper__FindUsingAdvance_std__vector_reco__JPTJet__reco__JPTJet_s_s__db_datamem(Reflex::Class*);
void __edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__JPTJet__reco__JPTJet_edm__refhelper__FindUsingAdvance_std__vector_reco__JPTJet__reco__JPTJet_s_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__JPTJet__reco__JPTJet_edm__refhelper__FindUsingAdvance_std__vector_reco__JPTJet__reco__JPTJet_s_s__datamem_bld(&__edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__JPTJet__reco__JPTJet_edm__refhelper__FindUsingAdvance_std__vector_reco__JPTJet__reco__JPTJet_s_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__JPTJet__reco__JPTJet_edm__refhelper__FindUsingAdvance_std__vector_reco__JPTJet__reco__JPTJet_s_s__funcmem_bld(&__edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__JPTJet__reco__JPTJet_edm__refhelper__FindUsingAdvance_std__vector_reco__JPTJet__reco__JPTJet_s_s__db_funcmem);
void __edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__JPTJet__reco__JPTJet_edm__refhelper__FindUsingAdvance_std__vector_reco__JPTJet__reco__JPTJet_s_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >"), typeid(::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >), sizeof(::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::VIRTUAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("ClassVersion"), ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >::Class_Version())
  .AddProperty(Reflex::Literal("o_name"), "edm::reftobase::Holder<reco::Jet, reco::JPTJetRef>")
  .AddBase(type_22938, ::Reflex::BaseOffset< ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > >, ::edm::reftobase::BaseHolder<reco::Jet> >::Get(), ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("Holder"), constructor_37483, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_42356), Reflex::Literal("Holder"), constructor_37484, 0, "other", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_36633), Reflex::Literal("Holder"), constructor_37485, 0, "r", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~Holder"), destructor_37488, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::DESTRUCTOR )
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_22959, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getBasesTable"), method_x113, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__JPTJet__reco__JPTJet_edm__refhelper__FindUsingAdvance_std__vector_reco__JPTJet__reco__JPTJet_s_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__JPTJet__reco__JPTJet_edm__refhelper__FindUsingAdvance_std__vector_reco__JPTJet__reco__JPTJet_s_s__funcmem_bld);
}

//------Delayed data member builder for class Holder<reco::Jet,edm::Ref<std::vector<reco::JPTJet, std::allocator<reco::JPTJet> >, reco::JPTJet, edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet, std::allocator<reco::JPTJet> >, reco::JPTJet> > > -------------------
void __edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__JPTJet__reco__JPTJet_edm__refhelper__FindUsingAdvance_std__vector_reco__JPTJet__reco__JPTJet_s_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_4923, Reflex::Literal("ref_"), OffsetOf(__shadow__::__edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__JPTJet__reco__JPTJet_edm__refhelper__FindUsingAdvance_std__vector_reco__JPTJet__reco__JPTJet_s_s_, ref_), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class Holder<reco::Jet,edm::Ref<std::vector<reco::JPTJet, std::allocator<reco::JPTJet> >, reco::JPTJet, edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet, std::allocator<reco::JPTJet> >, reco::JPTJet> > > -------------------
void __edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__JPTJet__reco__JPTJet_edm__refhelper__FindUsingAdvance_std__vector_reco__JPTJet__reco__JPTJet_s_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_42357, type_42356), Reflex::Literal("operator="), operator_37486, 0, "rhs", ::Reflex::PUBLIC | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_42357), Reflex::Literal("swap"), method_37487, 0, "other", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_37740), Reflex::Literal("clone"), method_37489, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_37743), Reflex::Literal("getPtr"), method_37490, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4974), Reflex::Literal("id"), method_37491, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2125), Reflex::Literal("key"), method_37492, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569, type_42322), Reflex::Literal("isEqualTo"), method_37493, 0, "rhs", ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_36633), Reflex::Literal("getRef"), method_37494, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569, type_21403, type_11032), Reflex::Literal("fillRefIfMyTypeMatches"), method_37495, 0, "fillme;msg", ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2762), Reflex::Literal("holder"), method_37496, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2761), Reflex::Literal("makeVectorHolder"), method_37497, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2760), Reflex::Literal("makeVectorBaseHolder"), method_37498, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_20128), Reflex::Literal("productGetter"), method_37499, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("hasProductCache"), method_37500, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4040), Reflex::Literal("product"), method_37501, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("isAvailable"), method_37502, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_89), Reflex::Literal("Class_Version"), method_37503, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC);
}
//------Stub functions for class Holder<reco::Jet,edm::Ref<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> >, reco::CaloJet, edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> >, reco::CaloJet> > > -------------------------------
static void constructor_37505( void* retaddr, void* mem, const std::vector<void*>&, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >();
  else ::new(mem) ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >();
}

static void constructor_37506( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >(*(const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)arg[0]);
  else ::new(mem) ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >(*(const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)arg[0]);
}

static void constructor_37507( void* retaddr, void* mem, const std::vector<void*>& arg, void*) {
  if (retaddr) *(void**)retaddr = ::new(mem) ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >(*(const ::edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)arg[0]);
  else ::new(mem) ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >(*(const ::edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> >*)arg[0]);
}

static  void operator_37508( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->operator=)(*(const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)arg[0]);
  else   (((::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->operator=)(*(const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)arg[0]);
}

static  void method_37509( void*, void* o, const std::vector<void*>& arg, void*)
{
  (((::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->swap)(*(::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)arg[0]);
}

static void destructor_37510(void*, void * o, const std::vector<void*>&, void *) {
(((::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >::~Holder)();
}
static  void method_37511( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->clone)());
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->clone)();
}

static  void method_37512( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->getPtr)());
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->getPtr)();
}

static  void method_37513( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (edm::ProductID)((((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->id)());
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->id)();
}

static  void method_37514( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (size_t)((((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->key)());
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->key)();
}

static  void method_37515( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->isEqualTo)(*(const ::edm::reftobase::BaseHolder<reco::Jet>*)arg[0]));
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->isEqualTo)(*(const ::edm::reftobase::BaseHolder<reco::Jet>*)arg[0]);
}

static  void method_37516( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&(((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->getRef)();
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->getRef)();
}

static  void method_37517( void* retaddr, void* o, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->fillRefIfMyTypeMatches)(*(::edm::reftobase::RefHolderBase*)arg[0],
    *(::std::basic_string<char>*)arg[1]));
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->fillRefIfMyTypeMatches)(*(::edm::reftobase::RefHolderBase*)arg[0],
    *(::std::basic_string<char>*)arg[1]);
}

static  void method_37518( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::auto_ptr<edm::reftobase::RefHolderBase>)((((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->holder)());
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->holder)();
}

static  void method_37519( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::auto_ptr<edm::reftobase::BaseVectorHolder<reco::Jet> >)((((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->makeVectorHolder)());
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->makeVectorHolder)();
}

static  void method_37520( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (std::auto_ptr<edm::reftobase::RefVectorHolderBase>)((((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->makeVectorBaseHolder)());
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->makeVectorBaseHolder)();
}

static  void method_37521( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->productGetter)());
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->productGetter)();
}

static  void method_37522( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->hasProductCache)());
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->hasProductCache)();
}

static  void method_37523( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->product)());
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->product)();
}

static  void method_37524( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (bool)((((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->isAvailable)());
  else   (((const ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->isAvailable)();
}

static  void method_37525( void* retaddr, void* o, const std::vector<void*>&, void*)
{
  if (retaddr) new (retaddr) (short)((((::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->Class_Version)());
  else   (((::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >*)o)->Class_Version)();
}

static void method_newdel_22960( void* retaddr, void*, const std::vector<void*>&, void*)
{
  static ::Reflex::NewDelFunctions s_funcs;
  s_funcs.fNew         = ::Reflex::NewDelFunctionsT< ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >::new_T;
  s_funcs.fNewArray    = ::Reflex::NewDelFunctionsT< ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >::newArray_T;
  s_funcs.fDelete      = ::Reflex::NewDelFunctionsT< ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >::delete_T;
  s_funcs.fDeleteArray = ::Reflex::NewDelFunctionsT< ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >::deleteArray_T;
  s_funcs.fDestructor  = ::Reflex::NewDelFunctionsT< ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > >::destruct_T;
  if (retaddr) *(::Reflex::NewDelFunctions**)retaddr = &s_funcs;
}

static void method_x115( void* retaddr, void*, const std::vector<void*>&, void*)
{
  typedef std::vector<std::pair< ::Reflex::Base, int> > Bases_t;
  static Bases_t s_bases;
  if ( !s_bases.size() ) {
    s_bases.push_back(std::make_pair(::Reflex::Base( ::Reflex::TypeBuilder(Reflex::Literal("edm::reftobase::BaseHolder<reco::Jet>")), ::Reflex::BaseOffset< ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >,::edm::reftobase::BaseHolder<reco::Jet> >::Get(),::Reflex::PUBLIC), 0));
  }
  if (retaddr) *(Bases_t**)retaddr = &s_bases;
}

//------Dictionary for class Holder<reco::Jet,edm::Ref<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> >, reco::CaloJet, edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> >, reco::CaloJet> > > -------------------------------
void __edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s__db_datamem(Reflex::Class*);
void __edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s__db_funcmem(Reflex::Class*);
Reflex::GenreflexMemberBuilder __edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s__datamem_bld(&__edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s__db_datamem);
Reflex::GenreflexMemberBuilder __edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s__funcmem_bld(&__edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s__db_funcmem);
void __edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s__dict() {
  ::Reflex::ClassBuilder(Reflex::Literal("edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >"), typeid(::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >), sizeof(::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >), ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL | ::Reflex::VIRTUAL, ::Reflex::CLASS)
  .AddProperty(Reflex::Literal("ClassVersion"), ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >::Class_Version())
  .AddProperty(Reflex::Literal("o_name"), "edm::reftobase::Holder<reco::Jet, reco::CaloJetRef>")
  .AddBase(type_22938, ::Reflex::BaseOffset< ::edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > >, ::edm::reftobase::BaseHolder<reco::Jet> >::Get(), ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("Holder"), constructor_37505, 0, 0, ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_42358), Reflex::Literal("Holder"), constructor_37506, 0, "other", ::Reflex::PUBLIC | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void, type_37793), Reflex::Literal("Holder"), constructor_37507, 0, "r", ::Reflex::PUBLIC | ::Reflex::EXPLICIT | ::Reflex::CONSTRUCTOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_void), Reflex::Literal("~Holder"), destructor_37510, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::DESTRUCTOR )
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getNewDelFunctions"), method_newdel_22960, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddFunctionMember<void*(void)>(Reflex::Literal("__getBasesTable"), method_x115, 0, 0, ::Reflex::PUBLIC | ::Reflex::ARTIFICIAL)
  .AddOnDemandDataMemberBuilder(&__edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s__datamem_bld)
  .AddOnDemandFunctionMemberBuilder(&__edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s__funcmem_bld);
}

//------Delayed data member builder for class Holder<reco::Jet,edm::Ref<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> >, reco::CaloJet, edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> >, reco::CaloJet> > > -------------------
void __edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s__db_datamem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddDataMember(type_4917, Reflex::Literal("ref_"), OffsetOf(__shadow__::__edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s_, ref_), ::Reflex::PRIVATE);
}
//------Delayed function member builder for class Holder<reco::Jet,edm::Ref<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> >, reco::CaloJet, edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet, std::allocator<reco::CaloJet> >, reco::CaloJet> > > -------------------
void __edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s__db_funcmem(Reflex::Class* cl) {
  ::Reflex::ClassBuilder(cl)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_42359, type_42358), Reflex::Literal("operator="), operator_37508, 0, "rhs", ::Reflex::PUBLIC | ::Reflex::OPERATOR)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_698, type_42359), Reflex::Literal("swap"), method_37509, 0, "other", ::Reflex::PUBLIC)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_37740), Reflex::Literal("clone"), method_37511, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_37743), Reflex::Literal("getPtr"), method_37512, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4974), Reflex::Literal("id"), method_37513, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2125), Reflex::Literal("key"), method_37514, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569, type_42322), Reflex::Literal("isEqualTo"), method_37515, 0, "rhs", ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_37793), Reflex::Literal("getRef"), method_37516, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569, type_21403, type_11032), Reflex::Literal("fillRefIfMyTypeMatches"), method_37517, 0, "fillme;msg", ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2762), Reflex::Literal("holder"), method_37518, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2761), Reflex::Literal("makeVectorHolder"), method_37519, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_2760), Reflex::Literal("makeVectorBaseHolder"), method_37520, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_20128), Reflex::Literal("productGetter"), method_37521, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("hasProductCache"), method_37522, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_4040), Reflex::Literal("product"), method_37523, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_1569), Reflex::Literal("isAvailable"), method_37524, 0, 0, ::Reflex::PUBLIC | ::Reflex::VIRTUAL | ::Reflex::CONST)
  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_89), Reflex::Literal("Class_Version"), method_37525, 0, 0, ::Reflex::PUBLIC | ::Reflex::STATIC);
}
static void function_26118( void* retaddr, void*, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&reco::JetTracksAssociation::getValue(*(const ::reco::JetTracksAssociation::Container*)arg[0],
    *(const ::reco::Jet*)arg[1]);
  else reco::JetTracksAssociation::getValue(*(const ::reco::JetTracksAssociation::Container*)arg[0],
    *(const ::reco::Jet*)arg[1]);
}
static void function_26119( void* retaddr, void*, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&reco::JetTracksAssociation::getValue(*(const ::reco::JetTracksAssociation::Container*)arg[0],
    *(const ::reco::JetBaseRef*)arg[1]);
  else reco::JetTracksAssociation::getValue(*(const ::reco::JetTracksAssociation::Container*)arg[0],
    *(const ::reco::JetBaseRef*)arg[1]);
}
static void function_26121( void* retaddr, void*, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (std::vector<edm::RefToBase<reco::Jet> >)(reco::JetTracksAssociation::allJets(*(const ::reco::JetTracksAssociation::Container*)arg[0]));
  else reco::JetTracksAssociation::allJets(*(const ::reco::JetTracksAssociation::Container*)arg[0]);
}
static void function_26125( void* retaddr, void*, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (bool)(reco::JetTracksAssociation::hasJet(*(const ::reco::JetTracksAssociation::Container*)arg[0],
    *(const ::reco::Jet*)arg[1]));
  else reco::JetTracksAssociation::hasJet(*(const ::reco::JetTracksAssociation::Container*)arg[0],
    *(const ::reco::Jet*)arg[1]);
}
static void function_26126( void* retaddr, void*, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (bool)(reco::JetTracksAssociation::hasJet(*(const ::reco::JetTracksAssociation::Container*)arg[0],
    *(const ::reco::JetBaseRef*)arg[1]));
  else reco::JetTracksAssociation::hasJet(*(const ::reco::JetTracksAssociation::Container*)arg[0],
    *(const ::reco::JetBaseRef*)arg[1]);
}
static void function_26127( void* retaddr, void*, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (bool)(reco::JetTracksAssociation::setValue((::reco::JetTracksAssociation::Container*)arg[0],
    *(const ::reco::JetBaseRef*)arg[1],
    *(::reco::TrackRefVector*)arg[2]));
  else reco::JetTracksAssociation::setValue((::reco::JetTracksAssociation::Container*)arg[0],
    *(const ::reco::JetBaseRef*)arg[1],
    *(::reco::TrackRefVector*)arg[2]);
}
static void function_26128( void* retaddr, void*, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (bool)(reco::JetTracksAssociation::setValue(*(::reco::JetTracksAssociation::Container*)arg[0],
    *(const ::reco::JetBaseRef*)arg[1],
    *(::reco::TrackRefVector*)arg[2]));
  else reco::JetTracksAssociation::setValue(*(::reco::JetTracksAssociation::Container*)arg[0],
    *(const ::reco::JetBaseRef*)arg[1],
    *(::reco::TrackRefVector*)arg[2]);
}
static void function_26130( void* retaddr, void*, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (reco::JetTracksAssociation::LorentzVector)(reco::JetTracksAssociation::tracksP4(*(const ::reco::JetTracksAssociation::Container*)arg[0],
    *(const ::reco::Jet*)arg[1]));
  else reco::JetTracksAssociation::tracksP4(*(const ::reco::JetTracksAssociation::Container*)arg[0],
    *(const ::reco::Jet*)arg[1]);
}
static void function_26131( void* retaddr, void*, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (reco::JetTracksAssociation::LorentzVector)(reco::JetTracksAssociation::tracksP4(*(const ::reco::JetTracksAssociation::Container*)arg[0],
    *(const ::reco::JetBaseRef*)arg[1]));
  else reco::JetTracksAssociation::tracksP4(*(const ::reco::JetTracksAssociation::Container*)arg[0],
    *(const ::reco::JetBaseRef*)arg[1]);
}
static void function_26134( void* retaddr, void*, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (int)(reco::JetTracksAssociation::tracksNumber(*(const ::reco::JetTracksAssociation::Container*)arg[0],
    *(const ::reco::Jet*)arg[1]));
  else reco::JetTracksAssociation::tracksNumber(*(const ::reco::JetTracksAssociation::Container*)arg[0],
    *(const ::reco::Jet*)arg[1]);
}
static void function_26135( void* retaddr, void*, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (int)(reco::JetTracksAssociation::tracksNumber(*(const ::reco::JetTracksAssociation::Container*)arg[0],
    *(const ::reco::JetBaseRef*)arg[1]));
  else reco::JetTracksAssociation::tracksNumber(*(const ::reco::JetTracksAssociation::Container*)arg[0],
    *(const ::reco::JetBaseRef*)arg[1]);
}
static void function_26912( void* retaddr, void*, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (float)(reco::JetFloatAssociation::getValue(*(const ::reco::JetFloatAssociation::Container*)arg[0],
    *(const ::reco::Jet*)arg[1]));
  else reco::JetFloatAssociation::getValue(*(const ::reco::JetFloatAssociation::Container*)arg[0],
    *(const ::reco::Jet*)arg[1]);
}
static void function_26913( void* retaddr, void*, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (float)(reco::JetFloatAssociation::getValue(*(const ::reco::JetFloatAssociation::Container*)arg[0],
    *(const ::reco::JetBaseRef*)arg[1]));
  else reco::JetFloatAssociation::getValue(*(const ::reco::JetFloatAssociation::Container*)arg[0],
    *(const ::reco::JetBaseRef*)arg[1]);
}
static void function_26915( void* retaddr, void*, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (std::vector<edm::RefToBase<reco::Jet> >)(reco::JetFloatAssociation::allJets(*(const ::reco::JetFloatAssociation::Container*)arg[0]));
  else reco::JetFloatAssociation::allJets(*(const ::reco::JetFloatAssociation::Container*)arg[0]);
}
static void function_26919( void* retaddr, void*, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (bool)(reco::JetFloatAssociation::hasJet(*(const ::reco::JetFloatAssociation::Container*)arg[0],
    *(const ::reco::Jet*)arg[1]));
  else reco::JetFloatAssociation::hasJet(*(const ::reco::JetFloatAssociation::Container*)arg[0],
    *(const ::reco::Jet*)arg[1]);
}
static void function_26920( void* retaddr, void*, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (bool)(reco::JetFloatAssociation::hasJet(*(const ::reco::JetFloatAssociation::Container*)arg[0],
    *(const ::reco::JetBaseRef*)arg[1]));
  else reco::JetFloatAssociation::hasJet(*(const ::reco::JetFloatAssociation::Container*)arg[0],
    *(const ::reco::JetBaseRef*)arg[1]);
}
static void function_26921( void* retaddr, void*, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (bool)(reco::JetFloatAssociation::setValue((::reco::JetFloatAssociation::Container*)arg[0],
    *(const ::reco::JetBaseRef*)arg[1],
    *(float*)arg[2]));
  else reco::JetFloatAssociation::setValue((::reco::JetFloatAssociation::Container*)arg[0],
    *(const ::reco::JetBaseRef*)arg[1],
    *(float*)arg[2]);
}
static void function_26922( void* retaddr, void*, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (bool)(reco::JetFloatAssociation::setValue(*(::reco::JetFloatAssociation::Container*)arg[0],
    *(const ::reco::JetBaseRef*)arg[1],
    *(float*)arg[2]));
  else reco::JetFloatAssociation::setValue(*(::reco::JetFloatAssociation::Container*)arg[0],
    *(const ::reco::JetBaseRef*)arg[1],
    *(float*)arg[2]);
}
static void function_27476( void* retaddr, void*, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&reco::JetExtendedAssociation::getValue(*(const ::reco::JetExtendedAssociation::Container*)arg[0],
    *(const ::reco::Jet*)arg[1]);
  else reco::JetExtendedAssociation::getValue(*(const ::reco::JetExtendedAssociation::Container*)arg[0],
    *(const ::reco::Jet*)arg[1]);
}
static void function_27477( void* retaddr, void*, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&reco::JetExtendedAssociation::getValue(*(const ::reco::JetExtendedAssociation::Container*)arg[0],
    *(const ::reco::JetBaseRef*)arg[1]);
  else reco::JetExtendedAssociation::getValue(*(const ::reco::JetExtendedAssociation::Container*)arg[0],
    *(const ::reco::JetBaseRef*)arg[1]);
}
static void function_27479( void* retaddr, void*, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (std::vector<edm::RefToBase<reco::Jet> >)(reco::JetExtendedAssociation::allJets(*(const ::reco::JetExtendedAssociation::Container*)arg[0]));
  else reco::JetExtendedAssociation::allJets(*(const ::reco::JetExtendedAssociation::Container*)arg[0]);
}
static void function_27483( void* retaddr, void*, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (bool)(reco::JetExtendedAssociation::hasJet(*(const ::reco::JetExtendedAssociation::Container*)arg[0],
    *(const ::reco::Jet*)arg[1]));
  else reco::JetExtendedAssociation::hasJet(*(const ::reco::JetExtendedAssociation::Container*)arg[0],
    *(const ::reco::Jet*)arg[1]);
}
static void function_27484( void* retaddr, void*, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (bool)(reco::JetExtendedAssociation::hasJet(*(const ::reco::JetExtendedAssociation::Container*)arg[0],
    *(const ::reco::JetBaseRef*)arg[1]));
  else reco::JetExtendedAssociation::hasJet(*(const ::reco::JetExtendedAssociation::Container*)arg[0],
    *(const ::reco::JetBaseRef*)arg[1]);
}
static void function_27485( void* retaddr, void*, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (bool)(reco::JetExtendedAssociation::setValue((::reco::JetExtendedAssociation::Container*)arg[0],
    *(const ::reco::JetBaseRef*)arg[1],
    *(const ::reco::JetExtendedAssociation::JetExtendedData*)arg[2]));
  else reco::JetExtendedAssociation::setValue((::reco::JetExtendedAssociation::Container*)arg[0],
    *(const ::reco::JetBaseRef*)arg[1],
    *(const ::reco::JetExtendedAssociation::JetExtendedData*)arg[2]);
}
static void function_27486( void* retaddr, void*, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (bool)(reco::JetExtendedAssociation::setValue(*(::reco::JetExtendedAssociation::Container*)arg[0],
    *(const ::reco::JetBaseRef*)arg[1],
    *(const ::reco::JetExtendedAssociation::JetExtendedData*)arg[2]));
  else reco::JetExtendedAssociation::setValue(*(::reco::JetExtendedAssociation::Container*)arg[0],
    *(const ::reco::JetBaseRef*)arg[1],
    *(const ::reco::JetExtendedAssociation::JetExtendedData*)arg[2]);
}
static void function_27487( void* retaddr, void*, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (int)(reco::JetExtendedAssociation::tracksAtVertexNumber(*(const ::reco::JetExtendedAssociation::Container*)arg[0],
    *(const ::reco::Jet*)arg[1]));
  else reco::JetExtendedAssociation::tracksAtVertexNumber(*(const ::reco::JetExtendedAssociation::Container*)arg[0],
    *(const ::reco::Jet*)arg[1]);
}
static void function_27488( void* retaddr, void*, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (int)(reco::JetExtendedAssociation::tracksAtVertexNumber(*(const ::reco::JetExtendedAssociation::Container*)arg[0],
    *(const ::reco::JetBaseRef*)arg[1]));
  else reco::JetExtendedAssociation::tracksAtVertexNumber(*(const ::reco::JetExtendedAssociation::Container*)arg[0],
    *(const ::reco::JetBaseRef*)arg[1]);
}
static void function_27490( void* retaddr, void*, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&reco::JetExtendedAssociation::tracksAtVertexP4(*(const ::reco::JetExtendedAssociation::Container*)arg[0],
    *(const ::reco::Jet*)arg[1]);
  else reco::JetExtendedAssociation::tracksAtVertexP4(*(const ::reco::JetExtendedAssociation::Container*)arg[0],
    *(const ::reco::Jet*)arg[1]);
}
static void function_27491( void* retaddr, void*, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&reco::JetExtendedAssociation::tracksAtVertexP4(*(const ::reco::JetExtendedAssociation::Container*)arg[0],
    *(const ::reco::JetBaseRef*)arg[1]);
  else reco::JetExtendedAssociation::tracksAtVertexP4(*(const ::reco::JetExtendedAssociation::Container*)arg[0],
    *(const ::reco::JetBaseRef*)arg[1]);
}
static void function_27492( void* retaddr, void*, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&reco::JetExtendedAssociation::tracksAtCaloP4(*(const ::reco::JetExtendedAssociation::Container*)arg[0],
    *(const ::reco::Jet*)arg[1]);
  else reco::JetExtendedAssociation::tracksAtCaloP4(*(const ::reco::JetExtendedAssociation::Container*)arg[0],
    *(const ::reco::Jet*)arg[1]);
}
static void function_27493( void* retaddr, void*, const std::vector<void*>& arg, void*)
{
  if (retaddr) *(void**)retaddr = (void*)&reco::JetExtendedAssociation::tracksAtCaloP4(*(const ::reco::JetExtendedAssociation::Container*)arg[0],
    *(const ::reco::JetBaseRef*)arg[1]);
  else reco::JetExtendedAssociation::tracksAtCaloP4(*(const ::reco::JetExtendedAssociation::Container*)arg[0],
    *(const ::reco::JetBaseRef*)arg[1]);
}
static void function_27496( void* retaddr, void*, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (int)(reco::JetExtendedAssociation::tracksAtCaloNumber(*(const ::reco::JetExtendedAssociation::Container*)arg[0],
    *(const ::reco::Jet*)arg[1]));
  else reco::JetExtendedAssociation::tracksAtCaloNumber(*(const ::reco::JetExtendedAssociation::Container*)arg[0],
    *(const ::reco::Jet*)arg[1]);
}
static void function_27497( void* retaddr, void*, const std::vector<void*>& arg, void*)
{
  if (retaddr) new (retaddr) (int)(reco::JetExtendedAssociation::tracksAtCaloNumber(*(const ::reco::JetExtendedAssociation::Container*)arg[0],
    *(const ::reco::JetBaseRef*)arg[1]));
  else reco::JetExtendedAssociation::tracksAtCaloNumber(*(const ::reco::JetExtendedAssociation::Container*)arg[0],
    *(const ::reco::JetBaseRef*)arg[1]);
}
namespace {
  struct Dictionaries {
    Dictionaries() {
      Reflex::Instance initialize_reflex;
      __StoredPileupJetIdentifier_dict(); 
      __std__vector_StoredPileupJetIdentifier__dict(); 
      __reco__PFClusterJet_dict(); 
      __std__vector_reco__PFClusterJet__dict(); 
      __reco__TrackJet_dict(); 
      __std__vector_reco__TrackJet__dict(); 
      __edm__FwdPtr_reco__PFClusterJet__dict(); 
      __edm__FwdPtr_reco__TrackJet__dict(); 
      __edm__RefVector_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s__dict(); 
      __edm__RefVector_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s__dict(); 
      __edm__RefToBaseVector_reco__Jet__dict(); 
      __edm__Wrapper_edm__RefToBaseVector_reco__Jet_s__dict(); 
      __edm__ValueMap_StoredPileupJetIdentifier__dict(); 
      __edm__Wrapper_edm__ValueMap_StoredPileupJetIdentifier_s__dict(); 
      __edm__Wrapper_std__vector_reco__PFClusterJet_s__dict(); 
      __edm__Wrapper_std__vector_reco__TrackJet_s__dict(); 
      __edm__FwdRef_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s__dict(); 
      __edm__FwdRef_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s__dict(); 
      __edm__RefToBaseProd_reco__Jet__dict(); 
      __reco__JetExtendedAssociation__JetExtendedData_dict(); 
      __edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_reco__JetExtendedAssociation__JetExtendedData__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__dict(); 
      __edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__dict(); 
      __edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_float__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__dict(); 
      __edm__RefProd_std__vector_reco__PFClusterJet_s__dict(); 
      __edm__RefProd_std__vector_reco__TrackJet_s__dict(); 
      __edm__RefToBase_reco__Jet__dict(); 
      __edm__Ref_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s__dict(); 
      __edm__Ref_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s__dict(); 
      __reco__JetTrackMatch_std__vector_reco__PFClusterJet_s__dict(); 
      __reco__JetTrackMatch_std__vector_reco__TrackJet_s__dict(); 
      __edm__reftobase__BaseHolder_reco__Jet__dict(); 
      __edm__reftobase__IndirectHolder_reco__Jet__dict(); 
      __edm__reftobase__IndirectVectorHolder_reco__Jet__dict(); 
      __edm__reftobase__BaseVectorHolder_reco__Jet__dict(); 
      __edm__reftobase__Holder_reco__Candidate_edm__RefToBase_reco__Jet_s__dict(); 
      __edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s_s__dict(); 
      __edm__reftobase__Holder_reco__Candidate_edm__Ref_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s_s__dict(); 
      __std__vector_edm__FwdPtr_reco__PFClusterJet_s__dict(); 
      __std__vector_edm__FwdPtr_reco__TrackJet_s__dict(); 
      __std__vector_edm__FwdRef_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s_s__dict(); 
      __std__vector_edm__FwdRef_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s_s__dict(); 
      __edm__Ref_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__refhelper__FindUsingAdvance_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s_s_s__dict(); 
      __edm__RefVector_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__refhelper__FindUsingAdvance_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s_s_s__dict(); 
      __std__pair_edm__RefToBase_reco__Jet__edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__dict(); 
      __std__vector_std__pair_edm__RefToBase_reco__Jet__edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s_s__dict(); 
      __edm__RefProd_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference_s__dict(); 
      __edm__RefVector_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_float__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__float__edm__refhelper__FindUsingAdvance_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_float__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__float_s_s__dict(); 
      __std__vector_std__pair_edm__RefToBase_reco__Jet__float_s__dict(); 
      __edm__RefProd_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_float__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference_s__dict(); 
      __edm__Ref_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_float__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__float__edm__refhelper__FindUsingAdvance_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_float__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__float_s_s__dict(); 
      __edm__RefVector_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_reco__JetExtendedAssociation__JetExtendedData__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__reco__JetExtendedAssociation__JetExtendedData__edm__refhelper__FindUsingAdvance_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_reco__JetExtendedAssociation__JetExtendedData__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__reco__JetExtendedAssociation__JetExtendedData_s_s__dict(); 
      __std__vector_reco__JetExtendedAssociation__JetExtendedData__dict(); 
      __std__pair_edm__RefToBase_reco__Jet__reco__JetExtendedAssociation__JetExtendedData__dict(); 
      __std__vector_std__pair_edm__RefToBase_reco__Jet__reco__JetExtendedAssociation__JetExtendedData_s__dict(); 
      __edm__RefProd_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_reco__JetExtendedAssociation__JetExtendedData__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference_s__dict(); 
      __edm__Ref_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_reco__JetExtendedAssociation__JetExtendedData__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__reco__JetExtendedAssociation__JetExtendedData__edm__refhelper__FindUsingAdvance_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_reco__JetExtendedAssociation__JetExtendedData__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference__std__pair_edm__RefToBase_reco__Jet__reco__JetExtendedAssociation__JetExtendedData_s_s__dict(); 
      __edm__Wrapper_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_reco__JetExtendedAssociation__JetExtendedData__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference_s__dict(); 
      __edm__Wrapper_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_edm__RefVector_std__vector_reco__Track__reco__Track_edm__refhelper__FindUsingAdvance_std__vector_reco__Track__reco__Track_s_s__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference_s__dict(); 
      __edm__Wrapper_edm__AssociationVector_edm__RefToBaseProd_reco__Jet__std__vector_float__edm__RefToBase_reco__Jet__unsignedsint_edm__helper__AssociationIdenticalKeyReference_s__dict(); 
      __edm__Wrapper_std__vector_edm__FwdPtr_reco__PFClusterJet_s_s__dict(); 
      __edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s_s_s__dict(); 
      __edm__Wrapper_edm__RefVector_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s_s__dict(); 
      __edm__Wrapper_std__vector_edm__FwdPtr_reco__TrackJet_s_s__dict(); 
      __edm__Wrapper_std__vector_edm__FwdRef_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s_s_s__dict(); 
      __edm__Wrapper_edm__RefVector_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s_s__dict(); 
      __edm__reftobase__RefHolder_edm__Ref_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s_s__dict(); 
      __edm__reftobase__RefHolder_edm__Ref_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s_s__dict(); 
      __edm__reftobase__RefHolder_edm__Ref_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s__dict(); 
      __edm__reftobase__RefHolder_edm__Ref_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s_s__dict(); 
      __edm__reftobase__RefHolder_edm__Ref_std__vector_reco__JPTJet__reco__JPTJet_edm__refhelper__FindUsingAdvance_std__vector_reco__JPTJet__reco__JPTJet_s_s__dict(); 
      __edm__reftobase__RefHolder_edm__Ref_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s__dict(); 
      __edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__PFClusterJet__reco__PFClusterJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFClusterJet__reco__PFClusterJet_s_s__dict(); 
      __edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__TrackJet__reco__TrackJet_edm__refhelper__FindUsingAdvance_std__vector_reco__TrackJet__reco__TrackJet_s_s__dict(); 
      __edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__PFJet__reco__PFJet_edm__refhelper__FindUsingAdvance_std__vector_reco__PFJet__reco__PFJet_s_s__dict(); 
      __edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__GenJet__reco__GenJet_edm__refhelper__FindUsingAdvance_std__vector_reco__GenJet__reco__GenJet_s_s__dict(); 
      __edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__JPTJet__reco__JPTJet_edm__refhelper__FindUsingAdvance_std__vector_reco__JPTJet__reco__JPTJet_s_s__dict(); 
      __edm__reftobase__Holder_reco__Jet_edm__Ref_std__vector_reco__CaloJet__reco__CaloJet_edm__refhelper__FindUsingAdvance_std__vector_reco__CaloJet__reco__CaloJet_s_s__dict(); 
      ::Reflex::Type t0 = ::Reflex::FunctionTypeBuilder(type_38627, type_38628, type_37742);      ::Reflex::FunctionBuilder(t0, Reflex::Literal("reco::JetTracksAssociation::getValue"), function_26118, 0, Reflex::Literal(";"), ::Reflex::PUBLIC);
      ::Reflex::Type t1 = ::Reflex::FunctionTypeBuilder(type_38627, type_38628, type_38629);      ::Reflex::FunctionBuilder(t1, Reflex::Literal("reco::JetTracksAssociation::getValue"), function_26119, 0, Reflex::Literal(";"), ::Reflex::PUBLIC);
      ::Reflex::Type t2 = ::Reflex::FunctionTypeBuilder(type_2993, type_38628);      ::Reflex::FunctionBuilder(t2, Reflex::Literal("reco::JetTracksAssociation::allJets"), function_26121, 0, Reflex::Literal(""), ::Reflex::PUBLIC);
      ::Reflex::Type t3 = ::Reflex::FunctionTypeBuilder(type_1569, type_38628, type_37742);      ::Reflex::FunctionBuilder(t3, Reflex::Literal("reco::JetTracksAssociation::hasJet"), function_26125, 0, Reflex::Literal(";"), ::Reflex::PUBLIC);
      ::Reflex::Type t4 = ::Reflex::FunctionTypeBuilder(type_1569, type_38628, type_38629);      ::Reflex::FunctionBuilder(t4, Reflex::Literal("reco::JetTracksAssociation::hasJet"), function_26126, 0, Reflex::Literal(";"), ::Reflex::PUBLIC);
      ::Reflex::Type t5 = ::Reflex::FunctionTypeBuilder(type_1569, type_38630, type_38629, type_7858);      ::Reflex::FunctionBuilder(t5, Reflex::Literal("reco::JetTracksAssociation::setValue"), function_26127, 0, Reflex::Literal(";;"), ::Reflex::PUBLIC);
      ::Reflex::Type t6 = ::Reflex::FunctionTypeBuilder(type_1569, type_38631, type_38629, type_7858);      ::Reflex::FunctionBuilder(t6, Reflex::Literal("reco::JetTracksAssociation::setValue"), function_26128, 0, Reflex::Literal(";;"), ::Reflex::PUBLIC);
      ::Reflex::Type t7 = ::Reflex::FunctionTypeBuilder(type_26136, type_38628, type_37742);      ::Reflex::FunctionBuilder(t7, Reflex::Literal("reco::JetTracksAssociation::tracksP4"), function_26130, 0, Reflex::Literal(";"), ::Reflex::PUBLIC);
      ::Reflex::Type t8 = ::Reflex::FunctionTypeBuilder(type_26136, type_38628, type_7834c);      ::Reflex::FunctionBuilder(t8, Reflex::Literal("reco::JetTracksAssociation::tracksP4"), function_26131, 0, Reflex::Literal(";"), ::Reflex::PUBLIC);
      ::Reflex::Type t9 = ::Reflex::FunctionTypeBuilder(type_68, type_38628, type_37742);      ::Reflex::FunctionBuilder(t9, Reflex::Literal("reco::JetTracksAssociation::tracksNumber"), function_26134, 0, Reflex::Literal(";"), ::Reflex::PUBLIC);
      ::Reflex::Type t10 = ::Reflex::FunctionTypeBuilder(type_68, type_38628, type_7834c);      ::Reflex::FunctionBuilder(t10, Reflex::Literal("reco::JetTracksAssociation::tracksNumber"), function_26135, 0, Reflex::Literal(";"), ::Reflex::PUBLIC);
      ::Reflex::Type t11 = ::Reflex::FunctionTypeBuilder(type_902, type_38802, type_37742);      ::Reflex::FunctionBuilder(t11, Reflex::Literal("reco::JetFloatAssociation::getValue"), function_26912, 0, Reflex::Literal(";"), ::Reflex::PUBLIC);
      ::Reflex::Type t12 = ::Reflex::FunctionTypeBuilder(type_902, type_38802, type_38629);      ::Reflex::FunctionBuilder(t12, Reflex::Literal("reco::JetFloatAssociation::getValue"), function_26913, 0, Reflex::Literal(";"), ::Reflex::PUBLIC);
      ::Reflex::Type t13 = ::Reflex::FunctionTypeBuilder(type_2993, type_38802);      ::Reflex::FunctionBuilder(t13, Reflex::Literal("reco::JetFloatAssociation::allJets"), function_26915, 0, Reflex::Literal(""), ::Reflex::PUBLIC);
      ::Reflex::Type t14 = ::Reflex::FunctionTypeBuilder(type_1569, type_38802, type_37742);      ::Reflex::FunctionBuilder(t14, Reflex::Literal("reco::JetFloatAssociation::hasJet"), function_26919, 0, Reflex::Literal(";"), ::Reflex::PUBLIC);
      ::Reflex::Type t15 = ::Reflex::FunctionTypeBuilder(type_1569, type_38802, type_38629);      ::Reflex::FunctionBuilder(t15, Reflex::Literal("reco::JetFloatAssociation::hasJet"), function_26920, 0, Reflex::Literal(";"), ::Reflex::PUBLIC);
      ::Reflex::Type t16 = ::Reflex::FunctionTypeBuilder(type_1569, type_38803, type_38629, type_902);      ::Reflex::FunctionBuilder(t16, Reflex::Literal("reco::JetFloatAssociation::setValue"), function_26921, 0, Reflex::Literal(";;"), ::Reflex::PUBLIC);
      ::Reflex::Type t17 = ::Reflex::FunctionTypeBuilder(type_1569, type_38804, type_38629, type_902);      ::Reflex::FunctionBuilder(t17, Reflex::Literal("reco::JetFloatAssociation::setValue"), function_26922, 0, Reflex::Literal(";;"), ::Reflex::PUBLIC);
      ::Reflex::Type t18 = ::Reflex::FunctionTypeBuilder(type_14813, type_38864, type_37742);      ::Reflex::FunctionBuilder(t18, Reflex::Literal("reco::JetExtendedAssociation::getValue"), function_27476, 0, Reflex::Literal(";"), ::Reflex::PUBLIC);
      ::Reflex::Type t19 = ::Reflex::FunctionTypeBuilder(type_14813, type_38864, type_38629);      ::Reflex::FunctionBuilder(t19, Reflex::Literal("reco::JetExtendedAssociation::getValue"), function_27477, 0, Reflex::Literal(";"), ::Reflex::PUBLIC);
      ::Reflex::Type t20 = ::Reflex::FunctionTypeBuilder(type_2993, type_38864);      ::Reflex::FunctionBuilder(t20, Reflex::Literal("reco::JetExtendedAssociation::allJets"), function_27479, 0, Reflex::Literal(""), ::Reflex::PUBLIC);
      ::Reflex::Type t21 = ::Reflex::FunctionTypeBuilder(type_1569, type_38864, type_37742);      ::Reflex::FunctionBuilder(t21, Reflex::Literal("reco::JetExtendedAssociation::hasJet"), function_27483, 0, Reflex::Literal(";"), ::Reflex::PUBLIC);
      ::Reflex::Type t22 = ::Reflex::FunctionTypeBuilder(type_1569, type_38864, type_38629);      ::Reflex::FunctionBuilder(t22, Reflex::Literal("reco::JetExtendedAssociation::hasJet"), function_27484, 0, Reflex::Literal(";"), ::Reflex::PUBLIC);
      ::Reflex::Type t23 = ::Reflex::FunctionTypeBuilder(type_1569, type_38865, type_38629, type_14813);      ::Reflex::FunctionBuilder(t23, Reflex::Literal("reco::JetExtendedAssociation::setValue"), function_27485, 0, Reflex::Literal(";;"), ::Reflex::PUBLIC);
      ::Reflex::Type t24 = ::Reflex::FunctionTypeBuilder(type_1569, type_38866, type_38629, type_14813);      ::Reflex::FunctionBuilder(t24, Reflex::Literal("reco::JetExtendedAssociation::setValue"), function_27486, 0, Reflex::Literal(";;"), ::Reflex::PUBLIC);
      ::Reflex::Type t25 = ::Reflex::FunctionTypeBuilder(type_68, type_38864, type_37742);      ::Reflex::FunctionBuilder(t25, Reflex::Literal("reco::JetExtendedAssociation::tracksAtVertexNumber"), function_27487, 0, Reflex::Literal(";"), ::Reflex::PUBLIC);
      ::Reflex::Type t26 = ::Reflex::FunctionTypeBuilder(type_68, type_38864, type_38629);      ::Reflex::FunctionBuilder(t26, Reflex::Literal("reco::JetExtendedAssociation::tracksAtVertexNumber"), function_27488, 0, Reflex::Literal(";"), ::Reflex::PUBLIC);
      ::Reflex::Type t27 = ::Reflex::FunctionTypeBuilder(type_38867, type_38864, type_37742);      ::Reflex::FunctionBuilder(t27, Reflex::Literal("reco::JetExtendedAssociation::tracksAtVertexP4"), function_27490, 0, Reflex::Literal(";"), ::Reflex::PUBLIC);
      ::Reflex::Type t28 = ::Reflex::FunctionTypeBuilder(type_38867, type_38864, type_38629);      ::Reflex::FunctionBuilder(t28, Reflex::Literal("reco::JetExtendedAssociation::tracksAtVertexP4"), function_27491, 0, Reflex::Literal(";"), ::Reflex::PUBLIC);
      ::Reflex::Type t29 = ::Reflex::FunctionTypeBuilder(type_38867, type_38864, type_37742);      ::Reflex::FunctionBuilder(t29, Reflex::Literal("reco::JetExtendedAssociation::tracksAtCaloP4"), function_27492, 0, Reflex::Literal(";"), ::Reflex::PUBLIC);
      ::Reflex::Type t30 = ::Reflex::FunctionTypeBuilder(type_38867, type_38864, type_38629);      ::Reflex::FunctionBuilder(t30, Reflex::Literal("reco::JetExtendedAssociation::tracksAtCaloP4"), function_27493, 0, Reflex::Literal(";"), ::Reflex::PUBLIC);
      ::Reflex::Type t31 = ::Reflex::FunctionTypeBuilder(type_68, type_38864, type_37742);      ::Reflex::FunctionBuilder(t31, Reflex::Literal("reco::JetExtendedAssociation::tracksAtCaloNumber"), function_27496, 0, Reflex::Literal(";"), ::Reflex::PUBLIC);
      ::Reflex::Type t32 = ::Reflex::FunctionTypeBuilder(type_68, type_38864, type_38629);      ::Reflex::FunctionBuilder(t32, Reflex::Literal("reco::JetExtendedAssociation::tracksAtCaloNumber"), function_27497, 0, Reflex::Literal(";"), ::Reflex::PUBLIC);
    }
    ~Dictionaries() {
      type_1675.Unload(); // class StoredPileupJetIdentifier 
      type_2953.Unload(); // class std::vector<StoredPileupJetIdentifier> 
      type_7932.Unload(); // class reco::PFClusterJet 
      type_2962.Unload(); // class std::vector<reco::PFClusterJet> 
      type_7775.Unload(); // class reco::TrackJet 
      type_2970.Unload(); // class std::vector<reco::TrackJet> 
      type_4584.Unload(); // class edm::FwdPtr<reco::PFClusterJet> 
      type_4585.Unload(); // class edm::FwdPtr<reco::TrackJet> 
      type_4629.Unload(); // class edm::RefVector<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > 
      type_4639.Unload(); // class edm::RefVector<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > 
      type_4736.Unload(); // class edm::RefToBaseVector<reco::Jet> 
      type_4682.Unload(); // class edm::Wrapper<edm::RefToBaseVector<reco::Jet> > 
      type_4864.Unload(); // class edm::ValueMap<StoredPileupJetIdentifier> 
      type_4686.Unload(); // class edm::Wrapper<edm::ValueMap<StoredPileupJetIdentifier> > 
      type_4690.Unload(); // class edm::Wrapper<std::vector<reco::PFClusterJet> > 
      type_4696.Unload(); // class edm::Wrapper<std::vector<reco::TrackJet> > 
      type_4706.Unload(); // class edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > 
      type_4707.Unload(); // class edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > 
      type_4721.Unload(); // class edm::RefToBaseProd<reco::Jet> 
      type_12876.Unload(); // class reco::JetExtendedAssociation::JetExtendedData 
      type_4858.Unload(); // class edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> 
      type_4859.Unload(); // class edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> 
      type_4860.Unload(); // class edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> 
      type_4874.Unload(); // class edm::RefProd<std::vector<reco::PFClusterJet> > 
      type_4876.Unload(); // class edm::RefProd<std::vector<reco::TrackJet> > 
      type_4891.Unload(); // class edm::RefToBase<reco::Jet> 
      type_4921.Unload(); // class edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > 
      type_4924.Unload(); // class edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > 
      type_7739.Unload(); // class reco::JetTrackMatch<std::vector<reco::PFClusterJet> > 
      type_7741.Unload(); // class reco::JetTrackMatch<std::vector<reco::TrackJet> > 
      type_22938.Unload(); // class edm::reftobase::BaseHolder<reco::Jet> 
      type_22948.Unload(); // class edm::reftobase::IndirectHolder<reco::Jet> 
      type_22951.Unload(); // class edm::reftobase::IndirectVectorHolder<reco::Jet> 
      type_22952.Unload(); // class edm::reftobase::BaseVectorHolder<reco::Jet> 
      type_22961.Unload(); // class edm::reftobase::Holder<reco::Candidate,edm::RefToBase<reco::Jet> > 
      type_22962.Unload(); // class edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > > 
      type_22964.Unload(); // class edm::reftobase::Holder<reco::Candidate,edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > > 
      type_2960.Unload(); // class std::vector<edm::FwdPtr<reco::PFClusterJet> > 
      type_2968.Unload(); // class std::vector<edm::FwdPtr<reco::TrackJet> > 
      type_2961.Unload(); // class std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > > 
      type_2969.Unload(); // class std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > > 
      type_4919.Unload(); // class edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > > 
      type_4618.Unload(); // class edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > > 
      type_2889.Unload(); // class std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > 
      type_2996.Unload(); // class std::vector<std::pair<edm::RefToBase<reco::Jet>,edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > > > 
      type_4871.Unload(); // class edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> > 
      type_4623.Unload(); // class edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > > 
      type_2998.Unload(); // class std::vector<std::pair<edm::RefToBase<reco::Jet>,float> > 
      type_4872.Unload(); // class edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> > 
      type_4920.Unload(); // class edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,float> > > 
      type_4613.Unload(); // class edm::RefVector<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > > 
      type_2995.Unload(); // class std::vector<reco::JetExtendedAssociation::JetExtendedData> 
      type_2888.Unload(); // class std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> 
      type_2994.Unload(); // class std::vector<std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > 
      type_4870.Unload(); // class edm::RefProd<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> > 
      type_4918.Unload(); // class edm::Ref<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData>,edm::refhelper::FindUsingAdvance<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference>,std::pair<edm::RefToBase<reco::Jet>,reco::JetExtendedAssociation::JetExtendedData> > > 
      type_4683.Unload(); // class edm::Wrapper<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<reco::JetExtendedAssociation::JetExtendedData>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> > 
      type_4684.Unload(); // class edm::Wrapper<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<edm::RefVector<std::vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<std::vector<reco::Track>,reco::Track> > >,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> > 
      type_4685.Unload(); // class edm::Wrapper<edm::AssociationVector<edm::RefToBaseProd<reco::Jet>,std::vector<float>,edm::RefToBase<reco::Jet>,unsigned int,edm::helper::AssociationIdenticalKeyReference> > 
      type_4687.Unload(); // class edm::Wrapper<std::vector<edm::FwdPtr<reco::PFClusterJet> > > 
      type_4688.Unload(); // class edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > > > 
      type_4689.Unload(); // class edm::Wrapper<edm::RefVector<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > > 
      type_4693.Unload(); // class edm::Wrapper<std::vector<edm::FwdPtr<reco::TrackJet> > > 
      type_4694.Unload(); // class edm::Wrapper<std::vector<edm::FwdRef<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > > > 
      type_4695.Unload(); // class edm::Wrapper<edm::RefVector<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > > 
      type_22942.Unload(); // class edm::reftobase::RefHolder<edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > > 
      type_22943.Unload(); // class edm::reftobase::RefHolder<edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > > 
      type_22944.Unload(); // class edm::reftobase::RefHolder<edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > 
      type_22945.Unload(); // class edm::reftobase::RefHolder<edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > > 
      type_22946.Unload(); // class edm::reftobase::RefHolder<edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > > 
      type_22947.Unload(); // class edm::reftobase::RefHolder<edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > 
      type_22955.Unload(); // class edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::PFClusterJet>,reco::PFClusterJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFClusterJet>,reco::PFClusterJet> > > 
      type_22956.Unload(); // class edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::TrackJet>,reco::TrackJet,edm::refhelper::FindUsingAdvance<std::vector<reco::TrackJet>,reco::TrackJet> > > 
      type_22957.Unload(); // class edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::PFJet>,reco::PFJet,edm::refhelper::FindUsingAdvance<std::vector<reco::PFJet>,reco::PFJet> > > 
      type_22958.Unload(); // class edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::GenJet>,reco::GenJet,edm::refhelper::FindUsingAdvance<std::vector<reco::GenJet>,reco::GenJet> > > 
      type_22959.Unload(); // class edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::JPTJet>,reco::JPTJet,edm::refhelper::FindUsingAdvance<std::vector<reco::JPTJet>,reco::JPTJet> > > 
      type_22960.Unload(); // class edm::reftobase::Holder<reco::Jet,edm::Ref<std::vector<reco::CaloJet>,reco::CaloJet,edm::refhelper::FindUsingAdvance<std::vector<reco::CaloJet>,reco::CaloJet> > > 
    }
  };
  static Dictionaries instance;
}
} // unnamed namespace
