// g++ -Wall -o analyzer `root-config --cflags --glibs` analyzer.cpp
#include <iostream>
#include <fstream>
#include <cstdio>
#include <cstdlib>

#include "TROOT.h"
#include "TSystem.h"
#include "TKey.h"
#include "TFile.h"
#include "TTree.h"
#include "TChain.h"
#include "TH1F.h"
#include "TF1.h"
#include "TH2F.h"
#include "TString.h"
#include "TCut.h"
#include "TMath.h"
#include "TApplication.h"
#include "TError.h"
#include "TCanvas.h"
#include "TGraphErrors.h"
#include "TPad.h"
#include "TStyle.h"
#include <TString.h>
#include <TPaveStats.h>
#include <TLegend.h>
#include "TGraph.h"

using namespace std;


void Read_Tree(std::string runN[]);

// -----------------------------------------------------

void step1_analyzer_MakeHisto()
{

// for June, Pion, 300um 
const int N_runs = 5;

std::string runN[N_runs];


// d = 300 um
runN[0] = "4298"; 
runN[1] = "4299";
runN[2] = "4300";
runN[3] = "4301";
runN[4] = "4302";

Read_Tree(runN);




}

// -----------------------------------------------------

void Read_Tree(std::string runN[] ){

  std::string inputFolder = "/store/group/upgrade/HGCAL/TimingTB_H2_Apr2016/June2016/recoTrees_v2/";


  TChain* tree = new TChain("H4treeReco"); 

  int N_runs = runN->size(); 
  cout<<"N_runs: "<< N_runs << endl;

  for(int i=0;i<N_runs;i++){

    tree->Add(("root://eoscms/"+inputFolder+"RECO_"+runN[i]+".root").c_str());
  }



  Long64_t nentries = tree->GetEntries();
  std::cout << " Tree loaded events = " << nentries << std::endl;

  //Tree variables

  UInt_t nwc;
  Float_t wc_recox[16], wc_recoy[16];
  UInt_t maxch;
  Float_t group[100],ch[100];
  Float_t pedestal[100], pedestalRMS[100], pedestalSlope[100];
  Float_t wave_max[100], wave_max_aft[100], wave_aroundmax[100][50], time_aroundmax[100][50], wave_aroundPed[100][50], time_aroundPed[100][50];
  Float_t charge_integ[100], charge_integ_max[100], charge_integ_fix[100];
  Float_t charge_integ_smallw[100], charge_integ_smallw_noise[100], charge_integ_largew[100], charge_integ_largew_noise[100];
  Float_t t_max[100], t_max_frac30[100], t_max_frac50[100], t_at_threshold[100], t_over_threshold[100];


  //Read tree
  tree->SetBranchAddress("nwc",       &nwc);
  tree->SetBranchAddress("wc_recox",   wc_recox);
  tree->SetBranchAddress("wc_recoy",   wc_recoy);

  tree->SetBranchAddress("maxch",               &maxch);
  tree->SetBranchAddress("group",                group);
  tree->SetBranchAddress("ch",                   ch);
  tree->SetBranchAddress("pedestal",             pedestal);
  tree->SetBranchAddress("pedestalRMS",          pedestalRMS);
  tree->SetBranchAddress("pedestalSlope",        pedestalSlope);
  tree->SetBranchAddress("wave_max",             wave_max);
  tree->SetBranchAddress("wave_max_aft",         wave_max_aft);
  tree->SetBranchAddress("wave_aroundmax",       wave_aroundmax);
  tree->SetBranchAddress("time_aroundmax",       time_aroundmax);
  tree->SetBranchAddress("wave_aroundPed",       wave_aroundPed);
  tree->SetBranchAddress("time_aroundPed",       time_aroundPed);

  tree->SetBranchAddress("charge_integ",         charge_integ);
  tree->SetBranchAddress("charge_integ_max",     charge_integ_max);
  tree->SetBranchAddress("charge_integ_fix",     charge_integ_fix);
  tree->SetBranchAddress("charge_integ_smallw",  charge_integ_smallw);
  tree->SetBranchAddress("charge_integ_largew",  charge_integ_largew);
  tree->SetBranchAddress("charge_integ_smallw_noise",  charge_integ_smallw_noise);
  tree->SetBranchAddress("charge_integ_largew_noise",  charge_integ_largew_noise);
  tree->SetBranchAddress("t_max",                t_max);
  tree->SetBranchAddress("t_max_frac30",         t_max_frac30);
  tree->SetBranchAddress("t_max_frac50",         t_max_frac50);
  tree->SetBranchAddress("t_at_threshold",       t_at_threshold);
  tree->SetBranchAddress("t_over_threshold",     t_over_threshold);

  // before loop

  TString Pad_name[7] = {"Trigger","SiPad1","SiPad2","SiPad3","SiPad4","SiPad5","SiPad6"};
  TString h_name;

  TH1F* h_wave_max[7];
  TH1F* h_pedestal[7];
  TH1F* h_pedestalRMS[7];
  TH2F* h_wave_max_vs_pedestalRMS[7];

  for(int i=0;i<7;i++){

    h_name = "h_wave_max_"    + Pad_name[i];
    h_wave_max[i]    = new TH1F(h_name, h_name, 2000  , -1000 ,1000   );

    h_name = "h_pedestal_"    + Pad_name[i];
    h_pedestal[i]    = new TH1F(h_name, h_name, 1000  , 3000 , 4000  );

    h_name = "h_pedestalRMS_" + Pad_name[i];
    h_pedestalRMS[i] = new TH1F(h_name, h_name, 60  , 0 , 60   );

    h_name = "h_wave_max_vs_pedestalRMS_" + Pad_name[i];
    h_wave_max_vs_pedestalRMS[i] = new TH2F(h_name, h_name, 300  , 0 , 300, 60  , 0 , 60   );

  }


  int N_plot_aroundPed =10;
  int counter = 0;
  TGraph* gr_aroundPed[N_plot_aroundPed][7]; 
  TH1F* h_wave_aroundPed[N_plot_aroundPed][7];
  int event_index[N_plot_aroundPed];
  

  //loop over entries
  for (Long64_t jentry=0; jentry<nentries; ++jentry){

    if(jentry>1000)break;

    if (jentry % 5000 == 0)
         fprintf(stderr, "Processing event %lli of %lli\n", jentry + 1, nentries );

    //readout the event                                                               
    tree->GetEntry(jentry);

    for(int i=1;i<7;i++){

      h_wave_max[i]   ->Fill( wave_max[i]   );
      h_pedestal[i]   ->Fill( pedestal[i]   );
      h_pedestalRMS[i]->Fill( pedestalRMS[i]);
      h_wave_max_vs_pedestalRMS[i]->Fill( wave_max[i] , pedestalRMS[i]);    

    }
    
    // save time/wave_max aroundPed

    if( counter< N_plot_aroundPed){

      double Time_aroundPed[7][50]; double Wave_aroundPed[7][50];

      for(int i=1;i<7;i++){    

        
        int temp_index = jentry;
        TString temp = Form("the %d-th event" , temp_index ); 
        TString h_name2 = "h_wave_aroundPed_"    + Pad_name[i] + temp;
        h_wave_aroundPed[counter][i] = new TH1F(h_name2, h_name2, 1000  , 3000 , 4000  );

        for(int j=0;j<50;j++){
//          cout<<"time_aroundPed[i][j]: "<< time_aroundPed[i][j]<< endl;
//          cout<<"wave_aroundPed[i][j]: "<< wave_aroundPed[i][j]<< endl;

            Time_aroundPed[i][j] = time_aroundPed[i][j] * 1000000000; 
            Wave_aroundPed[i][j] = wave_aroundPed[i][j];

            h_wave_aroundPed[counter][i]->Fill(  wave_aroundPed[i][j]  );
        }

        gr_aroundPed[counter][i] = new TGraph(50, Time_aroundPed[i] , Wave_aroundPed[i] );	  

      }

      event_index[counter] = jentry; 
      counter++;
    }

  }// end event loop


  // wave aroundPed


  for(int counter_index =0; counter_index<N_plot_aroundPed; counter_index++){

      for(int i=1;i<7;i++){ 

        TString gr_title = "wave around Ped," + Pad_name[i];

        gr_aroundPed[counter_index][i]->SetTitle(gr_title);
	gr_aroundPed[counter_index][i]->GetXaxis()->SetTitle("time [ns]");
        gr_aroundPed[counter_index][i]->GetYaxis()->SetTitle("wave amplitude [ADC]");
        gr_aroundPed[counter_index][i]->GetYaxis()->SetTitleOffset(1.3);


        h_wave_aroundPed[counter_index][i]->GetXaxis()->SetRangeUser(3650, 3800);
      }
  }

//        TString event_number = Form("the %d-th event" , event_index[counter_index] );
//        TLegend *leg = new TLegend(0.1,0.8,0.4,0.9);
//        leg->SetHeader(event_number);        leg->Draw();



  TCanvas *c1 = new TCanvas("c1","",200,10,700,500);  
  c1->cd();
  gr_aroundPed[0][1]->Draw(); 
 
  TCanvas *c2 = new TCanvas("c2","",200,10,700,500);
  c2->cd();
  h_wave_aroundPed[0][1]->Draw();


  // save histogram

  TString root_name = "root_files/Pion_300um_combine.root";

  TFile* outFile = new TFile(root_name,"recreate"); 

  for(int i=1;i<7;i++){

    h_wave_max_vs_pedestalRMS[i]->GetYaxis()->SetTitle("wave_max [ADC]");
    h_wave_max_vs_pedestalRMS[i]->GetXaxis()->SetTitle("pedestalRMS [ADC]");

    h_wave_max[i]   ->Write();
    h_pedestal[i]   ->Write();
    h_pedestalRMS[i]->Write();
    h_wave_max_vs_pedestalRMS[i]->Write();
  }



  // delete pointer 
  delete outFile;

  for(int i=0;i<7;i++){

    delete h_wave_max[i];
    delete h_pedestal[i];
    delete h_pedestalRMS[i];
    delete h_wave_max_vs_pedestalRMS[i];
  }


}// end Read_Tree



